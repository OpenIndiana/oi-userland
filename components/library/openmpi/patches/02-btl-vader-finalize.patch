From 4946570b242634a09e1464c6025267907193f53b Mon Sep 17 00:00:00 2001
From: George Bosilca <bosilca@icl.utk.edu>
Date: Fri, 3 Aug 2018 15:39:01 -0400
Subject: [PATCH] Remove few warnings identified by @rhc in #5514.

Signed-off-by: George Bosilca <bosilca@icl.utk.edu>

(cherry picked from commit open-mpi/ompi@6d11a45f44b91babcdf0ce864afe8530521d0eb2)
---
 ompi/mca/coll/libnbc/nbc.c                                 | 2 --
 ompi/mca/topo/treematch/topo_treematch_dist_graph_create.c | 2 +-
 ompi/mca/topo/treematch/treematch/tm_topology.c            | 7 +++++++
 ompi/mca/topo/treematch/treematch/tm_tree.c                | 6 ++----
 opal/mca/btl/vader/btl_vader_component.c                   | 5 ++++-
 5 files changed, 14 insertions(+), 8 deletions(-)

diff --git a/ompi/mca/coll/libnbc/nbc.c b/ompi/mca/coll/libnbc/nbc.c
index 5b48d6b9315..039e6d4c9b0 100644
--- a/ompi/mca/coll/libnbc/nbc.c
+++ b/ompi/mca/coll/libnbc/nbc.c
@@ -319,8 +319,6 @@ int NBC_Progress(NBC_Handle *handle) {
   bool flag;
   unsigned long size = 0;
   char *delim;
-  int i;
-  ompi_status_public_t status;
 
   if (handle->nbc_complete) {
     return NBC_OK;
diff --git a/ompi/mca/topo/treematch/topo_treematch_dist_graph_create.c b/ompi/mca/topo/treematch/topo_treematch_dist_graph_create.c
index 891a5b041be..a2b53be0667 100644
--- a/ompi/mca/topo/treematch/topo_treematch_dist_graph_create.c
+++ b/ompi/mca/topo/treematch/topo_treematch_dist_graph_create.c
@@ -135,7 +135,7 @@ int mca_topo_treematch_dist_graph_create(mca_topo_base_module_t* topo_module,
     int *lindex_to_grank = NULL;
     int *nodes_roots = NULL, *k = NULL;
     int *localrank_to_objnum  = NULL;
-    int depth, effective_depth = 0, obj_rank = -1;
+    int depth = 0, effective_depth = 0, obj_rank = -1;
     int num_objs_in_node = 0, num_pus_in_node = 0;
     int numlevels = 0, num_nodes = 0, num_procs_in_node = 0;
     int rank, size, newrank = -1, hwloc_err, i, j, idx;
diff --git a/ompi/mca/topo/treematch/treematch/tm_topology.c b/ompi/mca/topo/treematch/treematch/tm_topology.c
index 4445b45634c..1ecf51657b8 100644
--- a/ompi/mca/topo/treematch/treematch/tm_topology.c
+++ b/ompi/mca/topo/treematch/treematch/tm_topology.c
@@ -141,7 +141,14 @@ double ** topology_to_arch(hwloc_topology_t topology)
   double **arch = NULL;
 
   nb_proc = hwloc_get_nbobjs_by_type(topology, HWLOC_OBJ_PU);
+  if( nb_proc <= 0 ) {  /* if multiple levels with PUs */
+      return NULL;
+  }
   arch = (double**)MALLOC(sizeof(double*)*nb_proc);
+  if( NULL == arch ) {
+      return NULL;
+  }
+
   for( i = 0 ; i < nb_proc ; i++ ){
     obj_proc1 = hwloc_get_obj_by_type(topology,HWLOC_OBJ_PU,i);
     arch[obj_proc1->os_index] = (double*)MALLOC(sizeof(double)*nb_proc);
diff --git a/ompi/mca/topo/treematch/treematch/tm_tree.c b/ompi/mca/topo/treematch/treematch/tm_tree.c
index ffac4e7615b..35fc2aa2fef 100644
--- a/ompi/mca/topo/treematch/treematch/tm_tree.c
+++ b/ompi/mca/topo/treematch/treematch/tm_tree.c
@@ -918,7 +918,7 @@ static void  partial_exhaustive_search(int nb_args, void **args, int thread_id){
   work_unit_t *work = (work_unit_t *) args[7];
   pthread_mutex_t *lock = (pthread_mutex_t *) args[8];
   int *tab_i;
-  int id, id1, id2;
+  int id = 0, id1, id2;
   int total_work = work->nb_work;
   int cur_work = 0;
 
@@ -1750,7 +1750,6 @@ void group_nodes(tm_affinity_mat_t *aff_mat, tm_tree_t *tab_node, tm_tree_t *new
   int mat_order = aff_mat -> order;
   tm_tree_t **cur_group = NULL;
   int j, l;
-  unsigned long int list_size; 
   unsigned long int  i;
   group_list_t list, **best_selection = NULL, **tab_group = NULL;
   double best_val, last_best;
@@ -1810,8 +1809,7 @@ void group_nodes(tm_affinity_mat_t *aff_mat, tm_tree_t *tab_node, tm_tree_t *new
     best_selection = (group_list_t **)MALLOC(sizeof(group_list_t*)*solution_size);
 
     list_all_possible_groups(cost_mat, tab_node, 0, arity, 0, cur_group, &list);
-    list_size = (int)list.val;
-    assert( list_size == nb_groups);
+    assert( nb_groups == (unsigned long int)list.val );
     tab_group = (group_list_t**)MALLOC(sizeof(group_list_t*)*nb_groups);
     list_to_tab(list.next, tab_group, nb_groups);
     if(verbose_level>=INFO)
diff --git a/opal/mca/btl/vader/btl_vader_component.c b/opal/mca/btl/vader/btl_vader_component.c
index 892e6a1452d..5a163f637ab 100644
--- a/opal/mca/btl/vader/btl_vader_component.c
+++ b/opal/mca/btl/vader/btl_vader_component.c
@@ -375,6 +375,7 @@ static int mca_btl_base_vader_modex_send (void)
     return rc;
 }
 
+#if OPAL_BTL_VADER_HAVE_XPMEM || OPAL_BTL_VADER_HAVE_CMA || OPAL_BTL_VADER_HAVE_KNEM
 static void mca_btl_vader_select_next_single_copy_mechanism (void)
 {
     for (int i = 0 ; single_copy_mechanisms[i].value != MCA_BTL_VADER_NONE ; ++i) {
@@ -384,10 +385,13 @@ static void mca_btl_vader_select_next_single_copy_mechanism (void)
         }
     }
 }
+#endif
 
 static void mca_btl_vader_check_single_copy (void)
 {
+#if OPAL_BTL_VADER_HAVE_XPMEM || OPAL_BTL_VADER_HAVE_CMA || OPAL_BTL_VADER_HAVE_KNEM
     int initial_mechanism = mca_btl_vader_component.single_copy_mechanism;
+#endif
 
     /* single-copy emulation is always used to support AMO's right now */
     mca_btl_vader_sc_emu_init ();
@@ -531,7 +535,6 @@ static mca_btl_base_module_t **mca_btl_vader_component_init (int *num_btls,
     mca_btl_vader_check_single_copy ();
 
     if (MCA_BTL_VADER_XPMEM != mca_btl_vader_component.single_copy_mechanism) {
-        const char *base_dir = opal_process_info.proc_session_dir;
         char *sm_file;
 
         rc = asprintf(&sm_file, "%s" OPAL_PATH_SEP "vader_segment.%s.%x.%d", mca_btl_vader_component.backing_directory,
From 70a864fce39d6e69a301bb324a69e80b41011c57 Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Wed, 27 Mar 2019 11:55:27 +0900
Subject: [PATCH] btl/vader: fix finalize sequence

free the component mpool in mca_btl_vader_component_close()
and after freeing soem objects that depend on it such as
mca_btl_vader_component.vader_frags_user

Thanks Christoph Niethammer for reporting this.

Refs. open-mpi/ompi#6524

Signed-off-by: Gilles Gouaillardet <gilles@rist.or.jp>

(cherry picked from commit open-mpi/ompi@77060cad0781926a83f635c3660c743320ce0264)
---
 opal/mca/btl/vader/btl_vader_component.c | 9 +++++++--
 opal/mca/btl/vader/btl_vader_module.c    | 9 ++-------
 2 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/opal/mca/btl/vader/btl_vader_component.c b/opal/mca/btl/vader/btl_vader_component.c
index 11197259973..892e6a1452d 100644
--- a/opal/mca/btl/vader/btl_vader_component.c
+++ b/opal/mca/btl/vader/btl_vader_component.c
@@ -16,8 +16,8 @@
  *                         All rights reserved.
  * Copyright (c) 2011      NVIDIA Corporation.  All rights reserved.
  * Copyright (c) 2014-2018 Intel, Inc. All rights reserved.
- * Copyright (c) 2014-2018 Research Organization for Information Science
- *                         and Technology (RIST). All rights reserved.
+ * Copyright (c) 2014-2019 Research Organization for Information Science
+ *                         and Technology (RIST).  All rights reserved.
  * Copyright (c) 2018      Amazon.com, Inc. or its affiliates.  All Rights reserved.
  * Copyright (c) 2018      Triad National Security, LLC. All rights
  *                         reserved.
@@ -341,6 +341,11 @@ static int mca_btl_vader_component_close(void)
     mca_btl_vader_knem_fini ();
 #endif
 
+    if (mca_btl_vader_component.mpool) {
+        mca_btl_vader_component.mpool->mpool_finalize (mca_btl_vader_component.mpool);
+        mca_btl_vader_component.mpool = NULL;
+    }
+
     return OPAL_SUCCESS;
 }
 
diff --git a/opal/mca/btl/vader/btl_vader_module.c b/opal/mca/btl/vader/btl_vader_module.c
index 36ec1f00610..a1cd167e222 100644
--- a/opal/mca/btl/vader/btl_vader_module.c
+++ b/opal/mca/btl/vader/btl_vader_module.c
@@ -15,8 +15,8 @@
  * Copyright (c) 2010-2015 Los Alamos National Security, LLC. All rights
  *                         reserved.
  * Copyright (c) 2014-2015 Intel, Inc. All rights reserved.
- * Copyright (c) 2014-2015 Research Organization for Information Science
- *                         and Technology (RIST). All rights reserved.
+ * Copyright (c) 2014-2019 Research Organization for Information Science
+ *                         and Technology (RIST).  All rights reserved.
  * Copyright (c) 2018-2019 Triad National Security, LLC. All rights
  *                         reserved.
  * $COPYRIGHT$
@@ -380,11 +380,6 @@ static int vader_finalize(struct mca_btl_base_module_t *btl)
     }
 #endif
 
-    if (component->mpool) {
-        component->mpool->mpool_finalize (component->mpool);
-        component->mpool = NULL;
-    }
-
     return OPAL_SUCCESS;
 }
 
