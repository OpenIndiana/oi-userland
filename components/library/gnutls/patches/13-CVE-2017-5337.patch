Backport of:

From 6231a4a087f9fdbd5f5f274e80c7a71e3e45b9c8 Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos <nmav@redhat.com>
Date: Wed, 4 Jan 2017 14:42:03 +0100
Subject: [PATCH] opencdk: read_attribute: added more precise checks when reading stream

That addresses heap read overflows found using oss-fuzz:
  https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=338
  https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=346

Signed-off-by: Nikos Mavrogiannopoulos <nmav@redhat.com>
---
 lib/opencdk/read-packet.c | 40 +++++++++++++++++++++++++++++-----------
 1 file changed, 29 insertions(+), 11 deletions(-)

Index: gnutls26-2.12.23/lib/opencdk/read-packet.c
===================================================================
--- gnutls26-2.12.23.orig/lib/opencdk/read-packet.c	2017-01-26 13:38:47.945563869 -0500
+++ gnutls26-2.12.23/lib/opencdk/read-packet.c	2017-01-26 13:41:56.363993565 -0500
@@ -495,14 +495,23 @@
   rc = stream_read (inp, buf, pktlen, &nread);
   if (rc)
     {
-      cdk_free (buf);
-      return CDK_Inv_Packet;
+      gnutls_assert();
+      rc = CDK_Inv_Packet;
+      goto error;
     }
+
   p = buf;
   len = *p++;
   pktlen--;
+
   if (len == 255)
     {
+      if (pktlen < 4) {
+        gnutls_assert();
+        rc = CDK_Inv_Packet;
+        goto error;
+      }
+
       len = _cdk_buftou32 (p);
       p += 4;
       pktlen -= 4;
@@ -511,34 +520,44 @@
     {
       if (pktlen < 2)
         {
-          cdk_free (buf);
-          return CDK_Inv_Packet;
+          gnutls_assert();
+          rc = CDK_Inv_Packet;
+          goto error;
         }
+
       len = ((len - 192) << 8) + *p + 192;
       p++;
       pktlen--;
     }
 
-  if (*p != 1)                  /* Currently only 1, meaning an image, is defined. */
-    {
-      cdk_free (buf);
-      return CDK_Inv_Packet;
-    }
+  if (!len || *p != 1) {		/* Currently only 1, meaning an image, is defined. */
+    rc = CDK_Inv_Packet;
+    goto error;
+  }
+
   p++;
   len--;
 
-  if (len >= pktlen)
-    return CDK_Inv_Packet;
+  if (len >= pktlen) {
+    rc = CDK_Inv_Packet;
+    goto error;
+  }
+
   attr->attrib_img = cdk_calloc (1, len);
   if (!attr->attrib_img)
     {
-      cdk_free (buf);
-      return CDK_Out_Of_Core;
+      rc = CDK_Out_Of_Core;
+      goto error;
     }
+
   attr->attrib_len = len;
   memcpy (attr->attrib_img, p, len);
   cdk_free (buf);
   return rc;
+
+ error:
+  cdk_free(buf);
+  return rc;
 }
 
 
