--- a/Source/JavaScriptCore/wasm/WasmSectionParser.cpp	2023-08-09 09:49:33.123924000 +0000
+++ b/Source/JavaScriptCore/wasm/WasmSectionParser.cpp	2023-09-15 17:26:32.376874342 +0000
@@ -93,7 +93,7 @@
             break;
         }
         default:
-            return fail(i, "th Type is non-Func, non-Struct, and non-Array ", typeKind);
+            return fail(i, "th Type is non-Func, non-Struct, and non-Array ", (signed char)typeKind);
         }
 
         WASM_PARSER_FAIL_IF(!signature, "can't allocate enough memory for Type section's ", i, "th signature");
@@ -812,7 +812,7 @@
         packedType = static_cast<PackedType>(kind);
         return { };
     }
-    return fail("expected a packed type but got ", kind);
+    return fail("expected a packed type but got ", (signed char)kind);
 }
 
 auto SectionParser::parseStorageType(StorageType& storageType) -> PartialResult
@@ -915,7 +915,7 @@
             break;
         }
         default:
-            return fail(i, "th Type is non-Func, non-Struct, and non-Array ", typeKind);
+            return fail(i, "th Type is non-Func, non-Struct, and non-Array ", (signed char)typeKind);
         }
 
         WASM_PARSER_FAIL_IF(!signature, "can't allocate enough memory for recursion group's ", i, "th signature");
@@ -1076,7 +1076,7 @@
         break;
     }
     default:
-        return fail("invalid structural type definition for subtype ", typeKind);
+        return fail("invalid structural type definition for subtype ", (signed char)typeKind);
     }
 
     // When no supertypes are specified, we will normalize type definitions to
