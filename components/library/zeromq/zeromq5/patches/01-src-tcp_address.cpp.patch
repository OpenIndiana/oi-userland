Fix relaxed use of sizeof()
This patch would hopefully not be needed after zeromq-4.1.5 (posted to upstream)

--- zeromq-4.1.4/src/tcp_address.cpp.orig	2015-12-18 09:21:09.000000000 +0100
+++ zeromq-4.1.4/src/tcp_address.cpp	2016-03-29 17:32:32.335940558 +0200
@@ -86,7 +86,7 @@
     //  Find the interface with the specified name and AF_INET family.
     bool found = false;
     lifreq *ifrp = ifc.lifc_req;
-    for (int n = 0; n < (int) (ifc.lifc_len / sizeof lifreq);
+    for (int n = 0; n < (int) (ifc.lifc_len / sizeof (struct lifreq) );
           n ++, ifrp ++) {
         if (!strcmp (nic_, ifrp->lifr_name)) {
             rc = ioctl (fd, SIOCGLIFADDR, (char*) ifrp);
@@ -132,10 +132,10 @@
     struct ifreq ifr;
 
     //  Copy interface name for ioctl get.
-    strncpy (ifr.ifr_name, nic_, sizeof ifr.ifr_name);
+    strncpy (ifr.ifr_name, nic_, sizeof (ifr.ifr_name) );
 
     //  Fetch interface address.
-    const int rc = ioctl (sd, SIOCGIFADDR, (caddr_t) &ifr, sizeof ifr);
+    const int rc = ioctl (sd, SIOCGIFADDR, (caddr_t) &ifr, sizeof (ifr) );
 
     //  Clean up.
     close (sd);
@@ -231,23 +231,23 @@
     //  with the address.
     if (ipv6_) {
         sockaddr_in6 ip6_addr;
-        memset (&ip6_addr, 0, sizeof ip6_addr);
+        memset (&ip6_addr, 0, sizeof (ip6_addr) );
         ip6_addr.sin6_family = AF_INET6;
-        memcpy (&ip6_addr.sin6_addr, &in6addr_any, sizeof in6addr_any);
-        out_addrlen = sizeof ip6_addr;
+        memcpy (&ip6_addr.sin6_addr, &in6addr_any, sizeof (in6addr_any) );
+        out_addrlen = sizeof (ip6_addr);
         memcpy (out_addr, &ip6_addr, out_addrlen);
     }
     else {
         sockaddr_in ip4_addr;
-        memset (&ip4_addr, 0, sizeof ip4_addr);
+        memset (&ip4_addr, 0, sizeof (ip4_addr) );
         ip4_addr.sin_family = AF_INET;
         ip4_addr.sin_addr.s_addr = htonl (INADDR_ANY);
-        out_addrlen = sizeof ip4_addr;
+        out_addrlen = sizeof (ip4_addr);
         memcpy (out_addr, &ip4_addr, out_addrlen);
     }
     //  "*" resolves to INADDR_ANY or in6addr_any.
     if (strcmp (interface_, "*") == 0) {
-        zmq_assert (out_addrlen <= sizeof address);
+        zmq_assert (out_addrlen <= sizeof (address) );
         if (is_src_)
             memcpy (&source_address, out_addr, out_addrlen);
         else
@@ -268,7 +268,7 @@
     addrinfo *res = NULL;
     addrinfo req;
 #endif
-    memset (&req, 0, sizeof req);
+    memset (&req, 0, sizeof (req) );
 
     //  Choose IPv4 or IPv6 protocol family. Note that IPv6 allows for
     //  IPv4-in-IPv6 addresses.
@@ -301,7 +301,7 @@
 
     //  Use the first result.
     zmq_assert (res != NULL);
-    zmq_assert ((size_t) res->ai_addrlen <= sizeof address);
+    zmq_assert ((size_t) res->ai_addrlen <= sizeof (address) );
     if (is_src_)
         memcpy (&source_address, res->ai_addr, res->ai_addrlen);
     else
@@ -321,7 +321,7 @@
 #else
     addrinfo req;
 #endif
-    memset (&req, 0, sizeof req);
+    memset (&req, 0, sizeof (req) );
 
     //  Choose IPv4 or IPv6 protocol family. Note that IPv6 allows for
     //  IPv4-in-IPv6 addresses.
@@ -362,7 +362,7 @@
     }
 
     //  Copy first result to output addr with hostname and service.
-    zmq_assert ((size_t) res->ai_addrlen <= sizeof address);
+    zmq_assert ((size_t) res->ai_addrlen <= sizeof (address) );
     if (is_src_)
         memcpy (&source_address, res->ai_addr, res->ai_addrlen);
     else
@@ -376,8 +376,8 @@
 zmq::tcp_address_t::tcp_address_t () :
     _has_src_addr (false)
 {
-    memset (&address, 0, sizeof address);
-    memset (&source_address, 0, sizeof source_address);
+    memset (&address, 0, sizeof (address) );
+    memset (&source_address, 0, sizeof (source_address) );
 }
 
 zmq::tcp_address_t::tcp_address_t (const sockaddr *sa, socklen_t sa_len) :
@@ -385,13 +385,13 @@
 {
     zmq_assert (sa && sa_len > 0);
 
-    memset (&address, 0, sizeof address);
-    memset (&source_address, 0, sizeof source_address);
-    if (sa->sa_family == AF_INET && sa_len >= (socklen_t) sizeof address.ipv4)
-        memcpy (&address.ipv4, sa, sizeof address.ipv4);
+    memset (&address, 0, sizeof (address) );
+    memset (&source_address, 0, sizeof (source_address) );
+    if (sa->sa_family == AF_INET && sa_len >= (socklen_t) sizeof (address.ipv4) )
+        memcpy (&address.ipv4, sa, sizeof (address.ipv4) );
     else
-    if (sa->sa_family == AF_INET6 && sa_len >= (socklen_t) sizeof address.ipv6)
-        memcpy (&address.ipv6, sa, sizeof address.ipv6);
+    if (sa->sa_family == AF_INET6 && sa_len >= (socklen_t) sizeof (address.ipv6) )
+        memcpy (&address.ipv6, sa, sizeof (address.ipv6) );
 }
 
 zmq::tcp_address_t::~tcp_address_t ()
@@ -501,7 +501,7 @@
     //  Not using service resolv because of
     //  https://github.com/zeromq/libzmq/commit/1824574f9b5a8ce786853320e3ea09fe1f822bc4
     char hbuf [NI_MAXHOST];
-    int rc = getnameinfo (addr (), addrlen (), hbuf, sizeof hbuf, NULL, 0, NI_NUMERICHOST);
+    int rc = getnameinfo (addr (), addrlen (), hbuf, sizeof (hbuf), NULL, 0, NI_NUMERICHOST);
     if (rc != 0) {
         addr_.clear ();
         return rc;
@@ -528,9 +528,9 @@
 socklen_t zmq::tcp_address_t::addrlen () const
 {
     if (address.generic.sa_family == AF_INET6)
-        return (socklen_t) sizeof address.ipv6;
+        return (socklen_t) sizeof (address.ipv6);
     else
-        return (socklen_t) sizeof address.ipv4;
+        return (socklen_t) sizeof (address.ipv4);
 }
 
 const sockaddr *zmq::tcp_address_t::src_addr () const
@@ -541,9 +541,9 @@
 socklen_t zmq::tcp_address_t::src_addrlen () const
 {
     if (address.generic.sa_family == AF_INET6)
-        return (socklen_t) sizeof source_address.ipv6;
+        return (socklen_t) sizeof (source_address.ipv6);
     else
-        return (socklen_t) sizeof source_address.ipv4;
+        return (socklen_t) sizeof (source_address.ipv4);
 }
 
 bool zmq::tcp_address_t::has_src_addr () const
@@ -633,7 +633,7 @@
     }
 
     char hbuf [NI_MAXHOST];
-    int rc = getnameinfo (addr (), addrlen (), hbuf, sizeof hbuf, NULL, 0, NI_NUMERICHOST);
+    int rc = getnameinfo (addr (), addrlen (), hbuf, sizeof (hbuf), NULL, 0, NI_NUMERICHOST);
     if (rc != 0) {
         addr_.clear ();
         return rc;
