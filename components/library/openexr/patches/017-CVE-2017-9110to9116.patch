Only cherry-picked fixes, tests cannot be imported as they add  binary files.

Ref: https://github.com/openexr/openexr/pull/233

From 749193265ac99956f01a2dd9b20f124f2f7859d0 Mon Sep 17 00:00:00 2001
From: Shawn Walker-Salas <shawn.walker@oracle.com>
Date: Tue, 30 May 2017 19:07:52 -0700
Subject: [PATCH] Add additional input validation in an attempt to resolve
 issue #232

---
 OpenEXR/IlmImf/ImfDwaCompressor.cpp              |   7 +-
 OpenEXR/IlmImf/ImfHuf.cpp                        |  10 +-
 OpenEXR/IlmImf/ImfPizCompressor.cpp              |   6 +
 OpenEXR/IlmImfTest/CMakeLists.txt                |   1 +
 OpenEXR/IlmImfTest/Makefile.am                   |   2 +
 OpenEXR/IlmImfTest/comp_bad_bounds_piz.exr       | Bin 0 -> 4785 bytes
 OpenEXR/IlmImfTest/comp_bad_neg_bounds_pxr24.exr | Bin 0 -> 3401 bytes
 OpenEXR/IlmImfTest/comp_bad_pos_bounds_piz.exr   | Bin 0 -> 569 bytes
 OpenEXR/IlmImfTest/comp_bad_pos_bounds_pxr24.exr | Bin 0 -> 231 bytes
 OpenEXR/IlmImfTest/comp_early_eof_piz.exr        | Bin 0 -> 740 bytes
 OpenEXR/IlmImfTest/comp_invalid_unknown.exr      | Bin 0 -> 786 bytes
 OpenEXR/IlmImfTest/comp_short_decode_piz.exr     | Bin 0 -> 3147 bytes
 OpenEXR/IlmImfTest/testMalformedImages.cpp       | 153 +++++++++++++++++++++++
 OpenEXR/IlmImfTest/testMalformedImages.h         |  37 ++++++
 14 files changed, 211 insertions(+), 5 deletions(-)
 create mode 100644 OpenEXR/IlmImfTest/comp_bad_bounds_piz.exr
 create mode 100644 OpenEXR/IlmImfTest/comp_bad_neg_bounds_pxr24.exr
 create mode 100644 OpenEXR/IlmImfTest/comp_bad_pos_bounds_piz.exr
 create mode 100644 OpenEXR/IlmImfTest/comp_bad_pos_bounds_pxr24.exr
 create mode 100644 OpenEXR/IlmImfTest/comp_early_eof_piz.exr
 create mode 100644 OpenEXR/IlmImfTest/comp_invalid_unknown.exr
 create mode 100644 OpenEXR/IlmImfTest/comp_short_decode_piz.exr
 create mode 100644 OpenEXR/IlmImfTest/testMalformedImages.cpp
 create mode 100644 OpenEXR/IlmImfTest/testMalformedImages.h

diff --git IlmImf/ImfDwaCompressor.cpp IlmImf/ImfDwaCompressor.cpp
index 4985be62..804cf6ca 100644
--- IlmImf/ImfDwaCompressor.cpp
+++ IlmImf/ImfDwaCompressor.cpp
@@ -2386,7 +2386,12 @@ DwaCompressor::uncompress
 
     const char *dataPtr            = inPtr + NUM_SIZES_SINGLE * sizeof(Int64);
 
-    if (inSize < headerSize + compressedSize) 
+    /* Both the sum and individual sizes are checked in case of overflow. */
+    if (inSize < (headerSize + compressedSize) ||
+        inSize < unknownCompressedSize ||
+        inSize < acCompressedSize ||
+        inSize < dcCompressedSize ||
+        inSize < rleCompressedSize)
     {
         throw Iex::InputExc("Error uncompressing DWA data"
                             "(truncated file).");
diff --git IlmImf/ImfHuf.cpp IlmImf/ImfHuf.cpp
index a375d05d..97909a5b 100644
--- IlmImf/ImfHuf.cpp
+++ IlmImf/ImfHuf.cpp
@@ -822,7 +822,7 @@ hufEncode				// return: output size (in bits)
 }
 
 
-#define getCode(po, rlc, c, lc, in, out, oe)	\
+#define getCode(po, rlc, c, lc, in, out, ob, oe)\
 {						\
     if (po == rlc)				\
     {						\
@@ -835,6 +835,8 @@ hufEncode				// return: output size (in bits)
 						\
 	if (out + cs > oe)			\
 	    tooMuchData();			\
+	else if (out - 1 < ob)			\
+	    notEnoughData();			\
 						\
 	unsigned short s = out[-1];		\
 						\
@@ -895,7 +897,7 @@ hufDecode
 		//
 
 		lc -= pl.len;
-		getCode (pl.lit, rlc, c, lc, in, out, oe);
+		getCode (pl.lit, rlc, c, lc, in, out, outb, oe);
 	    }
 	    else
 	    {
@@ -925,7 +927,7 @@ hufDecode
 			    //
 
 			    lc -= l;
-			    getCode (pl.p[j], rlc, c, lc, in, out, oe);
+			    getCode (pl.p[j], rlc, c, lc, in, out, outb, oe);
 			    break;
 			}
 		    }
@@ -952,7 +954,7 @@ hufDecode
 	if (pl.len)
 	{
 	    lc -= pl.len;
-	    getCode (pl.lit, rlc, c, lc, in, out, oe);
+	    getCode (pl.lit, rlc, c, lc, in, out, outb, oe);
 	}
 	else
 	{
diff --git IlmImf/ImfPizCompressor.cpp IlmImf/ImfPizCompressor.cpp
index 46c6fbac..8b3ee38c 100644
--- IlmImf/ImfPizCompressor.cpp
+++ IlmImf/ImfPizCompressor.cpp
@@ -573,6 +573,12 @@ PizCompressor::uncompress (const char *inPtr,
     int length;
     Xdr::read <CharPtrIO> (inPtr, length);
 
+    if (length > inSize)
+    {
+	throw InputExc ("Error in header for PIZ-compressed data "
+			"(invalid array length).");
+    }
+
     hufUncompress (inPtr, length, _tmpBuffer, tmpBufferEnd - _tmpBuffer);
 
     //
