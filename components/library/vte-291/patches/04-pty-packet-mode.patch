Provide PTY packet mode support for vte in OI.

Backported from upstream.

See https://gitlab.gnome.org/GNOME/vte/-/commit/8586e4292e76943a100a8039f5ce9e33e5984bb3


--- vte-0.54.5/configure.ac.~1~	2019-10-11 11:54:58.000000000 +0000
+++ vte-0.54.5/configure.ac	2020-12-03 11:47:45.207001347 +0000
@@ -278,7 +276,7 @@
 AC_DEFINE_UNQUOTED(VTE_DEFAULT_TERM,"$VTE_DEFAULT_TERM",[The default value $TERM is set to.])
 
 # Check for headers.
-AC_CHECK_HEADERS([sys/select.h sys/syslimits.h sys/termios.h sys/wait.h stropts.h termios.h util.h wchar.h pty.h])
+AC_CHECK_HEADERS([sys/select.h sys/stream.h sys/syslimits.h sys/termios.h sys/wait.h stropts.h termios.h util.h wchar.h pty.h])
 AC_HEADER_TIOCGWINSZ
 
 # Check for how to open a new PTY. We support posix_openpt and BSDs openpty
--- vte-0.54.5/src/pty.cc.~1~	2019-10-11 20:09:36.000000000 +0000
+++ vte-0.54.5/src/pty.cc	2020-12-03 17:50:14.681738503 +0000
@@ -582,10 +582,18 @@
 static int
 fd_set_cpkt(int fd)
 {
+        auto ret = 0;
+#if defined(TIOCPKT)
         /* tty_ioctl(4) -> every read() gives an extra byte at the beginning
          * notifying us of stop/start (^S/^Q) events. */
         int one = 1;
-        return ioctl(fd, TIOCPKT, &one);
+        ret = ioctl(fd, TIOCPKT, &one);
+#elif defined(__sun) && defined(HAVE_STROPTS_H)
+        if (isastream(fd) == 1 &&
+            ioctl(fd, I_FIND, "pckt") == 0)
+                ret = ioctl(fd, I_PUSH, "pckt");
+#endif
+        return ret;
 }
 
 static int
@@ -608,7 +616,7 @@
         if (fd_set_cpkt(fd) < 0) {
                 vte::util::restore_errno errsv;
                 _vte_debug_print(VTE_DEBUG_PTY,
-                                 "%s failed: %s", "ioctl(TIOCPKT)", g_strerror(errsv));
+                                 "%s failed: %s", "Setting packet mode", g_strerror(errsv));
                 return -1;
         }
 
@@ -671,7 +679,7 @@
         if (fd_set_cpkt(fd) < 0) {
                 vte::util::restore_errno errsv;
                 _vte_debug_print(VTE_DEBUG_PTY,
-                                 "%s failed: %s", "ioctl(TIOCPKT)", g_strerror(errsv));
+                                 "%s failed: %s", "Setting packet mode", g_strerror(errsv));
                 return -1;
         }
 
--- vte-0.54.5/src/vte.cc.~1~	2019-10-11 20:09:36.000000000 +0000
+++ vte-0.54.5/src/vte.cc	2020-12-03 17:50:14.686156151 +0000
@@ -31,6 +31,12 @@
 #ifdef HAVE_SYS_TERMIOS_H
 #include <sys/termios.h>
 #endif
+#ifdef HAVE_STROPTS_H
+#include <stropts.h>
+#endif
+#ifdef HAVE_SYS_STREAM_H
+#include <sys/stream.h>
+#endif
 
 #include <glib.h>
 #include <glib/gi18n-lib.h>
@@ -3900,6 +3906,7 @@
 			bp = chunk->data + chunk->len;
 			len = 0;
 			do {
+#if defined(TIOCPKT)
                                 /* We'd like to read (fd, bp, rem); but due to TIOCPKT mode
                                  * there's an extra input byte returned at the beginning.
                                  * We need to see what that byte is, but otherwise drop it
@@ -3944,6 +3951,66 @@
 						len += ret;
 						break;
 				}
+#elif defined(__sun) && defined(HAVE_STROPTS_H)
+				static unsigned char ctl_s[128];
+				struct strbuf ctlbuf, databuf;
+				int ret, flags = 0;
+				bool have_data = false;
+
+				ctlbuf.buf = (caddr_t)ctl_s;
+				ctlbuf.maxlen = sizeof(ctl_s);
+				databuf.buf = (caddr_t)bp;
+				databuf.maxlen = rem;
+
+				ret = getmsg(fd, &ctlbuf, &databuf, &flags);
+				if (ret == -1) {
+					err = errno;
+					goto out;
+				} else if (ctlbuf.len == 1) {
+					switch (ctl_s[0]) {
+					case M_IOCTL:
+						pty_termios_changed();
+						break;
+					case M_STOP:
+						pty_scroll_lock_changed(true);
+						break;
+					case M_START:
+						pty_scroll_lock_changed(false);
+						break;
+					case M_DATA:
+						have_data = true;
+						break;
+					}
+				} else if (ctlbuf.len == -1 && databuf.len != -1) {
+					// MOREDATA
+					have_data = true;
+				}
+
+				if (have_data) {
+					if (databuf.len == 0) {
+						eof = true;
+						goto out;
+					}
+					bp += databuf.len;
+					rem -= databuf.len;
+					len += databuf.len;
+				}
+#else /* no TIOCPKT && no STREAMS pty */
+				int ret = read(fd, bp, rem);
+				switch (ret) {
+					case -1:
+						err = errno;
+						goto out;
+					case 0:
+						eof = true;
+						goto out;
+					default:
+						bp += ret;
+						rem -= ret;
+						len += ret;
+						break;
+				}
+#endif
 			} while (rem);
 out:
 			chunk->len += len;
