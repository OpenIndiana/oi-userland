From a583b2c73d1ed9fcbec828d9403886a013247537 Mon Sep 17 00:00:00 2001
From: Armin Burgmeier <armin@arbur.net>
Date: Mon, 27 Jun 2011 22:42:32 +0200
Subject: [PATCH] Use g_utf8_offset_to_pointer() instead of iconv to determine
 byte offset

2011-06-27  Armin Burgmeier  <armin@arbur.net>

	* libinftext/inf-text-chunk.c: Use g_utf8_offset_to_pointer() instead
	of iconv to determine the byte offset in a segment when the chunk is
	UTF-8 encoded. This is a significant perforamnce improvement for long
	segments.
---
 libinftext/inf-text-chunk.c | 131 ++++++++++++++++++++++++++++++++------------

diff --git a/libinftext/inf-text-chunk.c b/libinftext/inf-text-chunk.c
index cacbcd8..5bd0020 100644
--- a/libinftext/inf-text-chunk.c
+++ b/libinftext/inf-text-chunk.c
@@ -25,10 +25,20 @@
 /* Don't check integrity in stable releases */
 /*#define CHUNK_CHECK_INTEGRITY*/
 
+typedef struct _InfTextChunkPath InfTextChunkPath;
+struct _InfTextChunkPath {
+  gsize (*get_byte_index)(InfTextChunk* chunk,
+                          gchar* text,
+                          gsize bytes,
+                          guint offset);
+};
+
 struct _InfTextChunk {
   GSequence* segments;
   guint length; /* in characters */
   GQuark encoding;
+
+  const InfTextChunkPath* path;
 };
 
 typedef struct _InfTextChunkSegment InfTextChunkSegment;
@@ -42,6 +52,76 @@ struct _InfTextChunkSegment {
   guint offset; /* absolute to chunk begin in characters, sort criteria */
 };
 
+/*
+ * get_byte_index paths
+ */
+
+gsize inf_text_chunk_get_byte_index_utf8(InfTextChunk* self,
+                                         gchar* text,
+                                         gsize bytes,
+                                         guint offset)
+{
+/*#define CHUNK_CHECK_INTEGRITY*/
+#ifdef CHUNK_CHECK_INTEGRITY
+  g_assert(offset <= g_utf8_strlen(self, bytes));
+#endif
+
+  return g_utf8_offset_to_pointer(text, offset) - text;
+}
+
+gsize inf_text_chunk_get_byte_index_iconv(InfTextChunk* self,
+                                          gchar* text,
+                                          gsize bytes,
+                                          guint offset)
+{
+  /* We convert the segment's text into UCS-4, character by character.
+   * This assumes every UCS-4 character is 4 bytes in length */
+
+  GIConv cd;
+  gchar buffer[4];
+
+  gchar* inbuf;
+  gchar* outbuf;
+  gsize inlen;
+  gsize outlen;
+  guint count;
+  gsize result;
+
+  /* TODO: Can we use some faster glib UTF-8 functions in case
+   * self->encoding is UTF-8? */
+  cd = g_iconv_open("UCS-4", g_quark_to_string(self->encoding));
+  g_assert(cd != (GIConv)-1);
+
+  inbuf = text;
+  inlen = bytes;
+
+  for(count = 0; count < offset; ++count)
+  {
+    g_assert(inlen > 0);
+
+    outbuf = buffer;
+    outlen = 4;
+
+    result = g_iconv(cd, &inbuf, &inlen, &outbuf, &outlen);
+    g_assert(result == (size_t)(-1)); /* errno == E2BIG */
+  }
+
+  g_iconv_close(cd);
+  return bytes - inlen;
+}
+
+const InfTextChunkPath INF_TEXT_CHUNK_PATH_UTF8 = {
+  inf_text_chunk_get_byte_index_utf8
+};
+
+const InfTextChunkPath INF_TEXT_CHUNK_PATH_ICONV = {
+  inf_text_chunk_get_byte_index_iconv
+};
+
+/*
+ * Helper functions
+ */
+
 static void
 inf_text_chunk_segment_free(InfTextChunkSegment* segment)
 {
@@ -127,16 +207,6 @@ inf_text_chunk_get_segment(InfTextChunk* self,
   InfTextChunkSegment key;
   GSequenceIter* iter;
 
-  GIConv cd;
-  gchar buffer[4];
-
-  gchar* inbuf;
-  gchar* outbuf;
-  gsize inlen;
-  gsize outlen;
-  guint count;
-  gsize result;
-
   g_assert(pos <= self->length);
 
   /* only offset is relevant for lookup */
@@ -174,30 +244,12 @@ inf_text_chunk_get_segment(InfTextChunk* self,
       }
       else
       {
-        /* We convert the segment's text into UCS-4, character by character.
-         * This assumes every UCS-4 character is 4 bytes in length */
-
-        /* TODO: Can we use some faster glib UTF-8 functions in case
-         * self->encoding is UTF-8? */
-        cd = g_iconv_open("UCS-4", g_quark_to_string(self->encoding));
-        g_assert(cd != (GIConv)-1);
-        
-        inbuf = found->text;
-        inlen = found->length;
-
-        for(count = 0; count < pos - found->offset; ++ count)
-        {
-          g_assert(inlen > 0);
-
-          outbuf = buffer;
-          outlen = 4;
-
-          result = g_iconv(cd, &inbuf, &inlen, &outbuf, &outlen);
-          g_assert(result == (size_t)(-1)); /* errno == E2BIG */
-        }
-
-        g_iconv_close(cd);
-        *index = found->length - inlen;
+        *index = self->path->get_byte_index(
+          self,
+          found->text,
+          found->length,
+          pos - found->offset
+        );
       }
     }
   }
@@ -210,6 +262,10 @@ inf_text_chunk_get_segment(InfTextChunk* self,
   return iter;
 }
 
+/*
+ * Public API
+ */
+
 GType
 inf_text_chunk_get_type(void)
 {
@@ -248,6 +304,11 @@ inf_text_chunk_new(const gchar* encoding)
   chunk->length = 0;
   chunk->encoding = g_quark_from_string(encoding);
 
+  if(chunk->encoding == g_quark_from_static_string("UTF-8"))
+    chunk->path = &INF_TEXT_CHUNK_PATH_UTF8;
+  else
+    chunk->path = &INF_TEXT_CHUNK_PATH_ICONV;
+
   return chunk;
 }
 
@@ -287,6 +348,7 @@ inf_text_chunk_copy(InfTextChunk* self)
 
   new_chunk->length = self->length;
   new_chunk->encoding = self->encoding;
+  new_chunk->path = self->path;
 
   return new_chunk;
 }
@@ -424,6 +486,7 @@ inf_text_chunk_substring(InfTextChunk* self,
 
     result->length = length;
     result->encoding = self->encoding;
+    result->path = self->path;
   }
   else
   {
