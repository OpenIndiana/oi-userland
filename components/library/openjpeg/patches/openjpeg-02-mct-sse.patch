--- openjpeg-2.1.0/src/lib/openjp2/mct.c.orig	2016-01-19 18:15:53.372274075 +0100
+++ openjpeg-2.1.0/src/lib/openjp2/mct.c	2016-01-19 18:16:01.468655538 +0100
@@ -43,6 +43,9 @@
 
 #include "opj_includes.h"
 
+typedef intptr_t  OPJ_INTPTR;
+typedef uintptr_t OPJ_UINTPTR;
+
 /* <summary> */
 /* This table contains the norms of the basis function of the reversible MCT. */
 /* </summary> */
@@ -150,43 +153,59 @@
 {
 	OPJ_UINT32 i;
 #ifdef __SSE__
-	__m128 vrv, vgu, vgv, vbu;
-	vrv = _mm_set1_ps(1.402f);
-	vgu = _mm_set1_ps(0.34413f);
-	vgv = _mm_set1_ps(0.71414f);
-	vbu = _mm_set1_ps(1.772f);
-	for (i = 0; i < (n >> 3); ++i) {
-		__m128 vy, vu, vv;
-		__m128 vr, vg, vb;
-
-		vy = _mm_load_ps(c0);
-		vu = _mm_load_ps(c1);
-		vv = _mm_load_ps(c2);
-		vr = _mm_add_ps(vy, _mm_mul_ps(vv, vrv));
-		vg = _mm_sub_ps(_mm_sub_ps(vy, _mm_mul_ps(vu, vgu)), _mm_mul_ps(vv, vgv));
-		vb = _mm_add_ps(vy, _mm_mul_ps(vu, vbu));
-		_mm_store_ps(c0, vr);
-		_mm_store_ps(c1, vg);
-		_mm_store_ps(c2, vb);
-		c0 += 4;
-		c1 += 4;
-		c2 += 4;
-
-		vy = _mm_load_ps(c0);
-		vu = _mm_load_ps(c1);
-		vv = _mm_load_ps(c2);
-		vr = _mm_add_ps(vy, _mm_mul_ps(vv, vrv));
-		vg = _mm_sub_ps(_mm_sub_ps(vy, _mm_mul_ps(vu, vgu)), _mm_mul_ps(vv, vgv));
-		vb = _mm_add_ps(vy, _mm_mul_ps(vu, vbu));
-		_mm_store_ps(c0, vr);
-		_mm_store_ps(c1, vg);
-		_mm_store_ps(c2, vb);
-		c0 += 4;
-		c1 += 4;
-		c2 += 4;
+  // Mantis BUGID: 0056291. The address must be 16-byte aligned.
+  // TestFile: fuzz-signal_sigsegv_6e9e7f_5076_5265.pdf
+  if ((OPJ_UINTPTR)c0 % 16 == 0 && (OPJ_UINTPTR)c1 % 16 == 0 && (OPJ_UINTPTR)c2 % 16 == 0){
+  	__m128 vrv, vgu, vgv, vbu;
+  	vrv = _mm_set1_ps(1.402f);
+  	vgu = _mm_set1_ps(0.34413f);
+  	vgv = _mm_set1_ps(0.71414f);
+  	vbu = _mm_set1_ps(1.772f);
+  	for (i = 0; i < (n >> 3); ++i) {
+  		__m128 vy, vu, vv;
+  		__m128 vr, vg, vb;
+  
+  		vy = _mm_load_ps(c0);
+  		vu = _mm_load_ps(c1);
+  		vv = _mm_load_ps(c2);
+  		vr = _mm_add_ps(vy, _mm_mul_ps(vv, vrv));
+  		vg = _mm_sub_ps(_mm_sub_ps(vy, _mm_mul_ps(vu, vgu)), _mm_mul_ps(vv, vgv));
+  		vb = _mm_add_ps(vy, _mm_mul_ps(vu, vbu));
+  		_mm_store_ps(c0, vr);
+  		_mm_store_ps(c1, vg);
+  		_mm_store_ps(c2, vb);
+  		c0 += 4;
+  		c1 += 4;
+  		c2 += 4;
+  
+  		vy = _mm_load_ps(c0);
+  		vu = _mm_load_ps(c1);
+  		vv = _mm_load_ps(c2);
+  		vr = _mm_add_ps(vy, _mm_mul_ps(vv, vrv));
+  		vg = _mm_sub_ps(_mm_sub_ps(vy, _mm_mul_ps(vu, vgu)), _mm_mul_ps(vv, vgv));
+  		vb = _mm_add_ps(vy, _mm_mul_ps(vu, vbu));
+  		_mm_store_ps(c0, vr);
+  		_mm_store_ps(c1, vg);
+  		_mm_store_ps(c2, vb);
+  		c0 += 4;
+  		c1 += 4;
+  		c2 += 4;
+  	}
+  	n &= 7;
+    } else {
+    	for(i = 0; i < n; ++i) {
+    		OPJ_FLOAT32 y = c0[i];
+    		OPJ_FLOAT32 u = c1[i];
+    		OPJ_FLOAT32 v = c2[i];
+    		OPJ_FLOAT32 r = y + (v * 1.402f);
+    		OPJ_FLOAT32 g = y - (u * 0.34413f) - (v * (0.71414f));
+    		OPJ_FLOAT32 b = y + (u * 1.772f);
+    		c0[i] = r;
+    		c1[i] = g;
+    		c2[i] = b;
+    	}
 	}
-	n &= 7;
-#endif
+#else
 	for(i = 0; i < n; ++i) {
 		OPJ_FLOAT32 y = c0[i];
 		OPJ_FLOAT32 u = c1[i];
@@ -198,6 +217,7 @@
 		c1[i] = g;
 		c2[i] = b;
 	}
+#endif
 }
 
 /* <summary> */
