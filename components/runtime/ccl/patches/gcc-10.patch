--- ccl/lisp-kernel/pmcl-kernel.c.orig	2020-05-26 00:03:00.737722093 +0000
+++ ccl/lisp-kernel/pmcl-kernel.c	2020-05-26 00:03:54.213352105 +0000
@@ -152,6 +152,7 @@
 LispObj lisp_nil = (LispObj) 0;
 bitvector global_mark_ref_bits = NULL, dynamic_mark_ref_bits = NULL, relocatable_mark_ref_bits = NULL, global_refidx = NULL, dynamic_refidx = NULL,managed_static_refidx = NULL;
 
+void *tcr_area_lock = NULL;
 
 /* These are all "persistent" : they're initialized when
    subprims are first loaded and should never change. */
--- ccl/lisp-kernel/gc-common.c.orig	2020-05-26 00:04:52.298703729 +0000
+++ ccl/lisp-kernel/gc-common.c	2020-05-26 00:07:29.453564780 +0000
@@ -95,6 +95,9 @@
 LispObj GCephemeral_low = 0;
 natural GCn_ephemeral_dnodes = 0;
 natural GCstack_limit = 0;
+LispObj GCfirstunmarked = 0;
+LispObj *global_reloctab = NULL;
+LispObj *GCrelocptr = NULL;
 
 void
 check_static_cons_freelist(char *phase)
--- ccl/lisp-kernel/gc.h.orig	2020-05-25 23:43:02.339517583 +0000
+++ ccl/lisp-kernel/gc.h	2020-05-25 23:58:57.478179165 +0000
@@ -62,8 +62,8 @@
 extern LispObj GCarealow, GCareadynamiclow;
 extern natural GCndnodes_in_area, GCndynamic_dnodes_in_area;
 extern bitvector GCmarkbits, GCdynamic_markbits,managed_static_refbits,global_refidx,dynamic_refidx,managed_static_refidx;
-LispObj *global_reloctab, *GCrelocptr;
-LispObj GCfirstunmarked;
+extern LispObj *global_reloctab, *GCrelocptr;
+extern LispObj GCfirstunmarked;
 
 extern natural lisp_heap_gc_threshold;
 extern natural lisp_heap_notify_threshold;
@@ -83,7 +83,7 @@
 int change_hons_area_size(TCR *, signed_natural);
 void delete_protected_area(protected_area_ptr);
 Boolean egc_control(Boolean, BytePtr);
-Boolean free_segments_zero_filled_by_OS;
+extern Boolean free_segments_zero_filled_by_OS;
 Boolean new_heap_segment(ExceptionInformation *, natural, Boolean , TCR *, Boolean *);
 void platform_new_heap_segment(ExceptionInformation *, TCR*, BytePtr, BytePtr);
 /* an type representing 1/4 of a natural word */
@@ -153,19 +153,19 @@
 #define GC_TRAP_FUNCTION_FREEZE 129
 #define GC_TRAP_FUNCTION_THAW 130
 
-Boolean GCDebug, GCverbose, just_purified_p;
-bitvector GCmarkbits, GCdynamic_markbits;
-LispObj GCarealow, GCareadynamiclow;
-natural GCndnodes_in_area, GCndynamic_dnodes_in_area;
-LispObj GCweakvll,GCdwsweakvll;
-LispObj GCephemeral_low;
-natural GCn_ephemeral_dnodes;
-natural GCstack_limit;
+extern Boolean GCDebug, GCverbose, just_purified_p;
+extern bitvector GCmarkbits, GCdynamic_markbits;
+extern LispObj GCarealow, GCareadynamiclow;
+extern natural GCndnodes_in_area, GCndynamic_dnodes_in_area;
+extern LispObj GCweakvll,GCdwsweakvll;
+extern LispObj GCephemeral_low;
+extern natural GCn_ephemeral_dnodes;
+extern natural GCstack_limit;
 
 #if WORD_SIZE == 64
-unsigned short *_one_bits;
+extern unsigned short *_one_bits;
 #else
-const unsigned char _one_bits[256];
+extern const unsigned char _one_bits[256];
 #endif
 
 #define one_bits(x) _one_bits[x]
@@ -195,11 +195,11 @@
 /* backend-interface */
 
 typedef void (*weak_mark_fun) (LispObj);
-weak_mark_fun mark_weak_htabv, dws_mark_weak_htabv;
+extern weak_mark_fun mark_weak_htabv, dws_mark_weak_htabv;
 
 typedef void (*weak_process_fun)(void);
 
-weak_process_fun markhtabvs;
+extern weak_process_fun markhtabvs;
 
 
 #define hash_table_vector_header_count (sizeof(hash_table_vector_header)/sizeof(LispObj))
--- ccl/lisp-kernel/area.h.orig	2020-05-26 00:01:08.624867588 +0000
+++ ccl/lisp-kernel/area.h	2020-05-26 00:01:24.998880063 +0000
@@ -108,7 +108,7 @@
 Boolean shrink_dynamic_area(natural);
 
 /* serialize add_area/remove_area, and also the tcr queue */
-void *tcr_area_lock;
+extern void *tcr_area_lock;
 
 #define reserved_area ((area *)(all_areas))
 #define active_dynamic_area ((area *)(reserved_area->succ))
--- ccl/lisp-kernel/threads.h.orig	2020-05-25 23:59:28.446199598 +0000
+++ ccl/lisp-kernel/threads.h	2020-05-26 00:00:15.438653357 +0000
@@ -187,7 +187,7 @@
 void *tsd_get(LispObj);
 TCR *new_tcr(natural, natural);
 void thread_init_tcr(TCR *tcr, void *stack_base, natural stack_size);
-TCR *initial_thread_tcr;
+extern TCR *initial_thread_tcr;
 
 #define DEFAULT_THREAD_STACK_SIZE ((size_t) -1)
 #define MINIMAL_THREAD_STACK_SIZE ((size_t) 0)
