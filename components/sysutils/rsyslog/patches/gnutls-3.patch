From 23c5b3e1e62ee2daf5cce61c7e80f5e20898c03b Mon Sep 17 00:00:00 2001
From: Rainer Gerhards <rgerhards@adiscon.com>
Date: Sat, 16 May 2015 17:52:25 +0200
Subject: [PATCH] replace deprecated GnuTLS functions with newer ones if
 available

From 21674039db99d1067e9df4df04d965297d62c6af Mon Sep 17 00:00:00 2001
From: Rainer Gerhards <rgerhards@adiscon.com>
Date: Mon, 18 May 2015 09:36:02 +0200
Subject: [PATCH] use gnutls_certificate_type_set_priority() only if available

From b34c35e38f258935c0e92ca754da097d7f3f0f58 Mon Sep 17 00:00:00 2001
From: Rainer Gerhards <rgerhards@adiscon.com>
Date: Tue, 30 Sep 2014 14:42:34 +0200
Subject: [PATCH] replace deprecated gnutls data types with current one

diff --git a/configure.ac b/configure.ac
index 643fc94..56835fb 100644
--- a/configure.ac
+++ b/configure.ac
@@ -760,6 +760,9 @@
 if test "x$enable_gnutls" = "xyes"; then
 	PKG_CHECK_MODULES(GNUTLS, gnutls >= 1.4.0)
 	AC_DEFINE([ENABLE_GNUTLS], [1], [Indicator that GnuTLS is present])
+	AC_CHECK_LIB(gnutls, gnutls_global_init)
+	AC_CHECK_FUNCS(gnutls_certificate_set_retrieve_function,,)
+	AC_CHECK_FUNCS(gnutls_certificate_type_set_priority,,)
 fi
 AM_CONDITIONAL(ENABLE_GNUTLS, test x$enable_gnutls = xyes)
 
diff --git a/runtime/nsd_gtls.c b/runtime/nsd_gtls.c
index a763e4b..e127834 100644
--- a/runtime/nsd_gtls.c
+++ b/runtime/nsd_gtls.c
@@ -85,7 +85,7 @@
 
 
 /* ------------------------------ GnuTLS specifics ------------------------------ */
-static gnutls_certificate_credentials xcred;
+static gnutls_certificate_credentials_t xcred;
 
 #ifdef DEBUG
 #if 0 /* uncomment, if needed some time again -- DEV Debug only */
@@ -231,16 +231,27 @@
  * rgerhards, 2008-05-27
  */
 static int
-gtlsClientCertCallback(gnutls_session session,
-              __attribute__((unused)) const gnutls_datum* req_ca_rdn, int __attribute__((unused)) nreqs,
-              __attribute__((unused)) const gnutls_pk_algorithm* sign_algos, int __attribute__((unused)) sign_algos_length,
-              gnutls_retr_st *st)
+gtlsClientCertCallback(gnutls_session_t session,
+              __attribute__((unused)) const gnutls_datum_t* req_ca_rdn, 
+              int __attribute__((unused)) nreqs,
+              __attribute__((unused)) const gnutls_pk_algorithm_t* sign_algos,
+              int __attribute__((unused)) sign_algos_length,
+#ifdef HAVE_GNUTLS_CERTIFICATE_SET_RETRIEVE_FUNCTION
+              gnutls_retr2_st* st
+#else
+              gnutls_retr_st *st
+#endif
+              )
 {
 	nsd_gtls_t *pThis;
 
 	pThis = (nsd_gtls_t*) gnutls_session_get_ptr(session);
 
-	st->type = GNUTLS_CRT_X509;
+#ifdef HAVE_GNUTLS_CERTIFICATE_SET_RETRIEVE_FUNCTION
+       st->cert_type = GNUTLS_CRT_X509;
+#else
+        st->type = GNUTLS_CRT_X509;
+#endif
 	st->ncerts = 1;
 	st->cert.x509 = &pThis->ourCert;
 	st->key.x509 = pThis->ourKey;
@@ -264,9 +275,9 @@
 	size_t szBufLen = sizeof(szBufA), tmp;
 	unsigned int algo, bits;
 	time_t expiration_time, activation_time;
-	const gnutls_datum *cert_list;
+	const gnutls_datum_t *cert_list;
 	unsigned cert_list_size = 0;
-	gnutls_x509_crt cert;
+	gnutls_x509_crt_t cert;
 	cstr_t *pStr = NULL;
 	int gnuRet;
 	DEFiRet;
@@ -622,7 +633,7 @@
 {
 	DEFiRet;
 	int gnuRet;
-	gnutls_session session;
+	gnutls_session_t session;
 
 	gnutls_init(&session, GNUTLS_SERVER);
 	pThis->bHaveSess = 1;
@@ -677,7 +688,7 @@
  * rgerhards, 2008-05-22
  */
 static rsRetVal
-gtlsGetCN(nsd_gtls_t *pThis, gnutls_x509_crt *pCert, cstr_t **ppstrCN)
+gtlsGetCN(nsd_gtls_t *pThis, gnutls_x509_crt_t *pCert, cstr_t **ppstrCN)
 {
 	DEFiRet;
 	int gnuRet;
@@ -752,7 +763,7 @@
  * rgerhards, 2008-05-22
  */
 static rsRetVal
-gtlsChkPeerFingerprint(nsd_gtls_t *pThis, gnutls_x509_crt *pCert)
+gtlsChkPeerFingerprint(nsd_gtls_t *pThis, gnutls_x509_crt_t *pCert)
 {
 	uchar fingerprint[20];
 	size_t size;
@@ -842,7 +853,7 @@
  * rgerhards, 2008-05-22
  */
 static rsRetVal
-gtlsChkPeerName(nsd_gtls_t *pThis, gnutls_x509_crt *pCert)
+gtlsChkPeerName(nsd_gtls_t *pThis, gnutls_x509_crt_t *pCert)
 {
 	uchar lnBuf[256];
 	char szAltName[1024]; /* this is sufficient for the DNSNAME... */
@@ -918,9 +929,9 @@
 static rsRetVal
 gtlsChkPeerID(nsd_gtls_t *pThis)
 {
-	const gnutls_datum *cert_list;
+	const gnutls_datum_t *cert_list;
 	unsigned int list_size = 0;
-	gnutls_x509_crt cert;
+	gnutls_x509_crt_t cert;
 	int bMustDeinitCert = 0;
 	int gnuRet;
 	DEFiRet;
@@ -980,9 +991,9 @@
 	int gnuRet;
 	cstr_t *pStr;
 	unsigned stateCert;
-	const gnutls_datum *cert_list;
+	const gnutls_datum_t *cert_list;
 	unsigned cert_list_size = 0;
-	gnutls_x509_crt cert;
+	gnutls_x509_crt_t cert;
 	unsigned i;
 	time_t ttCert;
 	time_t ttNow;
@@ -1601,8 +1612,9 @@
 	nsd_gtls_t *pThis = (nsd_gtls_t*) pNsd;
 	int sock;
 	int gnuRet;
-	/* TODO: later? static const int cert_type_priority[3] = { GNUTLS_CRT_X509, GNUTLS_CRT_OPENPGP, 0 };*/
+#	if HAVE_GNUTLS_CERTIFICATE_TYPE_SET_PRIORITY
 	static const int cert_type_priority[2] = { GNUTLS_CRT_X509, 0 };
+#	endif
 	DEFiRet;
 
 	ISOBJ_TYPE_assert(pThis, nsd_gtls);
@@ -1627,14 +1639,31 @@
 	gnutls_session_set_ptr(pThis->sess, (void*)pThis);
 	iRet = gtlsLoadOurCertKey(pThis); /* first load .pem files */
 	if(iRet == RS_RET_OK) {
+#		if HAVE_GNUTLS_CERTIFICATE_SET_RETRIEVE_FUNCTION 
+		gnutls_certificate_set_retrieve_function(xcred, gtlsClientCertCallback);
+#		else
 		gnutls_certificate_client_set_retrieve_function(xcred, gtlsClientCertCallback);
+#	endif
 	} else if(iRet != RS_RET_CERTLESS) {
 		FINALIZE; /* we have an error case! */
 	}
 
 	/* Use default priorities */
 	CHKgnutls(gnutls_set_default_priority(pThis->sess));
+#	if HAVE_GNUTLS_CERTIFICATE_TYPE_SET_PRIORITY
+	/* The gnutls_certificate_type_set_priority function is deprecated
+	 * and not available in recent GnuTLS versions. However, there is no
+	 * doc how to properly replace it with gnutls_priority_set_direct.
+	 * A lot of folks have simply removed it, when they also called
+	 * gnutls_set_default_priority. This is what we now also do. If
+	 * this causes problems or someone has an idea of how to replace
+	 * the deprecated function in a better way, please let us know!
+	 * In any case, we use it as long as it is available and let
+	 * not insult us by the deprecation warnings.
+	 * 2015-05-18 rgerhards
+	 */
 	CHKgnutls(gnutls_certificate_type_set_priority(pThis->sess, cert_type_priority));
+#	endif
 
 	/* put the x509 credentials to the current session */
 	CHKgnutls(gnutls_credentials_set(pThis->sess, GNUTLS_CRD_CERTIFICATE, xcred));
--- rsyslog-7.6.6/runtime/nsd_gtls.h.~1~	2014-09-16 14:03:59.000000000 +0400
+++ rsyslog-7.6.6/runtime/nsd_gtls.h	2016-12-14 22:00:04.791656109 +0300
@@ -49,15 +49,15 @@
 	} authMode;
 	gtlsRtryCall_t rtryCall;/**< what must we retry? */
 	int bIsInitiator;	/**< 0 if socket is the server end (listener), 1 if it is the initiator */
-	gnutls_session sess;
+	gnutls_session_t sess;
 	int bHaveSess;		/* as we don't know exactly which gnutls_session values are invalid, we use this one
 				   to flag whether or not we are in a session (same as -1 for a socket meaning no sess) */
 	int bReportAuthErr;	/* only the first auth error is to be reported, this var triggers it. Initially, it is
 				 * set to 1 and changed to 0 after the first report. It is changed back to 1 after
 				 * one successful authentication. */
 	permittedPeers_t *pPermPeers; /* permitted peers */
-	gnutls_x509_crt ourCert;	/**< our certificate, if in client mode (unused in server mode) */
-	gnutls_x509_privkey ourKey;	/**< our private key, if in client mode (unused in server mode) */
+	gnutls_x509_crt_t ourCert;	/**< our certificate, if in client mode (unused in server mode) */
+	gnutls_x509_privkey_t ourKey;	/**< our private key, if in client mode (unused in server mode) */
 	short	bOurCertIsInit;	/**< 1 if our certificate is initialized and must be deinit on destruction */
 	short	bOurKeyIsInit;	/**< 1 if our private key is initialized and must be deinit on destruction */
 	char *pszRcvBuf;
