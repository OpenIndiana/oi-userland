InfiniBand support for tcpdump. 
This is an in-house patch. Sent upstream for potential inclusion in future 
versions of tcpdump.

diff -rupN tcpdump-4.7.4-orig/interface.h tcpdump-4.7.4/interface.h
--- tcpdump-4.7.4-orig/interface.h	2015-05-26 14:13:17.000000000 -0700
+++ tcpdump-4.7.4/interface.h	2015-03-09 12:07:00.000000000 -0700
@@ -162,6 +162,7 @@ extern uint16_t create_osi_cksum(const u
 
 extern char *smb_errstr(int, int);
 extern const char *nt_errstr(uint32_t);
+extern u_int ipoib_if_print(const struct pcap_pkthdr *, const u_char *);
 
 #ifdef INET6
 extern int mask62plen(const u_char *);
diff -rupN tcpdump-4.7.4-orig/Makefile.in tcpdump-4.7.4/Makefile.in
--- tcpdump-4.7.4-orig/Makefile.in	2015-05-26 14:13:17.000000000 -0700
+++ tcpdump-4.7.4/Makefile.in	2015-05-26 15:12:05.727800640 -0700
@@ -138,6 +138,7 @@ LIBNETDISSECT_SRC=\
 	print-ipcomp.c \
 	print-ipfc.c \
 	print-ipnet.c \
+	print-ipoib.c \
 	print-ipx.c \
 	print-isakmp.c \
 	print-isoclns.c \
diff -rupN tcpdump-4.7.4-orig/netdissect.h tcpdump-4.7.4/netdissect.h
--- tcpdump-4.7.4-orig/netdissect.h	2015-05-26 14:13:17.000000000 -0700
+++ tcpdump-4.7.4/netdissect.h	2015-04-22 13:32:16.000000000 -0700
@@ -395,6 +395,7 @@ extern void ether_print(netdissect_optio
 
 extern u_int ether_if_print(netdissect_options *,
                             const struct pcap_pkthdr *,const u_char *);
+extern u_int ipoib_if_print(const struct pcap_pkthdr *, const u_char *);
 extern u_int netanalyzer_if_print(netdissect_options *,
                                   const struct pcap_pkthdr *,const u_char *);
 extern u_int netanalyzer_transparent_if_print(netdissect_options *,
diff -rupN tcpdump-4.7.4-orig/print-arp.c tcpdump-4.7.4/print-arp.c
--- tcpdump-4.7.4-orig/print-arp.c	2015-05-26 14:13:17.000000000 -0700
+++ tcpdump-4.7.4/print-arp.c	2015-03-09 12:07:00.000000000 -0700
@@ -55,6 +55,7 @@ struct  arp_pkthdr {
 #define ARPHRD_ATM2225  19      /* ATM (RFC 2225) */
 #define ARPHRD_STRIP    23      /* Ricochet Starmode Radio hardware format */
 #define ARPHRD_IEEE1394 24      /* IEEE 1394 (FireWire) hardware format */
+#define ARPHRD_INFINIBAND 32   /* InfiniBand RFC 4391 */
         u_short ar_pro;         /* format of protocol address */
         u_char  ar_hln;         /* length of hardware address */
         u_char  ar_pln;         /* length of protocol address */
@@ -115,6 +115,7 @@ static const struct tok arphrd_values[]
     { ARPHRD_STRIP, "Strip" },
     { ARPHRD_IEEE1394, "IEEE 1394" },
     { ARPHRD_ATM2225, "ATM" },
+    { ARPHRD_INFINIBAND, "InfiniBand" },
     { 0, NULL }
 };
 
diff -rupN tcpdump-4.7.4-orig/print-ipoib.c tcpdump-4.7.4/print-ipoib.c
--- tcpdump-4.7.4-orig/print-ipoib.c	1969-12-31 16:00:00.000000000 -0800
+++ tcpdump-4.7.4/print-ipoib.c	2015-05-26 14:13:17.000000000 -0700
@@ -0,0 +1,132 @@
+/*
+ * Copyright (c) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 
+ *	1997, 2000, 2011, 2012
+ *	The Regents of the University of California.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that: (1) source code distributions
+ * retain the above copyright notice and this paragraph in its entirety, (2)
+ * distributions including binary code include the above copyright notice and
+ * this paragraph in its entirety in the documentation or other materials
+ * provided with the distribution, and (3) all advertising materials mentioning
+ * features or use of this software display the following acknowledgement:
+ * ``This product includes software developed by the University of California,
+ * Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
+ * the University nor the names of its contributors may be used to endorse
+ * or promote products derived from this software without specific prior
+ * written permission.
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
+ */
+/*
+ * Copyright (c) 2011, 2012, Oracle and/or its affiliates. All rights reserved.
+ */
+#ifndef lint
+static const char rcsid[] _U_ =
+    "@(#) $Header$";
+#endif
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <tcpdump-stdinc.h>
+
+#include <stdio.h>
+#include <pcap.h>
+
+#include "interface.h"
+#include "extract.h"
+#include "addrtoname.h"
+
+
+extern const struct tok ethertype_values[];
+extern int ethertype_print(netdissect_options *, u_short, const u_char *, u_int, u_int );
+
+#define	IPOIB_HDRLEN	44
+
+static inline void
+ipoib_hdr_print(register const u_char *bp, u_int length)
+{
+	u_int16_t ether_type;
+	char abuf[40];
+
+	ether_type = EXTRACT_16BITS(&bp[40]);
+	if (!qflag) {
+		(void)printf(", ethertype %s (0x%04x)",
+			     tok2str(ethertype_values,"Unknown", ether_type),
+			     ether_type);
+	} else {
+		(void)printf(", ethertype %s",
+			     tok2str(ethertype_values,"Unknown", ether_type));
+	}
+
+	(void)printf(", length %u: ", length);
+}
+
+/*
+ * Print an InfiniBand frame.
+ * This might be encapsulated within another frame; we might be passed
+ * a pointer to a function that can print header information for that
+ * frame's protocol, and an argument to pass to that function.
+ */
+static void
+ipoib_print(const u_char *p, u_int length, u_int caplen,
+    void (*print_encap_header)(const u_char *), const u_char *encap_header_arg)
+{
+	const u_char *orig_hdr = p;
+	u_int orig_length;
+	u_short ether_type;
+	u_short extracted_ether_type;
+
+	if (caplen < IPOIB_HDRLEN || length < IPOIB_HDRLEN) {
+		printf("[|ipoib]");
+		return;
+	}
+
+	if (eflag) {
+		if (print_encap_header != NULL)
+			(*print_encap_header)(encap_header_arg);
+		ipoib_hdr_print(p, length);
+	}
+	orig_length = length;
+
+	length -= IPOIB_HDRLEN;
+	caplen -= IPOIB_HDRLEN;
+	ether_type = EXTRACT_16BITS(&p[40]);
+	p += IPOIB_HDRLEN;
+
+	if (ethertype_print(gndo, ether_type, p, length, caplen) == 0) {
+		/* ether_type not known, print raw packet */
+		if (!eflag) {
+			if (print_encap_header != NULL)
+				(*print_encap_header)(encap_header_arg);
+			ipoib_hdr_print(orig_hdr , orig_length);
+		}
+
+		if (!suppress_default_print)
+			default_print(p, caplen);
+	}
+}
+
+/*
+ * This is the top level routine of the printer.  'p' points
+ * to the ether header of the packet, 'h->ts' is the timestamp,
+ * 'h->len' is the length of the packet off the wire, and 'h->caplen'
+ * is the number of bytes actually captured.
+ */
+u_int
+ipoib_if_print(const struct pcap_pkthdr *h, const u_char *p)
+{
+	ipoib_print(p, h->len, h->caplen, NULL, NULL);
+
+	return (IPOIB_HDRLEN);
+}
+
+/*
+ * Local Variables:
+ * c-style: whitesmith
+ * c-basic-offset: 8
+ * End:
+ */
diff -rupN tcpdump-4.7.4-orig/tcpdump.c tcpdump-4.7.4/tcpdump.c
--- tcpdump-4.7.4-orig/tcpdump.c	2015-05-26 14:13:17.000000000 -0700
+++ tcpdump-4.7.4/tcpdump.c	2015-05-26 15:17:43.298240116 -0700
@@ -264,6 +264,9 @@ static const struct ndo_printer ndo_prin
 #ifdef DLT_IPV6
 	{ raw_if_print,		DLT_IPV6 },
 #endif
+#ifdef DLT_IPOIB
+	{ ipoib_if_print, 	162 },
+#endif
 #ifdef HAVE_PCAP_USB_H
 #ifdef DLT_USB_LINUX
 	{ usb_linux_48_byte_print, DLT_USB_LINUX},
