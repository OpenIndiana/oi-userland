--- VirtualBox-6.1.30~/src/VBox/Runtime/r0drv/solaris/initterm-r0drv-solaris.c	2021-11-22 15:19:50.000000000 +0000
+++ VirtualBox-6.1.30/src/VBox/Runtime/r0drv/solaris/initterm-r0drv-solaris.c	2022-01-21 23:40:27.560684865 +0000
@@ -210,22 +210,6 @@
         }
 
         /*
-         * Mandatory: Thread-context hooks.
-         */
-        rc = RTR0DbgKrnlInfoQuerySymbol(g_hKrnlDbgInfo, NULL /* pszModule */, "exitctx",  NULL /* ppvSymbol */);
-        if (RT_SUCCESS(rc))
-        {
-            g_rtSolThreadCtx.Install.pfnSol_installctx = (void *)installctx;
-            g_rtSolThreadCtx.Remove.pfnSol_removectx   = (void *)removectx;
-        }
-        else
-        {
-            g_frtSolOldThreadCtx = true;
-            g_rtSolThreadCtx.Install.pfnSol_installctx_old = (void *)installctx;
-            g_rtSolThreadCtx.Remove.pfnSol_removectx_old   = (void *)removectx;
-        }
-
-        /*
          * Mandatory: map_addr() hooks.
          */
         rc = RTR0DbgKrnlInfoQuerySymbol(g_hKrnlDbgInfo, NULL /* pszModule */, "plat_map_align_amount",  NULL /* ppvSymbol */);
diff -ru VirtualBox-6.1.30~/src/VBox/Runtime/r0drv/solaris/threadctxhooks-r0drv-solaris.c VirtualBox-6.1.30/src/VBox/Runtime/r0drv/solaris/threadctxhooks-r0drv-solaris.c
--- VirtualBox-6.1.30~/src/VBox/Runtime/r0drv/solaris/threadctxhooks-r0drv-solaris.c	2021-11-22 15:19:50.000000000 +0000
+++ VirtualBox-6.1.30/src/VBox/Runtime/r0drv/solaris/threadctxhooks-r0drv-solaris.c	2022-01-21 23:40:36.659756754 +0000
@@ -153,6 +153,12 @@
     }
 }
 
+static const struct ctxop_template vbox_ctxop_tpl = {
+	.ct_rev		= CTXOP_TPL_REV,
+	.ct_save	= rtThreadCtxHookSolOut,
+	.ct_restore	= rtThreadCtxHookSolIn,
+	.ct_free	= rtThreadCtxHookSolFree
+};
 
 RTDECL(int) RTThreadCtxHookCreate(PRTTHREADCTXHOOK phCtxHook, uint32_t fFlags, PFNRTTHREADCTXHOOK pfnCallback, void *pvUser)
 {
@@ -177,32 +183,7 @@
     pThis->fEnabled     = false;
     pThis->cRefs        = 2;        /* One reference for the thread, one for the caller. */
 
-    /*
-     * installctx() allocates memory and thus cannot be used in RTThreadCtxHookRegister() which can be used
-     * with preemption disabled. We allocate the context-hooks here and use 'fEnabled' to determine if we can
-     * invoke the consumer's hook or not.
-     */
-    if (g_frtSolOldThreadCtx)
-    {
-        g_rtSolThreadCtx.Install.pfnSol_installctx_old(curthread,
-                                                       pThis,
-                                                       rtThreadCtxHookSolOut,   /* save */
-                                                       rtThreadCtxHookSolIn,    /* restore */
-                                                       NULL,                    /* fork */
-                                                       NULL,                    /* lwp_create */
-                                                       rtThreadCtxHookSolFree);
-    }
-    else
-    {
-        g_rtSolThreadCtx.Install.pfnSol_installctx(curthread,
-                                                   pThis,
-                                                   rtThreadCtxHookSolOut,       /* save */
-                                                   rtThreadCtxHookSolIn,        /* restore */
-                                                   NULL,                        /* fork */
-                                                   NULL,                        /* lwp_create */
-                                                   NULL,                        /* exit */
-                                                   rtThreadCtxHookSolFree);
-    }
+    ctxop_install(curthread, &vbox_ctxop_tpl, pThis);
 
     *phCtxHook = pThis;
     return VINF_SUCCESS;
@@ -244,27 +225,7 @@
          * ring-0 thread dies, Solaris will call rtThreadCtxHookSolFree() which will free the hook object.
          */
         int rc;
-        if (g_frtSolOldThreadCtx)
-        {
-            rc = g_rtSolThreadCtx.Remove.pfnSol_removectx_old(curthread,
-                                                              pThis,
-                                                              rtThreadCtxHookSolOut,    /* save */
-                                                              rtThreadCtxHookSolIn,     /* restore */
-                                                              NULL,                     /* fork */
-                                                              NULL,                     /* lwp_create */
-                                                              rtThreadCtxHookSolFree);
-        }
-        else
-        {
-            rc = g_rtSolThreadCtx.Remove.pfnSol_removectx(curthread,
-                                                          pThis,
-                                                          rtThreadCtxHookSolOut,        /* save */
-                                                          rtThreadCtxHookSolIn,         /* restore */
-                                                          NULL,                         /* fork */
-                                                          NULL,                         /* lwp_create */
-                                                          NULL,                         /* exit */
-                                                          rtThreadCtxHookSolFree);
-        }
+	rc = ctxop_remove(curthread, &vbox_ctxop_tpl, pThis);
         AssertMsg(rc, ("removectx() failed. rc=%d\n", rc));
         NOREF(rc);
 
