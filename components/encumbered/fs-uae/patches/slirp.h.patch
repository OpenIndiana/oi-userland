--- fs-uae-3.1.66.orig/src/slirp/slirp.h	So. Dez. 19 04:24:39 2021
+++ fs-uae-3.1.66/src/slirp/slirp.h	Di. Juni 14 08:45:16 2022
@@ -290,41 +290,41 @@
 #endif
 
 #ifndef FULL_BOLT
-void if_start _P((void));
+void if_start (void);
 #else
-void if_start _P((struct ttys *));
+void if_start (struct ttys *);
 #endif
 
 #ifdef BAD_SPRINTF
 # define vsprintf vsprintf_len
 # define sprintf sprintf_len
- extern int vsprintf_len _P((char *, const char *, va_list));
- extern int sprintf_len _P((char *, const char *, ...));
+ extern int vsprintf_len (char *, const char *, va_list);
+ extern int sprintf_len (char *, const char *, ...);
 #endif
 
 #ifdef DECLARE_SPRINTF
 # ifndef BAD_SPRINTF
- extern int vsprintf _P((char *, const char *, va_list));
+ extern int vsprintf (char *, const char *, va_list);
 # endif
- extern int vfprintf _P((FILE *, const char *, va_list));
+ extern int vfprintf (FILE *, const char *, va_list);
 #endif
 
 #ifndef HAVE_STRERROR
- extern char *strerror _P((int error));
+ extern char *strerror (int error);
 #endif
 
 #ifdef FSUAE
 #else
 #ifndef HAVE_INDEX
- char *index _P((const char *, int));
+ char *index (const char *, int);
 #endif
 #endif
 
 #ifndef HAVE_GETHOSTID
- long gethostid _P((void));
+ long gethostid (void);
 #endif
 
-void lprint _P((const char *, ...));
+void lprint (const char *, ...);
 
 #ifndef _WIN32
 #include <netdb.h>
@@ -336,49 +336,49 @@
 int cksum(struct mbuf *m, int len);
 
 /* if.c */
-void if_init _P((void));
-void if_output _P((struct socket *, struct mbuf *));
+void if_init (void);
+void if_output (struct socket *, struct mbuf *);
 
 /* ip_input.c */
-void ip_init _P((void));
-void ip_cleanup _P((void));
-void ip_input _P((struct mbuf *));
-struct ip * ip_reass _P((struct ip *, struct ipq *));
-void ip_freef _P((struct ipq *));
-void ip_enq _P((register struct ipasfrag *, register struct ipasfrag *));
-void ip_deq _P((register struct ipasfrag *));
-void ip_slowtimo _P((void));
-void ip_stripoptions _P((register struct mbuf *, struct mbuf *));
+void ip_init (void);
+void ip_cleanup (void);
+void ip_input (struct mbuf *);
+struct ip * ip_reass (struct ip *, struct ipq *);
+void ip_freef (struct ipq *);
+void ip_enq (register struct ipasfrag *, register struct ipasfrag *);
+void ip_deq (register struct ipasfrag *);
+void ip_slowtimo (void);
+void ip_stripoptions (register struct mbuf *, struct mbuf *);
 
 /* ip_output.c */
-int ip_output _P((struct socket *, struct mbuf *));
+int ip_output (struct socket *, struct mbuf *);
 
 /* tcp_input.c */
-int tcp_reass _P((register struct tcpcb *, register struct tcpiphdr *, struct mbuf *));
-void tcp_input _P((register struct mbuf *, int, struct socket *));
-void tcp_dooptions _P((struct tcpcb *, u_char *, int, struct tcpiphdr *));
-void tcp_xmit_timer _P((register struct tcpcb *, int));
-int tcp_mss _P((register struct tcpcb *, u_int));
+int tcp_reass (register struct tcpcb *, register struct tcpiphdr *, struct mbuf *);
+void tcp_input (register struct mbuf *, int, struct socket *);
+void tcp_dooptions (struct tcpcb *, u_char *, int, struct tcpiphdr *);
+void tcp_xmit_timer (register struct tcpcb *, int);
+int tcp_mss (register struct tcpcb *, u_int);
 
 /* tcp_output.c */
-int tcp_output _P((register struct tcpcb *));
-void tcp_setpersist _P((register struct tcpcb *));
+int tcp_output (register struct tcpcb *);
+void tcp_setpersist (register struct tcpcb *);
 
 /* tcp_subr.c */
-void tcp_init _P((void));
-void tcp_cleanup _P((void));
-void tcp_template _P((struct tcpcb *));
-void tcp_respond _P((struct tcpcb *, register struct tcpiphdr *, register struct mbuf *, tcp_seq, tcp_seq, int));
-struct tcpcb * tcp_newtcpcb _P((struct socket *));
-struct tcpcb * tcp_close _P((register struct tcpcb *));
-void tcp_drain _P((void));
-void tcp_sockclosed _P((struct tcpcb *));
-int tcp_fconnect _P((struct socket *));
-void tcp_connect _P((struct socket *));
-int tcp_attach _P((struct socket *));
-u_int8_t tcp_tos _P((struct socket *));
-int tcp_emu _P((struct socket *, struct mbuf *));
-int tcp_ctl _P((struct socket *));
+void tcp_init (void);
+void tcp_cleanup (void);
+void tcp_template (struct tcpcb *);
+void tcp_respond (struct tcpcb *, register struct tcpiphdr *, register struct mbuf *, tcp_seq, tcp_seq, int);
+struct tcpcb * tcp_newtcpcb (struct socket *);
+struct tcpcb * tcp_close (register struct tcpcb *);
+void tcp_drain (void);
+void tcp_sockclosed (struct tcpcb *);
+int tcp_fconnect (struct socket *);
+void tcp_connect (struct socket *);
+int tcp_attach (struct socket *);
+u_int8_t tcp_tos (struct socket *);
+int tcp_emu (struct socket *, struct mbuf *);
+int tcp_ctl (struct socket *);
 struct tcpcb *tcp_drop(struct tcpcb *tp, int err);
 
 #ifdef USE_PPP
