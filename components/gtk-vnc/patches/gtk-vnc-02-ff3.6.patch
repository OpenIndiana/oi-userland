--- a/plugin/gtk-vnc-plugin.h	Mon Jan 25 16:33:36 2010
+++ b/plugin/gtk-vnc-plugin.h	Mon Jan 25 16:26:54 2010
@@ -44,6 +44,11 @@
 #define MIME_TYPES_HANDLED  "application/x-gtk-vnc:gtk-vnc:VNC viewer"
 #define PLUGIN_DESCRIPTION  "VNC (remote desktop) viewer plugin"
 
+#define uint16 uint16_t
+#define int16 int16_t
+#define uint32 uint32_t
+#define int32 int32_t
+
 typedef struct {
   uint16 mode;
   NPWindow *window;
--- a/plugin/npshell.c	Mon Jan 25 16:24:38 2010
+++ b/plugin/npshell.c	Mon Jan 25 16:30:51 2010
@@ -81,8 +81,13 @@
 #include <string.h>
 
 #include <npapi.h>
-#include <npupp.h>
 
+#include <nspr.h>
+#define uint16 uint16_t
+#define int16 int16_t
+#define uint32 uint32_t
+#define int32 int32_t
+
 #include "gtk-vnc-plugin.h"
 
 /***********************************************************************
@@ -96,7 +96,7 @@
  *
  ***********************************************************************/
 
-char *
+const char *
 NPP_GetMIMEDescription(void)
 {
   return (char *) MIME_TYPES_HANDLED;
--- a/plugin/npunix.c	Mon Jan 25 16:24:31 2010
+++ b/plugin/npunix.c	Mon Jan 25 16:30:58 2010
@@ -55,8 +55,13 @@
 
 #include <stdio.h>
 #include <npapi.h>
-#include <npupp.h>
 
+#include <npfunctions.h>
+#define uint16 uint16_t
+#define int16 int16_t
+#define uint32 uint32_t
+#define int32 int32_t
+
 #include <glib.h>               /* just for G_GNUC_UNUSED */
 
 /*
@@ -107,150 +112,137 @@
 NPError
 NPN_GetValue(NPP instance, NPNVariable variable, void *r_value)
 {
-    return CallNPN_GetValueProc(gNetscapeFuncs.getvalue,
-                    instance, variable, r_value);
+    return gNetscapeFuncs.getvalue(instance, variable, r_value);
 }
 
 NPError
 NPN_SetValue(NPP instance, NPPVariable variable, void *value)
 {
-    return CallNPN_SetValueProc(gNetscapeFuncs.setvalue,
-                    instance, variable, value);
+    return gNetscapeFuncs.setvalue(instance, variable, value);
 }
 
 NPError
 NPN_GetURL(NPP instance, const char* url, const char* window)
 {
-    return CallNPN_GetURLProc(gNetscapeFuncs.geturl, instance, url, window);
+    return gNetscapeFuncs.geturl(instance, url, window);
 }
 
 NPError
 NPN_GetURLNotify(NPP instance, const char* url, const char* window, void* notifyData)
 {
-    return CallNPN_GetURLNotifyProc(gNetscapeFuncs.geturlnotify, instance, url, window, notifyData);
+    return gNetscapeFuncs.geturlnotify(instance, url, window, notifyData);
 }
 
 NPError
 NPN_PostURL(NPP instance, const char* url, const char* window,
          uint32 len, const char* buf, NPBool file)
 {
-    return CallNPN_PostURLProc(gNetscapeFuncs.posturl, instance,
-                    url, window, len, buf, file);
+    return gNetscapeFuncs.posturl(instance, url, window, len, buf, file);
 }
 
 NPError
 NPN_PostURLNotify(NPP instance, const char* url, const char* window, uint32 len,
                   const char* buf, NPBool file, void* notifyData)
 {
-    return CallNPN_PostURLNotifyProc(gNetscapeFuncs.posturlnotify,
-            instance, url, window, len, buf, file, notifyData);
+    return gNetscapeFuncs.posturlnotify(instance, url, window, len, buf, file, notifyData);
 }
 
 NPError
 NPN_RequestRead(NPStream* stream, NPByteRange* rangeList)
 {
-    return CallNPN_RequestReadProc(gNetscapeFuncs.requestread,
-                    stream, rangeList);
+    return gNetscapeFuncs.requestread(stream, rangeList);
 }
 
 NPError
 NPN_NewStream(NPP instance, NPMIMEType type, const char *window,
           NPStream** stream_ptr)
 {
-    return CallNPN_NewStreamProc(gNetscapeFuncs.newstream, instance,
-                    type, window, stream_ptr);
+    return gNetscapeFuncs.newstream(instance, type, window, stream_ptr);
 }
 
 int32
 NPN_Write(NPP instance, NPStream* stream, int32 len, void* buffer)
 {
-    return CallNPN_WriteProc(gNetscapeFuncs.write, instance,
-                    stream, len, buffer);
+    return gNetscapeFuncs.write(instance, stream, len, buffer);
 }
 
 NPError
 NPN_DestroyStream(NPP instance, NPStream* stream, NPError reason)
 {
-    return CallNPN_DestroyStreamProc(gNetscapeFuncs.destroystream,
-                        instance, stream, reason);
+    return gNetscapeFuncs.destroystream(instance, stream, reason);
 }
 
 void
 NPN_Status(NPP instance, const char* message)
 {
-    CallNPN_StatusProc(gNetscapeFuncs.status, instance, message);
+    gNetscapeFuncs.status(instance, message);
 }
 
 const char*
 NPN_UserAgent(NPP instance)
 {
-    return CallNPN_UserAgentProc(gNetscapeFuncs.uagent, instance);
+    return gNetscapeFuncs.uagent(instance);
 }
 
 void*
 NPN_MemAlloc(uint32 size)
 {
-    return CallNPN_MemAllocProc(gNetscapeFuncs.memalloc, size);
+    return gNetscapeFuncs.memalloc(size);
 }
 
 void NPN_MemFree(void* ptr)
 {
-    CallNPN_MemFreeProc(gNetscapeFuncs.memfree, ptr);
+    gNetscapeFuncs.memfree(ptr);
 }
 
 uint32 NPN_MemFlush(uint32 size)
 {
-    return CallNPN_MemFlushProc(gNetscapeFuncs.memflush, size);
+    return gNetscapeFuncs.memflush(size);
 }
 
 void NPN_ReloadPlugins(NPBool reloadPages)
 {
-    CallNPN_ReloadPluginsProc(gNetscapeFuncs.reloadplugins, reloadPages);
+    gNetscapeFuncs.reloadplugins(reloadPages);
 }
 
 #ifdef OJI
 JRIEnv* NPN_GetJavaEnv()
 {
-    return CallNPN_GetJavaEnvProc(gNetscapeFuncs.getJavaEnv);
+    return gNetscapeFuncs.getJavaEnv();
 }
 
 jref NPN_GetJavaPeer(NPP instance)
 {
-    return CallNPN_GetJavaPeerProc(gNetscapeFuncs.getJavaPeer,
-                       instance);
+    return gNetscapeFuncs.getJavaPeer(instance);
 }
 #endif
 
 void
 NPN_InvalidateRect(NPP instance, NPRect *invalidRect)
 {
-    CallNPN_InvalidateRectProc(gNetscapeFuncs.invalidaterect, instance,
-        invalidRect);
+    gNetscapeFuncs.invalidaterect(instance, invalidRect);
 }
 
 void
 NPN_InvalidateRegion(NPP instance, NPRegion invalidRegion)
 {
-    CallNPN_InvalidateRegionProc(gNetscapeFuncs.invalidateregion, instance,
-        invalidRegion);
+    gNetscapeFuncs.invalidateregion(instance, invalidRegion);
 }
 
 void
 NPN_ForceRedraw(NPP instance)
 {
-    CallNPN_ForceRedrawProc(gNetscapeFuncs.forceredraw, instance);
+    gNetscapeFuncs.forceredraw(instance);
 }
 
 void NPN_PushPopupsEnabledState(NPP instance, NPBool enabled)
 {
-    CallNPN_PushPopupsEnabledStateProc(gNetscapeFuncs.pushpopupsenabledstate,
-        instance, enabled);
+    gNetscapeFuncs.pushpopupsenabledstate(instance, enabled);
 }
 
 void NPN_PopPopupsEnabledState(NPP instance)
 {
-    CallNPN_PopPopupsEnabledStateProc(gNetscapeFuncs.poppopupsenabledstate,
-        instance);
+    gNetscapeFuncs.poppopupsenabledstate(instance);
 }
 
 
@@ -393,7 +385,7 @@
  *  - Netscape uses the return value to identify when an object instance
  *    of this plugin should be created.
  */
-char *
+const char *
 NP_GetMIMEDescription(void)
 {
     return NPP_GetMIMEDescription();
@@ -499,18 +491,18 @@
          */
         pluginFuncs->version    = (NP_VERSION_MAJOR << 8) + NP_VERSION_MINOR;
         pluginFuncs->size       = sizeof(NPPluginFuncs);
-        pluginFuncs->newp       = NewNPP_NewProc(Private_New);
-        pluginFuncs->destroy    = NewNPP_DestroyProc(Private_Destroy);
-        pluginFuncs->setwindow  = NewNPP_SetWindowProc(Private_SetWindow);
-        pluginFuncs->newstream  = NewNPP_NewStreamProc(Private_NewStream);
-        pluginFuncs->destroystream = NewNPP_DestroyStreamProc(Private_DestroyStream);
-        pluginFuncs->asfile     = NewNPP_StreamAsFileProc(Private_StreamAsFile);
-        pluginFuncs->writeready = NewNPP_WriteReadyProc(Private_WriteReady);
-        pluginFuncs->write      = NewNPP_WriteProc(Private_Write);
-        pluginFuncs->print      = NewNPP_PrintProc(Private_Print);
-        pluginFuncs->urlnotify  = NewNPP_URLNotifyProc(Private_URLNotify);
-        pluginFuncs->getvalue   = NewNPP_GetValueProc(Private_GetValue);
-        pluginFuncs->event      = NewNPP_HandleEventProc(Private_HandleEvent);
+        pluginFuncs->newp       = Private_New;
+        pluginFuncs->destroy    = Private_Destroy;
+        pluginFuncs->setwindow  = Private_SetWindow;
+        pluginFuncs->newstream  = Private_NewStream;
+        pluginFuncs->destroystream = Private_DestroyStream;
+        pluginFuncs->asfile     = Private_StreamAsFile;
+        pluginFuncs->writeready = Private_WriteReady;
+        pluginFuncs->write      = Private_Write;
+        pluginFuncs->print      = Private_Print;
+        pluginFuncs->urlnotify  = Private_URLNotify;
+        pluginFuncs->getvalue   = (NPP_GetValueProcPtr)Private_GetValue;
+        pluginFuncs->event      = Private_HandleEvent;
 #ifdef OJI
         pluginFuncs->javaClass  = Private_GetJavaClass();
 #endif
