Description: fix denial of service and possible code execution via
 overflow in tr_bitfieldEnsureNthBitAlloced
Origin: upstream, https://trac.transmissionbt.com/changeset/14303

Index: transmission-2.51/libtransmission/bitfield.c
===================================================================
--- transmission-2.51.orig/libtransmission/bitfield.c	2014-07-11 14:16:10.232959680 -0400
+++ transmission-2.51/libtransmission/bitfield.c	2014-07-11 14:17:20.168958596 -0400
@@ -150,7 +150,7 @@
 static size_t
 get_bytes_needed( size_t bit_count )
 {
-    return ( bit_count + 7u ) / 8u;
+    return (bit_count >> 3) + (bit_count & 7 ? 1 : 0);
 }
 
 static void
@@ -203,11 +203,16 @@
     }
 }
 
-static void
+static bool
 tr_bitfieldEnsureNthBitAlloced( tr_bitfield * b, size_t nth )
 {
     /* count is zero-based, so we need to allocate nth+1 bits before setting the nth */
+
+    if (nth == SIZE_MAX)
+      return false;
+
     tr_bitfieldEnsureBitsAlloced( b, nth + 1 );
+    return true;
 }
 
 static void
@@ -339,9 +344,8 @@
 void
 tr_bitfieldAdd( tr_bitfield * b, size_t nth )
 {
-    if( !tr_bitfieldHas( b, nth ) )
+    if (!tr_bitfieldHas (b, nth) && tr_bitfieldEnsureNthBitAlloced (b, nth))
     {
-        tr_bitfieldEnsureNthBitAlloced( b, nth );
         b->bits[nth >> 3u] |= ( 0x80 >> ( nth & 7u ) );
         tr_bitfieldIncTrueCount( b, 1 );
     }
@@ -367,7 +371,9 @@
     eb = end >> 3;
     em = 0xff << ( 7 - ( end & 7 ) );
 
-    tr_bitfieldEnsureNthBitAlloced( b, end );
+    if (!tr_bitfieldEnsureNthBitAlloced (b, end))
+      return;
+
     if( sb == eb )
     {
         b->bits[sb] |= ( sm & em );
@@ -388,9 +394,8 @@
 {
     assert( tr_bitfieldIsValid( b ) );
 
-    if( !tr_bitfieldHas( b, nth ) )
+    if (!tr_bitfieldHas (b, nth) && tr_bitfieldEnsureNthBitAlloced (b, nth))
     {
-        tr_bitfieldEnsureNthBitAlloced( b, nth );
         b->bits[nth >> 3u] &= ( 0xff7f >> ( nth & 7u ) );
         tr_bitfieldIncTrueCount( b, -1 );
     }
@@ -417,7 +422,9 @@
     eb = end >> 3;
     em = ~( 0xff << ( 7 - ( end & 7 ) ) );
 
-    tr_bitfieldEnsureNthBitAlloced( b, end );
+    if (!tr_bitfieldEnsureNthBitAlloced (b, end))
+      return;
+
     if( sb == eb )
     {
         b->bits[sb] &= ( sm | em );
Index: transmission-2.51/libtransmission/peer-msgs.c
===================================================================
--- transmission-2.51.orig/libtransmission/peer-msgs.c	2014-07-11 14:16:10.232959680 -0400
+++ transmission-2.51/libtransmission/peer-msgs.c	2014-07-11 14:16:10.228959680 -0400
@@ -35,6 +35,10 @@
 #include "utils.h"
 #include "version.h"
 
+#ifndef EBADMSG
+ #define EBADMSG EINVAL
+#endif
+
 /**
 ***
 **/
@@ -1559,6 +1563,12 @@
     assert( msgs );
     assert( req );
 
+    if (!requestIsValid (msgs, req)) {
+        dbgmsg (msgs, "dropping invalid block %u:%u->%u",
+                req->index, req->offset, req->length);
+        return EBADMSG;
+    }
+
     if( req->length != tr_torBlockCountBytes( msgs->torrent, block ) ) {
         dbgmsg( msgs, "wrong block size -- expected %u, got %d",
                 tr_torBlockCountBytes( msgs->torrent, block ), req->length );
