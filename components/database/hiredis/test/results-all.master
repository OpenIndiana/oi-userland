#01 redisContext uses injected allocators: [0;32mPASSED[0;0m
#02 redisReader uses injected allocators: [0;32mPASSED[0;0m
#03 hiredis calloc wrapper protects against overflow: [0;32mPASSED[0;0m
#04 Format command without interpolation: [0;32mPASSED[0;0m
#05 Format command with %s string interpolation: [0;32mPASSED[0;0m
#06 Format command with %s and an empty string: [0;32mPASSED[0;0m
#07 Format command with an empty string in between proper interpolations: [0;32mPASSED[0;0m
#08 Format command with %b string interpolation: [0;32mPASSED[0;0m
#09 Format command with %b and an empty string: [0;32mPASSED[0;0m
#10 Format command with literal %: [0;32mPASSED[0;0m
#11 Format command with printf-delegation (int): [0;32mPASSED[0;0m
#12 Format command with printf-delegation (char): [0;32mPASSED[0;0m
#13 Format command with printf-delegation (short): [0;32mPASSED[0;0m
#14 Format command with printf-delegation (long): [0;32mPASSED[0;0m
#15 Format command with printf-delegation (long long): [0;32mPASSED[0;0m
#16 Format command with printf-delegation (unsigned int): [0;32mPASSED[0;0m
#17 Format command with printf-delegation (unsigned char): [0;32mPASSED[0;0m
#18 Format command with printf-delegation (unsigned short): [0;32mPASSED[0;0m
#19 Format command with printf-delegation (unsigned long): [0;32mPASSED[0;0m
#20 Format command with printf-delegation (unsigned long long): [0;32mPASSED[0;0m
#21 Format command with printf-delegation (float): [0;32mPASSED[0;0m
#22 Format command with printf-delegation (double): [0;32mPASSED[0;0m
#23 Format command with unhandled printf format (specifier 'p' not supported): [0;32mPASSED[0;0m
#24 Format command with invalid printf format (specifier missing): [0;32mPASSED[0;0m
#25 Format command by passing argc/argv without lengths: [0;32mPASSED[0;0m
#26 Format command by passing argc/argv with lengths: [0;32mPASSED[0;0m
#27 Format command into sds by passing argc/argv without lengths: [0;32mPASSED[0;0m
#28 Format command into sds by passing argc/argv with lengths: [0;32mPASSED[0;0m
#29 Error handling in reply parser: [0;32mPASSED[0;0m
#30 Memory cleanup in reply parser: [0;32mPASSED[0;0m
#31 Can handle arbitrarily nested multi-bulks: [0;32mPASSED[0;0m
#32 Can parse arbitrarily nested multi-bulks correctly: [0;32mPASSED[0;0m
#33 Correctly parses LLONG_MAX: [0;32mPASSED[0;0m
#34 Set error when > LLONG_MAX: [0;32mPASSED[0;0m
#35 Correctly parses LLONG_MIN: [0;32mPASSED[0;0m
#36 Set error when < LLONG_MIN: [0;32mPASSED[0;0m
#37 Set error when array < -1: [0;32mPASSED[0;0m
#38 Set error when bulk < -1: [0;32mPASSED[0;0m
#39 Can configure maximum multi-bulk elements: [0;32mPASSED[0;0m
#40 Multi-bulk never overflows regardless of maxelements: [0;32mPASSED[0;0m
#41 Works with NULL functions for reply: [0;32mPASSED[0;0m
#42 Works when a single newline (\r\n) covers two calls to feed: [0;32mPASSED[0;0m
#43 Don't reset state after protocol error: [0;32mPASSED[0;0m
#44 Don't reset state after protocol error(not segfault): [0;32mPASSED[0;0m
#45 Don't do empty allocation for empty multi bulk: [0;32mPASSED[0;0m
#46 Can parse RESP3 verbatim strings: [0;32mPASSED[0;0m
#47 Can parse RESP3 push messages: [0;32mPASSED[0;0m
#48 Can parse RESP3 doubles: [0;32mPASSED[0;0m
#49 Set error on invalid RESP3 double: [0;32mPASSED[0;0m
#50 Correctly parses RESP3 double INFINITY: [0;32mPASSED[0;0m
#51 Correctly parses RESP3 double NaN: [0;32mPASSED[0;0m
#52 Correctly parses RESP3 double -Nan: [0;32mPASSED[0;0m
#53 Can parse RESP3 nil: [0;32mPASSED[0;0m
#54 Set error on invalid RESP3 nil: [0;32mPASSED[0;0m
#55 Can parse RESP3 bool (true): [0;32mPASSED[0;0m
#56 Can parse RESP3 bool (false): [0;32mPASSED[0;0m
#57 Set error on invalid RESP3 bool: [0;32mPASSED[0;0m
#58 Can parse RESP3 map: [0;32mPASSED[0;0m
#59 Can parse RESP3 set: [0;32mPASSED[0;0m
#60 Can parse RESP3 bignum: [0;32mPASSED[0;0m
#61 Can parse RESP3 doubles in an array: [0;32mPASSED[0;0m
#62 Returns error when host cannot be resolved: [0;32mPASSED[0;0m
#63 Returns error when the port is not open: [0;32mPASSED[0;0m
#64 We don't clobber connection exception with setsockopt error: [0;32mPASSED[0;0m
#65 Returns error when the unix_sock socket path doesn't accept connections: [0;32mPASSED[0;0m
#66 Don't fail when redisFree is passed a NULL value: [0;32mPASSED[0;0m
#67 Don't fail when freeReplyObject is passed a NULL value: [0;32mPASSED[0;0m

Testing against TCP connection (127.0.0.1:6379):
#68 Is able to deliver commands: [0;32mPASSED[0;0m
#69 Is a able to send commands verbatim: [0;32mPASSED[0;0m
#70 %s String interpolation works: [0;32mPASSED[0;0m
#71 %b String interpolation works: [0;32mPASSED[0;0m
#72 Binary reply length is correct: [0;32mPASSED[0;0m
#73 Can parse nil replies: [0;32mPASSED[0;0m
#74 Can parse integer replies: [0;32mPASSED[0;0m
#75 Can parse multi bulk replies: [0;32mPASSED[0;0m
#76 Can handle nested multi bulk replies: [0;32mPASSED[0;0m
#77 Send command by passing argc/argv: [0;32mPASSED[0;0m
#78 Can pass NULL to redisGetReply: [0;32mPASSED[0;0m
#79 RESP3 PUSH messages are handled out of band by default: [0;32mPASSED[0;0m
#80 We can set a custom RESP3 PUSH handler: [0;32mPASSED[0;0m
#81 We properly handle a NIL invalidation payload: [0;32mPASSED[0;0m
#82 With no handler, PUSH replies come in-band: [0;32mPASSED[0;0m
#83 With no PUSH handler, no replies are lost: [0;32mPASSED[0;0m
#84 We set a default RESP3 handler for redisContext: [0;32mPASSED[0;0m
#85 We don't set a default RESP3 push handler for redisAsyncContext: [0;32mPASSED[0;0m
#86 Our REDIS_OPT_NO_PUSH_AUTOFREE flag works: [0;32mPASSED[0;0m
#87 We can use redisOptions to set a custom PUSH handler for redisContext: [0;32mPASSED[0;0m
#88 We can use redisOptions to set a custom PUSH handler for redisAsyncContext: [0;32mPASSED[0;0m
#89 We can use redisOptions to set privdata: [0;32mPASSED[0;0m
#90 Our privdata destructor fires when we free the context: [0;32mPASSED[0;0m
#91 Successfully completes a command when the timeout is not exceeded: [0;32mPASSED[0;0m
#92 Does not return a reply when the command times out: [01;33mSKIPPED[0;0m
#93 Reconnect properly reconnects after a timeout: [0;32mPASSED[0;0m
#94 Reconnect properly uses owned parameters: [0;32mPASSED[0;0m
#95 Returns I/O error when the connection is lost: [0;32mPASSED[0;0m
#96 Returns I/O error on socket timeout: [0;32mPASSED[0;0m
#97 Set error when an invalid timeout usec value is used during connect: [0;32mPASSED[0;0m
#98 Set error when an invalid timeout sec value is used during connect: [0;32mPASSED[0;0m
#99 Append format command: [0;32mPASSED[0;0m
#100 We can enable TCP_KEEPALIVE: [0;32mPASSED[0;0m
#101 Setting TCP_USER_TIMEOUT errors when unsupported: [0;32mPASSED[0;0m
#102 Throughput:
	(1000x PING)
	(1000x LRANGE with 500 elements)
	(1000x INCRBY)
	(10000x PING (pipelined))
	(10000x LRANGE with 500 elements (pipelined))
	(10000x INCRBY (pipelined))

Testing against Unix socket connection (/tmp/redis.sock): [01;33mSKIPPED[0;0m

Testing asynchronous API using polling_adapter TCP (127.0.0.1:6379):
#103 Async connect: [0;32mPASSED[0;0m
#104 Async free after connect: [0;32mPASSED[0;0m
#105 Async connect timeout: [0;32mPASSED[0;0m
#106 Async PING/PONG: [0;32mPASSED[0;0m
#107 Async PING/PONG after connect timeout: [0;32mPASSED[0;0m
#108 Disconnect from onConnected callback (Issue #931): [0;32mPASSED[0;0m
#109 Ping/Pong from onConnected callback (Issue #931): [0;32mPASSED[0;0m

Testing against inherited fd (/tmp/redis.sock): [01;33mSKIPPED[0;0m
ALL TESTS PASSED (3 skipped)
