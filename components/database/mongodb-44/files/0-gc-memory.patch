--- mozilla-release/js/src/gc/Memory.h.orig	2021-05-13 13:30:24.865560298 +0000
+++ mozilla-release/js/src/gc/Memory.h	2021-05-13 13:30:45.117334321 +0000
@@ -41,7 +41,7 @@
 // Deallocate memory mapped content.
 void DeallocateMappedContent(void* p, size_t length);
 
-void* TestMapAlignedPagesLastDitch(size_t size, size_t alignment);
+static void* TestMapAlignedPagesLastDitch(size_t size, size_t alignment);
 
 void ProtectPages(void* p, size_t size);
 void MakePagesReadOnly(void* p, size_t size);
--- mozilla-release/js/src/gc/Memory.cpp.orig	2021-05-13 13:25:11.031039502 +0000
+++ mozilla-release/js/src/gc/Memory.cpp	2021-05-13 13:36:32.505422793 +0000
@@ -18,11 +18,6 @@
 # include "util/Windows.h"
 # include <psapi.h>
 
-#elif defined(SOLARIS)
-
-# include <sys/mman.h>
-# include <unistd.h>
-
 #elif defined(XP_UNIX)
 
 # include <algorithm>
@@ -84,7 +79,7 @@
     return uintptr_t(p) % alignment;
 }
 
-void*
+static void*
 TestMapAlignedPagesLastDitch(size_t size, size_t alignment)
 {
     return MapAlignedPagesLastDitch(size, alignment);
@@ -409,86 +404,6 @@
 
 #  endif
 
-#elif defined(SOLARIS)
-
-#ifndef MAP_NOSYNC
-# define MAP_NOSYNC 0
-#endif
-
-void
-InitMemorySubsystem()
-{
-    if (pageSize == 0)
-        pageSize = allocGranularity = size_t(sysconf(_SC_PAGESIZE));
-}
-
-void*
-MapAlignedPages(size_t size, size_t alignment)
-{
-    MOZ_ASSERT(size >= alignment);
-    MOZ_ASSERT(size >= allocGranularity);
-    MOZ_ASSERT(size % alignment == 0);
-    MOZ_ASSERT(size % pageSize == 0);
-    MOZ_ASSERT_IF(alignment < allocGranularity, allocGranularity % alignment == 0);
-    MOZ_ASSERT_IF(alignment > allocGranularity, alignment % allocGranularity == 0);
-
-    int prot = PROT_READ | PROT_WRITE;
-    int flags = MAP_PRIVATE | MAP_ANON | MAP_ALIGN | MAP_NOSYNC;
-
-    void* p = mmap((caddr_t)alignment, size, prot, flags, -1, 0);
-    if (p == MAP_FAILED)
-        return nullptr;
-    return p;
-}
-
-static void*
-MapAlignedPagesLastDitch(size_t size, size_t alignment)
-{
-    return nullptr;
-}
-
-void
-UnmapPages(void* p, size_t size)
-{
-    MOZ_ALWAYS_TRUE(0 == munmap((caddr_t)p, size));
-}
-
-bool
-MarkPagesUnused(void* p, size_t size)
-{
-    MOZ_ASSERT(OffsetFromAligned(p, pageSize) == 0);
-    return true;
-}
-
-bool
-MarkPagesInUse(void* p, size_t size)
-{
-    if (!DecommitEnabled())
-        return;
-
-    MOZ_ASSERT(OffsetFromAligned(p, pageSize) == 0);
-}
-
-size_t
-GetPageFaultCount()
-{
-    return 0;
-}
-
-void*
-AllocateMappedContent(int fd, size_t offset, size_t length, size_t alignment)
-{
-    // Not implemented.
-    return nullptr;
-}
-
-// Deallocate mapped memory for object.
-void
-DeallocateMappedContent(void* p, size_t length)
-{
-    // Not implemented.
-}
-
 #elif defined(XP_UNIX)
 
 void
@@ -504,6 +419,7 @@
 {
 
 #if defined(__ia64__) || defined(__aarch64__) || \
+ 	  (defined(__sun) && defined(__x86_64__)) || \
     (defined(__sparc__) && defined(__arch64__) && (defined(__NetBSD__) || defined(__linux__)))
     MOZ_ASSERT((0xffff800000000000ULL & (uintptr_t(desired) + length - 1)) == 0);
 #endif
@@ -554,7 +470,8 @@
         return nullptr;
     }
     return region;
-#elif defined(__aarch64__) || (defined(__sparc__) && defined(__arch64__) && defined(__linux__))
+#elif defined(__aarch64__) || \
+	 (defined(__sparc__) && defined(__arch64__) && defined(__linux__)) || (defined(__sun) && defined(__x86_64__))
    /*
     * There might be similar virtual address issue on arm64 which depends on
     * hardware and kernel configurations. But the work around is slightly
