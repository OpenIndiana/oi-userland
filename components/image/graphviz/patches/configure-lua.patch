We would normally patch configure.ac instead, but when running autoreconf or
autogen.sh, it blows up in various places, depending on how hard we try.  Simply
patching configure is far simpler.

--- graphviz-2.28.0/configure.orig	2012-10-22 05:49:36.151525827 -0700
+++ graphviz-2.28.0/configure	2012-10-22 05:55:46.475647464 -0700
@@ -20679,7 +20679,17 @@
 
         { $as_echo "$as_me:${as_lineno-$LINENO}: checking for Lua compiling and linking" >&5
 $as_echo_n "checking for Lua compiling and linking... " >&6; }
-        LUA_TEST=`LT=luatest.c ; echo "#include <lua.h>" > $LT;  echo "#include <lualib.h>" >> $LT; echo "int main() { luaopen_base((lua_State *)lua_open()); return 0; }" >> $LT ; $CC -Wall $LT -o $LT.out $LUA_INCLUDES $LUA_LIBS $CFLAGS $LDFLAGS 1>/dev/null 2>&1 ; echo $?; rm -f $LT $LT.out 1>/dev/null 2>&1`
+        LUA_TEST=`LT=luatest.c ; \
+	    echo "#include <lua.h>" > $LT; \
+	    echo "#include <lualib.h>" >> $LT; \
+	    echo "#if LUA_VERSION_NUM >= 502" >> $LT; \
+	    echo "#include <lauxlib.h>" >> $LT; \
+	    echo "int main() { luaopen_base((lua_State *)luaL_newstate());" >> $LT; \
+	    echo "#else" >> $LT; \
+            echo "int main() { luaopen_base((lua_State *)lua_open());" >> $LT; \
+	    echo "#endif" >> $LT; \
+	    echo "return 0; }" >> $LT ; \
+	    $CC $LT -o $LT.out $LUA_INCLUDES $LUA_LIBS $CFLAGS $LDFLAGS 1>/dev/null 2>&1 ; echo $?; rm -f $LT $LT.out 1>/dev/null 2>&1`
         if test "x$LUA_TEST" != "x0" ; then
           { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
 $as_echo "no" >&6; }
