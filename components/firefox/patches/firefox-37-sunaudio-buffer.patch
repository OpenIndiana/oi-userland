diff --git a/media/libsydneyaudio/src/sydney_audio_sunaudio.c b/media/libsydneyaudio/src/sydney_audio_sunaudio.c
--- a/media/libsydneyaudio/src/sydney_audio_sunaudio.c
+++ b/media/libsydneyaudio/src/sydney_audio_sunaudio.c
@@ -122,31 +122,33 @@ struct sa_stream {
   unsigned int      rate;
   unsigned int      n_channels;
   unsigned int      bytes_per_ch;
 
   /* buffer list */
   sa_buf          * bl_head;
   sa_buf          * bl_tail;
   int               n_bufs;
+
+  size_t            buffer_size;
 };
 
 /* Use a default buffer size with enough room for one second of audio,
  * assuming stereo data at 44.1kHz with 32 bits per channel, and impose
  * a generous limit on the number of buffers.
  */
-#define BUF_SIZE    (2 * 44100 * 4)
+#define BUF_SIZE_MS 200
 #define BUF_LIMIT   5
 
 #if BUF_LIMIT < 2
 #error BUF_LIMIT must be at least 2!
 #endif
 
 static void *audio_callback(void *s);
-static sa_buf *new_buffer(void);
+static sa_buf *new_buffer(size_t bufsz);
 static int shutdown_device(sa_stream_t *s);
 
 /*
  * -----------------------------------------------------------------------------
  * Startup and shutdown functions
  * -----------------------------------------------------------------------------
  */
 
@@ -176,35 +178,45 @@ sa_stream_create_pcm(
 
   /*
    * Allocate the instance and required resources.
    */
   sa_stream_t *s;
   if ((s = malloc(sizeof(sa_stream_t))) == NULL) {
     return SA_ERROR_OOM;
   }
-  if ((s->bl_head = new_buffer()) == NULL) {
-    free(s);
-    return SA_ERROR_SYSTEM;
-  }
-  if (pthread_mutex_init(&s->mutex, NULL) != 0) {
-    free(s->bl_head);
-    free(s);
-    return SA_ERROR_SYSTEM;
-  }
 
   s->output_fd          = -1;
   s->playing            = false;
   s->bytes_played       = 0;
   s->rate               = rate;
   s->n_channels         = n_channels;
   s->bytes_per_ch       = 2;
+  s->buffer_size        = s->bytes_per_ch *
+                          ((rate * n_channels * BUF_SIZE_MS) / 1000);
+
+  /* round buffer_size up to ensure it's divisible by the number of bytes per frame. */
+  if (s->buffer_size % (s->bytes_per_ch * n_channels) != 0) {
+    s->buffer_size += (s->bytes_per_ch * n_channels) - (s->buffer_size % (s->bytes_per_ch * n_channels));
+  }
+
+  if ((s->bl_head = new_buffer(s->buffer_size)) == NULL) {
+    free(s);
+    return SA_ERROR_OOM;
+  }
+
   s->bl_tail            = s->bl_head;
   s->n_bufs             = 1;
 
+  if (pthread_mutex_init(&s->mutex, NULL) != 0) {
+    free(s->bl_head);
+    free(s);
+    return SA_ERROR_SYSTEM;
+  }
+
   *_s = s;
   return SA_SUCCESS;
 }
 
 int
 sa_stream_open(sa_stream_t *s) {
   if (s == NULL) {
     return SA_ERROR_NO_INIT;
@@ -388,17 +400,17 @@ sa_stream_write(sa_stream_t *s, const vo
        */
       if (nbytes > 0 && s->n_bufs == BUF_LIMIT) {
 #ifdef TIMING_TRACE
         printf("#");  /* too much audio data */
 #endif
         if (!s->playing) {
           /*
            * We haven't even started playing yet! That means the
-           * BUF_SIZE/BUF_LIMIT values are too low... Not much we can
+           * BUF_SIZE_MS/BUF_LIMIT values are too low... Not much we can
            * do here; spinning won't help because the audio callback
            * hasn't been enabled yet. Oh well, error time.
            */
           printf("Too much audio data received before audio device enabled!\n");
           result = SA_ERROR_SYSTEM;
           break;
         }
         while (s->n_bufs == BUF_LIMIT) {
@@ -407,17 +419,17 @@ sa_stream_write(sa_stream_t *s, const vo
           nanosleep(&ts, NULL);
           pthread_mutex_lock(&s->mutex);
         }
       }
 
       /*
        * Allocate a new tail buffer, and go 'round again to fill it up.
        */
-      if ((s->bl_tail->next = new_buffer()) == NULL) {
+      if ((s->bl_tail->next = new_buffer(s->buffer_size)) == NULL) {
         result = SA_ERROR_OOM;
         break;
       }
       s->n_bufs++;
       s->bl_tail = s->bl_tail->next;
 
     } /* if (nbytes <= avail), else */
 
@@ -497,17 +509,17 @@ sa_stream_get_write_size(sa_stream_t *s,
   pthread_mutex_lock(&s->mutex);
 
   /*
    * The sum of the free space in the tail buffer plus the size of any new
    * buffers represents the write space available before blocking.
    */
 
   unsigned int avail = s->bl_tail->size - s->bl_tail->end;
-  avail += (BUF_LIMIT - s->n_bufs) * BUF_SIZE;
+  avail += (BUF_LIMIT - s->n_bufs) * s->buffer_size;
   *size = avail;
 
   pthread_mutex_unlock(&s->mutex);
   return SA_SUCCESS;
 }
 
 /* ---------------------------------------------------------------------------
  * General query and support functions
@@ -580,20 +592,20 @@ sa_stream_resume(sa_stream_t *s) {
   pthread_mutex_lock(&s->mutex);
   int result = sa_stream_open(s);
   pthread_mutex_unlock(&s->mutex);
 
   return result;
 }
 
 static sa_buf *
-new_buffer(void) {
-  sa_buf  * b = malloc(sizeof(sa_buf) + BUF_SIZE);
+new_buffer(size_t bufsz) {
+  sa_buf  * b = malloc(sizeof(sa_buf) + bufsz);
   if (b != NULL) {
-    b->size  = BUF_SIZE;
+    b->size  = bufsz;
     b->start = 0;
     b->end   = 0;
     b->next  = NULL;
   }
   return b;
 }
 
 static int
