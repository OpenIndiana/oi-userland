From def97fb945a98544938087eff3111e16ce58da6d Mon Sep 17 00:00:00 2001
From: Alan Modra <amodra@gmail.com>
Date: Thu, 28 Jan 2021 10:30:36 +1030
Subject: [PATCH] PR27259, SHF_LINK_ORDER self-link

This stops ld from endless looping on SHF_LINK_ORDER sh_link loops.

bfd/
	PR 27259
	* elflink.c (_bfd_elf_gc_mark_extra_sections): Use linker_mark to
	prevent endless looping of linked-to sections.
ld/
	PR 27259
	* ldelf.c (ldelf_before_place_orphans): Use linker_mark to
	prevent endless looping of linked-to sections.
---
 bfd/ChangeLog |  6 ++++++
 bfd/elflink.c | 24 ++++++++++++++++--------
 ld/ChangeLog  |  6 ++++++
 ld/ldelf.c    | 21 ++++++++++++++-------
 4 files changed, 42 insertions(+), 15 deletions(-)

#diff --git a/bfd/ChangeLog b/bfd/ChangeLog
#index c8fcb3a6845..0fdc1fa1bc3 100644
#--- a/bfd/ChangeLog
#+++ b/bfd/ChangeLog
#@@ -1,3 +1,9 @@
#+2021-01-28  Alan Modra  <amodra@gmail.com>
#+
#+	PR 27259
#+	* elflink.c (_bfd_elf_gc_mark_extra_sections): Use linker_mark to
#+	prevent endless looping of linked-to sections.
#+
# 2020-12-17  Mihails Strasuns  <mihails.strasuns@intel.com>
# 
# 	* bfd-elf.h (elfcore_write_file_note): New function.
diff --git a/bfd/elflink.c b/bfd/elflink.c
index 59a6080f37a..47c3fb4e683 100644
--- a/bfd/elflink.c
+++ b/bfd/elflink.c
@@ -13631,15 +13631,23 @@ _bfd_elf_gc_mark_extra_sections (struct bfd_link_info *info,
 	      /* Since all sections, except for backend specific ones,
 		 have been garbage collected, call mark_hook on this
 		 section if any of its linked-to sections is marked.  */
-	      asection *linked_to_sec = elf_linked_to_section (isec);
-	      for (; linked_to_sec != NULL;
+	      asection *linked_to_sec;
+	      for (linked_to_sec = elf_linked_to_section (isec);
+		   linked_to_sec != NULL && !linked_to_sec->linker_mark;
 		   linked_to_sec = elf_linked_to_section (linked_to_sec))
-		if (linked_to_sec->gc_mark)
-		  {
-		    if (!_bfd_elf_gc_mark (info, isec, mark_hook))
-		      return FALSE;
-		    break;
-		  }
+		{
+		  if (linked_to_sec->gc_mark)
+		    {
+		      if (!_bfd_elf_gc_mark (info, isec, mark_hook))
+			return FALSE;
+		      break;
+		    }
+		  linked_to_sec->linker_mark = 1;
+		}
+	      for (linked_to_sec = elf_linked_to_section (isec);
+		   linked_to_sec != NULL && linked_to_sec->linker_mark;
+		   linked_to_sec = elf_linked_to_section (linked_to_sec))
+		linked_to_sec->linker_mark = 0;
 	    }
 
 	  if (!debug_frag_seen
#diff --git a/ld/ChangeLog b/ld/ChangeLog
#index df20606bee5..9dfff4af284 100644
#--- a/ld/ChangeLog
#+++ b/ld/ChangeLog
#@@ -1,3 +1,9 @@
#+2021-01-28  Alan Modra  <amodra@gmail.com>
#+
#+	PR 27259
#+	* ldelf.c (ldelf_before_place_orphans): Use linker_mark to
#+	prevent endless looping of linked-to sections.
#+
# 2021-01-26  H.J. Lu  <hongjiu.lu@intel.com>
# 
# 	* testsuite/ld-x86-64/bnd-plt-1.d: Fix a typo.
diff --git a/ld/ldelf.c b/ld/ldelf.c
index 9887e53c17f..049992544a2 100644
--- a/ld/ldelf.c
+++ b/ld/ldelf.c
@@ -2188,14 +2188,21 @@ ldelf_before_place_orphans (void)
 	       been discarded.  */
 	    asection *linked_to_sec;
 	    for (linked_to_sec = elf_linked_to_section (isec);
-		 linked_to_sec != NULL;
+		 linked_to_sec != NULL && !linked_to_sec->linker_mark;
 		 linked_to_sec = elf_linked_to_section (linked_to_sec))
-	      if (discarded_section (linked_to_sec))
-		{
-		  isec->output_section = bfd_abs_section_ptr;
-		  isec->flags |= SEC_EXCLUDE;
-		  break;
-		}
+	      {
+		if (discarded_section (linked_to_sec))
+		  {
+		    isec->output_section = bfd_abs_section_ptr;
+		    isec->flags |= SEC_EXCLUDE;
+		    break;
+		  }
+		linked_to_sec->linker_mark = 1;
+	      }
+	    for (linked_to_sec = elf_linked_to_section (isec);
+		 linked_to_sec != NULL && linked_to_sec->linker_mark;
+		 linked_to_sec = elf_linked_to_section (linked_to_sec))
+	      linked_to_sec->linker_mark = 0;
 	  }
       }
 }
-- 
2.27.0

