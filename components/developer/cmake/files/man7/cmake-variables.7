.\" Man page generated from reStructuredText.
.
.TH "CMAKE-VARIABLES" "7" "October 14, 2015" "3.3.2" "CMake"
.SH NAME
cmake-variables \- CMake Variables Reference
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH VARIABLES THAT PROVIDE INFORMATION
.SS CMAKE_ARGC
.sp
Number of command line arguments passed to CMake in script mode.
.sp
When run in \-P script mode, CMake sets this variable to the number of
command line arguments.  See also CMAKE_ARGV0, 1, 2 ...
.SS CMAKE_ARGV0
.sp
Command line argument passed to CMake in script mode.
.sp
When run in \-P script mode, CMake sets this variable to the first
command line argument.  It then also sets CMAKE_ARGV1, CMAKE_ARGV2,
...  and so on, up to the number of command line arguments given.  See
also CMAKE_ARGC.
.SS CMAKE_AR
.sp
Name of archiving tool for static libraries.
.sp
This specifies the name of the program that creates archive or static
libraries.
.SS CMAKE_BINARY_DIR
.sp
The path to the top level of the build tree.
.sp
This is the full path to the top level of the current CMake build
tree.  For an in\-source build, this would be the same as
CMAKE_SOURCE_DIR.
.SS CMAKE_BUILD_TOOL
.sp
This variable exists only for backwards compatibility.
It contains the same value as \fBCMAKE_MAKE_PROGRAM\fP\&.
Use that variable instead.
.SS CMAKE_CACHEFILE_DIR
.sp
The directory with the CMakeCache.txt file.
.sp
This is the full path to the directory that has the CMakeCache.txt
file in it.  This is the same as CMAKE_BINARY_DIR.
.SS CMAKE_CACHE_MAJOR_VERSION
.sp
Major version of CMake used to create the CMakeCache.txt file
.sp
This stores the major version of CMake used to write a CMake cache
file.  It is only different when a different version of CMake is run
on a previously created cache file.
.SS CMAKE_CACHE_MINOR_VERSION
.sp
Minor version of CMake used to create the CMakeCache.txt file
.sp
This stores the minor version of CMake used to write a CMake cache
file.  It is only different when a different version of CMake is run
on a previously created cache file.
.SS CMAKE_CACHE_PATCH_VERSION
.sp
Patch version of CMake used to create the CMakeCache.txt file
.sp
This stores the patch version of CMake used to write a CMake cache
file.  It is only different when a different version of CMake is run
on a previously created cache file.
.SS CMAKE_CFG_INTDIR
.sp
Build\-time reference to per\-configuration output subdirectory.
.sp
For native build systems supporting multiple configurations in the
build tree (such as Visual Studio and Xcode), the value is a reference
to a build\-time variable specifying the name of the per\-configuration
output subdirectory.  On Makefile generators this evaluates to "."
because there is only one configuration in a build tree.  Example
values:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$(IntDir)            = Visual Studio 6
$(ConfigurationName) = Visual Studio 7, 8, 9
$(Configuration)     = Visual Studio 10
$(CONFIGURATION)     = Xcode
\&.                    = Make\-based tools
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Since these values are evaluated by the native build system, this
variable is suitable only for use in command lines that will be
evaluated at build time.  Example of intended usage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
add_executable(mytool mytool.c)
add_custom_command(
  OUTPUT out.txt
  COMMAND ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool
          ${CMAKE_CURRENT_SOURCE_DIR}/in.txt out.txt
  DEPENDS mytool in.txt
  )
add_custom_target(drive ALL DEPENDS out.txt)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that CMAKE_CFG_INTDIR is no longer necessary for this purpose but
has been left for compatibility with existing projects.  Instead
add_custom_command() recognizes executable target names in its COMMAND
option, so "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool"
can be replaced by just "mytool".
.sp
This variable is read\-only.  Setting it is undefined behavior.  In
multi\-configuration build systems the value of this variable is passed
as the value of preprocessor symbol "CMAKE_INTDIR" to the compilation
of all source files.
.SS CMAKE_COMMAND
.sp
The full path to the cmake executable.
.sp
This is the full path to the CMake executable cmake which is useful
from custom commands that want to use the cmake \-E option for portable
system commands.  (e.g.  /usr/local/bin/cmake
.SS CMAKE_CROSSCOMPILING
.sp
Is CMake currently cross compiling.
.sp
This variable will be set to true by CMake if CMake is cross
compiling.  Specifically if the build platform is different from the
target platform.
.SS CMAKE_CROSSCOMPILING_EMULATOR
.sp
This variable is only used when \fBCMAKE_CROSSCOMPILING\fP is on. It
should point to a command on the host system that can run executable built
for the target system.
.sp
The command will be used to run \fBtry_run()\fP generated executables,
which avoids manual population of the TryRunResults.cmake file.
.sp
It is also used as the default value for the
\fBCROSSCOMPILING_EMULATOR\fP target property of executables.
.SS CMAKE_CTEST_COMMAND
.sp
Full path to ctest command installed with cmake.
.sp
This is the full path to the CTest executable ctest which is useful
from custom commands that want to use the cmake \-E option for portable
system commands.
.SS CMAKE_CURRENT_BINARY_DIR
.sp
The path to the binary directory currently being processed.
.sp
This the full path to the build directory that is currently being
processed by cmake.  Each directory added by add_subdirectory will
create a binary directory in the build tree, and as it is being
processed this variable will be set.  For in\-source builds this is the
current source directory being processed.
.SS CMAKE_CURRENT_LIST_DIR
.sp
Full directory of the listfile currently being processed.
.sp
As CMake processes the listfiles in your project this variable will
always be set to the directory where the listfile which is currently
being processed (CMAKE_CURRENT_LIST_FILE) is located.  The value has
dynamic scope.  When CMake starts processing commands in a source file
it sets this variable to the directory where this file is located.
When CMake finishes processing commands from the file it restores the
previous value.  Therefore the value of the variable inside a macro or
function is the directory of the file invoking the bottom\-most entry
on the call stack, not the directory of the file containing the macro
or function definition.
.sp
See also CMAKE_CURRENT_LIST_FILE.
.SS CMAKE_CURRENT_LIST_FILE
.sp
Full path to the listfile currently being processed.
.sp
As CMake processes the listfiles in your project this variable will
always be set to the one currently being processed.  The value has
dynamic scope.  When CMake starts processing commands in a source file
it sets this variable to the location of the file.  When CMake
finishes processing commands from the file it restores the previous
value.  Therefore the value of the variable inside a macro or function
is the file invoking the bottom\-most entry on the call stack, not the
file containing the macro or function definition.
.sp
See also CMAKE_PARENT_LIST_FILE.
.SS CMAKE_CURRENT_LIST_LINE
.sp
The line number of the current file being processed.
.sp
This is the line number of the file currently being processed by
cmake.
.SS CMAKE_CURRENT_SOURCE_DIR
.sp
The path to the source directory currently being processed.
.sp
This the full path to the source directory that is currently being
processed by cmake.
.SS CMAKE_DL_LIBS
.sp
Name of library containing dlopen and dlcose.
.sp
The name of the library that has dlopen and dlclose in it, usually
\-ldl on most UNIX machines.
.SS CMAKE_EDIT_COMMAND
.sp
Full path to cmake\-gui or ccmake.  Defined only for Makefile generators
when not using an "extra" generator for an IDE.
.sp
This is the full path to the CMake executable that can graphically
edit the cache.  For example, cmake\-gui or ccmake.
.SS CMAKE_EXECUTABLE_SUFFIX
.sp
The suffix for executables on this platform.
.sp
The suffix to use for the end of an executable filename if any, .exe
on Windows.
.sp
CMAKE_EXECUTABLE_SUFFIX_<LANG> overrides this for language <LANG>.
.SS CMAKE_EXTRA_GENERATOR
.sp
The extra generator used to build the project.
.sp
When using the Eclipse, CodeBlocks or KDevelop generators, CMake
generates Makefiles (CMAKE_GENERATOR) and additionally project files
for the respective IDE.  This IDE project file generator is stored in
CMAKE_EXTRA_GENERATOR (e.g.  "Eclipse CDT4").
.SS CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES
.sp
Additional suffixes for shared libraries.
.sp
Extensions for shared libraries other than that specified by
CMAKE_SHARED_LIBRARY_SUFFIX, if any.  CMake uses this to recognize
external shared library files during analysis of libraries linked by a
target.
.SS CMAKE_FIND_PACKAGE_NAME
.sp
Defined by the \fBfind_package()\fP command while loading
a find module to record the caller\-specified package name.
See command documentation for details.
.SS CMAKE_GENERATOR
.sp
The generator used to build the project.
.sp
The name of the generator that is being used to generate the build
files.  (e.g.  "Unix Makefiles", "Visual Studio 6", etc.)
.SS CMAKE_GENERATOR_PLATFORM
.sp
Generator\-specific target platform name specified by user.
.sp
Some CMake generators support a target platform name to be given
to the native build system to choose a compiler toolchain.
If the user specifies a platform name (e.g. via the cmake \-A option)
the value will be available in this variable.
.sp
The value of this variable should never be modified by project code.
A toolchain file specified by the \fBCMAKE_TOOLCHAIN_FILE\fP
variable may initialize \fBCMAKE_GENERATOR_PLATFORM\fP\&.  Once a given
build tree has been initialized with a particular value for this
variable, changing the value has undefined behavior.
.SS CMAKE_GENERATOR_TOOLSET
.sp
Native build system toolset name specified by user.
.sp
Some CMake generators support a toolset name to be given to the native
build system to choose a compiler.  If the user specifies a toolset
name (e.g.  via the cmake \-T option) the value will be available in
this variable.
.sp
The value of this variable should never be modified by project code.
A toolchain file specified by the \fBCMAKE_TOOLCHAIN_FILE\fP
variable may initialize \fBCMAKE_GENERATOR_TOOLSET\fP\&.  Once a given
build tree has been initialized with a particular value for this
variable, changing the value has undefined behavior.
.SS CMAKE_HOME_DIRECTORY
.sp
Path to top of source tree.
.sp
This is the path to the top level of the source tree.
.SS CMAKE_IMPORT_LIBRARY_PREFIX
.sp
The prefix for import libraries that you link to.
.sp
The prefix to use for the name of an import library if used on this
platform.
.sp
CMAKE_IMPORT_LIBRARY_PREFIX_<LANG> overrides this for language <LANG>.
.SS CMAKE_IMPORT_LIBRARY_SUFFIX
.sp
The suffix for import libraries that you link to.
.sp
The suffix to use for the end of an import library filename if used on
this platform.
.sp
CMAKE_IMPORT_LIBRARY_SUFFIX_<LANG> overrides this for language <LANG>.
.SS CMAKE_JOB_POOL_COMPILE
.sp
This variable is used to initialize the \fBJOB_POOL_COMPILE\fP
property on all the targets. See \fBJOB_POOL_COMPILE\fP
for additional information.
.SS CMAKE_JOB_POOL_LINK
.sp
This variable is used to initialize the \fBJOB_POOL_LINK\fP
property on all the targets. See \fBJOB_POOL_LINK\fP
for additional information.
.SS CMAKE_LINK_LIBRARY_SUFFIX
.sp
The suffix for libraries that you link to.
.sp
The suffix to use for the end of a library filename, .lib on Windows.
.SS CMAKE_MAJOR_VERSION
.sp
First version number component of the \fBCMAKE_VERSION\fP
variable.
.SS CMAKE_MAKE_PROGRAM
.sp
Tool that can launch the native build system.
The value may be the full path to an executable or just the tool
name if it is expected to be in the \fBPATH\fP\&.
.sp
The tool selected depends on the \fBCMAKE_GENERATOR\fP used
to configure the project:
.INDENT 0.0
.IP \(bu 2
The Makefile generators set this to \fBmake\fP, \fBgmake\fP, or
a generator\-specific tool (e.g. \fBnmake\fP for "NMake Makefiles").
.sp
These generators store \fBCMAKE_MAKE_PROGRAM\fP in the CMake cache
so that it may be edited by the user.
.IP \(bu 2
The Ninja generator sets this to \fBninja\fP\&.
.sp
This generator stores \fBCMAKE_MAKE_PROGRAM\fP in the CMake cache
so that it may be edited by the user.
.IP \(bu 2
The Xcode generator sets this to \fBxcodebuild\fP (or possibly an
otherwise undocumented \fBcmakexbuild\fP wrapper implementing some
workarounds).
.sp
This generator prefers to lookup the build tool at build time
rather than to store \fBCMAKE_MAKE_PROGRAM\fP in the CMake cache
ahead of time.  This is because \fBxcodebuild\fP is easy to find,
the \fBcmakexbuild\fP wrapper is needed only for older Xcode versions,
and the path to \fBcmakexbuild\fP may be outdated if CMake itself moves.
.sp
For compatibility with versions of CMake prior to 3.2, if
a user or project explicitly adds \fBCMAKE_MAKE_PROGRAM\fP to
the CMake cache then CMake will use the specified value.
.IP \(bu 2
The Visual Studio generators set this to the full path to
\fBMSBuild.exe\fP (VS >= 10), \fBdevenv.com\fP (VS 7,8,9),
\fBVCExpress.exe\fP (VS Express 8,9), or \fBmsdev.exe\fP (VS 6).
(See also variables
\fBCMAKE_VS_MSBUILD_COMMAND\fP,
\fBCMAKE_VS_DEVENV_COMMAND\fP, and
\fBCMAKE_VS_MSDEV_COMMAND\fP\&.)
.sp
These generators prefer to lookup the build tool at build time
rather than to store \fBCMAKE_MAKE_PROGRAM\fP in the CMake cache
ahead of time.  This is because the tools are version\-specific
and can be located using the Windows Registry.  It is also
necessary because the proper build tool may depend on the
project content (e.g. the Intel Fortran plugin to VS 10 and 11
requires \fBdevenv.com\fP to build its \fB\&.vfproj\fP project files
even though \fBMSBuild.exe\fP is normally preferred to support
the \fBCMAKE_GENERATOR_TOOLSET\fP).
.sp
For compatibility with versions of CMake prior to 3.0, if
a user or project explicitly adds \fBCMAKE_MAKE_PROGRAM\fP to
the CMake cache then CMake will use the specified value if
possible.
.IP \(bu 2
The \fBGreen Hills MULTI\fP generator sets this to \fBgbuild\fP\&.
If a user or project explicitly adds \fBCMAKE_MAKE_PROGRAM\fP to
the CMake cache then CMake will use the specified value.
.UNINDENT
.sp
The \fBCMAKE_MAKE_PROGRAM\fP variable is set for use by project code.
The value is also used by the \fBcmake(1)\fP \fB\-\-build\fP and
\fBctest(1)\fP \fB\-\-build\-and\-test\fP tools to launch the native
build process.
.SS CMAKE_MATCH_COUNT
.sp
The number of matches with the last regular expression.
.sp
When a regular expression match is used, CMake fills in \fBCMAKE_MATCH_<n>\fP
variables with the match contents. The \fBCMAKE_MATCH_COUNT\fP variable holds
the number of match expressions when these are filled.
.SS CMAKE_MINIMUM_REQUIRED_VERSION
.sp
Version specified to cmake_minimum_required command
.sp
Variable containing the VERSION component specified in the
cmake_minimum_required command.
.SS CMAKE_MINOR_VERSION
.sp
Second version number component of the \fBCMAKE_VERSION\fP
variable.
.SS CMAKE_PARENT_LIST_FILE
.sp
Full path to the CMake file that included the current one.
.sp
While processing a CMake file loaded by include() or find_package()
this variable contains the full path to the file including it.  The
top of the include stack is always the CMakeLists.txt for the current
directory.  See also CMAKE_CURRENT_LIST_FILE.
.SS CMAKE_PATCH_VERSION
.sp
Third version number component of the \fBCMAKE_VERSION\fP
variable.
.SS CMAKE_PROJECT_NAME
.sp
The name of the current project.
.sp
This specifies name of the current project from the closest inherited
PROJECT command.
.SS CMAKE_RANLIB
.sp
Name of randomizing tool for static libraries.
.sp
This specifies name of the program that randomizes libraries on UNIX,
not used on Windows, but may be present.
.SS CMAKE_ROOT
.sp
Install directory for running cmake.
.sp
This is the install root for the running CMake and the Modules
directory can be found here.  This is commonly used in this format:
${CMAKE_ROOT}/Modules
.SS CMAKE_SCRIPT_MODE_FILE
.sp
Full path to the \-P script file currently being processed.
.sp
When run in \-P script mode, CMake sets this variable to the full path
of the script file.  When run to configure a CMakeLists.txt file, this
variable is not set.
.SS CMAKE_SHARED_LIBRARY_PREFIX
.sp
The prefix for shared libraries that you link to.
.sp
The prefix to use for the name of a shared library, lib on UNIX.
.sp
CMAKE_SHARED_LIBRARY_PREFIX_<LANG> overrides this for language <LANG>.
.SS CMAKE_SHARED_LIBRARY_SUFFIX
.sp
The suffix for shared libraries that you link to.
.sp
The suffix to use for the end of a shared library filename, .dll on
Windows.
.sp
CMAKE_SHARED_LIBRARY_SUFFIX_<LANG> overrides this for language <LANG>.
.SS CMAKE_SHARED_MODULE_PREFIX
.sp
The prefix for loadable modules that you link to.
.sp
The prefix to use for the name of a loadable module on this platform.
.sp
CMAKE_SHARED_MODULE_PREFIX_<LANG> overrides this for language <LANG>.
.SS CMAKE_SHARED_MODULE_SUFFIX
.sp
The suffix for shared libraries that you link to.
.sp
The suffix to use for the end of a loadable module filename on this
platform
.sp
CMAKE_SHARED_MODULE_SUFFIX_<LANG> overrides this for language <LANG>.
.SS CMAKE_SIZEOF_VOID_P
.sp
Size of a void pointer.
.sp
This is set to the size of a pointer on the target machine, and is determined
by a try compile.  If a 64 bit size is found, then the library search
path is modified to look for 64 bit libraries first.
.SS CMAKE_SKIP_INSTALL_RULES
.sp
Whether to disable generation of installation rules.
.sp
If TRUE, cmake will neither generate installaton rules nor
will it generate cmake_install.cmake files. This variable is FALSE by default.
.SS CMAKE_SKIP_RPATH
.sp
If true, do not add run time path information.
.sp
If this is set to TRUE, then the rpath information is not added to
compiled executables.  The default is to add rpath information if the
platform supports it.  This allows for easy running from the build
tree.  To omit RPATH in the install step, but not the build step, use
CMAKE_SKIP_INSTALL_RPATH instead.
.SS CMAKE_SOURCE_DIR
.sp
The path to the top level of the source tree.
.sp
This is the full path to the top level of the current CMake source
tree.  For an in\-source build, this would be the same as
CMAKE_BINARY_DIR.
.SS CMAKE_STANDARD_LIBRARIES
.sp
Libraries linked into every executable and shared library.
.sp
This is the list of libraries that are linked into all executables and
libraries.
.SS CMAKE_STATIC_LIBRARY_PREFIX
.sp
The prefix for static libraries that you link to.
.sp
The prefix to use for the name of a static library, lib on UNIX.
.sp
CMAKE_STATIC_LIBRARY_PREFIX_<LANG> overrides this for language <LANG>.
.SS CMAKE_STATIC_LIBRARY_SUFFIX
.sp
The suffix for static libraries that you link to.
.sp
The suffix to use for the end of a static library filename, .lib on
Windows.
.sp
CMAKE_STATIC_LIBRARY_SUFFIX_<LANG> overrides this for language <LANG>.
.SS CMAKE_TOOLCHAIN_FILE
.sp
Path to toolchain file supplied to \fBcmake(1)\fP\&.
.sp
This variable is specified on the command line when cross\-compiling with CMake.
It is the path to a file which is read early in the CMake run and which specifies
locations for compilers and toolchain utilities, and other target platform and
compiler related information.
.SS CMAKE_TWEAK_VERSION
.sp
Defined to \fB0\fP for compatibility with code written for older
CMake versions that may have defined higher values.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
In CMake versions 2.8.2 through 2.8.12, this variable holds
the fourth version number component of the
\fBCMAKE_VERSION\fP variable.
.UNINDENT
.UNINDENT
.SS CMAKE_VERBOSE_MAKEFILE
.sp
Enable verbose output from Makefile builds.
.sp
This variable is a cache entry initialized (to FALSE) by
the \fBproject()\fP command.  Users may enable the option
in their local build tree to get more verbose output from
Makefile builds and show each command line as it is launched.
.SS CMAKE_VERSION
.sp
The CMake version string as three non\-negative integer components
separated by \fB\&.\fP and possibly followed by \fB\-\fP and other information.
The first two components represent the feature level and the third
component represents either a bug\-fix level or development date.
.sp
Release versions and release candidate versions of CMake use the format:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<major>.<minor>.<patch>[\-rc<n>]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where the \fB<patch>\fP component is less than \fB20000000\fP\&.  Development
versions of CMake use the format:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<major>.<minor>.<date>[\-<id>]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where the \fB<date>\fP component is of format \fBCCYYMMDD\fP and \fB<id>\fP
may contain arbitrary text.  This represents development as of a
particular date following the \fB<major>.<minor>\fP feature release.
.sp
Individual component values are also available in variables:
.INDENT 0.0
.IP \(bu 2
\fBCMAKE_MAJOR_VERSION\fP
.IP \(bu 2
\fBCMAKE_MINOR_VERSION\fP
.IP \(bu 2
\fBCMAKE_PATCH_VERSION\fP
.IP \(bu 2
\fBCMAKE_TWEAK_VERSION\fP
.UNINDENT
.sp
Use the \fBif()\fP command \fBVERSION_LESS\fP, \fBVERSION_EQUAL\fP, or
\fBVERSION_GREATER\fP operators to compare version string values against
\fBCMAKE_VERSION\fP using a component\-wise test.  Version component
values may be 10 or larger so do not attempt to compare version
strings as floating\-point numbers.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
CMake versions 2.8.2 through 2.8.12 used three components for the
feature level.  Release versions represented the bug\-fix level in a
fourth component, i.e. \fB<major>.<minor>.<patch>[.<tweak>][\-rc<n>]\fP\&.
Development versions represented the development date in the fourth
component, i.e. \fB<major>.<minor>.<patch>.<date>[\-<id>]\fP\&.
.sp
CMake versions prior to 2.8.2 used three components for the
feature level and had no bug\-fix component.  Release versions
used an even\-valued second component, i.e.
\fB<major>.<even\-minor>.<patch>[\-rc<n>]\fP\&.  Development versions
used an odd\-valued second component with the development date as
the third component, i.e. \fB<major>.<odd\-minor>.<date>\fP\&.
.sp
The \fBCMAKE_VERSION\fP variable is defined by CMake 2.6.3 and higher.
Earlier versions defined only the individual component variables.
.UNINDENT
.UNINDENT
.SS CMAKE_VS_DEVENV_COMMAND
.sp
The generators for \fBVisual Studio 7\fP and above set this
variable to the \fBdevenv.com\fP command installed with the corresponding
Visual Studio version.  Note that this variable may be empty on
Visual Studio Express editions because they do not provide this tool.
.sp
This variable is not defined by other generators even if \fBdevenv.com\fP
is installed on the computer.
.sp
The \fBCMAKE_VS_MSBUILD_COMMAND\fP is also provided for
\fBVisual Studio 10 2010\fP and above.
See also the \fBCMAKE_MAKE_PROGRAM\fP variable.
.SS CMAKE_VS_INTEL_Fortran_PROJECT_VERSION
.sp
When generating for Visual Studio 7 or greater with the Intel Fortran
plugin installed, this specifies the .vfproj project file format
version.  This is intended for internal use by CMake and should not be
used by project code.
.SS CMAKE_VS_MSBUILD_COMMAND
.sp
The generators for \fBVisual Studio 10 2010\fP and above set this
variable to the \fBMSBuild.exe\fP command installed with the corresponding
Visual Studio version.
.sp
This variable is not defined by other generators even if \fBMSBuild.exe\fP
is installed on the computer.
.sp
The \fBCMAKE_VS_DEVENV_COMMAND\fP is also provided for the
non\-Express editions of Visual Studio.
See also the \fBCMAKE_MAKE_PROGRAM\fP variable.
.SS CMAKE_VS_MSDEV_COMMAND
.sp
The \fBVisual Studio 6\fP generator sets this variable to the
\fBmsdev.exe\fP command installed with Visual Studio 6.
.sp
This variable is not defined by other generators even if \fBmsdev.exe\fP
is installed on the computer.
.sp
See also the \fBCMAKE_MAKE_PROGRAM\fP variable.
.SS CMAKE_VS_NsightTegra_VERSION
.sp
When using a Visual Studio generator with the
\fBCMAKE_SYSTEM_NAME\fP variable set to \fBAndroid\fP,
this variable contains the version number of the
installed NVIDIA Nsight Tegra Visual Studio Edition.
.SS CMAKE_VS_PLATFORM_NAME
.sp
Visual Studio target platform name.
.sp
VS 8 and above allow project files to specify a target platform.
CMake provides the name of the chosen platform in this variable.
.SS CMAKE_VS_PLATFORM_TOOLSET
.sp
Visual Studio Platform Toolset name.
.sp
VS 10 and above use MSBuild under the hood and support multiple
compiler toolchains.  CMake may specify a toolset explicitly, such as
"v110" for VS 11 or "Windows7.1SDK" for 64\-bit support in VS 10
Express.  CMake provides the name of the chosen toolset in this
variable.
.SS CMAKE_XCODE_PLATFORM_TOOLSET
.sp
Xcode compiler selection.
.sp
Xcode supports selection of a compiler from one of the installed
toolsets.  CMake provides the name of the chosen toolset in this
variable, if any is explicitly selected (e.g.  via the cmake \-T
option).
.SS PROJECT_BINARY_DIR
.sp
Full path to build directory for project.
.sp
This is the binary directory of the most recent \fBproject()\fP command.
.SS <PROJECT\-NAME>_BINARY_DIR
.sp
Top level binary directory for the named project.
.sp
A variable is created with the name used in the \fBproject()\fP command,
and is the binary directory for the project.  This can be useful when
\fBadd_subdirectory()\fP is used to connect several projects.
.SS PROJECT_NAME
.sp
Name of the project given to the project command.
.sp
This is the name given to the most recent \fBproject()\fP command.
.SS <PROJECT\-NAME>_SOURCE_DIR
.sp
Top level source directory for the named project.
.sp
A variable is created with the name used in the \fBproject()\fP command,
and is the source directory for the project.  This can be useful when
\fBadd_subdirectory()\fP is used to connect several projects.
.SS <PROJECT\-NAME>_VERSION
.sp
Value given to the \fBVERSION\fP option of the most recent call to the
\fBproject()\fP command with project name \fB<PROJECT\-NAME>\fP, if any.
.sp
See also the component\-wise version variables
\fB<PROJECT\-NAME>_VERSION_MAJOR\fP,
\fB<PROJECT\-NAME>_VERSION_MINOR\fP,
\fB<PROJECT\-NAME>_VERSION_PATCH\fP, and
\fB<PROJECT\-NAME>_VERSION_TWEAK\fP\&.
.SS <PROJECT\-NAME>_VERSION_MAJOR
.sp
First version number component of the \fB<PROJECT\-NAME>_VERSION\fP
variable as set by the \fBproject()\fP command.
.SS <PROJECT\-NAME>_VERSION_MINOR
.sp
Second version number component of the \fB<PROJECT\-NAME>_VERSION\fP
variable as set by the \fBproject()\fP command.
.SS <PROJECT\-NAME>_VERSION_PATCH
.sp
Third version number component of the \fB<PROJECT\-NAME>_VERSION\fP
variable as set by the \fBproject()\fP command.
.SS <PROJECT\-NAME>_VERSION_TWEAK
.sp
Fourth version number component of the \fB<PROJECT\-NAME>_VERSION\fP
variable as set by the \fBproject()\fP command.
.SS PROJECT_SOURCE_DIR
.sp
Top level source directory for the current project.
.sp
This is the source directory of the most recent \fBproject()\fP command.
.SS PROJECT_VERSION
.sp
Value given to the \fBVERSION\fP option of the most recent call to the
\fBproject()\fP command, if any.
.sp
See also the component\-wise version variables
\fBPROJECT_VERSION_MAJOR\fP,
\fBPROJECT_VERSION_MINOR\fP,
\fBPROJECT_VERSION_PATCH\fP, and
\fBPROJECT_VERSION_TWEAK\fP\&.
.SS PROJECT_VERSION_MAJOR
.sp
First version number component of the \fBPROJECT_VERSION\fP
variable as set by the \fBproject()\fP command.
.SS PROJECT_VERSION_MINOR
.sp
Second version number component of the \fBPROJECT_VERSION\fP
variable as set by the \fBproject()\fP command.
.SS PROJECT_VERSION_PATCH
.sp
Third version number component of the \fBPROJECT_VERSION\fP
variable as set by the \fBproject()\fP command.
.SS PROJECT_VERSION_TWEAK
.sp
Fourth version number component of the \fBPROJECT_VERSION\fP
variable as set by the \fBproject()\fP command.
.SH VARIABLES THAT CHANGE BEHAVIOR
.SS BUILD_SHARED_LIBS
.sp
Global flag to cause add_library to create shared libraries if on.
.sp
If present and true, this will cause all libraries to be built shared
unless the library was explicitly added as a static library.  This
variable is often added to projects as an OPTION so that each user of
a project can decide if they want to build the project using shared or
static libraries.
.SS CMAKE_ABSOLUTE_DESTINATION_FILES
.sp
List of files which have been installed using  an ABSOLUTE DESTINATION path.
.sp
This variable is defined by CMake\-generated cmake_install.cmake
scripts.  It can be used (read\-only) by programs or scripts that
source those install scripts.  This is used by some CPack generators
(e.g.  RPM).
.SS CMAKE_APPBUNDLE_PATH
.sp
;\-list of directories specifying a search path
for OS X application bundles used by the \fBfind_program()\fP, and
\fBfind_package()\fP commands.
.SS CMAKE_AUTOMOC_RELAXED_MODE
.sp
Switch between strict and relaxed automoc mode.
.sp
By default, \fBAUTOMOC\fP behaves exactly as described in the documentation
of the \fBAUTOMOC\fP target property.  When set to \fBTRUE\fP, it accepts more
input and tries to find the correct input file for \fBmoc\fP even if it
differs from the documented behaviour.  In this mode it e.g.  also
checks whether a header file is intended to be processed by moc when a
\fB"foo.moc"\fP file has been included.
.sp
Relaxed mode has to be enabled for KDE4 compatibility.
.SS CMAKE_BACKWARDS_COMPATIBILITY
.sp
Deprecated.  See CMake Policy \fBCMP0001\fP documentation.
.SS CMAKE_BUILD_TYPE
.sp
Specifies the build type on single\-configuration generators.
.sp
This statically specifies what build type (configuration) will be
built in this build tree.  Possible values are empty, Debug, Release,
RelWithDebInfo and MinSizeRel.  This variable is only meaningful to
single\-configuration generators (such as make and Ninja) i.e.  those
which choose a single configuration when CMake runs to generate a
build tree as opposed to multi\-configuration generators which offer
selection of the build configuration within the generated build
environment.  There are many per\-config properties and variables
(usually following clean SOME_VAR_<CONFIG> order conventions), such as
CMAKE_C_FLAGS_<CONFIG>, specified as uppercase:
CMAKE_C_FLAGS_[DEBUG|RELEASE|RELWITHDEBINFO|MINSIZEREL].  For example,
in a build tree configured to build type Debug, CMake will see to
having CMAKE_C_FLAGS_DEBUG settings get added to the CMAKE_C_FLAGS
settings.  See also CMAKE_CONFIGURATION_TYPES.
.SS CMAKE_COLOR_MAKEFILE
.sp
Enables color output when using the Makefile generator.
.sp
When enabled, the generated Makefiles will produce colored output.
Default is ON.
.SS CMAKE_CONFIGURATION_TYPES
.sp
Specifies the available build types on multi\-config generators.
.sp
This specifies what build types (configurations) will be available
such as Debug, Release, RelWithDebInfo etc.  This has reasonable
defaults on most platforms, but can be extended to provide other build
types.  See also CMAKE_BUILD_TYPE for details of managing
configuration data, and CMAKE_CFG_INTDIR.
.SS CMAKE_DEBUG_TARGET_PROPERTIES
.sp
Enables tracing output for target properties.
.sp
This variable can be populated with a list of properties to generate
debug output for when evaluating target properties.  Currently it can
only be used when evaluating the \fBINCLUDE_DIRECTORIES\fP,
\fBCOMPILE_DEFINITIONS\fP, \fBCOMPILE_OPTIONS\fP,
\fBAUTOUIC_OPTIONS\fP, \fBSOURCES\fP, \fBCOMPILE_FEATURES\fP,
\fBPOSITION_INDEPENDENT_CODE\fP target properties and any other property
listed in \fBCOMPATIBLE_INTERFACE_STRING\fP and other \fBCOMPATIBLE_INTERFACE_\fP
properties.  It outputs an origin for each entry in the target property.
Default is unset.
.SS CMAKE_DISABLE_FIND_PACKAGE_<PackageName>
.sp
Variable for disabling find_package() calls.
.sp
Every non\-REQUIRED find_package() call in a project can be disabled by
setting the variable CMAKE_DISABLE_FIND_PACKAGE_<PackageName> to TRUE.
This can be used to build a project without an optional package,
although that package is installed.
.sp
This switch should be used during the initial CMake run.  Otherwise if
the package has already been found in a previous CMake run, the
variables which have been stored in the cache will still be there.  In
that case it is recommended to remove the cache variables for this
package from the cache using the cache editor or cmake \-U
.SS CMAKE_ERROR_DEPRECATED
.sp
Whether to issue deprecation errors for macros and functions.
.sp
If TRUE, this can be used by macros and functions to issue fatal
errors when deprecated macros or functions are used.  This variable is
FALSE by default.
.SS CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION
.sp
Ask cmake_install.cmake script to error out as soon as a file with absolute INSTALL DESTINATION is encountered.
.sp
The fatal error is emitted before the installation of the offending
file takes place.  This variable is used by CMake\-generated
cmake_install.cmake scripts.  If one sets this variable to ON while
running the script, it may get fatal error messages from the script.
.SS CMAKE_EXPORT_NO_PACKAGE_REGISTRY
.sp
Disable the \fBexport(PACKAGE)\fP command.
.sp
In some cases, for example for packaging and for system wide
installations, it is not desirable to write the user package registry.
If the \fI\%CMAKE_EXPORT_NO_PACKAGE_REGISTRY\fP variable is enabled,
the \fBexport(PACKAGE)\fP command will do nothing.
.sp
See also Disabling the Package Registry\&.
.SS CMAKE_SYSROOT
.sp
Path to pass to the compiler in the \fB\-\-sysroot\fP flag.
.sp
The \fBCMAKE_SYSROOT\fP content is passed to the compiler in the \fB\-\-sysroot\fP
flag, if supported.  The path is also stripped from the RPATH/RUNPATH if
necessary on installation.  The \fBCMAKE_SYSROOT\fP is also used to prefix
paths searched by the \fBfind_*\fP commands.
.sp
This variable may only be set in a toolchain file specified by
the \fBCMAKE_TOOLCHAIN_FILE\fP variable.
.SS CMAKE_FIND_LIBRARY_PREFIXES
.sp
Prefixes to prepend when looking for libraries.
.sp
This specifies what prefixes to add to library names when the
find_library command looks for libraries.  On UNIX systems this is
typically lib, meaning that when trying to find the foo library it
will look for libfoo.
.SS CMAKE_FIND_LIBRARY_SUFFIXES
.sp
Suffixes to append when looking for libraries.
.sp
This specifies what suffixes to add to library names when the
find_library command looks for libraries.  On Windows systems this is
typically .lib and .dll, meaning that when trying to find the foo
library it will look for foo.dll etc.
.SS CMAKE_FIND_NO_INSTALL_PREFIX
.sp
Ignore the \fBCMAKE_INSTALL_PREFIX\fP when searching for assets.
.sp
CMake adds the \fBCMAKE_INSTALL_PREFIX\fP and the
\fBCMAKE_STAGING_PREFIX\fP variable to the
\fBCMAKE_SYSTEM_PREFIX_PATH\fP by default. This variable may be set
on the command line to control that behavior.
.sp
Set \fI\%CMAKE_FIND_NO_INSTALL_PREFIX\fP to TRUE to tell find_package not
to search in the \fBCMAKE_INSTALL_PREFIX\fP or
\fBCMAKE_STAGING_PREFIX\fP by default.  Note that the
prefix may still be searched for other reasons, such as being the same prefix
as the CMake installation, or for being a built\-in system prefix.
.SS CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY
.sp
Skip User Package Registry in \fBfind_package()\fP calls.
.sp
In some cases, for example to locate only system wide installations, it
is not desirable to use the User Package Registry when searching
for packages. If the \fI\%CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY\fP
variable is enabled, all the \fBfind_package()\fP commands will skip
the User Package Registry as if they were called with the
\fBNO_CMAKE_PACKAGE_REGISTRY\fP argument.
.sp
See also Disabling the Package Registry\&.
.SS CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY
.sp
Skip System Package Registry in \fBfind_package()\fP calls.
.sp
In some cases, it is not desirable to use the
System Package Registry when searching for packages. If the
\fI\%CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY\fP variable is
enabled, all the \fBfind_package()\fP commands will skip
the System Package Registry as if they were called with the
\fBNO_CMAKE_SYSTEM_PACKAGE_REGISTRY\fP argument.
.sp
See also Disabling the Package Registry\&.
.SS CMAKE_FIND_PACKAGE_WARN_NO_MODULE
.sp
Tell find_package to warn if called without an explicit mode.
.sp
If find_package is called without an explicit mode option (MODULE,
CONFIG or NO_MODULE) and no Find<pkg>.cmake module is in
CMAKE_MODULE_PATH then CMake implicitly assumes that the caller
intends to search for a package configuration file.  If no package
configuration file is found then the wording of the failure message
must account for both the case that the package is really missing and
the case that the project has a bug and failed to provide the intended
Find module.  If instead the caller specifies an explicit mode option
then the failure message can be more specific.
.sp
Set CMAKE_FIND_PACKAGE_WARN_NO_MODULE to TRUE to tell find_package to
warn when it implicitly assumes Config mode.  This helps developers
enforce use of an explicit mode in all calls to find_package within a
project.
.SS CMAKE_FIND_ROOT_PATH
.sp
;\-list of root paths to search on the filesystem.
.sp
This variable is most useful when cross\-compiling. CMake uses the paths in
this list as alternative roots to find filesystem items with \fBfind_package()\fP,
\fBfind_library()\fP etc.
.SS CMAKE_FIND_ROOT_PATH_MODE_INCLUDE
.sp
This variable controls whether the \fBCMAKE_FIND_ROOT_PATH\fP and
\fBCMAKE_SYSROOT\fP are used by \fBfind_file()\fP and \fBfind_path()\fP\&.
.sp
If set to \fBONLY\fP, then only the roots in \fBCMAKE_FIND_ROOT_PATH\fP
will be searched. If set to \fBNEVER\fP, then the roots in
\fBCMAKE_FIND_ROOT_PATH\fP will be ignored and only the host system
root will be used. If set to \fBBOTH\fP, then the host system paths and the
paths in \fBCMAKE_FIND_ROOT_PATH\fP will be searched.
.SS CMAKE_FIND_ROOT_PATH_MODE_LIBRARY
.sp
This variable controls whether the \fBCMAKE_FIND_ROOT_PATH\fP and
\fBCMAKE_SYSROOT\fP are used by \fBfind_library()\fP\&.
.sp
If set to \fBONLY\fP, then only the roots in \fBCMAKE_FIND_ROOT_PATH\fP
will be searched. If set to \fBNEVER\fP, then the roots in
\fBCMAKE_FIND_ROOT_PATH\fP will be ignored and only the host system
root will be used. If set to \fBBOTH\fP, then the host system paths and the
paths in \fBCMAKE_FIND_ROOT_PATH\fP will be searched.
.SS CMAKE_FIND_ROOT_PATH_MODE_PACKAGE
.sp
This variable controls whether the \fBCMAKE_FIND_ROOT_PATH\fP and
\fBCMAKE_SYSROOT\fP are used by \fBfind_package()\fP\&.
.sp
If set to \fBONLY\fP, then only the roots in \fBCMAKE_FIND_ROOT_PATH\fP
will be searched. If set to \fBNEVER\fP, then the roots in
\fBCMAKE_FIND_ROOT_PATH\fP will be ignored and only the host system
root will be used. If set to \fBBOTH\fP, then the host system paths and the
paths in \fBCMAKE_FIND_ROOT_PATH\fP will be searched.
.SS CMAKE_FIND_ROOT_PATH_MODE_PROGRAM
.sp
This variable controls whether the \fBCMAKE_FIND_ROOT_PATH\fP and
\fBCMAKE_SYSROOT\fP are used by \fBfind_program()\fP\&.
.sp
If set to \fBONLY\fP, then only the roots in \fBCMAKE_FIND_ROOT_PATH\fP
will be searched. If set to \fBNEVER\fP, then the roots in
\fBCMAKE_FIND_ROOT_PATH\fP will be ignored and only the host system
root will be used. If set to \fBBOTH\fP, then the host system paths and the
paths in \fBCMAKE_FIND_ROOT_PATH\fP will be searched.
.SS CMAKE_FRAMEWORK_PATH
.sp
;\-list of directories specifying a search path
for OS X frameworks used by the \fBfind_library()\fP,
\fBfind_package()\fP, \fBfind_path()\fP, and \fBfind_file()\fP
commands.
.SS CMAKE_IGNORE_PATH
.sp
;\-list of directories to be \fIignored\fP by
the \fBfind_program()\fP, \fBfind_library()\fP, \fBfind_file()\fP,
and \fBfind_path()\fP commands.  This is useful in cross\-compiling
environments where some system directories contain incompatible but
possibly linkable libraries.  For example, on cross\-compiled cluster
environments, this allows a user to ignore directories containing
libraries meant for the front\-end machine.
.sp
By default this is empty; it is intended to be set by the project.
Note that \fBCMAKE_IGNORE_PATH\fP takes a list of directory names, \fInot\fP
a list of prefixes.  To ignore paths under prefixes (\fBbin\fP, \fBinclude\fP,
\fBlib\fP, etc.), specify them explicitly.
.sp
See also the \fBCMAKE_PREFIX_PATH\fP, \fBCMAKE_LIBRARY_PATH\fP,
\fBCMAKE_INCLUDE_PATH\fP, and \fBCMAKE_PROGRAM_PATH\fP variables.
.SS CMAKE_INCLUDE_PATH
.sp
;\-list of directories specifying a search path
for the \fBfind_file()\fP and \fBfind_path()\fP commands.  By default it
is empty, it is intended to be set by the project.  See also
\fBCMAKE_SYSTEM_INCLUDE_PATH\fP and \fBCMAKE_PREFIX_PATH\fP\&.
.SS CMAKE_INCLUDE_DIRECTORIES_BEFORE
.sp
Whether to append or prepend directories by default in \fBinclude_directories()\fP\&.
.sp
This variable affects the default behavior of the \fBinclude_directories()\fP
command. Setting this variable to \(aqON\(aq is equivalent to using the BEFORE option
in all uses of that command.
.SS CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE
.sp
Whether to force prepending of project include directories.
.sp
This variable affects the order of include directories generated in compiler
command lines.  If set to \(aqON\(aq, it causes the \fBCMAKE_SOURCE_DIR\fP and
the \fBCMAKE_BINARY_DIR\fP to appear first.
.SS CMAKE_INSTALL_DEFAULT_COMPONENT_NAME
.sp
Default component used in install() commands.
.sp
If an install() command is used without the COMPONENT argument, these
files will be grouped into a default component.  The name of this
default install component will be taken from this variable.  It
defaults to "Unspecified".
.SS CMAKE_INSTALL_MESSAGE
.sp
Specify verbosity of installation script code generated by the
\fBinstall()\fP command (using the \fBfile(INSTALL)\fP command).
For paths that are newly installed or updated, installation
may print lines like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\- Installing: /some/destination/path
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For paths that are already up to date, installation may print
lines like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\- Up\-to\-date: /some/destination/path
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fBCMAKE_INSTALL_MESSAGE\fP variable may be set to control
which messages are printed:
.INDENT 0.0
.TP
.B \fBALWAYS\fP
Print both \fBInstalling\fP and \fBUp\-to\-date\fP messages.
.TP
.B \fBLAZY\fP
Print \fBInstalling\fP but not \fBUp\-to\-date\fP messages.
.TP
.B \fBNEVER\fP
Print neither \fBInstalling\fP nor \fBUp\-to\-date\fP messages.
.UNINDENT
.sp
Other values have undefined behavior and may not be diagnosed.
.sp
If this variable is not set, the default behavior is \fBALWAYS\fP\&.
.SS CMAKE_INSTALL_PREFIX
.sp
Install directory used by install.
.sp
If "make install" is invoked or INSTALL is built, this directory is
prepended onto all install directories.  This variable defaults to
/usr/local on UNIX and c:/Program Files on Windows.
.sp
On UNIX one can use the DESTDIR mechanism in order to relocate the
whole installation.  DESTDIR means DESTination DIRectory.  It is
commonly used by makefile users in order to install software at
non\-default location.  It is usually invoked like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make DESTDIR=/home/john install
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
which will install the concerned software using the installation
prefix, e.g.  "/usr/local" prepended with the DESTDIR value which
finally gives "/home/john/usr/local".
.sp
WARNING: DESTDIR may not be used on Windows because installation
prefix usually contains a drive letter like in "C:/Program Files"
which cannot be prepended with some other prefix.
.sp
The installation prefix is also added to CMAKE_SYSTEM_PREFIX_PATH so
that find_package, find_program, find_library, find_path, and
find_file will search the prefix for other software.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Use the \fBGNUInstallDirs\fP module to provide GNU\-style
options for the layout of directories within the installation.
.UNINDENT
.UNINDENT
.SS CMAKE_LIBRARY_PATH
.sp
;\-list of directories specifying a search path
for the \fBfind_library()\fP command.  By default it is empty, it is
intended to be set by the project.  See also
\fBCMAKE_SYSTEM_LIBRARY_PATH\fP and \fBCMAKE_PREFIX_PATH\fP\&.
.SS CMAKE_MFC_FLAG
.sp
Tell cmake to use MFC for an executable or dll.
.sp
This can be set in a CMakeLists.txt file and will enable MFC in the
application.  It should be set to 1 for the static MFC library, and 2
for the shared MFC library.  This is used in Visual Studio 6 and 7
project files.  The CMakeSetup dialog used MFC and the CMakeLists.txt
looks like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
add_definitions(\-D_AFXDLL)
set(CMAKE_MFC_FLAG 2)
add_executable(CMakeSetup WIN32 ${SRCS})
.ft P
.fi
.UNINDENT
.UNINDENT
.SS CMAKE_MODULE_PATH
.sp
;\-list of directories specifying a search path
for CMake modules to be loaded by the the \fBinclude()\fP or
\fBfind_package()\fP commands before checking the default modules that come
with CMake.  By default it is empty, it is intended to be set by the project.
.SS CMAKE_NOT_USING_CONFIG_FLAGS
.sp
Skip _BUILD_TYPE flags if true.
.sp
This is an internal flag used by the generators in CMake to tell CMake
to skip the _BUILD_TYPE flags.
.SS CMAKE_POLICY_DEFAULT_CMP<NNNN>
.sp
Default for CMake Policy CMP<NNNN> when it is otherwise left unset.
.sp
Commands cmake_minimum_required(VERSION) and cmake_policy(VERSION) by
default leave policies introduced after the given version unset.  Set
CMAKE_POLICY_DEFAULT_CMP<NNNN> to OLD or NEW to specify the default
for policy CMP<NNNN>, where <NNNN> is the policy number.
.sp
This variable should not be set by a project in CMake code; use
cmake_policy(SET) instead.  Users running CMake may set this variable
in the cache (e.g.  \-DCMAKE_POLICY_DEFAULT_CMP<NNNN>=<OLD|NEW>) to set
a policy not otherwise set by the project.  Set to OLD to quiet a
policy warning while using old behavior or to NEW to try building the
project with new behavior.
.SS CMAKE_POLICY_WARNING_CMP<NNNN>
.sp
Explicitly enable or disable the warning when CMake Policy \fBCMP<NNNN>\fP
is not set.  This is meaningful only for the few policies that do not
warn by default:
.INDENT 0.0
.IP \(bu 2
\fBCMAKE_POLICY_WARNING_CMP0025\fP controls the warning for
policy \fBCMP0025\fP\&.
.IP \(bu 2
\fBCMAKE_POLICY_WARNING_CMP0047\fP controls the warning for
policy \fBCMP0047\fP\&.
.IP \(bu 2
\fBCMAKE_POLICY_WARNING_CMP0056\fP controls the warning for
policy \fBCMP0056\fP\&.
.IP \(bu 2
\fBCMAKE_POLICY_WARNING_CMP0060\fP controls the warning for
policy \fBCMP0060\fP\&.
.UNINDENT
.sp
This variable should not be set by a project in CMake code.  Project
developers running CMake may set this variable in their cache to
enable the warning (e.g. \fB\-DCMAKE_POLICY_WARNING_CMP<NNNN>=ON\fP).
Alternatively, running \fBcmake(1)\fP with the \fB\-\-debug\-output\fP
or \fB\-\-trace\fP option will also enable the warning.
.SS CMAKE_PREFIX_PATH
.sp
;\-list of directories specifying installation
\fIprefixes\fP to be searched by the \fBfind_package()\fP,
\fBfind_program()\fP, \fBfind_library()\fP, \fBfind_file()\fP, and
\fBfind_path()\fP commands.  Each command will add appropriate
subdirectories (like \fBbin\fP, \fBlib\fP, or \fBinclude\fP) as specified in its own
documentation.
.sp
By default this is empty.  It is intended to be set by the project.
.sp
See also \fBCMAKE_SYSTEM_PREFIX_PATH\fP, \fBCMAKE_INCLUDE_PATH\fP,
\fBCMAKE_LIBRARY_PATH\fP, \fBCMAKE_PROGRAM_PATH\fP, and
\fBCMAKE_IGNORE_PATH\fP\&.
.SS CMAKE_PROGRAM_PATH
.sp
;\-list of directories specifying a search path
for the \fBfind_program()\fP command.  By default it is empty, it is
intended to be set by the project.  See also
\fBCMAKE_SYSTEM_PROGRAM_PATH\fP and \fBCMAKE_PREFIX_PATH\fP\&.
.SS CMAKE_PROJECT_<PROJECT\-NAME>_INCLUDE
.sp
A CMake language file or module to be included by the \fBproject()\fP
command.  This is is intended for injecting custom code into project
builds without modifying their source.
.SS CMAKE_SKIP_INSTALL_ALL_DEPENDENCY
.sp
Don\(aqt make the install target depend on the all target.
.sp
By default, the "install" target depends on the "all" target.  This
has the effect, that when "make install" is invoked or INSTALL is
built, first the "all" target is built, then the installation starts.
If CMAKE_SKIP_INSTALL_ALL_DEPENDENCY is set to TRUE, this dependency
is not created, so the installation process will start immediately,
independent from whether the project has been completely built or not.
.SS CMAKE_STAGING_PREFIX
.sp
This variable may be set to a path to install to when cross\-compiling. This can
be useful if the path in \fBCMAKE_SYSROOT\fP is read\-only, or otherwise
should remain pristine.
.sp
The CMAKE_STAGING_PREFIX location is also used as a search prefix by the \fBfind_*\fP
commands. This can be controlled by setting the \fBCMAKE_FIND_NO_INSTALL_PREFIX\fP
variable.
.sp
If any RPATH/RUNPATH entries passed to the linker contain the CMAKE_STAGING_PREFIX,
the matching path fragments are replaced with the \fBCMAKE_INSTALL_PREFIX\fP\&.
.SS CMAKE_SYSTEM_IGNORE_PATH
.sp
;\-list of directories to be \fIignored\fP by
the \fBfind_program()\fP, \fBfind_library()\fP, \fBfind_file()\fP,
and \fBfind_path()\fP commands.  This is useful in cross\-compiling
environments where some system directories contain incompatible but
possibly linkable libraries.  For example, on cross\-compiled cluster
environments, this allows a user to ignore directories containing
libraries meant for the front\-end machine.
.sp
By default this contains a list of directories containing incompatible
binaries for the host system.  See the \fBCMAKE_IGNORE_PATH\fP variable
that is intended to be set by the project.
.sp
See also the \fBCMAKE_SYSTEM_PREFIX_PATH\fP,
\fBCMAKE_SYSTEM_LIBRARY_PATH\fP, \fBCMAKE_SYSTEM_INCLUDE_PATH\fP,
and \fBCMAKE_SYSTEM_PROGRAM_PATH\fP variables.
.SS CMAKE_SYSTEM_INCLUDE_PATH
.sp
;\-list of directories specifying a search path
for the \fBfind_file()\fP and \fBfind_path()\fP commands.  By default
this contains the standard directories for the current system.  It is \fInot\fP
intended to be modified by the project; use \fBCMAKE_INCLUDE_PATH\fP for
this.  See also \fBCMAKE_SYSTEM_PREFIX_PATH\fP\&.
.SS CMAKE_SYSTEM_LIBRARY_PATH
.sp
;\-list of directories specifying a search path
for the \fBfind_library()\fP command.  By default this contains the
standard directories for the current system.  It is \fInot\fP intended to be
modified by the project; use \fBCMAKE_LIBRARY_PATH\fP for this.
See also \fBCMAKE_SYSTEM_PREFIX_PATH\fP\&.
.SS CMAKE_SYSTEM_PREFIX_PATH
.sp
;\-list of directories specifying installation
\fIprefixes\fP to be searched by the \fBfind_package()\fP,
\fBfind_program()\fP, \fBfind_library()\fP, \fBfind_file()\fP, and
\fBfind_path()\fP commands.  Each command will add appropriate
subdirectories (like \fBbin\fP, \fBlib\fP, or \fBinclude\fP) as specified in its own
documentation.
.sp
By default this contains the standard directories for the current system, the
\fBCMAKE_INSTALL_PREFIX\fP, and the \fBCMAKE_STAGING_PREFIX\fP\&.
It is \fInot\fP intended to be modified by the project; use
\fBCMAKE_PREFIX_PATH\fP for this.
.sp
See also \fBCMAKE_SYSTEM_INCLUDE_PATH\fP,
\fBCMAKE_SYSTEM_LIBRARY_PATH\fP, \fBCMAKE_SYSTEM_PROGRAM_PATH\fP,
and \fBCMAKE_SYSTEM_IGNORE_PATH\fP\&.
.SS CMAKE_SYSTEM_PROGRAM_PATH
.sp
;\-list of directories specifying a search path
for the \fBfind_program()\fP command.  By default this contains the
standard directories for the current system.  It is \fInot\fP intended to be
modified by the project; use \fBCMAKE_PROGRAM_PATH\fP for this.
See also \fBCMAKE_SYSTEM_PREFIX_PATH\fP\&.
.SS CMAKE_USER_MAKE_RULES_OVERRIDE
.sp
Specify a CMake file that overrides platform information.
.sp
CMake loads the specified file while enabling support for each
language from either the project() or enable_language() commands.  It
is loaded after CMake\(aqs builtin compiler and platform information
modules have been loaded but before the information is used.  The file
may set platform information variables to override CMake\(aqs defaults.
.sp
This feature is intended for use only in overriding information
variables that must be set before CMake builds its first test project
to check that the compiler for a language works.  It should not be
used to load a file in cases that a normal include() will work.  Use
it only as a last resort for behavior that cannot be achieved any
other way.  For example, one may set CMAKE_C_FLAGS_INIT to change the
default value used to initialize CMAKE_C_FLAGS before it is cached.
The override file should NOT be used to set anything that could be set
after languages are enabled, such as variables like
CMAKE_RUNTIME_OUTPUT_DIRECTORY that affect the placement of binaries.
Information set in the file will be used for try_compile and try_run
builds too.
.SS CMAKE_WARN_DEPRECATED
.sp
Whether to issue deprecation warnings for macros and functions.
.sp
If TRUE, this can be used by macros and functions to issue deprecation
warnings.  This variable is FALSE by default.
.SS CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION
.sp
Ask cmake_install.cmake script to warn each time a file with absolute INSTALL DESTINATION is encountered.
.sp
This variable is used by CMake\-generated cmake_install.cmake scripts.
If one sets this variable to ON while running the script, it may get
warning messages from the script.
.SH VARIABLES THAT DESCRIBE THE SYSTEM
.SS APPLE
.sp
True if running on Mac OS X.
.sp
Set to true on Mac OS X.
.SS BORLAND
.sp
True if the Borland compiler is being used.
.sp
This is set to true if the Borland compiler is being used.
.SS CMAKE_CL_64
.sp
Using the 64 bit compiler from Microsoft
.sp
Set to true when using the 64 bit cl compiler from Microsoft.
.SS CMAKE_COMPILER_2005
.sp
Using the Visual Studio 2005 compiler from Microsoft
.sp
Set to true when using the Visual Studio 2005 compiler from Microsoft.
.SS CMAKE_HOST_APPLE
.sp
True for Apple OS X operating systems.
.sp
Set to true when the host system is Apple OS X.
.SS CMAKE_HOST_SYSTEM_NAME
.sp
Name of the OS CMake is running on.
.sp
On systems that have the uname command, this variable is set to the
output of uname \-s.  \fBLinux\fP, \fBWindows\fP, and \fBDarwin\fP for Mac OS X
are the values found on the big three operating systems.
.SS CMAKE_HOST_SYSTEM_PROCESSOR
.sp
The name of the CPU CMake is running on.
.sp
On systems that support uname, this variable is set to the output of
uname \-p, on windows it is set to the value of the environment variable
\fBPROCESSOR_ARCHITECTURE\fP\&.
.SS CMAKE_HOST_SYSTEM
.sp
Composit Name of OS CMake is being run on.
.sp
This variable is the composite of \fBCMAKE_HOST_SYSTEM_NAME\fP and
\fBCMAKE_HOST_SYSTEM_VERSION\fP, e.g.
\fB${CMAKE_HOST_SYSTEM_NAME}\-${CMAKE_HOST_SYSTEM_VERSION}\fP\&.  If
\fBCMAKE_HOST_SYSTEM_VERSION\fP is not set, then this variable is
the same as \fBCMAKE_HOST_SYSTEM_NAME\fP\&.
.SS CMAKE_HOST_SYSTEM_VERSION
.sp
The OS version CMake is running on.
.sp
A numeric version string for the system.  On systems that support
uname, this variable is set to the output of uname \-r. On other
systems this is set to major\-minor version numbers.
.SS CMAKE_HOST_UNIX
.sp
True for UNIX and UNIX like operating systems.
.sp
Set to true when the host system is UNIX or UNIX like (i.e.  APPLE and
CYGWIN).
.SS CMAKE_HOST_WIN32
.sp
True on windows systems, including win64.
.sp
Set to true when the host system is Windows and on Cygwin.
.SS CMAKE_LIBRARY_ARCHITECTURE_REGEX
.sp
Regex matching possible target architecture library directory names.
.sp
This is used to detect CMAKE_<lang>_LIBRARY_ARCHITECTURE from the
implicit linker search path by matching the <arch> name.
.SS CMAKE_LIBRARY_ARCHITECTURE
.sp
Target architecture library directory name, if detected.
.sp
This is the value of CMAKE_<lang>_LIBRARY_ARCHITECTURE as detected for
one of the enabled languages.
.SS CMAKE_OBJECT_PATH_MAX
.sp
Maximum object file full\-path length allowed by native build tools.
.sp
CMake computes for every source file an object file name that is
unique to the source file and deterministic with respect to the full
path to the source file.  This allows multiple source files in a
target to share the same name if they lie in different directories
without rebuilding when one is added or removed.  However, it can
produce long full paths in a few cases, so CMake shortens the path
using a hashing scheme when the full path to an object file exceeds a
limit.  CMake has a built\-in limit for each platform that is
sufficient for common tools, but some native tools may have a lower
limit.  This variable may be set to specify the limit explicitly.  The
value must be an integer no less than 128.
.SS CMAKE_SYSTEM_NAME
.sp
Name of the OS CMake is building for.
.sp
This is the name of the OS on which CMake is targeting.  This variable
is the same as \fBCMAKE_HOST_SYSTEM_NAME\fP if you build for the
host system instead of the target system when cross compiling.
.SS CMAKE_SYSTEM_PROCESSOR
.sp
The name of the CPU CMake is building for.
.sp
This variable is the same as \fBCMAKE_HOST_SYSTEM_PROCESSOR\fP if
you build for the host system instead of the target system when
cross compiling.
.INDENT 0.0
.IP \(bu 2
The Green Hills MULTI generator sets this to \fBARM\fP by default
.UNINDENT
.SS CMAKE_SYSTEM
.sp
Composit Name of OS CMake is compiling for.
.sp
This variable is the composite of \fBCMAKE_SYSTEM_NAME\fP and
\fBCMAKE_SYSTEM_VERSION\fP, e.g.
\fB${CMAKE_SYSTEM_NAME}\-${CMAKE_SYSTEM_VERSION}\fP\&.  If
\fBCMAKE_SYSTEM_VERSION\fP is not set, then this variable is
the same as \fBCMAKE_SYSTEM_NAME\fP\&.
.SS CMAKE_SYSTEM_VERSION
.sp
The OS version CMake is building for.
.sp
This variable is the same as \fBCMAKE_HOST_SYSTEM_VERSION\fP if
you build for the host system instead of the target system when
cross compiling.
.SS CYGWIN
.sp
True for Cygwin.
.sp
Set to true when using Cygwin.
.SS ENV
.sp
Access environment variables.
.sp
Use the syntax $ENV{VAR} to read environment variable VAR.  See also
the set() command to set ENV{VAR}.
.SS GHS\-MULTI
.sp
True when using Green Hills MULTI
.SS MINGW
.sp
True when using MinGW
.sp
Set to true when the compiler is some version of MinGW.
.SS MSVC10
.sp
True when using Microsoft Visual C 10.0
.sp
Set to true when the compiler is version 10.0 of Microsoft Visual C.
.SS MSVC11
.sp
True when using Microsoft Visual C 11.0
.sp
Set to true when the compiler is version 11.0 of Microsoft Visual C.
.SS MSVC12
.sp
True when using Microsoft Visual C 12.0
.sp
Set to true when the compiler is version 12.0 of Microsoft Visual C.
.SS MSVC14
.sp
True when using Microsoft Visual C 14.0
.sp
Set to true when the compiler is version 14.0 of Microsoft Visual C.
.SS MSVC60
.sp
True when using Microsoft Visual C 6.0
.sp
Set to true when the compiler is version 6.0 of Microsoft Visual C.
.SS MSVC70
.sp
True when using Microsoft Visual C 7.0
.sp
Set to true when the compiler is version 7.0 of Microsoft Visual C.
.SS MSVC71
.sp
True when using Microsoft Visual C 7.1
.sp
Set to true when the compiler is version 7.1 of Microsoft Visual C.
.SS MSVC80
.sp
True when using Microsoft Visual C 8.0
.sp
Set to true when the compiler is version 8.0 of Microsoft Visual C.
.SS MSVC90
.sp
True when using Microsoft Visual C 9.0
.sp
Set to true when the compiler is version 9.0 of Microsoft Visual C.
.SS MSVC_IDE
.sp
True when using the Microsoft Visual C IDE
.sp
Set to true when the target platform is the Microsoft Visual C IDE, as
opposed to the command line compiler.
.SS MSVC
.sp
True when using Microsoft Visual C
.sp
Set to true when the compiler is some version of Microsoft Visual C.
.SS MSVC_VERSION
.sp
The version of Microsoft Visual C/C++ being used if any.
.sp
Known version numbers are:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1200 = VS  6.0
1300 = VS  7.0
1310 = VS  7.1
1400 = VS  8.0
1500 = VS  9.0
1600 = VS 10.0
1700 = VS 11.0
1800 = VS 12.0
1900 = VS 14.0
.ft P
.fi
.UNINDENT
.UNINDENT
.SS UNIX
.sp
True for UNIX and UNIX like operating systems.
.sp
Set to true when the target system is UNIX or UNIX like (i.e.  APPLE
and CYGWIN).
.SS WIN32
.sp
True on windows systems, including win64.
.sp
Set to true when the target system is Windows.
.SS WINCE
.sp
True when the \fBCMAKE_SYSTEM_NAME\fP variable is set
to \fBWindowsCE\fP\&.
.SS WINDOWS_PHONE
.sp
True when the \fBCMAKE_SYSTEM_NAME\fP variable is set
to \fBWindowsPhone\fP\&.
.SS WINDOWS_STORE
.sp
True when the \fBCMAKE_SYSTEM_NAME\fP variable is set
to \fBWindowsStore\fP\&.
.SS XCODE_VERSION
.sp
Version of Xcode (Xcode generator only).
.sp
Under the Xcode generator, this is the version of Xcode as specified
in "Xcode.app/Contents/version.plist" (such as "3.1.2").
.SH VARIABLES THAT CONTROL THE BUILD
.SS CMAKE_ANDROID_API
.sp
Default value for the \fBANDROID_API\fP target property.
See that target property for additional information.
.SS CMAKE_ANDROID_API_MIN
.sp
Default value for the \fBANDROID_API_MIN\fP target property.
See that target property for additional information.
.SS CMAKE_ANDROID_GUI
.sp
Default value for the \fBANDROID_GUI\fP target property of
executables.  See that target property for additional information.
.SS CMAKE_ARCHIVE_OUTPUT_DIRECTORY
.sp
Where to put all the ARCHIVE
target files when built.
.sp
This variable is used to initialize the \fBARCHIVE_OUTPUT_DIRECTORY\fP
property on all the targets.  See that target property for additional
information.
.SS CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>
.sp
Where to put all the ARCHIVE
target files when built for a specific configuration.
.sp
This variable is used to initialize the
\fBARCHIVE_OUTPUT_DIRECTORY_<CONFIG>\fP property on all the targets.
See that target property for additional information.
.SS CMAKE_AUTOMOC_MOC_OPTIONS
.sp
Additional options for \fBmoc\fP when using \fBCMAKE_AUTOMOC\fP\&.
.sp
This variable is used to initialize the \fBAUTOMOC_MOC_OPTIONS\fP property
on all the targets.  See that target property for additional information.
.SS CMAKE_AUTOMOC
.sp
Whether to handle \fBmoc\fP automatically for Qt targets.
.sp
This variable is used to initialize the \fBAUTOMOC\fP property on all the
targets.  See that target property for additional information.
.SS CMAKE_AUTORCC
.sp
Whether to handle \fBrcc\fP automatically for Qt targets.
.sp
This variable is used to initialize the \fBAUTORCC\fP property on all the targets.
See that target property for additional information.
.SS CMAKE_AUTORCC_OPTIONS
.sp
Whether to handle \fBrcc\fP automatically for Qt targets.
.sp
This variable is used to initialize the \fBAUTORCC_OPTIONS\fP property on
all the targets.  See that target property for additional information.
.SS CMAKE_AUTOUIC
.sp
Whether to handle \fBuic\fP automatically for Qt targets.
.sp
This variable is used to initialize the \fBAUTOUIC\fP property on all the targets.
See that target property for additional information.
.SS CMAKE_AUTOUIC_OPTIONS
.sp
Whether to handle \fBuic\fP automatically for Qt targets.
.sp
This variable is used to initialize the \fBAUTOUIC_OPTIONS\fP property on
all the targets.  See that target property for additional information.
.SS CMAKE_BUILD_WITH_INSTALL_RPATH
.sp
Use the install path for the RPATH
.sp
Normally CMake uses the build tree for the RPATH when building
executables etc on systems that use RPATH.  When the software is
installed the executables etc are relinked by CMake to have the
install RPATH.  If this variable is set to true then the software is
always built with the install path for the RPATH and does not need to
be relinked when installed.
.SS CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY
.sp
Output directory for MS debug symbol \fB\&.pdb\fP files
generated by the compiler while building source files.
.sp
This variable is used to initialize the
\fBCOMPILE_PDB_OUTPUT_DIRECTORY\fP property on all the targets.
.SS CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>
.sp
Per\-configuration output directory for MS debug symbol \fB\&.pdb\fP files
generated by the compiler while building source files.
.sp
This is a per\-configuration version of
\fBCMAKE_COMPILE_PDB_OUTPUT_DIRECTORY\fP\&.
This variable is used to initialize the
\fBCOMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>\fP
property on all the targets.
.SS CMAKE_<CONFIG>_POSTFIX
.sp
Default filename postfix for libraries under configuration <CONFIG>.
.sp
When a non\-executable target is created its <CONFIG>_POSTFIX target
property is initialized with the value of this variable if it is set.
.SS CMAKE_DEBUG_POSTFIX
.sp
See variable CMAKE_<CONFIG>_POSTFIX.
.sp
This variable is a special case of the more\-general
CMAKE_<CONFIG>_POSTFIX variable for the DEBUG configuration.
.SS CMAKE_EXE_LINKER_FLAGS_<CONFIG>
.sp
Flags to be used when linking an executable.
.sp
Same as CMAKE_C_FLAGS_* but used by the linker when creating
executables.
.SS CMAKE_EXE_LINKER_FLAGS
.sp
Linker flags to be used to create executables.
.sp
These flags will be used by the linker when creating an executable.
.SS CMAKE_Fortran_FORMAT
.sp
Set to FIXED or FREE to indicate the Fortran source layout.
.sp
This variable is used to initialize the Fortran_FORMAT property on all
the targets.  See that target property for additional information.
.SS CMAKE_Fortran_MODULE_DIRECTORY
.sp
Fortran module output directory.
.sp
This variable is used to initialize the Fortran_MODULE_DIRECTORY
property on all the targets.  See that target property for additional
information.
.SS CMAKE_GNUtoMS
.sp
Convert GNU import libraries (.dll.a) to MS format (.lib).
.sp
This variable is used to initialize the GNUtoMS property on targets
when they are created.  See that target property for additional
information.
.SS CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE
.sp
Automatically add the current source\- and build directories to the INTERFACE_INCLUDE_DIRECTORIES.
.sp
If this variable is enabled, CMake automatically adds for each shared
library target, static library target, module target and executable
target, ${CMAKE_CURRENT_SOURCE_DIR} and ${CMAKE_CURRENT_BINARY_DIR} to
the INTERFACE_INCLUDE_DIRECTORIES.By default
CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE is OFF.
.SS CMAKE_INCLUDE_CURRENT_DIR
.sp
Automatically add the current source\- and build directories to the include path.
.sp
If this variable is enabled, CMake automatically adds in each
directory ${CMAKE_CURRENT_SOURCE_DIR} and ${CMAKE_CURRENT_BINARY_DIR}
to the include path for this directory.  These additional include
directories do not propagate down to subdirectories.  This is useful
mainly for out\-of\-source builds, where files generated into the build
tree are included by files located in the source tree.
.sp
By default CMAKE_INCLUDE_CURRENT_DIR is OFF.
.SS CMAKE_INSTALL_NAME_DIR
.sp
Mac OS X directory name for installed targets.
.sp
CMAKE_INSTALL_NAME_DIR is used to initialize the INSTALL_NAME_DIR
property on all targets.  See that target property for more
information.
.SS CMAKE_INSTALL_RPATH
.sp
The rpath to use for installed targets.
.sp
A semicolon\-separated list specifying the rpath to use in installed
targets (for platforms that support it).  This is used to initialize
the target property INSTALL_RPATH for all targets.
.SS CMAKE_INSTALL_RPATH_USE_LINK_PATH
.sp
Add paths to linker search and installed rpath.
.sp
CMAKE_INSTALL_RPATH_USE_LINK_PATH is a boolean that if set to true
will append directories in the linker search path and outside the
project to the INSTALL_RPATH.  This is used to initialize the target
property INSTALL_RPATH_USE_LINK_PATH for all targets.
.SS CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE
.sp
Default value for \fB<LANG>_INCLUDE_WHAT_YOU_USE\fP target property.
This variable is used to initialize the property on each target as it is
created.  This is done only when \fB<LANG>\fP is \fBC\fP or \fBCXX\fP\&.
.SS CMAKE_<LANG>_VISIBILITY_PRESET
.sp
Default value for the \fB<LANG>_VISIBILITY_PRESET\fP target
property when a target is created.
.SS CMAKE_LIBRARY_OUTPUT_DIRECTORY
.sp
Where to put all the LIBRARY
target files when built.
.sp
This variable is used to initialize the \fBLIBRARY_OUTPUT_DIRECTORY\fP
property on all the targets.  See that target property for additional
information.
.SS CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>
.sp
Where to put all the LIBRARY
target files when built for a specific configuration.
.sp
This variable is used to initialize the
\fBLIBRARY_OUTPUT_DIRECTORY_<CONFIG>\fP property on all the targets.
See that target property for additional information.
.SS CMAKE_LIBRARY_PATH_FLAG
.sp
The flag to be used to add a library search path to a compiler.
.sp
The flag will be used to specify a library directory to the compiler.
On most compilers this is "\-L".
.SS CMAKE_LINK_DEF_FILE_FLAG
.sp
Linker flag to be used to specify a .def file for dll creation.
.sp
The flag will be used to add a .def file when creating a dll on
Windows; this is only defined on Windows.
.SS CMAKE_LINK_DEPENDS_NO_SHARED
.sp
Whether to skip link dependencies on shared library files.
.sp
This variable initializes the LINK_DEPENDS_NO_SHARED property on
targets when they are created.  See that target property for
additional information.
.SS CMAKE_LINK_INTERFACE_LIBRARIES
.sp
Default value for LINK_INTERFACE_LIBRARIES of targets.
.sp
This variable is used to initialize the LINK_INTERFACE_LIBRARIES
property on all the targets.  See that target property for additional
information.
.SS CMAKE_LINK_LIBRARY_FILE_FLAG
.sp
Flag to be used to link a library specified by a path to its file.
.sp
The flag will be used before a library file path is given to the
linker.  This is needed only on very few platforms.
.SS CMAKE_LINK_LIBRARY_FLAG
.sp
Flag to be used to link a library into an executable.
.sp
The flag will be used to specify a library to link to an executable.
On most compilers this is "\-l".
.SS CMAKE_MACOSX_BUNDLE
.sp
Default value for MACOSX_BUNDLE of targets.
.sp
This variable is used to initialize the MACOSX_BUNDLE property on all
the targets.  See that target property for additional information.
.SS CMAKE_MACOSX_RPATH
.sp
Whether to use rpaths on Mac OS X.
.sp
This variable is used to initialize the \fBMACOSX_RPATH\fP property on
all targets.
.SS CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>
.sp
Default value for MAP_IMPORTED_CONFIG_<CONFIG> of targets.
.sp
This variable is used to initialize the MAP_IMPORTED_CONFIG_<CONFIG>
property on all the targets.  See that target property for additional
information.
.SS CMAKE_MODULE_LINKER_FLAGS_<CONFIG>
.sp
Flags to be used when linking a module.
.sp
Same as CMAKE_C_FLAGS_* but used by the linker when creating modules.
.SS CMAKE_MODULE_LINKER_FLAGS
.sp
Linker flags to be used to create modules.
.sp
These flags will be used by the linker when creating a module.
.SS CMAKE_NO_BUILTIN_CHRPATH
.sp
Do not use the builtin ELF editor to fix RPATHs on installation.
.sp
When an ELF binary needs to have a different RPATH after installation
than it does in the build tree, CMake uses a builtin editor to change
the RPATH in the installed copy.  If this variable is set to true then
CMake will relink the binary before installation instead of using its
builtin editor.
.SS CMAKE_NO_SYSTEM_FROM_IMPORTED
.sp
Default value for NO_SYSTEM_FROM_IMPORTED of targets.
.sp
This variable is used to initialize the NO_SYSTEM_FROM_IMPORTED
property on all the targets.  See that target property for additional
information.
.SS CMAKE_OSX_ARCHITECTURES
.sp
Target specific architectures for OS X.
.sp
This variable is used to initialize the \fBOSX_ARCHITECTURES\fP
property on each target as it is creaed.  See that target property
for additional information.
.sp
The value of this variable should be set prior to the first
\fBproject()\fP or \fBenable_language()\fP command invocation
because it may influence configuration of the toolchain and flags.
It is intended to be set locally by the user creating a build tree.
.sp
This variable is ignored on platforms other than OS X.
.SS CMAKE_OSX_DEPLOYMENT_TARGET
.sp
Specify the minimum version of OS X on which the target binaries are
to be deployed.  CMake uses this value for the \fB\-mmacosx\-version\-min\fP
flag and to help choose the default SDK
(see \fBCMAKE_OSX_SYSROOT\fP).
.sp
If not set explicitly the value is initialized by the
\fBMACOSX_DEPLOYMENT_TARGET\fP environment variable, if set,
and otherwise computed based on the host platform.
.sp
The value of this variable should be set prior to the first
\fBproject()\fP or \fBenable_language()\fP command invocation
because it may influence configuration of the toolchain and flags.
It is intended to be set locally by the user creating a build tree.
.sp
This variable is ignored on platforms other than OS X.
.SS CMAKE_OSX_SYSROOT
.sp
Specify the location or name of the OS X platform SDK to be used.
CMake uses this value to compute the value of the \fB\-isysroot\fP flag
or equivalent and to help the \fBfind_*\fP commands locate files in
the SDK.
.sp
If not set explicitly the value is initialized by the \fBSDKROOT\fP
environment variable, if set, and otherwise computed based on the
\fBCMAKE_OSX_DEPLOYMENT_TARGET\fP or the host platform.
.sp
The value of this variable should be set prior to the first
\fBproject()\fP or \fBenable_language()\fP command invocation
because it may influence configuration of the toolchain and flags.
It is intended to be set locally by the user creating a build tree.
.sp
This variable is ignored on platforms other than OS X.
.SS CMAKE_PDB_OUTPUT_DIRECTORY
.sp
Output directory for MS debug symbol \fB\&.pdb\fP files generated by the
linker for executable and shared library targets.
.sp
This variable is used to initialize the \fBPDB_OUTPUT_DIRECTORY\fP
property on all the targets.  See that target property for additional
information.
.SS CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>
.sp
Per\-configuration output directory for MS debug symbol \fB\&.pdb\fP files
generated by the linker for executable and shared library targets.
.sp
This is a per\-configuration version of \fBCMAKE_PDB_OUTPUT_DIRECTORY\fP\&.
This variable is used to initialize the
\fBPDB_OUTPUT_DIRECTORY_<CONFIG>\fP
property on all the targets.  See that target property for additional
information.
.SS CMAKE_POSITION_INDEPENDENT_CODE
.sp
Default value for POSITION_INDEPENDENT_CODE of targets.
.sp
This variable is used to initialize the POSITION_INDEPENDENT_CODE
property on all the targets.  See that target property for additional
information.
.SS CMAKE_RUNTIME_OUTPUT_DIRECTORY
.sp
Where to put all the RUNTIME
target files when built.
.sp
This variable is used to initialize the \fBRUNTIME_OUTPUT_DIRECTORY\fP
property on all the targets.  See that target property for additional
information.
.SS CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>
.sp
Where to put all the RUNTIME
target files when built for a specific configuration.
.sp
This variable is used to initialize the
\fBRUNTIME_OUTPUT_DIRECTORY_<CONFIG>\fP property on all the targets.
See that target property for additional information.
.SS CMAKE_SHARED_LINKER_FLAGS_<CONFIG>
.sp
Flags to be used when linking a shared library.
.sp
Same as CMAKE_C_FLAGS_* but used by the linker when creating shared
libraries.
.SS CMAKE_SHARED_LINKER_FLAGS
.sp
Linker flags to be used to create shared libraries.
.sp
These flags will be used by the linker when creating a shared library.
.SS CMAKE_SKIP_BUILD_RPATH
.sp
Do not include RPATHs in the build tree.
.sp
Normally CMake uses the build tree for the RPATH when building
executables etc on systems that use RPATH.  When the software is
installed the executables etc are relinked by CMake to have the
install RPATH.  If this variable is set to true then the software is
always built with no RPATH.
.SS CMAKE_SKIP_INSTALL_RPATH
.sp
Do not include RPATHs in the install tree.
.sp
Normally CMake uses the build tree for the RPATH when building
executables etc on systems that use RPATH.  When the software is
installed the executables etc are relinked by CMake to have the
install RPATH.  If this variable is set to true then the software is
always installed without RPATH, even if RPATH is enabled when
building.  This can be useful for example to allow running tests from
the build directory with RPATH enabled before the installation step.
To omit RPATH in both the build and install steps, use
CMAKE_SKIP_RPATH instead.
.SS CMAKE_STATIC_LINKER_FLAGS_<CONFIG>
.sp
Flags to be used when linking a static library.
.sp
Same as CMAKE_C_FLAGS_* but used by the linker when creating static
libraries.
.SS CMAKE_STATIC_LINKER_FLAGS
.sp
Linker flags to be used to create static libraries.
.sp
These flags will be used by the linker when creating a static library.
.SS CMAKE_TRY_COMPILE_CONFIGURATION
.sp
Build configuration used for try_compile and try_run projects.
.sp
Projects built by try_compile and try_run are built synchronously
during the CMake configuration step.  Therefore a specific build
configuration must be chosen even if the generated build system
supports multiple configurations.
.SS CMAKE_USE_RELATIVE_PATHS
.sp
Use relative paths (May not work!).
.sp
If this is set to TRUE, then CMake will use relative paths between the
source and binary tree.  This option does not work for more
complicated projects, and relative paths are used when possible.  In
general, it is not possible to move CMake generated makefiles to a
different location regardless of the value of this variable.
.SS CMAKE_VISIBILITY_INLINES_HIDDEN
.sp
Default value for the \fBVISIBILITY_INLINES_HIDDEN\fP target
property when a target is created.
.SS CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD
.sp
Include INSTALL target to default build.
.sp
In Visual Studio solution, by default the INSTALL target will not be part of
the default build. Setting this variable will enable the INSTALL target to be
part of the default build.
.SS CMAKE_WIN32_EXECUTABLE
.sp
Default value for WIN32_EXECUTABLE of targets.
.sp
This variable is used to initialize the WIN32_EXECUTABLE property on
all the targets.  See that target property for additional information.
.SS CMAKE_XCODE_ATTRIBUTE_<an\-attribute>
.sp
Set Xcode target attributes directly.
.sp
Tell the Xcode generator to set \(aq<an\-attribute>\(aq to a given value in
the generated Xcode project.  Ignored on other generators.
.sp
See the \fBXCODE_ATTRIBUTE_<an\-attribute>\fP target property
to set attributes on a specific target.
.SS EXECUTABLE_OUTPUT_PATH
.sp
Old executable location variable.
.sp
The target property RUNTIME_OUTPUT_DIRECTORY supercedes this variable
for a target if it is set.  Executable targets are otherwise placed in
this directory.
.SS LIBRARY_OUTPUT_PATH
.sp
Old library location variable.
.sp
The target properties ARCHIVE_OUTPUT_DIRECTORY,
LIBRARY_OUTPUT_DIRECTORY, and RUNTIME_OUTPUT_DIRECTORY supercede this
variable for a target if they are set.  Library targets are otherwise
placed in this directory.
.SH VARIABLES FOR LANGUAGES
.SS CMAKE_COMPILER_IS_GNU<LANG>
.sp
True if the compiler is GNU.
.sp
If the selected <LANG> compiler is the GNU compiler then this is TRUE,
if not it is FALSE.  Unlike the other per\-language variables, this
uses the GNU syntax for identifying languages instead of the CMake
syntax.  Recognized values of the <LANG> suffix are:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
CC = C compiler
CXX = C++ compiler
G77 = Fortran compiler
.ft P
.fi
.UNINDENT
.UNINDENT
.SS CMAKE_C_COMPILE_FEATURES
.sp
List of features known to the C compiler
.sp
These features are known to be available for use with the C compiler. This
list is a subset of the features listed in the \fBCMAKE_C_KNOWN_FEATURES\fP
global property.
.sp
See the \fBcmake\-compile\-features(7)\fP manual for information on
compile features and a list of supported compilers.
.SS CMAKE_C_EXTENSIONS
.sp
Default value for \fBC_EXTENSIONS\fP property of targets.
.sp
This variable is used to initialize the \fBC_EXTENSIONS\fP
property on all targets.  See that target property for additional
information.
.sp
See the \fBcmake\-compile\-features(7)\fP manual for information on
compile features and a list of supported compilers.
.SS CMAKE_C_STANDARD
.sp
Default value for \fBC_STANDARD\fP property of targets.
.sp
This variable is used to initialize the \fBC_STANDARD\fP
property on all targets.  See that target property for additional
information.
.sp
See the \fBcmake\-compile\-features(7)\fP manual for information on
compile features and a list of supported compilers.
.SS CMAKE_C_STANDARD_REQUIRED
.sp
Default value for \fBC_STANDARD_REQUIRED\fP property of targets.
.sp
This variable is used to initialize the \fBC_STANDARD_REQUIRED\fP
property on all targets.  See that target property for additional
information.
.sp
See the \fBcmake\-compile\-features(7)\fP manual for information on
compile features and a list of supported compilers.
.SS CMAKE_CXX_COMPILE_FEATURES
.sp
List of features known to the C++ compiler
.sp
These features are known to be available for use with the C++ compiler. This
list is a subset of the features listed in the \fBCMAKE_CXX_KNOWN_FEATURES\fP
global property.
.sp
See the \fBcmake\-compile\-features(7)\fP manual for information on
compile features and a list of supported compilers.
.SS CMAKE_CXX_EXTENSIONS
.sp
Default value for \fBCXX_EXTENSIONS\fP property of targets.
.sp
This variable is used to initialize the \fBCXX_EXTENSIONS\fP
property on all targets.  See that target property for additional
information.
.sp
See the \fBcmake\-compile\-features(7)\fP manual for information on
compile features and a list of supported compilers.
.SS CMAKE_CXX_STANDARD
.sp
Default value for \fBCXX_STANDARD\fP property of targets.
.sp
This variable is used to initialize the \fBCXX_STANDARD\fP
property on all targets.  See that target property for additional
information.
.sp
See the \fBcmake\-compile\-features(7)\fP manual for information on
compile features and a list of supported compilers.
.SS CMAKE_CXX_STANDARD_REQUIRED
.sp
Default value for \fBCXX_STANDARD_REQUIRED\fP property of targets.
.sp
This variable is used to initialize the \fBCXX_STANDARD_REQUIRED\fP
property on all targets.  See that target property for additional
information.
.sp
See the \fBcmake\-compile\-features(7)\fP manual for information on
compile features and a list of supported compilers.
.SS CMAKE_Fortran_MODDIR_DEFAULT
.sp
Fortran default module output directory.
.sp
Most Fortran compilers write .mod files to the current working
directory.  For those that do not, this is set to "." and used when
the Fortran_MODULE_DIRECTORY target property is not set.
.SS CMAKE_Fortran_MODDIR_FLAG
.sp
Fortran flag for module output directory.
.sp
This stores the flag needed to pass the value of the
Fortran_MODULE_DIRECTORY target property to the compiler.
.SS CMAKE_Fortran_MODOUT_FLAG
.sp
Fortran flag to enable module output.
.sp
Most Fortran compilers write .mod files out by default.  For others,
this stores the flag needed to enable module output.
.SS CMAKE_INTERNAL_PLATFORM_ABI
.sp
An internal variable subject to change.
.sp
This is used in determining the compiler ABI and is subject to change.
.SS CMAKE_<LANG>_ARCHIVE_APPEND
.sp
Rule variable to append to a static archive.
.sp
This is a rule variable that tells CMake how to append to a static
archive.  It is used in place of CMAKE_<LANG>_CREATE_STATIC_LIBRARY on
some platforms in order to support large object counts.  See also
CMAKE_<LANG>_ARCHIVE_CREATE and CMAKE_<LANG>_ARCHIVE_FINISH.
.SS CMAKE_<LANG>_ARCHIVE_CREATE
.sp
Rule variable to create a new static archive.
.sp
This is a rule variable that tells CMake how to create a static
archive.  It is used in place of CMAKE_<LANG>_CREATE_STATIC_LIBRARY on
some platforms in order to support large object counts.  See also
CMAKE_<LANG>_ARCHIVE_APPEND and CMAKE_<LANG>_ARCHIVE_FINISH.
.SS CMAKE_<LANG>_ARCHIVE_FINISH
.sp
Rule variable to finish an existing static archive.
.sp
This is a rule variable that tells CMake how to finish a static
archive.  It is used in place of CMAKE_<LANG>_CREATE_STATIC_LIBRARY on
some platforms in order to support large object counts.  See also
CMAKE_<LANG>_ARCHIVE_CREATE and CMAKE_<LANG>_ARCHIVE_APPEND.
.SS CMAKE_<LANG>_COMPILE_OBJECT
.sp
Rule variable to compile a single object file.
.sp
This is a rule variable that tells CMake how to compile a single
object file for the language <LANG>.
.SS CMAKE_<LANG>_COMPILER_ABI
.sp
An internal variable subject to change.
.sp
This is used in determining the compiler ABI and is subject to change.
.SS CMAKE_<LANG>_COMPILER_ID
.sp
Compiler identification string.
.sp
A short string unique to the compiler vendor.  Possible values
include:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Absoft = Absoft Fortran (absoft.com)
ADSP = Analog VisualDSP++ (analog.com)
AppleClang = Apple Clang (apple.com)
Clang = LLVM Clang (clang.llvm.org)
Cray = Cray Compiler (cray.com)
Embarcadero, Borland = Embarcadero (embarcadero.com)
G95 = G95 Fortran (g95.org)
GNU = GNU Compiler Collection (gcc.gnu.org)
HP = Hewlett\-Packard Compiler (hp.com)
Intel = Intel Compiler (intel.com)
MIPSpro = SGI MIPSpro (sgi.com)
MSVC = Microsoft Visual Studio (microsoft.com)
OpenWatcom = Open Watcom (openwatcom.org)
PGI = The Portland Group (pgroup.com)
PathScale = PathScale (pathscale.com)
SDCC = Small Device C Compiler (sdcc.sourceforge.net)
SunPro = Oracle Solaris Studio (oracle.com)
TI = Texas Instruments (ti.com)
TinyCC = Tiny C Compiler (tinycc.org)
XL, VisualAge, zOS = IBM XL (ibm.com)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This variable is not guaranteed to be defined for all compilers or
languages.
.SS CMAKE_<LANG>_COMPILER_LOADED
.sp
Defined to true if the language is enabled.
.sp
When language <LANG> is enabled by project() or enable_language() this
variable is defined to 1.
.SS CMAKE_<LANG>_COMPILER
.sp
The full path to the compiler for LANG.
.sp
This is the command that will be used as the <LANG> compiler.  Once
set, you can not change this variable.
.SS CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN
.sp
The external toolchain for cross\-compiling, if supported.
.sp
Some compiler toolchains do not ship their own auxilliary utilities such as
archivers and linkers.  The compiler driver may support a command\-line argument
to specify the location of such tools.  CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN
may be set to a path to a path to the external toolchain and will be passed
to the compiler driver if supported.
.sp
This variable may only be set in a toolchain file specified by
the \fBCMAKE_TOOLCHAIN_FILE\fP variable.
.SS CMAKE_<LANG>_COMPILER_TARGET
.sp
The target for cross\-compiling, if supported.
.sp
Some compiler drivers are inherently cross\-compilers, such as clang and
QNX qcc. These compiler drivers support a command\-line argument to specify
the target to cross\-compile for.
.sp
This variable may only be set in a toolchain file specified by
the \fBCMAKE_TOOLCHAIN_FILE\fP variable.
.SS CMAKE_<LANG>_COMPILER_VERSION
.sp
Compiler version string.
.sp
Compiler version in major[.minor[.patch[.tweak]]] format.  This
variable is not guaranteed to be defined for all compilers or
languages.
.SS CMAKE_<LANG>_CREATE_SHARED_LIBRARY
.sp
Rule variable to create a shared library.
.sp
This is a rule variable that tells CMake how to create a shared
library for the language <LANG>.
.SS CMAKE_<LANG>_CREATE_SHARED_MODULE
.sp
Rule variable to create a shared module.
.sp
This is a rule variable that tells CMake how to create a shared
library for the language <LANG>.
.SS CMAKE_<LANG>_CREATE_STATIC_LIBRARY
.sp
Rule variable to create a static library.
.sp
This is a rule variable that tells CMake how to create a static
library for the language <LANG>.
.SS CMAKE_<LANG>_FLAGS_DEBUG
.sp
Flags for Debug build type or configuration.
.sp
<LANG> flags used when CMAKE_BUILD_TYPE is Debug.
.SS CMAKE_<LANG>_FLAGS_MINSIZEREL
.sp
Flags for MinSizeRel build type or configuration.
.sp
<LANG> flags used when CMAKE_BUILD_TYPE is MinSizeRel.Short for
minimum size release.
.SS CMAKE_<LANG>_FLAGS_RELEASE
.sp
Flags for Release build type or configuration.
.sp
<LANG> flags used when CMAKE_BUILD_TYPE is Release
.SS CMAKE_<LANG>_FLAGS_RELWITHDEBINFO
.sp
Flags for RelWithDebInfo type or configuration.
.sp
<LANG> flags used when CMAKE_BUILD_TYPE is RelWithDebInfo.  Short for
Release With Debug Information.
.SS CMAKE_<LANG>_FLAGS
.sp
Flags for all build types.
.sp
<LANG> flags used regardless of the value of CMAKE_BUILD_TYPE.
.SS CMAKE_<LANG>_GHS_KERNEL_FLAGS_DEBUG
.sp
GHS kernel flags for Debug build type or configuration.
.sp
<LANG> flags used when CMAKE_BUILD_TYPE is Debug.
.SS CMAKE_<LANG>_GHS_KERNEL_FLAGS_MINSIZEREL
.sp
GHS kernel flags for MinSizeRel build type or configuration.
.sp
<LANG> flags used when CMAKE_BUILD_TYPE is MinSizeRel.Short for
minimum size release.
.SS CMAKE_<LANG>_GHS_KERNEL_FLAGS_RELEASE
.sp
GHS kernel flags for Release build type or configuration.
.sp
<LANG> flags used when CMAKE_BUILD_TYPE is Release
.SS CMAKE_<LANG>_GHS_KERNEL_FLAGS_RELWITHDEBINFO
.sp
GHS kernel flags for RelWithDebInfo type or configuration.
.sp
<LANG> flags used when CMAKE_BUILD_TYPE is RelWithDebInfo.  Short for
Release With Debug Information.
.SS CMAKE_<LANG>_IGNORE_EXTENSIONS
.sp
File extensions that should be ignored by the build.
.sp
This is a list of file extensions that may be part of a project for a
given language but are not compiled.
.SS CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES
.sp
Directories implicitly searched by the compiler for header files.
.sp
CMake does not explicitly specify these directories on compiler
command lines for language <LANG>.  This prevents system include
directories from being treated as user include directories on some
compilers.
.SS CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES
.sp
Implicit linker search path detected for language <LANG>.
.sp
Compilers typically pass directories containing language runtime
libraries and default library search paths when they invoke a linker.
These paths are implicit linker search directories for the compiler\(aqs
language.  CMake automatically detects these directories for each
language and reports the results in this variable.
.sp
When a library in one of these directories is given by full path to
target_link_libraries() CMake will generate the \-l<name> form on link
lines to ensure the linker searches its implicit directories for the
library.  Note that some toolchains read implicit directories from an
environment variable such as LIBRARY_PATH so keep its value consistent
when operating in a given build tree.
.SS CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES
.sp
Implicit linker framework search path detected for language <LANG>.
.sp
These paths are implicit linker framework search directories for the
compiler\(aqs language.  CMake automatically detects these directories
for each language and reports the results in this variable.
.SS CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES
.sp
Implicit link libraries and flags detected for language <LANG>.
.sp
Compilers typically pass language runtime library names and other
flags when they invoke a linker.  These flags are implicit link
options for the compiler\(aqs language.  CMake automatically detects
these libraries and flags for each language and reports the results in
this variable.
.SS CMAKE_<LANG>_LIBRARY_ARCHITECTURE
.sp
Target architecture library directory name detected for <lang>.
.sp
If the <lang> compiler passes to the linker an architecture\-specific
system library search directory such as <prefix>/lib/<arch> this
variable contains the <arch> name if/as detected by CMake.
.SS CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES
.sp
True if CMAKE_<LANG>_LINKER_PREFERENCE propagates across targets.
.sp
This is used when CMake selects a linker language for a target.
Languages compiled directly into the target are always considered.  A
language compiled into static libraries linked by the target is
considered if this variable is true.
.SS CMAKE_<LANG>_LINKER_PREFERENCE
.sp
Preference value for linker language selection.
.sp
The "linker language" for executable, shared library, and module
targets is the language whose compiler will invoke the linker.  The
LINKER_LANGUAGE target property sets the language explicitly.
Otherwise, the linker language is that whose linker preference value
is highest among languages compiled and linked into the target.  See
also the CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES variable.
.SS CMAKE_<LANG>_LINK_EXECUTABLE
.sp
Rule variable to link an executable.
.sp
Rule variable to link an executable for the given language.
.SS CMAKE_<LANG>_OUTPUT_EXTENSION
.sp
Extension for the output of a compile for a single file.
.sp
This is the extension for an object file for the given <LANG>.  For
example .obj for C on Windows.
.SS CMAKE_<LANG>_PLATFORM_ID
.sp
An internal variable subject to change.
.sp
This is used in determining the platform and is subject to change.
.SS CMAKE_<LANG>_SIMULATE_ID
.sp
Identification string of "simulated" compiler.
.sp
Some compilers simulate other compilers to serve as drop\-in
replacements.  When CMake detects such a compiler it sets this
variable to what would have been the CMAKE_<LANG>_COMPILER_ID for the
simulated compiler.
.SS CMAKE_<LANG>_SIMULATE_VERSION
.sp
Version string of "simulated" compiler.
.sp
Some compilers simulate other compilers to serve as drop\-in
replacements.  When CMake detects such a compiler it sets this
variable to what would have been the CMAKE_<LANG>_COMPILER_VERSION for
the simulated compiler.
.SS CMAKE_<LANG>_SIZEOF_DATA_PTR
.sp
Size of pointer\-to\-data types for language <LANG>.
.sp
This holds the size (in bytes) of pointer\-to\-data types in the target
platform ABI.  It is defined for languages C and CXX (C++).
.SS CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS
.sp
Extensions of source files for the given language.
.sp
This is the list of extensions for a given language\(aqs source files.
.SS CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>
.sp
Specify a CMake file that overrides platform information for <LANG>.
.sp
This is a language\-specific version of CMAKE_USER_MAKE_RULES_OVERRIDE
loaded only when enabling language <LANG>.
.SH VARIABLES FOR CTEST
.SS CTEST_BINARY_DIRECTORY
.sp
Specify the CTest \fBBuildDirectory\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_BUILD_COMMAND
.sp
Specify the CTest \fBMakeCommand\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_BUILD_NAME
.sp
Specify the CTest \fBBuildName\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_BZR_COMMAND
.sp
Specify the CTest \fBBZRCommand\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_BZR_UPDATE_OPTIONS
.sp
Specify the CTest \fBBZRUpdateOptions\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_CHECKOUT_COMMAND
.sp
Tell the \fBctest_start()\fP command how to checkout or initialize
the source directory in a \fBctest(1)\fP dashboard client script.
.SS CTEST_CONFIGURATION_TYPE
.sp
Specify the CTest \fBDefaultCTestConfigurationType\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_CONFIGURE_COMMAND
.sp
Specify the CTest \fBConfigureCommand\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_COVERAGE_COMMAND
.sp
Specify the CTest \fBCoverageCommand\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS Cobertura
.sp
Using \fI\%Cobertura\fP as the coverage generation within your multi\-module
Java project can generate a series of XML files.
.sp
The Cobertura Coverage parser expects to read the coverage data from a
single XML file which contains the coverage data for all modules.
Cobertura has a program with the ability to merge given cobertura.ser files
and then another program to generate a combined XML file from the previous
merged file.  For command line testing, this can be done by hand prior to
CTest looking for the coverage files. For script builds,
set the \fBCTEST_COVERAGE_COMMAND\fP variable to point to a file which will
perform these same steps, such as a .sh or .bat file.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set(CTEST_COVERAGE_COMMAND .../run\-coverage\-and\-consolidate.sh)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where the \fBrun\-coverage\-and\-consolidate.sh\fP script is perhaps created by
the \fBconfigure_file()\fP command and might contain the following code:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#!/usr/bin/env bash
CoberturaFiles="$(find "/path/to/source" \-name "cobertura.ser")"
SourceDirs="$(find "/path/to/source" \-name "java" \-type d)"
cobertura\-merge \-\-datafile coberturamerge.ser $CoberturaFiles
cobertura\-report \-\-datafile coberturamerge.ser \-\-destination . \e
                 \-\-format xml $SourceDirs
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The script uses \fBfind\fP to capture the paths to all of the cobertura.ser files
found below the project\(aqs source directory.  It keeps the list of files and
supplies it as an argument to the \fBcobertura\-merge\fP program. The \fB\-\-datafile\fP
argument signifies where the result of the merge will be kept.
.sp
The combined \fBcoberturamerge.ser\fP file is then used to generate the XML report
using the \fBcobertura\-report\fP program.  The call to the cobertura\-report program
requires some named arguments.
.INDENT 0.0
.TP
.B \fB\-\-datafila\fP
path to the merged .ser file
.TP
.B \fB\-\-destination\fP
path to put the output files(s)
.TP
.B \fB\-\-format\fP
file format to write output in: xml or html
.UNINDENT
.sp
The rest of the supplied arguments consist of the full paths to the
/src/main/java directories of each module within the souce tree. These
directories are needed and should not be forgotten.
.SS CTEST_COVERAGE_EXTRA_FLAGS
.sp
Specify the CTest \fBCoverageExtraFlags\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_CURL_OPTIONS
.sp
Specify the CTest \fBCurlOptions\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_CVS_CHECKOUT
.sp
Deprecated.  Use \fBCTEST_CHECKOUT_COMMAND\fP instead.
.SS CTEST_CVS_COMMAND
.sp
Specify the CTest \fBCVSCommand\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_CVS_UPDATE_OPTIONS
.sp
Specify the CTest \fBCVSUpdateOptions\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_DROP_LOCATION
.sp
Specify the CTest \fBDropLocation\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_DROP_METHOD
.sp
Specify the CTest \fBDropMethod\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_DROP_SITE
.sp
Specify the CTest \fBDropSite\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_DROP_SITE_CDASH
.sp
Specify the CTest \fBIsCDash\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_DROP_SITE_PASSWORD
.sp
Specify the CTest \fBDropSitePassword\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_DROP_SITE_USER
.sp
Specify the CTest \fBDropSiteUser\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_GIT_COMMAND
.sp
Specify the CTest \fBGITCommand\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_GIT_UPDATE_CUSTOM
.sp
Specify the CTest \fBGITUpdateCustom\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_GIT_UPDATE_OPTIONS
.sp
Specify the CTest \fBGITUpdateOptions\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_HG_COMMAND
.sp
Specify the CTest \fBHGCommand\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_HG_UPDATE_OPTIONS
.sp
Specify the CTest \fBHGUpdateOptions\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_MEMORYCHECK_COMMAND
.sp
Specify the CTest \fBMemoryCheckCommand\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_MEMORYCHECK_COMMAND_OPTIONS
.sp
Specify the CTest \fBMemoryCheckCommandOptions\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_MEMORYCHECK_SANITIZER_OPTIONS
.sp
Specify the CTest \fBMemoryCheckSanitizerOptions\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_MEMORYCHECK_SUPPRESSIONS_FILE
.sp
Specify the CTest \fBMemoryCheckSuppressionFile\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_MEMORYCHECK_TYPE
.sp
Specify the CTest \fBMemoryCheckType\fP setting
in a \fBctest(1)\fP dashboard client script.
Valid values are Valgrind, Purify, BoundsChecker, and ThreadSanitizer,
AddressSanitizer, MemorySanitizer, and UndefinedBehaviorSanitizer.
.SS CTEST_NIGHTLY_START_TIME
.sp
Specify the CTest \fBNightlyStartTime\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_P4_CLIENT
.sp
Specify the CTest \fBP4Client\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_P4_COMMAND
.sp
Specify the CTest \fBP4Command\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_P4_OPTIONS
.sp
Specify the CTest \fBP4Options\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_P4_UPDATE_OPTIONS
.sp
Specify the CTest \fBP4UpdateOptions\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_SCP_COMMAND
.sp
Specify the CTest \fBSCPCommand\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_SITE
.sp
Specify the CTest \fBSite\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_SOURCE_DIRECTORY
.sp
Specify the CTest \fBSourceDirectory\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_SVN_COMMAND
.sp
Specify the CTest \fBSVNCommand\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_SVN_OPTIONS
.sp
Specify the CTest \fBSVNOptions\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_SVN_UPDATE_OPTIONS
.sp
Specify the CTest \fBSVNUpdateOptions\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_TEST_TIMEOUT
.sp
Specify the CTest \fBTimeOut\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_TRIGGER_SITE
.sp
Specify the CTest \fBTriggerSite\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_UPDATE_COMMAND
.sp
Specify the CTest \fBUpdateCommand\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_UPDATE_OPTIONS
.sp
Specify the CTest \fBUpdateOptions\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_UPDATE_VERSION_ONLY
.sp
Specify the CTest \fBUpdateVersionOnly\fP setting
in a \fBctest(1)\fP dashboard client script.
.SS CTEST_USE_LAUNCHERS
.sp
Specify the CTest \fBUseLaunchers\fP setting
in a \fBctest(1)\fP dashboard client script.
.SH VARIABLES FOR CPACK
.SS CPACK_ABSOLUTE_DESTINATION_FILES
.sp
List of files which have been installed using  an ABSOLUTE DESTINATION path.
.sp
This variable is a Read\-Only variable which is set internally by CPack
during installation and before packaging using
CMAKE_ABSOLUTE_DESTINATION_FILES defined in cmake_install.cmake
scripts.  The value can be used within CPack project configuration
file and/or CPack<GEN>.cmake file of <GEN> generator.
.SS CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY
.sp
Boolean toggle to include/exclude top level directory (component case).
.sp
Similar usage as CPACK_INCLUDE_TOPLEVEL_DIRECTORY but for the
component case.  See CPACK_INCLUDE_TOPLEVEL_DIRECTORY documentation
for the detail.
.SS CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION
.sp
Ask CPack to error out as soon as a file with absolute INSTALL DESTINATION is encountered.
.sp
The fatal error is emitted before the installation of the offending
file takes place.  Some CPack generators, like NSIS,enforce this
internally.  This variable triggers the definition
ofCMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION when CPack runsVariables
common to all CPack generators
.SS CPACK_INCLUDE_TOPLEVEL_DIRECTORY
.sp
Boolean toggle to include/exclude top level directory.
.sp
When preparing a package CPack installs the item under the so\-called
top level directory.  The purpose of is to include (set to 1 or ON or
TRUE) the top level directory in the package or not (set to 0 or OFF
or FALSE).
.sp
Each CPack generator has a built\-in default value for this variable.
E.g.  Archive generators (ZIP, TGZ, ...) includes the top level
whereas RPM or DEB don\(aqt.  The user may override the default value by
setting this variable.
.sp
There is a similar variable CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY
which may be used to override the behavior for the component packaging
case which may have different default value for historical (now
backward compatibility) reason.
.SS CPACK_INSTALL_SCRIPT
.sp
Extra CMake script provided by the user.
.sp
If set this CMake script will be executed by CPack during its local
[CPack\-private] installation which is done right before packaging the
files.  The script is not called by e.g.: make install.
.SS CPACK_PACKAGING_INSTALL_PREFIX
.sp
The prefix used in the built package.
.sp
Each CPack generator has a default value (like /usr).  This default
value may be overwritten from the CMakeLists.txt or the cpack command
line by setting an alternative value.
.sp
e.g.  set(CPACK_PACKAGING_INSTALL_PREFIX "/opt")
.sp
This is not the same purpose as CMAKE_INSTALL_PREFIX which is used
when installing from the build tree without building a package.
.SS CPACK_SET_DESTDIR
.sp
Boolean toggle to make CPack use DESTDIR mechanism when packaging.
.sp
DESTDIR means DESTination DIRectory.  It is commonly used by makefile
users in order to install software at non\-default location.  It is a
basic relocation mechanism that should not be used on Windows (see
CMAKE_INSTALL_PREFIX documentation).  It is usually invoked like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make DESTDIR=/home/john install
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
which will install the concerned software using the installation
prefix, e.g.  "/usr/local" prepended with the DESTDIR value which
finally gives "/home/john/usr/local".  When preparing a package, CPack
first installs the items to be packaged in a local (to the build tree)
directory by using the same DESTDIR mechanism.  Nevertheless, if
CPACK_SET_DESTDIR is set then CPack will set DESTDIR before doing the
local install.  The most noticeable difference is that without
CPACK_SET_DESTDIR, CPack uses CPACK_PACKAGING_INSTALL_PREFIX as a
prefix whereas with CPACK_SET_DESTDIR set, CPack will use
CMAKE_INSTALL_PREFIX as a prefix.
.sp
Manually setting CPACK_SET_DESTDIR may help (or simply be necessary)
if some install rules uses absolute DESTINATION (see CMake INSTALL
command).  However, starting with CPack/CMake 2.8.3 RPM and DEB
installers tries to handle DESTDIR automatically so that it is seldom
necessary for the user to set it.
.SS CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION
.sp
Ask CPack to warn each time a file with absolute INSTALL DESTINATION is encountered.
.sp
This variable triggers the definition of
CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION when CPack runs
cmake_install.cmake scripts.
.SH COPYRIGHT
2000-2015 Kitware, Inc.
.\" Generated by docutils manpage writer.
.
