.\"
.\" generic swig man page for the swig Project
.br
.br
.TH swig 1 "07 Jun 2016" "swig 3.0.10" "User commands"
.SH NAME
.P
swig <options> filename
.br
.SH SYNOPSIS
.P
/usr/bin/swig -help   [ For commandline help ]
.br
.SH DESCRIPTION
.P
\fBswig\fR - The Simplified Wrapper and Interface Generator (swig) is an open source code interface compiler that connects programs written in C and C++ with scripting languages such as Perl, Python, Ruby, and Tcl. It works by taking the declarations found in C/C++ header files and using them to generate the wrapper code that scripting languages need to access the underlying C/C++ code. In addition, SWIG provides a variety of customization features that let you tailor the wrapping process to suit your application.
.br
.P
SWIG is used in a number of ways:
.br
.P
Building more powerful C/C++ programs. Using SWIG, you can replace the main() function of a C program with a scripting interpreter from which you can control the application. This adds quite a lot of flexibility and makes the program "programmable." That is, the scripting interface allows users and developers to easily modifiy the behavior of the program without having to modify low-level C/C++ code. The benefits of this are numerous. In fact think of all of the large software packages that you use every day---nearly all of them include special a macro language, configuration language, or even a scripting engine that allows users to make customizations.
.br
.P
Rapid prototyping and debugging. SWIG allows C/C++ programs to be placed in a scripting environment that can be used for testing and debugging. For example, you might test a library with a collection of scripts or use the scripting interpreter as an interactive debugger. Since SWIG requires no modifications to the underlying C/C++ code, it can be used even if the final product does not rely upon scripting.
.br
.P
Systems integration. Scripting languages work fairly well for controlling and gluing loosely-coupled software components together. With SWIG, different C/C++ programs can be turned into scripting language extension modules. These modules can then be combined together to create new and interesting applications.
.br
.P
Construction of scripting language extension modules. SWIG can be used to turn common C/C++ libraries into components for use in popular scripting languages. Of course, you will still want to make sure that no-one else has already created a module before doing this. 
.br
.P
.SH "SEE ALSO"
.br
Installed documentation: /usr/share/swig/3.0.10/doc
.br
.P
Additional online documentation in HTML and PDF formats for swig:
.br
.P
User Manual: http://www.swig.org/Doc3.0/Contents.html
.br
.P
Developer Doc: http://www.swig.org/Doc3.0/index.html 
.br
.P
Quick start Tutorial: http://www.swig.org/tutorial.html
.br
.P
SWIG WIKI: http://en.wikipedia.org/wiki/SWIG
.br
.P
The Latest full source download: http://www.swig.org/download.html
.br
.P

.SH AUTHOR
.br
\fBswig\fR was originally written by Dave Beazley, and is now maintained and developed by an team of developers see: http://www.swig.org/guilty.html.  Further details are available at \fIhttp://www.swig.org/index.html\fR.  swig is released under the \fIswig License\fR.
.LP

