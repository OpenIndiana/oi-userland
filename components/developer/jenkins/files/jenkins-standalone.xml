<?xml version='1.0'?>
<!--
//
//
// This file and its contents are supplied under the terms of the
// Common Development and Distribution License ("CDDL"), version 1.0.
// You may only use this file in accordance with the terms of version
// 1.0 of the CDDL.
//
// A full copy of the text of the CDDL should have accompanied this
// source.  A copy of the CDDL is also available via the Internet at
// http://www.illumos.org/license/CDDL.
//
//
// Copyright 2016-2018 by Jim Klimov
//
-->
<!DOCTYPE service_bundle SYSTEM '/usr/share/lib/xml/dtd/service_bundle.dtd.1'>
<service_bundle type='manifest' name='jenkins-standalone'>
  <service
    name='network/http'
    type='service'
    version='1'>

    <!--
      Because we may have multiple instances of network/http
      provided by different implementations, we keep dependencies
      and methods within the instance.
    -->

    <instance name='jenkins' enabled='false'>
        <!--
          Note that while there may be automated deployments of Jenkins
          managed as a web-application in a container like Tomcat, it
          would likely not be a separate SMF service, so names are not
          likely to collide - while this shorthand default is convenient.
        -->

        <!--
          Wait for network interfaces to be initialized.
        -->
        <dependency name='network'
            grouping='require_all'
            restart_on='error'
            type='service'>
            <service_fmri value='svc:/milestone/network:default'/>
        </dependency>

        <!--
          Wait for all local filesystems to be mounted.
        -->
        <dependency name='filesystem-local'
            grouping='require_all'
            restart_on='none'
            type='service'>
            <service_fmri
            value='svc:/system/filesystem/local:default'/>
        </dependency>

        <!--
          Wait for automounting to be available, as we may be
          serving data from home directories or other remote
          filesystems.
        -->
        <dependency name='autofs'
            grouping='optional_all'
            restart_on='error'
            type='service'>
            <service_fmri
            value='svc:/system/filesystem/autofs:default'/>
        </dependency>

<!-- TODO: Wrap this in a script? There are many possible CLI options to consider,
     both for JAVA and the JAR itself... Or keep it simple? -->
        <exec_method type='method'
                   name='start'
                   exec='/usr/bin/java -DsessionTimeout=%{httpd/sessionTimeout} -DsessionEviction=%{httpd/sessionEviction} -jar %{httpd/jenkins_war_file} --httpPort=%{httpd/httpPort} --httpListenAddress=%{httpd/httpHost} --webroot=%{httpd/jenkins_war_dir}'
                   timeout_seconds='240'>
          <method_context>
            <method_credential user='jenkins' group='jenkins' privileges='basic,net_privaddr'/>
<!-- TODO: Configure these by properties? See also a wrap-script TODO above -->
            <method_environment>
              <envvar name='JENKINS_HOME' value='/var/lib/jenkins/home'/>
              <envvar name='LIBZFS4J_ABI' value='openzfs'/>
            </method_environment>
          </method_context>
        </exec_method>

<!-- Note: Jenkins has a CLI and scriptable REST API that can e.g. schedule
     a graceful exit, after all running jobs are finished (and blocking
     creation of new executions), or to do an immediate exit. If a wrapper
     script is made for the SMF methods, use of this should be an option.
     Otherwise, handling of SIGTERM is also graceful, though abrupt :)
-->
        <exec_method type='method'
                   name='stop'
                   exec=':kill -TERM'
                   timeout_seconds='60'>
          <method_context>
            <method_credential user='jenkins' group='jenkins' />
          </method_context>
        </exec_method>

<!-- At the bare minimum, we want to restart and redeploy the WAR file and
     its Jetty container when the service is refreshed (e.g. package update).
     So we just kill it (if running) and hope SMF restart would do the rest.
-->
        <exec_method type='method'
                   name='refresh'
                   exec=':kill -TERM'
                   timeout_seconds='60'>
          <method_context>
            <method_credential user='jenkins' group='jenkins' />
          </method_context>
        </exec_method>

<!-- Note: the jenkins.war startup options are documented at:
     https://wiki.jenkins-ci.org/pages/viewpage.action?pageId=73533946
     Parameters not recognized by the WAR are passed to Winstone container:
     http://winstone.sourceforge.net/#commandLine
     If you plan to shield the Jenkins application server by a reverse proxy
     like nginx, apache mod_proxy, etc. running in the same zone - consider
     setting httpHost=127.0.0.1 below. Conversely, to run Jenkins as "the"
     webserver in this operating environment, note that this SMF service is
     sufficiently privileged to use httpPort numbers under 1024 (e.g. 80).
-->
        <property_group name='httpd' type='application'>
            <stability value='Evolving' />
            <propval name='httpPort' type='count' value='8080' />
            <propval name='httpHost' type='astring' value='0.0.0.0' />
            <propval name='jenkins_war_file' type='astring' value='/usr/share/jenkins/war/jenkins.war' />
            <!-- Directory into which Jetty webserver would unpack the WAR file -->
            <propval name='jenkins_war_dir' type='astring' value='/var/lib/jenkins/standalone-war' />
            <!-- There are two options in winstone server, one for overall
                 session duration (remember me), another for session-eviction
                 after a window/tab with Jenkins was closed in browser -->
            <propval name='sessionTimeout' type='count' value='1440' />
            <propval name='sessionEviction' type='count' value='1440' />
        </property_group>

        <property_group name='startd' type='framework'>
            <!-- sub-process core dumps shouldn't restart
                session -->
            <propval name='ignore_error' type='astring'
                value='core,signal' />
            <propval name='duration' type='astring' value='child' />
        </property_group>

        <template>
          <common_name>
            <loctext xml:lang='C'>Jenkins CI - standalone service</loctext>
          </common_name>
        </template>

    </instance>

    <stability value='Evolving' />

  </service>
</service_bundle>
