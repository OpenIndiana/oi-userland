<?xml version='1.0'?>
<!DOCTYPE service_bundle SYSTEM '/usr/share/lib/xml/dtd/service_bundle.dtd.1'>
<service_bundle type='manifest' name='jenkins-standalone'>
  <service
    name='network/http'
    type='service'
    version='1'>

    <!--
      Because we may have multiple instances of network/http
      provided by different implementations, we keep dependencies
      and methods within the instance.
    -->

    <instance name='jenkins' enabled='false'>
        <!--
          Note that while there may be automated deployments of Jenkins
          managed as a web-application in a container like Tomcat, it
          would likely not be a separate SMF service, so names are not
          likely to collide - while this shorthand default is convenient.
        -->

        <!--
          Wait for network interfaces to be initialized.
        -->
        <dependency name='network'
            grouping='require_all'
            restart_on='error'
            type='service'>
            <service_fmri value='svc:/milestone/network:default'/>
        </dependency>

        <!--
          Wait for all local filesystems to be mounted.
        -->
        <dependency name='filesystem-local'
            grouping='require_all'
            restart_on='none'
            type='service'>
            <service_fmri
            value='svc:/system/filesystem/local:default'/>
        </dependency>

        <!--
          Wait for automounting to be available, as we may be
          serving data from home directories or other remote
          filesystems.
        -->
        <dependency name='autofs'
            grouping='optional_all'
            restart_on='error'
            type='service'>
            <service_fmri
            value='svc:/system/filesystem/autofs:default'/>
        </dependency>

<!-- TODO: Wrap this in a script? There are many possible CLI options to consider,
     both for JAVA and the JAR itself... Or keep it simple? -->
        <exec_method type='method'
                   name='start'
                   exec='/usr/bin/java %{java_startup_options} -jar %{jenkins_war_file} --httpPort=%{httpPort} %{jenkins_startup_options}'
                   timeout_seconds='240'>
          <method_context>
            <method_environment>
              <envvar name='JENKINS_HOME' value='/var/lib/jenkins/home'/>
              <envvar name='LIBZFS4J_ABI' value='openzfs'/>
            </method_environment>
            <method_credential user='jenkins' group='jenkins' privileges='basic,net_privaddr'/>
          </method_context>
        </exec_method>

        <exec_method type='method'
                   name='stop'
                   exec=':kill -TERM'
                   timeout_seconds='60'>
          <method_context>
            <method_credential user='jenkins' group='jenkins' />
          </method_context>
        </exec_method>

        <property_group name='httpd' type='application'>
            <stability value='Evolving' />
            <propval name='httpPort' type='count' value='8080' />
            <propval name='java_startup_options' type='astring' value='-DsessionTimeout=1440' />
            <propval name='jenkins_startup_options' type='astring' value='' />
            <propval name='jenkins_war_file' type='astring' value='/usr/share/jenkins/war/jenkins.war' />
        </property_group>

        <property_group name='startd' type='framework'>
            <!-- sub-process core dumps shouldn't restart
                session -->
            <propval name='ignore_error' type='astring'
                value='core,signal' />
        </property_group>

        <template>
          <common_name>
            <loctext xml:lang='C'>Jenkins CI - standalone service</loctext>
          </common_name>
        </template>

    </instance>

    <stability value='Evolving' />

  </service>
</service_bundle>
