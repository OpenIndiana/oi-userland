--- vala-0.36.6/tests/testrunner.sh	Sun Oct  8 10:39:01 2017
+++ vala-0.36.6/tests/testrunner.sh.new	Wed Nov  8 10:53:07 2017
@@ -19,6 +19,7 @@
 #
 # Author:
 # 	JÃ¼rg Billeter <j@bitron.ch>
+# This version patched to run on OpenIndiana by Jason Martin
 
 builddir=$PWD
 topbuilddir=$builddir/..
@@ -29,7 +30,34 @@
 export G_DEBUG=fatal_warnings
 
 VALAC=$topbuilddir/compiler/valac$EXEEXT
-VALAFLAGS="$VALAFLAGS --vapidir $vapidir --disable-warnings --main main --save-temps -X -g -X -O0 -X -pipe -X -lm -X -DGETTEXT_PACKAGE=\"valac\" -X -Werror=return-type -X -Werror=init-self -X -Werror=implicit -X -Werror=sequence-point -X -Werror=return-type -X -Werror=uninitialized -X -Werror=pointer-arith -X -Werror=int-to-pointer-cast -X -Werror=pointer-to-int-cast -X -Wformat -X -Werror=format-security -X -Werror=format-nonliteral -X -Werror=redundant-decls -X -Werror=int-conversion"
+# OpenIndiana add -v flag for extra logging
+# Removed -X -Werror=int-conversion, not an option with oi gcc (GCC) 4.9.4
+# Removed -X -Werror=int-to-pointer-cast and -X -Werror=pointer-to-int-cast
+#  for BUILD_32_and_64 test compares
+VALAFLAGS="$VALAFLAGS \
+	-v \
+	--vapidir \
+	$vapidir \
+	--disable-warnings \
+	--main main \
+	--save-temps \
+	-X -g \
+	-X -O0 \
+	-X -pipe \
+	-X -lm \
+	-X -DGETTEXT_PACKAGE=\"valac\" \
+	-X -Werror=return-type \
+	-X -Werror=init-self \
+	-X -Werror=implicit \
+	-X -Werror=sequence-point \
+	-X -Werror=return-type \
+	-X -Werror=uninitialized \
+	-X -Werror=pointer-arith \
+	-X -Wformat \
+	-X -Werror=format-security \
+	-X -Werror=format-nonliteral \
+	-X -Werror=redundant-decls"
+
 VAPIGEN=$topbuilddir/vapigen/vapigen$EXEEXT
 VAPIGENFLAGS="--vapidir $vapidir"
 
@@ -114,26 +142,28 @@
 }
 
 testdir=_test
-rm -rf $testdir
-mkdir $testdir
-cd $testdir
+passed=0
+failed=0
 
-echo -n -e "TEST: Building...\033[72G"
+echo "TEST: Building...\n"
 
-cat << "EOF" > checkall
-all=0
-fail=0
-EOF
+for testfile in "$@"; do
+	PACKAGES=gio-2.0
+	# quick hack to get this test to pass; remove when test changes
+	if [ "$testfile" = "dbus/enum-string-marshalling.vala" ]; then
+		PACKAGES="$PACKAGES gio-unix-2.0"
+	fi
+	SOURCEFILES=
+	cd $builddir
+	rm -rf $testdir
+	mkdir $testdir
+	cd $testdir
 
-cat << "EOF" > main.vala
+	cat << "EOF" > main.vala
 void main (string[] args) {
 	switch (args[1]) {
 EOF
 
-PACKAGES=gio-2.0
-SOURCEFILES=
-for testfile in "$@"; do
-	rm -f prepare check
 	echo 'set -e' >> prepare
 
 	case "$testfile" in
@@ -172,7 +202,7 @@
 						INHEADER=0
 					fi
 				else
-					if echo "$line" | grep -q "^[A-Za-z]\+:"; then
+					if echo "$line" | grep -q "^[A-Za-z]*:"; then
 						sourceend
 						PART=$(($PART + 1))
 						INHEADER=1
@@ -189,27 +219,7 @@
 	esac
 
 	cat prepare check > $ns.check
-	cat << EOF >> checkall
-echo -n -e "  /$testpath: \033[72G"
-((all++))
-if bash $ns.check &>log; then
-	echo -e "\033[0;32mOK\033[m"
-else
-	((fail++))
-	echo -e "\033[0;31mFAIL\033[m"
-	cat log
-fi
-EOF
-done
 
-cat << "EOF" >> checkall
-if [ $fail -eq 0 ]; then
-	echo "All $all tests passed"
-else
-	echo "$fail of $all tests failed"
-	exit 1
-fi
-EOF
 
 cat << "EOF" >> main.vala
 	default: assert_not_reached ();
@@ -217,23 +227,25 @@
 }
 EOF
 
-cat $SOURCEFILES >> main.vala
+	if [ -n "$SOURCEFILES" ]
+	then
+		cat $SOURCEFILES >> main.vala
+		if ! $VALAC $VALAFLAGS -o test$EXEEXT $([ -z "$PACKAGES" ] || echo $PACKAGES | xargs -n 1 printf "%s" " --pkg=") main.vala &>log; then
+			cat log
+		fi
+	fi
 
-if $VALAC $VALAFLAGS -o test$EXEEXT $([ -z "$PACKAGES" ] || echo $PACKAGES | xargs -n 1 echo -n " --pkg") main.vala &>log; then
-	echo -e "\033[0;32mOK\033[m"
-else
-	echo -e "\033[0;31mFAIL\033[m"
-	cat log
+	if bash $ns.check &>log; then
+		echo "PASS: /$testfile"
+		((passed++))
+	else
+		echo "FAIL: /$testfile"
+		((failed++))
+		cat log
+	fi
 
-	cd $builddir
-	exit 1
-fi
+done
 
-if bash checkall; then
-	cd $builddir
-	rm -rf $testdir
-else
-	cd $builddir
-	exit 1
-fi
+echo "TOTAL: passed $passed of $# tests and failed $failed"
 
+cd $builddir
