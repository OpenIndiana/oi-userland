*** t0000-basic.sh ***
ok 1 - verify that the running shell supports "local"
ok 2 - .git/objects should be empty after git init in an empty repo
ok 3 - .git/objects should have 3 subdirectories
ok 4 - success is reported like this
ok 5 - subtest: 3 passing tests
ok 6 - subtest: 2/3 tests passing
ok 7 - subtest: --immediate
ok 8 - subtest: a failing TODO test
ok 9 - subtest: a passing TODO test
ok 10 - subtest: 2 TODO tests, one passin
ok 11 - subtest: mixed results: pass, failure and a TODO test
ok 12 - subtest: mixed results: a mixture of all possible results
ok 13 - subtest: --verbose option
ok 14 - subtest: --verbose-only option
ok 15 - subtest: skip one with GIT_SKIP_TESTS
ok 16 - subtest: skip several with GIT_SKIP_TESTS
ok 17 - subtest: sh pattern skipping with GIT_SKIP_TESTS
ok 18 - subtest: skip entire test suite with GIT_SKIP_TESTS
ok 19 - subtest: GIT_SKIP_TESTS does not skip unmatched suite
ok 20 - subtest: --run basic
ok 21 - subtest: --run with a range
ok 22 - subtest: --run with two ranges
ok 23 - subtest: --run with a left open range
ok 24 - subtest: --run with a right open range
ok 25 - subtest: --run with basic negation
ok 26 - subtest: --run with two negations
ok 27 - subtest: --run a range and negation
ok 28 - subtest: --run range negation
ok 29 - subtest: --run include, exclude and include
ok 30 - subtest: --run include, exclude and include, comma separated
ok 31 - subtest: --run exclude and include
ok 32 - subtest: --run empty selectors
ok 33 - subtest: --run substring selector
ok 34 - subtest: --run keyword selection
ok 35 - subtest: --run invalid range end
ok 36 - subtest: --invert-exit-code without --immediate
ok 37 - subtest: --invert-exit-code with --immediate: all passed
ok 38 - subtest: --invert-exit-code without --immediate: partial pass
ok 39 - subtest: --invert-exit-code with --immediate: partial pass
ok 40 - subtest: --invert-exit-code --immediate: got a failure
ok 41 - subtest: tests respect prerequisites
ok 42 - subtest: tests respect lazy prerequisites
ok 43 - subtest: nested lazy prerequisites
ok 44 - subtest: lazy prereqs do not turn off tracing
ok 45 - subtest: tests clean up after themselves
ok 46 - subtest: tests clean up even on failures
ok 47 - subtest: test_atexit is run
ok 48 - test_oid provides sane info by default
ok 49 - test_oid can look up data for SHA-1
ok 50 - test_oid can look up data for SHA-256
ok 51 - test_oid can look up data for a specified algorithm
ok 52 - test_bool_env
ok 53 - git update-index without --add should fail adding
ok 54 - git update-index with --add should succeed
ok 55 - writing tree out with git write-tree
ok 56 - validate object ID of a known tree
ok 57 - git update-index without --remove should fail removing
ok 58 - git update-index with --remove should be able to remove
ok 59 - git write-tree should be able to write an empty tree
ok 60 - validate object ID of a known tree
ok 61 - adding various types of objects with git update-index --add
ok 62 - showing stage with git ls-files --stage
ok 63 - validate git ls-files output for a known tree
ok 64 - writing tree out with git write-tree
ok 65 - validate object ID for a known tree
ok 66 - showing tree with git ls-tree
ok 67 - git ls-tree output for a known tree
ok 68 - showing tree with git ls-tree -r
ok 69 - git ls-tree -r output for a known tree
ok 70 - showing tree with git ls-tree -r -t
ok 71 - git ls-tree -r output for a known tree
ok 72 - writing partial tree out with git write-tree --prefix
ok 73 - validate object ID for a known tree
ok 74 - writing partial tree out with git write-tree --prefix
ok 75 - validate object ID for a known tree
ok 76 - put invalid objects into the index
ok 77 - writing this tree without --missing-ok
ok 78 - writing this tree with --missing-ok
ok 79 - git read-tree followed by write-tree should be idempotent
ok 80 - validate git diff-files output for a know cache/work tree state
ok 81 - git update-index --refresh should succeed
ok 82 - no diff after checkout and git update-index --refresh
ok 83 - git commit-tree records the correct tree in a commit
ok 84 - git commit-tree records the correct parent in a commit
ok 85 - git commit-tree omits duplicated parent in a commit
ok 86 - update-index D/F conflict
ok 87 - very long name in the index handled sanely
ok 88 - more update-index D/F conflicts
ok 89 - test_must_fail on a failing git command
ok 90 - test_must_fail on a failing git command with env
ok 91 - test_must_fail rejects a non-git command
ok 92 - test_must_fail rejects a non-git command with env
# passed all 92 test(s)
1..92
*** t0001-init.sh ***
ok 1 - plain
ok 2 - plain nested in bare
ok 3 - plain through aliased command, outside any git repo
ok 4 - plain nested through aliased command
ok 5 - plain nested in bare through aliased command
ok 6 - No extra GIT_* on alias scripts
ok 7 - plain with GIT_WORK_TREE
ok 8 - plain bare
ok 9 - plain bare with GIT_WORK_TREE
ok 10 - GIT_DIR bare
ok 11 - init --bare
ok 12 - GIT_DIR non-bare
ok 13 - GIT_DIR & GIT_WORK_TREE (1)
ok 14 - GIT_DIR & GIT_WORK_TREE (2)
ok 15 - reinit
ok 16 - init with --template
ok 17 - init with --template (blank)
ok 18 - init with init.templatedir set
ok 19 - init with init.templatedir using ~ expansion
ok 20 - init --bare/--shared overrides system/global config
ok 21 - init honors global core.sharedRepository
ok 22 - init allows insanely long --template
ok 23 - init creates a new directory
ok 24 - init creates a new bare directory
ok 25 - init recreates a directory
ok 26 - init recreates a new bare directory
ok 27 - init creates a new deep directory
ok 28 - init creates a new deep directory (umask vs. shared)
ok 29 - init notices EEXIST (1)
ok 30 - init notices EEXIST (2)
ok 31 - init notices EPERM
ok 32 - init creates a new bare directory with global --bare
ok 33 - init prefers command line to GIT_DIR
ok 34 - init with separate gitdir
ok 35 - explicit bare & --separate-git-dir incompatible
ok 36 - implicit bare & --separate-git-dir incompatible
ok 37 - bare & --separate-git-dir incompatible within worktree
ok 38 - init in long base path
ok 39 # skip init in long restricted base path (missing GETCWD_IGNORES_PERMS)
ok 40 - re-init on .git file
ok 41 - re-init to update git link
ok 42 - re-init to move gitdir
ok 43 - re-init to move gitdir symlink
ok 44 - re-init to move gitdir with linked worktrees
ok 45 - re-init to move gitdir within linked worktree
ok 46 # skip .git hidden (missing MINGW)
ok 47 # skip bare git dir not hidden (missing MINGW)
ok 48 - remote init from does not use config from cwd
ok 49 - re-init from a linked worktree
ok 50 - init honors GIT_DEFAULT_HASH
ok 51 - init honors --object-format
ok 52 - extensions.objectFormat is not allowed with repo version 0
ok 53 - init rejects attempts to initialize with different hash
ok 54 - extensions.refStorage is not allowed with repo version 0
ok 55 - extensions.refStorage with files backend
ok 56 - extensions.refStorage with unknown backend
ok 57 - init with GIT_DEFAULT_REF_FORMAT=files
ok 58 - init with GIT_DEFAULT_REF_FORMAT=garbage
ok 59 - init with --ref-format=files
ok 60 - re-init with same format
ok 61 - init with --ref-format=garbage
ok 62 # skip core.hidedotfiles = false (missing MINGW)
ok 63 # skip redirect std handles (missing MINGW)
ok 64 - --initial-branch
ok 65 - overridden default initial branch name (config)
ok 66 - advice on unconfigured init.defaultBranch
ok 67 - overridden default main branch name (env)
ok 68 - invalid default branch name
ok 69 - branch -m with the initial branch
# passed all 69 test(s)
1..69
*** t0002-gitfile.sh ***
ok 1 - initial setup
ok 2 - bad setup: invalid .git file format
ok 3 - bad setup: invalid .git file path
ok 4 - final setup + check rev-parse --git-dir
ok 5 - check hash-object
ok 6 - check cat-file
ok 7 - check update-index
ok 8 - check write-tree
ok 9 - check commit-tree
ok 10 - check rev-list
ok 11 - setup_git_dir twice in subdir
ok 12 - enter_repo non-strict mode
ok 13 - enter_repo linked checkout
ok 14 - enter_repo strict mode
# passed all 14 test(s)
1..14
*** t0003-attributes.sh ***
ok 1 - open-quoted pathname
ok 2 - setup
ok 3 - setup branches
ok 4 - command line checks
ok 5 - attribute test
ok 6 - attribute matching is case sensitive when core.ignorecase=0
ok 7 - attribute matching is case insensitive when core.ignorecase=1
ok 8 # skip additional case insensitivity tests (missing CASE_INSENSITIVE_FS)
ok 9 - unnormalized paths
ok 10 - relative paths
ok 11 - prefixes are not confused with leading directories
ok 12 - core.attributesfile
ok 13 - attribute test: read paths from stdin
ok 14 - setup --all option
ok 15 - attribute test: --all option
ok 16 - attribute test: --cached option
ok 17 - root subdir attribute test
ok 18 - negative patterns
ok 19 - patterns starting with exclamation
ok 20 - "**" test
ok 21 - "**" with no slashes test
ok 22 - using --git-dir and --work-tree
ok 23 - using --source
ok 24 - setup bare
ok 25 - bare repository: check that .gitattribute is ignored
ok 26 - --attr-source is bad
ok 27 - attr.tree when HEAD is unborn
ok 28 - bad attr source defaults to reading .gitattributes file
ok 29 - bare repo defaults to reading .gitattributes from HEAD
ok 30 - precedence of --attr-source, GIT_ATTR_SOURCE, then attr.tree
ok 31 - bare repository: with --source
ok 32 - bare repository: check that --cached honors index
ok 33 - bare repository: test info/attributes
ok 34 - binary macro expanded by -a
ok 35 - query binary macro directly
ok 36 - set up symlink tests
ok 37 - symlinks respected in core.attributesFile
ok 38 - symlinks respected in info/attributes
ok 39 - symlinks not respected in-tree
ok 40 - large attributes line ignored in tree
ok 41 - large attributes line ignores trailing content in tree
ok 42 # skip large attributes file ignored in tree (missing EXPENSIVE)
ok 43 - large attributes line ignored in index
ok 44 - large attributes line ignores trailing content in index
ok 45 # skip large attributes file ignored in index (missing EXPENSIVE)
ok 46 - builtin object mode attributes work (dir and regular paths)
ok 47 - builtin object mode attributes work (executable)
ok 48 - builtin object mode attributes work (symlinks)
ok 49 - native object mode attributes work with --cached
ok 50 - check object mode attributes work for submodules
ok 51 - we do not allow user defined builtin_* attributes
ok 52 - user defined builtin_objectmode values are ignored
# passed all 52 test(s)
1..52
*** t0004-unwritable.sh ***
ok 1 - setup
ok 2 - write-tree should notice unwritable repository
ok 3 - write-tree output on unwritable repository
ok 4 - commit should notice unwritable repository
ok 5 - commit output on unwritable repository
ok 6 - update-index should notice unwritable repository
ok 7 - update-index output on unwritable repository
ok 8 - add should notice unwritable repository
ok 9 - add output on unwritable repository
# passed all 9 test(s)
1..9
*** t0005-signals.sh ***
ok 1 - sigchain works
ok 2 - signals are propagated using shell convention
ok 3 - create blob
ok 4 - a constipated git dies with SIGPIPE
ok 5 - a constipated git dies with SIGPIPE even if parent ignores it
# passed all 5 test(s)
1..5
*** t0006-date.sh ***
ok 1 - relative date (5 seconds ago)
ok 2 - relative date (5 minutes ago)
ok 3 - relative date (5 hours ago)
ok 4 - relative date (5 days ago)
ok 5 - relative date (3 weeks ago)
ok 6 - relative date (5 months ago)
ok 7 - relative date (1 year, 2 months ago)
ok 8 - relative date (1 year, 9 months ago)
ok 9 - relative date (20 years ago)
ok 10 - relative date (12 months ago)
ok 11 - relative date (2 years ago)
ok 12 - show date (iso8601:1466000000 +0200)
ok 13 - show date (iso8601-strict:1466000000 +0200)
ok 14 - show date (iso8601-strict:1466000000 +0000)
ok 15 - show date (rfc2822:1466000000 +0200)
ok 16 - show date (short:1466000000 +0200)
ok 17 - show date (default:1466000000 +0200)
ok 18 - show date (raw:1466000000 +0200)
ok 19 - show date (unix:1466000000 +0200)
ok 20 - show date (iso-local:1466000000 +0200)
ok 21 - show date (raw-local:1466000000 +0200)
ok 22 - show date (unix-local:1466000000 +0200)
ok 23 - show date (format:%z:1466000000 +0200)
ok 24 - show date (format-local:%z:1466000000 +0200)
ok 25 - show date (format:%Z:1466000000 +0200)
ok 26 - show date (format-local:%Z:1466000000 +0200)
ok 27 - show date (format:%%z:1466000000 +0200)
ok 28 - show date (format-local:%%z:1466000000 +0200)
ok 29 - show date (format:%Y-%m-%d %H:%M:%S:1466000000 +0200)
ok 30 - show date (format-local:%Y-%m-%d %H:%M:%S:1466000000 +0200)
ok 31 - show date (format:%s:123456789 +1234)
ok 32 - show date (format:%s:123456789 -1234)
ok 33 - show date (format-local:%s:123456789 -1234)
ok 34 - show date (iso8601:1466000000 -0200)
ok 35 - show date (iso8601-strict:1466000000 -0200)
ok 36 - show date (rfc2822:1466000000 -0200)
ok 37 - show date (default:1466000000 -0200)
ok 38 - show date (raw:1466000000 -0200)
ok 39 - show date (iso:5758122296 -0400)
ok 40 - show date (iso-local:5758122296 -0400)
ok 41 - parse date (2008)
ok 42 - parse date (2008-02)
ok 43 - parse date (2008-02-14)
ok 44 - parse date (2008-02-14 20:30:45)
ok 45 - parse date (2008-02-14 20:30:45 -0500)
ok 46 - parse date (2008.02.14 20:30:45 -0500)
ok 47 - parse date (20080214T20:30:45)
ok 48 - parse date (20080214T20:30)
ok 49 - parse date (20080214T20)
ok 50 - parse date (20080214T203045)
ok 51 - parse date (20080214T2030)
ok 52 - parse date (20080214T000000.20)
ok 53 - parse date (20080214T00:00:00.20)
ok 54 - parse date (20080214T203045-04:00)
ok 55 - parse date (20080214T203045 -04:00)
ok 56 - parse date (20080214T203045.019-04:00)
ok 57 - parse date (2008-02-14 20:30:45.019-04:00)
ok 58 - parse date (2008-02-14 20:30:45 -0015)
ok 59 - parse date (2008-02-14 20:30:45 -5)
ok 60 - parse date (2008-02-14 20:30:45 -5:)
ok 61 - parse date (2008-02-14 20:30:45 -05)
ok 62 - parse date (2008-02-14 20:30:45 -:30)
ok 63 - parse date (2008-02-14 20:30:45 -05:00)
ok 64 - parse date (2008-02-14 20:30:45 TZ=EST5)
ok 65 - parse date (Thu, 7 Apr 2005 15:14:13 -0700)
ok 66 - parse approxidate (now)
ok 67 - parse approxidate (5 seconds ago)
ok 68 - parse approxidate (5.seconds.ago)
ok 69 - parse approxidate (10.minutes.ago)
ok 70 - parse approxidate (yesterday)
ok 71 - parse approxidate (3.days.ago)
ok 72 - parse approxidate (12:34:56.3.days.ago)
ok 73 - parse approxidate (3.weeks.ago)
ok 74 - parse approxidate (3.months.ago)
ok 75 - parse approxidate (2.years.3.months.ago)
ok 76 - parse approxidate (6am yesterday)
ok 77 - parse approxidate (6pm yesterday)
ok 78 - parse approxidate (3:00)
ok 79 - parse approxidate (15:00)
ok 80 - parse approxidate (noon today)
ok 81 - parse approxidate (noon yesterday)
ok 82 - parse approxidate (January 5th noon pm)
ok 83 - parse approxidate (10am noon)
ok 84 - parse approxidate (last tuesday)
ok 85 - parse approxidate (July 5th)
ok 86 - parse approxidate (06/05/2009)
ok 87 - parse approxidate (06.05.2009)
ok 88 - parse approxidate (Jun 6, 5AM)
ok 89 - parse approxidate (5AM Jun 6)
ok 90 - parse approxidate (6AM, June 7, 2009)
ok 91 - parse approxidate (2008-12-01)
ok 92 - parse approxidate (2009-12-01)
ok 93 - human date 1251642000
ok 94 - human date 1251228000
ok 95 - human date 1249932000
ok 96 - human date 1238660000
ok 97 - human date 1220210400
ok 98 - human date 1214160000
ok 99 - human date 1196472000
ok 100 - human date 621660000
# passed all 100 test(s)
1..100
*** t0007-git-var.sh ***
ok 1 - get GIT_AUTHOR_IDENT
ok 2 - get GIT_COMMITTER_IDENT
ok 3 # skip requested identities are strict (missing !AUTOIDENT of !FAIL_PREREQS,!AUTOIDENT)
ok 4 - get GIT_DEFAULT_BRANCH without configuration
ok 5 - get GIT_DEFAULT_BRANCH with configuration
ok 6 - get GIT_EDITOR without configuration
ok 7 - get GIT_EDITOR with configuration
ok 8 - get GIT_EDITOR with environment variable GIT_EDITOR
ok 9 - get GIT_EDITOR with environment variable EDITOR
ok 10 - get GIT_EDITOR with configuration and environment variable GIT_EDITOR
ok 11 - get GIT_EDITOR with configuration and environment variable EDITOR
ok 12 - get GIT_SEQUENCE_EDITOR without configuration
ok 13 - get GIT_SEQUENCE_EDITOR with configuration
ok 14 - get GIT_SEQUENCE_EDITOR with environment variable
ok 15 - get GIT_SEQUENCE_EDITOR with configuration and environment variable
ok 16 - GIT_SHELL_PATH points to a valid executable
ok 17 # skip GIT_SHELL_PATH points to a suitable shell (missing MINGW)
ok 18 - GIT_ATTR_SYSTEM produces expected output
ok 19 - GIT_ATTR_GLOBAL points to the correct location
ok 20 - GIT_CONFIG_SYSTEM points to the correct location
ok 21 - GIT_CONFIG_GLOBAL points to the correct location
ok 22 - git var -l lists variables
ok 23 - git var -l lists config
ok 24 - git var -l lists multiple global configs
ok 25 - git var -l does not split multiline editors
ok 26 - listing and asking for variables are exclusive
ok 27 - `git var -l` works even without HOME
# passed all 27 test(s)
1..27
*** t0008-ignores.sh ***
ok 1 - setup
ok 2 - . corner-case
ok 3 - . corner-case with -q
ok 4 - . corner-case with --quiet
ok 5 - . corner-case with -v
ok 6 - . corner-case with -v -n
ok 7 - . corner-case with -v --non-matching
ok 8 - . corner-case with --verbose
ok 9 - . corner-case with --verbose -n
ok 10 - . corner-case with --verbose --non-matching
ok 11 - empty command line
ok 12 - empty command line with -q
ok 13 - empty command line with --quiet
ok 14 - empty command line with -v
ok 15 - empty command line with -v -n
ok 16 - empty command line with -v --non-matching
ok 17 - empty command line with --verbose
ok 18 - empty command line with --verbose -n
ok 19 - empty command line with --verbose --non-matching
ok 20 - --stdin with empty STDIN
ok 21 - --stdin with empty STDIN with -q
ok 22 - --stdin with empty STDIN with --quiet
ok 23 - --stdin with empty STDIN with -v
ok 24 - --stdin with empty STDIN with -v -n
ok 25 - --stdin with empty STDIN with -v --non-matching
ok 26 - --stdin with empty STDIN with --verbose
ok 27 - --stdin with empty STDIN with --verbose -n
ok 28 - --stdin with empty STDIN with --verbose --non-matching
ok 29 - -q with multiple args
ok 30 - --quiet with multiple args
ok 31 - -q -v
ok 32 - --quiet -v
ok 33 - -q --verbose
ok 34 - --quiet --verbose
ok 35 - --quiet with multiple args
ok 36 - erroneous use of --
ok 37 - erroneous use of -- with -q
ok 38 - erroneous use of -- with --quiet
ok 39 - erroneous use of -- with -v
ok 40 - erroneous use of -- with -v -n
ok 41 - erroneous use of -- with -v --non-matching
ok 42 - erroneous use of -- with --verbose
ok 43 - erroneous use of -- with --verbose -n
ok 44 - erroneous use of -- with --verbose --non-matching
ok 45 - --stdin with superfluous arg
ok 46 - --stdin with superfluous arg with -q
ok 47 - --stdin with superfluous arg with --quiet
ok 48 - --stdin with superfluous arg with -v
ok 49 - --stdin with superfluous arg with -v -n
ok 50 - --stdin with superfluous arg with -v --non-matching
ok 51 - --stdin with superfluous arg with --verbose
ok 52 - --stdin with superfluous arg with --verbose -n
ok 53 - --stdin with superfluous arg with --verbose --non-matching
ok 54 - --stdin -z with superfluous arg
ok 55 - --stdin -z with superfluous arg with -q
ok 56 - --stdin -z with superfluous arg with --quiet
ok 57 - --stdin -z with superfluous arg with -v
ok 58 - --stdin -z with superfluous arg with -v -n
ok 59 - --stdin -z with superfluous arg with -v --non-matching
ok 60 - --stdin -z with superfluous arg with --verbose
ok 61 - --stdin -z with superfluous arg with --verbose -n
ok 62 - --stdin -z with superfluous arg with --verbose --non-matching
ok 63 - -z without --stdin
ok 64 - -z without --stdin with -q
ok 65 - -z without --stdin with --quiet
ok 66 - -z without --stdin with -v
ok 67 - -z without --stdin with -v -n
ok 68 - -z without --stdin with -v --non-matching
ok 69 - -z without --stdin with --verbose
ok 70 - -z without --stdin with --verbose -n
ok 71 - -z without --stdin with --verbose --non-matching
ok 72 - -z without --stdin and superfluous arg
ok 73 - -z without --stdin and superfluous arg with -q
ok 74 - -z without --stdin and superfluous arg with --quiet
ok 75 - -z without --stdin and superfluous arg with -v
ok 76 - -z without --stdin and superfluous arg with -v -n
ok 77 - -z without --stdin and superfluous arg with -v --non-matching
ok 78 - -z without --stdin and superfluous arg with --verbose
ok 79 - -z without --stdin and superfluous arg with --verbose -n
ok 80 - -z without --stdin and superfluous arg with --verbose --non-matching
ok 81 - needs work tree
ok 82 - needs work tree with -q
ok 83 - needs work tree with --quiet
ok 84 - needs work tree with -v
ok 85 - needs work tree with -v -n
ok 86 - needs work tree with -v --non-matching
ok 87 - needs work tree with --verbose
ok 88 - needs work tree with --verbose -n
ok 89 - needs work tree with --verbose --non-matching
ok 90 - non-existent file at top-level not ignored
ok 91 - non-existent file at top-level not ignored with -q
ok 92 - non-existent file at top-level not ignored with --quiet
ok 93 - non-existent file at top-level not ignored with -v
ok 94 - non-existent file at top-level not ignored with -v -n
ok 95 - non-existent file at top-level not ignored with -v --non-matching
ok 96 - non-existent file at top-level not ignored with --verbose
ok 97 - non-existent file at top-level not ignored with --verbose -n
ok 98 - non-existent file at top-level not ignored with --verbose --non-matching
ok 99 - non-existent file at top-level not ignored with --no-index
ok 100 - non-existent file at top-level not ignored with --no-index -q
ok 101 - non-existent file at top-level not ignored with --no-index --quiet
ok 102 - non-existent file at top-level not ignored with --no-index -v
ok 103 - non-existent file at top-level not ignored with --no-index -v -n
ok 104 - non-existent file at top-level not ignored with --no-index -v --non-matching
ok 105 - non-existent file at top-level not ignored with --no-index --verbose
ok 106 - non-existent file at top-level not ignored with --no-index --verbose -n
ok 107 - non-existent file at top-level not ignored with --no-index --verbose --non-matching
ok 108 - non-existent file at top-level ignored
ok 109 - non-existent file at top-level ignored with -q
ok 110 - non-existent file at top-level ignored with --quiet
ok 111 - non-existent file at top-level ignored with -v
ok 112 - non-existent file at top-level ignored with -v -n
ok 113 - non-existent file at top-level ignored with -v --non-matching
ok 114 - non-existent file at top-level ignored with --verbose
ok 115 - non-existent file at top-level ignored with --verbose -n
ok 116 - non-existent file at top-level ignored with --verbose --non-matching
ok 117 - non-existent file at top-level ignored with --no-index
ok 118 - non-existent file at top-level ignored with --no-index -q
ok 119 - non-existent file at top-level ignored with --no-index --quiet
ok 120 - non-existent file at top-level ignored with --no-index -v
ok 121 - non-existent file at top-level ignored with --no-index -v -n
ok 122 - non-existent file at top-level ignored with --no-index -v --non-matching
ok 123 - non-existent file at top-level ignored with --no-index --verbose
ok 124 - non-existent file at top-level ignored with --no-index --verbose -n
ok 125 - non-existent file at top-level ignored with --no-index --verbose --non-matching
ok 126 - existing untracked file at top-level not ignored
ok 127 - existing untracked file at top-level not ignored with -q
ok 128 - existing untracked file at top-level not ignored with --quiet
ok 129 - existing untracked file at top-level not ignored with -v
ok 130 - existing untracked file at top-level not ignored with -v -n
ok 131 - existing untracked file at top-level not ignored with -v --non-matching
ok 132 - existing untracked file at top-level not ignored with --verbose
ok 133 - existing untracked file at top-level not ignored with --verbose -n
ok 134 - existing untracked file at top-level not ignored with --verbose --non-matching
ok 135 - existing untracked file at top-level not ignored with --no-index
ok 136 - existing untracked file at top-level not ignored with --no-index -q
ok 137 - existing untracked file at top-level not ignored with --no-index --quiet
ok 138 - existing untracked file at top-level not ignored with --no-index -v
ok 139 - existing untracked file at top-level not ignored with --no-index -v -n
ok 140 - existing untracked file at top-level not ignored with --no-index -v --non-matching
ok 141 - existing untracked file at top-level not ignored with --no-index --verbose
ok 142 - existing untracked file at top-level not ignored with --no-index --verbose -n
ok 143 - existing untracked file at top-level not ignored with --no-index --verbose --non-matching
ok 144 - existing tracked file at top-level not ignored
ok 145 - existing tracked file at top-level not ignored with -q
ok 146 - existing tracked file at top-level not ignored with --quiet
ok 147 - existing tracked file at top-level not ignored with -v
ok 148 - existing tracked file at top-level not ignored with -v -n
ok 149 - existing tracked file at top-level not ignored with -v --non-matching
ok 150 - existing tracked file at top-level not ignored with --verbose
ok 151 - existing tracked file at top-level not ignored with --verbose -n
ok 152 - existing tracked file at top-level not ignored with --verbose --non-matching
ok 153 - existing tracked file at top-level shown as ignored with --no-index
ok 154 - existing tracked file at top-level shown as ignored with --no-index -q
ok 155 - existing tracked file at top-level shown as ignored with --no-index --quiet
ok 156 - existing tracked file at top-level shown as ignored with --no-index -v
ok 157 - existing tracked file at top-level shown as ignored with --no-index -v -n
ok 158 - existing tracked file at top-level shown as ignored with --no-index -v --non-matching
ok 159 - existing tracked file at top-level shown as ignored with --no-index --verbose
ok 160 - existing tracked file at top-level shown as ignored with --no-index --verbose -n
ok 161 - existing tracked file at top-level shown as ignored with --no-index --verbose --non-matching
ok 162 - existing untracked file at top-level ignored
ok 163 - existing untracked file at top-level ignored with -q
ok 164 - existing untracked file at top-level ignored with --quiet
ok 165 - existing untracked file at top-level ignored with -v
ok 166 - existing untracked file at top-level ignored with -v -n
ok 167 - existing untracked file at top-level ignored with -v --non-matching
ok 168 - existing untracked file at top-level ignored with --verbose
ok 169 - existing untracked file at top-level ignored with --verbose -n
ok 170 - existing untracked file at top-level ignored with --verbose --non-matching
ok 171 - existing untracked file at top-level ignored with --no-index
ok 172 - existing untracked file at top-level ignored with --no-index -q
ok 173 - existing untracked file at top-level ignored with --no-index --quiet
ok 174 - existing untracked file at top-level ignored with --no-index -v
ok 175 - existing untracked file at top-level ignored with --no-index -v -n
ok 176 - existing untracked file at top-level ignored with --no-index -v --non-matching
ok 177 - existing untracked file at top-level ignored with --no-index --verbose
ok 178 - existing untracked file at top-level ignored with --no-index --verbose -n
ok 179 - existing untracked file at top-level ignored with --no-index --verbose --non-matching
ok 180 - mix of file types at top-level
ok 181 - mix of file types at top-level with -v
ok 182 - mix of file types at top-level with -v -n
ok 183 - mix of file types at top-level with -v --non-matching
ok 184 - mix of file types at top-level with --verbose
ok 185 - mix of file types at top-level with --verbose -n
ok 186 - mix of file types at top-level with --verbose --non-matching
ok 187 - mix of file types at top-level with --no-index
ok 188 - mix of file types at top-level with --no-index -v
ok 189 - mix of file types at top-level with --no-index -v -n
ok 190 - mix of file types at top-level with --no-index -v --non-matching
ok 191 - mix of file types at top-level with --no-index --verbose
ok 192 - mix of file types at top-level with --no-index --verbose -n
ok 193 - mix of file types at top-level with --no-index --verbose --non-matching
ok 194 - non-existent file in subdir a/ not ignored
ok 195 - non-existent file in subdir a/ not ignored with -q
ok 196 - non-existent file in subdir a/ not ignored with --quiet
ok 197 - non-existent file in subdir a/ not ignored with -v
ok 198 - non-existent file in subdir a/ not ignored with -v -n
ok 199 - non-existent file in subdir a/ not ignored with -v --non-matching
ok 200 - non-existent file in subdir a/ not ignored with --verbose
ok 201 - non-existent file in subdir a/ not ignored with --verbose -n
ok 202 - non-existent file in subdir a/ not ignored with --verbose --non-matching
ok 203 - non-existent file in subdir a/ not ignored with --no-index
ok 204 - non-existent file in subdir a/ not ignored with --no-index -q
ok 205 - non-existent file in subdir a/ not ignored with --no-index --quiet
ok 206 - non-existent file in subdir a/ not ignored with --no-index -v
ok 207 - non-existent file in subdir a/ not ignored with --no-index -v -n
ok 208 - non-existent file in subdir a/ not ignored with --no-index -v --non-matching
ok 209 - non-existent file in subdir a/ not ignored with --no-index --verbose
ok 210 - non-existent file in subdir a/ not ignored with --no-index --verbose -n
ok 211 - non-existent file in subdir a/ not ignored with --no-index --verbose --non-matching
ok 212 - non-existent file in subdir a/ ignored
ok 213 - non-existent file in subdir a/ ignored with -q
ok 214 - non-existent file in subdir a/ ignored with --quiet
ok 215 - non-existent file in subdir a/ ignored with -v
ok 216 - non-existent file in subdir a/ ignored with -v -n
ok 217 - non-existent file in subdir a/ ignored with -v --non-matching
ok 218 - non-existent file in subdir a/ ignored with --verbose
ok 219 - non-existent file in subdir a/ ignored with --verbose -n
ok 220 - non-existent file in subdir a/ ignored with --verbose --non-matching
ok 221 - non-existent file in subdir a/ ignored with --no-index
ok 222 - non-existent file in subdir a/ ignored with --no-index -q
ok 223 - non-existent file in subdir a/ ignored with --no-index --quiet
ok 224 - non-existent file in subdir a/ ignored with --no-index -v
ok 225 - non-existent file in subdir a/ ignored with --no-index -v -n
ok 226 - non-existent file in subdir a/ ignored with --no-index -v --non-matching
ok 227 - non-existent file in subdir a/ ignored with --no-index --verbose
ok 228 - non-existent file in subdir a/ ignored with --no-index --verbose -n
ok 229 - non-existent file in subdir a/ ignored with --no-index --verbose --non-matching
ok 230 - existing untracked file in subdir a/ not ignored
ok 231 - existing untracked file in subdir a/ not ignored with -q
ok 232 - existing untracked file in subdir a/ not ignored with --quiet
ok 233 - existing untracked file in subdir a/ not ignored with -v
ok 234 - existing untracked file in subdir a/ not ignored with -v -n
ok 235 - existing untracked file in subdir a/ not ignored with -v --non-matching
ok 236 - existing untracked file in subdir a/ not ignored with --verbose
ok 237 - existing untracked file in subdir a/ not ignored with --verbose -n
ok 238 - existing untracked file in subdir a/ not ignored with --verbose --non-matching
ok 239 - existing untracked file in subdir a/ not ignored with --no-index
ok 240 - existing untracked file in subdir a/ not ignored with --no-index -q
ok 241 - existing untracked file in subdir a/ not ignored with --no-index --quiet
ok 242 - existing untracked file in subdir a/ not ignored with --no-index -v
ok 243 - existing untracked file in subdir a/ not ignored with --no-index -v -n
ok 244 - existing untracked file in subdir a/ not ignored with --no-index -v --non-matching
ok 245 - existing untracked file in subdir a/ not ignored with --no-index --verbose
ok 246 - existing untracked file in subdir a/ not ignored with --no-index --verbose -n
ok 247 - existing untracked file in subdir a/ not ignored with --no-index --verbose --non-matching
ok 248 - existing tracked file in subdir a/ not ignored
ok 249 - existing tracked file in subdir a/ not ignored with -q
ok 250 - existing tracked file in subdir a/ not ignored with --quiet
ok 251 - existing tracked file in subdir a/ not ignored with -v
ok 252 - existing tracked file in subdir a/ not ignored with -v -n
ok 253 - existing tracked file in subdir a/ not ignored with -v --non-matching
ok 254 - existing tracked file in subdir a/ not ignored with --verbose
ok 255 - existing tracked file in subdir a/ not ignored with --verbose -n
ok 256 - existing tracked file in subdir a/ not ignored with --verbose --non-matching
ok 257 - existing tracked file in subdir a/ shown as ignored with --no-index
ok 258 - existing tracked file in subdir a/ shown as ignored with --no-index -q
ok 259 - existing tracked file in subdir a/ shown as ignored with --no-index --quiet
ok 260 - existing tracked file in subdir a/ shown as ignored with --no-index -v
ok 261 - existing tracked file in subdir a/ shown as ignored with --no-index -v -n
ok 262 - existing tracked file in subdir a/ shown as ignored with --no-index -v --non-matching
ok 263 - existing tracked file in subdir a/ shown as ignored with --no-index --verbose
ok 264 - existing tracked file in subdir a/ shown as ignored with --no-index --verbose -n
ok 265 - existing tracked file in subdir a/ shown as ignored with --no-index --verbose --non-matching
ok 266 - existing untracked file in subdir a/ ignored
ok 267 - existing untracked file in subdir a/ ignored with -q
ok 268 - existing untracked file in subdir a/ ignored with --quiet
ok 269 - existing untracked file in subdir a/ ignored with -v
ok 270 - existing untracked file in subdir a/ ignored with -v -n
ok 271 - existing untracked file in subdir a/ ignored with -v --non-matching
ok 272 - existing untracked file in subdir a/ ignored with --verbose
ok 273 - existing untracked file in subdir a/ ignored with --verbose -n
ok 274 - existing untracked file in subdir a/ ignored with --verbose --non-matching
ok 275 - existing untracked file in subdir a/ ignored with --no-index
ok 276 - existing untracked file in subdir a/ ignored with --no-index -q
ok 277 - existing untracked file in subdir a/ ignored with --no-index --quiet
ok 278 - existing untracked file in subdir a/ ignored with --no-index -v
ok 279 - existing untracked file in subdir a/ ignored with --no-index -v -n
ok 280 - existing untracked file in subdir a/ ignored with --no-index -v --non-matching
ok 281 - existing untracked file in subdir a/ ignored with --no-index --verbose
ok 282 - existing untracked file in subdir a/ ignored with --no-index --verbose -n
ok 283 - existing untracked file in subdir a/ ignored with --no-index --verbose --non-matching
ok 284 - mix of file types in subdir a/
ok 285 - mix of file types in subdir a/ with -v
ok 286 - mix of file types in subdir a/ with -v -n
ok 287 - mix of file types in subdir a/ with -v --non-matching
ok 288 - mix of file types in subdir a/ with --verbose
ok 289 - mix of file types in subdir a/ with --verbose -n
ok 290 - mix of file types in subdir a/ with --verbose --non-matching
ok 291 - mix of file types in subdir a/ with --no-index
ok 292 - mix of file types in subdir a/ with --no-index -v
ok 293 - mix of file types in subdir a/ with --no-index -v -n
ok 294 - mix of file types in subdir a/ with --no-index -v --non-matching
ok 295 - mix of file types in subdir a/ with --no-index --verbose
ok 296 - mix of file types in subdir a/ with --no-index --verbose -n
ok 297 - mix of file types in subdir a/ with --no-index --verbose --non-matching
ok 298 - sub-directory local ignore
ok 299 - sub-directory local ignore with --verbose
ok 300 - local ignore inside a sub-directory
ok 301 - local ignore inside a sub-directory with --verbose
ok 302 - nested include of negated pattern
ok 303 - nested include of negated pattern with -q
ok 304 - nested include of negated pattern with -v
ok 305 - nested include of negated pattern with -v -n
ok 306 - ignored sub-directory
ok 307 - ignored sub-directory with -q
ok 308 - ignored sub-directory with --quiet
ok 309 - ignored sub-directory with -v
ok 310 - ignored sub-directory with -v -n
ok 311 - ignored sub-directory with -v --non-matching
ok 312 - ignored sub-directory with --verbose
ok 313 - ignored sub-directory with --verbose -n
ok 314 - ignored sub-directory with --verbose --non-matching
ok 315 - multiple files inside ignored sub-directory
ok 316 - multiple files inside ignored sub-directory with -v
ok 317 - cd to ignored sub-directory
ok 318 - cd to ignored sub-directory with -v
ok 319 - symlink
ok 320 - symlink with -q
ok 321 - symlink with --quiet
ok 322 - symlink with -v
ok 323 - symlink with -v -n
ok 324 - symlink with -v --non-matching
ok 325 - symlink with --verbose
ok 326 - symlink with --verbose -n
ok 327 - symlink with --verbose --non-matching
ok 328 - beyond a symlink
ok 329 - beyond a symlink with -q
ok 330 - beyond a symlink with --quiet
ok 331 - beyond a symlink with -v
ok 332 - beyond a symlink with -v -n
ok 333 - beyond a symlink with -v --non-matching
ok 334 - beyond a symlink with --verbose
ok 335 - beyond a symlink with --verbose -n
ok 336 - beyond a symlink with --verbose --non-matching
ok 337 - beyond a symlink from subdirectory
ok 338 - beyond a symlink from subdirectory with -q
ok 339 - beyond a symlink from subdirectory with --quiet
ok 340 - beyond a symlink from subdirectory with -v
ok 341 - beyond a symlink from subdirectory with -v -n
ok 342 - beyond a symlink from subdirectory with -v --non-matching
ok 343 - beyond a symlink from subdirectory with --verbose
ok 344 - beyond a symlink from subdirectory with --verbose -n
ok 345 - beyond a symlink from subdirectory with --verbose --non-matching
ok 346 - submodule
ok 347 - submodule with -q
ok 348 - submodule with --quiet
ok 349 - submodule with -v
ok 350 - submodule with -v -n
ok 351 - submodule with -v --non-matching
ok 352 - submodule with --verbose
ok 353 - submodule with --verbose -n
ok 354 - submodule with --verbose --non-matching
ok 355 - submodule from subdirectory
ok 356 - submodule from subdirectory with -q
ok 357 - submodule from subdirectory with --quiet
ok 358 - submodule from subdirectory with -v
ok 359 - submodule from subdirectory with -v -n
ok 360 - submodule from subdirectory with -v --non-matching
ok 361 - submodule from subdirectory with --verbose
ok 362 - submodule from subdirectory with --verbose -n
ok 363 - submodule from subdirectory with --verbose --non-matching
ok 364 - global ignore not yet enabled
ok 365 - global ignore
ok 366 - global ignore with -v
ok 367 - --stdin
ok 368 - --stdin -q
ok 369 - --stdin -v
ok 370 - --stdin -z
ok 371 - --stdin -z -q
ok 372 - --stdin -z -v
ok 373 - -z --stdin
ok 374 - -z --stdin -q
ok 375 - -z --stdin -v
ok 376 - --stdin from subdirectory
ok 377 - --stdin from subdirectory with -v
ok 378 - --stdin from subdirectory with -v -n
ok 379 - --stdin -z from subdirectory
ok 380 - --stdin -z from subdirectory with -v
ok 381 - -z --stdin from subdirectory
ok 382 - -z --stdin from subdirectory with -v
ok 383 - streaming support for --stdin
ok 384 - existing file and directory
ok 385 - existing directory and file
ok 386 - exact prefix matching (with root)
ok 387 - exact prefix matching (without root)
ok 388 - directories and ** matches
ok 389 - trailing whitespace is ignored
ok 390 - quoting allows trailing whitespace
ok 391 - correct handling of backslashes
ok 392 - info/exclude trumps core.excludesfile
ok 393 - set up ignore file for symlink tests
ok 394 - symlinks respected in core.excludesFile
ok 395 - symlinks respected in info/exclude
ok 396 - symlinks not respected in-tree
# passed all 396 test(s)
1..396
*** t0010-racy-git.sh ***
ok 1 - Racy git trial #0 part A
ok 2 - Racy git trial #0 part B
ok 3 - Racy git trial #1 part A
ok 4 - Racy git trial #1 part B
ok 5 - Racy git trial #2 part A
ok 6 - Racy git trial #2 part B
ok 7 - Racy git trial #3 part A
ok 8 - Racy git trial #3 part B
ok 9 - Racy git trial #4 part A
ok 10 - Racy git trial #4 part B
# passed all 10 test(s)
1..10
*** t0011-hashmap.sh ***
ok 1 - put
ok 2 - put (case insensitive)
ok 3 - replace
ok 4 - replace (case insensitive)
ok 5 - get
ok 6 - get (case insensitive)
ok 7 - add
ok 8 - add (case insensitive)
ok 9 - remove
ok 10 - remove (case insensitive)
ok 11 - iterate
ok 12 - iterate (case insensitive)
ok 13 - grow / shrink
ok 14 - string interning
# passed all 14 test(s)
1..14
*** t0012-help.sh ***
ok 1 - setup
ok 2 - basic help commands
ok 3 - invalid usage
ok 4 - invalid usage of '-a' with [-i|-m|-w]
ok 5 - invalid usage of '-g' with [-i|-m|-w]
ok 6 - invalid usage of '-g' with --no-external-commands
ok 7 - invalid usage of '-g' with --no-aliases
ok 8 - invalid usage of '-c' with [-i|-m|-w]
ok 9 - invalid usage of '-c' with --no-external-commands
ok 10 - invalid usage of '-c' with --no-aliases
ok 11 - invalid usage of '--config-for-completion' with [-i|-m|-w]
ok 12 - invalid usage of '--config-for-completion' with --no-external-commands
ok 13 - invalid usage of '--config-for-completion' with --no-aliases
ok 14 - invalid usage of '--config-sections-for-completion' with [-i|-m|-w]
ok 15 - invalid usage of '--config-sections-for-completion' with --no-external-commands
ok 16 - invalid usage of '--config-sections-for-completion' with --no-aliases
ok 17 - works for commands and guides by default
ok 18 - --exclude-guides does not work for guides
ok 19 - --help does not work for guides
ok 20 - git help
ok 21 - git help -g
ok 22 - git help fails for non-existing html pages
ok 23 - git help succeeds without git.html
ok 24 - git help --user-interfaces
ok 25 - git help -c
ok 26 - git help --config-for-completion
ok 27 - git help --config-sections-for-completion
ok 28 - 'git' section spacing
ok 29 - 'git help' section spacing
ok 30 - 'git help -a' section spacing
ok 31 - 'git help -g' section spacing
ok 32 - generate builtin list
ok 33 - add can handle -h
ok 34 - am can handle -h
ok 35 - annotate can handle -h
ok 36 - apply can handle -h
ok 37 - archive can handle -h
ok 38 - bisect can handle -h
ok 39 - blame can handle -h
ok 40 - branch can handle -h
ok 41 - bugreport can handle -h
ok 42 - bundle can handle -h
ok 43 - cat-file can handle -h
ok 44 - check-attr can handle -h
ok 45 - check-ignore can handle -h
ok 46 - check-mailmap can handle -h
ok 47 - check-ref-format can handle -h
ok 48 - checkout can handle -h
ok 49 - checkout--worker can handle -h
ok 50 - checkout-index can handle -h
ok 51 - cherry can handle -h
ok 52 - cherry-pick can handle -h
ok 53 - clean can handle -h
ok 54 - clone can handle -h
ok 55 - column can handle -h
ok 56 - commit can handle -h
ok 57 - commit-graph can handle -h
ok 58 - commit-tree can handle -h
ok 59 - config can handle -h
ok 60 - count-objects can handle -h
ok 61 - credential can handle -h
ok 62 - credential-cache can handle -h
ok 63 - credential-cache--daemon can handle -h
ok 64 - credential-store can handle -h
ok 65 - describe can handle -h
ok 66 - diagnose can handle -h
ok 67 - diff can handle -h
ok 68 - diff-files can handle -h
ok 69 - diff-index can handle -h
ok 70 - diff-tree can handle -h
ok 71 - difftool can handle -h
ok 72 - fast-export can handle -h
ok 73 - fast-import can handle -h
ok 74 - fetch can handle -h
ok 75 - fetch-pack can handle -h
ok 76 - fmt-merge-msg can handle -h
ok 77 - for-each-ref can handle -h
ok 78 - for-each-repo can handle -h
ok 79 - format-patch can handle -h
ok 80 - fsck can handle -h
ok 81 - fsck-objects can handle -h
ok 82 - fsmonitor--daemon can handle -h
ok 83 - gc can handle -h
ok 84 - get-tar-commit-id can handle -h
ok 85 - grep can handle -h
ok 86 - hash-object can handle -h
ok 87 - help can handle -h
ok 88 - hook can handle -h
ok 89 - index-pack can handle -h
ok 90 - init can handle -h
ok 91 - init-db can handle -h
ok 92 - interpret-trailers can handle -h
ok 93 - log can handle -h
ok 94 - ls-files can handle -h
ok 95 - ls-remote can handle -h
ok 96 - ls-tree can handle -h
ok 97 - mailinfo can handle -h
ok 98 - mailsplit can handle -h
ok 99 - maintenance can handle -h
ok 100 - merge can handle -h
ok 101 - merge-base can handle -h
ok 102 - merge-file can handle -h
ok 103 - merge-index can handle -h
ok 104 - merge-ours can handle -h
ok 105 - merge-recursive can handle -h
ok 106 - merge-recursive-ours can handle -h
ok 107 - merge-recursive-theirs can handle -h
ok 108 - merge-subtree can handle -h
ok 109 - merge-tree can handle -h
ok 110 - mktag can handle -h
ok 111 - mktree can handle -h
ok 112 - multi-pack-index can handle -h
ok 113 - mv can handle -h
ok 114 - name-rev can handle -h
ok 115 - notes can handle -h
ok 116 - pack-objects can handle -h
ok 117 - pack-redundant can handle -h
ok 118 - pack-refs can handle -h
ok 119 - patch-id can handle -h
ok 120 - pickaxe can handle -h
ok 121 - prune can handle -h
ok 122 - prune-packed can handle -h
ok 123 - pull can handle -h
ok 124 - push can handle -h
ok 125 - range-diff can handle -h
ok 126 - read-tree can handle -h
ok 127 - rebase can handle -h
ok 128 - receive-pack can handle -h
ok 129 - reflog can handle -h
ok 130 - remote can handle -h
ok 131 - remote-ext can handle -h
ok 132 - remote-fd can handle -h
ok 133 - repack can handle -h
ok 134 - replace can handle -h
ok 135 - replay can handle -h
ok 136 - rerere can handle -h
ok 137 - reset can handle -h
ok 138 - restore can handle -h
ok 139 - rev-list can handle -h
ok 140 - rev-parse can handle -h
ok 141 - revert can handle -h
ok 142 - rm can handle -h
ok 143 - send-pack can handle -h
ok 144 - shortlog can handle -h
ok 145 - show can handle -h
ok 146 - show-branch can handle -h
ok 147 - show-index can handle -h
ok 148 - show-ref can handle -h
ok 149 - sparse-checkout can handle -h
ok 150 - stage can handle -h
ok 151 - stash can handle -h
ok 152 - status can handle -h
ok 153 - stripspace can handle -h
ok 154 - submodule--helper can handle -h
ok 155 - switch can handle -h
ok 156 - symbolic-ref can handle -h
ok 157 - tag can handle -h
ok 158 - unpack-file can handle -h
ok 159 - unpack-objects can handle -h
ok 160 - update-index can handle -h
ok 161 - update-ref can handle -h
ok 162 - update-server-info can handle -h
ok 163 - upload-archive can handle -h
ok 164 - upload-archive--writer can handle -h
ok 165 - upload-pack can handle -h
ok 166 - var can handle -h
ok 167 - verify-commit can handle -h
ok 168 - verify-pack can handle -h
ok 169 - verify-tag can handle -h
ok 170 - version can handle -h
ok 171 - whatchanged can handle -h
ok 172 - worktree can handle -h
ok 173 - write-tree can handle -h
# passed all 173 test(s)
1..173
*** t0013-sha1dc.sh ***
ok 1 - test-sha1 detects shattered pdf
# passed all 1 test(s)
1..1
*** t0014-alias.sh ***
ok 1 - nested aliases - internal execution
ok 2 - nested aliases - mixed execution
ok 3 - looping aliases - internal execution
ok 4 - run-command formats empty args properly
# passed all 4 test(s)
1..4
*** t0015-hash.sh ***
ok 1 - test basic SHA-1 hash values
ok 2 - test basic SHA-256 hash values
# passed all 2 test(s)
1..2
*** t0016-oidmap.sh ***
ok 1 - setup
ok 2 - put
ok 3 - replace
ok 4 - get
ok 5 - remove
ok 6 - iterate
# passed all 6 test(s)
1..6
*** t0017-env-helper.sh ***
ok 1 - test-tool env-helper usage
ok 2 - test-tool env-helper bad default values
ok 3 - test-tool env-helper --type=bool
ok 4 - test-tool env-helper --type=ulong
ok 5 - test-tool env-helper reads config thanks to trace2
# passed all 5 test(s)
1..5
*** t0018-advice.sh ***
ok 1 - advice should be printed when config variable is unset
ok 2 - advice should be printed when config variable is set to true
ok 3 - advice should not be printed when config variable is set to false
# passed all 3 test(s)
1..3
*** t0019-json-writer.sh ***
ok 1 - unit test of json-writer routines
ok 2 - trivial object
ok 3 - trivial array
ok 4 - simple object
ok 5 - simple array
ok 6 - escape quoting string
ok 7 - escape quoting string 2
ok 8 - nested inline object
ok 9 - nested inline array
ok 10 - nested inline object and array
ok 11 - nested inline object and array 2
ok 12 - pretty nested inline object and array 2
ok 13 - inline object with no members
ok 14 - inline array with no members
ok 15 - larger empty example
ok 16 - parse JSON using Perl
# passed all 16 test(s)
1..16
*** t0020-crlf.sh ***
ok 1 - setup
ok 2 - safecrlf: autocrlf=input, all CRLF
ok 3 - safecrlf: autocrlf=input, mixed LF/CRLF
ok 4 - safecrlf: autocrlf=true, all LF
ok 5 - safecrlf: autocrlf=true mixed LF/CRLF
ok 6 - safecrlf: print warning only once
ok 7 - safecrlf: git diff demotes safecrlf=true to warn
ok 8 - safecrlf: no warning with safecrlf=false
ok 9 - switch off autocrlf, safecrlf, reset HEAD
ok 10 - update with autocrlf=input
ok 11 - update with autocrlf=true
ok 12 - checkout with autocrlf=true
ok 13 - checkout with autocrlf=input
ok 14 - apply patch (autocrlf=input)
ok 15 - apply patch --cached (autocrlf=input)
ok 16 - apply patch --index (autocrlf=input)
ok 17 - apply patch (autocrlf=true)
ok 18 - apply patch --cached (autocrlf=true)
ok 19 - apply patch --index (autocrlf=true)
ok 20 - .gitattributes says two is binary
ok 21 - .gitattributes says two is input
ok 22 - .gitattributes says two and three are text
ok 23 - in-tree .gitattributes (1)
ok 24 - in-tree .gitattributes (2)
ok 25 - in-tree .gitattributes (3)
ok 26 - in-tree .gitattributes (4)
ok 27 - checkout with existing .gitattributes
ok 28 - checkout when deleting .gitattributes
ok 29 - invalid .gitattributes (must not crash)
ok 30 - setting up for new autocrlf tests
ok 31 - report no change after setting autocrlf
ok 32 - files are clean after checkout
ok 33 - LF only file gets CRLF with autocrlf
ok 34 - Mixed file is still mixed with autocrlf
ok 35 - CRLF only file has CRLF with autocrlf
ok 36 - New CRLF file gets LF in repo
# passed all 36 test(s)
1..36
*** t0021-conversion.sh ***
ok 1 - setup
ok 2 - check
ok 3 - expanded_in_repo
ok 4 - filter shell-escaped filenames
ok 5 - required filter should filter data
ok 6 - required filter smudge failure
ok 7 - required filter clean failure
ok 8 - required filter with absent clean field
ok 9 - required filter with absent smudge field
ok 10 - filtering large input to small output should use little memory
ok 11 - filter that does not read is fine
ok 12 # skip filter large file (missing EXPENSIVE)
ok 13 - filter: clean empty file
ok 14 - filter: smudge empty file
ok 15 - disable filter with empty override
ok 16 - diff does not reuse worktree files that need cleaning
ok 17 - required process filter should filter data
ok 18 - required process filter should filter data for various subcommands
ok 19 - required process filter takes precedence
ok 20 - required process filter should be used only for "clean" operation only
ok 21 - required process filter should process multiple packets
ok 22 - required process filter with clean error should fail
ok 23 - process filter should restart after unexpected write failure
ok 24 - process filter should not be restarted if it signals an error
ok 25 - process filter abort stops processing of all further files
ok 26 - invalid process filter must fail (and not hang!)
ok 27 - delayed checkout in process filter
ok 28 - missing file in delayed checkout
ok 29 - invalid file in delayed checkout
ok 30 # skip delayed checkout with case-collision don't write to the wrong place (missing CASE_INSENSITIVE_FS of SYMLINKS,CASE_INSENSITIVE_FS)
ok 31 # skip delayed checkout with utf-8-collision don't write to the wrong place (missing UTF8_NFD_TO_NFC of SYMLINKS,UTF8_NFD_TO_NFC)
ok 32 # skip delayed checkout with submodule collision don't write to the wrong place (missing CASE_INSENSITIVE_FS of SYMLINKS,CASE_INSENSITIVE_FS)
ok 33 - setup for progress tests
ok 34 - delayed checkout shows progress by default on tty (pathspec checkout)
ok 35 - delayed checkout ommits progress on non-tty (pathspec checkout)
ok 36 - delayed checkout ommits progress with --quiet (pathspec checkout)
ok 37 - delayed checkout honors --[no]-progress (pathspec checkout)
ok 38 - delayed checkout shows progress by default on tty (branch checkout)
ok 39 - delayed checkout ommits progress on non-tty (branch checkout)
ok 40 - delayed checkout ommits progress with --quiet (branch checkout)
ok 41 - delayed checkout honors --[no]-progress (branch checkout)
ok 42 - delayed checkout correctly reports the number of updated entries
# passed all 42 test(s)
1..42
*** t0022-crlf-rename.sh ***
ok 1 - setup
ok 2 - diff -M
# passed all 2 test(s)
1..2
*** t0023-crlf-am.sh ***
ok 1 - setup
ok 2 - am
# passed all 2 test(s)
1..2
*** t0024-crlf-archive.sh ***
ok 1 - setup
ok 2 - tar archive
ok 3 - zip archive
# passed all 3 test(s)
1..3
*** t0025-crlf-renormalize.sh ***
ok 1 - setup
ok 2 - renormalize CRLF in repo
ok 3 - ignore-errors not mistaken for renormalize
# passed all 3 test(s)
1..3
*** t0026-eol-config.sh ***
ok 1 - setup
ok 2 - eol=lf puts LFs in normalized file
ok 3 - eol=crlf puts CRLFs in normalized file
ok 4 - autocrlf=true overrides eol=lf
ok 5 - autocrlf=true overrides unset eol
ok 6 # skip eol native is crlf (missing NATIVE_CRLF)
# passed all 6 test(s)
1..6
*** t0027-auto-crlf.sh ***
ok 1 - ls-files --eol -o Text/Binary
ok 2 - setup main
ok 3 - commit files empty attr
ok 4 - commit files attr=auto
ok 5 - commit files attr=text
ok 6 - commit files attr=-text
ok 7 - commit files attr=lf
ok 8 - commit files attr=crlf
ok 9 - setup commit file with mixed EOL
ok 10 - commit file with mixed EOL onto LF crlf=false attr=
ok 11 - commit file with mixed EOL onto CLRF attr= aeol= crlf=false
ok 12 - commit file with mixed EOL onto CRLF_mix_LF attr= aeol= crlf=false
ok 13 - commit file with mixed EOL onto LF_mix_cr attr= aeol= crlf=false 
ok 14 - commit file with mixed EOL onto CRLF_nul attr= aeol= crlf=false
ok 15 - setup commit file with mixed EOL
ok 16 - commit file with mixed EOL onto LF crlf=true attr=
ok 17 - commit file with mixed EOL onto CLRF attr= aeol= crlf=true
ok 18 - commit file with mixed EOL onto CRLF_mix_LF attr= aeol= crlf=true
ok 19 - commit file with mixed EOL onto LF_mix_cr attr= aeol= crlf=true 
ok 20 - commit file with mixed EOL onto CRLF_nul attr= aeol= crlf=true
ok 21 - setup commit file with mixed EOL
ok 22 - commit file with mixed EOL onto LF crlf=input attr=
ok 23 - commit file with mixed EOL onto CLRF attr= aeol= crlf=input
ok 24 - commit file with mixed EOL onto CRLF_mix_LF attr= aeol= crlf=input
ok 25 - commit file with mixed EOL onto LF_mix_cr attr= aeol= crlf=input 
ok 26 - commit file with mixed EOL onto CRLF_nul attr= aeol= crlf=input
ok 27 - setup commit file with mixed EOL
ok 28 - commit file with mixed EOL onto LF crlf=false attr=auto
ok 29 - commit file with mixed EOL onto CLRF attr=auto aeol= crlf=false
ok 30 - commit file with mixed EOL onto CRLF_mix_LF attr=auto aeol= crlf=false
ok 31 - commit file with mixed EOL onto LF_mix_cr attr=auto aeol= crlf=false 
ok 32 - commit file with mixed EOL onto CRLF_nul attr=auto aeol= crlf=false
ok 33 - setup commit file with mixed EOL
ok 34 - commit file with mixed EOL onto LF crlf=true attr=auto
ok 35 - commit file with mixed EOL onto CLRF attr=auto aeol= crlf=true
ok 36 - commit file with mixed EOL onto CRLF_mix_LF attr=auto aeol= crlf=true
ok 37 - commit file with mixed EOL onto LF_mix_cr attr=auto aeol= crlf=true 
ok 38 - commit file with mixed EOL onto CRLF_nul attr=auto aeol= crlf=true
ok 39 - setup commit file with mixed EOL
ok 40 - commit file with mixed EOL onto LF crlf=input attr=auto
ok 41 - commit file with mixed EOL onto CLRF attr=auto aeol= crlf=input
ok 42 - commit file with mixed EOL onto CRLF_mix_LF attr=auto aeol= crlf=input
ok 43 - commit file with mixed EOL onto LF_mix_cr attr=auto aeol= crlf=input 
ok 44 - commit file with mixed EOL onto CRLF_nul attr=auto aeol= crlf=input
ok 45 - setup commit NNO files
ok 46 - commit NNO files crlf=false attr= LF
ok 47 - commit NNO files attr= aeol= crlf=false CRLF
ok 48 - commit NNO files attr= aeol= crlf=false CRLF_mix_LF
ok 49 - commit NNO files attr= aeol= crlf=false LF_mix_cr
ok 50 - commit NNO files attr= aeol= crlf=false CRLF_nul
ok 51 - setup commit NNO files
ok 52 - commit NNO files crlf=true attr= LF
ok 53 - commit NNO files attr= aeol= crlf=true CRLF
ok 54 - commit NNO files attr= aeol= crlf=true CRLF_mix_LF
ok 55 - commit NNO files attr= aeol= crlf=true LF_mix_cr
ok 56 - commit NNO files attr= aeol= crlf=true CRLF_nul
ok 57 - setup commit NNO files
ok 58 - commit NNO files crlf=input attr= LF
ok 59 - commit NNO files attr= aeol= crlf=input CRLF
ok 60 - commit NNO files attr= aeol= crlf=input CRLF_mix_LF
ok 61 - commit NNO files attr= aeol= crlf=input LF_mix_cr
ok 62 - commit NNO files attr= aeol= crlf=input CRLF_nul
ok 63 - setup commit NNO files
ok 64 - commit NNO files crlf=false attr=auto LF
ok 65 - commit NNO files attr=auto aeol= crlf=false CRLF
ok 66 - commit NNO files attr=auto aeol= crlf=false CRLF_mix_LF
ok 67 - commit NNO files attr=auto aeol= crlf=false LF_mix_cr
ok 68 - commit NNO files attr=auto aeol= crlf=false CRLF_nul
ok 69 - setup commit NNO files
ok 70 - commit NNO files crlf=true attr=auto LF
ok 71 - commit NNO files attr=auto aeol= crlf=true CRLF
ok 72 - commit NNO files attr=auto aeol= crlf=true CRLF_mix_LF
ok 73 - commit NNO files attr=auto aeol= crlf=true LF_mix_cr
ok 74 - commit NNO files attr=auto aeol= crlf=true CRLF_nul
ok 75 - setup commit NNO files
ok 76 - commit NNO files crlf=input attr=auto LF
ok 77 - commit NNO files attr=auto aeol= crlf=input CRLF
ok 78 - commit NNO files attr=auto aeol= crlf=input CRLF_mix_LF
ok 79 - commit NNO files attr=auto aeol= crlf=input LF_mix_cr
ok 80 - commit NNO files attr=auto aeol= crlf=input CRLF_nul
ok 81 - setup commit NNO files
ok 82 - commit NNO files crlf=true attr=-text LF
ok 83 - commit NNO files attr=-text aeol= crlf=true CRLF
ok 84 - commit NNO files attr=-text aeol= crlf=true CRLF_mix_LF
ok 85 - commit NNO files attr=-text aeol= crlf=true LF_mix_cr
ok 86 - commit NNO files attr=-text aeol= crlf=true CRLF_nul
ok 87 - setup commit NNO files
ok 88 - commit NNO files crlf=true attr=-text LF
ok 89 - commit NNO files attr=-text aeol=lf crlf=true CRLF
ok 90 - commit NNO files attr=-text aeol=lf crlf=true CRLF_mix_LF
ok 91 - commit NNO files attr=-text aeol=lf crlf=true LF_mix_cr
ok 92 - commit NNO files attr=-text aeol=lf crlf=true CRLF_nul
ok 93 - setup commit NNO files
ok 94 - commit NNO files crlf=true attr=-text LF
ok 95 - commit NNO files attr=-text aeol=crlf crlf=true CRLF
ok 96 - commit NNO files attr=-text aeol=crlf crlf=true CRLF_mix_LF
ok 97 - commit NNO files attr=-text aeol=crlf crlf=true LF_mix_cr
ok 98 - commit NNO files attr=-text aeol=crlf crlf=true CRLF_nul
ok 99 - setup commit NNO files
ok 100 - commit NNO files crlf=true attr= LF
ok 101 - commit NNO files attr= aeol=lf crlf=true CRLF
ok 102 - commit NNO files attr= aeol=lf crlf=true CRLF_mix_LF
ok 103 - commit NNO files attr= aeol=lf crlf=true LF_mix_cr
ok 104 - commit NNO files attr= aeol=lf crlf=true CRLF_nul
ok 105 - setup commit NNO files
ok 106 - commit NNO files crlf=true attr= LF
ok 107 - commit NNO files attr= aeol=crlf crlf=true CRLF
ok 108 - commit NNO files attr= aeol=crlf crlf=true CRLF_mix_LF
ok 109 - commit NNO files attr= aeol=crlf crlf=true LF_mix_cr
ok 110 - commit NNO files attr= aeol=crlf crlf=true CRLF_nul
ok 111 - setup commit NNO files
ok 112 - commit NNO files crlf=true attr=auto LF
ok 113 - commit NNO files attr=auto aeol=lf crlf=true CRLF
ok 114 - commit NNO files attr=auto aeol=lf crlf=true CRLF_mix_LF
ok 115 - commit NNO files attr=auto aeol=lf crlf=true LF_mix_cr
ok 116 - commit NNO files attr=auto aeol=lf crlf=true CRLF_nul
ok 117 - setup commit NNO files
ok 118 - commit NNO files crlf=true attr=auto LF
ok 119 - commit NNO files attr=auto aeol=crlf crlf=true CRLF
ok 120 - commit NNO files attr=auto aeol=crlf crlf=true CRLF_mix_LF
ok 121 - commit NNO files attr=auto aeol=crlf crlf=true LF_mix_cr
ok 122 - commit NNO files attr=auto aeol=crlf crlf=true CRLF_nul
ok 123 - setup commit NNO files
ok 124 - commit NNO files crlf=true attr=text LF
ok 125 - commit NNO files attr=text aeol=lf crlf=true CRLF
ok 126 - commit NNO files attr=text aeol=lf crlf=true CRLF_mix_LF
ok 127 - commit NNO files attr=text aeol=lf crlf=true LF_mix_cr
ok 128 - commit NNO files attr=text aeol=lf crlf=true CRLF_nul
ok 129 - setup commit NNO files
ok 130 - commit NNO files crlf=true attr=text LF
ok 131 - commit NNO files attr=text aeol=crlf crlf=true CRLF
ok 132 - commit NNO files attr=text aeol=crlf crlf=true CRLF_mix_LF
ok 133 - commit NNO files attr=text aeol=crlf crlf=true LF_mix_cr
ok 134 - commit NNO files attr=text aeol=crlf crlf=true CRLF_nul
ok 135 - setup commit NNO files
ok 136 - commit NNO files crlf=false attr=-text LF
ok 137 - commit NNO files attr=-text aeol= crlf=false CRLF
ok 138 - commit NNO files attr=-text aeol= crlf=false CRLF_mix_LF
ok 139 - commit NNO files attr=-text aeol= crlf=false LF_mix_cr
ok 140 - commit NNO files attr=-text aeol= crlf=false CRLF_nul
ok 141 - setup commit NNO files
ok 142 - commit NNO files crlf=false attr=-text LF
ok 143 - commit NNO files attr=-text aeol=lf crlf=false CRLF
ok 144 - commit NNO files attr=-text aeol=lf crlf=false CRLF_mix_LF
ok 145 - commit NNO files attr=-text aeol=lf crlf=false LF_mix_cr
ok 146 - commit NNO files attr=-text aeol=lf crlf=false CRLF_nul
ok 147 - setup commit NNO files
ok 148 - commit NNO files crlf=false attr=-text LF
ok 149 - commit NNO files attr=-text aeol=crlf crlf=false CRLF
ok 150 - commit NNO files attr=-text aeol=crlf crlf=false CRLF_mix_LF
ok 151 - commit NNO files attr=-text aeol=crlf crlf=false LF_mix_cr
ok 152 - commit NNO files attr=-text aeol=crlf crlf=false CRLF_nul
ok 153 - setup commit NNO files
ok 154 - commit NNO files crlf=false attr= LF
ok 155 - commit NNO files attr= aeol=lf crlf=false CRLF
ok 156 - commit NNO files attr= aeol=lf crlf=false CRLF_mix_LF
ok 157 - commit NNO files attr= aeol=lf crlf=false LF_mix_cr
ok 158 - commit NNO files attr= aeol=lf crlf=false CRLF_nul
ok 159 - setup commit NNO files
ok 160 - commit NNO files crlf=false attr= LF
ok 161 - commit NNO files attr= aeol=crlf crlf=false CRLF
ok 162 - commit NNO files attr= aeol=crlf crlf=false CRLF_mix_LF
ok 163 - commit NNO files attr= aeol=crlf crlf=false LF_mix_cr
ok 164 - commit NNO files attr= aeol=crlf crlf=false CRLF_nul
ok 165 - setup commit NNO files
ok 166 - commit NNO files crlf=false attr=auto LF
ok 167 - commit NNO files attr=auto aeol=lf crlf=false CRLF
ok 168 - commit NNO files attr=auto aeol=lf crlf=false CRLF_mix_LF
ok 169 - commit NNO files attr=auto aeol=lf crlf=false LF_mix_cr
ok 170 - commit NNO files attr=auto aeol=lf crlf=false CRLF_nul
ok 171 - setup commit NNO files
ok 172 - commit NNO files crlf=false attr=auto LF
ok 173 - commit NNO files attr=auto aeol=crlf crlf=false CRLF
ok 174 - commit NNO files attr=auto aeol=crlf crlf=false CRLF_mix_LF
ok 175 - commit NNO files attr=auto aeol=crlf crlf=false LF_mix_cr
ok 176 - commit NNO files attr=auto aeol=crlf crlf=false CRLF_nul
ok 177 - setup commit NNO files
ok 178 - commit NNO files crlf=false attr=text LF
ok 179 - commit NNO files attr=text aeol=lf crlf=false CRLF
ok 180 - commit NNO files attr=text aeol=lf crlf=false CRLF_mix_LF
ok 181 - commit NNO files attr=text aeol=lf crlf=false LF_mix_cr
ok 182 - commit NNO files attr=text aeol=lf crlf=false CRLF_nul
ok 183 - setup commit NNO files
ok 184 - commit NNO files crlf=false attr=text LF
ok 185 - commit NNO files attr=text aeol=crlf crlf=false CRLF
ok 186 - commit NNO files attr=text aeol=crlf crlf=false CRLF_mix_LF
ok 187 - commit NNO files attr=text aeol=crlf crlf=false LF_mix_cr
ok 188 - commit NNO files attr=text aeol=crlf crlf=false CRLF_nul
ok 189 - setup commit NNO files
ok 190 - commit NNO files crlf=input attr=-text LF
ok 191 - commit NNO files attr=-text aeol= crlf=input CRLF
ok 192 - commit NNO files attr=-text aeol= crlf=input CRLF_mix_LF
ok 193 - commit NNO files attr=-text aeol= crlf=input LF_mix_cr
ok 194 - commit NNO files attr=-text aeol= crlf=input CRLF_nul
ok 195 - setup commit NNO files
ok 196 - commit NNO files crlf=input attr=-text LF
ok 197 - commit NNO files attr=-text aeol=lf crlf=input CRLF
ok 198 - commit NNO files attr=-text aeol=lf crlf=input CRLF_mix_LF
ok 199 - commit NNO files attr=-text aeol=lf crlf=input LF_mix_cr
ok 200 - commit NNO files attr=-text aeol=lf crlf=input CRLF_nul
ok 201 - setup commit NNO files
ok 202 - commit NNO files crlf=input attr=-text LF
ok 203 - commit NNO files attr=-text aeol=crlf crlf=input CRLF
ok 204 - commit NNO files attr=-text aeol=crlf crlf=input CRLF_mix_LF
ok 205 - commit NNO files attr=-text aeol=crlf crlf=input LF_mix_cr
ok 206 - commit NNO files attr=-text aeol=crlf crlf=input CRLF_nul
ok 207 - setup commit NNO files
ok 208 - commit NNO files crlf=input attr= LF
ok 209 - commit NNO files attr= aeol=lf crlf=input CRLF
ok 210 - commit NNO files attr= aeol=lf crlf=input CRLF_mix_LF
ok 211 - commit NNO files attr= aeol=lf crlf=input LF_mix_cr
ok 212 - commit NNO files attr= aeol=lf crlf=input CRLF_nul
ok 213 - setup commit NNO files
ok 214 - commit NNO files crlf=input attr= LF
ok 215 - commit NNO files attr= aeol=crlf crlf=input CRLF
ok 216 - commit NNO files attr= aeol=crlf crlf=input CRLF_mix_LF
ok 217 - commit NNO files attr= aeol=crlf crlf=input LF_mix_cr
ok 218 - commit NNO files attr= aeol=crlf crlf=input CRLF_nul
ok 219 - setup commit NNO files
ok 220 - commit NNO files crlf=input attr=auto LF
ok 221 - commit NNO files attr=auto aeol=lf crlf=input CRLF
ok 222 - commit NNO files attr=auto aeol=lf crlf=input CRLF_mix_LF
ok 223 - commit NNO files attr=auto aeol=lf crlf=input LF_mix_cr
ok 224 - commit NNO files attr=auto aeol=lf crlf=input CRLF_nul
ok 225 - setup commit NNO files
ok 226 - commit NNO files crlf=input attr=auto LF
ok 227 - commit NNO files attr=auto aeol=crlf crlf=input CRLF
ok 228 - commit NNO files attr=auto aeol=crlf crlf=input CRLF_mix_LF
ok 229 - commit NNO files attr=auto aeol=crlf crlf=input LF_mix_cr
ok 230 - commit NNO files attr=auto aeol=crlf crlf=input CRLF_nul
ok 231 - setup commit NNO files
ok 232 - commit NNO files crlf=input attr=text LF
ok 233 - commit NNO files attr=text aeol=lf crlf=input CRLF
ok 234 - commit NNO files attr=text aeol=lf crlf=input CRLF_mix_LF
ok 235 - commit NNO files attr=text aeol=lf crlf=input LF_mix_cr
ok 236 - commit NNO files attr=text aeol=lf crlf=input CRLF_nul
ok 237 - setup commit NNO files
ok 238 - commit NNO files crlf=input attr=text LF
ok 239 - commit NNO files attr=text aeol=crlf crlf=input CRLF
ok 240 - commit NNO files attr=text aeol=crlf crlf=input CRLF_mix_LF
ok 241 - commit NNO files attr=text aeol=crlf crlf=input LF_mix_cr
ok 242 - commit NNO files attr=text aeol=crlf crlf=input CRLF_nul
ok 243 - setup commit NNO files
ok 244 - commit NNO files crlf=false attr=text LF
ok 245 - commit NNO files attr=text aeol= crlf=false CRLF
ok 246 - commit NNO files attr=text aeol= crlf=false CRLF_mix_LF
ok 247 - commit NNO files attr=text aeol= crlf=false LF_mix_cr
ok 248 - commit NNO files attr=text aeol= crlf=false CRLF_nul
ok 249 - setup commit NNO files
ok 250 - commit NNO files crlf=true attr=text LF
ok 251 - commit NNO files attr=text aeol= crlf=true CRLF
ok 252 - commit NNO files attr=text aeol= crlf=true CRLF_mix_LF
ok 253 - commit NNO files attr=text aeol= crlf=true LF_mix_cr
ok 254 - commit NNO files attr=text aeol= crlf=true CRLF_nul
ok 255 - setup commit NNO files
ok 256 - commit NNO files crlf=input attr=text LF
ok 257 - commit NNO files attr=text aeol= crlf=input CRLF
ok 258 - commit NNO files attr=text aeol= crlf=input CRLF_mix_LF
ok 259 - commit NNO files attr=text aeol= crlf=input LF_mix_cr
ok 260 - commit NNO files attr=text aeol= crlf=input CRLF_nul
ok 261 - commit NNO and cleanup
ok 262 - commit empty gitattribues
ok 263 - commit text=auto
ok 264 - commit text
ok 265 - commit -text
ok 266 - compare_files LF NNO_attr__aeol__true_LF.txt
ok 267 - compare_files CRLF NNO_attr__aeol__true_CRLF.txt
ok 268 - compare_files CRLF_mix_LF NNO_attr__aeol__true_CRLF_mix_LF.txt
ok 269 - compare_files LF_mix_CR NNO_attr__aeol__true_LF_mix_CR.txt
ok 270 - compare_files CRLF_nul NNO_attr__aeol__true_CRLF_nul.txt
ok 271 - compare_files LF NNO_attr_-text_aeol__true_LF.txt
ok 272 - compare_files CRLF NNO_attr_-text_aeol__true_CRLF.txt
ok 273 - compare_files CRLF_mix_LF NNO_attr_-text_aeol__true_CRLF_mix_LF.txt
ok 274 - compare_files LF_mix_CR NNO_attr_-text_aeol__true_LF_mix_CR.txt
ok 275 - compare_files CRLF_nul NNO_attr_-text_aeol__true_CRLF_nul.txt
ok 276 - compare_files LF NNO_attr_-text_aeol_lf_true_LF.txt
ok 277 - compare_files CRLF NNO_attr_-text_aeol_lf_true_CRLF.txt
ok 278 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_lf_true_CRLF_mix_LF.txt
ok 279 - compare_files LF_mix_CR NNO_attr_-text_aeol_lf_true_LF_mix_CR.txt
ok 280 - compare_files CRLF_nul NNO_attr_-text_aeol_lf_true_CRLF_nul.txt
ok 281 - compare_files LF NNO_attr_-text_aeol_crlf_true_LF.txt
ok 282 - compare_files CRLF NNO_attr_-text_aeol_crlf_true_CRLF.txt
ok 283 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_crlf_true_CRLF_mix_LF.txt
ok 284 - compare_files LF_mix_CR NNO_attr_-text_aeol_crlf_true_LF_mix_CR.txt
ok 285 - compare_files CRLF_nul NNO_attr_-text_aeol_crlf_true_CRLF_nul.txt
ok 286 - compare_files LF NNO_attr_auto_aeol__true_LF.txt
ok 287 - compare_files CRLF NNO_attr_auto_aeol__true_CRLF.txt
ok 288 - compare_files CRLF_mix_LF NNO_attr_auto_aeol__true_CRLF_mix_LF.txt
ok 289 - compare_files LF_mix_CR NNO_attr_auto_aeol__true_LF_mix_CR.txt
ok 290 - compare_files CRLF_nul NNO_attr_auto_aeol__true_CRLF_nul.txt
ok 291 - compare_files LF NNO_attr_auto_aeol_lf_true_LF.txt
ok 292 - compare_files CRLF NNO_attr_auto_aeol_lf_true_CRLF.txt
ok 293 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_lf_true_CRLF_mix_LF.txt
ok 294 - compare_files LF_mix_CR NNO_attr_auto_aeol_lf_true_LF_mix_CR.txt
ok 295 - compare_files CRLF_nul NNO_attr_auto_aeol_lf_true_CRLF_nul.txt
ok 296 - compare_files LF NNO_attr_auto_aeol_crlf_true_LF.txt
ok 297 - compare_files CRLF NNO_attr_auto_aeol_crlf_true_CRLF.txt
ok 298 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_crlf_true_CRLF_mix_LF.txt
ok 299 - compare_files LF_mix_CR NNO_attr_auto_aeol_crlf_true_LF_mix_CR.txt
ok 300 - compare_files CRLF_nul NNO_attr_auto_aeol_crlf_true_CRLF_nul.txt
ok 301 - compare_files LF NNO_attr_text_aeol__true_LF.txt
ok 302 - compare_files LF NNO_attr_text_aeol__true_CRLF.txt
ok 303 - compare_files LF NNO_attr_text_aeol__true_CRLF_mix_LF.txt
ok 304 - compare_files LF_mix_CR NNO_attr_text_aeol__true_LF_mix_CR.txt
ok 305 - compare_files LF_nul NNO_attr_text_aeol__true_CRLF_nul.txt
ok 306 - compare_files LF NNO_attr_text_aeol_lf_true_LF.txt
ok 307 - compare_files LF NNO_attr_text_aeol_lf_true_CRLF.txt
ok 308 - compare_files LF NNO_attr_text_aeol_lf_true_CRLF_mix_LF.txt
ok 309 - compare_files LF_mix_CR NNO_attr_text_aeol_lf_true_LF_mix_CR.txt
ok 310 - compare_files LF_nul NNO_attr_text_aeol_lf_true_CRLF_nul.txt
ok 311 - compare_files LF NNO_attr_text_aeol_crlf_true_LF.txt
ok 312 - compare_files LF NNO_attr_text_aeol_crlf_true_CRLF.txt
ok 313 - compare_files LF NNO_attr_text_aeol_crlf_true_CRLF_mix_LF.txt
ok 314 - compare_files LF_mix_CR NNO_attr_text_aeol_crlf_true_LF_mix_CR.txt
ok 315 - compare_files LF_nul NNO_attr_text_aeol_crlf_true_CRLF_nul.txt
ok 316 - compare_files LF NNO_attr__aeol__false_LF.txt
ok 317 - compare_files CRLF NNO_attr__aeol__false_CRLF.txt
ok 318 - compare_files CRLF_mix_LF NNO_attr__aeol__false_CRLF_mix_LF.txt
ok 319 - compare_files LF_mix_CR NNO_attr__aeol__false_LF_mix_CR.txt
ok 320 - compare_files CRLF_nul NNO_attr__aeol__false_CRLF_nul.txt
ok 321 - compare_files LF NNO_attr_-text_aeol__false_LF.txt
ok 322 - compare_files CRLF NNO_attr_-text_aeol__false_CRLF.txt
ok 323 - compare_files CRLF_mix_LF NNO_attr_-text_aeol__false_CRLF_mix_LF.txt
ok 324 - compare_files LF_mix_CR NNO_attr_-text_aeol__false_LF_mix_CR.txt
ok 325 - compare_files CRLF_nul NNO_attr_-text_aeol__false_CRLF_nul.txt
ok 326 - compare_files LF NNO_attr_-text_aeol_lf_false_LF.txt
ok 327 - compare_files CRLF NNO_attr_-text_aeol_lf_false_CRLF.txt
ok 328 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_lf_false_CRLF_mix_LF.txt
ok 329 - compare_files LF_mix_CR NNO_attr_-text_aeol_lf_false_LF_mix_CR.txt
ok 330 - compare_files CRLF_nul NNO_attr_-text_aeol_lf_false_CRLF_nul.txt
ok 331 - compare_files LF NNO_attr_-text_aeol_crlf_false_LF.txt
ok 332 - compare_files CRLF NNO_attr_-text_aeol_crlf_false_CRLF.txt
ok 333 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_crlf_false_CRLF_mix_LF.txt
ok 334 - compare_files LF_mix_CR NNO_attr_-text_aeol_crlf_false_LF_mix_CR.txt
ok 335 - compare_files CRLF_nul NNO_attr_-text_aeol_crlf_false_CRLF_nul.txt
ok 336 - compare_files LF NNO_attr_auto_aeol__false_LF.txt
ok 337 - compare_files CRLF NNO_attr_auto_aeol__false_CRLF.txt
ok 338 - compare_files CRLF_mix_LF NNO_attr_auto_aeol__false_CRLF_mix_LF.txt
ok 339 - compare_files LF_mix_CR NNO_attr_auto_aeol__false_LF_mix_CR.txt
ok 340 - compare_files CRLF_nul NNO_attr_auto_aeol__false_CRLF_nul.txt
ok 341 - compare_files LF NNO_attr_auto_aeol_lf_false_LF.txt
ok 342 - compare_files CRLF NNO_attr_auto_aeol_lf_false_CRLF.txt
ok 343 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_lf_false_CRLF_mix_LF.txt
ok 344 - compare_files LF_mix_CR NNO_attr_auto_aeol_lf_false_LF_mix_CR.txt
ok 345 - compare_files CRLF_nul NNO_attr_auto_aeol_lf_false_CRLF_nul.txt
ok 346 - compare_files LF NNO_attr_auto_aeol_crlf_false_LF.txt
ok 347 - compare_files CRLF NNO_attr_auto_aeol_crlf_false_CRLF.txt
ok 348 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_crlf_false_CRLF_mix_LF.txt
ok 349 - compare_files LF_mix_CR NNO_attr_auto_aeol_crlf_false_LF_mix_CR.txt
ok 350 - compare_files CRLF_nul NNO_attr_auto_aeol_crlf_false_CRLF_nul.txt
ok 351 - compare_files LF NNO_attr_text_aeol__false_LF.txt
ok 352 - compare_files LF NNO_attr_text_aeol__false_CRLF.txt
ok 353 - compare_files LF NNO_attr_text_aeol__false_CRLF_mix_LF.txt
ok 354 - compare_files LF_mix_CR NNO_attr_text_aeol__false_LF_mix_CR.txt
ok 355 - compare_files LF_nul NNO_attr_text_aeol__false_CRLF_nul.txt
ok 356 - compare_files LF NNO_attr_text_aeol_lf_false_LF.txt
ok 357 - compare_files LF NNO_attr_text_aeol_lf_false_CRLF.txt
ok 358 - compare_files LF NNO_attr_text_aeol_lf_false_CRLF_mix_LF.txt
ok 359 - compare_files LF_mix_CR NNO_attr_text_aeol_lf_false_LF_mix_CR.txt
ok 360 - compare_files LF_nul NNO_attr_text_aeol_lf_false_CRLF_nul.txt
ok 361 - compare_files LF NNO_attr_text_aeol_crlf_false_LF.txt
ok 362 - compare_files LF NNO_attr_text_aeol_crlf_false_CRLF.txt
ok 363 - compare_files LF NNO_attr_text_aeol_crlf_false_CRLF_mix_LF.txt
ok 364 - compare_files LF_mix_CR NNO_attr_text_aeol_crlf_false_LF_mix_CR.txt
ok 365 - compare_files LF_nul NNO_attr_text_aeol_crlf_false_CRLF_nul.txt
ok 366 - compare_files LF NNO_attr__aeol__input_LF.txt
ok 367 - compare_files CRLF NNO_attr__aeol__input_CRLF.txt
ok 368 - compare_files CRLF_mix_LF NNO_attr__aeol__input_CRLF_mix_LF.txt
ok 369 - compare_files LF_mix_CR NNO_attr__aeol__input_LF_mix_CR.txt
ok 370 - compare_files CRLF_nul NNO_attr__aeol__input_CRLF_nul.txt
ok 371 - compare_files LF NNO_attr_-text_aeol__input_LF.txt
ok 372 - compare_files CRLF NNO_attr_-text_aeol__input_CRLF.txt
ok 373 - compare_files CRLF_mix_LF NNO_attr_-text_aeol__input_CRLF_mix_LF.txt
ok 374 - compare_files LF_mix_CR NNO_attr_-text_aeol__input_LF_mix_CR.txt
ok 375 - compare_files CRLF_nul NNO_attr_-text_aeol__input_CRLF_nul.txt
ok 376 - compare_files LF NNO_attr_-text_aeol_lf_input_LF.txt
ok 377 - compare_files CRLF NNO_attr_-text_aeol_lf_input_CRLF.txt
ok 378 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_lf_input_CRLF_mix_LF.txt
ok 379 - compare_files LF_mix_CR NNO_attr_-text_aeol_lf_input_LF_mix_CR.txt
ok 380 - compare_files CRLF_nul NNO_attr_-text_aeol_lf_input_CRLF_nul.txt
ok 381 - compare_files LF NNO_attr_-text_aeol_crlf_input_LF.txt
ok 382 - compare_files CRLF NNO_attr_-text_aeol_crlf_input_CRLF.txt
ok 383 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_crlf_input_CRLF_mix_LF.txt
ok 384 - compare_files LF_mix_CR NNO_attr_-text_aeol_crlf_input_LF_mix_CR.txt
ok 385 - compare_files CRLF_nul NNO_attr_-text_aeol_crlf_input_CRLF_nul.txt
ok 386 - compare_files LF NNO_attr_auto_aeol__input_LF.txt
ok 387 - compare_files CRLF NNO_attr_auto_aeol__input_CRLF.txt
ok 388 - compare_files CRLF_mix_LF NNO_attr_auto_aeol__input_CRLF_mix_LF.txt
ok 389 - compare_files LF_mix_CR NNO_attr_auto_aeol__input_LF_mix_CR.txt
ok 390 - compare_files CRLF_nul NNO_attr_auto_aeol__input_CRLF_nul.txt
ok 391 - compare_files LF NNO_attr_auto_aeol_lf_input_LF.txt
ok 392 - compare_files CRLF NNO_attr_auto_aeol_lf_input_CRLF.txt
ok 393 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_lf_input_CRLF_mix_LF.txt
ok 394 - compare_files LF_mix_CR NNO_attr_auto_aeol_lf_input_LF_mix_CR.txt
ok 395 - compare_files CRLF_nul NNO_attr_auto_aeol_lf_input_CRLF_nul.txt
ok 396 - compare_files LF NNO_attr_auto_aeol_crlf_input_LF.txt
ok 397 - compare_files CRLF NNO_attr_auto_aeol_crlf_input_CRLF.txt
ok 398 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_crlf_input_CRLF_mix_LF.txt
ok 399 - compare_files LF_mix_CR NNO_attr_auto_aeol_crlf_input_LF_mix_CR.txt
ok 400 - compare_files CRLF_nul NNO_attr_auto_aeol_crlf_input_CRLF_nul.txt
ok 401 - compare_files LF NNO_attr_text_aeol__input_LF.txt
ok 402 - compare_files LF NNO_attr_text_aeol__input_CRLF.txt
ok 403 - compare_files LF NNO_attr_text_aeol__input_CRLF_mix_LF.txt
ok 404 - compare_files LF_mix_CR NNO_attr_text_aeol__input_LF_mix_CR.txt
ok 405 - compare_files LF_nul NNO_attr_text_aeol__input_CRLF_nul.txt
ok 406 - compare_files LF NNO_attr_text_aeol_lf_input_LF.txt
ok 407 - compare_files LF NNO_attr_text_aeol_lf_input_CRLF.txt
ok 408 - compare_files LF NNO_attr_text_aeol_lf_input_CRLF_mix_LF.txt
ok 409 - compare_files LF_mix_CR NNO_attr_text_aeol_lf_input_LF_mix_CR.txt
ok 410 - compare_files LF_nul NNO_attr_text_aeol_lf_input_CRLF_nul.txt
ok 411 - compare_files LF NNO_attr_text_aeol_crlf_input_LF.txt
ok 412 - compare_files LF NNO_attr_text_aeol_crlf_input_CRLF.txt
ok 413 - compare_files LF NNO_attr_text_aeol_crlf_input_CRLF_mix_LF.txt
ok 414 - compare_files LF_mix_CR NNO_attr_text_aeol_crlf_input_LF_mix_CR.txt
ok 415 - compare_files LF_nul NNO_attr_text_aeol_crlf_input_CRLF_nul.txt
ok 416 - setup config for checkout attr=-text ident= aeol= core.autocrlf=true
ok 417 - setup LF checkout  with -c core.eol=lf
ok 418 - setup CRLF checkout  with -c core.eol=lf
ok 419 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 420 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 421 - setup LF_nul checkout  with -c core.eol=lf
ok 422 - ls-files --eol attr=-text  aeol= core.autocrlf=true core.eol=lf
ok 423 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=LF
ok 424 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 425 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 426 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 427 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 428 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=true
ok 429 - setup LF checkout  with -c core.eol=lf
ok 430 - setup CRLF checkout  with -c core.eol=lf
ok 431 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 432 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 433 - setup LF_nul checkout  with -c core.eol=lf
ok 434 - ls-files --eol attr=-text  aeol=lf core.autocrlf=true core.eol=lf
ok 435 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 436 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 437 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 438 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 439 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 440 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=true
ok 441 - setup LF checkout  with -c core.eol=lf
ok 442 - setup CRLF checkout  with -c core.eol=lf
ok 443 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 444 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 445 - setup LF_nul checkout  with -c core.eol=lf
ok 446 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=true core.eol=lf
ok 447 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 448 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 449 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 450 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 451 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 452 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=true
ok 453 - setup LF checkout  with -c core.eol=lf
ok 454 - setup CRLF checkout  with -c core.eol=lf
ok 455 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 456 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 457 - setup LF_nul checkout  with -c core.eol=lf
ok 458 - ls-files --eol attr=text  aeol=lf core.autocrlf=true core.eol=lf
ok 459 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 460 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 461 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 462 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 463 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 464 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=true
ok 465 - setup LF checkout  with -c core.eol=lf
ok 466 - setup CRLF checkout  with -c core.eol=lf
ok 467 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 468 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 469 - setup LF_nul checkout  with -c core.eol=lf
ok 470 - ls-files --eol attr=text  aeol=crlf core.autocrlf=true core.eol=lf
ok 471 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 472 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 473 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 474 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 475 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 476 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=true
ok 477 - setup LF checkout  with -c core.eol=lf
ok 478 - setup CRLF checkout  with -c core.eol=lf
ok 479 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 480 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 481 - setup LF_nul checkout  with -c core.eol=lf
ok 482 - ls-files --eol attr=auto  aeol=lf core.autocrlf=true core.eol=lf
ok 483 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 484 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 485 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 486 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 487 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 488 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=true
ok 489 - setup LF checkout  with -c core.eol=lf
ok 490 - setup CRLF checkout  with -c core.eol=lf
ok 491 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 492 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 493 - setup LF_nul checkout  with -c core.eol=lf
ok 494 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=true core.eol=lf
ok 495 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 496 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 497 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 498 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 499 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 500 - setup config for checkout attr=-text ident= aeol= core.autocrlf=false
ok 501 - setup LF checkout  with -c core.eol=lf
ok 502 - setup CRLF checkout  with -c core.eol=lf
ok 503 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 504 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 505 - setup LF_nul checkout  with -c core.eol=lf
ok 506 - ls-files --eol attr=-text  aeol= core.autocrlf=false core.eol=lf
ok 507 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=LF
ok 508 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 509 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 510 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 511 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 512 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=false
ok 513 - setup LF checkout  with -c core.eol=lf
ok 514 - setup CRLF checkout  with -c core.eol=lf
ok 515 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 516 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 517 - setup LF_nul checkout  with -c core.eol=lf
ok 518 - ls-files --eol attr=-text  aeol=lf core.autocrlf=false core.eol=lf
ok 519 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 520 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 521 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 522 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 523 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 524 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=false
ok 525 - setup LF checkout  with -c core.eol=lf
ok 526 - setup CRLF checkout  with -c core.eol=lf
ok 527 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 528 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 529 - setup LF_nul checkout  with -c core.eol=lf
ok 530 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=false core.eol=lf
ok 531 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 532 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 533 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 534 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 535 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 536 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=false
ok 537 - setup LF checkout  with -c core.eol=lf
ok 538 - setup CRLF checkout  with -c core.eol=lf
ok 539 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 540 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 541 - setup LF_nul checkout  with -c core.eol=lf
ok 542 - ls-files --eol attr=text  aeol=lf core.autocrlf=false core.eol=lf
ok 543 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 544 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 545 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 546 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 547 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 548 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=false
ok 549 - setup LF checkout  with -c core.eol=lf
ok 550 - setup CRLF checkout  with -c core.eol=lf
ok 551 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 552 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 553 - setup LF_nul checkout  with -c core.eol=lf
ok 554 - ls-files --eol attr=text  aeol=crlf core.autocrlf=false core.eol=lf
ok 555 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 556 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 557 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 558 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 559 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 560 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=false
ok 561 - setup LF checkout  with -c core.eol=lf
ok 562 - setup CRLF checkout  with -c core.eol=lf
ok 563 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 564 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 565 - setup LF_nul checkout  with -c core.eol=lf
ok 566 - ls-files --eol attr=auto  aeol=lf core.autocrlf=false core.eol=lf
ok 567 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 568 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 569 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 570 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 571 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 572 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=false
ok 573 - setup LF checkout  with -c core.eol=lf
ok 574 - setup CRLF checkout  with -c core.eol=lf
ok 575 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 576 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 577 - setup LF_nul checkout  with -c core.eol=lf
ok 578 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=false core.eol=lf
ok 579 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 580 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 581 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 582 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 583 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 584 - setup config for checkout attr=-text ident= aeol= core.autocrlf=input
ok 585 - setup LF checkout  with -c core.eol=lf
ok 586 - setup CRLF checkout  with -c core.eol=lf
ok 587 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 588 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 589 - setup LF_nul checkout  with -c core.eol=lf
ok 590 - ls-files --eol attr=-text  aeol= core.autocrlf=input core.eol=lf
ok 591 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=LF
ok 592 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 593 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 594 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 595 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 596 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=input
ok 597 - setup LF checkout  with -c core.eol=lf
ok 598 - setup CRLF checkout  with -c core.eol=lf
ok 599 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 600 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 601 - setup LF_nul checkout  with -c core.eol=lf
ok 602 - ls-files --eol attr=-text  aeol=lf core.autocrlf=input core.eol=lf
ok 603 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 604 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 605 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 606 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 607 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 608 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=input
ok 609 - setup LF checkout  with -c core.eol=lf
ok 610 - setup CRLF checkout  with -c core.eol=lf
ok 611 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 612 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 613 - setup LF_nul checkout  with -c core.eol=lf
ok 614 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=input core.eol=lf
ok 615 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 616 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 617 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 618 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 619 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
ok 620 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=input
ok 621 - setup LF checkout  with -c core.eol=lf
ok 622 - setup CRLF checkout  with -c core.eol=lf
ok 623 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 624 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 625 - setup LF_nul checkout  with -c core.eol=lf
ok 626 - ls-files --eol attr=text  aeol=lf core.autocrlf=input core.eol=lf
ok 627 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 628 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 629 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 630 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 631 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 632 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=input
ok 633 - setup LF checkout  with -c core.eol=lf
ok 634 - setup CRLF checkout  with -c core.eol=lf
ok 635 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 636 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 637 - setup LF_nul checkout  with -c core.eol=lf
ok 638 - ls-files --eol attr=text  aeol=crlf core.autocrlf=input core.eol=lf
ok 639 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 640 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 641 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 642 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 643 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
ok 644 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=input
ok 645 - setup LF checkout  with -c core.eol=lf
ok 646 - setup CRLF checkout  with -c core.eol=lf
ok 647 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 648 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 649 - setup LF_nul checkout  with -c core.eol=lf
ok 650 - ls-files --eol attr=auto  aeol=lf core.autocrlf=input core.eol=lf
ok 651 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 652 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 653 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 654 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 655 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 656 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=input
ok 657 - setup LF checkout  with -c core.eol=lf
ok 658 - setup CRLF checkout  with -c core.eol=lf
ok 659 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 660 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 661 - setup LF_nul checkout  with -c core.eol=lf
ok 662 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=input core.eol=lf
ok 663 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 664 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 665 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 666 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 667 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
ok 668 - setup config for checkout attr= ident= aeol= core.autocrlf=false
ok 669 - setup LF checkout  with -c core.eol=lf
ok 670 - setup CRLF checkout  with -c core.eol=lf
ok 671 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 672 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 673 - setup LF_nul checkout  with -c core.eol=lf
ok 674 - ls-files --eol attr=  aeol= core.autocrlf=false core.eol=lf
ok 675 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=LF
ok 676 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 677 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 678 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 679 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 680 - setup config for checkout attr= ident= aeol= core.autocrlf=true
ok 681 - setup LF checkout  with -c core.eol=lf
ok 682 - setup CRLF checkout  with -c core.eol=lf
ok 683 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 684 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 685 - setup LF_nul checkout  with -c core.eol=lf
ok 686 - ls-files --eol attr=  aeol= core.autocrlf=true core.eol=lf
ok 687 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=LF
ok 688 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 689 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 690 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 691 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 692 - setup config for checkout attr=auto ident= aeol= core.autocrlf=true
ok 693 - setup LF checkout  with -c core.eol=lf
ok 694 - setup CRLF checkout  with -c core.eol=lf
ok 695 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 696 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 697 - setup LF_nul checkout  with -c core.eol=lf
ok 698 - ls-files --eol attr=auto  aeol= core.autocrlf=true core.eol=lf
ok 699 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=LF
ok 700 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 701 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 702 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 703 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 704 - setup config for checkout attr=text ident= aeol= core.autocrlf=true
ok 705 - setup LF checkout  with -c core.eol=lf
ok 706 - setup CRLF checkout  with -c core.eol=lf
ok 707 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 708 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 709 - setup LF_nul checkout  with -c core.eol=lf
ok 710 - ls-files --eol attr=text  aeol= core.autocrlf=true core.eol=lf
ok 711 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=LF
ok 712 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 713 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 714 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 715 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 716 - setup config for checkout attr=text ident= aeol= core.autocrlf=input
ok 717 - setup LF checkout  with -c core.eol=lf
ok 718 - setup CRLF checkout  with -c core.eol=lf
ok 719 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 720 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 721 - setup LF_nul checkout  with -c core.eol=lf
ok 722 - ls-files --eol attr=text  aeol= core.autocrlf=input core.eol=lf
ok 723 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=LF
ok 724 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 725 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 726 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 727 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 728 - setup config for checkout attr=auto ident= aeol= core.autocrlf=input
ok 729 - setup LF checkout  with -c core.eol=lf
ok 730 - setup CRLF checkout  with -c core.eol=lf
ok 731 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 732 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 733 - setup LF_nul checkout  with -c core.eol=lf
ok 734 - ls-files --eol attr=auto  aeol= core.autocrlf=input core.eol=lf
ok 735 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=LF
ok 736 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 737 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 738 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 739 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 740 - setup config for checkout attr=-text ident= aeol= core.autocrlf=true
ok 741 - setup LF checkout  with -c core.eol=crlf
ok 742 - setup CRLF checkout  with -c core.eol=crlf
ok 743 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 744 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 745 - setup LF_nul checkout  with -c core.eol=crlf
ok 746 - ls-files --eol attr=-text  aeol= core.autocrlf=true core.eol=crlf
ok 747 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=LF
ok 748 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 749 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 750 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 751 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 752 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=true
ok 753 - setup LF checkout  with -c core.eol=crlf
ok 754 - setup CRLF checkout  with -c core.eol=crlf
ok 755 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 756 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 757 - setup LF_nul checkout  with -c core.eol=crlf
ok 758 - ls-files --eol attr=-text  aeol=lf core.autocrlf=true core.eol=crlf
ok 759 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 760 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 761 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 762 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 763 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 764 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=true
ok 765 - setup LF checkout  with -c core.eol=crlf
ok 766 - setup CRLF checkout  with -c core.eol=crlf
ok 767 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 768 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 769 - setup LF_nul checkout  with -c core.eol=crlf
ok 770 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf
ok 771 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 772 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 773 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 774 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 775 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 776 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=true
ok 777 - setup LF checkout  with -c core.eol=crlf
ok 778 - setup CRLF checkout  with -c core.eol=crlf
ok 779 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 780 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 781 - setup LF_nul checkout  with -c core.eol=crlf
ok 782 - ls-files --eol attr=text  aeol=lf core.autocrlf=true core.eol=crlf
ok 783 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 784 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 785 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 786 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 787 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 788 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=true
ok 789 - setup LF checkout  with -c core.eol=crlf
ok 790 - setup CRLF checkout  with -c core.eol=crlf
ok 791 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 792 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 793 - setup LF_nul checkout  with -c core.eol=crlf
ok 794 - ls-files --eol attr=text  aeol=crlf core.autocrlf=true core.eol=crlf
ok 795 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 796 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 797 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 798 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 799 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 800 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=true
ok 801 - setup LF checkout  with -c core.eol=crlf
ok 802 - setup CRLF checkout  with -c core.eol=crlf
ok 803 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 804 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 805 - setup LF_nul checkout  with -c core.eol=crlf
ok 806 - ls-files --eol attr=auto  aeol=lf core.autocrlf=true core.eol=crlf
ok 807 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 808 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 809 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 810 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 811 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 812 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=true
ok 813 - setup LF checkout  with -c core.eol=crlf
ok 814 - setup CRLF checkout  with -c core.eol=crlf
ok 815 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 816 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 817 - setup LF_nul checkout  with -c core.eol=crlf
ok 818 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf
ok 819 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 820 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 821 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 822 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 823 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 824 - setup config for checkout attr=-text ident= aeol= core.autocrlf=false
ok 825 - setup LF checkout  with -c core.eol=crlf
ok 826 - setup CRLF checkout  with -c core.eol=crlf
ok 827 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 828 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 829 - setup LF_nul checkout  with -c core.eol=crlf
ok 830 - ls-files --eol attr=-text  aeol= core.autocrlf=false core.eol=crlf
ok 831 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=LF
ok 832 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 833 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 834 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 835 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 836 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=false
ok 837 - setup LF checkout  with -c core.eol=crlf
ok 838 - setup CRLF checkout  with -c core.eol=crlf
ok 839 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 840 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 841 - setup LF_nul checkout  with -c core.eol=crlf
ok 842 - ls-files --eol attr=-text  aeol=lf core.autocrlf=false core.eol=crlf
ok 843 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 844 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 845 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 846 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 847 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 848 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=false
ok 849 - setup LF checkout  with -c core.eol=crlf
ok 850 - setup CRLF checkout  with -c core.eol=crlf
ok 851 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 852 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 853 - setup LF_nul checkout  with -c core.eol=crlf
ok 854 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf
ok 855 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 856 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 857 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 858 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 859 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 860 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=false
ok 861 - setup LF checkout  with -c core.eol=crlf
ok 862 - setup CRLF checkout  with -c core.eol=crlf
ok 863 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 864 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 865 - setup LF_nul checkout  with -c core.eol=crlf
ok 866 - ls-files --eol attr=text  aeol=lf core.autocrlf=false core.eol=crlf
ok 867 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 868 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 869 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 870 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 871 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 872 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=false
ok 873 - setup LF checkout  with -c core.eol=crlf
ok 874 - setup CRLF checkout  with -c core.eol=crlf
ok 875 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 876 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 877 - setup LF_nul checkout  with -c core.eol=crlf
ok 878 - ls-files --eol attr=text  aeol=crlf core.autocrlf=false core.eol=crlf
ok 879 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 880 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 881 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 882 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 883 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 884 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=false
ok 885 - setup LF checkout  with -c core.eol=crlf
ok 886 - setup CRLF checkout  with -c core.eol=crlf
ok 887 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 888 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 889 - setup LF_nul checkout  with -c core.eol=crlf
ok 890 - ls-files --eol attr=auto  aeol=lf core.autocrlf=false core.eol=crlf
ok 891 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 892 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 893 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 894 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 895 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 896 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=false
ok 897 - setup LF checkout  with -c core.eol=crlf
ok 898 - setup CRLF checkout  with -c core.eol=crlf
ok 899 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 900 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 901 - setup LF_nul checkout  with -c core.eol=crlf
ok 902 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf
ok 903 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 904 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 905 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 906 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 907 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 908 - setup config for checkout attr=-text ident= aeol= core.autocrlf=input
ok 909 - setup LF checkout  with -c core.eol=crlf
ok 910 - setup CRLF checkout  with -c core.eol=crlf
ok 911 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 912 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 913 - setup LF_nul checkout  with -c core.eol=crlf
ok 914 - ls-files --eol attr=-text  aeol= core.autocrlf=input core.eol=crlf
ok 915 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=LF
ok 916 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 917 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 918 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 919 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 920 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=input
ok 921 - setup LF checkout  with -c core.eol=crlf
ok 922 - setup CRLF checkout  with -c core.eol=crlf
ok 923 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 924 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 925 - setup LF_nul checkout  with -c core.eol=crlf
ok 926 - ls-files --eol attr=-text  aeol=lf core.autocrlf=input core.eol=crlf
ok 927 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 928 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 929 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 930 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 931 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 932 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=input
ok 933 - setup LF checkout  with -c core.eol=crlf
ok 934 - setup CRLF checkout  with -c core.eol=crlf
ok 935 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 936 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 937 - setup LF_nul checkout  with -c core.eol=crlf
ok 938 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf
ok 939 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 940 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 941 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 942 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 943 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 944 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=input
ok 945 - setup LF checkout  with -c core.eol=crlf
ok 946 - setup CRLF checkout  with -c core.eol=crlf
ok 947 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 948 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 949 - setup LF_nul checkout  with -c core.eol=crlf
ok 950 - ls-files --eol attr=text  aeol=lf core.autocrlf=input core.eol=crlf
ok 951 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 952 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 953 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 954 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 955 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 956 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=input
ok 957 - setup LF checkout  with -c core.eol=crlf
ok 958 - setup CRLF checkout  with -c core.eol=crlf
ok 959 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 960 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 961 - setup LF_nul checkout  with -c core.eol=crlf
ok 962 - ls-files --eol attr=text  aeol=crlf core.autocrlf=input core.eol=crlf
ok 963 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 964 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 965 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 966 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 967 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 968 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=input
ok 969 - setup LF checkout  with -c core.eol=crlf
ok 970 - setup CRLF checkout  with -c core.eol=crlf
ok 971 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 972 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 973 - setup LF_nul checkout  with -c core.eol=crlf
ok 974 - ls-files --eol attr=auto  aeol=lf core.autocrlf=input core.eol=crlf
ok 975 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 976 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 977 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 978 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 979 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 980 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=input
ok 981 - setup LF checkout  with -c core.eol=crlf
ok 982 - setup CRLF checkout  with -c core.eol=crlf
ok 983 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 984 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 985 - setup LF_nul checkout  with -c core.eol=crlf
ok 986 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf
ok 987 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 988 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 989 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 990 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 991 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 992 - setup config for checkout attr= ident= aeol= core.autocrlf=false
ok 993 - setup LF checkout  with -c core.eol=crlf
ok 994 - setup CRLF checkout  with -c core.eol=crlf
ok 995 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 996 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 997 - setup LF_nul checkout  with -c core.eol=crlf
ok 998 - ls-files --eol attr=  aeol= core.autocrlf=false core.eol=crlf
ok 999 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=LF
ok 1000 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 1001 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1002 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1003 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 1004 - setup config for checkout attr= ident= aeol= core.autocrlf=true
ok 1005 - setup LF checkout  with -c core.eol=crlf
ok 1006 - setup CRLF checkout  with -c core.eol=crlf
ok 1007 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1008 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1009 - setup LF_nul checkout  with -c core.eol=crlf
ok 1010 - ls-files --eol attr=  aeol= core.autocrlf=true core.eol=crlf
ok 1011 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=LF
ok 1012 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 1013 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1014 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1015 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 1016 - setup config for checkout attr=auto ident= aeol= core.autocrlf=true
ok 1017 - setup LF checkout  with -c core.eol=crlf
ok 1018 - setup CRLF checkout  with -c core.eol=crlf
ok 1019 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1020 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1021 - setup LF_nul checkout  with -c core.eol=crlf
ok 1022 - ls-files --eol attr=auto  aeol= core.autocrlf=true core.eol=crlf
ok 1023 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=LF
ok 1024 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 1025 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1026 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1027 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 1028 - setup config for checkout attr=text ident= aeol= core.autocrlf=true
ok 1029 - setup LF checkout  with -c core.eol=crlf
ok 1030 - setup CRLF checkout  with -c core.eol=crlf
ok 1031 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1032 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1033 - setup LF_nul checkout  with -c core.eol=crlf
ok 1034 - ls-files --eol attr=text  aeol= core.autocrlf=true core.eol=crlf
ok 1035 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=LF
ok 1036 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 1037 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1038 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1039 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 1040 - setup config for checkout attr=text ident= aeol= core.autocrlf=input
ok 1041 - setup LF checkout  with -c core.eol=crlf
ok 1042 - setup CRLF checkout  with -c core.eol=crlf
ok 1043 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1044 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1045 - setup LF_nul checkout  with -c core.eol=crlf
ok 1046 - ls-files --eol attr=text  aeol= core.autocrlf=input core.eol=crlf
ok 1047 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=LF
ok 1048 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 1049 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 1050 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 1051 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 1052 - setup config for checkout attr=auto ident= aeol= core.autocrlf=input
ok 1053 - setup LF checkout  with -c core.eol=crlf
ok 1054 - setup CRLF checkout  with -c core.eol=crlf
ok 1055 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1056 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1057 - setup LF_nul checkout  with -c core.eol=crlf
ok 1058 - ls-files --eol attr=auto  aeol= core.autocrlf=input core.eol=crlf
ok 1059 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=LF
ok 1060 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 1061 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 1062 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 1063 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 1064 - setup config for checkout attr=-text ident= aeol= core.autocrlf=true
ok 1065 - setup LF checkout  with -c core.eol=native
ok 1066 - setup CRLF checkout  with -c core.eol=native
ok 1067 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1068 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1069 - setup LF_nul checkout  with -c core.eol=native
ok 1070 - ls-files --eol attr=-text  aeol= core.autocrlf=true core.eol=native
ok 1071 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=LF
ok 1072 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=CRLF
ok 1073 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1074 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1075 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 1076 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=true
ok 1077 - setup LF checkout  with -c core.eol=native
ok 1078 - setup CRLF checkout  with -c core.eol=native
ok 1079 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1080 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1081 - setup LF_nul checkout  with -c core.eol=native
ok 1082 - ls-files --eol attr=-text  aeol=lf core.autocrlf=true core.eol=native
ok 1083 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=LF
ok 1084 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 1085 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1086 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1087 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 1088 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=true
ok 1089 - setup LF checkout  with -c core.eol=native
ok 1090 - setup CRLF checkout  with -c core.eol=native
ok 1091 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1092 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1093 - setup LF_nul checkout  with -c core.eol=native
ok 1094 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=true core.eol=native
ok 1095 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 1096 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 1097 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1098 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1099 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 1100 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=true
ok 1101 - setup LF checkout  with -c core.eol=native
ok 1102 - setup CRLF checkout  with -c core.eol=native
ok 1103 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1104 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1105 - setup LF_nul checkout  with -c core.eol=native
ok 1106 - ls-files --eol attr=text  aeol=lf core.autocrlf=true core.eol=native
ok 1107 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=LF
ok 1108 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 1109 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1110 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1111 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 1112 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=true
ok 1113 - setup LF checkout  with -c core.eol=native
ok 1114 - setup CRLF checkout  with -c core.eol=native
ok 1115 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1116 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1117 - setup LF_nul checkout  with -c core.eol=native
ok 1118 - ls-files --eol attr=text  aeol=crlf core.autocrlf=true core.eol=native
ok 1119 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 1120 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 1121 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1122 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1123 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 1124 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=true
ok 1125 - setup LF checkout  with -c core.eol=native
ok 1126 - setup CRLF checkout  with -c core.eol=native
ok 1127 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1128 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1129 - setup LF_nul checkout  with -c core.eol=native
ok 1130 - ls-files --eol attr=auto  aeol=lf core.autocrlf=true core.eol=native
ok 1131 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=LF
ok 1132 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 1133 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1134 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1135 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 1136 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=true
ok 1137 - setup LF checkout  with -c core.eol=native
ok 1138 - setup CRLF checkout  with -c core.eol=native
ok 1139 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1140 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1141 - setup LF_nul checkout  with -c core.eol=native
ok 1142 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=true core.eol=native
ok 1143 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 1144 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 1145 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1146 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1147 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 1148 - setup config for checkout attr=-text ident= aeol= core.autocrlf=false
ok 1149 - setup LF checkout  with -c core.eol=native
ok 1150 - setup CRLF checkout  with -c core.eol=native
ok 1151 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1152 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1153 - setup LF_nul checkout  with -c core.eol=native
ok 1154 - ls-files --eol attr=-text  aeol= core.autocrlf=false core.eol=native
ok 1155 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=LF
ok 1156 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=CRLF
ok 1157 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1158 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1159 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 1160 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=false
ok 1161 - setup LF checkout  with -c core.eol=native
ok 1162 - setup CRLF checkout  with -c core.eol=native
ok 1163 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1164 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1165 - setup LF_nul checkout  with -c core.eol=native
ok 1166 - ls-files --eol attr=-text  aeol=lf core.autocrlf=false core.eol=native
ok 1167 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=LF
ok 1168 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 1169 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1170 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1171 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 1172 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=false
ok 1173 - setup LF checkout  with -c core.eol=native
ok 1174 - setup CRLF checkout  with -c core.eol=native
ok 1175 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1176 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1177 - setup LF_nul checkout  with -c core.eol=native
ok 1178 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=false core.eol=native
ok 1179 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 1180 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 1181 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1182 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1183 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 1184 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=false
ok 1185 - setup LF checkout  with -c core.eol=native
ok 1186 - setup CRLF checkout  with -c core.eol=native
ok 1187 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1188 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1189 - setup LF_nul checkout  with -c core.eol=native
ok 1190 - ls-files --eol attr=text  aeol=lf core.autocrlf=false core.eol=native
ok 1191 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=LF
ok 1192 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 1193 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1194 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1195 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 1196 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=false
ok 1197 - setup LF checkout  with -c core.eol=native
ok 1198 - setup CRLF checkout  with -c core.eol=native
ok 1199 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1200 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1201 - setup LF_nul checkout  with -c core.eol=native
ok 1202 - ls-files --eol attr=text  aeol=crlf core.autocrlf=false core.eol=native
ok 1203 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 1204 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 1205 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1206 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1207 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 1208 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=false
ok 1209 - setup LF checkout  with -c core.eol=native
ok 1210 - setup CRLF checkout  with -c core.eol=native
ok 1211 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1212 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1213 - setup LF_nul checkout  with -c core.eol=native
ok 1214 - ls-files --eol attr=auto  aeol=lf core.autocrlf=false core.eol=native
ok 1215 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=LF
ok 1216 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 1217 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1218 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1219 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 1220 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=false
ok 1221 - setup LF checkout  with -c core.eol=native
ok 1222 - setup CRLF checkout  with -c core.eol=native
ok 1223 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1224 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1225 - setup LF_nul checkout  with -c core.eol=native
ok 1226 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=false core.eol=native
ok 1227 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 1228 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 1229 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1230 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1231 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 1232 - setup config for checkout attr=-text ident= aeol= core.autocrlf=input
ok 1233 - setup LF checkout  with -c core.eol=native
ok 1234 - setup CRLF checkout  with -c core.eol=native
ok 1235 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1236 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1237 - setup LF_nul checkout  with -c core.eol=native
ok 1238 - ls-files --eol attr=-text  aeol= core.autocrlf=input core.eol=native
ok 1239 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=LF
ok 1240 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=CRLF
ok 1241 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1242 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1243 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 1244 - setup config for checkout attr=-text ident= aeol=lf core.autocrlf=input
ok 1245 - setup LF checkout  with -c core.eol=native
ok 1246 - setup CRLF checkout  with -c core.eol=native
ok 1247 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1248 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1249 - setup LF_nul checkout  with -c core.eol=native
ok 1250 - ls-files --eol attr=-text  aeol=lf core.autocrlf=input core.eol=native
ok 1251 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=LF
ok 1252 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 1253 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1254 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1255 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 1256 - setup config for checkout attr=-text ident= aeol=crlf core.autocrlf=input
ok 1257 - setup LF checkout  with -c core.eol=native
ok 1258 - setup CRLF checkout  with -c core.eol=native
ok 1259 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1260 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1261 - setup LF_nul checkout  with -c core.eol=native
ok 1262 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=input core.eol=native
ok 1263 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 1264 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 1265 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1266 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1267 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 1268 - setup config for checkout attr=text ident= aeol=lf core.autocrlf=input
ok 1269 - setup LF checkout  with -c core.eol=native
ok 1270 - setup CRLF checkout  with -c core.eol=native
ok 1271 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1272 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1273 - setup LF_nul checkout  with -c core.eol=native
ok 1274 - ls-files --eol attr=text  aeol=lf core.autocrlf=input core.eol=native
ok 1275 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=LF
ok 1276 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 1277 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1278 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1279 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 1280 - setup config for checkout attr=text ident= aeol=crlf core.autocrlf=input
ok 1281 - setup LF checkout  with -c core.eol=native
ok 1282 - setup CRLF checkout  with -c core.eol=native
ok 1283 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1284 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1285 - setup LF_nul checkout  with -c core.eol=native
ok 1286 - ls-files --eol attr=text  aeol=crlf core.autocrlf=input core.eol=native
ok 1287 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 1288 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 1289 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1290 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1291 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 1292 - setup config for checkout attr=auto ident= aeol=lf core.autocrlf=input
ok 1293 - setup LF checkout  with -c core.eol=native
ok 1294 - setup CRLF checkout  with -c core.eol=native
ok 1295 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1296 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1297 - setup LF_nul checkout  with -c core.eol=native
ok 1298 - ls-files --eol attr=auto  aeol=lf core.autocrlf=input core.eol=native
ok 1299 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=LF
ok 1300 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 1301 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1302 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1303 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 1304 - setup config for checkout attr=auto ident= aeol=crlf core.autocrlf=input
ok 1305 - setup LF checkout  with -c core.eol=native
ok 1306 - setup CRLF checkout  with -c core.eol=native
ok 1307 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1308 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1309 - setup LF_nul checkout  with -c core.eol=native
ok 1310 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=input core.eol=native
ok 1311 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 1312 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 1313 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1314 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1315 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 1316 - setup config for checkout attr= ident= aeol= core.autocrlf=false
ok 1317 - setup LF checkout  with -c core.eol=native
ok 1318 - setup CRLF checkout  with -c core.eol=native
ok 1319 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1320 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1321 - setup LF_nul checkout  with -c core.eol=native
ok 1322 - ls-files --eol attr=  aeol= core.autocrlf=false core.eol=native
ok 1323 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=LF
ok 1324 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=CRLF
ok 1325 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1326 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1327 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 1328 - setup config for checkout attr= ident= aeol= core.autocrlf=true
ok 1329 - setup LF checkout  with -c core.eol=native
ok 1330 - setup CRLF checkout  with -c core.eol=native
ok 1331 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1332 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1333 - setup LF_nul checkout  with -c core.eol=native
ok 1334 - ls-files --eol attr=  aeol= core.autocrlf=true core.eol=native
ok 1335 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=LF
ok 1336 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=CRLF
ok 1337 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1338 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1339 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 1340 - setup config for checkout attr=auto ident= aeol= core.autocrlf=true
ok 1341 - setup LF checkout  with -c core.eol=native
ok 1342 - setup CRLF checkout  with -c core.eol=native
ok 1343 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1344 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1345 - setup LF_nul checkout  with -c core.eol=native
ok 1346 - ls-files --eol attr=auto  aeol= core.autocrlf=true core.eol=native
ok 1347 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=LF
ok 1348 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=CRLF
ok 1349 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1350 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1351 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 1352 - setup config for checkout attr=text ident= aeol= core.autocrlf=true
ok 1353 - setup LF checkout  with -c core.eol=native
ok 1354 - setup CRLF checkout  with -c core.eol=native
ok 1355 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1356 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1357 - setup LF_nul checkout  with -c core.eol=native
ok 1358 - ls-files --eol attr=text  aeol= core.autocrlf=true core.eol=native
ok 1359 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=LF
ok 1360 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=CRLF
ok 1361 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1362 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1363 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 1364 - setup config for checkout attr=text ident= aeol= core.autocrlf=input
ok 1365 - setup LF checkout  with -c core.eol=native
ok 1366 - setup CRLF checkout  with -c core.eol=native
ok 1367 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1368 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1369 - setup LF_nul checkout  with -c core.eol=native
ok 1370 - ls-files --eol attr=text  aeol= core.autocrlf=input core.eol=native
ok 1371 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=LF
ok 1372 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=CRLF
ok 1373 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1374 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1375 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 1376 - setup config for checkout attr=auto ident= aeol= core.autocrlf=input
ok 1377 - setup LF checkout  with -c core.eol=native
ok 1378 - setup CRLF checkout  with -c core.eol=native
ok 1379 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1380 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1381 - setup LF_nul checkout  with -c core.eol=native
ok 1382 - ls-files --eol attr=auto  aeol= core.autocrlf=input core.eol=native
ok 1383 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=LF
ok 1384 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=CRLF
ok 1385 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1386 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1387 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 1388 - setup config for checkout attr=text ident= aeol= core.autocrlf=false
ok 1389 - setup LF checkout  with -c core.eol=crlf
ok 1390 - setup CRLF checkout  with -c core.eol=crlf
ok 1391 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1392 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1393 - setup LF_nul checkout  with -c core.eol=crlf
ok 1394 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=crlf
ok 1395 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=LF
ok 1396 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 1397 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1398 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1399 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 1400 - setup config for checkout attr=text ident= aeol= core.autocrlf=false
ok 1401 - setup LF checkout  with -c core.eol=lf
ok 1402 - setup CRLF checkout  with -c core.eol=lf
ok 1403 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1404 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1405 - setup LF_nul checkout  with -c core.eol=lf
ok 1406 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=lf
ok 1407 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=LF
ok 1408 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 1409 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 1410 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 1411 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 1412 - setup config for checkout attr=text ident= aeol= core.autocrlf=false
ok 1413 - setup LF checkout 
ok 1414 - setup CRLF checkout 
ok 1415 - setup LF_mix_CR checkout 
ok 1416 - setup CRLF_mix_LF checkout 
ok 1417 - setup LF_nul checkout 
ok 1418 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=
ok 1419 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=LF
ok 1420 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=CRLF
ok 1421 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 1422 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=LF_mix_CR
ok 1423 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=LF_nul
ok 1424 - setup config for checkout attr=text ident= aeol= core.autocrlf=false
ok 1425 - setup LF checkout  with -c core.eol=native
ok 1426 - setup CRLF checkout  with -c core.eol=native
ok 1427 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1428 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1429 - setup LF_nul checkout  with -c core.eol=native
ok 1430 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=native
ok 1431 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=LF
ok 1432 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=CRLF
ok 1433 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1434 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1435 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 1436 - setup config for checkout attr=auto ident= aeol= core.autocrlf=false
ok 1437 - setup LF checkout 
ok 1438 - setup CRLF checkout 
ok 1439 - setup LF_mix_CR checkout 
ok 1440 - setup CRLF_mix_LF checkout 
ok 1441 - setup LF_nul checkout 
ok 1442 - ls-files --eol attr=auto  aeol= core.autocrlf=false core.eol=
ok 1443 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=LF
ok 1444 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=CRLF
ok 1445 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 1446 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=LF_mix_CR
ok 1447 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=LF_nul
ok 1448 - setup config for checkout attr=auto ident= aeol= core.autocrlf=false
ok 1449 - setup LF checkout  with -c core.eol=native
ok 1450 - setup CRLF checkout  with -c core.eol=native
ok 1451 - setup LF_mix_CR checkout  with -c core.eol=native
ok 1452 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 1453 - setup LF_nul checkout  with -c core.eol=native
ok 1454 - ls-files --eol attr=auto  aeol= core.autocrlf=false core.eol=native
ok 1455 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=LF
ok 1456 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=CRLF
ok 1457 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1458 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1459 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 1460 - setup config for checkout attr= ident= aeol=lf core.autocrlf=false
ok 1461 - setup LF checkout 
ok 1462 - setup CRLF checkout 
ok 1463 - setup LF_mix_CR checkout 
ok 1464 - setup CRLF_mix_LF checkout 
ok 1465 - setup LF_nul checkout 
ok 1466 - ls-files --eol attr=  aeol=lf core.autocrlf=false core.eol=
ok 1467 - checkout attr=  aeol=lf core.autocrlf=false core.eol= file=LF
ok 1468 - checkout attr=  aeol=lf core.autocrlf=false core.eol= file=CRLF
ok 1469 - checkout attr=  aeol=lf core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 1470 - checkout attr=  aeol=lf core.autocrlf=false core.eol= file=LF_mix_CR
ok 1471 - checkout attr=  aeol=lf core.autocrlf=false core.eol= file=LF_nul
ok 1472 - setup config for checkout attr= ident= aeol=crlf core.autocrlf=false
ok 1473 - setup LF checkout 
ok 1474 - setup CRLF checkout 
ok 1475 - setup LF_mix_CR checkout 
ok 1476 - setup CRLF_mix_LF checkout 
ok 1477 - setup LF_nul checkout 
ok 1478 - ls-files --eol attr=  aeol=crlf core.autocrlf=false core.eol=
ok 1479 - checkout attr=  aeol=crlf core.autocrlf=false core.eol= file=LF
ok 1480 - checkout attr=  aeol=crlf core.autocrlf=false core.eol= file=CRLF
ok 1481 - checkout attr=  aeol=crlf core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 1482 - checkout attr=  aeol=crlf core.autocrlf=false core.eol= file=LF_mix_CR
ok 1483 - checkout attr=  aeol=crlf core.autocrlf=false core.eol= file=LF_nul
ok 1484 - setup config for checkout attr= ident= aeol=lf core.autocrlf=true
ok 1485 - setup LF checkout 
ok 1486 - setup CRLF checkout 
ok 1487 - setup LF_mix_CR checkout 
ok 1488 - setup CRLF_mix_LF checkout 
ok 1489 - setup LF_nul checkout 
ok 1490 - ls-files --eol attr=  aeol=lf core.autocrlf=true core.eol=
ok 1491 - checkout attr=  aeol=lf core.autocrlf=true core.eol= file=LF
ok 1492 - checkout attr=  aeol=lf core.autocrlf=true core.eol= file=CRLF
ok 1493 - checkout attr=  aeol=lf core.autocrlf=true core.eol= file=CRLF_mix_LF
ok 1494 - checkout attr=  aeol=lf core.autocrlf=true core.eol= file=LF_mix_CR
ok 1495 - checkout attr=  aeol=lf core.autocrlf=true core.eol= file=LF_nul
ok 1496 - setup config for checkout attr= ident= aeol=crlf core.autocrlf=true
ok 1497 - setup LF checkout 
ok 1498 - setup CRLF checkout 
ok 1499 - setup LF_mix_CR checkout 
ok 1500 - setup CRLF_mix_LF checkout 
ok 1501 - setup LF_nul checkout 
ok 1502 - ls-files --eol attr=  aeol=crlf core.autocrlf=true core.eol=
ok 1503 - checkout attr=  aeol=crlf core.autocrlf=true core.eol= file=LF
ok 1504 - checkout attr=  aeol=crlf core.autocrlf=true core.eol= file=CRLF
ok 1505 - checkout attr=  aeol=crlf core.autocrlf=true core.eol= file=CRLF_mix_LF
ok 1506 - checkout attr=  aeol=crlf core.autocrlf=true core.eol= file=LF_mix_CR
ok 1507 - checkout attr=  aeol=crlf core.autocrlf=true core.eol= file=LF_nul
ok 1508 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=true
ok 1509 - setup LF checkout  with -c core.eol=lf
ok 1510 - setup CRLF checkout  with -c core.eol=lf
ok 1511 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1512 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1513 - setup LF_nul checkout  with -c core.eol=lf
ok 1514 - ls-files --eol attr=-text ident aeol= core.autocrlf=true core.eol=lf
ok 1515 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=LF
ok 1516 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 1517 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1518 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1519 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 1520 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=true
ok 1521 - setup LF checkout  with -c core.eol=lf
ok 1522 - setup CRLF checkout  with -c core.eol=lf
ok 1523 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1524 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1525 - setup LF_nul checkout  with -c core.eol=lf
ok 1526 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=true core.eol=lf
ok 1527 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 1528 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 1529 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1530 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1531 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 1532 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=true
ok 1533 - setup LF checkout  with -c core.eol=lf
ok 1534 - setup CRLF checkout  with -c core.eol=lf
ok 1535 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1536 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1537 - setup LF_nul checkout  with -c core.eol=lf
ok 1538 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf
ok 1539 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 1540 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 1541 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1542 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1543 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 1544 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=true
ok 1545 - setup LF checkout  with -c core.eol=lf
ok 1546 - setup CRLF checkout  with -c core.eol=lf
ok 1547 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1548 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1549 - setup LF_nul checkout  with -c core.eol=lf
ok 1550 - ls-files --eol attr=text ident aeol=lf core.autocrlf=true core.eol=lf
ok 1551 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 1552 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 1553 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1554 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1555 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 1556 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=true
ok 1557 - setup LF checkout  with -c core.eol=lf
ok 1558 - setup CRLF checkout  with -c core.eol=lf
ok 1559 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1560 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1561 - setup LF_nul checkout  with -c core.eol=lf
ok 1562 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=true core.eol=lf
ok 1563 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 1564 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 1565 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1566 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1567 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 1568 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=true
ok 1569 - setup LF checkout  with -c core.eol=lf
ok 1570 - setup CRLF checkout  with -c core.eol=lf
ok 1571 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1572 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1573 - setup LF_nul checkout  with -c core.eol=lf
ok 1574 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=true core.eol=lf
ok 1575 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 1576 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 1577 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1578 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1579 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 1580 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=true
ok 1581 - setup LF checkout  with -c core.eol=lf
ok 1582 - setup CRLF checkout  with -c core.eol=lf
ok 1583 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1584 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1585 - setup LF_nul checkout  with -c core.eol=lf
ok 1586 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf
ok 1587 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 1588 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 1589 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1590 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1591 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 1592 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=false
ok 1593 - setup LF checkout  with -c core.eol=lf
ok 1594 - setup CRLF checkout  with -c core.eol=lf
ok 1595 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1596 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1597 - setup LF_nul checkout  with -c core.eol=lf
ok 1598 - ls-files --eol attr=-text ident aeol= core.autocrlf=false core.eol=lf
ok 1599 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=LF
ok 1600 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 1601 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 1602 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 1603 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 1604 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=false
ok 1605 - setup LF checkout  with -c core.eol=lf
ok 1606 - setup CRLF checkout  with -c core.eol=lf
ok 1607 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1608 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1609 - setup LF_nul checkout  with -c core.eol=lf
ok 1610 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=false core.eol=lf
ok 1611 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 1612 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 1613 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 1614 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 1615 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 1616 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=false
ok 1617 - setup LF checkout  with -c core.eol=lf
ok 1618 - setup CRLF checkout  with -c core.eol=lf
ok 1619 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1620 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1621 - setup LF_nul checkout  with -c core.eol=lf
ok 1622 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf
ok 1623 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 1624 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 1625 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 1626 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 1627 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 1628 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=false
ok 1629 - setup LF checkout  with -c core.eol=lf
ok 1630 - setup CRLF checkout  with -c core.eol=lf
ok 1631 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1632 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1633 - setup LF_nul checkout  with -c core.eol=lf
ok 1634 - ls-files --eol attr=text ident aeol=lf core.autocrlf=false core.eol=lf
ok 1635 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 1636 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 1637 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 1638 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 1639 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 1640 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=false
ok 1641 - setup LF checkout  with -c core.eol=lf
ok 1642 - setup CRLF checkout  with -c core.eol=lf
ok 1643 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1644 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1645 - setup LF_nul checkout  with -c core.eol=lf
ok 1646 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=false core.eol=lf
ok 1647 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 1648 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 1649 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 1650 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 1651 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 1652 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=false
ok 1653 - setup LF checkout  with -c core.eol=lf
ok 1654 - setup CRLF checkout  with -c core.eol=lf
ok 1655 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1656 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1657 - setup LF_nul checkout  with -c core.eol=lf
ok 1658 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=false core.eol=lf
ok 1659 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 1660 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 1661 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 1662 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 1663 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 1664 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=false
ok 1665 - setup LF checkout  with -c core.eol=lf
ok 1666 - setup CRLF checkout  with -c core.eol=lf
ok 1667 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1668 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1669 - setup LF_nul checkout  with -c core.eol=lf
ok 1670 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf
ok 1671 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 1672 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 1673 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 1674 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 1675 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 1676 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=input
ok 1677 - setup LF checkout  with -c core.eol=lf
ok 1678 - setup CRLF checkout  with -c core.eol=lf
ok 1679 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1680 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1681 - setup LF_nul checkout  with -c core.eol=lf
ok 1682 - ls-files --eol attr=-text ident aeol= core.autocrlf=input core.eol=lf
ok 1683 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=LF
ok 1684 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 1685 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 1686 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1687 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 1688 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=input
ok 1689 - setup LF checkout  with -c core.eol=lf
ok 1690 - setup CRLF checkout  with -c core.eol=lf
ok 1691 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1692 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1693 - setup LF_nul checkout  with -c core.eol=lf
ok 1694 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=input core.eol=lf
ok 1695 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 1696 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 1697 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 1698 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1699 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 1700 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=input
ok 1701 - setup LF checkout  with -c core.eol=lf
ok 1702 - setup CRLF checkout  with -c core.eol=lf
ok 1703 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1704 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1705 - setup LF_nul checkout  with -c core.eol=lf
ok 1706 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf
ok 1707 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 1708 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 1709 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 1710 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1711 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
ok 1712 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=input
ok 1713 - setup LF checkout  with -c core.eol=lf
ok 1714 - setup CRLF checkout  with -c core.eol=lf
ok 1715 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1716 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1717 - setup LF_nul checkout  with -c core.eol=lf
ok 1718 - ls-files --eol attr=text ident aeol=lf core.autocrlf=input core.eol=lf
ok 1719 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 1720 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 1721 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 1722 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1723 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 1724 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=input
ok 1725 - setup LF checkout  with -c core.eol=lf
ok 1726 - setup CRLF checkout  with -c core.eol=lf
ok 1727 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1728 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1729 - setup LF_nul checkout  with -c core.eol=lf
ok 1730 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=input core.eol=lf
ok 1731 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 1732 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 1733 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 1734 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1735 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
ok 1736 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=input
ok 1737 - setup LF checkout  with -c core.eol=lf
ok 1738 - setup CRLF checkout  with -c core.eol=lf
ok 1739 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1740 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1741 - setup LF_nul checkout  with -c core.eol=lf
ok 1742 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=input core.eol=lf
ok 1743 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 1744 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 1745 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 1746 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1747 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 1748 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=input
ok 1749 - setup LF checkout  with -c core.eol=lf
ok 1750 - setup CRLF checkout  with -c core.eol=lf
ok 1751 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1752 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1753 - setup LF_nul checkout  with -c core.eol=lf
ok 1754 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf
ok 1755 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 1756 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 1757 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 1758 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1759 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
ok 1760 - setup config for checkout attr= ident=ident aeol= core.autocrlf=false
ok 1761 - setup LF checkout  with -c core.eol=lf
ok 1762 - setup CRLF checkout  with -c core.eol=lf
ok 1763 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1764 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1765 - setup LF_nul checkout  with -c core.eol=lf
ok 1766 - ls-files --eol attr= ident aeol= core.autocrlf=false core.eol=lf
ok 1767 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=LF
ok 1768 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 1769 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 1770 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 1771 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 1772 - setup config for checkout attr= ident=ident aeol= core.autocrlf=true
ok 1773 - setup LF checkout  with -c core.eol=lf
ok 1774 - setup CRLF checkout  with -c core.eol=lf
ok 1775 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1776 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1777 - setup LF_nul checkout  with -c core.eol=lf
ok 1778 - ls-files --eol attr= ident aeol= core.autocrlf=true core.eol=lf
ok 1779 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=LF
ok 1780 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 1781 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1782 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1783 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 1784 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=true
ok 1785 - setup LF checkout  with -c core.eol=lf
ok 1786 - setup CRLF checkout  with -c core.eol=lf
ok 1787 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1788 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1789 - setup LF_nul checkout  with -c core.eol=lf
ok 1790 - ls-files --eol attr=auto ident aeol= core.autocrlf=true core.eol=lf
ok 1791 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=LF
ok 1792 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 1793 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1794 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1795 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 1796 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=true
ok 1797 - setup LF checkout  with -c core.eol=lf
ok 1798 - setup CRLF checkout  with -c core.eol=lf
ok 1799 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1800 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1801 - setup LF_nul checkout  with -c core.eol=lf
ok 1802 - ls-files --eol attr=text ident aeol= core.autocrlf=true core.eol=lf
ok 1803 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=LF
ok 1804 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 1805 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1806 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1807 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 1808 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=input
ok 1809 - setup LF checkout  with -c core.eol=lf
ok 1810 - setup CRLF checkout  with -c core.eol=lf
ok 1811 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1812 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1813 - setup LF_nul checkout  with -c core.eol=lf
ok 1814 - ls-files --eol attr=text ident aeol= core.autocrlf=input core.eol=lf
ok 1815 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=LF
ok 1816 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 1817 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 1818 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1819 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 1820 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=input
ok 1821 - setup LF checkout  with -c core.eol=lf
ok 1822 - setup CRLF checkout  with -c core.eol=lf
ok 1823 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 1824 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 1825 - setup LF_nul checkout  with -c core.eol=lf
ok 1826 - ls-files --eol attr=auto ident aeol= core.autocrlf=input core.eol=lf
ok 1827 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=LF
ok 1828 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 1829 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 1830 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1831 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 1832 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=true
ok 1833 - setup LF checkout  with -c core.eol=crlf
ok 1834 - setup CRLF checkout  with -c core.eol=crlf
ok 1835 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1836 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1837 - setup LF_nul checkout  with -c core.eol=crlf
ok 1838 - ls-files --eol attr=-text ident aeol= core.autocrlf=true core.eol=crlf
ok 1839 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=LF
ok 1840 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 1841 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1842 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1843 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 1844 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=true
ok 1845 - setup LF checkout  with -c core.eol=crlf
ok 1846 - setup CRLF checkout  with -c core.eol=crlf
ok 1847 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1848 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1849 - setup LF_nul checkout  with -c core.eol=crlf
ok 1850 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf
ok 1851 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 1852 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 1853 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1854 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1855 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 1856 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=true
ok 1857 - setup LF checkout  with -c core.eol=crlf
ok 1858 - setup CRLF checkout  with -c core.eol=crlf
ok 1859 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1860 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1861 - setup LF_nul checkout  with -c core.eol=crlf
ok 1862 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf
ok 1863 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 1864 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 1865 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1866 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1867 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 1868 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=true
ok 1869 - setup LF checkout  with -c core.eol=crlf
ok 1870 - setup CRLF checkout  with -c core.eol=crlf
ok 1871 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1872 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1873 - setup LF_nul checkout  with -c core.eol=crlf
ok 1874 - ls-files --eol attr=text ident aeol=lf core.autocrlf=true core.eol=crlf
ok 1875 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 1876 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 1877 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1878 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1879 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 1880 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=true
ok 1881 - setup LF checkout  with -c core.eol=crlf
ok 1882 - setup CRLF checkout  with -c core.eol=crlf
ok 1883 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1884 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1885 - setup LF_nul checkout  with -c core.eol=crlf
ok 1886 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf
ok 1887 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 1888 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 1889 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1890 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1891 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 1892 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=true
ok 1893 - setup LF checkout  with -c core.eol=crlf
ok 1894 - setup CRLF checkout  with -c core.eol=crlf
ok 1895 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1896 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1897 - setup LF_nul checkout  with -c core.eol=crlf
ok 1898 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf
ok 1899 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 1900 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 1901 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1902 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1903 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 1904 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=true
ok 1905 - setup LF checkout  with -c core.eol=crlf
ok 1906 - setup CRLF checkout  with -c core.eol=crlf
ok 1907 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1908 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1909 - setup LF_nul checkout  with -c core.eol=crlf
ok 1910 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf
ok 1911 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 1912 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 1913 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1914 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1915 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 1916 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=false
ok 1917 - setup LF checkout  with -c core.eol=crlf
ok 1918 - setup CRLF checkout  with -c core.eol=crlf
ok 1919 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1920 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1921 - setup LF_nul checkout  with -c core.eol=crlf
ok 1922 - ls-files --eol attr=-text ident aeol= core.autocrlf=false core.eol=crlf
ok 1923 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=LF
ok 1924 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 1925 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1926 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1927 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 1928 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=false
ok 1929 - setup LF checkout  with -c core.eol=crlf
ok 1930 - setup CRLF checkout  with -c core.eol=crlf
ok 1931 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1932 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1933 - setup LF_nul checkout  with -c core.eol=crlf
ok 1934 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf
ok 1935 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 1936 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 1937 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1938 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1939 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 1940 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=false
ok 1941 - setup LF checkout  with -c core.eol=crlf
ok 1942 - setup CRLF checkout  with -c core.eol=crlf
ok 1943 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1944 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1945 - setup LF_nul checkout  with -c core.eol=crlf
ok 1946 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf
ok 1947 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 1948 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 1949 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1950 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1951 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 1952 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=false
ok 1953 - setup LF checkout  with -c core.eol=crlf
ok 1954 - setup CRLF checkout  with -c core.eol=crlf
ok 1955 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1956 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1957 - setup LF_nul checkout  with -c core.eol=crlf
ok 1958 - ls-files --eol attr=text ident aeol=lf core.autocrlf=false core.eol=crlf
ok 1959 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 1960 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 1961 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1962 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1963 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 1964 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=false
ok 1965 - setup LF checkout  with -c core.eol=crlf
ok 1966 - setup CRLF checkout  with -c core.eol=crlf
ok 1967 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1968 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1969 - setup LF_nul checkout  with -c core.eol=crlf
ok 1970 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf
ok 1971 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 1972 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 1973 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1974 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1975 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 1976 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=false
ok 1977 - setup LF checkout  with -c core.eol=crlf
ok 1978 - setup CRLF checkout  with -c core.eol=crlf
ok 1979 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1980 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1981 - setup LF_nul checkout  with -c core.eol=crlf
ok 1982 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf
ok 1983 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 1984 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 1985 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1986 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1987 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 1988 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=false
ok 1989 - setup LF checkout  with -c core.eol=crlf
ok 1990 - setup CRLF checkout  with -c core.eol=crlf
ok 1991 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 1992 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 1993 - setup LF_nul checkout  with -c core.eol=crlf
ok 1994 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf
ok 1995 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 1996 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 1997 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1998 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1999 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 2000 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=input
ok 2001 - setup LF checkout  with -c core.eol=crlf
ok 2002 - setup CRLF checkout  with -c core.eol=crlf
ok 2003 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 2004 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2005 - setup LF_nul checkout  with -c core.eol=crlf
ok 2006 - ls-files --eol attr=-text ident aeol= core.autocrlf=input core.eol=crlf
ok 2007 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=LF
ok 2008 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 2009 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 2010 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 2011 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 2012 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=input
ok 2013 - setup LF checkout  with -c core.eol=crlf
ok 2014 - setup CRLF checkout  with -c core.eol=crlf
ok 2015 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 2016 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2017 - setup LF_nul checkout  with -c core.eol=crlf
ok 2018 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf
ok 2019 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 2020 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 2021 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 2022 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 2023 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 2024 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=input
ok 2025 - setup LF checkout  with -c core.eol=crlf
ok 2026 - setup CRLF checkout  with -c core.eol=crlf
ok 2027 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 2028 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2029 - setup LF_nul checkout  with -c core.eol=crlf
ok 2030 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf
ok 2031 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 2032 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 2033 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 2034 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 2035 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 2036 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=input
ok 2037 - setup LF checkout  with -c core.eol=crlf
ok 2038 - setup CRLF checkout  with -c core.eol=crlf
ok 2039 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 2040 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2041 - setup LF_nul checkout  with -c core.eol=crlf
ok 2042 - ls-files --eol attr=text ident aeol=lf core.autocrlf=input core.eol=crlf
ok 2043 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 2044 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 2045 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 2046 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 2047 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 2048 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=input
ok 2049 - setup LF checkout  with -c core.eol=crlf
ok 2050 - setup CRLF checkout  with -c core.eol=crlf
ok 2051 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 2052 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2053 - setup LF_nul checkout  with -c core.eol=crlf
ok 2054 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf
ok 2055 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 2056 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 2057 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 2058 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 2059 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 2060 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=input
ok 2061 - setup LF checkout  with -c core.eol=crlf
ok 2062 - setup CRLF checkout  with -c core.eol=crlf
ok 2063 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 2064 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2065 - setup LF_nul checkout  with -c core.eol=crlf
ok 2066 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf
ok 2067 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 2068 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 2069 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 2070 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 2071 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 2072 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=input
ok 2073 - setup LF checkout  with -c core.eol=crlf
ok 2074 - setup CRLF checkout  with -c core.eol=crlf
ok 2075 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 2076 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2077 - setup LF_nul checkout  with -c core.eol=crlf
ok 2078 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf
ok 2079 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 2080 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 2081 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 2082 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 2083 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 2084 - setup config for checkout attr= ident=ident aeol= core.autocrlf=false
ok 2085 - setup LF checkout  with -c core.eol=crlf
ok 2086 - setup CRLF checkout  with -c core.eol=crlf
ok 2087 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 2088 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2089 - setup LF_nul checkout  with -c core.eol=crlf
ok 2090 - ls-files --eol attr= ident aeol= core.autocrlf=false core.eol=crlf
ok 2091 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=LF
ok 2092 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 2093 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 2094 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 2095 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 2096 - setup config for checkout attr= ident=ident aeol= core.autocrlf=true
ok 2097 - setup LF checkout  with -c core.eol=crlf
ok 2098 - setup CRLF checkout  with -c core.eol=crlf
ok 2099 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 2100 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2101 - setup LF_nul checkout  with -c core.eol=crlf
ok 2102 - ls-files --eol attr= ident aeol= core.autocrlf=true core.eol=crlf
ok 2103 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=LF
ok 2104 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 2105 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 2106 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 2107 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 2108 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=true
ok 2109 - setup LF checkout  with -c core.eol=crlf
ok 2110 - setup CRLF checkout  with -c core.eol=crlf
ok 2111 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 2112 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2113 - setup LF_nul checkout  with -c core.eol=crlf
ok 2114 - ls-files --eol attr=auto ident aeol= core.autocrlf=true core.eol=crlf
ok 2115 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=LF
ok 2116 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 2117 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 2118 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 2119 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 2120 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=true
ok 2121 - setup LF checkout  with -c core.eol=crlf
ok 2122 - setup CRLF checkout  with -c core.eol=crlf
ok 2123 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 2124 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2125 - setup LF_nul checkout  with -c core.eol=crlf
ok 2126 - ls-files --eol attr=text ident aeol= core.autocrlf=true core.eol=crlf
ok 2127 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=LF
ok 2128 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 2129 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 2130 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 2131 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 2132 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=input
ok 2133 - setup LF checkout  with -c core.eol=crlf
ok 2134 - setup CRLF checkout  with -c core.eol=crlf
ok 2135 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 2136 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2137 - setup LF_nul checkout  with -c core.eol=crlf
ok 2138 - ls-files --eol attr=text ident aeol= core.autocrlf=input core.eol=crlf
ok 2139 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=LF
ok 2140 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 2141 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 2142 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 2143 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 2144 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=input
ok 2145 - setup LF checkout  with -c core.eol=crlf
ok 2146 - setup CRLF checkout  with -c core.eol=crlf
ok 2147 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 2148 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2149 - setup LF_nul checkout  with -c core.eol=crlf
ok 2150 - ls-files --eol attr=auto ident aeol= core.autocrlf=input core.eol=crlf
ok 2151 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=LF
ok 2152 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 2153 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 2154 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 2155 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 2156 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=true
ok 2157 - setup LF checkout  with -c core.eol=native
ok 2158 - setup CRLF checkout  with -c core.eol=native
ok 2159 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2160 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2161 - setup LF_nul checkout  with -c core.eol=native
ok 2162 - ls-files --eol attr=-text ident aeol= core.autocrlf=true core.eol=native
ok 2163 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=LF
ok 2164 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=CRLF
ok 2165 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 2166 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 2167 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 2168 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=true
ok 2169 - setup LF checkout  with -c core.eol=native
ok 2170 - setup CRLF checkout  with -c core.eol=native
ok 2171 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2172 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2173 - setup LF_nul checkout  with -c core.eol=native
ok 2174 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=true core.eol=native
ok 2175 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=LF
ok 2176 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 2177 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 2178 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 2179 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 2180 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=true
ok 2181 - setup LF checkout  with -c core.eol=native
ok 2182 - setup CRLF checkout  with -c core.eol=native
ok 2183 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2184 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2185 - setup LF_nul checkout  with -c core.eol=native
ok 2186 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=true core.eol=native
ok 2187 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 2188 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 2189 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 2190 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 2191 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 2192 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=true
ok 2193 - setup LF checkout  with -c core.eol=native
ok 2194 - setup CRLF checkout  with -c core.eol=native
ok 2195 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2196 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2197 - setup LF_nul checkout  with -c core.eol=native
ok 2198 - ls-files --eol attr=text ident aeol=lf core.autocrlf=true core.eol=native
ok 2199 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=LF
ok 2200 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 2201 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 2202 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 2203 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 2204 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=true
ok 2205 - setup LF checkout  with -c core.eol=native
ok 2206 - setup CRLF checkout  with -c core.eol=native
ok 2207 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2208 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2209 - setup LF_nul checkout  with -c core.eol=native
ok 2210 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=true core.eol=native
ok 2211 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 2212 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 2213 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 2214 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 2215 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 2216 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=true
ok 2217 - setup LF checkout  with -c core.eol=native
ok 2218 - setup CRLF checkout  with -c core.eol=native
ok 2219 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2220 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2221 - setup LF_nul checkout  with -c core.eol=native
ok 2222 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=true core.eol=native
ok 2223 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=LF
ok 2224 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 2225 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 2226 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 2227 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 2228 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=true
ok 2229 - setup LF checkout  with -c core.eol=native
ok 2230 - setup CRLF checkout  with -c core.eol=native
ok 2231 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2232 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2233 - setup LF_nul checkout  with -c core.eol=native
ok 2234 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=true core.eol=native
ok 2235 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 2236 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 2237 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 2238 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 2239 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 2240 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=false
ok 2241 - setup LF checkout  with -c core.eol=native
ok 2242 - setup CRLF checkout  with -c core.eol=native
ok 2243 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2244 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2245 - setup LF_nul checkout  with -c core.eol=native
ok 2246 - ls-files --eol attr=-text ident aeol= core.autocrlf=false core.eol=native
ok 2247 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=LF
ok 2248 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=CRLF
ok 2249 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 2250 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 2251 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 2252 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=false
ok 2253 - setup LF checkout  with -c core.eol=native
ok 2254 - setup CRLF checkout  with -c core.eol=native
ok 2255 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2256 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2257 - setup LF_nul checkout  with -c core.eol=native
ok 2258 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=false core.eol=native
ok 2259 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=LF
ok 2260 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 2261 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 2262 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 2263 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 2264 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=false
ok 2265 - setup LF checkout  with -c core.eol=native
ok 2266 - setup CRLF checkout  with -c core.eol=native
ok 2267 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2268 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2269 - setup LF_nul checkout  with -c core.eol=native
ok 2270 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=false core.eol=native
ok 2271 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 2272 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 2273 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 2274 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 2275 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 2276 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=false
ok 2277 - setup LF checkout  with -c core.eol=native
ok 2278 - setup CRLF checkout  with -c core.eol=native
ok 2279 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2280 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2281 - setup LF_nul checkout  with -c core.eol=native
ok 2282 - ls-files --eol attr=text ident aeol=lf core.autocrlf=false core.eol=native
ok 2283 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=LF
ok 2284 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 2285 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 2286 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 2287 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 2288 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=false
ok 2289 - setup LF checkout  with -c core.eol=native
ok 2290 - setup CRLF checkout  with -c core.eol=native
ok 2291 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2292 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2293 - setup LF_nul checkout  with -c core.eol=native
ok 2294 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=false core.eol=native
ok 2295 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 2296 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 2297 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 2298 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 2299 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 2300 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=false
ok 2301 - setup LF checkout  with -c core.eol=native
ok 2302 - setup CRLF checkout  with -c core.eol=native
ok 2303 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2304 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2305 - setup LF_nul checkout  with -c core.eol=native
ok 2306 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=false core.eol=native
ok 2307 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=LF
ok 2308 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 2309 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 2310 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 2311 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 2312 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=false
ok 2313 - setup LF checkout  with -c core.eol=native
ok 2314 - setup CRLF checkout  with -c core.eol=native
ok 2315 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2316 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2317 - setup LF_nul checkout  with -c core.eol=native
ok 2318 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=false core.eol=native
ok 2319 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 2320 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 2321 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 2322 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 2323 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 2324 - setup config for checkout attr=-text ident=ident aeol= core.autocrlf=input
ok 2325 - setup LF checkout  with -c core.eol=native
ok 2326 - setup CRLF checkout  with -c core.eol=native
ok 2327 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2328 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2329 - setup LF_nul checkout  with -c core.eol=native
ok 2330 - ls-files --eol attr=-text ident aeol= core.autocrlf=input core.eol=native
ok 2331 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=LF
ok 2332 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=CRLF
ok 2333 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 2334 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 2335 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 2336 - setup config for checkout attr=-text ident=ident aeol=lf core.autocrlf=input
ok 2337 - setup LF checkout  with -c core.eol=native
ok 2338 - setup CRLF checkout  with -c core.eol=native
ok 2339 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2340 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2341 - setup LF_nul checkout  with -c core.eol=native
ok 2342 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=input core.eol=native
ok 2343 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=LF
ok 2344 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 2345 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 2346 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 2347 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 2348 - setup config for checkout attr=-text ident=ident aeol=crlf core.autocrlf=input
ok 2349 - setup LF checkout  with -c core.eol=native
ok 2350 - setup CRLF checkout  with -c core.eol=native
ok 2351 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2352 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2353 - setup LF_nul checkout  with -c core.eol=native
ok 2354 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=input core.eol=native
ok 2355 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 2356 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 2357 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 2358 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 2359 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 2360 - setup config for checkout attr=text ident=ident aeol=lf core.autocrlf=input
ok 2361 - setup LF checkout  with -c core.eol=native
ok 2362 - setup CRLF checkout  with -c core.eol=native
ok 2363 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2364 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2365 - setup LF_nul checkout  with -c core.eol=native
ok 2366 - ls-files --eol attr=text ident aeol=lf core.autocrlf=input core.eol=native
ok 2367 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=LF
ok 2368 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 2369 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 2370 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 2371 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 2372 - setup config for checkout attr=text ident=ident aeol=crlf core.autocrlf=input
ok 2373 - setup LF checkout  with -c core.eol=native
ok 2374 - setup CRLF checkout  with -c core.eol=native
ok 2375 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2376 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2377 - setup LF_nul checkout  with -c core.eol=native
ok 2378 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=input core.eol=native
ok 2379 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 2380 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 2381 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 2382 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 2383 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 2384 - setup config for checkout attr=auto ident=ident aeol=lf core.autocrlf=input
ok 2385 - setup LF checkout  with -c core.eol=native
ok 2386 - setup CRLF checkout  with -c core.eol=native
ok 2387 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2388 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2389 - setup LF_nul checkout  with -c core.eol=native
ok 2390 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=input core.eol=native
ok 2391 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=LF
ok 2392 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 2393 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 2394 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 2395 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 2396 - setup config for checkout attr=auto ident=ident aeol=crlf core.autocrlf=input
ok 2397 - setup LF checkout  with -c core.eol=native
ok 2398 - setup CRLF checkout  with -c core.eol=native
ok 2399 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2400 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2401 - setup LF_nul checkout  with -c core.eol=native
ok 2402 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=input core.eol=native
ok 2403 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 2404 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 2405 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 2406 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 2407 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 2408 - setup config for checkout attr= ident=ident aeol= core.autocrlf=false
ok 2409 - setup LF checkout  with -c core.eol=native
ok 2410 - setup CRLF checkout  with -c core.eol=native
ok 2411 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2412 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2413 - setup LF_nul checkout  with -c core.eol=native
ok 2414 - ls-files --eol attr= ident aeol= core.autocrlf=false core.eol=native
ok 2415 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=LF
ok 2416 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=CRLF
ok 2417 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 2418 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 2419 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 2420 - setup config for checkout attr= ident=ident aeol= core.autocrlf=true
ok 2421 - setup LF checkout  with -c core.eol=native
ok 2422 - setup CRLF checkout  with -c core.eol=native
ok 2423 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2424 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2425 - setup LF_nul checkout  with -c core.eol=native
ok 2426 - ls-files --eol attr= ident aeol= core.autocrlf=true core.eol=native
ok 2427 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=LF
ok 2428 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=CRLF
ok 2429 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 2430 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 2431 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 2432 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=true
ok 2433 - setup LF checkout  with -c core.eol=native
ok 2434 - setup CRLF checkout  with -c core.eol=native
ok 2435 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2436 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2437 - setup LF_nul checkout  with -c core.eol=native
ok 2438 - ls-files --eol attr=auto ident aeol= core.autocrlf=true core.eol=native
ok 2439 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=LF
ok 2440 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=CRLF
ok 2441 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 2442 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 2443 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 2444 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=true
ok 2445 - setup LF checkout  with -c core.eol=native
ok 2446 - setup CRLF checkout  with -c core.eol=native
ok 2447 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2448 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2449 - setup LF_nul checkout  with -c core.eol=native
ok 2450 - ls-files --eol attr=text ident aeol= core.autocrlf=true core.eol=native
ok 2451 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=LF
ok 2452 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=CRLF
ok 2453 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 2454 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 2455 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 2456 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=input
ok 2457 - setup LF checkout  with -c core.eol=native
ok 2458 - setup CRLF checkout  with -c core.eol=native
ok 2459 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2460 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2461 - setup LF_nul checkout  with -c core.eol=native
ok 2462 - ls-files --eol attr=text ident aeol= core.autocrlf=input core.eol=native
ok 2463 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=LF
ok 2464 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=CRLF
ok 2465 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 2466 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 2467 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 2468 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=input
ok 2469 - setup LF checkout  with -c core.eol=native
ok 2470 - setup CRLF checkout  with -c core.eol=native
ok 2471 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2472 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2473 - setup LF_nul checkout  with -c core.eol=native
ok 2474 - ls-files --eol attr=auto ident aeol= core.autocrlf=input core.eol=native
ok 2475 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=LF
ok 2476 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=CRLF
ok 2477 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 2478 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 2479 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 2480 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=false
ok 2481 - setup LF checkout  with -c core.eol=crlf
ok 2482 - setup CRLF checkout  with -c core.eol=crlf
ok 2483 - setup LF_mix_CR checkout  with -c core.eol=crlf
ok 2484 - setup CRLF_mix_LF checkout  with -c core.eol=crlf
ok 2485 - setup LF_nul checkout  with -c core.eol=crlf
ok 2486 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=crlf
ok 2487 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=LF
ok 2488 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 2489 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 2490 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 2491 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 2492 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=false
ok 2493 - setup LF checkout  with -c core.eol=lf
ok 2494 - setup CRLF checkout  with -c core.eol=lf
ok 2495 - setup LF_mix_CR checkout  with -c core.eol=lf
ok 2496 - setup CRLF_mix_LF checkout  with -c core.eol=lf
ok 2497 - setup LF_nul checkout  with -c core.eol=lf
ok 2498 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=lf
ok 2499 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=LF
ok 2500 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 2501 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 2502 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 2503 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 2504 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=false
ok 2505 - setup LF checkout 
ok 2506 - setup CRLF checkout 
ok 2507 - setup LF_mix_CR checkout 
ok 2508 - setup CRLF_mix_LF checkout 
ok 2509 - setup LF_nul checkout 
ok 2510 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=
ok 2511 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=LF
ok 2512 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=CRLF
ok 2513 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 2514 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=LF_mix_CR
ok 2515 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=LF_nul
ok 2516 - setup config for checkout attr=text ident=ident aeol= core.autocrlf=false
ok 2517 - setup LF checkout  with -c core.eol=native
ok 2518 - setup CRLF checkout  with -c core.eol=native
ok 2519 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2520 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2521 - setup LF_nul checkout  with -c core.eol=native
ok 2522 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=native
ok 2523 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=LF
ok 2524 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=CRLF
ok 2525 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 2526 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 2527 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 2528 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=false
ok 2529 - setup LF checkout 
ok 2530 - setup CRLF checkout 
ok 2531 - setup LF_mix_CR checkout 
ok 2532 - setup CRLF_mix_LF checkout 
ok 2533 - setup LF_nul checkout 
ok 2534 - ls-files --eol attr=auto ident aeol= core.autocrlf=false core.eol=
ok 2535 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=LF
ok 2536 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=CRLF
ok 2537 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 2538 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=LF_mix_CR
ok 2539 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=LF_nul
ok 2540 - setup config for checkout attr=auto ident=ident aeol= core.autocrlf=false
ok 2541 - setup LF checkout  with -c core.eol=native
ok 2542 - setup CRLF checkout  with -c core.eol=native
ok 2543 - setup LF_mix_CR checkout  with -c core.eol=native
ok 2544 - setup CRLF_mix_LF checkout  with -c core.eol=native
ok 2545 - setup LF_nul checkout  with -c core.eol=native
ok 2546 - ls-files --eol attr=auto ident aeol= core.autocrlf=false core.eol=native
ok 2547 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=LF
ok 2548 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=CRLF
ok 2549 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 2550 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 2551 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 2552 - setup config for checkout attr= ident=ident aeol=lf core.autocrlf=false
ok 2553 - setup LF checkout 
ok 2554 - setup CRLF checkout 
ok 2555 - setup LF_mix_CR checkout 
ok 2556 - setup CRLF_mix_LF checkout 
ok 2557 - setup LF_nul checkout 
ok 2558 - ls-files --eol attr= ident aeol=lf core.autocrlf=false core.eol=
ok 2559 - checkout attr= ident aeol=lf core.autocrlf=false core.eol= file=LF
ok 2560 - checkout attr= ident aeol=lf core.autocrlf=false core.eol= file=CRLF
ok 2561 - checkout attr= ident aeol=lf core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 2562 - checkout attr= ident aeol=lf core.autocrlf=false core.eol= file=LF_mix_CR
ok 2563 - checkout attr= ident aeol=lf core.autocrlf=false core.eol= file=LF_nul
ok 2564 - setup config for checkout attr= ident=ident aeol=crlf core.autocrlf=false
ok 2565 - setup LF checkout 
ok 2566 - setup CRLF checkout 
ok 2567 - setup LF_mix_CR checkout 
ok 2568 - setup CRLF_mix_LF checkout 
ok 2569 - setup LF_nul checkout 
ok 2570 - ls-files --eol attr= ident aeol=crlf core.autocrlf=false core.eol=
ok 2571 - checkout attr= ident aeol=crlf core.autocrlf=false core.eol= file=LF
ok 2572 - checkout attr= ident aeol=crlf core.autocrlf=false core.eol= file=CRLF
ok 2573 - checkout attr= ident aeol=crlf core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 2574 - checkout attr= ident aeol=crlf core.autocrlf=false core.eol= file=LF_mix_CR
ok 2575 - checkout attr= ident aeol=crlf core.autocrlf=false core.eol= file=LF_nul
ok 2576 - setup config for checkout attr= ident=ident aeol=lf core.autocrlf=true
ok 2577 - setup LF checkout 
ok 2578 - setup CRLF checkout 
ok 2579 - setup LF_mix_CR checkout 
ok 2580 - setup CRLF_mix_LF checkout 
ok 2581 - setup LF_nul checkout 
ok 2582 - ls-files --eol attr= ident aeol=lf core.autocrlf=true core.eol=
ok 2583 - checkout attr= ident aeol=lf core.autocrlf=true core.eol= file=LF
ok 2584 - checkout attr= ident aeol=lf core.autocrlf=true core.eol= file=CRLF
ok 2585 - checkout attr= ident aeol=lf core.autocrlf=true core.eol= file=CRLF_mix_LF
ok 2586 - checkout attr= ident aeol=lf core.autocrlf=true core.eol= file=LF_mix_CR
ok 2587 - checkout attr= ident aeol=lf core.autocrlf=true core.eol= file=LF_nul
ok 2588 - setup config for checkout attr= ident=ident aeol=crlf core.autocrlf=true
ok 2589 - setup LF checkout 
ok 2590 - setup CRLF checkout 
ok 2591 - setup LF_mix_CR checkout 
ok 2592 - setup CRLF_mix_LF checkout 
ok 2593 - setup LF_nul checkout 
ok 2594 - ls-files --eol attr= ident aeol=crlf core.autocrlf=true core.eol=
ok 2595 - checkout attr= ident aeol=crlf core.autocrlf=true core.eol= file=LF
ok 2596 - checkout attr= ident aeol=crlf core.autocrlf=true core.eol= file=CRLF
ok 2597 - checkout attr= ident aeol=crlf core.autocrlf=true core.eol= file=CRLF_mix_LF
ok 2598 - checkout attr= ident aeol=crlf core.autocrlf=true core.eol= file=LF_mix_CR
ok 2599 - checkout attr= ident aeol=crlf core.autocrlf=true core.eol= file=LF_nul
ok 2600 - ls-files --eol -d -z
# passed all 2600 test(s)
1..2600
*** t0028-working-tree-encoding.sh ***
ok 1 - setup test files
ok 2 - ensure UTF-8 is stored in Git
ok 3 - re-encode to UTF-16 on checkout
ok 4 - re-encode to UTF-16-LE-BOM on checkout
ok 5 - check $GIT_DIR/info/attributes support
ok 6 - check prohibited UTF-16 BOM
ok 7 - check required UTF-16 BOM
ok 8 - eol conversion for UTF-16 encoded files on checkout
ok 9 - check prohibited UTF-32 BOM
ok 10 - check required UTF-32 BOM
ok 11 - eol conversion for UTF-32 encoded files on checkout
ok 12 - check unsupported encodings
ok 13 - error if encoding round trip is not the same during refresh
ok 14 - error if encoding garbage is already in Git
ok 15 - check roundtrip encoding
ok 16 - Commit UTF-8, checkout UTF-8
ok 17 - Commit UTF-8, checkout UTF-16LE
ok 18 - Commit UTF-8, checkout UTF-16BE
ok 19 - Commit UTF-8, checkout UTF-16LE-BOM
ok 20 - Commit UTF-8, checkout UTF-16BE-BOM
ok 21 - Commit UTF-8, checkout UTF-32LE
ok 22 - Commit UTF-8, checkout UTF-32BE
# passed all 22 test(s)
1..22
*** t0029-core-unsetenvvars.sh ***
1..0 # SKIP skipping Windows-specific tests
*** t0030-stripspace.sh ***
ok 1 - long lines without spaces should be unchanged
ok 2 - lines with spaces at the beginning should be unchanged
ok 3 - lines with intermediate spaces should be unchanged
ok 4 - consecutive blank lines should be unified
ok 5 - only consecutive blank lines should be completely removed
ok 6 - consecutive blank lines at the beginning should be removed
ok 7 - consecutive blank lines at the end should be removed
ok 8 - text without newline at end should end with newline
ok 9 - text plus spaces without newline at end should end with newline
ok 10 - text plus spaces without newline at end should not show spaces
ok 11 - text plus spaces without newline should show the correct lines
ok 12 - text plus spaces at end should not show spaces
ok 13 - text plus spaces at end should be cleaned and newline must remain
ok 14 - spaces with newline at end should be replaced with empty string
ok 15 - spaces without newline at end should not show spaces
ok 16 - spaces without newline at end should be replaced with empty string
ok 17 - consecutive text lines should be unchanged
ok 18 - strip comments, too
ok 19 - strip comments with changed comment char
ok 20 - strip comments with changed comment string
ok 21 - newline as commentchar is forbidden
ok 22 - empty commentchar is forbidden
ok 23 - -c with single line
ok 24 - -c with single line followed by empty line
ok 25 - -c with newline only
ok 26 - --comment-lines with single line
ok 27 - -c with changed comment char
ok 28 - -c with comment char defined in .git/config
ok 29 - -c outside git repository
ok 30 - avoid SP-HT sequence in commented line
# passed all 30 test(s)
1..30
*** t0032-reftable-unittest.sh ***
ok 1 - unittests
# passed all 1 test(s)
1..1
*** t0033-safe-directory.sh ***
ok 1 - safe.directory is not set
ok 2 - safe.directory on the command line
ok 3 - safe.directory in the environment
ok 4 - safe.directory in GIT_CONFIG_PARAMETERS
ok 5 - ignoring safe.directory in repo config
ok 6 - safe.directory does not match
ok 7 - path exist as different key
ok 8 - safe.directory matches
ok 9 - safe.directory matches, but is reset
ok 10 - safe.directory=*
ok 11 - safe.directory=*, but is reset
ok 12 - safe.directory in included file
ok 13 - local clone of unowned repo refused in unsafe directory
ok 14 - local clone of unowned repo accepted in safe directory
# passed all 14 test(s)
1..14
*** t0034-root-safe-directory.sh ***
1..0 # SKIP You must set env var GIT_TEST_ALLOW_SUDO=YES in order to run this test
*** t0035-safe-bare-repository.sh ***
ok 1 - setup an embedded bare repo, secondary worktree and submodule
ok 2 - safe.bareRepository unset
ok 3 - safe.bareRepository=all
ok 4 - safe.bareRepository=explicit
ok 5 - safe.bareRepository in the repository
ok 6 - safe.bareRepository on the command line
ok 7 - safe.bareRepository in included file
ok 8 - no trace when GIT_DIR is explicitly provided
ok 9 - no trace when "bare repository" is .git
ok 10 - no trace when "bare repository" is a subdir of .git
ok 11 - no trace in $GIT_DIR of secondary worktree
ok 12 - no trace in $GIT_DIR of a submodule
# passed all 12 test(s)
1..12
*** t0040-parse-options.sh ***
ok 1 - test help
ok 2 - OPT_BOOL() #1
ok 3 - OPT_BOOL() #2
ok 4 - OPT_BOOL() #3
ok 5 - OPT_BOOL() #4
ok 6 - OPT_BOOL() #5
ok 7 - OPT_BOOL() is idempotent #1
ok 8 - OPT_BOOL() is idempotent #2
ok 9 - OPT_BOOL() negation #1
ok 10 - OPT_BOOL() negation #2
ok 11 - OPT_BOOL() no negation #1
ok 12 - OPT_BOOL() no negation #2
ok 13 - OPT_BOOL() positivation
ok 14 - OPT_INT() negative
ok 15 - OPT_MAGNITUDE() simple
ok 16 - OPT_MAGNITUDE() kilo
ok 17 - OPT_MAGNITUDE() mega
ok 18 - OPT_MAGNITUDE() giga
ok 19 - OPT_MAGNITUDE() 3giga
ok 20 - short options
ok 21 - long options
ok 22 - missing required value
ok 23 - superfluous value provided: boolean
ok 24 - superfluous value provided: boolean, abbreviated
ok 25 - superfluous value provided: cmdmode
ok 26 - intermingled arguments
ok 27 - unambiguously abbreviated option
ok 28 - unambiguously abbreviated option with "="
ok 29 - ambiguously abbreviated option
ok 30 - non ambiguous option (after two options it abbreviates)
ok 31 - Alias options do not contribute to abbreviation
ok 32 - detect possible typos
ok 33 - detect possible typos
ok 34 - OPT_CALLBACK() and OPT_BIT() work
ok 35 - OPT_CALLBACK() and callback errors work
ok 36 - OPT_BIT() and OPT_SET_INT() work
ok 37 - OPT_NEGBIT() and OPT_SET_INT() work
ok 38 - OPT_BIT() works
ok 39 - OPT_NEGBIT() works
ok 40 - OPT_CMDMODE() works
ok 41 - OPT_CMDMODE() detects incompatibility (1)
ok 42 - OPT_CMDMODE() detects incompatibility (2)
ok 43 - OPT_CMDMODE() detects incompatibility (3)
ok 44 - OPT_CMDMODE() detects incompatibility (4)
ok 45 - OPT_COUNTUP() with PARSE_OPT_NODASH works
ok 46 - OPT_NUMBER_CALLBACK() works
ok 47 - negation of OPT_NONEG flags is not ambiguous
ok 48 - --list keeps list of strings
ok 49 - --no-list resets list
ok 50 - multiple quiet levels
ok 51 - multiple verbose levels
ok 52 - --no-quiet sets --quiet to 0
ok 53 - --no-quiet resets multiple -q to 0
ok 54 - --no-verbose sets verbose to 0
ok 55 - --no-verbose resets multiple verbose to 0
ok 56 - GIT_TEST_DISALLOW_ABBREVIATED_OPTIONS works
ok 57 - --end-of-options treats remainder as args
ok 58 - KEEP_DASHDASH works
ok 59 - KEEP_ARGV0 works
ok 60 - STOP_AT_NON_OPTION works
ok 61 - KEEP_UNKNOWN_OPT works
ok 62 - NO_INTERNAL_HELP works for -h
ok 63 - NO_INTERNAL_HELP works for --help
ok 64 - NO_INTERNAL_HELP works for --help-all
ok 65 - KEEP_UNKNOWN_OPT | NO_INTERNAL_HELP works
ok 66 - subcommand - no subcommand shows error and usage
ok 67 - subcommand - subcommand after -- shows error and usage
ok 68 - subcommand - subcommand after --end-of-options shows error and usage
ok 69 - subcommand - unknown subcommand shows error and usage
ok 70 - subcommand - subcommands cannot be abbreviated
ok 71 - subcommand - no negated subcommands
ok 72 - subcommand - simple
ok 73 - subcommand - stop parsing at the first subcommand
ok 74 - subcommand - KEEP_ARGV0
ok 75 - subcommand - SUBCOMMAND_OPTIONAL + subcommand not given
ok 76 - subcommand - SUBCOMMAND_OPTIONAL + given subcommand
ok 77 - subcommand - SUBCOMMAND_OPTIONAL + subcommand not given + unknown dashless args
ok 78 - subcommand - SUBCOMMAND_OPTIONAL + subcommand not given + unknown option
ok 79 - subcommand - SUBCOMMAND_OPTIONAL | KEEP_UNKNOWN_OPT + subcommand not given + unknown option
ok 80 - subcommand - SUBCOMMAND_OPTIONAL | KEEP_UNKNOWN_OPT + subcommand ignored after unknown option
ok 81 - subcommand - SUBCOMMAND_OPTIONAL | KEEP_UNKNOWN_OPT + command and subcommand options cannot be mixed
ok 82 - subcommand - SUBCOMMAND_OPTIONAL | KEEP_UNKNOWN_OPT | KEEP_ARGV0
ok 83 - subcommand - SUBCOMMAND_OPTIONAL | KEEP_UNKNOWN_OPT | KEEP_DASHDASH
ok 84 - subcommand - completion helper
ok 85 - subcommands are incompatible with STOP_AT_NON_OPTION
ok 86 - subcommands are incompatible with KEEP_UNKNOWN_OPT unless in combination with SUBCOMMAND_OPTIONAL
ok 87 - subcommands are incompatible with KEEP_DASHDASH unless in combination with SUBCOMMAND_OPTIONAL
ok 88 - negative magnitude
ok 89 - magnitude with units but no numbers
# passed all 89 test(s)
1..89
*** t0041-usage.sh ***
ok 1 - setup 
ok 2 - tag --contains <existent_tag>
ok 3 - tag --contains <inexistent_tag>
ok 4 - tag --no-contains <existent_tag>
ok 5 - tag --no-contains <inexistent_tag>
ok 6 - tag usage error
ok 7 - branch --contains <existent_commit>
ok 8 - branch --contains <inexistent_commit>
ok 9 - branch --no-contains <existent_commit>
ok 10 - branch --no-contains <inexistent_commit>
ok 11 - branch usage error
ok 12 - for-each-ref --contains <existent_object>
ok 13 - for-each-ref --contains <inexistent_object>
ok 14 - for-each-ref --no-contains <existent_object>
ok 15 - for-each-ref --no-contains <inexistent_object>
ok 16 - for-each-ref usage error
# passed all 16 test(s)
1..16
*** t0050-filesystem.sh ***
ok 1 - detection of case insensitive filesystem during repo init
ok 2 - detection of filesystem w/o symlink support during repo init
ok 3 - setup case tests
ok 4 - rename (case change)
ok 5 - merge (case change)
ok 6 # skip add directory (with different case) (missing CASE_INSENSITIVE_FS)
ok 7 # skip add (with different case) (missing CASE_INSENSITIVE_FS)
ok 8 - setup unicode normalization tests
ok 9 - rename (silent unicode normalization)
ok 10 - merge (silent unicode normalization)
ok 11 # skip checkout with no pathspec and a case insensitive fs (missing CASE_INSENSITIVE_FS)
# passed all 11 test(s)
1..11
*** t0051-windows-named-pipe.sh ***
1..0 # SKIP skipping Windows-specific tests
*** t0052-simple-ipc.sh ***
ok 1 - start simple command server
ok 2 - simple command server
ok 3 - servers cannot share the same path
ok 4 - big response
ok 5 - chunk response
ok 6 - slow response
ok 7 - sendbytes
ok 8 - stress test threads
ok 9 - stop-daemon works
# passed all 9 test(s)
1..9
*** t0055-beyond-symlinks.sh ***
ok 1 - setup
ok 2 - update-index --add beyond symlinks
ok 3 - add beyond symlinks
# passed all 3 test(s)
1..3
*** t0056-git-C.sh ***
ok 1 - "git -C <path>" runs git from the directory <path>
ok 2 - "git -C <path>" with an empty <path> is a no-op
ok 3 - Multiple -C options: "-C dir1 -C dir2" is equivalent to "-C dir1/dir2"
ok 4 - Effect on --git-dir option: "-C c --git-dir=a.git" is equivalent to "--git-dir c/a.git"
ok 5 - Order should not matter: "--git-dir=a.git -C c" is equivalent to "-C c --git-dir=a.git"
ok 6 - Effect on --work-tree option: "-C c/a.git --work-tree=../a"  is equivalent to "--work-tree=c/a --git-dir=c/a.git"
ok 7 - Order should not matter: "--work-tree=../a -C c/a.git" is equivalent to "-C c/a.git --work-tree=../a"
ok 8 - Effect on --git-dir and --work-tree options - "-C c --git-dir=a.git --work-tree=a" is equivalent to "--git-dir=c/a.git --work-tree=c/a"
ok 9 - Order should not matter: "-C c --git-dir=a.git --work-tree=a" is equivalent to "--git-dir=a.git -C c --work-tree=a"
ok 10 - Order should not matter: "-C c --git-dir=a.git --work-tree=a" is equivalent to "--git-dir=a.git --work-tree=a -C c"
ok 11 - Relative followed by fullpath: "-C ./here -C /there" is equivalent to "-C /there"
# passed all 11 test(s)
1..11
*** t0060-path-utils.sh ***
ok 1 - basename
ok 2 - dirname
ok 3 - normalize path:  => 
ok 4 - normalize path: . => 
ok 5 - normalize path: ./ => 
ok 6 - normalize path: ./. => 
ok 7 - normalize path: ./.. => ++failed++
ok 8 - normalize path: ../. => ++failed++
ok 9 - normalize path: ./../.// => ++failed++
ok 10 - normalize path: dir/.. => 
ok 11 - normalize path: dir/sub/../.. => 
ok 12 - normalize path: dir/sub/../../.. => ++failed++
ok 13 - normalize path: dir => dir
ok 14 - normalize path: dir// => dir/
ok 15 - normalize path: ./dir => dir
ok 16 - normalize path: dir/. => dir/
ok 17 - normalize path: dir///./ => dir/
ok 18 - normalize path: dir//sub/.. => dir/
ok 19 - normalize path: dir/sub/../ => dir/
ok 20 - normalize path: dir/sub/../. => dir/
ok 21 - normalize path: dir/s1/../s2/ => dir/s2/
ok 22 - normalize path: d1/s1///s2/..//../s3/ => d1/s3/
ok 23 - normalize path: d1/s1//../s2/../../d2 => d2
ok 24 - normalize path: d1/.../d2 => d1/.../d2
ok 25 - normalize path: d1/..././../d2 => d1/d2
ok 26 - normalize path: / => /
ok 27 - normalize path: // => /
ok 28 - normalize path: /// => /
ok 29 - normalize path: /. => /
ok 30 - normalize path: /./ => /
ok 31 - normalize path: /./.. => ++failed++
ok 32 - normalize path: /../. => ++failed++
ok 33 - normalize path: /./../.// => ++failed++
ok 34 - normalize path: /dir/.. => /
ok 35 - normalize path: /dir/sub/../.. => /
ok 36 - normalize path: /dir/sub/../../.. => ++failed++
ok 37 - normalize path: /dir => /dir
ok 38 - normalize path: /dir// => /dir/
ok 39 - normalize path: /./dir => /dir
ok 40 - normalize path: /dir/. => /dir/
ok 41 - normalize path: /dir///./ => /dir/
ok 42 - normalize path: /dir//sub/.. => /dir/
ok 43 - normalize path: /dir/sub/../ => /dir/
ok 44 - normalize path: //dir/sub/../. => /dir/
ok 45 - normalize path: /dir/s1/../s2/ => /dir/s2/
ok 46 - normalize path: /d1/s1///s2/..//../s3/ => /d1/s3/
ok 47 - normalize path: /d1/s1//../s2/../../d2 => /d2
ok 48 - normalize path: /d1/.../d2 => /d1/.../d2
ok 49 - normalize path: /d1/..././../d2 => /d1/d2
ok 50 - longest ancestor: / / => -1
ok 51 - longest ancestor: /foo / => 0
ok 52 - longest ancestor: /foo /fo => -1
ok 53 - longest ancestor: /foo /foo => -1
ok 54 - longest ancestor: /foo /bar => -1
ok 55 - longest ancestor: /foo /foo/bar => -1
ok 56 - longest ancestor: /foo /foo:/bar => -1
ok 57 - longest ancestor: /foo /:/foo:/bar => 0
ok 58 - longest ancestor: /foo /foo:/:/bar => 0
ok 59 - longest ancestor: /foo /:/bar:/foo => 0
ok 60 - longest ancestor: /foo/bar / => 0
ok 61 - longest ancestor: /foo/bar /fo => -1
ok 62 - longest ancestor: /foo/bar /foo => 4
ok 63 - longest ancestor: /foo/bar /foo/ba => -1
ok 64 - longest ancestor: /foo/bar /:/fo => 0
ok 65 - longest ancestor: /foo/bar /foo:/foo/ba => 4
ok 66 - longest ancestor: /foo/bar /bar => -1
ok 67 - longest ancestor: /foo/bar /fo => -1
ok 68 - longest ancestor: /foo/bar /foo:/bar => 4
ok 69 - longest ancestor: /foo/bar /:/foo:/bar => 4
ok 70 - longest ancestor: /foo/bar /foo:/:/bar => 4
ok 71 - longest ancestor: /foo/bar /:/bar:/fo => 0
ok 72 - longest ancestor: /foo/bar /:/bar => 0
ok 73 - longest ancestor: /foo/bar /foo => 4
ok 74 - longest ancestor: /foo/bar /foo:/bar => 4
ok 75 - longest ancestor: /foo/bar /bar => -1
ok 76 # skip longest ancestor: C:/Users/me C:/ => 2 (missing MINGW)
ok 77 # skip longest ancestor: D:/Users/me C:/ => -1 (missing MINGW)
ok 78 # skip longest ancestor: //server/share/my-directory //server/share/ => 14 (missing MINGW)
ok 79 - strip_path_suffix
ok 80 - absolute path rejects the empty string
ok 81 # skip <drive-letter>:\\abc is an absolute path (missing MINGW)
ok 82 - real path rejects the empty string
ok 83 - real path works on absolute paths 1
ok 84 - real path works on absolute paths 2
ok 85 - real path removes extra leading slashes
ok 86 - real path removes other extra slashes
ok 87 - real path works on symlinks
ok 88 - prefix_path works with absolute paths to work tree symlinks
ok 89 - prefix_path works with only absolute path to work tree
ok 90 - prefix_path rejects absolute path to dir with same beginning as work tree
ok 91 - prefix_path works with absolute path to a symlink to work tree having  same beginning as work tree
ok 92 - relative path: /foo/a/b/c/ /foo/a/b/ => c/
ok 93 - relative path: /foo/a/b/c/ /foo/a/b => c/
ok 94 - relative path: /foo/a//b//c/ ///foo/a/b// => c/
ok 95 - relative path: /foo/a/b /foo/a/b => ./
ok 96 - relative path: /foo/a/b/ /foo/a/b => ./
ok 97 - relative path: /foo/a /foo/a/b => ../
ok 98 - relative path: / /foo/a/b/ => ../../../
ok 99 - relative path: /foo/a/c /foo/a/b/ => ../c
ok 100 - relative path: /foo/a/c /foo/a/b => ../c
ok 101 - relative path: /foo/x/y /foo/a/b/ => ../../x/y
ok 102 - relative path: /foo/a/b <empty> => /foo/a/b
ok 103 - relative path: /foo/a/b <null> => /foo/a/b
ok 104 - relative path: foo/a/b/c/ foo/a/b/ => c/
ok 105 - relative path: foo/a/b/c/ foo/a/b => c/
ok 106 - relative path: foo/a/b//c foo/a//b => c
ok 107 - relative path: foo/a/b/ foo/a/b/ => ./
ok 108 - relative path: foo/a/b/ foo/a/b => ./
ok 109 - relative path: foo/a foo/a/b => ../
ok 110 - relative path: foo/x/y foo/a/b => ../../x/y
ok 111 - relative path: foo/a/c foo/a/b => ../c
ok 112 - relative path: foo/a/b /foo/x/y => foo/a/b
ok 113 - relative path: /foo/a/b foo/x/y => /foo/a/b
ok 114 # skip relative path: d:/a/b D:/a/c => ../b (missing MINGW)
ok 115 # skip relative path: C:/a/b D:/a/c => C:/a/b (missing MINGW)
ok 116 - relative path: foo/a/b <empty> => foo/a/b
ok 117 - relative path: foo/a/b <null> => foo/a/b
ok 118 - relative path: <empty> /foo/a/b => ./
ok 119 - relative path: <empty> <empty> => ./
ok 120 - relative path: <empty> <null> => ./
ok 121 - relative path: <null> <empty> => ./
ok 122 - relative path: <null> <null> => ./
ok 123 - relative path: <null> /foo/a/b => ./
ok 124 - git-path A=B info/grafts => .git/info/grafts
ok 125 - git-path GIT_GRAFT_FILE=foo info/grafts => foo
ok 126 - git-path GIT_GRAFT_FILE=foo info/////grafts => foo
ok 127 - git-path GIT_INDEX_FILE=foo index => foo
ok 128 - git-path GIT_INDEX_FILE=foo index/foo => .git/index/foo
ok 129 - git-path GIT_INDEX_FILE=foo index2 => .git/index2
ok 130 - setup fake objects directory foo
ok 131 - git-path GIT_OBJECT_DIRECTORY=foo objects => foo
ok 132 - git-path GIT_OBJECT_DIRECTORY=foo objects/foo => foo/foo
ok 133 - git-path GIT_OBJECT_DIRECTORY=foo objects2 => .git/objects2
ok 134 - setup common repository
ok 135 - git-path GIT_COMMON_DIR=bar index => .git/index
ok 136 - git-path GIT_COMMON_DIR=bar index.lock => .git/index.lock
ok 137 - git-path GIT_COMMON_DIR=bar HEAD => .git/HEAD
ok 138 - git-path GIT_COMMON_DIR=bar logs/HEAD => .git/logs/HEAD
ok 139 - git-path GIT_COMMON_DIR=bar logs/HEAD.lock => .git/logs/HEAD.lock
ok 140 - git-path GIT_COMMON_DIR=bar logs/refs/bisect/foo => .git/logs/refs/bisect/foo
ok 141 - git-path GIT_COMMON_DIR=bar logs/refs => bar/logs/refs
ok 142 - git-path GIT_COMMON_DIR=bar logs/refs/ => bar/logs/refs/
ok 143 - git-path GIT_COMMON_DIR=bar logs/refs/bisec/foo => bar/logs/refs/bisec/foo
ok 144 - git-path GIT_COMMON_DIR=bar logs/refs/bisec => bar/logs/refs/bisec
ok 145 - git-path GIT_COMMON_DIR=bar logs/refs/bisectfoo => bar/logs/refs/bisectfoo
ok 146 - git-path GIT_COMMON_DIR=bar objects => bar/objects
ok 147 - git-path GIT_COMMON_DIR=bar objects/bar => bar/objects/bar
ok 148 - git-path GIT_COMMON_DIR=bar info/exclude => bar/info/exclude
ok 149 - git-path GIT_COMMON_DIR=bar info/grafts => bar/info/grafts
ok 150 - git-path GIT_COMMON_DIR=bar info/sparse-checkout => .git/info/sparse-checkout
ok 151 - git-path GIT_COMMON_DIR=bar info//sparse-checkout => .git/info//sparse-checkout
ok 152 - git-path GIT_COMMON_DIR=bar remotes/bar => bar/remotes/bar
ok 153 - git-path GIT_COMMON_DIR=bar branches/bar => bar/branches/bar
ok 154 - git-path GIT_COMMON_DIR=bar logs/refs/heads/main => bar/logs/refs/heads/main
ok 155 - git-path GIT_COMMON_DIR=bar refs/heads/main => bar/refs/heads/main
ok 156 - git-path GIT_COMMON_DIR=bar refs/bisect/foo => .git/refs/bisect/foo
ok 157 - git-path GIT_COMMON_DIR=bar hooks/me => bar/hooks/me
ok 158 - git-path GIT_COMMON_DIR=bar config => bar/config
ok 159 - git-path GIT_COMMON_DIR=bar packed-refs => bar/packed-refs
ok 160 - git-path GIT_COMMON_DIR=bar shallow => bar/shallow
ok 161 - git-path GIT_COMMON_DIR=bar common => bar/common
ok 162 - git-path GIT_COMMON_DIR=bar common/file => bar/common/file
ok 163 - test_submodule_relative_url: ../ ../foo ../submodule => ../../submodule
ok 164 - test_submodule_relative_url: ../ ../foo/bar ../submodule => ../../foo/submodule
ok 165 - test_submodule_relative_url: ../ ../foo/submodule ../submodule => ../../foo/submodule
ok 166 - test_submodule_relative_url: ../ ./foo ../submodule => ../submodule
ok 167 - test_submodule_relative_url: ../ ./foo/bar ../submodule => ../foo/submodule
ok 168 - test_submodule_relative_url: ../../../ ../foo/bar ../sub/a/b/c => ../../../../foo/sub/a/b/c
ok 169 - test_submodule_relative_url: ../ $(@D)/t/trash directory.t0060-path-utils/addtest ../repo => $(@D)/t/trash directory.t0060-path-utils/repo
ok 170 - test_submodule_relative_url: ../ foo/bar ../submodule => ../foo/submodule
ok 171 - test_submodule_relative_url: ../ foo ../submodule => ../submodule
ok 172 - test_submodule_relative_url: (null) ../foo/bar ../sub/a/b/c => ../foo/sub/a/b/c
ok 173 - test_submodule_relative_url: (null) ../foo/bar ../sub/a/b/c/ => ../foo/sub/a/b/c
ok 174 - test_submodule_relative_url: (null) ../foo/bar/ ../sub/a/b/c => ../foo/sub/a/b/c
ok 175 - test_submodule_relative_url: (null) ../foo/bar ../submodule => ../foo/submodule
ok 176 - test_submodule_relative_url: (null) ../foo/submodule ../submodule => ../foo/submodule
ok 177 - test_submodule_relative_url: (null) ../foo ../submodule => ../submodule
ok 178 - test_submodule_relative_url: (null) ./foo/bar ../submodule => foo/submodule
ok 179 - test_submodule_relative_url: (null) ./foo ../submodule => submodule
ok 180 - test_submodule_relative_url: (null) //somewhere else/repo ../subrepo => //somewhere else/subrepo
ok 181 - test_submodule_relative_url: (null) //somewhere else/repo ../../subrepo => //subrepo
ok 182 - test_submodule_relative_url: (null) //somewhere else/repo ../../../subrepo => /subrepo
ok 183 - test_submodule_relative_url: (null) //somewhere else/repo ../../../../subrepo => subrepo
ok 184 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/subsuper_update_r ../subsubsuper_update_r => $(@D)/t/trash directory.t0060-path-utils/subsubsuper_update_r
ok 185 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/super_update_r2 ../subsuper_update_r => $(@D)/t/trash directory.t0060-path-utils/subsuper_update_r
ok 186 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/. ../. => $(@D)/t/trash directory.t0060-path-utils/.
ok 187 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils ./. => $(@D)/t/trash directory.t0060-path-utils/.
ok 188 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/addtest ../repo => $(@D)/t/trash directory.t0060-path-utils/repo
ok 189 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils ./å äö => $(@D)/t/trash directory.t0060-path-utils/å äö
ok 190 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/. ../submodule => $(@D)/t/trash directory.t0060-path-utils/submodule
ok 191 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/submodule ../submodule => $(@D)/t/trash directory.t0060-path-utils/submodule
ok 192 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/home2/../remote ../bundle1 => $(@D)/t/trash directory.t0060-path-utils/home2/../bundle1
ok 193 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/submodule_update_repo ./. => $(@D)/t/trash directory.t0060-path-utils/submodule_update_repo/.
ok 194 - test_submodule_relative_url: (null) file:///tmp/repo ../subrepo => file:///tmp/subrepo
ok 195 - test_submodule_relative_url: (null) foo/bar ../submodule => foo/submodule
ok 196 - test_submodule_relative_url: (null) foo ../submodule => submodule
ok 197 - test_submodule_relative_url: (null) helper:://hostname/repo ../subrepo => helper:://hostname/subrepo
ok 198 - test_submodule_relative_url: (null) helper:://hostname/repo ../../subrepo => helper:://subrepo
ok 199 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../subrepo => helper::/subrepo
ok 200 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../../subrepo => helper::subrepo
ok 201 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../../../subrepo => helper:subrepo
ok 202 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../../../../subrepo => .:subrepo
ok 203 - test_submodule_relative_url: (null) ssh://hostname/repo ../subrepo => ssh://hostname/subrepo
ok 204 - test_submodule_relative_url: (null) ssh://hostname/repo ../../subrepo => ssh://subrepo
ok 205 - test_submodule_relative_url: (null) ssh://hostname/repo ../../../subrepo => ssh:/subrepo
ok 206 - test_submodule_relative_url: (null) ssh://hostname/repo ../../../../subrepo => ssh:subrepo
ok 207 - test_submodule_relative_url: (null) ssh://hostname/repo ../../../../../subrepo => .:subrepo
ok 208 - test_submodule_relative_url: (null) ssh://hostname:22/repo ../subrepo => ssh://hostname:22/subrepo
ok 209 - test_submodule_relative_url: (null) user@host:path/to/repo ../subrepo => user@host:path/to/subrepo
ok 210 - test_submodule_relative_url: (null) user@host:repo ../subrepo => user@host:subrepo
ok 211 - test_submodule_relative_url: (null) user@host:repo ../../subrepo => .:subrepo
ok 212 - match .gitmodules
ok 213 - match .gitattributes
ok 214 - match .gitignore
ok 215 - match .mailmap
ok 216 # skip is_valid_path() on Windows (missing MINGW)
ok 217 # skip RUNTIME_PREFIX works (missing RUNTIME_PREFIX of !VALGRIND,RUNTIME_PREFIX,CAN_EXEC_IN_PWD)
ok 218 # skip %(prefix)/ works (missing RUNTIME_PREFIX of !VALGRIND,RUNTIME_PREFIX,CAN_EXEC_IN_PWD)
ok 219 - do_files_match()
# passed all 219 test(s)
1..219
*** t0061-run-command.sh ***
ok 1 # skip subprocess inherits only std handles (missing MINGW)
ok 2 - start_command reports ENOENT (slash)
ok 3 - start_command reports ENOENT (no slash)
ok 4 - run_command can run a command
ok 5 - run_command is restricted to PATH
ok 6 - run_command can run a script without a #! line
ok 7 - run_command does not try to execute a directory
ok 8 - run_command passes over non-executable file
ok 9 - run_command reports EACCES
ok 10 - unreadable directory in PATH
ok 11 - run_command runs in parallel with more jobs available than tasks
ok 12 - run_command runs ungrouped in parallel with more jobs available than tasks
ok 13 - run_command runs in parallel with as many jobs as tasks
ok 14 - run_command runs ungrouped in parallel with as many jobs as tasks
ok 15 - run_command runs in parallel with more tasks than jobs available
ok 16 - run_command runs ungrouped in parallel with more tasks than jobs available
ok 17 - run_command is asked to abort gracefully
ok 18 - run_command is asked to abort gracefully (ungroup)
ok 19 - run_command outputs 
ok 20 - run_command outputs (ungroup) 
ok 21 - GIT_TRACE with environment variables
ok 22 # skip verify curlies are quoted properly (missing MINGW)
ok 23 # skip can spawn .bat with argv[0] containing spaces (missing MINGW)
# passed all 23 test(s)
1..23
*** t0062-revision-walking.sh ***
ok 1 - setup
ok 2 - revision walking can be done twice
# passed all 2 test(s)
1..2
*** t0063-string-list.sh ***
ok 1 - split foo:bar:baz at :, max -1
ok 2 - split foo:bar:baz at :, max 0
ok 3 - split foo:bar:baz at :, max 1
ok 4 - split foo:bar:baz at :, max 2
ok 5 - split foo:bar: at :, max -1
ok 6 - split  at :, max -1
ok 7 - split : at :, max -1
ok 8 - split (in place) foo:;:bar:;:baz:;: at :;, max -1
ok 9 - split (in place) foo:;:bar:;:baz at :;, max 0
ok 10 - split (in place) foo:;:bar:;:baz at :;, max 1
ok 11 - split (in place) foo:;:bar:;:baz at :;, max 2
ok 12 - split (in place) foo:;:bar:;: at :;, max -1
ok 13 - test filter_string_list
ok 14 - test remove_duplicates
# passed all 14 test(s)
1..14
*** t0064-oid-array.sh ***
ok 1 - ordered enumeration
ok 2 - ordered enumeration with duplicate suppression
ok 3 - lookup
ok 4 - lookup non-existing entry
ok 5 - lookup with duplicates
ok 6 - lookup non-existing entry with duplicates
ok 7 - lookup with almost duplicate values
ok 8 - lookup with single duplicate value
# passed all 8 test(s)
1..8
*** t0065-strcmp-offset.sh ***
ok 1 - strcmp_offset(abc, abc)
ok 2 - strcmp_offset(abc, def)
ok 3 - strcmp_offset(abc, abz)
ok 4 - strcmp_offset(abc, abcdef)
# passed all 4 test(s)
1..4
*** t0066-dir-iterator.sh ***
ok 1 - setup
ok 2 - dir-iterator should iterate through all files
ok 3 - dir-iterator should list files in the correct order
ok 4 - begin should fail upon inexistent paths
ok 5 - begin should fail upon non directory paths
ok 6 - advance should not fail on errors by default
ok 7 - advance should fail on errors, w/ pedantic flag
ok 8 - setup dirs with symlinks
ok 9 - dir-iterator should not follow symlinks by default
ok 10 - dir-iterator does not resolve top-level symlinks
# passed all 10 test(s)
1..10
*** t0067-parse_pathspec_file.sh ***
ok 1 - one item from stdin
ok 2 - one item from file
ok 3 - NUL delimiters
ok 4 - LF delimiters
ok 5 - no trailing delimiter
ok 6 - CRLF delimiters
ok 7 - quotes
ok 8 - --pathspec-file-nul takes quotes literally
# passed all 8 test(s)
1..8
*** t0068-for-each-repo.sh ***
ok 1 - run based on configured value
ok 2 - do nothing on empty config
ok 3 - error on bad config keys
ok 4 - error on NULL value for config keys
# passed all 4 test(s)
1..4
*** t0069-oidtree.sh ***
ok 1 - oidtree insert and contains
ok 2 - oidtree each
# passed all 2 test(s)
1..2
*** t0070-fundamental.sh ***
ok 1 - mktemp to nonexistent directory prints filename
ok 2 - mktemp to unwritable directory prints filename
ok 3 - git_mkstemps_mode does not fail if fd 0 is not open
ok 4 - check for a bug in the regex routines
ok 5 - incomplete sideband messages are reassembled
ok 6 - eof on sideband message is reported
ok 7 - missing sideband designator is reported
ok 8 - unpack-sideband: --no-chomp-newline
ok 9 - unpack-sideband: --chomp-newline (default)
ok 10 - unpack-sideband: packet_reader_read() consumes sideband, no chomp payload
ok 11 - unpack-sideband: packet_reader_read() consumes sideband, chomp payload
# passed all 11 test(s)
1..11
*** t0071-sort.sh ***
ok 1 - DEFINE_LIST_SORT_DEBUG
# passed all 1 test(s)
1..1
*** t0080-unit-test-output.sh ***
ok 1 - TAP output from unit tests
# passed all 1 test(s)
1..1
*** t0081-find-pack.sh ***
ok 1 - setup
ok 2 - repack everything into a single packfile
ok 3 - add more packfiles
ok 4 - add more commits (as loose objects)
# passed all 4 test(s)
1..4
*** t0090-cache-tree.sh ***
ok 1 - initial commit has cache-tree
ok 2 - read-tree HEAD establishes cache-tree
ok 3 - git-add invalidates cache-tree
ok 4 - git-add in subdir invalidates cache-tree
ok 5 - git-add in subdir does not invalidate sibling cache-tree
ok 6 - update-index invalidates cache-tree
ok 7 - write-tree establishes cache-tree
ok 8 - test-tool scrap-cache-tree works
ok 9 - second commit has cache-tree
ok 10 - commit --interactive gives cache-tree on partial commit
ok 11 - commit -p with shrinking cache-tree
ok 12 - commit in child dir has cache-tree
ok 13 - reset --hard gives cache-tree
ok 14 - reset --hard without index gives cache-tree
ok 15 - checkout gives cache-tree
ok 16 - checkout -b gives cache-tree
ok 17 - checkout -B gives cache-tree
ok 18 - merge --ff-only maintains cache-tree
ok 19 - merge maintains cache-tree
ok 20 - partial commit gives cache-tree
ok 21 - no phantom error when switching trees
ok 22 - switching trees does not invalidate shared index
# passed all 22 test(s)
1..22
*** t0091-bugreport.sh ***
ok 1 - create a report
ok 2 - report contains wanted template (before first section)
ok 3 - sanity check "System Info" section
ok 4 - dies if file with same name as report already exists
ok 5 - --output-directory puts the report in the provided dir
ok 6 - incorrect arguments abort with usage
ok 7 - incorrect positional arguments abort with usage and hint
ok 8 - runs outside of a git dir
ok 9 - can create leading directories outside of a git dir
ok 10 - indicates populated hooks
ok 11 - --diagnose creates diagnostics zip archive
ok 12 - --diagnose=stats excludes .git dir contents
ok 13 - --diagnose=all includes .git dir contents
# passed all 13 test(s)
1..13
*** t0092-diagnose.sh ***
ok 1 - creates diagnostics zip archive
ok 2 - counts loose objects
ok 3 - --mode=stats excludes .git dir contents
ok 4 - --mode=all includes .git dir contents
# passed all 4 test(s)
1..4
*** t0095-bloom.sh ***
ok 1 - compute unseeded murmur3 hash for empty string
ok 2 - compute unseeded murmur3 hash for test string 1
ok 3 - compute unseeded murmur3 hash for test string 2
ok 4 - compute bloom key for empty string
ok 5 - compute bloom key for whitespace
ok 6 - compute bloom key for test string 1
ok 7 - compute bloom key for test string 2
ok 8 - get bloom filters for commit with no changes
ok 9 - get bloom filter for commit with 10 changes
ok 10 # skip get bloom filter for commit with 513 changes (missing EXPENSIVE)
# passed all 10 test(s)
1..10
*** t0100-previous.sh ***
ok 1 - branch -d @{-1}
ok 2 - branch -d @{-12} when there is not enough switches yet
ok 3 - merge @{-1}
ok 4 - merge @{-1}~1
ok 5 - merge @{-100} before checking out that many branches yet
ok 6 - log -g @{-1}
# passed all 6 test(s)
1..6
*** t0101-at-syntax.sh ***
ok 1 - setup
ok 2 - @{0} shows current
ok 3 - @{1} shows old
ok 4 - @{now} shows current
ok 5 - @{2001-09-17} (before the first commit) shows old
ok 6 - silly approxidates work
ok 7 - notice misspelled upstream
ok 8 - complain about total nonsense
# passed all 8 test(s)
1..8
*** t0110-urlmatch-normalization.sh ***
ok 1 - url scheme
ok 2 - url authority
ok 3 - url port checks
ok 4 - url port normalization
ok 5 - url general escapes
ok 6 - url high-bit escapes
ok 7 - url utf-8 escapes
ok 8 - url username/password escapes
ok 9 - url normalized lengths
ok 10 - url . and .. segments
ok 11 - url equivalents
# passed all 11 test(s)
1..11
*** t0200-gettext-basic.sh ***
# lib-gettext: Found 'is_IS.UTF-8' as an is_IS UTF-8 locale
# lib-gettext: Found 'is_IS.ISO8859-1' as an is_IS ISO-8859-1 locale
ok 1 - sanity: $GIT_INTERNAL_GETTEXT_SH_SCHEME is set (to gnu)
ok 2 - sanity: $TEXTDOMAIN is git
ok 3 - xgettext sanity: Perl _() strings are not extracted
ok 4 - xgettext sanity: Comment extraction with --add-comments
ok 5 - xgettext sanity: Comment extraction with --add-comments stops at statements
ok 6 - sanity: $TEXTDOMAINDIR exists without NO_GETTEXT=YesPlease
ok 7 - sanity: Icelandic locale was compiled
ok 8 - sanity: gettext("") metadata is OK
ok 9 - sanity: gettext(unknown) is passed through
ok 10 - xgettext: C extraction of _() and N_() strings
ok 11 - xgettext: C extraction with %s
ok 12 - xgettext: Shell extraction
ok 13 - xgettext: Shell extraction with $variable
ok 14 - xgettext: Perl extraction
ok 15 - xgettext: Perl extraction with %s
ok 16 - sanity: Some gettext("") data for real locale
# passed all 16 test(s)
1..16
*** t0201-gettext-fallbacks.sh ***
# lib-gettext: No is_IS UTF-8 locale available
# lib-gettext: No is_IS ISO-8859-1 locale available
ok 1 - sanity: $GIT_INTERNAL_GETTEXT_SH_SCHEME is set (to fallthrough)
ok 2 - sanity: $GIT_INTERNAL_GETTEXT_TEST_FALLBACKS is set
ok 3 - sanity: $GIT_INTERNAL_GETTEXT_SH_SCHEME" is fallthrough
ok 4 - gettext: our gettext() fallback has pass-through semantics
ok 5 - eval_gettext: our eval_gettext() fallback has pass-through semantics
ok 6 - eval_gettext: our eval_gettext() fallback can interpolate variables
ok 7 - eval_gettext: our eval_gettext() fallback can interpolate variables with spaces
ok 8 - eval_gettext: our eval_gettext() fallback can interpolate variables with spaces and quotes
# passed all 8 test(s)
1..8
*** t0202-gettext-perl.sh ***
# lib-gettext: Found 'is_IS.UTF-8' as an is_IS UTF-8 locale
# lib-gettext: Found 'is_IS.ISO8859-1' as an is_IS ISO-8859-1 locale
ok 1 - run t0202/test.pl to test Git::I18N.pm
# passed all 1 test(s)
1..1
*** t0203-gettext-setlocale-sanity.sh ***
# lib-gettext: Found 'is_IS.UTF-8' as an is_IS UTF-8 locale
# lib-gettext: Found 'is_IS.ISO8859-1' as an is_IS ISO-8859-1 locale
ok 1 - git show a ISO-8859-1 commit under C locale
ok 2 - git show a ISO-8859-1 commit under a UTF-8 locale
# passed all 2 test(s)
1..2
*** t0204-gettext-reencode-sanity.sh ***
# lib-gettext: Found 'is_IS.UTF-8' as an is_IS UTF-8 locale
# lib-gettext: Found 'is_IS.ISO8859-1' as an is_IS ISO-8859-1 locale
ok 1 - gettext: Emitting UTF-8 from our UTF-8 *.mo files / Icelandic
ok 2 - gettext: Emitting UTF-8 from our UTF-8 *.mo files / Runes
ok 3 - gettext: Emitting ISO-8859-1 from our UTF-8 *.mo files / Icelandic
ok 4 - gettext: impossible ISO-8859-1 output
ok 5 - gettext: Fetching a UTF-8 msgid -> UTF-8
ok 6 - gettext: Fetching a UTF-8 msgid -> ISO-8859-1
ok 7 - gettext.c: git init UTF-8 -> UTF-8
ok 8 - gettext.c: git init UTF-8 -> ISO-8859-1
# passed all 8 test(s)
1..8
*** t0210-trace2-normal.sh ***
ok 1 - normal stream, return code 0
ok 2 - normal stream, return code 1
ok 3 - automatic filename
ok 4 - normal stream, exit code 0
ok 5 - normal stream, exit code 1
ok 6 - normal stream, error event
ok 7 - BUG messages are written to trace2
ok 8 - bug messages with BUG_if_bug() are written to trace2
ok 9 - bug messages without explicit BUG_if_bug() are written to trace2
ok 10 - bug messages followed by BUG() are written to trace2
ok 11 - using global config, normal stream, return code 0
ok 12 - using global config with include
ok 13 - unsafe URLs are redacted by default
# passed all 13 test(s)
1..13
*** t0211-trace2-perf.sh ***
ok 1 - perf stream, return code 0
ok 2 - perf stream, return code 1
ok 3 - perf stream, error event
ok 4 - perf stream, child processes
ok 5 - using global config, perf stream, return code 0
ok 6 - stopwatch timer test/test1
ok 7 - stopwatch timer test/test2
ok 8 - global counter test/test1
ok 9 - global counter test/test2
ok 10 - unsafe URLs are redacted by default
ok 11 - expect def_params for normal builtin command
ok 12 - expect def_params for query command
ok 13 - expect def_params for remote-curl and _run_dashed_
ok 14 - expect def_params for http-fetch and _run_dashed_
ok 15 - expect def_params during git alias expansion
ok 16 - expect def_params during shell alias expansion
ok 17 - expect def_params during nested git alias expansion
# passed all 17 test(s)
1..17
*** t0212-trace2-event.sh ***
ok 1 - event stream, error event
ok 2 - event stream, return code 0
ok 3 - event stream, list config
ok 4 - event stream, list env vars
ok 5 - basic trace2_data
ok 6 - using global config, event stream, error event
ok 7 - discard traces when there are too many files
ok 8 - unsafe URLs are redacted by default in cmd_start events
ok 9 - unsafe URLs are redacted by default in child_start events
ok 10 - unsafe URLs are redacted by default in exec events
ok 11 - unsafe URLs are redacted by default in def_param events
# passed all 11 test(s)
1..11
*** t0300-credentials.sh ***
ok 1 - setup helper scripts
ok 2 - credential_fill invokes helper
ok 3 - credential_fill invokes multiple helpers
ok 4 - credential_fill stops when we get a full response
ok 5 - credential_fill continues through partial response
ok 6 - credential_fill populates password_expiry_utc
ok 7 - credential_fill ignores expired password
ok 8 - credential_fill passes along metadata
ok 9 - credential_approve calls all helpers
ok 10 - credential_approve stores password expiry
ok 11 - credential_approve stores oauth refresh token
ok 12 - do not bother storing password-less credential
ok 13 - credential_approve does not store expired password
ok 14 - credential_reject calls all helpers
ok 15 - credential_reject erases credential regardless of expiry
ok 16 - usernames can be preserved
ok 17 - usernames can be overridden
ok 18 - do not bother completing already-full credential
ok 19 - empty helper list falls back to internal getpass
ok 20 - internal getpass does not ask for known username
ok 21 - git-credential respects core.askPass
ok 22 - respect configured credentials
ok 23 - match configured credential
ok 24 - do not match configured credential
ok 25 - match multiple configured helpers
ok 26 - match multiple configured helpers with URLs
ok 27 - match percent-encoded values
ok 28 - match percent-encoded UTF-8 values in path
ok 29 - match percent-encoded values in username
ok 30 - fetch with multiple path components
ok 31 - pull username from config
ok 32 - honors username from URL over helper (URL)
ok 33 - honors username from URL over helper (components)
ok 34 - last matching username wins
ok 35 - http paths can be part of context
ok 36 - context uses urlmatch
ok 37 - helpers can abort the process
ok 38 - empty helper spec resets helper list
ok 39 - url parser rejects embedded newlines
ok 40 - host-less URLs are parsed as empty host
ok 41 - credential system refuses to work with missing host
ok 42 - credential system refuses to work with missing protocol
ok 43 - url parser handles bare query marker
ok 44 - url parser handles bare fragment marker
ok 45 - url parser not confused by encoded markers
ok 46 - credential config with partial URLs
# passed all 46 test(s)
1..46
*** t0301-credential-cache.sh ***
ok 1 - helper (cache) has no existing data
ok 2 - helper (cache) stores password
ok 3 - helper (cache) can retrieve password
ok 4 - helper (cache) requires matching protocol
ok 5 - helper (cache) requires matching host
ok 6 - helper (cache) requires matching username
ok 7 - helper (cache) requires matching path
ok 8 - helper (cache) overwrites on store
ok 9 - helper (cache) can forget host
ok 10 - helper (cache) can store multiple users
ok 11 - helper (cache) does not erase a password distinct from input
ok 12 - helper (cache) can forget user
ok 13 - helper (cache) remembers other user
ok 14 - helper (cache) can store empty username
ok 15 - helper (cache) erases all matching credentials
ok 16 - helper (cache) not confused by long header
ok 17 - helper (cache) stores password_expiry_utc
ok 18 - helper (cache) gets password_expiry_utc
ok 19 - helper (cache) overwrites when password_expiry_utc changes
ok 20 - helper (cache) stores oauth_refresh_token
ok 21 - helper (cache) gets oauth_refresh_token
ok 22 - socket defaults to ~/.cache/git/credential/socket
ok 23 - helper (cache) has no existing data
ok 24 - helper (cache) stores password
ok 25 - helper (cache) can retrieve password
ok 26 - helper (cache) requires matching protocol
ok 27 - helper (cache) requires matching host
ok 28 - helper (cache) requires matching username
ok 29 - helper (cache) requires matching path
ok 30 - helper (cache) overwrites on store
ok 31 - helper (cache) can forget host
ok 32 - helper (cache) can store multiple users
ok 33 - helper (cache) does not erase a password distinct from input
ok 34 - helper (cache) can forget user
ok 35 - helper (cache) remembers other user
ok 36 - helper (cache) can store empty username
ok 37 - helper (cache) erases all matching credentials
ok 38 - helper (cache) not confused by long header
ok 39 - use custom XDG_CACHE_HOME if set and default sockets are not created
ok 40 - credential-cache --socket option overrides default location
ok 41 - use custom XDG_CACHE_HOME even if xdg socket exists
ok 42 - use user socket if user directory exists
ok 43 - use user socket if user directory is a symlink to a directory
ok 44 - helper (cache --timeout=1) times out
# passed all 44 test(s)
1..44
*** t0302-credential-store.sh ***
ok 1 - helper (store) has no existing data
ok 2 - helper (store) stores password
ok 3 - helper (store) can retrieve password
ok 4 - helper (store) requires matching protocol
ok 5 - helper (store) requires matching host
ok 6 - helper (store) requires matching username
ok 7 - helper (store) requires matching path
ok 8 - helper (store) overwrites on store
ok 9 - helper (store) can forget host
ok 10 - helper (store) can store multiple users
ok 11 - helper (store) does not erase a password distinct from input
ok 12 - helper (store) can forget user
ok 13 - helper (store) remembers other user
ok 14 - helper (store) can store empty username
ok 15 - helper (store) erases all matching credentials
ok 16 - helper (store) not confused by long header
ok 17 - when xdg file does not exist, xdg file not created
ok 18 - setup xdg file
ok 19 - helper (store) has no existing data
ok 20 - helper (store) stores password
ok 21 - helper (store) can retrieve password
ok 22 - helper (store) requires matching protocol
ok 23 - helper (store) requires matching host
ok 24 - helper (store) requires matching username
ok 25 - helper (store) requires matching path
ok 26 - helper (store) overwrites on store
ok 27 - helper (store) can forget host
ok 28 - helper (store) can store multiple users
ok 29 - helper (store) does not erase a password distinct from input
ok 30 - helper (store) can forget user
ok 31 - helper (store) remembers other user
ok 32 - helper (store) can store empty username
ok 33 - helper (store) erases all matching credentials
ok 34 - helper (store) not confused by long header
ok 35 - when xdg file exists, home file not created
ok 36 - setup custom xdg file
ok 37 - helper (store) has no existing data
ok 38 - helper (store) stores password
ok 39 - helper (store) can retrieve password
ok 40 - helper (store) requires matching protocol
ok 41 - helper (store) requires matching host
ok 42 - helper (store) requires matching username
ok 43 - helper (store) requires matching path
ok 44 - helper (store) overwrites on store
ok 45 - helper (store) can forget host
ok 46 - helper (store) can store multiple users
ok 47 - helper (store) does not erase a password distinct from input
ok 48 - helper (store) can forget user
ok 49 - helper (store) remembers other user
ok 50 - helper (store) can store empty username
ok 51 - helper (store) erases all matching credentials
ok 52 - helper (store) not confused by long header
ok 53 - if custom xdg file exists, home and xdg files not created
ok 54 - get: use home file if both home and xdg files have matches
ok 55 - get: use xdg file if home file has no matches
ok 56 - get: use xdg file if home file is unreadable
ok 57 - store: if both xdg and home files exist, only store in home file
ok 58 - erase: erase matching credentials from both xdg and home files
ok 59 - get: ignore credentials without scheme as invalid
ok 60 - get: ignore credentials without valid host/path as invalid
ok 61 - get: ignore credentials without username/password as invalid
ok 62 - get: credentials with DOS line endings are invalid
ok 63 - get: credentials with path and DOS line endings are valid
ok 64 - get: credentials with DOS line endings are invalid if path is relevant
ok 65 - get: store file can contain empty/bogus lines
# passed all 65 test(s)
1..65
*** t0303-credential-external.sh ***
ok 1 - helper (store) has no existing data
ok 2 - helper (store) stores password
ok 3 - helper (store) can retrieve password
ok 4 - helper (store) requires matching protocol
ok 5 - helper (store) requires matching host
ok 6 - helper (store) requires matching username
ok 7 - helper (store) requires matching path
ok 8 - helper (store) overwrites on store
ok 9 - helper (store) can forget host
ok 10 - helper (store) can store multiple users
ok 11 - helper (store) does not erase a password distinct from input
ok 12 - helper (store) can forget user
ok 13 - helper (store) remembers other user
ok 14 - helper (store) can store empty username
ok 15 - helper (store) erases all matching credentials
ok 16 - helper (store) not confused by long header
ok 17 - helper (store) stores password_expiry_utc
ok 18 - helper (store) gets password_expiry_utc
ok 19 - helper (store) overwrites when password_expiry_utc changes
ok 20 - helper (store) stores oauth_refresh_token
ok 21 - helper (store) gets oauth_refresh_token
ok 22 - helper (store) times out
ok 23 - test cleanup removes everything
# passed all 23 test(s)
1..23
*** t0410-partial-clone.sh ***
ok 1 - extensions.partialclone without filter
ok 2 - convert shallow clone to partial clone
ok 3 - convert to partial clone with noop extension
ok 4 - converting to partial clone fails with unrecognized extension
ok 5 - missing reflog object, but promised by a commit, passes fsck
ok 6 - missing reflog object, but promised by a tag, passes fsck
ok 7 - missing reflog object alone fails fsck, even with extension set
ok 8 - missing ref object, but promised, passes fsck
ok 9 - missing object, but promised, passes fsck
ok 10 - missing CLI object, but promised, passes fsck
ok 11 - fetching of missing objects
ok 12 - fetching of a promised object that promisor remote no longer has
ok 13 - fetching of missing objects works with ref-in-want enabled
ok 14 - fetching of missing objects from another promisor remote
ok 15 - fetching of missing objects configures a promisor remote
ok 16 - fetching of missing blobs works
ok 17 - fetching of missing trees does not fetch blobs
ok 18 - rev-list stops traversal at missing and promised commit
ok 19 - missing tree objects with --missing=allow-promisor and --exclude-promisor-objects
ok 20 - missing non-root tree object and rev-list
ok 21 - rev-list stops traversal at missing and promised tree
ok 22 - rev-list stops traversal at missing and promised blob
ok 23 - rev-list stops traversal at promisor commit, tree, and blob
ok 24 - rev-list dies for missing objects on cmd line
ok 25 - single promisor remote can be re-initialized gracefully
ok 26 - gc repacks promisor objects separately from non-promisor objects
ok 27 - gc does not repack promisor objects if there are none
ok 28 - repack -d does not irreversibly delete promisor objects
ok 29 - gc stops traversal when a missing but promised object is reached
ok 30 - do not fetch when checking existence of tree we construct ourselves
ok 31 - exact rename does not need to fetch the blob lazily
ok 32 - lazy-fetch when accessing object not in the_repository
# passed all 32 test(s)
# SKIP no web server found at ''
1..32
*** t0411-clone-from-partial.sh ***
ok 1 - create evil repo
ok 2 - local clone must not fetch from promisor remote and execute script
ok 3 - clone from file://... must not fetch from promisor remote and execute script
ok 4 - fetch from file://... must not fetch from promisor remote and execute script
ok 5 - pack-objects should fetch from promisor remote and execute script
ok 6 - clone from promisor remote does not lazy-fetch by default
ok 7 - promisor lazy-fetching can be re-enabled
# passed all 7 test(s)
1..7
*** t0450-txt-doc-vs-help.sh ***
ok 1 - setup: list of builtins
ok 2 - list of txt and help mismatches is sorted
ok 3 - add -h output has no \t
ok 4 - add -h output has dashed labels
ok 5 - add -h output has consistent spacing
ok 6 - add *.txt SYNOPSIS has dashed labels
not ok 7 - add -h output and SYNOPSIS agree # TODO known breakage
ok 8 - am -h output has no \t
ok 9 - am -h output has dashed labels
ok 10 - am -h output has consistent spacing
ok 11 - am *.txt SYNOPSIS has dashed labels
not ok 12 - am -h output and SYNOPSIS agree # TODO known breakage
ok 13 - annotate -h output has no \t
ok 14 - annotate -h output has dashed labels
ok 15 - annotate -h output has consistent spacing
ok 16 - annotate *.txt SYNOPSIS has dashed labels
ok 17 - annotate -h output and SYNOPSIS agree
ok 18 - apply -h output has no \t
ok 19 - apply -h output has dashed labels
ok 20 - apply -h output has consistent spacing
ok 21 - apply *.txt SYNOPSIS has dashed labels
not ok 22 - apply -h output and SYNOPSIS agree # TODO known breakage
ok 23 - archive -h output has no \t
ok 24 - archive -h output has dashed labels
ok 25 - archive -h output has consistent spacing
ok 26 - archive *.txt SYNOPSIS has dashed labels
not ok 27 - archive -h output and SYNOPSIS agree # TODO known breakage
ok 28 - bisect -h output has no \t
ok 29 - bisect -h output has dashed labels
ok 30 - bisect -h output has consistent spacing
ok 31 - bisect *.txt SYNOPSIS has dashed labels
not ok 32 - bisect -h output and SYNOPSIS agree # TODO known breakage
ok 33 - blame -h output has no \t
ok 34 - blame -h output has dashed labels
ok 35 - blame -h output has consistent spacing
ok 36 - blame *.txt SYNOPSIS has dashed labels
not ok 37 - blame -h output and SYNOPSIS agree # TODO known breakage
ok 38 - branch -h output has no \t
ok 39 - branch -h output has dashed labels
ok 40 - branch -h output has consistent spacing
ok 41 - branch *.txt SYNOPSIS has dashed labels
not ok 42 - branch -h output and SYNOPSIS agree # TODO known breakage
ok 43 - bugreport -h output has no \t
ok 44 - bugreport -h output has dashed labels
ok 45 - bugreport -h output has consistent spacing
ok 46 - bugreport *.txt SYNOPSIS has dashed labels
ok 47 - bugreport -h output and SYNOPSIS agree
ok 48 - bundle -h output has no \t
ok 49 - bundle -h output has dashed labels
ok 50 - bundle -h output has consistent spacing
ok 51 - bundle *.txt SYNOPSIS has dashed labels
ok 52 - bundle -h output and SYNOPSIS agree
ok 53 - cat-file -h output has no \t
ok 54 - cat-file -h output has dashed labels
ok 55 - cat-file -h output has consistent spacing
ok 56 - cat-file *.txt SYNOPSIS has dashed labels
ok 57 - cat-file -h output and SYNOPSIS agree
ok 58 - check-attr -h output has no \t
ok 59 - check-attr -h output has dashed labels
ok 60 - check-attr -h output has consistent spacing
ok 61 - check-attr *.txt SYNOPSIS has dashed labels
ok 62 - check-attr -h output and SYNOPSIS agree
ok 63 - check-ignore -h output has no \t
ok 64 - check-ignore -h output has dashed labels
ok 65 - check-ignore -h output has consistent spacing
ok 66 - check-ignore *.txt SYNOPSIS has dashed labels
ok 67 - check-ignore -h output and SYNOPSIS agree
ok 68 - check-mailmap -h output has no \t
ok 69 - check-mailmap -h output has dashed labels
ok 70 - check-mailmap -h output has consistent spacing
ok 71 - check-mailmap *.txt SYNOPSIS has dashed labels
ok 72 - check-mailmap -h output and SYNOPSIS agree
ok 73 - check-ref-format -h output has no \t
ok 74 - check-ref-format -h output has dashed labels
ok 75 - check-ref-format -h output has consistent spacing
ok 76 - check-ref-format *.txt SYNOPSIS has dashed labels
not ok 77 - check-ref-format -h output and SYNOPSIS agree # TODO known breakage
ok 78 - checkout -h output has no \t
ok 79 - checkout -h output has dashed labels
ok 80 - checkout -h output has consistent spacing
ok 81 - checkout *.txt SYNOPSIS has dashed labels
not ok 82 - checkout -h output and SYNOPSIS agree # TODO known breakage
ok 83 - checkout--worker -h output has no \t
ok 84 - checkout--worker -h output has dashed labels
ok 85 - checkout--worker -h output has consistent spacing
ok 86 # skip checkout--worker *.txt SYNOPSIS has dashed labels (missing BUILTIN_TXT_CHECKOUT__WORKER)
ok 87 # skip checkout--worker -h output and SYNOPSIS agree (missing BUILTIN_TXT_CHECKOUT__WORKER)
ok 88 - checkout-index -h output has no \t
ok 89 - checkout-index -h output has dashed labels
ok 90 - checkout-index -h output has consistent spacing
ok 91 - checkout-index *.txt SYNOPSIS has dashed labels
not ok 92 - checkout-index -h output and SYNOPSIS agree # TODO known breakage
ok 93 - cherry -h output has no \t
ok 94 - cherry -h output has dashed labels
ok 95 - cherry -h output has consistent spacing
ok 96 - cherry *.txt SYNOPSIS has dashed labels
ok 97 - cherry -h output and SYNOPSIS agree
ok 98 - cherry-pick -h output has no \t
ok 99 - cherry-pick -h output has dashed labels
ok 100 - cherry-pick -h output has consistent spacing
ok 101 - cherry-pick *.txt SYNOPSIS has dashed labels
ok 102 - cherry-pick -h output and SYNOPSIS agree
ok 103 - clean -h output has no \t
ok 104 - clean -h output has dashed labels
ok 105 - clean -h output has consistent spacing
ok 106 - clean *.txt SYNOPSIS has dashed labels
ok 107 - clean -h output and SYNOPSIS agree
ok 108 - clone -h output has no \t
ok 109 - clone -h output has dashed labels
ok 110 - clone -h output has consistent spacing
ok 111 - clone *.txt SYNOPSIS has dashed labels
not ok 112 - clone -h output and SYNOPSIS agree # TODO known breakage
ok 113 - column -h output has no \t
ok 114 - column -h output has dashed labels
ok 115 - column -h output has consistent spacing
ok 116 - column *.txt SYNOPSIS has dashed labels
not ok 117 - column -h output and SYNOPSIS agree # TODO known breakage
ok 118 - commit -h output has no \t
ok 119 - commit -h output has dashed labels
ok 120 - commit -h output has consistent spacing
ok 121 - commit *.txt SYNOPSIS has dashed labels
ok 122 - commit -h output and SYNOPSIS agree
ok 123 - commit-graph -h output has no \t
ok 124 - commit-graph -h output has dashed labels
ok 125 - commit-graph -h output has consistent spacing
ok 126 - commit-graph *.txt SYNOPSIS has dashed labels
ok 127 - commit-graph -h output and SYNOPSIS agree
ok 128 - commit-tree -h output has no \t
ok 129 - commit-tree -h output has dashed labels
ok 130 - commit-tree -h output has consistent spacing
ok 131 - commit-tree *.txt SYNOPSIS has dashed labels
ok 132 - commit-tree -h output and SYNOPSIS agree
ok 133 - config -h output has no \t
ok 134 - config -h output has dashed labels
ok 135 - config -h output has consistent spacing
ok 136 - config *.txt SYNOPSIS has dashed labels
not ok 137 - config -h output and SYNOPSIS agree # TODO known breakage
ok 138 - count-objects -h output has no \t
ok 139 - count-objects -h output has dashed labels
ok 140 - count-objects -h output has consistent spacing
ok 141 - count-objects *.txt SYNOPSIS has dashed labels
ok 142 - count-objects -h output and SYNOPSIS agree
ok 143 - credential -h output has no \t
ok 144 - credential -h output has dashed labels
ok 145 - credential -h output has consistent spacing
ok 146 - credential *.txt SYNOPSIS has dashed labels
not ok 147 - credential -h output and SYNOPSIS agree # TODO known breakage
ok 148 - credential-cache -h output has no \t
ok 149 - credential-cache -h output has dashed labels
ok 150 - credential-cache -h output has consistent spacing
ok 151 - credential-cache *.txt SYNOPSIS has dashed labels
not ok 152 - credential-cache -h output and SYNOPSIS agree # TODO known breakage
ok 153 - credential-cache--daemon -h output has no \t
ok 154 - credential-cache--daemon -h output has dashed labels
ok 155 - credential-cache--daemon -h output has consistent spacing
ok 156 - credential-cache--daemon *.txt SYNOPSIS has dashed labels
ok 157 - credential-cache--daemon -h output and SYNOPSIS agree
ok 158 - credential-store -h output has no \t
ok 159 - credential-store -h output has dashed labels
ok 160 - credential-store -h output has consistent spacing
ok 161 - credential-store *.txt SYNOPSIS has dashed labels
not ok 162 - credential-store -h output and SYNOPSIS agree # TODO known breakage
ok 163 - describe -h output has no \t
ok 164 - describe -h output has dashed labels
ok 165 - describe -h output has consistent spacing
ok 166 - describe *.txt SYNOPSIS has dashed labels
ok 167 - describe -h output and SYNOPSIS agree
ok 168 - diagnose -h output has no \t
ok 169 - diagnose -h output has dashed labels
ok 170 - diagnose -h output has consistent spacing
ok 171 - diagnose *.txt SYNOPSIS has dashed labels
ok 172 - diagnose -h output and SYNOPSIS agree
ok 173 - diff -h output has no \t
ok 174 - diff -h output has dashed labels
ok 175 - diff -h output has consistent spacing
ok 176 - diff *.txt SYNOPSIS has dashed labels
ok 177 - diff -h output and SYNOPSIS agree
ok 178 - diff-files -h output has no \t
ok 179 - diff-files -h output has dashed labels
ok 180 - diff-files -h output has consistent spacing
ok 181 - diff-files *.txt SYNOPSIS has dashed labels
ok 182 - diff-files -h output and SYNOPSIS agree
ok 183 - diff-index -h output has no \t
ok 184 - diff-index -h output has dashed labels
ok 185 - diff-index -h output has consistent spacing
ok 186 - diff-index *.txt SYNOPSIS has dashed labels
ok 187 - diff-index -h output and SYNOPSIS agree
ok 188 - diff-tree -h output has no \t
ok 189 - diff-tree -h output has dashed labels
ok 190 - diff-tree -h output has consistent spacing
ok 191 - diff-tree *.txt SYNOPSIS has dashed labels
ok 192 - diff-tree -h output and SYNOPSIS agree
ok 193 - difftool -h output has no \t
ok 194 - difftool -h output has dashed labels
ok 195 - difftool -h output has consistent spacing
ok 196 - difftool *.txt SYNOPSIS has dashed labels
ok 197 - difftool -h output and SYNOPSIS agree
ok 198 - fast-export -h output has no \t
ok 199 - fast-export -h output has dashed labels
ok 200 - fast-export -h output has consistent spacing
ok 201 - fast-export *.txt SYNOPSIS has dashed labels
not ok 202 - fast-export -h output and SYNOPSIS agree # TODO known breakage
ok 203 - fast-import -h output has no \t
ok 204 - fast-import -h output has dashed labels
ok 205 - fast-import -h output has consistent spacing
ok 206 - fast-import *.txt SYNOPSIS has dashed labels
not ok 207 - fast-import -h output and SYNOPSIS agree # TODO known breakage
ok 208 - fetch -h output has no \t
ok 209 - fetch -h output has dashed labels
ok 210 - fetch -h output has consistent spacing
ok 211 - fetch *.txt SYNOPSIS has dashed labels
ok 212 - fetch -h output and SYNOPSIS agree
ok 213 - fetch-pack -h output has no \t
ok 214 - fetch-pack -h output has dashed labels
ok 215 - fetch-pack -h output has consistent spacing
ok 216 - fetch-pack *.txt SYNOPSIS has dashed labels
not ok 217 - fetch-pack -h output and SYNOPSIS agree # TODO known breakage
ok 218 - fmt-merge-msg -h output has no \t
ok 219 - fmt-merge-msg -h output has dashed labels
ok 220 - fmt-merge-msg -h output has consistent spacing
ok 221 - fmt-merge-msg *.txt SYNOPSIS has dashed labels
not ok 222 - fmt-merge-msg -h output and SYNOPSIS agree # TODO known breakage
ok 223 - for-each-ref -h output has no \t
ok 224 - for-each-ref -h output has dashed labels
ok 225 - for-each-ref -h output has consistent spacing
ok 226 - for-each-ref *.txt SYNOPSIS has dashed labels
not ok 227 - for-each-ref -h output and SYNOPSIS agree # TODO known breakage
ok 228 - for-each-repo -h output has no \t
ok 229 - for-each-repo -h output has dashed labels
ok 230 - for-each-repo -h output has consistent spacing
ok 231 - for-each-repo *.txt SYNOPSIS has dashed labels
ok 232 - for-each-repo -h output and SYNOPSIS agree
ok 233 - format-patch -h output has no \t
ok 234 - format-patch -h output has dashed labels
ok 235 - format-patch -h output has consistent spacing
ok 236 - format-patch *.txt SYNOPSIS has dashed labels
not ok 237 - format-patch -h output and SYNOPSIS agree # TODO known breakage
ok 238 - fsck -h output has no \t
ok 239 - fsck -h output has dashed labels
ok 240 - fsck -h output has consistent spacing
ok 241 - fsck *.txt SYNOPSIS has dashed labels
ok 242 - fsck -h output and SYNOPSIS agree
ok 243 - fsck-objects -h output has no \t
ok 244 - fsck-objects -h output has dashed labels
ok 245 - fsck-objects -h output has consistent spacing
ok 246 - fsck-objects *.txt SYNOPSIS has dashed labels
not ok 247 - fsck-objects -h output and SYNOPSIS agree # TODO known breakage
ok 248 - fsmonitor--daemon -h output has no \t
ok 249 - fsmonitor--daemon -h output has dashed labels
ok 250 - fsmonitor--daemon -h output has consistent spacing
ok 251 - fsmonitor--daemon *.txt SYNOPSIS has dashed labels
not ok 252 - fsmonitor--daemon -h output and SYNOPSIS agree # TODO known breakage
ok 253 - gc -h output has no \t
ok 254 - gc -h output has dashed labels
ok 255 - gc -h output has consistent spacing
ok 256 - gc *.txt SYNOPSIS has dashed labels
not ok 257 - gc -h output and SYNOPSIS agree # TODO known breakage
ok 258 - get-tar-commit-id -h output has no \t
ok 259 - get-tar-commit-id -h output has dashed labels
ok 260 - get-tar-commit-id -h output has consistent spacing
ok 261 - get-tar-commit-id *.txt SYNOPSIS has dashed labels
ok 262 - get-tar-commit-id -h output and SYNOPSIS agree
ok 263 - grep -h output has no \t
ok 264 - grep -h output has dashed labels
ok 265 - grep -h output has consistent spacing
ok 266 - grep *.txt SYNOPSIS has dashed labels
not ok 267 - grep -h output and SYNOPSIS agree # TODO known breakage
ok 268 - hash-object -h output has no \t
ok 269 - hash-object -h output has dashed labels
ok 270 - hash-object -h output has consistent spacing
ok 271 - hash-object *.txt SYNOPSIS has dashed labels
ok 272 - hash-object -h output and SYNOPSIS agree
ok 273 - help -h output has no \t
ok 274 - help -h output has dashed labels
ok 275 - help -h output has consistent spacing
ok 276 - help *.txt SYNOPSIS has dashed labels
ok 277 - help -h output and SYNOPSIS agree
ok 278 - hook -h output has no \t
ok 279 - hook -h output has dashed labels
ok 280 - hook -h output has consistent spacing
ok 281 - hook *.txt SYNOPSIS has dashed labels
ok 282 - hook -h output and SYNOPSIS agree
ok 283 - index-pack -h output has no \t
ok 284 - index-pack -h output has dashed labels
ok 285 - index-pack -h output has consistent spacing
ok 286 - index-pack *.txt SYNOPSIS has dashed labels
not ok 287 - index-pack -h output and SYNOPSIS agree # TODO known breakage
ok 288 - init -h output has no \t
ok 289 - init -h output has dashed labels
ok 290 - init -h output has consistent spacing
ok 291 - init *.txt SYNOPSIS has dashed labels
ok 292 - init -h output and SYNOPSIS agree
ok 293 - init-db -h output has no \t
ok 294 - init-db -h output has dashed labels
ok 295 - init-db -h output has consistent spacing
ok 296 - init-db *.txt SYNOPSIS has dashed labels
not ok 297 - init-db -h output and SYNOPSIS agree # TODO known breakage
ok 298 - interpret-trailers -h output has no \t
ok 299 - interpret-trailers -h output has dashed labels
ok 300 - interpret-trailers -h output has consistent spacing
ok 301 - interpret-trailers *.txt SYNOPSIS has dashed labels
ok 302 - interpret-trailers -h output and SYNOPSIS agree
ok 303 - log -h output has no \t
ok 304 - log -h output has dashed labels
ok 305 - log -h output has consistent spacing
ok 306 - log *.txt SYNOPSIS has dashed labels
not ok 307 - log -h output and SYNOPSIS agree # TODO known breakage
ok 308 - ls-files -h output has no \t
ok 309 - ls-files -h output has dashed labels
ok 310 - ls-files -h output has consistent spacing
ok 311 - ls-files *.txt SYNOPSIS has dashed labels
not ok 312 - ls-files -h output and SYNOPSIS agree # TODO known breakage
ok 313 - ls-remote -h output has no \t
ok 314 - ls-remote -h output has dashed labels
ok 315 - ls-remote -h output has consistent spacing
ok 316 - ls-remote *.txt SYNOPSIS has dashed labels
ok 317 - ls-remote -h output and SYNOPSIS agree
ok 318 - ls-tree -h output has no \t
ok 319 - ls-tree -h output has dashed labels
ok 320 - ls-tree -h output has consistent spacing
ok 321 - ls-tree *.txt SYNOPSIS has dashed labels
not ok 322 - ls-tree -h output and SYNOPSIS agree # TODO known breakage
ok 323 - mailinfo -h output has no \t
ok 324 - mailinfo -h output has dashed labels
ok 325 - mailinfo -h output has consistent spacing
ok 326 - mailinfo *.txt SYNOPSIS has dashed labels
not ok 327 - mailinfo -h output and SYNOPSIS agree # TODO known breakage
ok 328 - mailsplit -h output has no \t
ok 329 - mailsplit -h output has dashed labels
ok 330 - mailsplit -h output has consistent spacing
ok 331 - mailsplit *.txt SYNOPSIS has dashed labels
not ok 332 - mailsplit -h output and SYNOPSIS agree # TODO known breakage
ok 333 - maintenance -h output has no \t
ok 334 - maintenance -h output has dashed labels
ok 335 - maintenance -h output has consistent spacing
ok 336 - maintenance *.txt SYNOPSIS has dashed labels
not ok 337 - maintenance -h output and SYNOPSIS agree # TODO known breakage
ok 338 - merge -h output has no \t
ok 339 - merge -h output has dashed labels
ok 340 - merge -h output has consistent spacing
ok 341 - merge *.txt SYNOPSIS has dashed labels
not ok 342 - merge -h output and SYNOPSIS agree # TODO known breakage
ok 343 - merge-base -h output has no \t
ok 344 - merge-base -h output has dashed labels
ok 345 - merge-base -h output has consistent spacing
ok 346 - merge-base *.txt SYNOPSIS has dashed labels
ok 347 - merge-base -h output and SYNOPSIS agree
ok 348 - merge-file -h output has no \t
ok 349 - merge-file -h output has dashed labels
ok 350 - merge-file -h output has consistent spacing
ok 351 - merge-file *.txt SYNOPSIS has dashed labels
not ok 352 - merge-file -h output and SYNOPSIS agree # TODO known breakage
ok 353 - merge-index -h output has no \t
ok 354 - merge-index -h output has dashed labels
ok 355 - merge-index -h output has consistent spacing
ok 356 - merge-index *.txt SYNOPSIS has dashed labels
not ok 357 - merge-index -h output and SYNOPSIS agree # TODO known breakage
ok 358 - merge-ours -h output has no \t
ok 359 - merge-ours -h output has dashed labels
ok 360 - merge-ours -h output has consistent spacing
ok 361 # skip merge-ours *.txt SYNOPSIS has dashed labels (missing BUILTIN_TXT_MERGE_OURS)
ok 362 # skip merge-ours -h output and SYNOPSIS agree (missing BUILTIN_TXT_MERGE_OURS)
ok 363 - merge-recursive -h output has no \t
ok 364 - merge-recursive -h output has dashed labels
ok 365 - merge-recursive -h output has consistent spacing
ok 366 # skip merge-recursive *.txt SYNOPSIS has dashed labels (missing BUILTIN_TXT_MERGE_RECURSIVE)
ok 367 # skip merge-recursive -h output and SYNOPSIS agree (missing BUILTIN_TXT_MERGE_RECURSIVE)
ok 368 - merge-recursive-ours -h output has no \t
ok 369 - merge-recursive-ours -h output has dashed labels
ok 370 - merge-recursive-ours -h output has consistent spacing
ok 371 # skip merge-recursive-ours *.txt SYNOPSIS has dashed labels (missing BUILTIN_TXT_MERGE_RECURSIVE_OURS)
ok 372 # skip merge-recursive-ours -h output and SYNOPSIS agree (missing BUILTIN_TXT_MERGE_RECURSIVE_OURS)
ok 373 - merge-recursive-theirs -h output has no \t
ok 374 - merge-recursive-theirs -h output has dashed labels
ok 375 - merge-recursive-theirs -h output has consistent spacing
ok 376 # skip merge-recursive-theirs *.txt SYNOPSIS has dashed labels (missing BUILTIN_TXT_MERGE_RECURSIVE_THEIRS)
ok 377 # skip merge-recursive-theirs -h output and SYNOPSIS agree (missing BUILTIN_TXT_MERGE_RECURSIVE_THEIRS)
ok 378 - merge-subtree -h output has no \t
ok 379 - merge-subtree -h output has dashed labels
ok 380 - merge-subtree -h output has consistent spacing
ok 381 # skip merge-subtree *.txt SYNOPSIS has dashed labels (missing BUILTIN_TXT_MERGE_SUBTREE)
ok 382 # skip merge-subtree -h output and SYNOPSIS agree (missing BUILTIN_TXT_MERGE_SUBTREE)
ok 383 - merge-tree -h output has no \t
ok 384 - merge-tree -h output has dashed labels
ok 385 - merge-tree -h output has consistent spacing
ok 386 - merge-tree *.txt SYNOPSIS has dashed labels
ok 387 - merge-tree -h output and SYNOPSIS agree
ok 388 - mktag -h output has no \t
ok 389 - mktag -h output has dashed labels
ok 390 - mktag -h output has consistent spacing
ok 391 - mktag *.txt SYNOPSIS has dashed labels
ok 392 - mktag -h output and SYNOPSIS agree
ok 393 - mktree -h output has no \t
ok 394 - mktree -h output has dashed labels
ok 395 - mktree -h output has consistent spacing
ok 396 - mktree *.txt SYNOPSIS has dashed labels
ok 397 - mktree -h output and SYNOPSIS agree
ok 398 - multi-pack-index -h output has no \t
ok 399 - multi-pack-index -h output has dashed labels
ok 400 - multi-pack-index -h output has consistent spacing
ok 401 - multi-pack-index *.txt SYNOPSIS has dashed labels
not ok 402 - multi-pack-index -h output and SYNOPSIS agree # TODO known breakage
ok 403 - mv -h output has no \t
ok 404 - mv -h output has dashed labels
ok 405 - mv -h output has consistent spacing
ok 406 - mv *.txt SYNOPSIS has dashed labels
ok 407 - mv -h output and SYNOPSIS agree
ok 408 - name-rev -h output has no \t
ok 409 - name-rev -h output has dashed labels
ok 410 - name-rev -h output has consistent spacing
ok 411 - name-rev *.txt SYNOPSIS has dashed labels
not ok 412 - name-rev -h output and SYNOPSIS agree # TODO known breakage
ok 413 - notes -h output has no \t
ok 414 - notes -h output has dashed labels
ok 415 - notes -h output has consistent spacing
ok 416 - notes *.txt SYNOPSIS has dashed labels
not ok 417 - notes -h output and SYNOPSIS agree # TODO known breakage
ok 418 - pack-objects -h output has no \t
ok 419 - pack-objects -h output has dashed labels
ok 420 - pack-objects -h output has consistent spacing
ok 421 - pack-objects *.txt SYNOPSIS has dashed labels
not ok 422 - pack-objects -h output and SYNOPSIS agree # TODO known breakage
ok 423 - pack-redundant -h output has no \t
ok 424 - pack-redundant -h output has dashed labels
ok 425 - pack-redundant -h output has consistent spacing
ok 426 - pack-redundant *.txt SYNOPSIS has dashed labels
ok 427 - pack-redundant -h output and SYNOPSIS agree
ok 428 - pack-refs -h output has no \t
ok 429 - pack-refs -h output has dashed labels
ok 430 - pack-refs -h output has consistent spacing
ok 431 - pack-refs *.txt SYNOPSIS has dashed labels
ok 432 - pack-refs -h output and SYNOPSIS agree
ok 433 - patch-id -h output has no \t
ok 434 - patch-id -h output has dashed labels
ok 435 - patch-id -h output has consistent spacing
ok 436 - patch-id *.txt SYNOPSIS has dashed labels
ok 437 - patch-id -h output and SYNOPSIS agree
ok 438 - pickaxe -h output has no \t
ok 439 - pickaxe -h output has dashed labels
ok 440 - pickaxe -h output has consistent spacing
ok 441 # skip pickaxe *.txt SYNOPSIS has dashed labels (missing BUILTIN_TXT_PICKAXE)
ok 442 # skip pickaxe -h output and SYNOPSIS agree (missing BUILTIN_TXT_PICKAXE)
ok 443 - prune -h output has no \t
ok 444 - prune -h output has dashed labels
ok 445 - prune -h output has consistent spacing
ok 446 - prune *.txt SYNOPSIS has dashed labels
ok 447 - prune -h output and SYNOPSIS agree
ok 448 - prune-packed -h output has no \t
ok 449 - prune-packed -h output has dashed labels
ok 450 - prune-packed -h output has consistent spacing
ok 451 - prune-packed *.txt SYNOPSIS has dashed labels
ok 452 - prune-packed -h output and SYNOPSIS agree
ok 453 - pull -h output has no \t
ok 454 - pull -h output has dashed labels
ok 455 - pull -h output has consistent spacing
ok 456 - pull *.txt SYNOPSIS has dashed labels
ok 457 - pull -h output and SYNOPSIS agree
ok 458 - push -h output has no \t
ok 459 - push -h output has dashed labels
ok 460 - push -h output has consistent spacing
ok 461 - push *.txt SYNOPSIS has dashed labels
not ok 462 - push -h output and SYNOPSIS agree # TODO known breakage
ok 463 - range-diff -h output has no \t
ok 464 - range-diff -h output has dashed labels
ok 465 - range-diff -h output has consistent spacing
ok 466 - range-diff *.txt SYNOPSIS has dashed labels
not ok 467 - range-diff -h output and SYNOPSIS agree # TODO known breakage
ok 468 - read-tree -h output has no \t
ok 469 - read-tree -h output has dashed labels
ok 470 - read-tree -h output has consistent spacing
ok 471 - read-tree *.txt SYNOPSIS has dashed labels
ok 472 - read-tree -h output and SYNOPSIS agree
ok 473 - rebase -h output has no \t
ok 474 - rebase -h output has dashed labels
ok 475 - rebase -h output has consistent spacing
ok 476 - rebase *.txt SYNOPSIS has dashed labels
not ok 477 - rebase -h output and SYNOPSIS agree # TODO known breakage
ok 478 - receive-pack -h output has no \t
ok 479 - receive-pack -h output has dashed labels
ok 480 - receive-pack -h output has consistent spacing
ok 481 - receive-pack *.txt SYNOPSIS has dashed labels
ok 482 - receive-pack -h output and SYNOPSIS agree
ok 483 - reflog -h output has no \t
ok 484 - reflog -h output has dashed labels
ok 485 - reflog -h output has consistent spacing
ok 486 - reflog *.txt SYNOPSIS has dashed labels
ok 487 - reflog -h output and SYNOPSIS agree
ok 488 - remote -h output has no \t
ok 489 - remote -h output has dashed labels
ok 490 - remote -h output has consistent spacing
ok 491 - remote *.txt SYNOPSIS has dashed labels
not ok 492 - remote -h output and SYNOPSIS agree # TODO known breakage
ok 493 - remote-ext -h output has no \t
ok 494 - remote-ext -h output has dashed labels
ok 495 - remote-ext -h output has consistent spacing
ok 496 - remote-ext *.txt SYNOPSIS has dashed labels
not ok 497 - remote-ext -h output and SYNOPSIS agree # TODO known breakage
ok 498 - remote-fd -h output has no \t
ok 499 - remote-fd -h output has dashed labels
ok 500 - remote-fd -h output has consistent spacing
ok 501 - remote-fd *.txt SYNOPSIS has dashed labels
not ok 502 - remote-fd -h output and SYNOPSIS agree # TODO known breakage
ok 503 - repack -h output has no \t
ok 504 - repack -h output has dashed labels
ok 505 - repack -h output has consistent spacing
ok 506 - repack *.txt SYNOPSIS has dashed labels
not ok 507 - repack -h output and SYNOPSIS agree # TODO known breakage
ok 508 - replace -h output has no \t
ok 509 - replace -h output has dashed labels
ok 510 - replace -h output has consistent spacing
ok 511 - replace *.txt SYNOPSIS has dashed labels
ok 512 - replace -h output and SYNOPSIS agree
ok 513 - replay -h output has no \t
ok 514 - replay -h output has dashed labels
ok 515 - replay -h output has consistent spacing
ok 516 - replay *.txt SYNOPSIS has dashed labels
ok 517 - replay -h output and SYNOPSIS agree
ok 518 - rerere -h output has no \t
ok 519 - rerere -h output has dashed labels
ok 520 - rerere -h output has consistent spacing
ok 521 - rerere *.txt SYNOPSIS has dashed labels
ok 522 - rerere -h output and SYNOPSIS agree
ok 523 - reset -h output has no \t
ok 524 - reset -h output has dashed labels
ok 525 - reset -h output has consistent spacing
ok 526 - reset *.txt SYNOPSIS has dashed labels
not ok 527 - reset -h output and SYNOPSIS agree # TODO known breakage
ok 528 - restore -h output has no \t
ok 529 - restore -h output has dashed labels
ok 530 - restore -h output has consistent spacing
ok 531 - restore *.txt SYNOPSIS has dashed labels
not ok 532 - restore -h output and SYNOPSIS agree # TODO known breakage
ok 533 - rev-list -h output has no \t
ok 534 - rev-list -h output has dashed labels
ok 535 - rev-list -h output has consistent spacing
ok 536 - rev-list *.txt SYNOPSIS has dashed labels
ok 537 - rev-list -h output and SYNOPSIS agree
ok 538 - rev-parse -h output has no \t
ok 539 - rev-parse -h output has dashed labels
ok 540 - rev-parse -h output has consistent spacing
ok 541 - rev-parse *.txt SYNOPSIS has dashed labels
not ok 542 - rev-parse -h output and SYNOPSIS agree # TODO known breakage
ok 543 - revert -h output has no \t
ok 544 - revert -h output has dashed labels
ok 545 - revert -h output has consistent spacing
ok 546 - revert *.txt SYNOPSIS has dashed labels
ok 547 - revert -h output and SYNOPSIS agree
ok 548 - rm -h output has no \t
ok 549 - rm -h output has dashed labels
ok 550 - rm -h output has consistent spacing
ok 551 - rm *.txt SYNOPSIS has dashed labels
ok 552 - rm -h output and SYNOPSIS agree
ok 553 - send-pack -h output has no \t
ok 554 - send-pack -h output has dashed labels
ok 555 - send-pack -h output has consistent spacing
ok 556 - send-pack *.txt SYNOPSIS has dashed labels
ok 557 - send-pack -h output and SYNOPSIS agree
ok 558 - shortlog -h output has no \t
ok 559 - shortlog -h output has dashed labels
ok 560 - shortlog -h output has consistent spacing
ok 561 - shortlog *.txt SYNOPSIS has dashed labels
ok 562 - shortlog -h output and SYNOPSIS agree
ok 563 - show -h output has no \t
ok 564 - show -h output has dashed labels
ok 565 - show -h output has consistent spacing
ok 566 - show *.txt SYNOPSIS has dashed labels
not ok 567 - show -h output and SYNOPSIS agree # TODO known breakage
ok 568 - show-branch -h output has no \t
ok 569 - show-branch -h output has dashed labels
ok 570 - show-branch -h output has consistent spacing
ok 571 - show-branch *.txt SYNOPSIS has dashed labels
ok 572 - show-branch -h output and SYNOPSIS agree
ok 573 - show-index -h output has no \t
ok 574 - show-index -h output has dashed labels
ok 575 - show-index -h output has consistent spacing
ok 576 - show-index *.txt SYNOPSIS has dashed labels
ok 577 - show-index -h output and SYNOPSIS agree
ok 578 - show-ref -h output has no \t
ok 579 - show-ref -h output has dashed labels
ok 580 - show-ref -h output has consistent spacing
ok 581 - show-ref *.txt SYNOPSIS has dashed labels
ok 582 - show-ref -h output and SYNOPSIS agree
ok 583 - sparse-checkout -h output has no \t
ok 584 - sparse-checkout -h output has dashed labels
ok 585 - sparse-checkout -h output has consistent spacing
ok 586 - sparse-checkout *.txt SYNOPSIS has dashed labels
ok 587 - sparse-checkout -h output and SYNOPSIS agree
ok 588 - stage -h output has no \t
ok 589 - stage -h output has dashed labels
ok 590 - stage -h output has consistent spacing
ok 591 - stage *.txt SYNOPSIS has dashed labels
not ok 592 - stage -h output and SYNOPSIS agree # TODO known breakage
ok 593 - stash -h output has no \t
ok 594 - stash -h output has dashed labels
ok 595 - stash -h output has consistent spacing
ok 596 - stash *.txt SYNOPSIS has dashed labels
ok 597 - stash -h output and SYNOPSIS agree
ok 598 - status -h output has no \t
ok 599 - status -h output has dashed labels
ok 600 - status -h output has consistent spacing
ok 601 - status *.txt SYNOPSIS has dashed labels
ok 602 - status -h output and SYNOPSIS agree
ok 603 - stripspace -h output has no \t
ok 604 - stripspace -h output has dashed labels
ok 605 - stripspace -h output has consistent spacing
ok 606 - stripspace *.txt SYNOPSIS has dashed labels
ok 607 - stripspace -h output and SYNOPSIS agree
ok 608 - submodule--helper -h output has no \t
ok 609 - submodule--helper -h output has dashed labels
ok 610 - submodule--helper -h output has consistent spacing
ok 611 # skip submodule--helper *.txt SYNOPSIS has dashed labels (missing BUILTIN_TXT_SUBMODULE__HELPER)
ok 612 # skip submodule--helper -h output and SYNOPSIS agree (missing BUILTIN_TXT_SUBMODULE__HELPER)
ok 613 - switch -h output has no \t
ok 614 - switch -h output has dashed labels
ok 615 - switch -h output has consistent spacing
ok 616 - switch *.txt SYNOPSIS has dashed labels
not ok 617 - switch -h output and SYNOPSIS agree # TODO known breakage
ok 618 - symbolic-ref -h output has no \t
ok 619 - symbolic-ref -h output has dashed labels
ok 620 - symbolic-ref -h output has consistent spacing
ok 621 - symbolic-ref *.txt SYNOPSIS has dashed labels
ok 622 - symbolic-ref -h output and SYNOPSIS agree
ok 623 - tag -h output has no \t
ok 624 - tag -h output has dashed labels
ok 625 - tag -h output has consistent spacing
ok 626 - tag *.txt SYNOPSIS has dashed labels
ok 627 - tag -h output and SYNOPSIS agree
ok 628 - unpack-file -h output has no \t
ok 629 - unpack-file -h output has dashed labels
ok 630 - unpack-file -h output has consistent spacing
ok 631 - unpack-file *.txt SYNOPSIS has dashed labels
ok 632 - unpack-file -h output and SYNOPSIS agree
ok 633 - unpack-objects -h output has no \t
ok 634 - unpack-objects -h output has dashed labels
ok 635 - unpack-objects -h output has consistent spacing
ok 636 - unpack-objects *.txt SYNOPSIS has dashed labels
ok 637 - unpack-objects -h output and SYNOPSIS agree
ok 638 - update-index -h output has no \t
ok 639 - update-index -h output has dashed labels
ok 640 - update-index -h output has consistent spacing
ok 641 - update-index *.txt SYNOPSIS has dashed labels
not ok 642 - update-index -h output and SYNOPSIS agree # TODO known breakage
ok 643 - update-ref -h output has no \t
ok 644 - update-ref -h output has dashed labels
ok 645 - update-ref -h output has consistent spacing
ok 646 - update-ref *.txt SYNOPSIS has dashed labels
not ok 647 - update-ref -h output and SYNOPSIS agree # TODO known breakage
ok 648 - update-server-info -h output has no \t
ok 649 - update-server-info -h output has dashed labels
ok 650 - update-server-info -h output has consistent spacing
ok 651 - update-server-info *.txt SYNOPSIS has dashed labels
ok 652 - update-server-info -h output and SYNOPSIS agree
ok 653 - upload-archive -h output has no \t
ok 654 - upload-archive -h output has dashed labels
ok 655 - upload-archive -h output has consistent spacing
ok 656 - upload-archive *.txt SYNOPSIS has dashed labels
ok 657 - upload-archive -h output and SYNOPSIS agree
ok 658 - upload-archive--writer -h output has no \t
ok 659 - upload-archive--writer -h output has dashed labels
ok 660 - upload-archive--writer -h output has consistent spacing
ok 661 # skip upload-archive--writer *.txt SYNOPSIS has dashed labels (missing BUILTIN_TXT_UPLOAD_ARCHIVE__WRITER)
ok 662 # skip upload-archive--writer -h output and SYNOPSIS agree (missing BUILTIN_TXT_UPLOAD_ARCHIVE__WRITER)
ok 663 - upload-pack -h output has no \t
ok 664 - upload-pack -h output has dashed labels
ok 665 - upload-pack -h output has consistent spacing
ok 666 - upload-pack *.txt SYNOPSIS has dashed labels
ok 667 - upload-pack -h output and SYNOPSIS agree
ok 668 - var -h output has no \t
ok 669 - var -h output has dashed labels
ok 670 - var -h output has consistent spacing
ok 671 - var *.txt SYNOPSIS has dashed labels
ok 672 - var -h output and SYNOPSIS agree
ok 673 - verify-commit -h output has no \t
ok 674 - verify-commit -h output has dashed labels
ok 675 - verify-commit -h output has consistent spacing
ok 676 - verify-commit *.txt SYNOPSIS has dashed labels
ok 677 - verify-commit -h output and SYNOPSIS agree
ok 678 - verify-pack -h output has no \t
ok 679 - verify-pack -h output has dashed labels
ok 680 - verify-pack -h output has consistent spacing
ok 681 - verify-pack *.txt SYNOPSIS has dashed labels
ok 682 - verify-pack -h output and SYNOPSIS agree
ok 683 - verify-tag -h output has no \t
ok 684 - verify-tag -h output has dashed labels
ok 685 - verify-tag -h output has consistent spacing
ok 686 - verify-tag *.txt SYNOPSIS has dashed labels
ok 687 - verify-tag -h output and SYNOPSIS agree
ok 688 - version -h output has no \t
ok 689 - version -h output has dashed labels
ok 690 - version -h output has consistent spacing
ok 691 - version *.txt SYNOPSIS has dashed labels
ok 692 - version -h output and SYNOPSIS agree
ok 693 - whatchanged -h output has no \t
ok 694 - whatchanged -h output has dashed labels
ok 695 - whatchanged -h output has consistent spacing
ok 696 - whatchanged *.txt SYNOPSIS has dashed labels
not ok 697 - whatchanged -h output and SYNOPSIS agree # TODO known breakage
ok 698 - worktree -h output has no \t
ok 699 - worktree -h output has dashed labels
ok 700 - worktree -h output has consistent spacing
ok 701 - worktree *.txt SYNOPSIS has dashed labels
ok 702 - worktree -h output and SYNOPSIS agree
ok 703 - write-tree -h output has no \t
ok 704 - write-tree -h output has dashed labels
ok 705 - write-tree -h output has consistent spacing
ok 706 - write-tree *.txt SYNOPSIS has dashed labels
ok 707 - write-tree -h output and SYNOPSIS agree
# still have 57 known breakage(s)
# passed all remaining 650 test(s)
1..707
*** t0500-progress-display.sh ***
ok 1 - simple progress display
ok 2 - progress display with total
ok 3 - progress display breaks long lines #1
ok 4 - progress display breaks long lines #2
ok 5 - progress display breaks long lines #3 - even the first is too long
ok 6 - progress display breaks long lines #4 - title line matches terminal width
ok 7 - progress shortens - crazy caller
ok 8 - progress display with throughput
ok 9 - progress display with throughput and total
ok 10 - cover up after throughput shortens
ok 11 - cover up after throughput shortens a lot
ok 12 - progress generates traces
ok 13 - progress generates traces: stop / start
ok 14 - progress generates traces: start without stop
ok 15 - progress generates traces: stop without start
ok 16 - progress generates traces: start with active progress bar (no stops)
# passed all 16 test(s)
1..16
*** t0600-reffiles-backend.sh ***
ok 1 - setup
ok 2 - empty directory should not fool rev-parse
ok 3 - empty directory should not fool for-each-ref
ok 4 - empty directory should not fool create
ok 5 - empty directory should not fool verify
ok 6 - empty directory should not fool 1-arg update
ok 7 - empty directory should not fool 2-arg update
ok 8 - empty directory should not fool 0-arg delete
ok 9 - empty directory should not fool 1-arg delete
ok 10 - non-empty directory blocks create
ok 11 - broken reference blocks create
ok 12 - non-empty directory blocks indirect create
ok 13 - broken reference blocks indirect create
ok 14 - no bogus intermediate values during delete
ok 15 - delete fails cleanly if packed-refs file is locked
ok 16 - delete fails cleanly if packed-refs.new write fails
ok 17 - setup worktree
ok 18 - for_each_reflog()
ok 19 - parsing reverse reflogs at BUFSIZ boundaries
ok 20 - reflog expire operates on symref not referrent
ok 21 - empty reflog
ok 22 - ref resolution not confused by broken symlinks
ok 23 - log diagnoses bogus HEAD hash
ok 24 - log diagnoses bogus HEAD symref
ok 25 - empty directory removal
ok 26 - symref empty directory removal
ok 27 - directory not created deleting packed ref
ok 28 - git branch -m u v should fail when the reflog for u is a symlink
ok 29 - git branch -m with symlinked .git/refs
ok 30 # skip rebase when .git/logs is a symlink (missing SYMLINKS_WINDOWS,MINGW of MINGW,SYMLINKS_WINDOWS)
ok 31 - git reflog expire honors core.sharedRepository
# passed all 31 test(s)
1..31
*** t0601-reffiles-pack-refs.sh ***
ok 1 - enable reflogs
ok 2 - prepare a trivial repository
ok 3 - pack-refs --prune --all
ok 4 - see if git show-ref works as expected
ok 5 - see if a branch still exists when packed
ok 6 - git branch c/d should barf if branch c exists
ok 7 - see if a branch still exists after git pack-refs --prune
ok 8 - see if git pack-refs --prune remove ref files
ok 9 - see if git pack-refs --prune removes empty dirs
ok 10 - git branch g should work when git branch g/h has been deleted
ok 11 - git branch i/j/k should barf if branch i exists
ok 12 - test git branch k after branch k/l/m and k/lm have been deleted
ok 13 - test git branch n after some branch deletion and pruning
ok 14 - test excluded refs are not packed
ok 15 - test --no-exclude refs clears excluded refs
ok 16 - test only included refs are packed
ok 17 - test --no-include refs clears included refs
ok 18 - test --exclude takes precedence over --include
ok 19 - --auto packs and prunes refs as usual
ok 20 - see if up-to-date packed refs are preserved
ok 21 - pack, prune and repack
ok 22 - explicit pack-refs with dangling packed reference
ok 23 - delete ref with dangling packed version
ok 24 - delete ref while another dangling packed ref
ok 25 - pack ref directly below refs/
ok 26 - do not pack ref in refs/bisect
ok 27 - disable reflogs
ok 28 - create packed foo/bar/baz branch
ok 29 - notice d/f conflict with existing directory
ok 30 - existing directory reports concrete ref
ok 31 - notice d/f conflict with existing ref
ok 32 - reject packed-refs with unterminated line
ok 33 - reject packed-refs containing junk
ok 34 - reject packed-refs with a short SHA-1
ok 35 - timeout if packed-refs.lock exists
ok 36 - retry acquiring packed-refs.lock
ok 37 - pack symlinked packed-refs
ok 38 - refs/worktree must not be packed
ok 39 - create packed-refs file with broken ref
ok 40 - pack-refs does not silently delete broken packed ref
ok 41 - pack-refs does not drop broken refs during deletion
ok 42 - maintenance --auto unconditionally packs loose refs
# passed all 42 test(s)
1..42
*** t0610-reftable-basics.sh ***
1..0 # SKIP skipping reftable tests; set GIT_TEST_DEFAULT_REF_FORMAT=reftable
*** t0611-reftable-httpd.sh ***
1..0 # SKIP no web server found at ''
*** t1000-read-tree-m-3way.sh ***
ok 1 - adding test file NN and Z/NN
ok 2 - adding test file ND and Z/ND
ok 3 - adding test file NM and Z/NM
ok 4 - adding test file DN and Z/DN
ok 5 - adding test file DD and Z/DD
ok 6 - adding test file DM and Z/DM
ok 7 - adding test file MN and Z/MN
ok 8 - adding test file MD and Z/MD
ok 9 - adding test file MM and Z/MM
ok 10 - adding test file SS
ok 11 - adding test file TT
ok 12 - prepare initial tree
ok 13 - change in branch A (removal)
ok 14 - change in branch A (modification)
ok 15 - change in branch A (modification)
ok 16 - change in branch A (modification)
ok 17 - change in branch A (modification)
ok 18 - change in branch A (modification)
ok 19 - change in branch A (modification)
ok 20 - change in branch A (addition)
ok 21 - change in branch A (addition)
ok 22 - change in branch A (addition)
ok 23 - change in branch A (addition)
ok 24 - change in branch A (addition)
ok 25 - change in branch A (edit)
ok 26 - change in branch A (change file to directory)
ok 27 - recording branch A tree
ok 28 - reading original tree and checking out
ok 29 - change in branch B (removal)
ok 30 - change in branch B (modification)
ok 31 - change in branch B (modification)
ok 32 - change in branch B (modification)
ok 33 - change in branch B (modification)
ok 34 - change in branch B (modification)
ok 35 - change in branch B (modification)
ok 36 - change in branch B (addition)
ok 37 - change in branch B (addition)
ok 38 - change in branch B (addition)
ok 39 - change in branch B (addition)
ok 40 - change in branch B (addition and modification)
ok 41 - change in branch B (modification)
ok 42 - change in branch B (addition of a file to conflict with directory)
ok 43 - recording branch B tree
ok 44 - keep contents of 3 trees for easy access
ok 45 - 3-way merge with git read-tree -m, empty cache
ok 46 - 3-way merge with git read-tree -m, match H
ok 47 - 1 - must not have an entry not in A.
ok 48 - 2 - must match B in !O && !A && B case.
ok 49 - 2 - matching B alone is OK in !O && !A && B case.
ok 50 - 3 - must match A in !O && A && !B case.
ok 51 - 3 - matching A alone is OK in !O && A && !B case.
ok 52 - 3 (fail) - must match A in !O && A && !B case.
ok 53 - 4 - must match and be up-to-date in !O && A && B && A!=B case.
ok 54 - 4 (fail) - must match and be up-to-date in !O && A && B && A!=B case.
ok 55 - 4 (fail) - must match and be up-to-date in !O && A && B && A!=B case.
ok 56 - 5 - must match in !O && A && B && A==B case.
ok 57 - 5 - must match in !O && A && B && A==B case.
ok 58 - 5 (fail) - must match A in !O && A && B && A==B case.
ok 59 - 6 - must not exist in O && !A && !B case
ok 60 - 7 - must not exist in O && !A && B && O!=B case
ok 61 - 8 - must not exist in O && !A && B && O==B case
ok 62 - 9 - must match and be up-to-date in O && A && !B && O!=A case
ok 63 - 9 (fail) - must match and be up-to-date in O && A && !B && O!=A case
ok 64 - 9 (fail) - must match and be up-to-date in O && A && !B && O!=A case
ok 65 - 10 - must match and be up-to-date in O && A && !B && O==A case
ok 66 - 10 (fail) - must match and be up-to-date in O && A && !B && O==A case
ok 67 - 10 (fail) - must match and be up-to-date in O && A && !B && O==A case
ok 68 - 11 - must match and be up-to-date in O && A && B && O!=A && O!=B && A!=B case
ok 69 - 11 (fail) - must match and be up-to-date in O && A && B && O!=A && O!=B && A!=B case
ok 70 - 11 (fail) - must match and be up-to-date in O && A && B && O!=A && O!=B && A!=B case
ok 71 - 12 - must match A in O && A && B && O!=A && A==B case
ok 72 - 12 - must match A in O && A && B && O!=A && A==B case
ok 73 - 12 (fail) - must match A in O && A && B && O!=A && A==B case
ok 74 - 13 - must match A in O && A && B && O!=A && O==B case
ok 75 - 13 - must match A in O && A && B && O!=A && O==B case
ok 76 - 14 - must match and be up-to-date in O && A && B && O==A && O!=B case
ok 77 - 14 - may match B in O && A && B && O==A && O!=B case
ok 78 - 14 (fail) - must match and be up-to-date in O && A && B && O==A && O!=B case
ok 79 - 14 (fail) - must match and be up-to-date in O && A && B && O==A && O!=B case
ok 80 - 15 - must match A in O && A && B && O==A && O==B case
ok 81 - 15 - must match A in O && A && B && O==A && O==B case
ok 82 - 15 (fail) - must match A in O && A && B && O==A && O==B case
ok 83 - 16 - A matches in one and B matches in another.
# passed all 83 test(s)
1..83
*** t1001-read-tree-m-2way.sh ***
ok 1 - setup
ok 2 - 1, 2, 3 - no carry forward
ok 3 - 4 - carry forward local addition.
ok 4 - 5 - carry forward local addition.
ok 5 - 6 - local addition already has the same.
ok 6 - 7 - local addition already has the same.
ok 7 - 8 - conflicting addition.
ok 8 - 9 - conflicting addition.
ok 9 - 10 - path removed.
ok 10 - 11 - dirty path removed.
ok 11 - 12 - unmatching local changes being removed.
ok 12 - 13 - unmatching local changes being removed.
ok 13 - 14 - unchanged in two heads.
ok 14 - 15 - unchanged in two heads.
ok 15 - 16 - conflicting local change.
ok 16 - 17 - conflicting local change.
ok 17 - 18 - local change already having a good result.
ok 18 - 19 - local change already having a good result, further modified.
ok 19 - 20 - no local change, use new tree.
ok 20 - 21 - no local change, dirty cache.
ok 21 - 22 - local change cache updated.
ok 22 - DF vs DF/DF case setup.
ok 23 - DF vs DF/DF case test.
ok 24 - a/b (untracked) vs a case setup.
ok 25 - a/b (untracked) vs a, plus c/d case test.
ok 26 - read-tree supports the super-prefix
ok 27 - a/b vs a, plus c/d case setup.
ok 28 - a/b vs a, plus c/d case test.
ok 29 - -m references the correct modified tree
# passed all 29 test(s)
1..29
*** t1002-read-tree-m-u-2way.sh ***
ok 1 - setup
ok 2 - 1, 2, 3 - no carry forward
ok 3 - 4 - carry forward local addition.
ok 4 - 5 - carry forward local addition.
ok 5 - 6 - local addition already has the same.
ok 6 - 7 - local addition already has the same.
ok 7 - 8 - conflicting addition.
ok 8 - 9 - conflicting addition.
ok 9 - 10 - path removed.
ok 10 - 11 - dirty path removed.
ok 11 - 12 - unmatching local changes being removed.
ok 12 - 13 - unmatching local changes being removed.
ok 13 - 14 - unchanged in two heads.
ok 14 - 15 - unchanged in two heads.
ok 15 - 16 - conflicting local change.
ok 16 - 17 - conflicting local change.
ok 17 - 18 - local change already having a good result.
ok 18 - 19 - local change already having a good result, further modified.
ok 19 - 20 - no local change, use new tree.
ok 20 - 21 - no local change, dirty cache.
ok 21 - DF vs DF/DF case setup.
ok 22 - DF vs DF/DF case test.
# passed all 22 test(s)
1..22
*** t1003-read-tree-prefix.sh ***
ok 1 - setup
ok 2 - read-tree --prefix
ok 3 - read-tree --prefix with leading slash exits with error
# passed all 3 test(s)
1..3
*** t1004-read-tree-m-u-wf.sh ***
ok 1 - two-way setup
ok 2 - two-way not clobbering
ok 3 - two-way with incorrect --exclude-per-directory (1)
ok 4 - two-way with incorrect --exclude-per-directory (2)
ok 5 - two-way clobbering a ignored file
ok 6 - three-way not complaining on an untracked path in both
ok 7 - three-way not clobbering a working tree file
ok 8 - three-way not complaining on an untracked file
ok 9 - 3-way not overwriting local changes (setup)
ok 10 - 3-way not overwriting local changes (our side)
ok 11 - 3-way not overwriting local changes (their side)
ok 12 - funny symlink in work tree
ok 13 - funny symlink in work tree, un-unlink-able
ok 14 - D/F setup
ok 15 - D/F
ok 16 - D/F resolve
ok 17 - D/F recursive
# passed all 17 test(s)
1..17
*** t1005-read-tree-reset.sh ***
ok 1 - setup
ok 2 - reset should work
ok 3 - reset should remove remnants from a failed merge
ok 4 - two-way reset should remove remnants too
ok 5 - Porcelain reset should remove remnants too
ok 6 - Porcelain checkout -f should remove remnants too
ok 7 - Porcelain checkout -f HEAD should remove remnants too
# passed all 7 test(s)
1..7
*** t1006-cat-file.sh ***
ok 1 - usage: cmdmode -e -p
ok 2 - usage: cmdmode -p -t
ok 3 - usage: cmdmode -t -s
ok 4 - usage: cmdmode -s --textconv
ok 5 - usage: cmdmode --textconv --filters
ok 6 - usage: cmdmode --batch-all-objects -e
ok 7 - usage: incompatible options: --path with --batch
ok 8 - usage: incompatible options: --path with --batch-check
ok 9 - usage: --textconv requires another option
ok 10 - usage: --filters requires another option
ok 11 - usage: -e requires another option
ok 12 - usage: incompatible options: -e and --batch
ok 13 - usage: incompatible options: -e and --batch-check
ok 14 - usage: incompatible options: -e and --follow-symlinks
ok 15 - usage: incompatible options: -e and --path=foo HEAD:some-path.txt
ok 16 - usage: -p requires another option
ok 17 - usage: incompatible options: -p and --batch
ok 18 - usage: incompatible options: -p and --batch-check
ok 19 - usage: incompatible options: -p and --follow-symlinks
ok 20 - usage: incompatible options: -p and --path=foo HEAD:some-path.txt
ok 21 - usage: -t requires another option
ok 22 - usage: incompatible options: -t and --batch
ok 23 - usage: incompatible options: -t and --batch-check
ok 24 - usage: incompatible options: -t and --follow-symlinks
ok 25 - usage: incompatible options: -t and --path=foo HEAD:some-path.txt
ok 26 - usage: -s requires another option
ok 27 - usage: incompatible options: -s and --batch
ok 28 - usage: incompatible options: -s and --batch-check
ok 29 - usage: incompatible options: -s and --follow-symlinks
ok 30 - usage: incompatible options: -s and --path=foo HEAD:some-path.txt
ok 31 - usage: too many arguments: -e one two three
ok 32 - usage: incompatible arguments: -e with batch option --buffer
ok 33 - usage: incompatible arguments: -e with batch option --follow-symlinks
ok 34 - usage: too many arguments: -p one two three
ok 35 - usage: incompatible arguments: -p with batch option --buffer
ok 36 - usage: incompatible arguments: -p with batch option --follow-symlinks
ok 37 - usage: too many arguments: -t one two three
ok 38 - usage: incompatible arguments: -t with batch option --buffer
ok 39 - usage: incompatible arguments: -t with batch option --follow-symlinks
ok 40 - usage: too many arguments: -s one two three
ok 41 - usage: incompatible arguments: -s with batch option --buffer
ok 42 - usage: incompatible arguments: -s with batch option --follow-symlinks
ok 43 - usage: too many arguments: --textconv one two three
ok 44 - usage: incompatible arguments: --textconv with batch option --buffer
ok 45 - usage: incompatible arguments: --textconv with batch option --follow-symlinks
ok 46 - usage: too many arguments: --filters one two three
ok 47 - usage: incompatible arguments: --filters with batch option --buffer
ok 48 - usage: incompatible arguments: --filters with batch option --follow-symlinks
ok 49 - usage: bad option combination: --buffer without batch mode
ok 50 - usage: bad option combination: --follow-symlinks without batch mode
ok 51 - usage: bad option combination: --batch-all-objects without batch mode
ok 52 - usage: bad option combination: -z without batch mode
ok 53 - usage: bad option combination: -Z without batch mode
ok 54 - setup
ok 55 - blob exists
ok 56 - Type of blob is correct
ok 57 - Size of blob is correct
ok 58 - Type of blob is correct using --allow-unknown-type
ok 59 - Size of blob is correct using --allow-unknown-type
ok 60 - Content of blob is correct
ok 61 - Pretty content of blob is correct
ok 62 - --batch output of blob is correct
ok 63 - --batch-check output of blob is correct
ok 64 - --batch-command --buffer output of blob content is correct
ok 65 - --batch-command --buffer output of blob info is correct
ok 66 - --batch-command --no-buffer output of blob content is correct
ok 67 - --batch-command --no-buffer output of blob info is correct
ok 68 - custom --batch-check format
ok 69 - custom --batch-command format
ok 70 - --batch-check with %(rest)
ok 71 - --batch without type (blob)
ok 72 - --batch without size (blob)
ok 73 - --batch-command --buffer with flush for blob info
ok 74 - --batch-command --buffer without flush for blob info
ok 75 - blob exists
ok 76 - Type of blob is correct
ok 77 - Size of blob is correct
ok 78 - Type of blob is correct using --allow-unknown-type
ok 79 - Size of blob is correct using --allow-unknown-type
ok 80 - Content of blob is correct
ok 81 - Pretty content of blob is correct
ok 82 - --batch output of blob is correct
ok 83 - --batch-check output of blob is correct
ok 84 - --batch-command --buffer output of blob content is correct
ok 85 - --batch-command --buffer output of blob info is correct
ok 86 - --batch-command --no-buffer output of blob content is correct
ok 87 - --batch-command --no-buffer output of blob info is correct
ok 88 - custom --batch-check format
ok 89 - custom --batch-command format
ok 90 - --batch-check with %(rest)
ok 91 - --batch without type (blob)
ok 92 - --batch without size (blob)
ok 93 - --batch-command --buffer with flush for blob info
ok 94 - --batch-command --buffer without flush for blob info
ok 95 - --batch-check without %(rest) considers whole line
ok 96 - tree exists
ok 97 - Type of tree is correct
ok 98 - Size of tree is correct
ok 99 - Type of tree is correct using --allow-unknown-type
ok 100 - Size of tree is correct using --allow-unknown-type
ok 101 - Pretty content of tree is correct
ok 102 - --batch-check output of tree is correct
ok 103 - --batch-command --buffer output of tree info is correct
ok 104 - --batch-command --no-buffer output of tree info is correct
ok 105 - custom --batch-check format
ok 106 - custom --batch-command format
ok 107 - --batch-check with %(rest)
ok 108 - tree exists
ok 109 - Type of tree is correct
ok 110 - Size of tree is correct
ok 111 - Type of tree is correct using --allow-unknown-type
ok 112 - Size of tree is correct using --allow-unknown-type
ok 113 - Pretty content of tree is correct
ok 114 - --batch-check output of tree is correct
ok 115 - --batch-command --buffer output of tree info is correct
ok 116 - --batch-command --no-buffer output of tree info is correct
ok 117 - custom --batch-check format
ok 118 - custom --batch-command format
ok 119 - --batch-check with %(rest)
ok 120 - commit exists
ok 121 - Type of commit is correct
ok 122 - Size of commit is correct
ok 123 - Type of commit is correct using --allow-unknown-type
ok 124 - Size of commit is correct using --allow-unknown-type
ok 125 - Content of commit is correct
ok 126 - Pretty content of commit is correct
ok 127 - --batch output of commit is correct
ok 128 - --batch-check output of commit is correct
ok 129 - --batch-command --buffer output of commit content is correct
ok 130 - --batch-command --buffer output of commit info is correct
ok 131 - --batch-command --no-buffer output of commit content is correct
ok 132 - --batch-command --no-buffer output of commit info is correct
ok 133 - custom --batch-check format
ok 134 - custom --batch-command format
ok 135 - --batch-check with %(rest)
ok 136 - --batch without type (commit)
ok 137 - --batch without size (commit)
ok 138 - commit exists
ok 139 - Type of commit is correct
ok 140 - Size of commit is correct
ok 141 - Type of commit is correct using --allow-unknown-type
ok 142 - Size of commit is correct using --allow-unknown-type
ok 143 - Content of commit is correct
ok 144 - Pretty content of commit is correct
ok 145 - --batch output of commit is correct
ok 146 - --batch-check output of commit is correct
ok 147 - --batch-command --buffer output of commit content is correct
ok 148 - --batch-command --buffer output of commit info is correct
ok 149 - --batch-command --no-buffer output of commit content is correct
ok 150 - --batch-command --no-buffer output of commit info is correct
ok 151 - custom --batch-check format
ok 152 - custom --batch-command format
ok 153 - --batch-check with %(rest)
ok 154 - --batch without type (commit)
ok 155 - --batch without size (commit)
ok 156 - tag exists
ok 157 - Type of tag is correct
ok 158 - Size of tag is correct
ok 159 - Type of tag is correct using --allow-unknown-type
ok 160 - Size of tag is correct using --allow-unknown-type
ok 161 - Content of tag is correct
ok 162 - Pretty content of tag is correct
ok 163 - --batch output of tag is correct
ok 164 - --batch-check output of tag is correct
ok 165 - --batch-command --buffer output of tag content is correct
ok 166 - --batch-command --buffer output of tag info is correct
ok 167 - --batch-command --no-buffer output of tag content is correct
ok 168 - --batch-command --no-buffer output of tag info is correct
ok 169 - custom --batch-check format
ok 170 - custom --batch-command format
ok 171 - --batch-check with %(rest)
ok 172 - --batch without type (tag)
ok 173 - --batch without size (tag)
ok 174 - tag exists
ok 175 - Type of tag is correct
ok 176 - Size of tag is correct
ok 177 - Type of tag is correct using --allow-unknown-type
ok 178 - Size of tag is correct using --allow-unknown-type
ok 179 - Content of tag is correct
ok 180 - Pretty content of tag is correct
ok 181 - --batch output of tag is correct
ok 182 - --batch-check output of tag is correct
ok 183 - --batch-command --buffer output of tag content is correct
ok 184 - --batch-command --buffer output of tag info is correct
ok 185 - --batch-command --no-buffer output of tag content is correct
ok 186 - --batch-command --no-buffer output of tag info is correct
ok 187 - custom --batch-check format
ok 188 - custom --batch-command format
ok 189 - --batch-check with %(rest)
ok 190 - --batch without type (tag)
ok 191 - --batch without size (tag)
ok 192 - Reach a blob from a tag pointing to it
ok 193 - Passing -t with --batch fails
ok 194 - Passing --batch with -t fails
ok 195 - Passing -s with --batch fails
ok 196 - Passing --batch with -s fails
ok 197 - Passing -e with --batch fails
ok 198 - Passing --batch with -e fails
ok 199 - Passing -p with --batch fails
ok 200 - Passing --batch with -p fails
ok 201 - Passing <type> with --batch fails
ok 202 - Passing --batch with <type> fails
ok 203 - Passing oid with --batch fails
ok 204 - Passing -t with --batch-check fails
ok 205 - Passing --batch-check with -t fails
ok 206 - Passing -s with --batch-check fails
ok 207 - Passing --batch-check with -s fails
ok 208 - Passing -e with --batch-check fails
ok 209 - Passing --batch-check with -e fails
ok 210 - Passing -p with --batch-check fails
ok 211 - Passing --batch-check with -p fails
ok 212 - Passing <type> with --batch-check fails
ok 213 - Passing --batch-check with <type> fails
ok 214 - Passing oid with --batch-check fails
ok 215 - Passing -t with --batch-command fails
ok 216 - Passing --batch-command with -t fails
ok 217 - Passing -s with --batch-command fails
ok 218 - Passing --batch-command with -s fails
ok 219 - Passing -e with --batch-command fails
ok 220 - Passing --batch-command with -e fails
ok 221 - Passing -p with --batch-command fails
ok 222 - Passing --batch-command with -p fails
ok 223 - Passing <type> with --batch-command fails
ok 224 - Passing --batch-command with <type> fails
ok 225 - Passing oid with --batch-command fails
ok 226 - Passing -t with --batch fails
ok 227 - Passing --batch with -t fails
ok 228 - Passing -s with --batch fails
ok 229 - Passing --batch with -s fails
ok 230 - Passing -e with --batch fails
ok 231 - Passing --batch with -e fails
ok 232 - Passing -p with --batch fails
ok 233 - Passing --batch with -p fails
ok 234 - Passing <type> with --batch fails
ok 235 - Passing --batch with <type> fails
ok 236 - Passing oid with --batch fails
ok 237 - Passing -t with --batch-check fails
ok 238 - Passing --batch-check with -t fails
ok 239 - Passing -s with --batch-check fails
ok 240 - Passing --batch-check with -s fails
ok 241 - Passing -e with --batch-check fails
ok 242 - Passing --batch-check with -e fails
ok 243 - Passing -p with --batch-check fails
ok 244 - Passing --batch-check with -p fails
ok 245 - Passing <type> with --batch-check fails
ok 246 - Passing --batch-check with <type> fails
ok 247 - Passing oid with --batch-check fails
ok 248 - Passing -t with --batch-command fails
ok 249 - Passing --batch-command with -t fails
ok 250 - Passing -s with --batch-command fails
ok 251 - Passing --batch-command with -s fails
ok 252 - Passing -e with --batch-command fails
ok 253 - Passing --batch-command with -e fails
ok 254 - Passing -p with --batch-command fails
ok 255 - Passing --batch-command with -p fails
ok 256 - Passing <type> with --batch-command fails
ok 257 - Passing --batch-command with <type> fails
ok 258 - Passing oid with --batch-command fails
ok 259 - Passing -t with --follow-symlinks fails
ok 260 - Passing -s with --follow-symlinks fails
ok 261 - Passing -e with --follow-symlinks fails
ok 262 - Passing -p with --follow-symlinks fails
ok 263 - Passing -t with --follow-symlinks fails
ok 264 - Passing -s with --follow-symlinks fails
ok 265 - Passing -e with --follow-symlinks fails
ok 266 - Passing -p with --follow-symlinks fails
ok 267 - --batch-check for a non-existent named object
ok 268 - --batch-check for a non-existent hash
ok 269 - --batch for an existent and a non-existent hash
ok 270 - --batch-check for an empty line
ok 271 - empty --batch-check notices missing object
ok 272 - --batch with multiple oids gives correct format
ok 273 - --batch, -z with multiple oids gives correct format
ok 274 - --batch, -Z with multiple oids gives correct format
ok 275 - --batch-check with multiple oids gives correct format
ok 276 - --batch-check, -z with multiple oids gives correct format
ok 277 - --batch-check, -Z with multiple oids gives correct format
ok 278 - --batch-command with multiple info calls gives correct format
ok 279 - --batch-command with multiple command calls gives correct format
ok 280 - --batch with multiple oids gives correct format
ok 281 - --batch, -z with multiple oids gives correct format
ok 282 - --batch, -Z with multiple oids gives correct format
ok 283 - --batch-check with multiple oids gives correct format
ok 284 - --batch-check, -z with multiple oids gives correct format
ok 285 - --batch-check, -Z with multiple oids gives correct format
ok 286 - --batch-command with multiple info calls gives correct format
ok 287 - --batch-command with multiple command calls gives correct format
ok 288 - setup with newline in input
ok 289 - --batch-check, -z with newline in input
ok 290 - --batch-check, -Z with newline in input
ok 291 - setup blobs which are likely to delta
ok 292 - confirm that neither loose blob is a delta
ok 293 - %(deltabase) reports packed delta bases
ok 294 - setup bogus data
ok 295 - cat-file  -s error on bogus short OID
ok 296 - cat-file  -s error on bogus full OID
ok 297 - cat-file  -s error on missing short OID
ok 298 - cat-file  -s error on missing full OID
ok 299 - cat-file  -t error on bogus short OID
ok 300 - cat-file  -t error on bogus full OID
ok 301 - cat-file  -t error on missing short OID
ok 302 - cat-file  -t error on missing full OID
ok 303 - cat-file  -p error on bogus short OID
ok 304 - cat-file  -p error on bogus full OID
ok 305 - cat-file  -p error on missing short OID
ok 306 - cat-file  -p error on missing full OID
ok 307 - cat-file --allow-unknown-type -s error on bogus short OID
ok 308 - cat-file --allow-unknown-type -s error on bogus full OID
ok 309 - cat-file --allow-unknown-type -s error on missing short OID
ok 310 - cat-file --allow-unknown-type -s error on missing full OID
ok 311 - cat-file --allow-unknown-type -t error on bogus short OID
ok 312 - cat-file --allow-unknown-type -t error on bogus full OID
ok 313 - cat-file --allow-unknown-type -t error on missing short OID
ok 314 - cat-file --allow-unknown-type -t error on missing full OID
ok 315 - -e is OK with a broken object without --allow-unknown-type
ok 316 - -e can not be combined with --allow-unknown-type
ok 317 - -p cannot print a broken object even with --allow-unknown-type
ok 318 - <type> <hash> does not work with objects of broken types
ok 319 - broken types combined with --batch and --batch-check
ok 320 - the --batch and --batch-check options do not combine with --allow-unknown-type
ok 321 - the --allow-unknown-type option does not consider replacement refs
ok 322 - Type of broken object is correct
ok 323 - Size of broken object is correct
ok 324 - clean up broken object
ok 325 - Type of broken object is correct when type is large
ok 326 - Size of large broken object is correct when type is large
ok 327 - clean up broken object
ok 328 - cat-file -t and -s on corrupt loose object
ok 329 - prep for symlink tests
ok 330 - git cat-file --batch-check --follow-symlinks works for non-links
ok 331 - git cat-file --batch-check --follow-symlinks works for in-repo, same-dir links
ok 332 - git cat-file --batch-check --follow-symlinks works for in-repo, links to dirs
ok 333 - git cat-file --batch-check --follow-symlinks works for broken in-repo, same-dir links
ok 334 - git cat-file --batch-check --follow-symlinks -Z works for broken in-repo, same-dir links
ok 335 - git cat-file --batch-check --follow-symlinks works for same-dir links-to-links
ok 336 - git cat-file --batch-check --follow-symlinks works for parent-dir links
ok 337 - git cat-file --batch-check --follow-symlinks -Z works for parent-dir links
ok 338 - git cat-file --batch-check --follow-symlinks works for .. links
ok 339 - git cat-file --batch-check --follow-symlinks works for ../.. links
ok 340 - git cat-file --batch-check --follow-symlinks works for dir/ links
ok 341 - git cat-file --batch-check --follow-symlinks works for dir/subdir links
ok 342 - git cat-file --batch-check --follow-symlinks works for dir ->subdir links
ok 343 - git cat-file --batch-check --follow-symlinks works for out-of-repo symlinks
ok 344 - git cat-file --batch-check --follow-symlinks works for out-of-repo symlinks in dirs
ok 345 - git cat-file --batch-check --follow-symlinks works for out-of-repo symlinks in subdirs
ok 346 - git cat-file --batch-check --follow-symlinks works for symlinks with internal ..
ok 347 - git cat-file --batch-check --follow-symlink breaks loops
ok 348 - git cat-file --batch-check --follow-symlink -Z breaks loops
ok 349 - git cat-file --batch --follow-symlink returns correct sha and mode
ok 350 - cat-file --batch-all-objects shows all objects
ok 351 - cat-file --unordered works
ok 352 - set up object list for --batch-all-objects tests
ok 353 - cat-file --batch="%(objectname)" with --batch-all-objects will work
ok 354 - cat-file --batch="%(rest)" with --batch-all-objects will work
ok 355 - cat-file --batch="batman" with --batch-all-objects will work
ok 356 - cat-file %(objectsize:disk) with --batch-all-objects
ok 357 - set up replacement object
ok 358 - cat-file --batch respects replace objects
ok 359 - cat-file --batch-check respects replace objects
ok 360 - cat-file --batch-all-objects --batch ignores replace
ok 361 - cat-file --batch-all-objects --batch-check ignores replace
ok 362 - batch-command empty command
ok 363 - batch-command whitespace before command
ok 364 - batch-command unknown command
ok 365 - batch-command missing arguments
ok 366 - batch-command flush with arguments
ok 367 - batch-command flush without --buffer
# passed all 367 test(s)
1..367
*** t1007-hash-object.sh ***
ok 1 - setup
ok 2 - multiple '--stdin's are rejected
ok 3 - Can't use --stdin and --stdin-paths together
ok 4 - Can't pass filenames as arguments with --stdin-paths
ok 5 - Can't use --path with --stdin-paths
ok 6 - Can't use --path with --no-filters
Initialized empty Git repository in $(@D)/t/trash directory.t1007-hash-object/test/.git/
ok 7 - hash a file
ok 8 - blob does not exist in database
ok 9 - hash from stdin
ok 10 - blob does not exist in database
ok 11 - hash a file and write to database
ok 12 - blob exists in database
ok 13 - git hash-object --stdin file1 <file0 first operates on file0, then file1
ok 14 - set up crlf tests
ok 15 - check that appropriate filter is invoke when --path is used
ok 16 - gitattributes also work in a subdirectory
ok 17 - --path works in a subdirectory
ok 18 - check that --no-filters option works
ok 19 - check that --no-filters option works with --stdin-paths
Initialized empty Git repository in $(@D)/t/trash directory.t1007-hash-object/test/.git/
ok 20 - hash from stdin and write to database (-w --stdin)
ok 21 - blob exists in database
Initialized empty Git repository in $(@D)/t/trash directory.t1007-hash-object/test/.git/
ok 22 - hash from stdin and write to database (--stdin -w)
ok 23 - blob exists in database
ok 24 - hash two files with names on stdin
Initialized empty Git repository in $(@D)/t/trash directory.t1007-hash-object/test/.git/
ok 25 - hash two files with names on stdin and write to database (-w --stdin-paths)
ok 26 - blob exists in database
ok 27 - blob exists in database
Initialized empty Git repository in $(@D)/t/trash directory.t1007-hash-object/test/.git/
ok 28 - hash two files with names on stdin and write to database (--stdin-paths -w)
ok 29 - blob exists in database
ok 30 - blob exists in database
ok 31 - too-short tree
ok 32 - malformed mode in tree
ok 33 - empty filename in tree
ok 34 - duplicate filename in tree
ok 35 - corrupt commit
ok 36 - corrupt tag
ok 37 - hash-object complains about bogus type name
ok 38 - hash-object complains about truncated type name
ok 39 - --literally
ok 40 - --literally with extra-long type
# passed all 40 test(s)
1..40
*** t1008-read-tree-overlay.sh ***
ok 1 - setup
ok 2 - multi-read
# passed all 2 test(s)
1..2
*** t1009-read-tree-new-index.sh ***
ok 1 - setup
ok 2 - non-existent index file
ok 3 - empty index file
# passed all 3 test(s)
1..3
*** t1010-mktree.sh ***
ok 1 - setup
ok 2 - ls-tree piped to mktree (1)
ok 3 - ls-tree piped to mktree (2)
ok 4 - ls-tree output in wrong order given to mktree (1)
ok 5 - ls-tree output in wrong order given to mktree (2)
ok 6 - allow missing object with --missing
ok 7 - mktree refuses to read ls-tree -r output (1)
ok 8 - mktree refuses to read ls-tree -r output (2)
# passed all 8 test(s)
1..8
*** t1011-read-tree-sparse-checkout.sh ***
ok 1 - setup
ok 2 - read-tree without .git/info/sparse-checkout
ok 3 - read-tree with .git/info/sparse-checkout but disabled
ok 4 - read-tree --no-sparse-checkout with empty .git/info/sparse-checkout and enabled
ok 5 - read-tree with empty .git/info/sparse-checkout
ok 6 - match directories with trailing slash
ok 7 - match directories without trailing slash
ok 8 - match directories with negated patterns
ok 9 - match directories with negated patterns (2)
ok 10 - match directory pattern
ok 11 - checkout area changes
ok 12 - read-tree updates worktree, absent case
ok 13 - read-tree will not throw away dirty changes, non-sparse
ok 14 - read-tree will not throw away dirty changes, sparse
ok 15 - read-tree updates worktree, dirty case
ok 16 - read-tree removes worktree, dirty case
ok 17 - read-tree adds to worktree, absent case
ok 18 - read-tree adds to worktree, dirty case
ok 19 - index removal and worktree narrowing at the same time
ok 20 - read-tree --reset removes outside worktree
ok 21 - print warnings when some worktree updates disabled
ok 22 - checkout without --ignore-skip-worktree-bits
ok 23 - checkout with --ignore-skip-worktree-bits
# passed all 23 test(s)
1..23
*** t1012-read-tree-df.sh ***
ok 1 - setup
ok 2 - 3-way (1)
ok 3 - 3-way (2)
ok 4 - 3-way (3)
ok 5 - 2-way (1)
# passed all 5 test(s)
1..5
*** t1013-read-tree-submodule.sh ***
ok 1 - git read-tree -u -m --recurse-submodules: added submodule is checked out
ok 2 - git read-tree -u -m --recurse-submodules: added submodule is checked out in empty dir
ok 3 - git read-tree -u -m --recurse-submodules: replace tracked file with submodule checks out submodule
ok 4 - git read-tree -u -m --recurse-submodules: replace directory with submodule
ok 5 - git read-tree -u -m --recurse-submodules: nested submodules are checked out
ok 6 - git read-tree -u -m --recurse-submodules: removed submodule removes submodules working tree
ok 7 - git read-tree -u -m --recurse-submodules: removed submodule absorbs submodules .git directory
ok 8 - git read-tree -u -m --recurse-submodules: replace submodule with a file
not ok 9 - git read-tree -u -m --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 10 - git read-tree -u -m --recurse-submodules: worktrees of nested submodules are removed
ok 11 - git read-tree -u -m --recurse-submodules: modified submodule updates submodule work tree
ok 12 - git read-tree -u -m --recurse-submodules: updating to a missing submodule commit fails
ok 13 - git read-tree -u -m --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 14 - git read-tree -u -m --recurse-submodules: added submodule doesn't remove untracked file with same name
ok 15 - git read-tree -u -m --recurse-submodules: added submodule removes an untracked ignored file
not ok 16 - git read-tree -u -m --recurse-submodules: replace submodule with a directory # TODO known breakage
not ok 17 - git read-tree -u -m --recurse-submodules: replace submodule containing a .git directory with a directory must absorb the git dir # TODO known breakage
ok 18 - git read-tree -u -m --recurse-submodules: replace submodule with a file works ignores ignored files in submodule
ok 19 - git -c submodule.recurse=true read-tree -u -m: modified submodule updates submodule work tree
ok 20 - git read-tree -u -m --recurse-submodules: modified submodule updates submodule recursively
ok 21 - git read-tree -u --reset --recurse-submodules: added submodule is checked out
ok 22 - git read-tree -u --reset --recurse-submodules: added submodule is checked out in empty dir
ok 23 - git read-tree -u --reset --recurse-submodules: replace tracked file with submodule checks out submodule
ok 24 - git read-tree -u --reset --recurse-submodules: replace directory with submodule
ok 25 - git read-tree -u --reset --recurse-submodules: nested submodules are checked out
ok 26 - git read-tree -u --reset --recurse-submodules: removed submodule removes submodules working tree
ok 27 - git read-tree -u --reset --recurse-submodules: removed submodule absorbs submodules .git directory
ok 28 - git read-tree -u --reset --recurse-submodules: replace submodule with a file
not ok 29 - git read-tree -u --reset --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 30 - git read-tree -u --reset --recurse-submodules: worktrees of nested submodules are removed
ok 31 - git read-tree -u --reset --recurse-submodules: modified submodule updates submodule work tree
ok 32 - git read-tree -u --reset --recurse-submodules: updating to a missing submodule commit fails
ok 33 - git read-tree -u --reset --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 34 - git read-tree -u --reset --recurse-submodules: added submodule does remove untracked unignored file with same name when forced
ok 35 - git read-tree -u --reset --recurse-submodules: replace submodule with a directory
ok 36 - git read-tree -u --reset --recurse-submodules: replace submodule containing a .git directory with a directory must fail
ok 37 - git read-tree -u --reset --recurse-submodules: replace submodule with a file ignoring ignored files
ok 38 - git read-tree -u --reset --recurse-submodules: modified submodule does update submodule work tree from invalid commit
ok 39 - git read-tree -u --reset --recurse-submodules: updating submodules fixes .git links
ok 40 - git read-tree -u --reset --recurse-submodules: changed submodule worktree is reset
ok 41 - git_test_func: added submodule creates empty directory
ok 42 - git_test_func: added submodule leaves existing empty directory alone
ok 43 - git_test_func: replace tracked file with submodule creates empty directory
ok 44 - git_test_func: replace directory with submodule
ok 45 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 46 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 47 - git_test_func: replace submodule with a directory must fail
ok 48 - git_test_func: replace submodule containing a .git directory with a directory must fail
not ok 49 - git_test_func: replace submodule with a file must fail # TODO known breakage
not ok 50 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 51 - git_test_func: modified submodule does not update submodule work tree
ok 52 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 53 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 54 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 55 - git_test_func: added submodule creates empty directory
ok 56 - git_test_func: added submodule leaves existing empty directory alone
ok 57 - git_test_func: replace tracked file with submodule creates empty directory
ok 58 - git_test_func: replace directory with submodule
ok 59 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 60 - git_test_func: removed submodule leaves submodule containing a .git directory alone
not ok 61 - git_test_func: replace submodule with a directory must fail # TODO known breakage
not ok 62 - git_test_func: replace submodule containing a .git directory with a directory must fail # TODO known breakage
not ok 63 - git_test_func: replace submodule with a file must fail # TODO known breakage
not ok 64 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 65 - git_test_func: modified submodule does not update submodule work tree
ok 66 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 67 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 68 - git_test_func: added submodule does remove untracked unignored file with same name when forced
# still have 10 known breakage(s)
# passed all remaining 58 test(s)
1..68
*** t1014-read-tree-confusing.sh ***
ok 1 - create base tree
ok 2 - enable core.protectHFS for rejection tests
ok 3 - enable core.protectNTFS for rejection tests
ok 4 - reject . at end of path
ok 5 - reject . as subtree
ok 6 - reject .. at end of path
ok 7 - reject .. as subtree
ok 8 - reject .git at end of path
ok 9 - reject .git as subtree
ok 10 - reject .GIT at end of path
ok 11 - reject .GIT as subtree
ok 12 - reject {u200c}.Git at end of path
ok 13 - reject {u200c}.Git as subtree
ok 14 - reject .gI{u200c}T at end of path
ok 15 - reject .gI{u200c}T as subtree
ok 16 - reject .GiT{u200c} at end of path
ok 17 - reject .GiT{u200c} as subtree
ok 18 - reject git~1 at end of path
ok 19 - reject git~1 as subtree
ok 20 - reject .git.{space} at end of path
ok 21 - reject .git.{space} as subtree
ok 22 - reject backslashes at end of path
ok 23 - reject backslashes as subtree
ok 24 - reject backslashes2 at end of path
ok 25 - reject backslashes2 as subtree
ok 26 - reject .git...:alternate-stream at end of path
ok 27 - reject .git...:alternate-stream as subtree
ok 28 - utf-8 paths allowed with core.protectHFS off
# passed all 28 test(s)
1..28
*** t1015-read-index-unmerged.sh ***
ok 1 - setup modify/delete + directory/file conflict
ok 2 - read-tree --reset cleans unmerged entries
ok 3 - One reset --hard cleans unmerged entries
ok 4 - setup directory/file conflict + simple edit/edit
ok 5 - git merge --abort succeeds despite D/F conflict
ok 6 - git am --skip succeeds despite D/F conflict
# passed all 6 test(s)
1..6
*** t1016-compatObjectFormat.sh ***
ok 1 - setup sha1 repository
ok 2 - create a sha1  tagged blob
ok 3 - create a sha1 tagged tree
ok 4 - create a sha1 tagged commit
ok 5 # skip create a sha1 signed commit (missing GPG2)
ok 6 # skip create a sha1 signed tag (missing GPG2)
ok 7 - create a sha1 branch
ok 8 # skip create another sha1 signed tag (missing GPG2)
ok 9 # skip merge the sha1 branches together (missing GPG2)
ok 10 # skip create additional sha1 signed commits (missing GPG2)
ok 11 # skip create additional sha1 signed tags (missing GPG2)
ok 12 - setup sha256 repository
ok 13 - create a sha256  tagged blob
ok 14 - create a sha256 tagged tree
ok 15 - create a sha256 tagged commit
ok 16 # skip create a sha256 signed commit (missing GPG2)
ok 17 # skip create a sha256 signed tag (missing GPG2)
ok 18 - create a sha256 branch
ok 19 # skip create another sha256 signed tag (missing GPG2)
ok 20 # skip merge the sha256 branches together (missing GPG2)
ok 21 # skip create additional sha256 signed commits (missing GPG2)
ok 22 # skip create additional sha256 signed tags (missing GPG2)
ok 23 - Verify blob hello's sha1 oid
ok 24 - Verify blob hello's sha256 oid
ok 25 - Verify hello's sha1 type
ok 26 - Verify hello's sha256 type
ok 27 - Verify hello's sha1 size
ok 28 - Verify hello's sha256 size
ok 29 - Verify hello's sha1 pretty content
ok 30 - Verify hello's sha256 pretty content
ok 31 - Verify hello's sha1 content
ok 32 - Verify hello's sha256 content
ok 33 - Verify tree tree's sha1 oid
ok 34 - Verify tree tree's sha256 oid
ok 35 - Verify tree's sha1 type
ok 36 - Verify tree's sha256 type
ok 37 - Verify tree's sha1 size
ok 38 - Verify tree's sha256 size
ok 39 - Verify tree's sha1 pretty content
ok 40 - Verify tree's sha256 pretty content
ok 41 - Verify tree's sha1 content
ok 42 - Verify tree's sha256 content
ok 43 - Verify commit commit's sha1 oid
ok 44 - Verify commit commit's sha256 oid
ok 45 - Verify commit's sha1 type
ok 46 - Verify commit's sha256 type
ok 47 - Verify commit's sha1 size
ok 48 - Verify commit's sha256 size
ok 49 - Verify commit's sha1 pretty content
ok 50 - Verify commit's sha256 pretty content
ok 51 - Verify commit's sha1 content
ok 52 - Verify commit's sha256 content
ok 53 # skip Verify commit signedcommit's sha1 oid (missing GPG2)
ok 54 # skip Verify commit signedcommit's sha256 oid (missing GPG2)
ok 55 # skip Verify signedcommit's sha1 type (missing GPG2)
ok 56 # skip Verify signedcommit's sha256 type (missing GPG2)
ok 57 # skip Verify signedcommit's sha1 size (missing GPG2)
ok 58 # skip Verify signedcommit's sha256 size (missing GPG2)
ok 59 # skip Verify signedcommit's sha1 pretty content (missing GPG2)
ok 60 # skip Verify signedcommit's sha256 pretty content (missing GPG2)
ok 61 # skip Verify signedcommit's sha1 content (missing GPG2)
ok 62 # skip Verify signedcommit's sha256 content (missing GPG2)
ok 63 - Verify tag hellotag's sha1 oid
ok 64 - Verify tag hellotag's sha256 oid
ok 65 - Verify hellotag's sha1 type
ok 66 - Verify hellotag's sha256 type
ok 67 - Verify hellotag's sha1 size
ok 68 - Verify hellotag's sha256 size
ok 69 - Verify hellotag's sha1 pretty content
ok 70 - Verify hellotag's sha256 pretty content
ok 71 - Verify hellotag's sha1 content
ok 72 - Verify hellotag's sha256 content
ok 73 - Verify tag treetag's sha1 oid
ok 74 - Verify tag treetag's sha256 oid
ok 75 - Verify treetag's sha1 type
ok 76 - Verify treetag's sha256 type
ok 77 - Verify treetag's sha1 size
ok 78 - Verify treetag's sha256 size
ok 79 - Verify treetag's sha1 pretty content
ok 80 - Verify treetag's sha256 pretty content
ok 81 - Verify treetag's sha1 content
ok 82 - Verify treetag's sha256 content
ok 83 - Verify tag committag's sha1 oid
ok 84 - Verify tag committag's sha256 oid
ok 85 - Verify committag's sha1 type
ok 86 - Verify committag's sha256 type
ok 87 - Verify committag's sha1 size
ok 88 - Verify committag's sha256 size
ok 89 - Verify committag's sha1 pretty content
ok 90 - Verify committag's sha256 pretty content
ok 91 - Verify committag's sha1 content
ok 92 - Verify committag's sha256 content
ok 93 # skip Verify tag signedtag's sha1 oid (missing GPG2)
ok 94 # skip Verify tag signedtag's sha256 oid (missing GPG2)
ok 95 # skip Verify signedtag's sha1 type (missing GPG2)
ok 96 # skip Verify signedtag's sha256 type (missing GPG2)
ok 97 # skip Verify signedtag's sha1 size (missing GPG2)
ok 98 # skip Verify signedtag's sha256 size (missing GPG2)
ok 99 # skip Verify signedtag's sha1 pretty content (missing GPG2)
ok 100 # skip Verify signedtag's sha256 pretty content (missing GPG2)
ok 101 # skip Verify signedtag's sha1 content (missing GPG2)
ok 102 # skip Verify signedtag's sha256 content (missing GPG2)
ok 103 - Verify blob more's sha1 oid
ok 104 - Verify blob more's sha256 oid
ok 105 - Verify more's sha1 type
ok 106 - Verify more's sha256 type
ok 107 - Verify more's sha1 size
ok 108 - Verify more's sha256 size
ok 109 - Verify more's sha1 pretty content
ok 110 - Verify more's sha256 pretty content
ok 111 - Verify more's sha1 content
ok 112 - Verify more's sha256 content
ok 113 - Verify blob another's sha1 oid
ok 114 - Verify blob another's sha256 oid
ok 115 - Verify another's sha1 type
ok 116 - Verify another's sha256 type
ok 117 - Verify another's sha1 size
ok 118 - Verify another's sha256 size
ok 119 - Verify another's sha1 pretty content
ok 120 - Verify another's sha256 pretty content
ok 121 - Verify another's sha1 content
ok 122 - Verify another's sha256 content
ok 123 - Verify tree tree2's sha1 oid
ok 124 - Verify tree tree2's sha256 oid
ok 125 - Verify tree2's sha1 type
ok 126 - Verify tree2's sha256 type
ok 127 - Verify tree2's sha1 size
ok 128 - Verify tree2's sha256 size
ok 129 - Verify tree2's sha1 pretty content
ok 130 - Verify tree2's sha256 pretty content
ok 131 - Verify tree2's sha1 content
ok 132 - Verify tree2's sha256 content
ok 133 - Verify commit commit2's sha1 oid
ok 134 - Verify commit commit2's sha256 oid
ok 135 - Verify commit2's sha1 type
ok 136 - Verify commit2's sha256 type
ok 137 - Verify commit2's sha1 size
ok 138 - Verify commit2's sha256 size
ok 139 - Verify commit2's sha1 pretty content
ok 140 - Verify commit2's sha256 pretty content
ok 141 - Verify commit2's sha1 content
ok 142 - Verify commit2's sha256 content
ok 143 # skip Verify tag signedtag2's sha1 oid (missing GPG2)
ok 144 # skip Verify tag signedtag2's sha256 oid (missing GPG2)
ok 145 # skip Verify signedtag2's sha1 type (missing GPG2)
ok 146 # skip Verify signedtag2's sha256 type (missing GPG2)
ok 147 # skip Verify signedtag2's sha1 size (missing GPG2)
ok 148 # skip Verify signedtag2's sha256 size (missing GPG2)
ok 149 # skip Verify signedtag2's sha1 pretty content (missing GPG2)
ok 150 # skip Verify signedtag2's sha256 pretty content (missing GPG2)
ok 151 # skip Verify signedtag2's sha1 content (missing GPG2)
ok 152 # skip Verify signedtag2's sha256 content (missing GPG2)
ok 153 # skip Verify commit signedcommit2's sha1 oid (missing GPG2)
ok 154 # skip Verify commit signedcommit2's sha256 oid (missing GPG2)
ok 155 # skip Verify signedcommit2's sha1 type (missing GPG2)
ok 156 # skip Verify signedcommit2's sha256 type (missing GPG2)
ok 157 # skip Verify signedcommit2's sha1 size (missing GPG2)
ok 158 # skip Verify signedcommit2's sha256 size (missing GPG2)
ok 159 # skip Verify signedcommit2's sha1 pretty content (missing GPG2)
ok 160 # skip Verify signedcommit2's sha256 pretty content (missing GPG2)
ok 161 # skip Verify signedcommit2's sha1 content (missing GPG2)
ok 162 # skip Verify signedcommit2's sha256 content (missing GPG2)
ok 163 # skip Verify commit signedcommit3's sha1 oid (missing GPG2)
ok 164 # skip Verify commit signedcommit3's sha256 oid (missing GPG2)
ok 165 # skip Verify signedcommit3's sha1 type (missing GPG2)
ok 166 # skip Verify signedcommit3's sha256 type (missing GPG2)
ok 167 # skip Verify signedcommit3's sha1 size (missing GPG2)
ok 168 # skip Verify signedcommit3's sha256 size (missing GPG2)
ok 169 # skip Verify signedcommit3's sha1 pretty content (missing GPG2)
ok 170 # skip Verify signedcommit3's sha256 pretty content (missing GPG2)
ok 171 # skip Verify signedcommit3's sha1 content (missing GPG2)
ok 172 # skip Verify signedcommit3's sha256 content (missing GPG2)
ok 173 # skip Verify commit signedcommit4's sha1 oid (missing GPG2)
ok 174 # skip Verify commit signedcommit4's sha256 oid (missing GPG2)
ok 175 # skip Verify signedcommit4's sha1 type (missing GPG2)
ok 176 # skip Verify signedcommit4's sha256 type (missing GPG2)
ok 177 # skip Verify signedcommit4's sha1 size (missing GPG2)
ok 178 # skip Verify signedcommit4's sha256 size (missing GPG2)
ok 179 # skip Verify signedcommit4's sha1 pretty content (missing GPG2)
ok 180 # skip Verify signedcommit4's sha256 pretty content (missing GPG2)
ok 181 # skip Verify signedcommit4's sha1 content (missing GPG2)
ok 182 # skip Verify signedcommit4's sha256 content (missing GPG2)
ok 183 # skip Verify tag signedtag3's sha1 oid (missing GPG2)
ok 184 # skip Verify tag signedtag3's sha256 oid (missing GPG2)
ok 185 # skip Verify signedtag3's sha1 type (missing GPG2)
ok 186 # skip Verify signedtag3's sha256 type (missing GPG2)
ok 187 # skip Verify signedtag3's sha1 size (missing GPG2)
ok 188 # skip Verify signedtag3's sha256 size (missing GPG2)
ok 189 # skip Verify signedtag3's sha1 pretty content (missing GPG2)
ok 190 # skip Verify signedtag3's sha256 pretty content (missing GPG2)
ok 191 # skip Verify signedtag3's sha1 content (missing GPG2)
ok 192 # skip Verify signedtag3's sha256 content (missing GPG2)
ok 193 # skip Verify tag signedtag4's sha1 oid (missing GPG2)
ok 194 # skip Verify tag signedtag4's sha256 oid (missing GPG2)
ok 195 # skip Verify signedtag4's sha1 type (missing GPG2)
ok 196 # skip Verify signedtag4's sha256 type (missing GPG2)
ok 197 # skip Verify signedtag4's sha1 size (missing GPG2)
ok 198 # skip Verify signedtag4's sha256 size (missing GPG2)
ok 199 # skip Verify signedtag4's sha1 pretty content (missing GPG2)
ok 200 # skip Verify signedtag4's sha256 pretty content (missing GPG2)
ok 201 # skip Verify signedtag4's sha1 content (missing GPG2)
ok 202 # skip Verify signedtag4's sha256 content (missing GPG2)
# passed all 202 test(s)
1..202
*** t1020-subdirectory.sh ***
ok 1 - setup
ok 2 - update-index and ls-files
ok 3 - cat-file
ok 4 - diff-files
ok 5 - write-tree
ok 6 - checkout-index
ok 7 - read-tree
ok 8 - alias expansion
ok 9 - !alias expansion
ok 10 - GIT_PREFIX for !alias
ok 11 - GIT_PREFIX for built-ins
ok 12 - no file/rev ambiguity check inside .git
ok 13 - no file/rev ambiguity check inside a bare repo (explicit GIT_DIR)
ok 14 - no file/rev ambiguity check inside a bare repo
ok 15 - detection should not be fooled by a symlink
# passed all 15 test(s)
1..15
*** t1021-rerere-in-workdir.sh ***
ok 1 - setup
ok 2 - rerere in workdir
not ok 3 - rerere in workdir (relative) # TODO known breakage
# still have 1 known breakage(s)
# passed all remaining 2 test(s)
1..3
*** t1022-read-tree-partial-clone.sh ***
ok 1 - read-tree in partial clone prefetches in one batch
# passed all 1 test(s)
1..1
*** t1050-large.sh ***
ok 1 - core.bigFileThreshold must be non-negative
ok 2 - setup
ok 3 - enter "large" codepath, with small core.bigFileThreshold
ok 4 - add with -c core.compression=0
ok 5 - add with -c core.compression=9
ok 6 - add with -c core.compression=0 -c pack.compression=0
ok 7 - add with -c core.compression=9 -c pack.compression=0
ok 8 - add with -c core.compression=0 -c pack.compression=9
ok 9 - add with -c core.compression=9 -c pack.compression=9
ok 10 - add with -c pack.compression=0
ok 11 - add with -c pack.compression=9
ok 12 - add a large file or two
ok 13 - checkout a large file
ok 14 - packsize limit
ok 15 - diff --raw
ok 16 - diff --stat
ok 17 - diff
ok 18 - diff --cached
ok 19 - hash-object
ok 20 - cat-file a large file
ok 21 - cat-file a large file from a tag
ok 22 - git-show a large file
ok 23 - index-pack
ok 24 - repack
ok 25 - pack-objects with large loose object
ok 26 - tar archiving
ok 27 - zip archiving, store only
ok 28 - zip archiving, deflate
ok 29 - fsck large blobs
# passed all 29 test(s)
1..29
*** t1051-large-conversion.sh ***
ok 1 - setup input tests
ok 2 - autocrlf=true converts on input
ok 3 - eol=crlf converts on input
ok 4 - ident converts on input
ok 5 - user-defined filters convert on input
ok 6 - setup output tests
ok 7 - autocrlf=true converts on output
ok 8 - eol=crlf converts on output
ok 9 - user-defined filters convert on output
ok 10 - ident converts on output
ok 11 # skip files over 4GB convert on output (missing !LONG_IS_64BIT,EXPENSIVE of EXPENSIVE,SIZE_T_IS_64BIT,!LONG_IS_64BIT)
ok 12 # skip files over 4GB convert on input (missing !LONG_IS_64BIT,EXPENSIVE of EXPENSIVE,SIZE_T_IS_64BIT,!LONG_IS_64BIT)
# passed all 12 test(s)
1..12
*** t1060-object-corruption.sh ***
ok 1 - setup corrupt repo
ok 2 - setup repo with missing object
ok 3 - setup repo with misnamed object
ok 4 - streaming a corrupt blob fails
ok 5 - getting type of a corrupt blob fails
ok 6 - read-tree -u detects bit-errors in blobs
ok 7 - read-tree -u detects missing objects
ok 8 - clone --no-local --bare detects corruption
ok 9 - clone --no-local --bare detects missing object
ok 10 - clone --no-local --bare detects misnamed object
ok 11 - clone --local detects corruption
ok 12 - error detected during checkout leaves repo intact
ok 13 - clone --local detects missing objects
not ok 14 - clone --local detects misnamed objects # TODO known breakage
ok 15 - fetch into corrupted repo with index-pack
ok 16 - internal tree objects are not "missing"
ok 17 - partial clone of corrupted repository
# still have 1 known breakage(s)
# passed all remaining 16 test(s)
1..17
*** t1090-sparse-checkout-scope.sh ***
ok 1 - setup
ok 2 - create feature branch
ok 3 - perform sparse checkout of main
ok 4 - merge feature branch into sparse checkout of main
ok 5 - return to full checkout of main
ok 6 - skip-worktree on files outside sparse patterns
ok 7 - in partial clone, sparse checkout only fetches needed blobs
# passed all 7 test(s)
1..7
*** t1091-sparse-checkout-builtin.sh ***
ok 1 - setup
ok 2 - git sparse-checkout list (not sparse)
ok 3 - git sparse-checkout list (not sparse)
ok 4 - git sparse-checkout list (populated)
ok 5 - git sparse-checkout init
ok 6 - git sparse-checkout init in empty repo
ok 7 - git sparse-checkout list after init
ok 8 - init with existing sparse-checkout
ok 9 - clone --sparse
ok 10 - switching to cone mode with non-cone mode patterns
ok 11 - interaction with clone --no-checkout (unborn index)
ok 12 - set enables config
ok 13 - set sparse-checkout using builtin
ok 14 - set sparse-checkout using --stdin
ok 15 - add to sparse-checkout
ok 16 - worktree: add copies sparse-checkout patterns
ok 17 - cone mode: match patterns
ok 18 - cone mode: warn on bad pattern
ok 19 - sparse-checkout disable
ok 20 - sparse-index enabled and disabled
ok 21 - cone mode: init and set
ok 22 - cone mode: list
ok 23 - cone mode: set with nested folders
ok 24 - cone mode: add independent path
ok 25 - cone mode: add sibling path
ok 26 - cone mode: add parent path
ok 27 - not-up-to-date does not block rest of sparsification
ok 28 - revert to old sparse-checkout on empty update
ok 29 - fail when lock is taken
ok 30 - .gitignore should not warn about cone mode
ok 31 - sparse-checkout (init|set|disable) warns with dirty status
ok 32 - sparse-checkout (init|set|disable) warns with unmerged status
not ok 33 - sparse-checkout reapply # TODO known breakage
ok 34 - reapply can handle config options
ok 35 - cone mode: set with core.ignoreCase=true
ok 36 - setup submodules
ok 37 - interaction with submodules
ok 38 - check-rules interaction with submodules
ok 39 - different sparse-checkouts with worktrees
ok 40 - set using filename keeps file on-disk
ok 41 - pattern-checks: /A/**
ok 42 - pattern-checks: /A/**/B/
ok 43 - pattern-checks: too short
ok 44 - pattern-checks: not too short
ok 45 - pattern-checks: trailing "*"
ok 46 - pattern-checks: starting "*"
ok 47 - pattern-checks: non directory pattern
ok 48 - pattern-checks: contained glob characters
ok 49 - pattern-checks: escaped characters
ok 50 # skip cone mode replaces backslashes with slashes (missing MINGW)
ok 51 - cone mode clears ignored subdirectories
ok 52 - malformed cone-mode patterns
ok 53 - set from subdir pays attention to prefix
ok 54 - add from subdir pays attention to prefix
ok 55 - set from subdir in non-cone mode throws an error
ok 56 - set from subdir in non-cone mode throws an error
ok 57 - by default, cone mode will error out when passed files
ok 58 - error on mistyped command line options
ok 59 - by default, non-cone mode will warn on individual files
ok 60 - setup bare repo
ok 61 - list fails outside work tree
ok 62 - add fails outside work tree
ok 63 - set fails outside work tree
ok 64 - init fails outside work tree
ok 65 - reapply fails outside work tree
ok 66 - disable fails outside work tree
ok 67 - setup clean
ok 68 - check-rules cone mode
ok 69 - check-rules non-cone mode
ok 70 - check-rules cone mode is default
ok 71 - check-rules quoting
ok 72 - check-rules null termination
# still have 1 known breakage(s)
# passed all remaining 71 test(s)
1..72
*** t1092-sparse-checkout-compatibility.sh ***
ok 1 - setup
ok 2 - sparse-index contents
ok 3 - expanded in-memory index matches full index
ok 4 - root directory cannot be sparse
ok 5 - status with options
ok 6 - status with diff in unexpanded sparse directory
ok 7 - status reports sparse-checkout
ok 8 - add, commit, checkout
ok 9 - deep changes during checkout
ok 10 - checkout with modified sparse directory
ok 11 - checkout orphan then non-orphan
ok 12 - add outside sparse cone
ok 13 - commit including unstaged changes
ok 14 - status/add: outside sparse cone
ok 15 - checkout and reset --hard
ok 16 - diff --cached
ok 17 - diff with renames and conflicts
ok 18 - diff with directory/file conflicts
ok 19 - log with pathspec outside sparse definition
ok 20 - blame with pathspec inside sparse definition
ok 21 - blame with pathspec outside sparse definition
ok 22 - checkout and reset (mixed)
ok 23 - checkout and reset (merge)
ok 24 - checkout and reset (keep)
ok 25 - reset with pathspecs inside sparse definition
ok 26 - reset with pathspecs outside sparse definition
ok 27 - reset with wildcard pathspec
ok 28 - reset hard with removed sparse dir
ok 29 - update-index modify outside sparse definition
ok 30 - update-index --add outside sparse definition
ok 31 - update-index --remove outside sparse definition
ok 32 - update-index with directories
ok 33 - update-index --again file outside sparse definition
ok 34 - update-index --cacheinfo
ok 35 - 'read-tree -mu base HEAD update-folder2' with files outside sparse definition
ok 36 - 'read-tree -mu update-folder1 update-folder2' with files outside sparse definition
ok 37 - 'read-tree -mu update-folder2' with files outside sparse definition
ok 38 - read-tree --merge with edit/edit conflicts in sparse directories
ok 39 - read-tree --prefix
ok 40 - read-tree --merge with directory-file conflicts
ok 41 - merge, cherry-pick, and rebase
ok 42 - merge with conflict outside cone
ok 43 - cherry-pick/rebase with conflict outside cone
ok 44 - merge with outside renames
ok 45 - cherry-pick with conflicts
ok 46 - stash
ok 47 - checkout-index inside sparse definition
ok 48 - checkout-index outside sparse definition
ok 49 - checkout-index with folders
ok 50 - checkout-index --all
ok 51 - clean
ok 52 - show (cached blobs/trees)
ok 53 - rev-parse (cached blobs/trees)
ok 54 - submodule handling
ok 55 - sparse-index is expanded and converted back
ok 56 - index.sparse disabled inline uses full index
ok 57 - sparse-index is not expanded
ok 58 - sparse-index is not expanded: merge conflict in cone
ok 59 - sparse-index is not expanded: stash
ok 60 - describe tested on all
ok 61 - sparse-index is not expanded: describe
ok 62 - sparse index is not expanded: diff
ok 63 - sparse index is not expanded: show and rev-parse
ok 64 - sparse index is not expanded: update-index
ok 65 - sparse index is not expanded: blame
ok 66 - sparse index is not expanded: fetch/pull
ok 67 - sparse index is not expanded: read-tree
ok 68 - ls-files
ok 69 - sparse index is not expanded: sparse-checkout
ok 70 - reset mixed and checkout orphan
ok 71 - add everything with deep new file
ok 72 - checkout behaves oddly with df-conflict-1
ok 73 - checkout behaves oddly with df-conflict-2
ok 74 - mv directory from out-of-cone to in-cone
ok 75 - rm pathspec inside sparse definition
ok 76 - rm pathspec outside sparse definition
ok 77 - rm pathspec expands index when necessary
ok 78 - sparse index is not expanded: rm
ok 79 - grep with and --cached
ok 80 - grep is not expanded
not ok 81 - grep within submodules is not expanded # TODO known breakage
ok 82 - grep sparse directory within submodules
ok 83 - write-tree
ok 84 - sparse-index is not expanded: write-tree
ok 85 - diff-files with pathspec inside sparse definition
ok 86 - diff-files with pathspec outside sparse definition
ok 87 - sparse index is not expanded: diff-files
ok 88 - diff-tree
ok 89 - sparse-index is not expanded: diff-tree
ok 90 - worktree
ok 91 - worktree is not expanded
ok 92 - check-attr with pathspec inside sparse definition
ok 93 - check-attr with pathspec outside sparse definition
not ok 94 - diff --check with pathspec outside sparse definition # TODO known breakage
ok 95 - sparse-index is not expanded: check-attr
# still have 2 known breakage(s)
# passed all remaining 93 test(s)
1..95
*** t1100-commit-tree-options.sh ***
ok 1 - test preparation: write empty tree
ok 2 - construct commit
ok 3 - read commit
ok 4 - compare commit
ok 5 - flags and then non flags
# passed all 5 test(s)
1..5
*** t1300-config.sh ***
ok 1 - setup whitespace config
ok 2 - no internal whitespace
ok 3 - internal whitespace
ok 4 - internal and trailing whitespace
ok 5 - internal and trailing whitespace, all quoted
ok 6 - internal and more trailing whitespace
ok 7 - internal and more trailing whitespace, all quoted
ok 8 - internal and more trailing whitespace, not all quoted
ok 9 - leading and trailing whitespace
ok 10 - leading and trailing whitespace, all quoted
ok 11 - leading and trailing whitespace, not all quoted
ok 12 - inline comment
ok 13 - inline comment, quoted
ok 14 - clear default config
ok 15 - initial
ok 16 - mixed case
ok 17 - similar section
ok 18 - uppercase section
ok 19 - replace with non-match
ok 20 - replace with non-match (actually matching)
ok 21 - append comments
ok 22 - Prohibited LF in comment
ok 23 - non-match result
ok 24 - find mixed-case key by canonical name
ok 25 - find mixed-case key by non-canonical name
ok 26 - subsections are not canonicalized by git-config
ok 27 - value for missing section and missing key is not printed
ok 28 - value for missing section and existing key is not printed
ok 29 - value for existing section and missing key is not printed
ok 30 - value for missing subsection and missing key is not printed
ok 31 - value for existing subsection and missing key is not printed
ok 32 - value for missing subsection and existing key is not printed
ok 33 - unset with cont. lines
ok 34 - unset with cont. lines is correct
ok 35 - multiple unset
ok 36 - multiple unset is correct
ok 37 - --replace-all missing value
ok 38 - --replace-all
ok 39 - all replaced
ok 40 - really mean test
ok 41 - really really mean test
ok 42 - get value
ok 43 - unset
ok 44 - multivar
ok 45 - non-match
ok 46 - non-match value
ok 47 - multi-valued get returns final one
ok 48 - multi-valued get-all returns all
ok 49 - multivar replace
ok 50 - ambiguous unset
ok 51 - invalid unset
ok 52 - multivar unset
ok 53 - invalid key
ok 54 - correct key
ok 55 - hierarchical section
ok 56 - hierarchical section value
ok 57 - working --list
ok 58 - --list without repo produces empty output
ok 59 - --name-only --list
ok 60 - --get-regexp
ok 61 - --name-only --get-regexp
ok 62 - --add
ok 63 - get variable with no value
ok 64 - get variable with empty value
ok 65 - get-regexp variable with no value
ok 66 - get-regexp --bool variable with no value
ok 67 - get-regexp variable with empty value
ok 68 - get bool variable with no value
ok 69 - get bool variable with empty value
ok 70 - no arguments, but no crash
ok 71 - new section is partial match of another
ok 72 - new variable inserts into proper section
ok 73 - alternative --file (non-existing file should fail)
ok 74 - alternative GIT_CONFIG
ok 75 - alternative GIT_CONFIG (--file)
ok 76 - alternative GIT_CONFIG (--file=-)
ok 77 - setting a value in stdin is an error
ok 78 - editing stdin is an error
ok 79 - refer config from subdirectory
ok 80 - --set in alternative file
ok 81 - rename section
ok 82 - rename succeeded
ok 83 - rename non-existing section
ok 84 - rename succeeded
ok 85 - rename another section
ok 86 - rename succeeded
ok 87 - rename a section with a var on the same line
ok 88 - rename succeeded
ok 89 - renaming empty section name is rejected
ok 90 - renaming to bogus section is rejected
ok 91 - renaming a section with a long line
ok 92 - renaming an embedded section with a long line
ok 93 - renaming a section with an overly-long line
ok 94 - remove section
ok 95 - section was removed properly
ok 96 - section ending
ok 97 - numbers
ok 98 - --int is at least 64 bits
ok 99 - invalid unit
ok 100 - invalid unit boolean
ok 101 - line number is reported correctly
ok 102 - invalid stdin config
ok 103 - bool
ok 104 - invalid bool (--get)
ok 105 - invalid bool (set)
ok 106 - set --bool
ok 107 - set --int
ok 108 - get --bool-or-int
ok 109 - set --bool-or-int
ok 110 - set --path
ok 111 - get --path
ok 112 - get --path copes with unset $HOME
ok 113 - get --path barfs on boolean variable
ok 114 - get --expiry-date
ok 115 - get --type=color
ok 116 - set --type=color
ok 117 - get --type=color barfs on non-color
ok 118 - set --type=color barfs on non-color
ok 119 - quoting
ok 120 - key with newline
ok 121 - value with newline
ok 122 - value continued on next line
ok 123 - --null --list
ok 124 - --null --get-regexp
ok 125 - inner whitespace kept verbatim, spaces only
ok 126 - inner whitespace kept verbatim, horizontal tabs only
ok 127 - inner whitespace kept verbatim, horizontal tabs and spaces
ok 128 - symlinked configuration
ok 129 - symlink to nonexistent configuration
ok 130 - check split_cmdline return
ok 131 - git -c "key=value" support
ok 132 - git -c can represent empty string
ok 133 - key sanity-checking
ok 134 - git -c works with aliases of builtins
ok 135 - aliases can be CamelCased
ok 136 - git -c does not split values on equals
ok 137 - git -c dies on bogus config
ok 138 - git -c complains about empty key
ok 139 - git -c complains about empty key and value
ok 140 - multiple git -c appends config
ok 141 - last one wins: two level vars
ok 142 - last one wins: three level vars
ok 143 - old-fashioned settings are case insensitive
ok 144 - setting different case sensitive subsections 
ok 145 - git -c a=VAL rejects invalid 'a'
ok 146 - git -c .a=VAL rejects invalid '.a'
ok 147 - git -c a.=VAL rejects invalid 'a.'
ok 148 - git -c a.0b=VAL rejects invalid 'a.0b'
ok 149 - git -c a.b c.=VAL rejects invalid 'a.b c.'
ok 150 - git -c a.b c.0d=VAL rejects invalid 'a.b c.0d'
ok 151 - git -c a.b=VAL works with valid 'a.b'
ok 152 - git -c a.b c.d=VAL works with valid 'a.b c.d'
ok 153 - git -c is not confused by empty environment
ok 154 - GIT_CONFIG_PARAMETERS handles old-style entries
ok 155 - GIT_CONFIG_PARAMETERS handles new-style entries
ok 156 - old and new-style entries can mix
ok 157 - old and new bools with ambiguous subsection
ok 158 - detect bogus GIT_CONFIG_PARAMETERS
ok 159 - git --config-env=key=envvar support
ok 160 - git --config-env with missing value
ok 161 - git --config-env fails with invalid parameters
ok 162 - git -c and --config-env work together
ok 163 - git -c and --config-env override each other
ok 164 - --config-env handles keys with equals
ok 165 - git config handles environment config pairs
ok 166 - git config ignores pairs without count
ok 167 - git config ignores pairs exceeding count
ok 168 - git config ignores pairs with zero count
ok 169 - git config ignores pairs with empty count
ok 170 - git config fails with invalid count
ok 171 - git config fails with missing config key
ok 172 - git config fails with missing config value
ok 173 - git config fails with invalid config pair key
ok 174 - environment overrides config file
ok 175 - GIT_CONFIG_PARAMETERS overrides environment config
ok 176 - command line overrides environment config
ok 177 - git config --edit works
ok 178 - git config --edit respects core.editor
ok 179 - barf on syntax error
ok 180 - barf on incomplete section header
ok 181 - barf on incomplete string
ok 182 - urlmatch
ok 183 - urlmatch with --show-scope
ok 184 - urlmatch favors more specific URLs
ok 185 - urlmatch with wildcard
ok 186 - --unset last key removes section (except if commented)
ok 187 - --unset-all removes section if empty & uncommented
ok 188 - adding a key into an empty section reuses header
ok 189 - preserves existing permissions
ok 190 - set up --show-origin tests
ok 191 - --show-origin with --list
ok 192 - --show-origin with --list --null
ok 193 - --show-origin with single file
ok 194 - --show-origin with --get-regexp
ok 195 - --show-origin getting a single key
ok 196 - set up custom config file
ok 197 - set up custom config file with special name characters
ok 198 - --show-origin escape special file name characters
ok 199 - --show-origin stdin
ok 200 - --show-origin stdin with file include
ok 201 - --show-origin blob
ok 202 - --show-origin blob ref
ok 203 - --show-origin with --default
ok 204 - --show-scope with --list
ok 205 - --show-scope with --blob
ok 206 - --show-scope with --local
ok 207 - --show-scope getting a single value
ok 208 - --show-scope with --show-origin
ok 209 - --show-scope with --default
ok 210 - override global and system config
ok 211 - override global and system config with missing file
ok 212 - system override has no effect with GIT_CONFIG_NOSYSTEM
ok 213 - write to overridden global and system config
ok 214 - --local requires a repo
ok 215 - --worktree requires a repo
ok 216 - identical modern --type specifiers are allowed
ok 217 - identical legacy --type specifiers are allowed
ok 218 - identical mixed --type specifiers are allowed
ok 219 - non-identical modern --type specifiers are not allowed
ok 220 - non-identical legacy --type specifiers are not allowed
ok 221 - non-identical mixed --type specifiers are not allowed
ok 222 - --type allows valid type specifiers
ok 223 - --no-type unsets type specifiers
ok 224 - unset type specifiers may be reset to conflicting ones
ok 225 - --type rejects unknown specifiers
ok 226 - --type=int requires at least one digit
ok 227 - --replace-all does not invent newlines
ok 228 - set all config with value-pattern
ok 229 - --replace-all and value-pattern
ok 230 - refuse --fixed-value for incompatible actions
ok 231 - --fixed-value uses exact string matching
ok 232 - --get and --get-all with --fixed-value
ok 233 - includeIf.hasconfig:remote.*.url
ok 234 - includeIf.hasconfig:remote.*.url respects last-config-wins
ok 235 - includeIf.hasconfig:remote.*.url globs
ok 236 - includeIf.hasconfig:remote.*.url forbids remote url in such included files
# passed all 236 test(s)
1..236
*** t1301-shared-repo.sh ***
ok 1 - shared = 0400 (faulty permission u-w)
ok 2 - shared=1 does not clear bits preset by umask 002
ok 3 - shared=1 does not clear bits preset by umask 022
ok 4 - shared=all
ok 5 - template cannot set core.bare
ok 6 - update-server-info honors core.sharedRepository
ok 7 - shared = 0660 (r--r-----) ro
ok 8 - shared = 0660 (rw-rw----) rw
ok 9 - shared = 0640 (r--r-----) ro
ok 10 - shared = 0640 (rw-r-----) rw
ok 11 - shared = 0600 (r--------) ro
ok 12 - shared = 0600 (rw-------) rw
ok 13 - shared = 0666 (r--r--r--) ro
ok 14 - shared = 0666 (rw-rw-rw-) rw
ok 15 - shared = 0664 (r--r--r--) ro
ok 16 - shared = 0664 (rw-rw-r--) rw
ok 17 - info/refs respects umask in unshared repo
ok 18 - forced modes
ok 19 - remote init does not use config from cwd
ok 20 - re-init respects core.sharedrepository (local)
ok 21 - re-init respects core.sharedrepository (remote)
ok 22 - template can set core.sharedrepository
# passed all 22 test(s)
1..22
*** t1302-repo-version.sh ***
ok 1 - setup
ok 2 - gitdir selection on normal repos
ok 3 - gitdir selection on unsupported repo
ok 4 - gitdir not required mode
ok 5 - gitdir required mode
ok 6 - allow version=0 
ok 7 - allow version=1 
ok 8 - allow version=1 noop
ok 9 - abort version=1 no-such-extension
ok 10 - allow version=0 no-such-extension
ok 11 - allow version=0 noop
ok 12 - abort version=0 noop-v1
ok 13 - allow version=1 noop-v1
ok 14 - precious-objects allowed
ok 15 - precious-objects blocks destructive repack
ok 16 - other repacks are OK
ok 17 - precious-objects blocks prune
ok 18 - gc runs without complaint
# passed all 18 test(s)
1..18
*** t1303-wacky-config.sh ***
ok 1 - modify same key
ok 2 - add key in same section
ok 3 - add key in different section
ok 4 - make sure git config escapes section names properly
ok 5 - do not crash on special long config line
ok 6 - get many entries
ok 7 - get many entries by regex
ok 8 - add and replace one of many entries
ok 9 - replace many entries
ok 10 - unset many entries
ok 11 - --add appends new value after existing empty value
# passed all 11 test(s)
1..11
*** t1304-default-acl.sh ***
ok 1 - checking for a working acl setup
ok 2 # skip Setup test repo (missing SETFACL)
ok 3 # skip Objects creation does not break ACLs with restrictive umask (missing SETFACL)
ok 4 # skip git gc does not break ACLs with restrictive umask (missing SETFACL)
# passed all 4 test(s)
1..4
*** t1305-config-include.sh ***
ok 1 - include file by absolute path
ok 2 - include file by relative path
ok 3 - chained relative paths
ok 4 - include paths get tilde-expansion
ok 5 - include options can still be examined
ok 6 - listing includes option and expansion
ok 7 - single file lookup does not expand includes by default
ok 8 - single file list does not expand includes by default
ok 9 - writing config file does not expand includes
ok 10 - config modification does not affect includes
ok 11 - missing include files are ignored
ok 12 - absolute includes from command line work
ok 13 - relative includes from command line fail
ok 14 - absolute includes from blobs work
ok 15 - relative includes from blobs fail
ok 16 - absolute includes from stdin work
ok 17 - relative includes from stdin line fail
ok 18 - conditional include, both unanchored
ok 19 - conditional include, $HOME expansion
ok 20 - conditional include, full pattern
ok 21 - conditional include, relative path
ok 22 - conditional include, both unanchored, icase
ok 23 - conditional include, early config reading
ok 24 - conditional include with /**/
ok 25 - conditional include, set up symlinked $HOME
ok 26 - conditional include, $HOME expansion with symlinks
ok 27 - conditional include, relative path with symlinks
ok 28 - conditional include, gitdir matching symlink
ok 29 - conditional include, gitdir matching symlink, icase
ok 30 - conditional include, onbranch
ok 31 - conditional include, onbranch, wildcard
ok 32 - conditional include, onbranch, implicit /** for /
ok 33 - include cycles are detected
# passed all 33 test(s)
1..33
*** t1306-xdg-files.sh ***
ok 1 - read config: xdg file exists and ~/.gitconfig doesn't
ok 2 - read config: xdg file exists and ~/.gitconfig exists
ok 3 - read with --get: xdg file exists and ~/.gitconfig doesn't
ok 4 - "$XDG_CONFIG_HOME overrides $HOME/.config/git
ok 5 - read with --get: xdg file exists and ~/.gitconfig exists
ok 6 - read with --list: xdg file exists and ~/.gitconfig doesn't
ok 7 - read with --list: xdg file exists and ~/.gitconfig exists
ok 8 - Setup
ok 9 - Exclusion of a file in the XDG ignore file
ok 10 - $XDG_CONFIG_HOME overrides $HOME/.config/git/ignore
ok 11 - Exclusion in both XDG and local ignore files
ok 12 - Exclusion in a non-XDG global ignore file
ok 13 - Checking XDG ignore file when HOME is unset
ok 14 - Checking attributes in the XDG attributes file
ok 15 - Checking XDG attributes when HOME is unset
ok 16 - $XDG_CONFIG_HOME overrides $HOME/.config/git/attributes
ok 17 - Checking attributes in both XDG and local attributes files
ok 18 - Checking attributes in a non-XDG global attributes file
ok 19 - write: xdg file exists and ~/.gitconfig doesn't
ok 20 - write: xdg file exists and ~/.gitconfig exists
ok 21 - write: ~/.config/git/ exists and config file doesn't
# passed all 21 test(s)
1..21
*** t1307-config-blob.sh ***
ok 1 - create config blob
ok 2 - list config blob contents
ok 3 - fetch value from blob
ok 4 - reading non-existing value from blob is an error
ok 5 - reading from blob and file is an error
ok 6 - reading from missing ref is an error
ok 7 - reading from non-blob is an error
ok 8 - setting a value in a blob is an error
ok 9 - deleting a value in a blob is an error
ok 10 - editing a blob is an error
ok 11 - parse errors in blobs are properly attributed
ok 12 - can parse blob ending with CR
ok 13 - config --blob outside of a repository is an error
# passed all 13 test(s)
1..13
*** t1308-config-set.sh ***
ok 1 - setup default config
ok 2 - get value for a simple key
ok 3 - get value for a key with value as an empty string
ok 4 - get value for a key with value as NULL
ok 5 - upper case key
ok 6 - mixed case key
ok 7 - key and value with mixed case
ok 8 - key with case sensitive subsection
ok 9 - key with case insensitive section header
ok 10 - key with case insensitive section header & variable
ok 11 - find value with misspelled key
ok 12 - find value with the highest priority
ok 13 - return value for an existing key
ok 14 - return value for value-less key
ok 15 - return value for a missing key
ok 16 - return value for a bad key: CONFIG_INVALID_KEY
ok 17 - return value for a bad key: CONFIG_NO_SECTION_OR_NAME
ok 18 - find integer value for a key
ok 19 - parse integer value during iteration
ok 20 - find string value for a key
ok 21 - check line error when NULL string is queried
ok 22 - find integer if value is non parse-able
ok 23 - non parse-able integer value during iteration
ok 24 - find bool value for the entered key
ok 25 - find multiple values
ok 26 - get_value_multi: NULL value in config
ok 27 - configset_get_value: NULL value in config in my.config
ok 28 - configset_get_value_multi: NULL value in config in my.config
ok 29 - find value from a configset
ok 30 - find value with highest priority from a configset
ok 31 - find value_list for a key from a configset
ok 32 - proper error on non-existent files
ok 33 - proper error on directory "files"
ok 34 - proper error on non-accessible files
ok 35 - proper error on error in default config files
ok 36 - proper error on error in custom config files
ok 37 - check line errors for malformed values
ok 38 - error on modifying repo config without repo
ok 39 - iteration shows correct origins
# passed all 39 test(s)
1..39
*** t1309-early-config.sh ***
ok 1 - read early config
ok 2 - in a sub-directory
ok 3 - ceiling
ok 4 - ceiling #2
ok 5 - read config file in right order
ok 6 - ignore .git/ with incompatible repository version
not ok 7 - ignore .git/ with invalid repository version # TODO known breakage
not ok 8 - ignore .git/ with invalid config # TODO known breakage
ok 9 - early config and onbranch
ok 10 - onbranch config outside of git repo
# still have 2 known breakage(s)
# passed all remaining 8 test(s)
1..10
*** t1310-config-default.sh ***
ok 1 - uses --default when entry missing
ok 2 - does not use --default when entry present
ok 3 - canonicalizes --default with appropriate type
ok 4 - dies when --default cannot be parsed
ok 5 - does not allow --default without --get
# passed all 5 test(s)
1..5
*** t1350-config-hooks-path.sh ***
ok 1 - set up a pre-commit hook in core.hooksPath
ok 2 - Check that various forms of specifying core.hooksPath work
ok 3 - git rev-parse --git-path hooks
# passed all 3 test(s)
1..3
*** t1400-update-ref.sh ***
ok 1 - setup
ok 2 - create refs/heads/main
ok 3 - create refs/heads/main with oldvalue verification
ok 4 - fail to delete refs/heads/main with stale ref
ok 5 - delete refs/heads/main
ok 6 - delete refs/heads/main without oldvalue verification
ok 7 - fail to create  due to file/directory conflict
ok 8 - create refs/heads/main (by HEAD)
ok 9 - create refs/heads/main (by HEAD) with oldvalue verification
ok 10 - fail to delete refs/heads/main (by HEAD) with stale ref
ok 11 - delete refs/heads/main (by HEAD)
ok 12 - deleting current branch adds message to HEAD's log
ok 13 - deleting by HEAD adds message to HEAD's log
ok 14 - update-ref does not create reflogs by default
ok 15 - update-ref creates reflogs with --create-reflog
ok 16 - creates no reflog in bare repository
ok 17 - core.logAllRefUpdates=true creates reflog in bare repository
ok 18 - core.logAllRefUpdates=true does not create reflog by default
ok 19 - core.logAllRefUpdates=always creates reflog by default
ok 20 - core.logAllRefUpdates=always creates reflog for ORIG_HEAD
ok 21 - --no-create-reflog overrides core.logAllRefUpdates=always
ok 22 - create refs/heads/main (by HEAD)
ok 23 - pack refs
ok 24 - move refs/heads/main (by HEAD)
ok 25 - delete refs/heads/main (by HEAD) should remove both packed and loose refs/heads/main
ok 26 - delete symref without dereference
ok 27 - delete symref without dereference when the referred ref is packed
ok 28 - update-ref -d is not confused by self-reference
ok 29 - update-ref --no-deref -d can delete self-reference
ok 30 - update-ref --no-deref -d can delete reference to bad ref
ok 31 - (not) create HEAD with old sha1
ok 32 - (not) prior created .git/refs/heads/main
ok 33 - create HEAD
ok 34 - (not) change HEAD with wrong SHA1
ok 35 - (not) changed .git/refs/heads/main
ok 36 - clean up reflog
ok 37 - create refs/heads/main (logged by touch)
ok 38 - update refs/heads/main (logged by touch)
ok 39 - set refs/heads/main (logged by touch)
ok 40 - verifying refs/heads/main's log (logged by touch)
ok 41 - create refs/heads/main (logged by config)
ok 42 - update refs/heads/main (logged by config)
ok 43 - set refs/heads/main (logged by config)
ok 44 - verifying refs/heads/main's log (logged by config)
ok 45 - set up for querying the reflog
ok 46 - Query "main@{May 25 2005}" (before history)
ok 47 - Query main@{2005-05-25} (before history)
ok 48 - Query "main@{May 26 2005 23:31:59}" (1 second before history)
ok 49 - Query "main@{May 26 2005 23:32:00}" (exactly history start)
ok 50 - Query "main@{May 26 2005 23:32:30}" (first non-creation change)
ok 51 - Query "main@{2005-05-26 23:33:01}" (middle of history with gap)
ok 52 - Query "main@{2005-05-26 23:38:00}" (middle of history)
ok 53 - Query "main@{2005-05-26 23:43:00}" (exact end of history)
ok 54 - Query "main@{2005-05-28}" (past end of history)
ok 55 - query reflog with gap
ok 56 - creating initial files
ok 57 - git commit logged updates
ok 58 - git cat-file blob main:F (expect OTHER)
ok 59 - git cat-file blob main@{2005-05-26 23:30}:F (expect TEST)
ok 60 - git cat-file blob main@{2005-05-26 23:42}:F (expect OTHER)
ok 61 - given old value for missing pseudoref, do not create
ok 62 - create pseudoref
ok 63 - overwrite pseudoref with no old value given
ok 64 - overwrite pseudoref with correct old value
ok 65 - do not overwrite pseudoref with wrong old value
ok 66 - delete pseudoref
ok 67 - do not delete pseudoref with wrong old value
ok 68 - delete pseudoref with correct old value
ok 69 - create pseudoref with old OID zero
ok 70 - do not overwrite pseudoref with old OID zero
ok 71 - stdin test setup
ok 72 - -z fails without --stdin
ok 73 - stdin works with no input
ok 74 - stdin fails on empty line
ok 75 - stdin fails on only whitespace
ok 76 - stdin fails on leading whitespace
ok 77 - stdin fails on unknown command
ok 78 - stdin fails on unbalanced quotes
ok 79 - stdin fails on invalid escape
ok 80 - stdin fails on junk after quoted argument
ok 81 - stdin fails create with no ref
ok 82 - stdin fails create with no new value
ok 83 - stdin fails create with too many arguments
ok 84 - stdin fails update with no ref
ok 85 - stdin fails update with no new value
ok 86 - stdin fails update with too many arguments
ok 87 - stdin fails delete with no ref
ok 88 - stdin fails delete with too many arguments
ok 89 - stdin fails verify with too many arguments
ok 90 - stdin fails option with unknown name
ok 91 - stdin fails with duplicate refs
ok 92 - stdin create ref works
ok 93 - stdin does not create reflogs by default
ok 94 - stdin creates reflogs with --create-reflog
ok 95 - stdin succeeds with quoted argument
ok 96 - stdin succeeds with escaped character
ok 97 - stdin update ref creates with zero old value
ok 98 - stdin update ref creates with empty old value
ok 99 - stdin create ref works with path with space to blob
ok 100 - stdin update ref fails with wrong old value
ok 101 - stdin update ref fails with bad old value
ok 102 - stdin create ref fails with bad new value
ok 103 - stdin create ref fails with zero new value
ok 104 - stdin update ref works with right old value
ok 105 - stdin delete ref fails with wrong old value
ok 106 - stdin delete ref fails with zero old value
ok 107 - stdin update symref works option no-deref
ok 108 - stdin delete symref works option no-deref
ok 109 - stdin update symref works flag --no-deref
ok 110 - stdin delete symref works flag --no-deref
ok 111 - stdin delete ref works with right old value
ok 112 - stdin update/create/verify combination works
ok 113 - stdin verify succeeds for correct value
ok 114 - stdin verify succeeds for missing reference
ok 115 - stdin verify treats no value as missing
ok 116 - stdin verify fails for wrong value
ok 117 - stdin verify fails for mistaken null value
ok 118 - stdin verify fails for mistaken empty value
ok 119 - stdin update refs works with identity updates
ok 120 - stdin update refs fails with wrong old value
ok 121 - stdin delete refs works with packed and loose refs
ok 122 - stdin -z works on empty input
ok 123 - stdin -z fails on empty line
ok 124 - stdin -z fails on empty command
ok 125 - stdin -z fails on only whitespace
ok 126 - stdin -z fails on leading whitespace
ok 127 - stdin -z fails on unknown command
ok 128 - stdin -z fails create with no ref
ok 129 - stdin -z fails create with no new value
ok 130 - stdin -z fails create with too many arguments
ok 131 - stdin -z fails update with no ref
ok 132 - stdin -z fails update with too few args
ok 133 - stdin -z emits warning with empty new value
ok 134 - stdin -z fails update with no new value
ok 135 - stdin -z fails update with no old value
ok 136 - stdin -z fails update with too many arguments
ok 137 - stdin -z fails delete with no ref
ok 138 - stdin -z fails delete with no old value
ok 139 - stdin -z fails delete with too many arguments
ok 140 - stdin -z fails verify with too many arguments
ok 141 - stdin -z fails verify with no old value
ok 142 - stdin -z fails option with unknown name
ok 143 - stdin -z fails with duplicate refs
ok 144 - stdin -z create ref works
ok 145 - stdin -z update ref creates with zero old value
ok 146 - stdin -z update ref creates with empty old value
ok 147 - stdin -z create ref works with path with space to blob
ok 148 - stdin -z update ref fails with wrong old value
ok 149 - stdin -z update ref fails with bad old value
ok 150 - stdin -z create ref fails when ref exists
ok 151 - stdin -z create ref fails with bad new value
ok 152 - stdin -z create ref fails with empty new value
ok 153 - stdin -z update ref works with right old value
ok 154 - stdin -z delete ref fails with wrong old value
ok 155 - stdin -z delete ref fails with zero old value
ok 156 - stdin -z update symref works option no-deref
ok 157 - stdin -z delete symref works option no-deref
ok 158 - stdin -z delete ref works with right old value
ok 159 - stdin -z update/create/verify combination works
ok 160 - stdin -z verify succeeds for correct value
ok 161 - stdin -z verify succeeds for missing reference
ok 162 - stdin -z verify treats no value as missing
ok 163 - stdin -z verify fails for wrong value
ok 164 - stdin -z verify fails for mistaken null value
ok 165 - stdin -z verify fails for mistaken empty value
ok 166 - stdin -z update refs works with identity updates
ok 167 - stdin -z update refs fails with wrong old value
ok 168 - stdin -z delete refs works with packed and loose refs
ok 169 - fails with duplicate HEAD update
ok 170 - fails with duplicate ref update via symref
ok 171 - large transaction creating branches does not burst open file limit
ok 172 - large transaction deleting branches does not burst open file limit
ok 173 - handle per-worktree refs in refs/bisect
ok 174 - transaction handles empty commit
ok 175 - transaction handles empty commit with missing prepare
ok 176 - transaction handles sole commit
ok 177 - transaction handles empty abort
ok 178 - transaction exits on multiple aborts
ok 179 - transaction exits on start after prepare
ok 180 - transaction handles empty abort with missing prepare
ok 181 - transaction handles sole abort
ok 182 - transaction can handle commit
ok 183 - transaction can handle abort
ok 184 - transaction aborts by default
ok 185 - transaction with prepare aborts by default
ok 186 - transaction can commit multiple times
ok 187 - transaction can create and delete
ok 188 - transaction can commit after abort
ok 189 - transaction cannot restart ongoing transaction
ok 190 - transaction flushes status updates
# passed all 190 test(s)
1..190
*** t1401-symbolic-ref.sh ***
ok 1 - setup
ok 2 - symbolic-ref read/write roundtrip
ok 3 - symbolic-ref refuses non-ref for HEAD
ok 4 - symbolic-ref refuses bare sha1
ok 5 - HEAD cannot be removed
ok 6 - symbolic-ref can be deleted
ok 7 - symbolic-ref can delete dangling symref
ok 8 - symbolic-ref fails to delete missing FOO
ok 9 - symbolic-ref fails to delete real ref
ok 10 - create large ref name
ok 11 - symbolic-ref can point to large ref name
ok 12 - we can parse long symbolic ref
ok 13 - symbolic-ref reports failure in exit code
ok 14 - symbolic-ref writes reflog entry
ok 15 - symbolic-ref does not create ref d/f conflicts
ok 16 - symbolic-ref can overwrite pointer to invalid name
ok 17 - symbolic-ref can resolve d/f name (EISDIR)
ok 18 - symbolic-ref can resolve d/f name (ENOTDIR)
ok 19 - symbolic-ref refuses invalid target for non-HEAD
ok 20 - symbolic-ref allows top-level target for non-HEAD
ok 21 - symbolic-ref pointing at another
ok 22 - symbolic-ref --short handles complex utf8 case
ok 23 - symbolic-ref --short handles name with suffix
ok 24 - symbolic-ref --short handles almost-matching name
ok 25 - symbolic-ref --short handles name with percent
# passed all 25 test(s)
1..25
*** t1402-check-ref-format.sh ***
ok 1 - ref name '' is invalid
ok 2 - ref name '/' is invalid
ok 3 - ref name '/' is invalid with options --allow-onelevel
ok 4 - ref name '/' is invalid with options --normalize
ok 5 - ref name '/' is invalid with options --allow-onelevel --normalize
ok 6 - ref name 'foo/bar/baz' is valid
ok 7 - ref name 'foo/bar/baz' is valid with options --normalize
ok 8 - ref name 'refs///heads/foo' is invalid
ok 9 - ref name 'refs///heads/foo' is valid with options --normalize
ok 10 - ref name 'heads/foo/' is invalid
ok 11 - ref name '/heads/foo' is invalid
ok 12 - ref name '/heads/foo' is valid with options --normalize
ok 13 - ref name '///heads/foo' is invalid
ok 14 - ref name '///heads/foo' is valid with options --normalize
ok 15 - ref name './foo' is invalid
ok 16 - ref name './foo/bar' is invalid
ok 17 - ref name 'foo/./bar' is invalid
ok 18 - ref name 'foo/bar/.' is invalid
ok 19 - ref name '.refs/foo' is invalid
ok 20 - ref name 'refs/heads/foo.' is invalid
ok 21 - ref name 'heads/foo..bar' is invalid
ok 22 - ref name 'heads/foo?bar' is invalid
ok 23 - ref name 'foo./bar' is valid
ok 24 - ref name 'heads/foo.lock' is invalid
ok 25 - ref name 'heads///foo.lock' is invalid
ok 26 - ref name 'foo.lock/bar' is invalid
ok 27 - ref name 'foo.lock///bar' is invalid
ok 28 - ref name 'heads/foo@bar' is valid
ok 29 - ref name 'heads/v@{ation' is invalid
ok 30 - ref name 'heads/foo\bar' is invalid
ok 31 - ref name 'heads/foo	' is invalid
ok 32 - ref name 'heads/foo' is invalid
ok 33 - ref name 'heads/fuß' is valid
ok 34 - ref name 'heads/*foo/bar' is valid with options --refspec-pattern
ok 35 - ref name 'heads/foo*/bar' is valid with options --refspec-pattern
ok 36 - ref name 'heads/f*o/bar' is valid with options --refspec-pattern
ok 37 - ref name 'heads/f*o*/bar' is invalid with options --refspec-pattern
ok 38 - ref name 'heads/foo*/bar*' is invalid with options --refspec-pattern
ok 39 - ref name 'foo' is invalid
ok 40 - ref name 'foo' is valid with options --allow-onelevel
ok 41 - ref name 'foo' is invalid with options --refspec-pattern
ok 42 - ref name 'foo' is valid with options --refspec-pattern --allow-onelevel
ok 43 - ref name 'foo' is invalid with options --normalize
ok 44 - ref name 'foo' is valid with options --allow-onelevel --normalize
ok 45 - ref name 'foo/bar' is valid
ok 46 - ref name 'foo/bar' is valid with options --allow-onelevel
ok 47 - ref name 'foo/bar' is valid with options --refspec-pattern
ok 48 - ref name 'foo/bar' is valid with options --refspec-pattern --allow-onelevel
ok 49 - ref name 'foo/bar' is valid with options --normalize
ok 50 - ref name 'foo/*' is invalid
ok 51 - ref name 'foo/*' is invalid with options --allow-onelevel
ok 52 - ref name 'foo/*' is valid with options --refspec-pattern
ok 53 - ref name 'foo/*' is valid with options --refspec-pattern --allow-onelevel
ok 54 - ref name '*/foo' is invalid
ok 55 - ref name '*/foo' is invalid with options --allow-onelevel
ok 56 - ref name '*/foo' is valid with options --refspec-pattern
ok 57 - ref name '*/foo' is valid with options --refspec-pattern --allow-onelevel
ok 58 - ref name '*/foo' is invalid with options --normalize
ok 59 - ref name '*/foo' is valid with options --refspec-pattern --normalize
ok 60 - ref name 'foo/*/bar' is invalid
ok 61 - ref name 'foo/*/bar' is invalid with options --allow-onelevel
ok 62 - ref name 'foo/*/bar' is valid with options --refspec-pattern
ok 63 - ref name 'foo/*/bar' is valid with options --refspec-pattern --allow-onelevel
ok 64 - ref name '*' is invalid
ok 65 - ref name '*' is invalid with options --allow-onelevel
ok 66 - ref name '*' is invalid with options --refspec-pattern
ok 67 - ref name '*' is valid with options --refspec-pattern --allow-onelevel
ok 68 - ref name 'foo/*/*' is invalid with options --refspec-pattern
ok 69 - ref name 'foo/*/*' is invalid with options --refspec-pattern --allow-onelevel
ok 70 - ref name '*/foo/*' is invalid with options --refspec-pattern
ok 71 - ref name '*/foo/*' is invalid with options --refspec-pattern --allow-onelevel
ok 72 - ref name '*/*/foo' is invalid with options --refspec-pattern
ok 73 - ref name '*/*/foo' is invalid with options --refspec-pattern --allow-onelevel
ok 74 - ref name '/foo' is invalid
ok 75 - ref name '/foo' is invalid with options --allow-onelevel
ok 76 - ref name '/foo' is invalid with options --refspec-pattern
ok 77 - ref name '/foo' is invalid with options --refspec-pattern --allow-onelevel
ok 78 - ref name '/foo' is invalid with options --normalize
ok 79 - ref name '/foo' is valid with options --allow-onelevel --normalize
ok 80 - ref name '/foo' is invalid with options --refspec-pattern --normalize
ok 81 - ref name '/foo' is valid with options --refspec-pattern --allow-onelevel --normalize
ok 82 - check-ref-format --branch @{-1}
ok 83 - check-ref-format --branch -nain
ok 84 - check-ref-format --branch from subdir
ok 85 - check-ref-format --branch @{-1} from non-repo
ok 86 - check-ref-format --branch main from non-repo
ok 87 - ref name 'heads/foo' simplifies to 'heads/foo'
ok 88 - ref name 'refs///heads/foo' simplifies to 'refs/heads/foo'
ok 89 - ref name '/heads/foo' simplifies to 'heads/foo'
ok 90 - ref name '///heads/foo' simplifies to 'heads/foo'
ok 91 - check-ref-format --normalize rejects 'foo'
ok 92 - check-ref-format --normalize rejects '/foo'
ok 93 - check-ref-format --normalize rejects 'heads/foo/../bar'
ok 94 - check-ref-format --normalize rejects 'heads/./foo'
ok 95 - check-ref-format --normalize rejects 'heads\foo'
ok 96 - check-ref-format --normalize rejects 'heads/foo.lock'
ok 97 - check-ref-format --normalize rejects 'heads///foo.lock'
ok 98 - check-ref-format --normalize rejects 'foo.lock/bar'
ok 99 - check-ref-format --normalize rejects 'foo.lock///bar'
# passed all 99 test(s)
1..99
*** t1403-show-ref.sh ***
ok 1 - setup
ok 2 - show-ref
ok 3 - show-ref -q
ok 4 - show-ref --verify
ok 5 - show-ref --verify -q
ok 6 - show-ref -d
ok 7 - show-ref --heads, --tags, --head, pattern
ok 8 - show-ref --verify HEAD
ok 9 - show-ref --verify pseudorefs
ok 10 - show-ref --verify with dangling ref
ok 11 - show-ref sub-modes are mutually exclusive
ok 12 - --exists with existing reference
ok 13 - --exists with missing reference
ok 14 - --exists does not use DWIM
ok 15 - --exists with HEAD
ok 16 - --exists with bad reference name
ok 17 - --exists with arbitrary symref
ok 18 - --exists with dangling symref
ok 19 - --exists with nonexistent object ID
ok 20 - --exists with non-commit object
ok 21 - --exists with directory fails with generic error
ok 22 - --exists with non-existent special ref
ok 23 - --exists with existing special ref
# passed all 23 test(s)
1..23
*** t1404-update-ref-errors.sh ***
ok 1 - setup
ok 2 - existing loose ref is a simple prefix of new
ok 3 - existing packed ref is a simple prefix of new
ok 4 - existing loose ref is a deeper prefix of new
ok 5 - existing packed ref is a deeper prefix of new
ok 6 - new ref is a simple prefix of existing loose
ok 7 - new ref is a simple prefix of existing packed
ok 8 - new ref is a deeper prefix of existing loose
ok 9 - new ref is a deeper prefix of existing packed
ok 10 - one new ref is a simple prefix of another
ok 11 - D/F conflict prevents add long + delete short
ok 12 - D/F conflict prevents add short + delete long
ok 13 - D/F conflict prevents delete long + add short
ok 14 - D/F conflict prevents delete short + add long
ok 15 - D/F conflict prevents add long + delete short packed
ok 16 - D/F conflict prevents add short + delete long packed
ok 17 - D/F conflict prevents delete long packed + add short
ok 18 - D/F conflict prevents delete short packed + add long
ok 19 - D/F conflict prevents indirect add long + delete short
ok 20 - D/F conflict prevents indirect add long + indirect delete short
ok 21 - D/F conflict prevents indirect add short + indirect delete long
ok 22 - D/F conflict prevents indirect delete long + indirect add short
ok 23 - D/F conflict prevents indirect add long + delete short packed
ok 24 - D/F conflict prevents indirect add long + indirect delete short packed
ok 25 - D/F conflict prevents add long + indirect delete short packed
ok 26 - D/F conflict prevents indirect delete long packed + indirect add short
ok 27 - missing old value blocks update
ok 28 - incorrect old value blocks update
ok 29 - existing old value blocks create
ok 30 - incorrect old value blocks delete
ok 31 - missing old value blocks indirect update
ok 32 - incorrect old value blocks indirect update
ok 33 - existing old value blocks indirect create
ok 34 - incorrect old value blocks indirect delete
ok 35 - missing old value blocks indirect no-deref update
ok 36 - incorrect old value blocks indirect no-deref update
ok 37 - existing old value blocks indirect no-deref create
ok 38 - incorrect old value blocks indirect no-deref delete
# passed all 38 test(s)
1..38
*** t1405-main-ref-store.sh ***
ok 1 - setup
ok 2 - create_symref(FOO, refs/heads/main)
ok 3 - delete_refs(FOO, refs/tags/new-tag)
ok 4 - rename_refs(main, new-main)
ok 5 - for_each_ref(refs/heads/)
ok 6 - for_each_ref() is sorted
ok 7 - resolve_ref(new-main)
ok 8 - verify_ref(new-main)
ok 9 - for_each_reflog()
ok 10 - for_each_reflog_ent()
ok 11 - for_each_reflog_ent_reverse()
ok 12 - reflog_exists(HEAD)
ok 13 - delete_reflog(HEAD)
ok 14 - create-reflog(HEAD)
ok 15 - delete_ref(refs/heads/foo)
ok 16 - delete_ref(refs/heads/foo)
# passed all 16 test(s)
1..16
*** t1406-submodule-ref-store.sh ***
ok 1 - setup
ok 2 - pack_refs() not allowed
ok 3 - create_symref() not allowed
ok 4 - delete_refs() not allowed
ok 5 - rename_refs() not allowed
ok 6 - for_each_ref(refs/heads/)
ok 7 - for_each_ref() is sorted
ok 8 - resolve_ref(main)
ok 9 - verify_ref(new-main)
ok 10 - for_each_reflog()
ok 11 - for_each_reflog_ent()
ok 12 - for_each_reflog_ent_reverse()
ok 13 - reflog_exists(HEAD)
ok 14 - delete_reflog() not allowed
ok 15 - create-reflog() not allowed
# passed all 15 test(s)
1..15
*** t1407-worktree-ref-store.sh ***
ok 1 - setup
ok 2 - resolve_ref(<shared-ref>)
ok 3 - resolve_ref(<per-worktree-ref>)
ok 4 - create_symref(FOO, refs/heads/main)
# passed all 4 test(s)
1..4
*** t1408-packed-refs.sh ***
ok 1 - setup
ok 2 - no error from stale entry in packed-refs
# passed all 2 test(s)
1..2
*** t1409-avoid-packing-refs.sh ***
ok 1 - setup
ok 2 - do not create packed-refs file gratuitously
ok 3 - check that marking the packed-refs file works
ok 4 - leave packed-refs untouched on update of packed
ok 5 - leave packed-refs untouched on checked update of packed
ok 6 - leave packed-refs untouched on verify of packed
ok 7 - touch packed-refs on delete of packed
ok 8 - leave packed-refs untouched on update of loose
ok 9 - leave packed-refs untouched on checked update of loose
ok 10 - leave packed-refs untouched on verify of loose
ok 11 - leave packed-refs untouched on delete of loose
# passed all 11 test(s)
1..11
*** t1410-reflog.sh ***
ok 1 - setup
ok 2 - correct usage on sub-command -h
ok 3 - correct usage on "git reflog show -h"
ok 4 - pass through -- to sub-command
ok 5 - rewind
ok 6 - corrupt and check
ok 7 - reflog expire --dry-run should not touch reflog
ok 8 - reflog expire
ok 9 - --stale-fix handles missing objects generously
ok 10 - prune and fsck
ok 11 - recover and check
ok 12 - delete
ok 13 - rewind2
ok 14 - --expire=never
ok 15 - gc.reflogexpire=never
ok 16 - gc.reflogexpire=false
ok 17 - git reflog expire unknown reference
ok 18 - checkout should not delete log for packed ref
ok 19 - stale dirs do not cause d/f conflicts (reflogs on)
ok 20 - stale dirs do not cause d/f conflicts (reflogs off)
ok 21 - no segfaults for reflog containing non-commit sha1s
not ok 22 - reflog with non-commit entries displays all entries # TODO known breakage
ok 23 - continue walking past root commits
ok 24 - expire with multiple worktrees
ok 25 - expire one of multiple worktrees
ok 26 - empty reflog
ok 27 - list reflogs
ok 28 - list reflogs with worktree
ok 29 - reflog list returns error with additional args
ok 30 - reflog for symref with unborn target can be listed
ok 31 - reflog with invalid object ID can be listed
# still have 1 known breakage(s)
# passed all remaining 30 test(s)
1..31
*** t1411-reflog-show.sh ***
ok 1 - setup
ok 2 - log -g shows reflog headers
ok 3 - oneline reflog format
ok 4 - reflog default format
ok 5 - override reflog default format
ok 6 - using @{now} syntax shows reflog date (multiline)
ok 7 - using @{now} syntax shows reflog date (oneline)
ok 8 - using @{now} syntax shows reflog date (format=%gd)
ok 9 - using --date= shows reflog date (multiline)
ok 10 - using --date= shows reflog date (oneline)
ok 11 - using --date= shows reflog date (format=%gd)
ok 12 - log.date does not invoke "--date" magic (multiline)
ok 13 - log.date does not invoke "--date" magic (oneline)
ok 14 - log.date does not invoke "--date" magic (format=%gd)
ok 15 - --date magic does not override explicit @{0} syntax
ok 16 - empty reflog file
ok 17 - git log -g -p shows diffs vs. parents
# passed all 17 test(s)
1..17
*** t1412-reflog-loop.sh ***
ok 1 - setup commits
ok 2 - setup reflog with alternating commits
ok 3 - reflog shows all entries
# passed all 3 test(s)
1..3
*** t1413-reflog-detach.sh ***
ok 1 - setup
ok 2 - baseline
ok 3 - switch to branch
ok 4 - detach to other
ok 5 - detach to self
ok 6 - attach to self
ok 7 - attach to other
# passed all 7 test(s)
1..7
*** t1414-reflog-walk.sh ***
ok 1 - set up some reflog entries
ok 2 - set up expected reflog
ok 3 - reflog walk shows expected logs
ok 4 - reflog can limit with --no-merges
ok 5 - reflog can limit with pathspecs
ok 6 - pathspec limiting handles merges
ok 7 - --parents shows true parents
ok 8 - walking multiple reflogs shows all
ok 9 - date-limiting does not interfere with other logs
ok 10 - min/max age uses entry date to limit
ok 11 - walk prefers reflog to ref tip
ok 12 - rev-list -g complains when there are no reflogs
# passed all 12 test(s)
1..12
*** t1415-worktree-refs.sh ***
ok 1 - setup
ok 2 - refs/worktree are per-worktree
ok 3 - resolve main-worktree/HEAD
ok 4 - ambiguous main-worktree/HEAD
ok 5 - resolve worktrees/xx/HEAD
ok 6 - ambiguous worktrees/xx/HEAD
ok 7 - reflog of main-worktree/HEAD
ok 8 - reflog of worktrees/xx/HEAD
ok 9 - for-each-ref from main worktree
ok 10 - for-each-ref from linked worktree
# passed all 10 test(s)
1..10
*** t1416-ref-transaction-hooks.sh ***
ok 1 - setup
ok 2 - hook allows updating ref if successful
ok 3 - hook aborts updating ref in prepared state
ok 4 - hook gets all queued updates in prepared state
ok 5 - hook gets all queued updates in committed state
ok 6 - hook gets all queued updates in aborted state
ok 7 - interleaving hook calls succeed
# passed all 7 test(s)
1..7
*** t1417-reflog-updateref.sh ***
ok 1 - setup
ok 2 - get 'B' with 'git reflog delete --updateref HEAD@{0}'
ok 3 - get 'B' with 'git reflog delete --updateref HEAD@{1}'
ok 4 - get 'C' with 'git reflog delete --updateref main@{0}'
ok 5 - get 'B' with 'git reflog delete --updateref main@{1}'
ok 6 - get 'B' with 'git reflog delete --updateref --rewrite HEAD@{0}'
ok 7 - get 'B' with 'git reflog delete --updateref --rewrite HEAD@{1}'
ok 8 - get 'C' with 'git reflog delete --updateref --rewrite main@{0}'
ok 9 - get 'B' with 'git reflog delete --updateref --rewrite main@{1}'
ok 10 - get 'B' with 'test_must_fail git reflog expire HEAD@{0}'
ok 11 - get 'B' with 'test_must_fail git reflog expire HEAD@{1}'
ok 12 - get 'B' with 'test_must_fail git reflog expire main@{0}'
ok 13 - get 'B' with 'test_must_fail git reflog expire main@{1}'
ok 14 - get 'B' with 'test_must_fail git reflog expire --updateref HEAD@{0}'
ok 15 - get 'B' with 'test_must_fail git reflog expire --updateref HEAD@{1}'
ok 16 - get 'B' with 'test_must_fail git reflog expire --updateref main@{0}'
ok 17 - get 'B' with 'test_must_fail git reflog expire --updateref main@{1}'
ok 18 - get 'B' with 'test_must_fail git reflog expire --updateref --rewrite HEAD@{0}'
ok 19 - get 'B' with 'test_must_fail git reflog expire --updateref --rewrite HEAD@{1}'
ok 20 - get 'B' with 'test_must_fail git reflog expire --updateref --rewrite main@{0}'
ok 21 - get 'B' with 'test_must_fail git reflog expire --updateref --rewrite main@{1}'
# passed all 21 test(s)
1..21
*** t1418-reflog-exists.sh ***
ok 1 - setup
ok 2 - usage
ok 3 - usage: unknown option
ok 4 - reflog exists works
ok 5 - reflog exists works with a "--" delimiter
ok 6 - reflog exists works with a "--end-of-options" delimiter
# passed all 6 test(s)
1..6
*** t1419-exclude-refs.sh ***
ok 1 - setup
ok 2 - excluded region in middle
ok 3 - excluded region at beginning
ok 4 - excluded region at end
ok 5 - disjoint excluded regions
ok 6 - adjacent, non-overlapping excluded regions
ok 7 - overlapping excluded regions
ok 8 - several overlapping excluded regions
ok 9 - non-matching excluded section
ok 10 - meta-characters are discarded
# passed all 10 test(s)
1..10
*** t1420-lost-found.sh ***
ok 1 - setup
ok 2 - lost and found something
# passed all 2 test(s)
1..2
*** t1430-bad-ref-name.sh ***
ok 1 - setup
ok 2 - fast-import: fail on invalid branch name ".badbranchname"
ok 3 - fast-import: fail on invalid branch name "bad[branch]name"
ok 4 - git branch shows badly named ref as warning
ok 5 - branch -d can delete badly named ref
ok 6 - branch -D can delete badly named ref
ok 7 - branch -D cannot delete non-ref in .git dir
ok 8 - branch -D cannot delete ref in .git dir
ok 9 - branch -D cannot delete absolute path
ok 10 - git branch cannot create a badly named ref
ok 11 - branch -m cannot rename to a bad ref name
not ok 12 - branch -m can rename from a bad ref name # TODO known breakage
ok 13 - push cannot create a badly named ref
not ok 14 - push --mirror can delete badly named ref # TODO known breakage
ok 15 - rev-parse skips symref pointing to broken name
ok 16 - for-each-ref emits warnings for broken names
ok 17 - update-ref -d can delete broken name
ok 18 - branch -d can delete broken name
ok 19 - update-ref --no-deref -d can delete symref to broken name
ok 20 - branch -d can delete symref to broken name
ok 21 - update-ref --no-deref -d can delete dangling symref to broken name
ok 22 - branch -d can delete dangling symref to broken name
ok 23 - update-ref -d can delete broken name through symref
ok 24 - update-ref --no-deref -d can delete symref with broken name
ok 25 - branch -d can delete symref with broken name
ok 26 - update-ref --no-deref -d can delete dangling symref with broken name
ok 27 - branch -d can delete dangling symref with broken name
ok 28 - update-ref -d cannot delete non-ref in .git dir
ok 29 - update-ref -d cannot delete absolute path
ok 30 - update-ref --stdin fails create with bad ref name
ok 31 - update-ref --stdin fails update with bad ref name
ok 32 - update-ref --stdin fails delete with bad ref name
ok 33 - update-ref --stdin -z fails create with bad ref name
ok 34 - update-ref --stdin -z fails update with bad ref name
ok 35 - update-ref --stdin -z fails delete with bad ref name
ok 36 - branch rejects HEAD as a branch name
ok 37 - checkout -b rejects HEAD as a branch name
ok 38 - update-ref can operate on refs/heads/HEAD
ok 39 - branch -d can remove refs/heads/HEAD
ok 40 - branch -m can rename refs/heads/HEAD
ok 41 - branch -d can remove refs/heads/-dash
ok 42 - branch -m can rename refs/heads/-dash
# still have 2 known breakage(s)
# passed all remaining 40 test(s)
1..42
*** t1450-fsck.sh ***
ok 1 - setup
ok 2 - loose objects borrowed from alternate are not missing
ok 3 - HEAD is part of refs, valid objects appear valid
ok 4 - object with hash mismatch
ok 5 - object with hash and type mismatch
ok 6 - zlib corrupt loose object output 
ok 7 - branch pointing to non-commit
ok 8 - HEAD link pointing at a funny object
ok 9 - HEAD link pointing at a funny place
ok 10 - HEAD link pointing at a funny object (from different wt)
ok 11 - other worktree HEAD link pointing at a funny object
ok 12 - other worktree HEAD link pointing at missing object
ok 13 - other worktree HEAD link pointing at a funny place
ok 14 - commit with multiple signatures is okay
ok 15 - email without @ is okay
ok 16 - email with embedded > is not okay
ok 17 - missing < email delimiter is reported nicely
ok 18 - missing email is reported nicely
ok 19 - > in name is reported
ok 20 - integer overflow in timestamps is reported
ok 21 - commit with NUL in header
ok 22 - tree object with duplicate entries
ok 23 - tree object with duplicate names: x x.1 x/
ok 24 - tree object with duplicate names: x x.1.2 x.1/ x/
ok 25 - tree object with duplicate names: x x.1 x.1.2 x/
ok 26 - unparseable tree object
ok 27 - tree entry with type mismatch
ok 28 - tree entry with bogus mode
ok 29 - tag pointing to nonexistent
ok 30 - tag pointing to something else than its type
ok 31 - tag with incorrect tag name & missing tagger
ok 32 - tag with bad tagger
ok 33 - tag with NUL in header
ok 34 - cleaned up
ok 35 - rev-list --verify-objects
ok 36 - rev-list --verify-objects with bad sha1
ok 37 - rev-list --verify-objects notices swapped commits
ok 38 - set up repository with commit-graph
ok 39 - rev-list --verify-objects with commit graph (tip)
ok 40 - rev-list --verify-objects with commit graph (parent)
ok 41 - force fsck to ignore double author
ok 42 - fsck notices blob entry pointing to null sha1
ok 43 - fsck notices submodule entry pointing to null sha1
ok 44 - fsck notices excessively large tree entry name
ok 45 - fsck notices . as blob
ok 46 - fsck notices . as tree
ok 47 - fsck notices .. as blob
ok 48 - fsck notices .. as tree
ok 49 - fsck notices .git as blob
ok 50 - fsck notices .git as tree
ok 51 - fsck notices .GIT as blob
ok 52 - fsck notices .GIT as tree
ok 53 - fsck notices .gI{u200c}T as blob
ok 54 - fsck notices .gI{u200c}T as tree
ok 55 - fsck notices .Git as blob
ok 56 - fsck notices .Git as tree
ok 57 - fsck notices git~1 as blob
ok 58 - fsck notices git~1 as tree
ok 59 - fsck notices .git. as blob
ok 60 - fsck notices .git. as tree
ok 61 - fsck notices .\.GIT\foobar as blob
ok 62 - fsck notices .\.GIT\foobar as tree
ok 63 - fsck notices .git\foobar as blob
ok 64 - fsck notices .git\foobar as tree
ok 65 - fsck allows .Ňit
ok 66 - NUL in commit
ok 67 - fsck notices missing blob
ok 68 - fsck notices missing subtree
ok 69 - fsck notices missing root tree
ok 70 - fsck notices missing parent
ok 71 - fsck notices missing tagged object
ok 72 - fsck notices ref pointing to missing commit
ok 73 - fsck notices ref pointing to missing tag
ok 74 - fsck --connectivity-only
ok 75 - fsck --connectivity-only with explicit head
ok 76 - fsck --name-objects
ok 77 - alternate objects are correctly blamed
ok 78 - fsck errors in packed objects
ok 79 - fsck fails on corrupt packfile
ok 80 - fsck finds problems in duplicate loose objects
ok 81 - fsck detects trailing loose garbage (commit)
ok 82 - fsck detects trailing loose garbage (large blob)
ok 83 - fsck detects truncated loose object
ok 84 - create dangling-object repository
ok 85 - fsck notices dangling objects
ok 86 - fsck --connectivity-only notices dangling objects
ok 87 - fsck $name notices bogus $name
ok 88 - bogus head does not fallback to all heads
ok 89 - detect corrupt index file in fsck
ok 90 - fsck error and recovery on invalid object type
ok 91 - fsck error on gitattributes with excessive line lengths
ok 92 - fsck error on gitattributes with excessive size
ok 93 - fsck detects problems in worktree index
ok 94 - fsck reports problems in current worktree index without filename
ok 95 - fsck warning on symlink target with excessive length
ok 96 - fsck warning on symlink target pointing inside git dir
# passed all 96 test(s)
1..96
*** t1451-fsck-buffer.sh ***
ok 1 - create valid objects
ok 2 - reset input to empty
ok 3 - truncated commit (missingTree, "")
ok 4 - truncated commit (missingTree, "tr")
ok 5 - truncated commit (missingTree, "tree")
ok 6 - truncated commit (badTreeSha1, "tree ")
ok 7 - truncated commit (badTreeSha1, "tree 1234")
ok 8 - add tree line
ok 9 - truncated commit (missingAuthor, "")
ok 10 - truncated commit (missingAuthor, "par")
ok 11 - truncated commit (missingAuthor, "parent")
ok 12 - truncated commit (badParentSha1, "parent ")
ok 13 - truncated commit (badParentSha1, "parent 1234")
ok 14 - add parent line
ok 15 - truncated commit (missingAuthor, "")
ok 16 - truncated commit (missingAuthor, "au")
ok 17 - truncated commit (missingAuthor, "author")
ok 18 - truncated commit (missingEmail, "author ")
ok 19 - truncated commit (missingEmail, "author name")
ok 20 - truncated commit (badEmail, "author name <")
ok 21 - truncated commit (badEmail, "author name <email")
ok 22 - truncated commit (missingSpaceBeforeDate, "author name <email>")
ok 23 - truncated commit (badDate, "author name <email> ")
ok 24 - truncated commit (badDate, "author name <email> 1234")
ok 25 - truncated commit (badTimezone, "author name <email> 1234 ")
ok 26 - truncated commit (badTimezone, "author name <email> 1234 +")
ok 27 - add author line
ok 28 - truncated commit (missingCommitter, "")
ok 29 - truncated commit (missingCommitter, "co")
ok 30 - truncated commit (missingCommitter, "committer")
ok 31 - truncated commit (missingEmail, "committer ")
ok 32 - truncated commit (missingEmail, "committer name")
ok 33 - truncated commit (badEmail, "committer name <")
ok 34 - truncated commit (badEmail, "committer name <email")
ok 35 - truncated commit (missingSpaceBeforeDate, "committer name <email>")
ok 36 - truncated commit (badDate, "committer name <email> ")
ok 37 - truncated commit (badDate, "committer name <email> 1234")
ok 38 - truncated commit (badTimezone, "committer name <email> 1234 ")
ok 39 - truncated commit (badTimezone, "committer name <email> 1234 +")
ok 40 - add committer line
ok 41 - reset input to empty
ok 42 - truncated tag (missingObject, "")
ok 43 - truncated tag (missingObject, "obj")
ok 44 - truncated tag (missingObject, "object")
ok 45 - truncated tag (badObjectSha1, "object ")
ok 46 - truncated tag (badObjectSha1, "object 1234")
ok 47 - add object line
ok 48 - truncated tag (missingType, "")
ok 49 - truncated tag (missingType, "ty")
ok 50 - truncated tag (missingType, "type")
ok 51 - truncated tag (badType, "type ")
ok 52 - truncated tag (badType, "type com")
ok 53 - add type line
ok 54 - truncated tag (missingTagEntry, "")
ok 55 - truncated tag (missingTagEntry, "ta")
ok 56 - truncated tag (missingTagEntry, "tag")
ok 57 - truncated tag (badTagName, "tag ")
ok 58 - add tag line
ok 59 - truncated tag (missingTagger, "")
ok 60 - truncated tag (missingTagger, "ta")
ok 61 - truncated tag (missingTagger, "tagger")
ok 62 - truncated tag (missingEmail, "tagger ")
ok 63 - truncated tag (missingEmail, "tagger name")
ok 64 - truncated tag (badEmail, "tagger name <")
ok 65 - truncated tag (badEmail, "tagger name <email")
ok 66 - truncated tag (missingSpaceBeforeDate, "tagger name <email>")
ok 67 - truncated tag (badDate, "tagger name <email> ")
ok 68 - truncated tag (badDate, "tagger name <email> 1234")
ok 69 - truncated tag (badTimezone, "tagger name <email> 1234 ")
ok 70 - truncated tag (badTimezone, "tagger name <email> 1234 +")
ok 71 - truncated tree (short hash)
ok 72 - truncated tree (missing nul)
# passed all 72 test(s)
1..72
*** t1500-rev-parse.sh ***
ok 1 - setup
ok 2 - toplevel: --is-bare-repository
ok 3 - toplevel: --is-inside-git-dir
ok 4 - toplevel: --is-inside-work-tree
ok 5 - toplevel: --show-prefix
ok 6 - toplevel: --git-dir
ok 7 - toplevel: --absolute-git-dir
ok 8 - .git/: --is-bare-repository
ok 9 - .git/: --is-inside-git-dir
ok 10 - .git/: --is-inside-work-tree
ok 11 - .git/: --show-prefix
ok 12 - .git/: --git-dir
ok 13 - .git/: --absolute-git-dir
ok 14 - .git/objects/: --is-bare-repository
ok 15 - .git/objects/: --is-inside-git-dir
ok 16 - .git/objects/: --is-inside-work-tree
ok 17 - .git/objects/: --show-prefix
ok 18 - .git/objects/: --git-dir
ok 19 - .git/objects/: --absolute-git-dir
ok 20 - subdirectory: --is-bare-repository
ok 21 - subdirectory: --is-inside-git-dir
ok 22 - subdirectory: --is-inside-work-tree
ok 23 - subdirectory: --show-prefix
ok 24 - subdirectory: --git-dir
ok 25 - subdirectory: --absolute-git-dir
ok 26 - core.bare = true: --is-bare-repository
ok 27 - core.bare = true: --is-inside-git-dir
ok 28 - core.bare = true: --is-inside-work-tree
ok 29 - core.bare undefined: --is-bare-repository
ok 30 - core.bare undefined: --is-inside-git-dir
ok 31 - core.bare undefined: --is-inside-work-tree
ok 32 - GIT_DIR=../.git, core.bare = false: --is-bare-repository
ok 33 - GIT_DIR=../.git, core.bare = false: --is-inside-git-dir
ok 34 - GIT_DIR=../.git, core.bare = false: --is-inside-work-tree
ok 35 - GIT_DIR=../.git, core.bare = false: --show-prefix
ok 36 - GIT_DIR=../.git, core.bare = false: --git-dir
ok 37 - GIT_DIR=../.git, core.bare = false: --absolute-git-dir
ok 38 - GIT_DIR=../.git, core.bare = true: --is-bare-repository
ok 39 - GIT_DIR=../.git, core.bare = true: --is-inside-git-dir
ok 40 - GIT_DIR=../.git, core.bare = true: --is-inside-work-tree
ok 41 - GIT_DIR=../.git, core.bare = true: --show-prefix
ok 42 - GIT_DIR=../.git, core.bare undefined: --is-bare-repository
ok 43 - GIT_DIR=../.git, core.bare undefined: --is-inside-git-dir
ok 44 - GIT_DIR=../.git, core.bare undefined: --is-inside-work-tree
ok 45 - GIT_DIR=../.git, core.bare undefined: --show-prefix
ok 46 - GIT_DIR=../repo.git, core.bare = false: --is-bare-repository
ok 47 - GIT_DIR=../repo.git, core.bare = false: --is-inside-git-dir
ok 48 - GIT_DIR=../repo.git, core.bare = false: --is-inside-work-tree
ok 49 - GIT_DIR=../repo.git, core.bare = false: --show-prefix
ok 50 - GIT_DIR=../repo.git, core.bare = false: --git-dir
ok 51 - GIT_DIR=../repo.git, core.bare = false: --absolute-git-dir
ok 52 - GIT_DIR=../repo.git, core.bare = true: --is-bare-repository
ok 53 - GIT_DIR=../repo.git, core.bare = true: --is-inside-git-dir
ok 54 - GIT_DIR=../repo.git, core.bare = true: --is-inside-work-tree
ok 55 - GIT_DIR=../repo.git, core.bare = true: --show-prefix
ok 56 - GIT_DIR=../repo.git, core.bare undefined: --is-bare-repository
ok 57 - GIT_DIR=../repo.git, core.bare undefined: --is-inside-git-dir
ok 58 - GIT_DIR=../repo.git, core.bare undefined: --is-inside-work-tree
ok 59 - GIT_DIR=../repo.git, core.bare undefined: --show-prefix
ok 60 - rev-parse --path-format=absolute
ok 61 - rev-parse --path-format=relative
ok 62 - --path-format=relative does not affect --absolute-git-dir
ok 63 - --path-format can change in the middle of the command line
ok 64 - --path-format does not segfault without an argument
ok 65 - git-common-dir from worktree root
ok 66 - git-common-dir inside sub-dir
ok 67 - git-path from worktree root
ok 68 - git-path inside sub-dir
ok 69 - rev-parse --is-shallow-repository in shallow repo
ok 70 - rev-parse --is-shallow-repository in non-shallow repo
ok 71 - rev-parse --show-object-format in repo
ok 72 - rev-parse --show-ref-format
ok 73 - rev-parse --show-ref-format with invalid storage
ok 74 - --show-toplevel from subdir of working tree
ok 75 - --show-toplevel from inside .git
ok 76 - showing the superproject correctly
ok 77 - rev-parse --since= unsqueezed ordering
ok 78 - rev-parse --bisect includes bad, excludes good
# passed all 78 test(s)
1..78
*** t1501-work-tree.sh ***
ok 1 - setup
ok 2 - setup: helper for testing rev-parse
ok 3 - setup: core.worktree = relative path
ok 4 - outside
ok 5 - inside work tree
ok 6 - empty prefix is actually written out
ok 7 - subdir of work tree
ok 8 - setup: core.worktree = absolute path
ok 9 - outside
ok 10 - inside work tree
ok 11 - subdir of work tree
ok 12 - setup: GIT_WORK_TREE=relative (override core.worktree)
ok 13 - outside
ok 14 - inside work tree
ok 15 - subdir of work tree
ok 16 - setup: GIT_WORK_TREE=absolute, below git dir
ok 17 - outside
ok 18 - in repo.git
ok 19 - inside work tree
ok 20 - subdir of work tree
ok 21 - find work tree from repo
ok 22 - find work tree from work tree
ok 23 - _gently() groks relative GIT_DIR & GIT_WORK_TREE
ok 24 - diff-index respects work tree under .git dir
ok 25 - diff-files respects work tree under .git dir
ok 26 - git diff respects work tree under .git dir
ok 27 - git grep
ok 28 - git commit
ok 29 - absolute pathspec should fail gracefully
ok 30 - make_relative_path handles double slashes in GIT_DIR
ok 31 - relative $GIT_WORK_TREE and git subprocesses
ok 32 - Multi-worktree setup
ok 33 - GIT_DIR set (1)
ok 34 - GIT_DIR set (2)
ok 35 - Auto discovery
ok 36 - $GIT_DIR/common overrides core.worktree
ok 37 - $GIT_WORK_TREE overrides $GIT_DIR/common
ok 38 - error out gracefully on invalid $GIT_WORK_TREE
ok 39 - refs work with relative gitdir and work tree
# passed all 39 test(s)
1..39
*** t1502-rev-parse-parseopt.sh ***
ok 1 - setup optionspec
ok 2 - setup optionspec-no-switches
ok 3 - setup optionspec-only-hidden-switches
ok 4 - test --parseopt help output
ok 5 - test --parseopt help output no switches
ok 6 - test --parseopt help output hidden switches
ok 7 - test --parseopt help-all output hidden switches
ok 8 - test --parseopt invalid switch help output
ok 9 - setup expect.1
ok 10 - test --parseopt
ok 11 - test --parseopt with mixed options and arguments
ok 12 - setup expect.2
ok 13 - test --parseopt with --
ok 14 - test --parseopt --stop-at-non-option
ok 15 - setup expect.3
ok 16 - test --parseopt --keep-dashdash
ok 17 - setup expect.4
ok 18 - test --parseopt --keep-dashdash --stop-at-non-option with --
ok 19 - setup expect.5
ok 20 - test --parseopt --keep-dashdash --stop-at-non-option without --
ok 21 - setup expect.6
ok 22 - test --parseopt --stuck-long
ok 23 - setup expect.7
ok 24 - test --parseopt --stuck-long and empty optional argument
ok 25 - setup expect.8
ok 26 - test --parseopt --stuck-long and long option with unset optional argument
ok 27 - test --parseopt --stuck-long and short option with unset optional argument
ok 28 - test --parseopt help output: "wrapped" options normal "or:" lines
ok 29 - test --parseopt invalid opt-spec
ok 30 - test --parseopt help output: multi-line blurb after empty line
ok 31 - test --parseopt help output for optionspec-neg
ok 32 - test --parseopt valid options for optionspec-neg
ok 33 - test --parseopt positivated option for optionspec-neg
ok 34 - test --parseopt invalid switch --no-positive-only help output for optionspec-neg
ok 35 - test --parseopt invalid switch --negative help output for optionspec-neg
ok 36 - test --parseopt invalid switch --no-no-negative help output for optionspec-neg
ok 37 - ambiguous: --no matches both --noble and --no-noble
# passed all 37 test(s)
1..37
*** t1503-rev-parse-verify.sh ***
ok 1 - set up basic repo with 1 file (hello) and 4 commits
ok 2 - works with one good rev
ok 3 - fails with any bad rev or many good revs
ok 4 - fails silently when using -q
ok 5 - fails silently when using -q with deleted reflogs
ok 6 - fails silently when using -q with not enough reflogs
ok 7 - succeeds silently with -q and reflogs that do not go far back enough in time
ok 8 - no stdout output on error
ok 9 - use --default
ok 10 - main@{n} for various n
ok 11 - options can appear after --verify
ok 12 - verify respects --end-of-options
# passed all 12 test(s)
1..12
*** t1504-ceiling-dirs.sh ***
ok 1 - no_ceil: git rev-parse --show-prefix is ''
ok 2 - ceil_empty: git rev-parse --show-prefix is ''
ok 3 - ceil_at_parent: git rev-parse --show-prefix is ''
ok 4 - ceil_at_parent_slash: git rev-parse --show-prefix is ''
ok 5 - ceil_at_trash: git rev-parse --show-prefix is ''
ok 6 - ceil_at_trash_slash: git rev-parse --show-prefix is ''
ok 7 - ceil_at_sub: git rev-parse --show-prefix is ''
ok 8 - ceil_at_sub_slash: git rev-parse --show-prefix is ''
ok 9 - subdir_no_ceil: git rev-parse --show-prefix is 'sub/dir/'
ok 10 - subdir_ceil_empty: git rev-parse --show-prefix is 'sub/dir/'
ok 11 - subdir_ceil_at_trash: prefix
ok 12 - subdir_ceil_at_trash_slash: prefix
ok 13 - subdir_ceil_at_sub: prefix
ok 14 - subdir_ceil_at_sub_slash: prefix
ok 15 - subdir_ceil_at_top: prefix
ok 16 - subdir_ceil_at_top_slash: prefix
ok 17 - subdir_ceil_at_top_no_resolve: git rev-parse --show-prefix is 'sub/dir/'
ok 18 - subdir_ceil_at_top_slash_no_resolve: git rev-parse --show-prefix is 'sub/dir/'
ok 19 - subdir_ceil_at_subdir: git rev-parse --show-prefix is 'sub/dir/'
ok 20 - subdir_ceil_at_subdir_slash: git rev-parse --show-prefix is 'sub/dir/'
ok 21 - subdir_ceil_at_su: git rev-parse --show-prefix is 'sub/dir/'
ok 22 - subdir_ceil_at_su_slash: git rev-parse --show-prefix is 'sub/dir/'
ok 23 - subdir_ceil_at_sub_di: git rev-parse --show-prefix is 'sub/dir/'
ok 24 - subdir_ceil_at_sub_di_slash: git rev-parse --show-prefix is 'sub/dir/'
ok 25 - subdir_ceil_at_subdi: git rev-parse --show-prefix is 'sub/dir/'
ok 26 - subdir_ceil_at_subdi_slash: git rev-parse --show-prefix is 'sub/dir/'
ok 27 - second_of_two: prefix
ok 28 - first_of_two: prefix
ok 29 - second_of_three: prefix
ok 30 - git_dir_specified: git rev-parse --show-prefix is ''
ok 31 - sd_no_ceil: git rev-parse --show-prefix is 's/d/'
ok 32 - sd_ceil_empty: git rev-parse --show-prefix is 's/d/'
ok 33 - sd_ceil_at_trash: prefix
ok 34 - sd_ceil_at_trash_slash: prefix
ok 35 - sd_ceil_at_s: prefix
ok 36 - sd_ceil_at_s_slash: prefix
ok 37 - sd_ceil_at_sd: git rev-parse --show-prefix is 's/d/'
ok 38 - sd_ceil_at_sd_slash: git rev-parse --show-prefix is 's/d/'
ok 39 - sd_ceil_at_su: git rev-parse --show-prefix is 's/d/'
ok 40 - sd_ceil_at_su_slash: git rev-parse --show-prefix is 's/d/'
ok 41 - sd_ceil_at_s_di: git rev-parse --show-prefix is 's/d/'
ok 42 - sd_ceil_at_s_di_slash: git rev-parse --show-prefix is 's/d/'
ok 43 - sd_ceil_at_sdi: git rev-parse --show-prefix is 's/d/'
ok 44 - sd_ceil_at_sdi_slash: git rev-parse --show-prefix is 's/d/'
# passed all 44 test(s)
1..44
*** t1505-rev-parse-last.sh ***
ok 1 - setup
ok 2 - @{-1} works
ok 3 - @{-1}~2 works
ok 4 - @{-1}^2 works
ok 5 - @{-1}@{1} works
ok 6 - @{-2} works
ok 7 - @{-3} fails
# passed all 7 test(s)
1..7
*** t1506-rev-parse-diagnosis.sh ***
ok 1 - set up basic repo
ok 2 - correct file objects
ok 3 - correct relative file objects (0)
ok 4 - correct relative file objects (1)
ok 5 - correct relative file objects (2)
ok 6 - correct relative file objects (3)
ok 7 - correct relative file objects (4)
ok 8 - correct relative file objects (5)
ok 9 - correct relative file objects (6)
ok 10 - incorrect revision id
ok 11 - incorrect file in sha1:path
ok 12 - incorrect file in :path and :N:path
ok 13 - invalid @{n} reference
ok 14 - relative path not found
ok 15 - relative path outside worktree
ok 16 - relative path when cwd is outside worktree
ok 17 - <commit>:file correctly diagnosed after a pathname
ok 18 - dotdot is not an empty set
ok 19 - dotdot does not peel endpoints
ok 20 - arg before dashdash must be a revision (missing)
ok 21 - arg before dashdash must be a revision (file)
ok 22 - arg before dashdash must be a revision (ambiguous)
ok 23 - reject Nth parent if N is too high
ok 24 - reject Nth ancestor if N is too high
ok 25 - pathspecs with wildcards are not ambiguous
ok 26 - backslash does not trigger wildcard rule
ok 27 - escaped char does not trigger wildcard rule
ok 28 - arg after dashdash not interpreted as option
ok 29 - arg after end-of-options not interpreted as option
ok 30 - end-of-options still allows --
# passed all 30 test(s)
1..30
*** t1507-rev-parse-upstream.sh ***
ok 1 - setup
ok 2 - @{upstream} resolves to correct full name
ok 3 - @{u} resolves to correct full name
ok 4 - my-side@{upstream} resolves to correct full name
ok 5 - upstream of branch with @ in middle
ok 6 - upstream of branch with @ at start
ok 7 - upstream of branch with @ at end
ok 8 - refs/heads/my-side@{upstream} does not resolve to my-side{upstream}
ok 9 - my-side@{u} resolves to correct commit
ok 10 - not-tracking@{u} fails
ok 11 - <branch>@{u}@{1} resolves correctly
ok 12 - @{u} without specifying branch fails on a detached HEAD
ok 13 - checkout -b new my-side@{u} forks from the same
ok 14 - merge my-side@{u} records the correct name
ok 15 - branch -d other@{u}
ok 16 - checkout other@{u}
ok 17 - branch@{u} works when tracking a local branch
ok 18 - branch@{u} error message when no upstream
ok 19 - @{u} error message when no upstream
ok 20 - @{u} silent error when no upstream
ok 21 - branch@{u} error message with misspelt branch
ok 22 - @{u} error message when not on a branch
ok 23 - branch@{u} error message if upstream branch not fetched
ok 24 - pull works when tracking a local branch
ok 25 - @{u} works when tracking a local branch
ok 26 - log -g other@{u}
ok 27 - log -g other@{u}@{now}
ok 28 - @{reflog}-parsing does not look beyond colon
ok 29 - @{upstream}-parsing does not look beyond colon
# passed all 29 test(s)
1..29
*** t1508-at-combinations.sh ***
ok 1 - setup
ok 2 - HEAD = refs/heads/new-branch
ok 3 - @{1} = new-one
ok 4 - HEAD@{1} = new-one
ok 5 - @{now} = new-two
ok 6 - HEAD@{now} = new-two
ok 7 - @{-1} = refs/heads/old-branch
ok 8 - @{-1}@{0} = old-two
ok 9 - @{-1}@{1} = old-one
ok 10 - @{u} = refs/heads/upstream-branch
ok 11 - HEAD@{u} = refs/heads/upstream-branch
ok 12 - @{u}@{1} = upstream-one
ok 13 - @{-1}@{u} = refs/heads/main
ok 14 - @{-1}@{u}@{1} = main-one
ok 15 - @ = new-two
ok 16 - @@{u} = refs/heads/upstream-branch
ok 17 - @@/at-test = refs/heads/@@/at-test
ok 18 - @/at-test = refs/heads/@/at-test
ok 19 - @at-test = refs/heads/@at-test
ok 20 - @{u}@{-1} is nonsensical
ok 21 - @{0}@{0} is nonsensical
ok 22 - @{1}@{u} is nonsensical
ok 23 - HEAD@{-1} is nonsensical
ok 24 - @{-1}@{-1} is nonsensical
ok 25 - HEAD@{3} = old-two
ok 26 - @{3} is nonsensical
ok 27 - switch to old-branch
ok 28 - HEAD = refs/heads/old-branch
ok 29 - HEAD@{1} = new-two
ok 30 - @{1} = old-one
ok 31 - create path with @
ok 32 - @:normal = content
ok 33 - @:fun@ny = content
ok 34 - @{1} works with only one reflog entry
ok 35 - @{0} works with empty reflog
# passed all 35 test(s)
1..35
*** t1509-root-work-tree.sh ***
1..0 # SKIP Test requiring writable / skipped. Read this test if you want to run it
*** t1510-repo-setup.sh ***
ok 1 - #0: nonbare repo, no explicit configuration
ok 2 - #1: GIT_WORK_TREE without explicit GIT_DIR is accepted
ok 3 - #2: worktree defaults to cwd with explicit GIT_DIR
ok 4 - #2b: relative GIT_DIR
ok 5 - #3: setup
ok 6 - #3: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 7 - #3: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 8 - #3: explicit GIT_WORK_TREE from parent of worktree
ok 9 - #3: explicit GIT_WORK_TREE from nephew of worktree
ok 10 - #3: chdir_to_toplevel uses worktree, not git dir
ok 11 - #3: chdir_to_toplevel uses worktree (from subdir)
ok 12 - #4: core.worktree without GIT_DIR set is accepted
ok 13 - #5: core.worktree + GIT_WORK_TREE is accepted
ok 14 - #6: setting GIT_DIR brings core.worktree to life
ok 15 - #6b: GIT_DIR set, core.worktree relative
ok 16 - #6c: GIT_DIR set, core.worktree=../wt (absolute)
ok 17 - #6d: GIT_DIR set, core.worktree=../wt (relative)
ok 18 - #6e: GIT_DIR set, core.worktree=../.. (absolute)
ok 19 - #6f: GIT_DIR set, core.worktree=../.. (relative)
ok 20 - #7: setup
ok 21 - #7: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 22 - #7: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 23 - #7: explicit GIT_WORK_TREE from parent of worktree
ok 24 - #7: explicit GIT_WORK_TREE from nephew of worktree
ok 25 - #7: chdir_to_toplevel uses worktree, not git dir
ok 26 - #7: chdir_to_toplevel uses worktree (from subdir)
ok 27 - #8: gitfile, easy case
ok 28 - #9: GIT_WORK_TREE accepted with gitfile
ok 29 - #10: GIT_DIR can point to gitfile
ok 30 - #10b: relative GIT_DIR can point to gitfile
ok 31 - #11: setup
ok 32 - #11: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 33 - #11: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 34 - #11: explicit GIT_WORK_TREE from parent of worktree
ok 35 - #11: explicit GIT_WORK_TREE from nephew of worktree
ok 36 - #11: chdir_to_toplevel uses worktree, not git dir
ok 37 - #11: chdir_to_toplevel uses worktree (from subdir)
ok 38 - #12: core.worktree with gitfile is accepted
ok 39 - #13: core.worktree+GIT_WORK_TREE accepted (with gitfile)
ok 40 - #14: core.worktree with GIT_DIR pointing to gitfile
ok 41 - #14b: core.worktree is relative to actual git dir
ok 42 - #15: setup
ok 43 - #15: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 44 - #15: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 45 - #15: explicit GIT_WORK_TREE from parent of worktree
ok 46 - #15: explicit GIT_WORK_TREE from nephew of worktree
ok 47 - #15: chdir_to_toplevel uses worktree, not git dir
ok 48 - #15: chdir_to_toplevel uses worktree (from subdir)
ok 49 - #16a: implicitly bare repo (cwd inside .git dir)
ok 50 - #16b: bare .git (cwd inside .git dir)
ok 51 - #16c: bare .git has no worktree
ok 52 - #16d: bareness preserved across alias
ok 53 - #16e: bareness preserved by --bare
ok 54 - #17: GIT_WORK_TREE without explicit GIT_DIR is accepted (bare case)
ok 55 - #18: bare .git named by GIT_DIR has no worktree
ok 56 - #19: setup
ok 57 - #19: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 58 - #19: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 59 - #19: explicit GIT_WORK_TREE from parent of worktree
ok 60 - #19: explicit GIT_WORK_TREE from nephew of worktree
ok 61 - #19: chdir_to_toplevel uses worktree, not git dir
ok 62 - #19: chdir_to_toplevel uses worktree (from subdir)
ok 63 - #20a: core.worktree without GIT_DIR accepted (inside .git)
ok 64 - #20b/c: core.worktree and core.bare conflict
ok 65 - #20d: core.worktree and core.bare OK when working tree not needed
ok 66 - #21: setup, core.worktree warns before overriding core.bare
ok 67 - #21: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 68 - #21: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 69 - #21: explicit GIT_WORK_TREE from parent of worktree
ok 70 - #21: explicit GIT_WORK_TREE from nephew of worktree
ok 71 - #21: chdir_to_toplevel uses worktree, not git dir
ok 72 - #21: chdir_to_toplevel uses worktree (from subdir)
ok 73 - #22a: core.worktree = GIT_DIR = .git dir
ok 74 - #22b: core.worktree child of .git, GIT_DIR=.git
ok 75 - #22c: core.worktree = .git/.., GIT_DIR=.git
ok 76 - #22.2: core.worktree and core.bare conflict
ok 77 - #23: setup
ok 78 - #23: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 79 - #23: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 80 - #23: explicit GIT_WORK_TREE from parent of worktree
ok 81 - #23: explicit GIT_WORK_TREE from nephew of worktree
ok 82 - #23: chdir_to_toplevel uses worktree, not git dir
ok 83 - #23: chdir_to_toplevel uses worktree (from subdir)
ok 84 - #24: bare repo has no worktree (gitfile case)
ok 85 - #25: GIT_WORK_TREE accepted if GIT_DIR unset (bare gitfile case)
ok 86 - #26: bare repo has no worktree (GIT_DIR -> gitfile case)
ok 87 - #27: setup
ok 88 - #27: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 89 - #27: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 90 - #27: explicit GIT_WORK_TREE from parent of worktree
ok 91 - #27: explicit GIT_WORK_TREE from nephew of worktree
ok 92 - #27: chdir_to_toplevel uses worktree, not git dir
ok 93 - #27: chdir_to_toplevel uses worktree (from subdir)
ok 94 - #28: core.worktree and core.bare conflict (gitfile case)
ok 95 - #29: setup
ok 96 - #29: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 97 - #29: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 98 - #29: explicit GIT_WORK_TREE from parent of worktree
ok 99 - #29: explicit GIT_WORK_TREE from nephew of worktree
ok 100 - #29: chdir_to_toplevel uses worktree, not git dir
ok 101 - #29: chdir_to_toplevel uses worktree (from subdir)
ok 102 - #30: core.worktree and core.bare conflict (gitfile version)
ok 103 - #31: setup
ok 104 - #31: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 105 - #31: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 106 - #31: explicit GIT_WORK_TREE from parent of worktree
ok 107 - #31: explicit GIT_WORK_TREE from nephew of worktree
ok 108 - #31: chdir_to_toplevel uses worktree, not git dir
ok 109 - #31: chdir_to_toplevel uses worktree (from subdir)
# passed all 109 test(s)
1..109
*** t1511-rev-parse-caret.sh ***
ok 1 - setup
ok 2 - ref^{non-existent}
ok 3 - ref^{}
ok 4 - ref^{commit}
ok 5 - ref^{tree}
ok 6 - ref^{tag}
ok 7 - ref^{/.}
ok 8 - ref^{/non-existent}
ok 9 - ref^{/Initial}
ok 10 - ref^{/!Exp}
ok 11 - ref^{/!}
ok 12 - ref^{/!!Exp}
ok 13 - ref^{/!-}
ok 14 - ref^{/!-.}
ok 15 - ref^{/!-non-existent}
ok 16 - ref^{/!-Changed}
ok 17 - ref^{/!-!Exp}
# passed all 17 test(s)
1..17
*** t1512-rev-parse-disambiguation.sh ***
ok 1 - ambiguous blob output
ok 2 - ambiguous loose bad object parsed as OBJ_BAD
ok 3 - ambigous zlib corrupt loose blob
ok 4 - blob and tree
ok 5 - warn ambiguity when no candidate matches type hint
ok 6 - disambiguate tree-ish
ok 7 - disambiguate blob
ok 8 - disambiguate tree
ok 9 - first commit
ok 10 - disambiguate commit-ish
ok 11 - disambiguate commit
ok 12 - log name1..name2 takes only commit-ishes on both ends
ok 13 - rev-parse name1..name2 takes only commit-ishes on both ends
ok 14 - git log takes only commit-ish
ok 15 - git reset takes only commit-ish
ok 16 - first tag
not ok 17 - two semi-ambiguous commit-ish # TODO known breakage
not ok 18 - three semi-ambiguous tree-ish # TODO known breakage
ok 19 - parse describe name
ok 20 - more history
not ok 21 - parse describe name taking advantage of generation # TODO known breakage
ok 22 - parse describe name not ignoring ambiguity
ok 23 - ambiguous commit-ish
ok 24 - ambiguous tags peel to treeish
ok 25 - rev-parse --disambiguate
ok 26 - rev-parse --disambiguate drops duplicates
ok 27 - ambiguous 40-hex ref
ok 28 - ambiguous short sha1 ref
ok 29 - ambiguity errors are not repeated (raw)
ok 30 - ambiguity errors are not repeated (treeish)
ok 31 - ambiguity errors are not repeated (peel)
ok 32 - ambiguity hints
ok 33 - ambiguity hints respect type
ok 34 - failed type-selector still shows hint
ok 35 - core.disambiguate config can prefer types
ok 36 - core.disambiguate does not override context
ok 37 - ambiguous commits are printed by type first, then hash order
ok 38 - cat-file --batch and --batch-check show ambiguous
# still have 3 known breakage(s)
# passed all remaining 35 test(s)
1..38
*** t1513-rev-parse-prefix.sh ***
ok 1 - setup
ok 2 - empty prefix -- file
ok 3 - valid prefix -- file
ok 4 - valid prefix -- ../file
ok 5 - empty prefix HEAD:./path
ok 6 - valid prefix HEAD:./path
ok 7 - valid prefix HEAD:../path
ok 8 - prefix ignored with HEAD:top
ok 9 - disambiguate path with valid prefix
ok 10 - file and refs with prefix
ok 11 - two-levels deep
# passed all 11 test(s)
1..11
*** t1514-rev-parse-push.sh ***
ok 1 - setup
ok 2 - @{push} with default=nothing
ok 3 - @{push} with default=simple
ok 4 - triangular @{push} fails with default=simple
ok 5 - @{push} with default=current
ok 6 - @{push} with default=matching
ok 7 - @{push} with pushremote defined
ok 8 - @{push} with push refspecs
ok 9 - resolving @{push} fails with a detached HEAD
# passed all 9 test(s)
1..9
*** t1515-rev-parse-outside-repo.sh ***
ok 1 - set up non-repo directory
ok 2 - rev-parse --sq-quote
ok 3 - rev-parse --local-env-vars
ok 4 - rev-parse --resolve-git-dir
# passed all 4 test(s)
1..4
*** t1600-index.sh ***
ok 1 - setup
ok 2 - bogus GIT_INDEX_VERSION issues warning
ok 3 - out of bounds GIT_INDEX_VERSION issues warning
ok 4 - no warning with bogus GIT_INDEX_VERSION and existing index
ok 5 - out of bounds index.version issues warning
ok 6 - index.skipHash config option
ok 7 - index version config precedence
# passed all 7 test(s)
1..7
*** t1601-index-bogus.sh ***
ok 1 - create tree with null sha1
ok 2 - read-tree refuses to read null sha1
ok 3 - GIT_ALLOW_NULL_SHA1 overrides refusal
ok 4 - git write-tree refuses to write null sha1
# passed all 4 test(s)
1..4
*** t1700-split-index.sh ***
ok 1 - setup
ok 2 - enable split index
ok 3 - add one file
ok 4 - disable split index
ok 5 - enable split index again, "one" now belongs to base index"
ok 6 - modify original file, base index untouched
ok 7 - add another file, which stays index
ok 8 - remove file not in base index
ok 9 - remove file in base index
ok 10 - add original file back
ok 11 - add new file
ok 12 - unify index, two files remain
ok 13 - rev-parse --shared-index-path
ok 14 - set core.splitIndex config variable to true
ok 15 - set core.splitIndex config variable to false
ok 16 - set core.splitIndex config variable back to true
ok 17 - check behavior with splitIndex.maxPercentChange unset
ok 18 - check splitIndex.maxPercentChange set to 0
ok 19 - shared index files expire after 2 weeks by default
ok 20 - check splitIndex.sharedIndexExpire set to 16 days
ok 21 - check splitIndex.sharedIndexExpire set to "never" and "now"
ok 22 - same mode for index & split index
ok 23 - split index respects core.sharedrepository 0666
ok 24 - split index respects core.sharedrepository 0642
ok 25 - graceful handling when splitting index is not allowed
ok 26 - writing split index with null sha1 does not write cache tree
ok 27 - do not refresh null base index
ok 28 - reading split index at alternate location
ok 29 - GIT_TEST_SPLIT_INDEX works
# passed all 29 test(s)
1..29
*** t1701-racy-split-index.sh ***
ok 1 - setup
ok 2 - split the index while adding a racily clean file #0
ok 3 - split the index while adding a racily clean file #1
ok 4 - split the index while adding a racily clean file #2
ok 5 - split the index while adding a racily clean file #3
ok 6 - split the index while adding a racily clean file #4
ok 7 - add a racily clean file to an already split index #0
ok 8 - add a racily clean file to an already split index #1
ok 9 - add a racily clean file to an already split index #2
ok 10 - add a racily clean file to an already split index #3
ok 11 - add a racily clean file to an already split index #4
ok 12 - split the index when the index contains a racily clean cache entry #0
ok 13 - split the index when the index contains a racily clean cache entry #1
ok 14 - split the index when the index contains a racily clean cache entry #2
ok 15 - split the index when the index contains a racily clean cache entry #3
ok 16 - split the index when the index contains a racily clean cache entry #4
ok 17 - update the split index when it contains a new racily clean cache entry #0
ok 18 - update the split index when it contains a new racily clean cache entry #1
ok 19 - update the split index when it contains a new racily clean cache entry #2
ok 20 - update the split index when it contains a new racily clean cache entry #3
ok 21 - update the split index when it contains a new racily clean cache entry #4
ok 22 - update the split index when a racily clean cache entry is stored only in the shared index #0
ok 23 - update the split index when a racily clean cache entry is stored only in the shared index #1
ok 24 - update the split index when a racily clean cache entry is stored only in the shared index #2
ok 25 - update the split index when a racily clean cache entry is stored only in the shared index #3
ok 26 - update the split index when a racily clean cache entry is stored only in the shared index #4
ok 27 - update the split index after unpack trees() copied a racily clean cache entry from the shared index #0
ok 28 - update the split index after unpack trees() copied a racily clean cache entry from the shared index #1
ok 29 - update the split index after unpack trees() copied a racily clean cache entry from the shared index #2
ok 30 - update the split index after unpack trees() copied a racily clean cache entry from the shared index #3
ok 31 - update the split index after unpack trees() copied a racily clean cache entry from the shared index #4
# passed all 31 test(s)
1..31
*** t1800-hook.sh ***
ok 1 - git hook usage
ok 2 - git hook run: nonexistent hook
ok 3 - git hook run: nonexistent hook with --ignore-missing
ok 4 - git hook run: basic
ok 5 - git hook run: stdout and stderr both write to our stderr
ok 6 - git hook run: exit code 1 is passed along
ok 7 - git hook run: exit code 2 is passed along
ok 8 - git hook run: exit code 128 is passed along
ok 9 - git hook run: exit code 129 is passed along
ok 10 - git hook run arg u ments without -- is not allowed
ok 11 - git hook run -- pass arguments
ok 12 - git hook run -- out-of-repo runs excluded
ok 13 - git -c core.hooksPath=<PATH> hook run
ok 14 - git hook run: stdout and stderr are connected to a TTY
ok 15 - git commit: stdout and stderr are connected to a TTY
ok 16 - git hook run a hook with a bad shebang
ok 17 - stdin to hooks
ok 18 - clone protections
# passed all 18 test(s)
1..18
*** t2000-conflict-when-checking-files-out.sh ***
ok 1 - git update-index --add various paths.
ok 2 - git checkout-index without -f should fail on conflicting work tree.
ok 3 - git checkout-index with -f should succeed.
ok 4 - git checkout-index conflicting paths.
ok 5 - checkout-index -f twice with --prefix
ok 6 - git update-index --add path2/file0
ok 7 - writing tree out with git write-tree
ok 8 - git update-index --add path3/file1
ok 9 - writing tree out with git write-tree
ok 10 - read previously written tree and checkout.
ok 11 - add a symlink
ok 12 - writing tree out with git write-tree
ok 13 - read previously written tree and checkout.
ok 14 - checking out conflicting path with -f
# passed all 14 test(s)
1..14
*** t2002-checkout-cache-u.sh ***
ok 1 - preparation
ok 2 - without -u, git checkout-index smudges stat information.
ok 3 - with -u, git checkout-index picks up stat information from new files.
# passed all 3 test(s)
1..3
*** t2003-checkout-cache-mkdir.sh ***
ok 1 - setup
ok 2 - have symlink in place where dir is expected.
ok 3 - use --prefix=path2/
ok 4 - use --prefix=tmp-
ok 5 - use --prefix=tmp- but with a conflicting file and dir
ok 6 - use --prefix=tmp/orary/ where tmp is a symlink
ok 7 - use --prefix=tmp/orary- where tmp is a symlink
ok 8 - use --prefix=tmp- where tmp-path1 is a symlink
ok 9 - apply filter from working tree .gitattributes with --prefix
ok 10 - apply CRLF filter from working tree .gitattributes with --prefix
# passed all 10 test(s)
1..10
*** t2004-checkout-cache-temp.sh ***
ok 1 - setup
ok 2 - checkout one stage 0 to temporary file
ok 3 - checkout all stage 0 to temporary files
ok 4 - setup 3-way merge
ok 5 - checkout one stage 2 to temporary file
ok 6 - checkout all stage 2 to temporary files
ok 7 - checkout all stages of unknown path
ok 8 - checkout all stages/one file to nothing
ok 9 - checkout all stages/one file to temporary files
ok 10 - --stage=all implies --temp
ok 11 - overriding --stage=all resets implied --temp
ok 12 - --stage=all --no-temp is rejected
ok 13 - checkout some stages/one file to temporary files
ok 14 - checkout all stages/all files to temporary files
ok 15 - -- path0: no entry
ok 16 - -- path1: all 3 stages
ok 17 - -- path2: no stage 1, have stage 2 and 3
ok 18 - -- path3: no stage 2, have stage 1 and 3
ok 19 - -- path4: no stage 3, have stage 1 and 3
ok 20 - -- asubdir/path5: no stage 2 and 3 have stage 1
ok 21 - checkout --temp within subdir
ok 22 - checkout --temp symlink
ok 23 - emit well-formed relative path
# passed all 23 test(s)
1..23
*** t2005-checkout-index-symlinks.sh ***
ok 1 - preparation
ok 2 - the checked-out symlink must be a file
ok 3 - the file must be the blob we added during the setup
# passed all 3 test(s)
1..3
*** t2006-checkout-index-basic.sh ***
ok 1 - checkout-index --gobbledegook
ok 2 - checkout-index -h in broken repository
ok 3 - checkout-index reports errors (cmdline)
ok 4 - checkout-index reports errors (stdin)
ok 5 # skip checkout-index with case-collision don't write to the wrong place (missing CASE_INSENSITIVE_FS of SYMLINKS,CASE_INSENSITIVE_FS)
ok 6 # skip checkout-index with utf-8-collision don't write to the wrong place (missing UTF8_NFD_TO_NFC of SYMLINKS,UTF8_NFD_TO_NFC)
ok 7 - checkout-index --temp correctly reports error on missing blobs
ok 8 - checkout-index --temp correctly reports error for submodules
# passed all 8 test(s)
1..8
*** t2007-checkout-symlink.sh ***
ok 1 - setup
ok 2 - switch from symlink to dir
ok 3 - Remove temporary directories & switch to main
ok 4 - switch from dir to symlink
# passed all 4 test(s)
1..4
*** t2008-checkout-subdir.sh ***
ok 1 - setup
ok 2 - remove and restore with relative path
ok 3 - checkout with empty prefix
ok 4 - checkout with simple prefix
ok 5 - checkout with complex relative path
ok 6 - relative path outside tree should fail
ok 7 - incorrect relative path to file should fail (1)
ok 8 - incorrect relative path should fail (2)
ok 9 - incorrect relative path should fail (3)
# passed all 9 test(s)
1..9
*** t2009-checkout-statinfo.sh ***
ok 1 - setup
ok 2 - branch switching
ok 3 - path checkout
# passed all 3 test(s)
1..3
*** t2010-checkout-ambiguous.sh ***
ok 1 - setup
ok 2 - reference must be a tree
ok 3 - branch switching
ok 4 - checkout world from the index
ok 5 - non ambiguous call
ok 6 - allow the most common case
ok 7 - check ambiguity
ok 8 - check ambiguity in subdir
ok 9 - disambiguate checking out from a tree-ish
ok 10 - accurate error message with more than one ref
# passed all 10 test(s)
1..10
*** t2011-checkout-invalid-head.sh ***
ok 1 - setup
ok 2 - checkout should not start branch from a tree
ok 3 - checkout main from invalid HEAD
ok 4 - checkout notices failure to lock HEAD
ok 5 - create ref directory/file conflict scenario
ok 6 - checkout away from d/f HEAD (unpacked, to branch)
ok 7 - checkout away from d/f HEAD (unpacked, to detached)
ok 8 - pack refs
ok 9 - checkout away from d/f HEAD (packed, to branch)
ok 10 - checkout away from d/f HEAD (packed, to detached)
# passed all 10 test(s)
1..10
*** t2012-checkout-last.sh ***
ok 1 - setup
ok 2 - "checkout -" does not work initially
ok 3 - first branch switch
ok 4 - "checkout -" switches back
ok 5 - "checkout -" switches forth
ok 6 - detach HEAD
ok 7 - "checkout -" attaches again
ok 8 - "checkout -" detaches again
ok 9 - more switches
ok 10 - switch to the last
ok 11 - switch to second from the last
ok 12 - switch to third from the last
ok 13 - switch to fourth from the last
ok 14 - switch to twelfth from the last
ok 15 - merge base test setup
ok 16 - another...main
ok 17 - ...main
ok 18 - main...
ok 19 - "checkout -" works after a rebase A
ok 20 - "checkout -" works after a rebase A B
ok 21 - "checkout -" works after a rebase -i A
ok 22 - "checkout -" works after a rebase -i A B
# passed all 22 test(s)
1..22
*** t2013-checkout-submodule.sh ***
ok 1 - setup
ok 2 - "reset <submodule>" updates the index
ok 3 - "checkout <submodule>" updates the index only
ok 4 - "checkout <submodule>" honors diff.ignoreSubmodules
ok 5 - "checkout <submodule>" honors submodule.*.ignore from .gitmodules
ok 6 - "checkout <submodule>" honors submodule.*.ignore from .git/config
ok 7 - git checkout --recurse-submodules: added submodule is checked out
ok 8 - git checkout --recurse-submodules: added submodule is checked out in empty dir
ok 9 - git checkout --recurse-submodules: replace tracked file with submodule checks out submodule
ok 10 - git checkout --recurse-submodules: replace directory with submodule
ok 11 - git checkout --recurse-submodules: nested submodules are checked out
ok 12 - git checkout --recurse-submodules: removed submodule removes submodules working tree
ok 13 - git checkout --recurse-submodules: removed submodule absorbs submodules .git directory
ok 14 - git checkout --recurse-submodules: replace submodule with a file
not ok 15 - git checkout --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 16 - git checkout --recurse-submodules: worktrees of nested submodules are removed
ok 17 - git checkout --recurse-submodules: modified submodule updates submodule work tree
ok 18 - git checkout --recurse-submodules: updating to a missing submodule commit fails
ok 19 - git checkout --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 20 - git checkout --recurse-submodules: added submodule doesn't remove untracked file with same name
ok 21 - git checkout --recurse-submodules: added submodule removes an untracked ignored file
not ok 22 - git checkout --recurse-submodules: replace submodule with a directory # TODO known breakage
not ok 23 - git checkout --recurse-submodules: replace submodule containing a .git directory with a directory must absorb the git dir # TODO known breakage
ok 24 - git checkout --recurse-submodules: replace submodule with a file works ignores ignored files in submodule
ok 25 - git -c submodule.recurse=true checkout: modified submodule updates submodule work tree
ok 26 - git checkout --recurse-submodules: modified submodule updates submodule recursively
ok 27 - git checkout -f --recurse-submodules: added submodule is checked out
ok 28 - git checkout -f --recurse-submodules: added submodule is checked out in empty dir
ok 29 - git checkout -f --recurse-submodules: replace tracked file with submodule checks out submodule
ok 30 - git checkout -f --recurse-submodules: replace directory with submodule
ok 31 - git checkout -f --recurse-submodules: nested submodules are checked out
ok 32 - git checkout -f --recurse-submodules: removed submodule removes submodules working tree
ok 33 - git checkout -f --recurse-submodules: removed submodule absorbs submodules .git directory
ok 34 - git checkout -f --recurse-submodules: replace submodule with a file
not ok 35 - git checkout -f --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 36 - git checkout -f --recurse-submodules: worktrees of nested submodules are removed
ok 37 - git checkout -f --recurse-submodules: modified submodule updates submodule work tree
ok 38 - git checkout -f --recurse-submodules: updating to a missing submodule commit fails
ok 39 - git checkout -f --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 40 - git checkout -f --recurse-submodules: added submodule does remove untracked unignored file with same name when forced
ok 41 - git checkout -f --recurse-submodules: replace submodule with a directory
ok 42 - git checkout -f --recurse-submodules: replace submodule containing a .git directory with a directory must fail
ok 43 - git checkout -f --recurse-submodules: replace submodule with a file ignoring ignored files
ok 44 - git checkout -f --recurse-submodules: modified submodule does update submodule work tree from invalid commit
ok 45 - git checkout -f --recurse-submodules: updating submodules fixes .git links
ok 46 - git checkout -f --recurse-submodules: changed submodule worktree is reset
ok 47 - git_test_func: added submodule creates empty directory
ok 48 - git_test_func: added submodule leaves existing empty directory alone
ok 49 - git_test_func: replace tracked file with submodule creates empty directory
ok 50 - git_test_func: replace directory with submodule
ok 51 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 52 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 53 - git_test_func: replace submodule with a directory must fail
ok 54 - git_test_func: replace submodule containing a .git directory with a directory must fail
not ok 55 - git_test_func: replace submodule with a file must fail # TODO known breakage
not ok 56 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 57 - git_test_func: modified submodule does not update submodule work tree
ok 58 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 59 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 60 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 61 - git_test_func: added submodule creates empty directory
ok 62 - git_test_func: added submodule leaves existing empty directory alone
ok 63 - git_test_func: replace tracked file with submodule creates empty directory
ok 64 - git_test_func: replace directory with submodule
ok 65 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 66 - git_test_func: removed submodule leaves submodule containing a .git directory alone
not ok 67 - git_test_func: replace submodule with a directory must fail # TODO known breakage
not ok 68 - git_test_func: replace submodule containing a .git directory with a directory must fail # TODO known breakage
not ok 69 - git_test_func: replace submodule with a file must fail # TODO known breakage
not ok 70 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 71 - git_test_func: modified submodule does not update submodule work tree
ok 72 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 73 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 74 - git_test_func: added submodule does remove untracked unignored file with same name when forced
# still have 10 known breakage(s)
# passed all remaining 64 test(s)
1..74
*** t2014-checkout-switch.sh ***
ok 1 - setup
ok 2 - check all changes are staged
ok 3 - second commit
ok 4 - check
# passed all 4 test(s)
1..4
*** t2015-checkout-unborn.sh ***
ok 1 - setup
ok 2 - checkout from unborn preserves untracked files
ok 3 - checkout from unborn preserves index contents
ok 4 - checkout from unborn merges identical index contents
ok 5 - checking out another branch from unborn state
ok 6 - checking out in a newly created repo
# passed all 6 test(s)
1..6
*** t2016-checkout-patch.sh ***
ok 1 - setup
ok 2 - saying "n" does nothing
ok 3 - git checkout -p
ok 4 - git checkout -p with staged changes
ok 5 - git checkout -p HEAD with NO staged changes: abort
ok 6 - git checkout -p HEAD with NO staged changes: apply
ok 7 - git checkout -p HEAD with change already staged
ok 8 - git checkout -p @ with NO staged changes: abort
ok 9 - git checkout -p @ with NO staged changes: apply
ok 10 - git checkout -p @ with change already staged
ok 11 - git checkout -p HEAD^...
ok 12 - git checkout -p HEAD^
ok 13 - git checkout -p handles deletion
ok 14 - path limiting works: dir
ok 15 - path limiting works: -- dir
ok 16 - path limiting works: HEAD^ -- dir
ok 17 - path limiting works: foo inside dir
ok 18 - none of this moved HEAD
ok 19 - empty tree can be handled
# passed all 19 test(s)
1..19
*** t2017-checkout-orphan.sh ***
ok 1 - Setup
ok 2 - --orphan creates a new orphan branch from HEAD
ok 3 - --orphan creates a new orphan branch from <start_point>
ok 4 - --orphan must be rejected with -b
ok 5 - --orphan must be rejected with -t
ok 6 - --orphan ignores branch.autosetupmerge
ok 7 - --orphan makes reflog by default
ok 8 - --orphan does not make reflog when core.logAllRefUpdates = false
ok 9 - --orphan with -l makes reflog when core.logAllRefUpdates = false
ok 10 - giving up --orphan not committed when -l and core.logAllRefUpdates = false deletes reflog
ok 11 - --orphan is rejected with an existing name
ok 12 - --orphan refuses to switch if a merge is needed
ok 13 - cannot --detach on an unborn branch
# passed all 13 test(s)
1..13
*** t2018-checkout-branch.sh ***
ok 1 - setup
ok 2 - checkout a branch without refs/heads/* prefix
ok 3 - checkout -b to a new branch, set to HEAD
ok 4 - checkout -b to a merge base
ok 5 - checkout -b to a new branch, set to an explicit ref
ok 6 - checkout -b to a new branch with unmergeable changes fails
ok 7 - checkout -f -b to a new branch with unmergeable changes discards changes
ok 8 - checkout -b to a new branch preserves mergeable changes
ok 9 - checkout -f -b to a new branch with mergeable changes discards changes
ok 10 - checkout -b to an existing branch fails
ok 11 - checkout -b to @{-1} fails with the right branch name
ok 12 - checkout -B to an existing branch resets branch to HEAD
ok 13 - checkout -B to a merge base
ok 14 - checkout -B to an existing branch from detached HEAD resets branch to HEAD
ok 15 - checkout -B to an existing branch with an explicit ref resets branch to that ref
ok 16 - checkout -B to an existing branch with unmergeable changes fails
ok 17 - checkout -f -B to an existing branch with unmergeable changes discards changes
ok 18 - checkout -B to an existing branch preserves mergeable changes
ok 19 - checkout -f -B to an existing branch with mergeable changes discards changes
ok 20 - checkout -b <describe>
ok 21 - checkout -B to the current branch works
ok 22 - checkout -b after clone --no-checkout does a checkout of HEAD
ok 23 - checkout -b to a new branch preserves mergeable changes despite sparse-checkout
ok 24 - checkout -b rejects an invalid start point
ok 25 - checkout -b rejects an extra path argument
# passed all 25 test(s)
1..25
*** t2019-checkout-ambiguous-ref.sh ***
ok 1 - setup ambiguous refs
ok 2 - checkout ambiguous ref succeeds
ok 3 - checkout produces ambiguity warning
ok 4 - checkout chooses branch over tag
ok 5 - checkout reports switch to branch
ok 6 - checkout vague ref succeeds
ok 7 - checkout produces ambiguity warning
ok 8 - checkout chooses branch over tag
ok 9 - checkout reports switch to branch
# passed all 9 test(s)
1..9
*** t2020-checkout-detach.sh ***
ok 1 - setup
ok 2 - checkout branch does not detach
ok 3 - checkout HEAD no-op/don't detach
ok 4 - checkout @ no-op/don't detach
ok 5 - checkout tag detaches
ok 6 - checkout branch by full name detaches
ok 7 - checkout non-ref detaches
ok 8 - checkout ref^0 detaches
ok 9 - checkout --detach detaches
ok 10 - checkout --detach without branch name
ok 11 - checkout --detach errors out for non-commit
ok 12 - checkout --detach errors out for extra argument
ok 13 - checkout --detached and -b are incompatible
ok 14 - checkout --detach moves HEAD
ok 15 - checkout warns on orphan commits
ok 16 - checkout warns on orphan commits: output
ok 17 - checkout warns orphaning 1 of 2 commits
ok 18 - checkout warns orphaning 1 of 2 commits: output
ok 19 - checkout does not warn leaving ref tip
ok 20 - checkout does not warn leaving ref tip
ok 21 - checkout does not warn leaving reachable commit
ok 22 - checkout does not warn leaving reachable commit
ok 23 - tracking count is accurate after orphan check
ok 24 - no advice given for explicit detached head state
ok 25 - describe_detached_head prints no SHA-1 ellipsis when not asked to
ok 26 - describe_detached_head does print SHA-1 ellipsis when asked to
# passed all 26 test(s)
1..26
*** t2021-checkout-overwrite.sh ***
ok 1 - setup
ok 2 - create a commit where dir a/b changed to file
ok 3 - checkout commit with dir must not remove untracked a/b
ok 4 - create a commit where dir a/b changed to symlink
ok 5 - checkout commit with dir must not remove untracked a/b
ok 6 - the symlink remained
ok 7 - cleanup after previous symlink tests
ok 8 - checkout -f must not follow symlinks when removing entries
ok 9 - checkout --overwrite-ignore should succeed if only ignored files in the way
# passed all 9 test(s)
1..9
*** t2022-checkout-paths.sh ***
ok 1 - setup
ok 2 - checking out paths out of a tree does not clobber unrelated paths
ok 3 - do not touch unmerged entries matching $path but not in $tree
ok 4 - do not touch files that are already up-to-date
ok 5 - checkout HEAD adds deleted intent-to-add file back to index
# passed all 5 test(s)
1..5
*** t2023-checkout-m.sh ***
ok 1 - setup
ok 2 - git merge main
ok 3 - -m restores 2-way conflicted+resolved file
ok 4 - -m restores 3-way conflicted+resolved file
ok 5 - force checkout a conflict file creates stage zero entry
# passed all 5 test(s)
1..5
*** t2024-checkout-dwim.sh ***
ok 1 - setup
ok 2 - checkout of non-existing branch fails
ok 3 - checkout of branch from multiple remotes fails #1
ok 4 - when arg matches multiple remotes, do not fallback to interpreting as pathspec
ok 5 - checkout of branch from multiple remotes fails with advice
ok 6 - checkout -p with multiple remotes does not print advice
ok 7 - checkout of branch from multiple remotes succeeds with checkout.defaultRemote #1
ok 8 - checkout of branch from a single remote succeeds #1
ok 9 - checkout of branch from a single remote succeeds #2
ok 10 - --no-guess suppresses branch auto-vivification
ok 11 - checkout.guess = false suppresses branch auto-vivification
ok 12 - setup more remotes with unconventional refspecs
ok 13 - checkout of branch from multiple remotes fails #2
ok 14 - checkout of branch from multiple remotes fails #3
ok 15 - checkout of branch from a single remote succeeds #3
ok 16 - checkout of branch from a single remote succeeds #4
ok 17 - checkout of branch with a file having the same name fails
ok 18 - checkout of branch with a file in subdir having the same name fails
ok 19 - checkout <branch> -- succeeds, even if a file with the same name exists
ok 20 - loosely defined local base branch is reported correctly
ok 21 - reject when arg could be part of dwim branch
ok 22 - disambiguate dwim branch and checkout path (1)
ok 23 - disambiguate dwim branch and checkout path (2)
# passed all 23 test(s)
1..23
*** t2025-checkout-no-overlay.sh ***
ok 1 - setup
ok 2 - checkout --no-overlay deletes files not in <tree-ish>
ok 3 - checkout --no-overlay removing last file from directory
ok 4 - checkout -p --overlay is disallowed
ok 5 - --no-overlay --theirs with D/F conflict deletes file
ok 6 - wildcard pathspec matches file in subdirectory
# passed all 6 test(s)
1..6
*** t2026-checkout-pathspec-file.sh ***
ok 1 - setup
ok 2 - --pathspec-from-file from stdin
ok 3 - --pathspec-from-file from file
ok 4 - NUL delimiters
ok 5 - LF delimiters
ok 6 - no trailing delimiter
ok 7 - CRLF delimiters
ok 8 - quotes
ok 9 - quotes not compatible with --pathspec-file-nul
ok 10 - only touches what was listed
ok 11 - error conditions
# passed all 11 test(s)
1..11
*** t2027-checkout-track.sh ***
ok 1 - setup
ok 2 - checkout --track -b creates a new tracking branch
ok 3 - checkout --track -b rejects an extra path argument
ok 4 - checkout --track -b overrides autoSetupMerge=inherit
# passed all 4 test(s)
1..4
*** t2030-unresolve-info.sh ***
ok 1 - setup
ok 2 - add records switch clears
ok 3 - rm records reset clears
ok 4 - plumbing clears
ok 5 - add records checkout -m undoes
ok 6 - unmerge with plumbing
ok 7 - unmerge can be done even after committing
ok 8 - unmerge removal
ok 9 - unmerge removal after committing
ok 10 - rerere and rerere forget
ok 11 - rerere and rerere forget (subdirectory)
ok 12 - rerere forget (binary)
ok 13 - rerere forget (add-add conflict)
ok 14 - resolve-undo keeps blobs from gc
# passed all 14 test(s)
1..14
*** t2050-git-dir-relative.sh ***
ok 1 - Setting up post-commit hook
ok 2 - post-commit hook used ordinarily
ok 3 - post-commit-hook created and used from top dir
ok 4 - post-commit-hook from sub dir
# passed all 4 test(s)
1..4
*** t2060-switch.sh ***
ok 1 - setup
ok 2 - switch branch no arguments
ok 3 - switch branch
ok 4 - switch and detach
ok 5 - suggestion to detach
ok 6 - suggestion to detach is suppressed with advice.suggestDetachingHead=false
ok 7 - switch and detach current branch
ok 8 - switch and create branch
ok 9 - force create branch from HEAD
ok 10 - new orphan branch from empty
ok 11 - orphan branch works with --discard-changes
ok 12 - switching ignores file of same branch name
ok 13 - guess and create branch
ok 14 - not switching when something is in progress
ok 15 - tracking info copied with autoSetupMerge=inherit
ok 16 - switch back when temporarily detached and checked out elsewhere 
# passed all 16 test(s)
1..16
*** t2070-restore.sh ***
ok 1 - setup
ok 2 - restore without pathspec is not ok
ok 3 - restore a file, ignoring branch of same name
ok 4 - restore a file on worktree from another ref
ok 5 - restore a file in the index from another ref
ok 6 - restore a file in both the index and worktree from another ref
ok 7 - restore --staged uses HEAD as source
ok 8 - restore --worktree --staged uses HEAD as source
ok 9 - restore --ignore-unmerged ignores unmerged entries
ok 10 - restore --staged adds deleted intent-to-add file back to index
ok 11 - restore --staged invalidates cache tree for deletions
ok 12 - restore --merge to unresolve
ok 13 - restore --merge to unresolve after (mistaken) resolution
ok 14 - restore --merge to unresolve after (mistaken) resolution
ok 15 - restore with merge options are incompatible with certain options
# passed all 15 test(s)
1..15
*** t2071-restore-patch.sh ***
ok 1 - setup
ok 2 - restore -p without pathspec is fine
ok 3 - saying "n" does nothing
ok 4 - git restore -p
ok 5 - git restore -p with staged changes
ok 6 - git restore -p --source=HEAD
ok 7 - git restore -p --source=@
ok 8 - git restore -p --source=HEAD^
ok 9 - git restore -p --source=HEAD^...
ok 10 - git restore -p handles deletion
ok 11 - path limiting works: dir
ok 12 - path limiting works: -- dir
ok 13 - path limiting works: HEAD^ -- dir
ok 14 - path limiting works: foo inside dir
ok 15 - none of this moved HEAD
# passed all 15 test(s)
1..15
*** t2072-restore-pathspec-file.sh ***
ok 1 - setup
ok 2 - --pathspec-from-file from stdin
ok 3 - --pathspec-from-file from file
ok 4 - NUL delimiters
ok 5 - LF delimiters
ok 6 - no trailing delimiter
ok 7 - CRLF delimiters
ok 8 - quotes
ok 9 - quotes not compatible with --pathspec-file-nul
ok 10 - only touches what was listed
ok 11 - error conditions
ok 12 - wildcard pathspec matches file in subdirectory
# passed all 12 test(s)
1..12
*** t2080-parallel-checkout-basics.sh ***
ok 1 - setup repo for checkout with various types of changes
ok 2 - sequential checkout
ok 3 - parallel checkout
ok 4 - sequential-fallback checkout
ok 5 - parallel checkout on clone
ok 6 - sequential-fallback checkout on clone
ok 7 - compare the working trees
ok 8 - submodules can use parallel checkout
ok 9 - parallel checkout respects --[no]-force
ok 10 - parallel checkout checks for symlinks in leading dirs
ok 11 - "git checkout ." report should not include failed entries
# passed all 11 test(s)
1..11
*** t2081-parallel-checkout-collisions.sh ***
ok 1 # skip setup (missing CASE_INSENSITIVE_FS)
ok 2 # skip worker detects basename collision (missing CASE_INSENSITIVE_FS)
ok 3 # skip worker detects dirname collision (missing CASE_INSENSITIVE_FS)
ok 4 # skip do not follow symlinks colliding with leading dir (missing CASE_INSENSITIVE_FS of SYMLINKS,CASE_INSENSITIVE_FS)
ok 5 # skip collision report on clone (w/ racy file creation) (missing CASE_INSENSITIVE_FS)
ok 6 # skip collision report on clone (w/ colliding peer after the detected entry) (missing CASE_INSENSITIVE_FS of CASE_INSENSITIVE_FS,!MINGW,!CYGWIN)
# passed all 6 test(s)
1..6
*** t2082-parallel-checkout-attributes.sh ***
ok 1 - parallel-checkout with ident
ok 2 - parallel-checkout with re-encoding
ok 3 - parallel-checkout with eol conversions
ok 4 - parallel-checkout and external filter
ok 5 - parallel-checkout and delayed checkout
# passed all 5 test(s)
1..5
*** t2100-update-cache-badpath.sh ***
ok 1 - git update-index --add to add various paths.
ok 2 - git update-index to add conflicting path path0/file0 should fail.
ok 3 - git update-index to add conflicting path path1/file1 should fail.
ok 4 - git update-index to add conflicting path path2 should fail.
ok 5 - git update-index to add conflicting path path3 should fail.
# passed all 5 test(s)
1..5
*** t2101-update-index-reupdate.sh ***
ok 1 - update-index --add
ok 2 - update-index --again
ok 3 - update-index --remove --again
ok 4 - first commit
ok 5 - update-index again
ok 6 - update-index --update from subdir
ok 7 - update-index --update with pathspec
# passed all 7 test(s)
1..7
*** t2102-update-index-symlinks.sh ***
ok 1 - preparation
ok 2 - modify the symbolic link
ok 3 - the index entry must still be a symbolic link
# passed all 3 test(s)
1..3
*** t2103-update-index-ignore-missing.sh ***
ok 1 - basics
ok 2 - --ignore-missing --refresh
ok 3 - --unmerged --refresh
ok 4 - --ignore-submodules --refresh (1)
ok 5 - --ignore-submodules --refresh (2)
# passed all 5 test(s)
1..5
*** t2104-update-index-skip-worktree.sh ***
ok 1 - setup
ok 2 - index is at version 2
ok 3 - update-index --skip-worktree
ok 4 - index is at version 3 after having some skip-worktree entries
ok 5 - ls-files -t
ok 6 - update-index --no-skip-worktree
ok 7 - index version is back to 2 when there is no skip-worktree entry
# passed all 7 test(s)
1..7
*** t2105-update-index-gitfile.sh ***
ok 1 - submodule with absolute .git file
ok 2 - add gitlink to absolute .git file
ok 3 - submodule with relative .git file
ok 4 - add gitlink to relative .git file
# passed all 4 test(s)
1..4
*** t2106-update-index-assume-unchanged.sh ***
ok 1 - setup
ok 2 - do not switch branches with dirty file
# passed all 2 test(s)
1..2
*** t2107-update-index-basic.sh ***
ok 1 - update-index --nonsense fails
ok 2 - update-index --nonsense dumps usage
ok 3 - update-index -h with corrupt index
ok 4 - --cacheinfo complains of missing arguments
ok 5 - --cacheinfo does not accept blob null sha1
ok 6 - --cacheinfo does not accept gitlink null sha1
ok 7 - --cacheinfo mode,sha1,path (new syntax)
ok 8 - .lock files cleaned up
ok 9 - --chmod=+x and chmod=-x in the same argument list
ok 10 - --index-version
# passed all 10 test(s)
1..10
*** t2108-update-index-refresh-racy.sh ***
ok 1 - setup
ok 2 - --refresh has no racy timestamps to fix
ok 3 - --refresh should fix racy timestamp
ok 4 - --really-refresh should fix racy timestamp
ok 5 - --refresh should fix racy timestamp if other file needs update
ok 6 - --refresh should fix racy timestamp if racy file needs update
# passed all 6 test(s)
1..6
*** t2200-add-update.sh ***
ok 1 - setup
ok 2 - update
ok 3 - update noticed a removal
ok 4 - update touched correct path
ok 5 - update did not touch other tracked files
ok 6 - update did not touch untracked files
ok 7 - error out when passing untracked path
ok 8 - cache tree has not been corrupted
ok 9 - update from a subdirectory
ok 10 - change gets noticed
ok 11 - non-qualified update in subdir updates from the root
ok 12 - replace a file with a symlink
ok 13 - add everything changed
ok 14 - touch and then add -u
ok 15 - touch and then add explicitly
ok 16 - add -n -u should not add but just report
ok 17 - add -u resolves unmerged paths
ok 18 - "add -u non-existent" should fail
ok 19 - "commit -a" implies "add -u" if index becomes empty
# passed all 19 test(s)
1..19
*** t2201-add-update-typechange.sh ***
ok 1 - setup
ok 2 - modify
ok 3 - diff-files
ok 4 - diff-index
ok 5 - add -u
ok 6 - commit -a
# passed all 6 test(s)
1..6
*** t2202-add-addremove.sh ***
ok 1 - setup
ok 2 - git add --all
ok 3 - Just "git add" is a no-op
# passed all 3 test(s)
1..3
*** t2203-add-intent.sh ***
ok 1 - intent to add
ok 2 - git status
ok 3 - git status with porcelain v2
ok 4 - check result of "add -N"
ok 5 - intent to add is just an ordinary empty blob
ok 6 - intent to add does not clobber existing paths
ok 7 - i-t-a entry is simply ignored
ok 8 - can commit with an unrelated i-t-a entry in index
ok 9 - can "commit -a" with an i-t-a entry
ok 10 - cache-tree invalidates i-t-a paths
ok 11 - cache-tree does not ignore dir that has i-t-a entries
ok 12 - cache-tree does skip dir that becomes empty
ok 13 - commit: ita entries ignored in empty initial commit check
ok 14 - commit: ita entries ignored in empty commit check
ok 15 - rename detection finds the right names
ok 16 - double rename detection in status
ok 17 - i-t-a files shown as new for "diff", "diff-files"; not-new for "diff --cached"
ok 18 - "diff HEAD" includes ita as new files
ok 19 - apply --intent-to-add
# passed all 19 test(s)
1..19
*** t2204-add-ignored.sh ***
ok 1 - setup
ok 2 - no complaints for unignored file
ok 3 - no complaints for unignored dir/file
ok 4 - no complaints for unignored dir
ok 5 - no complaints for unignored d*
ok 6 - complaints for ignored ign
ok 7 - complaints for ignored ign output
ok 8 - complaints for ignored ign with unignored file
ok 9 - complaints for ignored ign with unignored file output
ok 10 - complaints for ignored dir/ign
ok 11 - complaints for ignored dir/ign output
ok 12 - complaints for ignored dir/ign with unignored file
ok 13 - complaints for ignored dir/ign with unignored file output
ok 14 - complaints for ignored dir/sub
ok 15 - complaints for ignored dir/sub output
ok 16 - complaints for ignored dir/sub with unignored file
ok 17 - complaints for ignored dir/sub with unignored file output
ok 18 - complaints for ignored dir/sub/ign
ok 19 - complaints for ignored dir/sub/ign output
ok 20 - complaints for ignored dir/sub/ign with unignored file
ok 21 - complaints for ignored dir/sub/ign with unignored file output
ok 22 - complaints for ignored sub/file
ok 23 - complaints for ignored sub/file output
ok 24 - complaints for ignored sub/file with unignored file
ok 25 - complaints for ignored sub/file with unignored file output
ok 26 - complaints for ignored sub
ok 27 - complaints for ignored sub output
ok 28 - complaints for ignored sub with unignored file
ok 29 - complaints for ignored sub with unignored file output
ok 30 - complaints for ignored sub/file
ok 31 - complaints for ignored sub/file output
ok 32 - complaints for ignored sub/file with unignored file
ok 33 - complaints for ignored sub/file with unignored file output
ok 34 - complaints for ignored sub/ign
ok 35 - complaints for ignored sub/ign output
ok 36 - complaints for ignored sub/ign with unignored file
ok 37 - complaints for ignored sub/ign with unignored file output
ok 38 - complaints for ignored sub in dir
ok 39 - complaints for ignored sub in dir output
ok 40 - complaints for ignored sub/file in dir
ok 41 - complaints for ignored sub/file in dir output
ok 42 - complaints for ignored sub/ign in dir
ok 43 - complaints for ignored sub/ign in dir output
ok 44 - complaints for ignored ign in sub
ok 45 - complaints for ignored ign in sub output
ok 46 - complaints for ignored file in sub
ok 47 - complaints for ignored file in sub output
# passed all 47 test(s)
1..47
*** t2205-add-worktree-config.sh ***
ok 1 - 1a: setup--config worktree
ok 2 - 1b: pre-add all
ok 3 - 1c: pre-add dir all
ok 4 - 1d: post-add tracked
ok 5 - 1e: post-add untracked
ok 6 - 2a: setup--set git-dir
ok 7 - 2b: pre-add all
ok 8 - 2c: pre-add dir all
ok 9 - 2d: post-add tracked
ok 10 - 2e: post-add untracked
ok 11 - 3a: setup--add repo dir
ok 12 - 3b: ignored
ok 13 - 3c: add repo
# passed all 13 test(s)
1..13
*** t2300-cd-to-toplevel.sh ***
ok 1 - at physical root
ok 2 - at physical subdir
ok 3 - at symbolic root
ok 4 - at symbolic subdir
ok 5 - at internal symbolic subdir
# passed all 5 test(s)
1..5
*** t2400-worktree-add.sh ***
ok 1 - setup
ok 2 - "add" an existing worktree
ok 3 - "add" an existing empty worktree
ok 4 - "add" using shorthand - fails when no previous branch
ok 5 - "add" using - shorthand
ok 6 - "add" refuses to checkout locked branch
ok 7 - checking out paths not complaining about linked checkouts
ok 8 - "add" worktree
ok 9 - "add" worktree with lock
ok 10 - "add" worktree with lock and reason
ok 11 - "add" worktree with reason but no lock
ok 12 - "add" worktree from a subdir
ok 13 - "add" from a linked checkout
ok 14 - "add" worktree creating new branch
ok 15 - die the same branch is already checked out
ok 16 - refuse to reset a branch in use elsewhere
ok 17 - die the same branch is already checked out (symlink)
ok 18 - not die the same branch is already checked out
ok 19 - not die on re-checking out current branch
ok 20 - "add" from a bare repo
ok 21 - checkout from a bare repo without "add"
ok 22 - "add" default branch of a bare repo
ok 23 - "add" to bare repo with worktree config
ok 24 - checkout with grafts
ok 25 - "add" from relative HEAD
ok 26 - "add -b" with <branch> omitted
ok 27 - "add --detach" with <branch> omitted
ok 28 - "add" with <branch> omitted
ok 29 - "add" checks out existing branch of dwimd name
ok 30 - "add <path>" dwim fails with checked out branch
ok 31 - "add --force" with existing dwimd name doesnt die
ok 32 - "add" no auto-vivify with --detach and <branch> omitted
ok 33 - 'worktree add' with '-b poodle -B poodle bamboo main' has mutually exclusive options
ok 34 - 'worktree add' with '-b poodle --detach bamboo main' has mutually exclusive options
ok 35 - 'worktree add' with '-B poodle --detach bamboo main' has mutually exclusive options
ok 36 - 'worktree add' with '--orphan --detach bamboo' has mutually exclusive options
ok 37 - 'worktree add' with '--orphan --no-checkout bamboo' has mutually exclusive options
ok 38 - 'worktree add' with '--orphan bamboo main' has mutually exclusive options
ok 39 - 'worktree add' with '--orphan -b bamboo wtdir/ main' has mutually exclusive options
ok 40 - "add -B" fails if the branch is checked out
ok 41 - add -B
ok 42 - add --quiet
ok 43 - add --quiet -b
ok 44 - "add --orphan"
ok 45 - "add --orphan (no -b)"
ok 46 - "add --orphan --quiet"
ok 47 - "add --orphan" fails if the branch already exists
ok 48 - "add --orphan" with empty repository
ok 49 - "add" worktree with orphan branch and lock
ok 50 - "add" worktree with orphan branch, lock, and reason
ok 51 - 'worktree add' show orphan hint in bad/orphan HEAD w/ no opts
ok 52 - 'worktree add' show orphan hint in bad/orphan HEAD w/ -b
ok 53 - 'worktree add' show orphan hint in bad/orphan HEAD w/ -B
ok 54 - 'worktree add' doesn't show orphan hint in bad/orphan HEAD w/ --quiet
ok 55 - local clone from linked checkout
ok 56 - local clone --shared from linked checkout
ok 57 - "add" worktree with --no-checkout
ok 58 - "add" worktree with --checkout
ok 59 - put a worktree under rebase
ok 60 - add a worktree, checking out a rebased branch
ok 61 - checking out a rebased branch from another worktree
ok 62 - not allow to delete a branch under rebase
ok 63 - rename a branch under rebase not allowed
ok 64 - check out from current worktree branch ok
ok 65 - checkout a branch under bisect
ok 66 - rename a branch under bisect not allowed
ok 67 - --track sets up tracking
ok 68 - "add" <path> <remote/branch> w/ no HEAD
ok 69 - --no-track avoids setting up tracking
ok 70 - "add" <path> <non-existent-branch> fails
ok 71 - "add" <path> <branch> dwims
ok 72 - "add" <path> <branch> dwims with checkout.defaultRemote
ok 73 - git worktree add does not match remote
ok 74 - git worktree add --guess-remote sets up tracking
ok 75 - git worktree add --guess-remote sets up tracking (quiet)
ok 76 - git worktree --no-guess-remote (quiet)
ok 77 - git worktree add with worktree.guessRemote sets up tracking
ok 78 - git worktree --no-guess-remote option overrides config
ok 79 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch
ok 80 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch, >=1 local branches, valid HEAD
ok 81 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 82 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 83 - "add" error need fetch w/ DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 84 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 85 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 86 - "add" DWIM infer --orphan w/ empty repo, no --quiet (expect output), 'cd repo && git', --branch
ok 87 - "add" DWIM doesnt infer --orphan w/ no --quiet (expect output), 'cd repo && git', --branch, >=1 local branches, valid HEAD
ok 88 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd repo && git', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 89 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd repo && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 90 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd repo && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 91 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd repo && git', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 92 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd repo && git', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 93 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'cd repo && git', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 94 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'cd repo && git', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 95 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch
ok 96 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch, >=1 local branches, valid HEAD
ok 97 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 98 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 99 - "add" error need fetch w/ DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 100 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 101 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 102 - "add" DWIM infer --orphan w/ empty repo, no --quiet (expect output), 'cd wt && git', --branch
ok 103 - "add" DWIM doesnt infer --orphan w/ no --quiet (expect output), 'cd wt && git', --branch, >=1 local branches, valid HEAD
ok 104 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd wt && git', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 105 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd wt && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 106 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd wt && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 107 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'cd wt && git', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 108 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), no --quiet (expect output), 'cd wt && git', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 109 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'cd wt && git', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 110 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'cd wt && git', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 111 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch
ok 112 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch, >=1 local branches, valid HEAD
ok 113 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 114 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 115 - "add" error need fetch w/ DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 116 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 117 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 118 - "add" DWIM infer --orphan w/ empty repo, no --quiet (expect output), 'git -C repo', --branch
ok 119 - "add" DWIM doesnt infer --orphan w/ no --quiet (expect output), 'git -C repo', --branch, >=1 local branches, valid HEAD
ok 120 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C repo', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 121 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C repo', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 122 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C repo', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 123 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C repo', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 124 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C repo', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 125 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'git -C repo', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 126 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'git -C repo', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 127 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch
ok 128 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch, >=1 local branches, valid HEAD
ok 129 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 130 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 131 - "add" error need fetch w/ DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 132 - "add" DWIM infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 133 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 134 - "add" DWIM infer --orphan w/ empty repo, no --quiet (expect output), 'git -C wt', --branch
ok 135 - "add" DWIM doesnt infer --orphan w/ no --quiet (expect output), 'git -C wt', --branch, >=1 local branches, valid HEAD
ok 136 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C wt', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 137 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C wt', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 138 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C wt', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 139 - "add" DWIM infer --orphan w/ no --quiet (expect output), 'git -C wt', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 140 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), no --quiet (expect output), 'git -C wt', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 141 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'git -C wt', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 142 - "add" error, warn on bad HEAD, hint use orphan w/ no --quiet (expect output), 'git -C wt', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 143 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, DWIM (no --branch), no --quiet (expect output), no --branch, --no-checkout
ok 144 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, DWIM (no --branch), no --quiet (expect output), no --branch, --track
ok 145 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, no --quiet (expect output), --branch, --no-checkout
ok 146 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, no --quiet (expect output), --branch, --track
ok 147 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), --quiet, 'cd repo && git', no --branch
ok 148 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'cd repo && git', no --branch, >=1 local branches, valid HEAD
ok 149 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'cd repo && git', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 150 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'cd repo && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 151 - "add" error need fetch w/ DWIM (no --branch), --quiet, 'cd repo && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 152 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'cd repo && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 153 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'cd repo && git', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 154 - "add" DWIM infer --orphan w/ empty repo, --quiet, 'cd repo && git', --branch
ok 155 - "add" DWIM doesnt infer --orphan w/ --quiet, 'cd repo && git', --branch, >=1 local branches, valid HEAD
ok 156 - "add" DWIM infer --orphan w/ --quiet, 'cd repo && git', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 157 - "add" DWIM infer --orphan w/ --quiet, 'cd repo && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 158 - "add" DWIM infer --orphan w/ --quiet, 'cd repo && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 159 - "add" DWIM infer --orphan w/ --quiet, 'cd repo && git', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 160 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), --quiet, 'cd repo && git', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 161 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'cd repo && git', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 162 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'cd repo && git', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 163 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), --quiet, 'cd wt && git', no --branch
ok 164 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'cd wt && git', no --branch, >=1 local branches, valid HEAD
ok 165 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'cd wt && git', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 166 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'cd wt && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 167 - "add" error need fetch w/ DWIM (no --branch), --quiet, 'cd wt && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 168 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'cd wt && git', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 169 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'cd wt && git', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 170 - "add" DWIM infer --orphan w/ empty repo, --quiet, 'cd wt && git', --branch
ok 171 - "add" DWIM doesnt infer --orphan w/ --quiet, 'cd wt && git', --branch, >=1 local branches, valid HEAD
ok 172 - "add" DWIM infer --orphan w/ --quiet, 'cd wt && git', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 173 - "add" DWIM infer --orphan w/ --quiet, 'cd wt && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 174 - "add" DWIM infer --orphan w/ --quiet, 'cd wt && git', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 175 - "add" DWIM infer --orphan w/ --quiet, 'cd wt && git', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 176 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), --quiet, 'cd wt && git', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 177 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'cd wt && git', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 178 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'cd wt && git', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 179 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), --quiet, 'git -C repo', no --branch
ok 180 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'git -C repo', no --branch, >=1 local branches, valid HEAD
ok 181 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'git -C repo', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 182 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'git -C repo', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 183 - "add" error need fetch w/ DWIM (no --branch), --quiet, 'git -C repo', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 184 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'git -C repo', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 185 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'git -C repo', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 186 - "add" DWIM infer --orphan w/ empty repo, --quiet, 'git -C repo', --branch
ok 187 - "add" DWIM doesnt infer --orphan w/ --quiet, 'git -C repo', --branch, >=1 local branches, valid HEAD
ok 188 - "add" DWIM infer --orphan w/ --quiet, 'git -C repo', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 189 - "add" DWIM infer --orphan w/ --quiet, 'git -C repo', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 190 - "add" DWIM infer --orphan w/ --quiet, 'git -C repo', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 191 - "add" DWIM infer --orphan w/ --quiet, 'git -C repo', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 192 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), --quiet, 'git -C repo', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 193 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'git -C repo', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 194 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'git -C repo', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 195 - "add" DWIM infer --orphan w/ empty repo, DWIM (no --branch), --quiet, 'git -C wt', no --branch
ok 196 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'git -C wt', no --branch, >=1 local branches, valid HEAD
ok 197 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'git -C wt', no --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 198 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'git -C wt', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 199 - "add" error need fetch w/ DWIM (no --branch), --quiet, 'git -C wt', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 200 - "add" DWIM infer --orphan w/ DWIM (no --branch), --quiet, 'git -C wt', no --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote, --force
ok 201 - "add" DWIM doesnt infer --orphan w/ DWIM (no --branch), --quiet, 'git -C wt', no --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 202 - "add" DWIM infer --orphan w/ empty repo, --quiet, 'git -C wt', --branch
ok 203 - "add" DWIM doesnt infer --orphan w/ --quiet, 'git -C wt', --branch, >=1 local branches, valid HEAD
ok 204 - "add" DWIM infer --orphan w/ --quiet, 'git -C wt', --branch, 0 local branches, 0 remotes, 0 fetched remote branches, --no-guess-remote
ok 205 - "add" DWIM infer --orphan w/ --quiet, 'git -C wt', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --no-guess-remote
ok 206 - "add" DWIM infer --orphan w/ --quiet, 'git -C wt', --branch, 0 local branches, >=1 remotes, 0 fetched remote branches, --guess-remote
ok 207 - "add" DWIM infer --orphan w/ --quiet, 'git -C wt', --branch, 0 local branches, >=1 remotes, >=1 fetched remote branches, --guess-remote
ok 208 - "add" error, warn on bad HEAD, hint use orphan w/ DWIM (no --branch), --quiet, 'git -C wt', no --branch, >=1 local branches, invalid (or orphan) HEAD
ok 209 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'git -C wt', --branch, >=1 local branches, invalid (or orphan) HEAD
ok 210 - "add" error, warn on bad HEAD, hint use orphan w/ --quiet, 'git -C wt', --detach, >=1 local branches, invalid (or orphan) HEAD
ok 211 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, DWIM (no --branch), --quiet, no --branch, --no-checkout
ok 212 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, DWIM (no --branch), --quiet, no --branch, --track
ok 213 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, --quiet, --branch, --no-checkout
ok 214 - "add" error inferred "--orphan" gives illegal opts combo w/ empty repo, --quiet, --branch, --track
ok 215 - "add" invokes post-checkout hook (branch)
ok 216 - "add" invokes post-checkout hook (detached)
ok 217 - "add --no-checkout" suppresses post-checkout hook
ok 218 - "add" in other worktree invokes post-checkout hook
ok 219 - "add" in bare repo invokes post-checkout hook
ok 220 - "add" an existing but missing worktree
ok 221 - "add" an existing locked but missing worktree
ok 222 - "add" not tripped up by magic worktree matching"
ok 223 - sanitize generated worktree name
ok 224 - "add" should not fail because of another bad worktree
ok 225 - "add" with uninitialized submodule, with submodule.recurse unset
ok 226 - "add" with uninitialized submodule, with submodule.recurse set
ok 227 - "add" with initialized submodule, with submodule.recurse unset
ok 228 - "add" with initialized submodule, with submodule.recurse set
# passed all 228 test(s)
1..228
*** t2401-worktree-prune.sh ***
ok 1 - initialize
ok 2 - worktree prune on normal repo
ok 3 - prune files inside $GIT_DIR/worktrees
ok 4 - prune directories without gitdir
ok 5 - prune directories with unreadable gitdir
ok 6 - prune directories with invalid gitdir
ok 7 - prune directories with gitdir pointing to nowhere
ok 8 - not prune locked checkout
ok 9 - not prune recent checkouts
ok 10 - not prune proper checkouts
ok 11 - prune duplicate (linked/linked)
ok 12 - prune duplicate (main/linked)
# passed all 12 test(s)
1..12
*** t2402-worktree-list.sh ***
ok 1 - setup
ok 2 - rev-parse --git-common-dir on main worktree
ok 3 - rev-parse --git-path objects linked worktree
ok 4 - "list" all worktrees from main
ok 5 - "list" all worktrees from linked
ok 6 - "list" all worktrees --porcelain
ok 7 - "list" all worktrees --porcelain -z
ok 8 - "list" -z fails without --porcelain
ok 9 - "list" all worktrees with locked annotation
ok 10 - "list" all worktrees --porcelain with locked
ok 11 - "list" all worktrees --porcelain with locked reason newline escaped
ok 12 - "list" all worktrees with prunable annotation
ok 13 - "list" all worktrees --porcelain with prunable
ok 14 - "list" all worktrees with prunable consistent with "prune"
ok 15 - "list" --verbose and --porcelain mutually exclusive
ok 16 - "list" all worktrees --verbose with locked
ok 17 - "list" all worktrees --verbose with prunable
ok 18 - bare repo setup
ok 19 - "list" all worktrees from bare main
ok 20 - "list" all worktrees --porcelain from bare main
ok 21 - "list" all worktrees from linked with a bare main
ok 22 - bare repo cleanup
ok 23 - broken main worktree still at the top
ok 24 - linked worktrees are sorted
ok 25 - worktree path when called in .git directory
# passed all 25 test(s)
1..25
*** t2403-worktree-move.sh ***
ok 1 - setup
ok 2 - lock main worktree
ok 3 - lock linked worktree
ok 4 - lock linked worktree from another worktree
ok 5 - lock worktree twice
ok 6 - lock worktree twice (from the locked worktree)
ok 7 - unlock main worktree
ok 8 - unlock linked worktree
ok 9 - unlock worktree twice
ok 10 - move non-worktree
ok 11 - move locked worktree
ok 12 - move worktree
ok 13 - move main worktree
ok 14 - move worktree to another dir
ok 15 - move locked worktree (force)
ok 16 - refuse to move worktree atop existing path
ok 17 - move atop existing but missing worktree
ok 18 - move a repo with uninitialized submodule
ok 19 - not move a repo with initialized submodule
ok 20 - remove main worktree
ok 21 - remove locked worktree
ok 22 - remove worktree with dirty tracked file
ok 23 - remove worktree with untracked file
ok 24 - force remove worktree with untracked file
ok 25 - remove missing worktree
ok 26 - NOT remove missing-but-locked worktree
ok 27 - proper error when worktree not found
ok 28 - remove locked worktree (force)
ok 29 - remove cleans up .git/worktrees when empty
ok 30 - remove a repo with uninitialized submodule
ok 31 - not remove a repo with initialized submodule
# passed all 31 test(s)
1..31
*** t2404-worktree-config.sh ***
ok 1 - setup
ok 2 - config --worktree in single worktree
ok 3 - add worktrees
ok 4 - config --worktree without extension
ok 5 - enable worktreeConfig extension
ok 6 - config is shared as before
ok 7 - config is shared (set from another worktree)
ok 8 - config private to main worktree
ok 9 - config private to linked worktree
ok 10 - core.bare no longer for main only
ok 11 - per-worktree core.bare is picked up
ok 12 - config.worktree no longer read without extension
# passed all 12 test(s)
1..12
*** t2405-worktree-submodule.sh ***
ok 1 - setup: create origin repos
ok 2 - setup: clone superproject to create main worktree
ok 3 - add superproject worktree
not ok 4 - submodule is checked out just after worktree add # TODO known breakage
ok 5 - add superproject worktree and initialize submodules
ok 6 - submodule is checked out just after submodule update in linked worktree
ok 7 - add superproject worktree and manually add submodule worktree
ok 8 - submodule is checked out after manually adding submodule worktree
ok 9 - checkout --recurse-submodules uses $GIT_DIR for submodules in a linked worktree
ok 10 - core.worktree is removed in $GIT_DIR/modules/<name>/config, not in $GIT_COMMON_DIR/modules/<name>/config
ok 11 - unsetting core.worktree does not prevent running commands directly against the submodule repository
# still have 1 known breakage(s)
# passed all remaining 10 test(s)
1..11
*** t2406-worktree-repair.sh ***
ok 1 - setup
ok 2 - skip missing worktree
ok 3 - worktree path not directory
ok 4 - don't clobber .git repo
ok 5 - repair missing .git file
ok 6 - repair bogus .git file
ok 7 - repair incorrect .git file
ok 8 - repair .git file from main/.git
ok 9 - repair .git file from linked worktree
ok 10 - repair .git file from bare.git
ok 11 - invalid worktree path
ok 12 - repo not found; .git not file
ok 13 - repo not found; .git not referencing repo
ok 14 - repo not found; .git file broken
ok 15 - repair broken gitdir
ok 16 - repair incorrect gitdir
ok 17 - repair gitdir (implicit) from linked worktree
ok 18 - unable to repair gitdir (implicit) from main worktree
ok 19 - repair multiple gitdir files
ok 20 - repair moved main and linked worktrees
# passed all 20 test(s)
1..20
*** t2407-worktree-heads.sh ***
ok 1 - setup
ok 2 - refuse to overwrite: checked out in worktree
ok 3 - refuse to overwrite: worktree in bisect
ok 4 - refuse to overwrite: worktree in rebase (apply)
ok 5 - refuse to overwrite: worktree in rebase (merge)
ok 6 - refuse to overwrite: worktree in rebase with --update-refs
ok 7 - refuse to fetch over ref: checked out
ok 8 - refuse to fetch over ref: worktree in bisect
ok 9 - refuse to fetch over ref: worktree in rebase
ok 10 - refuse to overwrite when in error states
ok 11 - refuse to overwrite during rebase with --update-refs
ok 12 - $EDITOR and friends are unchanged
# passed all 12 test(s)
1..12
*** t2500-untracked-overwriting.sh ***
ok 1 - reset --hard will nuke untracked files/dirs
ok 2 - reset --merge will preserve untracked files/dirs
ok 3 - reset --keep will preserve untracked files/dirs
ok 4 - checkout -m does not nuke untracked file
ok 5 - git rebase --abort and untracked files
ok 6 - git rebase fast forwarding and untracked files
not ok 7 - git rebase --autostash and untracked files # TODO known breakage
not ok 8 - git stash and untracked files # TODO known breakage
ok 9 - git am --abort and untracked dir vs. unmerged file
ok 10 - git am --skip and untracked dir vs deleted file
# still have 2 known breakage(s)
# passed all remaining 8 test(s)
1..10
*** t2501-cwd-empty.sh ***
ok 1 - setup
ok 2 - checkout does not clean cwd incidentally
ok 3 - checkout fails if cwd needs to be removed
ok 4 - reset --hard does not clean cwd incidentally
ok 5 - reset --hard fails if cwd needs to be removed
ok 6 - merge does not clean cwd incidentally
ok 7 - merge fails if cwd needs to be removed; recursive friendly
ok 8 - merge fails if cwd needs to be removed
ok 9 - cherry-pick does not clean cwd incidentally
ok 10 - cherry-pick fails if cwd needs to be removed
ok 11 - rebase does not clean cwd incidentally
ok 12 - rebase fails if cwd needs to be removed
ok 13 - revert does not clean cwd incidentally
ok 14 - revert fails if cwd needs to be removed
ok 15 - rm does not clean cwd incidentally
ok 16 - apply does not remove cwd incidentally
ok 17 - clean does not remove cwd incidentally
ok 18 - stash does not remove cwd incidentally
ok 19 - `rm -rf dir` only removes a subset of dir
ok 20 - `rm -rf dir` even with only tracked files will remove something else
ok 21 - git version continues working from a deleted dir
ok 22 - rm -r with -C leaves submodule if cwd inside
ok 23 - rm -r leaves submodule if cwd inside
ok 24 - rm -rf removes submodule even if cwd inside
# passed all 24 test(s)
1..24
*** t3000-ls-files-others.sh ***
ok 1 - setup 
ok 2 - setup: expected output
ok 3 - ls-files --others
ok 4 - ls-files --others --directory
ok 5 - --no-empty-directory hides empty directory
ok 6 - ls-files --others handles non-submodule .git
ok 7 - ls-files --others with symlinked submodule
ok 8 - setup nested pathspec search
ok 9 - ls-files -o --directory with single deep dir pathspec
ok 10 - ls-files -o --directory with multiple dir pathspecs
ok 11 - ls-files -o --directory with mix dir/file pathspecs
ok 12 - ls-files -o --directory with glob filetype match
ok 13 - ls-files -o --directory with mix of tracked states
ok 14 - ls-files -o --directory with glob filetype match only
ok 15 - ls-files -o --directory to get immediate paths under one dir only
ok 16 - ls-files -o avoids listing untracked non-matching gitdir
# passed all 16 test(s)
1..16
*** t3001-ls-files-others-exclude.sh ***
ok 1 - git ls-files --others with various exclude options.
ok 2 - git ls-files --others with \r\n line endings.
ok 3 - setup skip-worktree gitignore
ok 4 - git ls-files --others with various exclude options.
ok 5 - restore gitignore
ok 6 - git status honors core.excludesfile
ok 7 - trailing slash in exclude allows directory match(1)
ok 8 - trailing slash in exclude allows directory match (2)
ok 9 - trailing slash in exclude forces directory match (1)
ok 10 - trailing slash in exclude forces directory match (2)
ok 11 - negated exclude matches can override previous ones
ok 12 - excluded directory overrides content patterns
ok 13 - negated directory doesn't affect content patterns
ok 14 - subdirectory ignore (setup)
ok 15 - subdirectory ignore (toplevel)
ok 16 - subdirectory ignore (l1/l2)
ok 17 - subdirectory ignore (l1)
ok 18 - show/hide empty ignored directory (setup)
ok 19 - show empty ignored directory with --directory
ok 20 - hide empty ignored directory with --no-empty-directory
ok 21 - show/hide empty ignored sub-directory (setup)
ok 22 - show empty ignored sub-directory with --directory
ok 23 - hide empty ignored sub-directory with --no-empty-directory
ok 24 - pattern matches prefix completely
ok 25 - ls-files with "**" patterns
ok 26 - ls-files with "**" patterns and --directory
ok 27 - ls-files with "**" patterns and no slashes
# passed all 27 test(s)
1..27
*** t3002-ls-files-dashpath.sh ***
ok 1 - setup
ok 2 - git ls-files without path restriction.
ok 3 - git ls-files with path restriction.
ok 4 - git ls-files with path restriction with --.
ok 5 - git ls-files with path restriction with -- --.
ok 6 - git ls-files with no path restriction.
# passed all 6 test(s)
1..6
*** t3003-ls-files-exclude.sh ***
ok 1 - create repo with file
ok 2 - ls-files output contains file (cached)
ok 3 - ls-files output contains file (modified)
ok 4 - add file to gitignore
ok 5 - ls-files output contains file (cached)
ok 6 - ls-files output contains file (modified)
ok 7 - ls-files -i -c lists only tracked-but-ignored files
# passed all 7 test(s)
1..7
*** t3004-ls-files-basic.sh ***
ok 1 - ls-files in empty repository
ok 2 - ls-files with nonexistent path
ok 3 - ls-files with nonsense option
ok 4 - ls-files -h in corrupt repository
ok 5 - ls-files with absolute paths to symlinks
# passed all 5 test(s)
1..5
*** t3005-ls-files-relative.sh ***
ok 1 - prepare
ok 2 - ls-files with mixed levels
ok 3 - ls-files -c
ok 4 - ls-files -o
# passed all 4 test(s)
1..4
*** t3006-ls-files-long.sh ***
ok 1 - setup
ok 2 - overly-long path by itself is not a problem
ok 3 - overly-long path does not replace another by mistake
# passed all 3 test(s)
1..3
*** t3007-ls-files-recurse-submodules.sh ***
ok 1 - setup directory structure and submodules
ok 2 - ls-files correctly outputs files in submodule
ok 3 - --stage
ok 4 - ls-files correctly outputs files in submodule with -z
ok 5 - ls-files does not output files not added to a repo
ok 6 - ls-files recurses more than 1 level
ok 7 - ls-files works with GIT_DIR
ok 8 - --recurse-submodules and pathspecs setup
ok 9 - inactive submodule
ok 10 - --recurse-submodules and pathspecs
ok 11 - --recurse-submodules and pathspecs
ok 12 - --recurse-submodules and pathspecs
ok 13 - --recurse-submodules and pathspecs
ok 14 - --recurse-submodules and pathspecs
ok 15 - --recurse-submodules and relative paths
ok 16 - --recurse-submodules does not support --error-unmatch
ok 17 - --recurse-submodules parses submodule repo config
ok 18 - --recurse-submodules parses submodule worktree config
ok 19 - --recurse-submodules submodules ignore super project worktreeConfig extension
ok 20 - --recurse-submodules and --deleted are incompatible
ok 21 - --recurse-submodules and --modified are incompatible
ok 22 - --recurse-submodules and --others are incompatible
ok 23 - --recurse-submodules and --killed are incompatible
ok 24 - --recurse-submodules and --unmerged are incompatible
# passed all 24 test(s)
1..24
*** t3008-ls-files-lazy-init-name-hash.sh ***
ok 1 - no buffer overflow in lazy_init_name_hash
# passed all 1 test(s)
1..1
*** t3009-ls-files-others-nonsubmodule.sh ***
ok 1 - setup: directories
ok 2 - ls-files --others handles untracked git repositories
# passed all 2 test(s)
1..2
*** t3010-ls-files-killed-modified.sh ***
ok 1 - git update-index --add to add various paths.
ok 2 - git ls-files -k to show killed files.
ok 3 - git ls-files -k output (w/o icase)
ok 4 - git ls-files -k output (w/ icase)
ok 5 - git ls-files -m to show modified files.
ok 6 - validate git ls-files -m output.
# passed all 6 test(s)
1..6
*** t3011-common-prefixes-and-directory-traversal.sh ***
ok 1 - setup
ok 2 - git ls-files -o shows the right entries
ok 3 - git ls-files -o --exclude-standard shows the right entries
ok 4 - git ls-files -o untracked_dir recurses
ok 5 - git ls-files -o untracked_dir/ recurses
ok 6 - git ls-files -o --directory untracked_dir does not recurse
ok 7 - git ls-files -o --directory untracked_dir/ does not recurse
ok 8 - git ls-files -o untracked_repo does not recurse
ok 9 - git ls-files -o untracked_repo/ does not recurse
ok 10 - git ls-files -o untracked_dir untracked_repo recurses into untracked_dir only
ok 11 - git ls-files -o untracked_dir/ untracked_repo/ recurses into untracked_dir only
ok 12 - git ls-files -o --directory untracked_dir untracked_repo does not recurse
ok 13 - git ls-files -o --directory untracked_dir/ untracked_repo/ does not recurse
ok 14 - git ls-files -o .git shows nothing
ok 15 - git ls-files -o .git/ shows nothing
ok 16 - git ls-files -o untracked_* recurses appropriately
not ok 17 - git ls-files -o untracked_*/ recurses appropriately # TODO known breakage
ok 18 - git ls-files -o --directory untracked_* does not recurse
ok 19 - git ls-files -o --directory untracked_*/ does not recurse
ok 20 - git ls-files -o consistent between one or two dirs
ok 21 - git status --ignored shows same files under dir with or without pathspec
# still have 1 known breakage(s)
# passed all remaining 20 test(s)
1..21
*** t3012-ls-files-dedup.sh ***
ok 1 - setup
ok 2 - git ls-files --deduplicate to show unique unmerged path
ok 3 - git ls-files -d -m --deduplicate with different display options
# passed all 3 test(s)
1..3
*** t3013-ls-files-format.sh ***
ok 1 - usage: --format is incompatible with -s
ok 2 - usage: --format is incompatible with -o
ok 3 - usage: --format is incompatible with -k
ok 4 - usage: --format is incompatible with -t
ok 5 - usage: --format is incompatible with --resolve-undo
ok 6 - usage: --format is incompatible with --deduplicate
ok 7 - usage: --format is incompatible with --eol
ok 8 - setup
ok 9 - git ls-files --format objectmode v.s. -s
ok 10 - git ls-files --format objectname v.s. -s
ok 11 - git ls-files --format objecttype
ok 12 - git ls-files --format objectsize
ok 13 - git ls-files --format objectsize:padded
ok 14 - git ls-files --format v.s. --eol
ok 15 - git ls-files --format path v.s. -s
ok 16 - git ls-files --format with relative path
ok 17 - git ls-files --format with -m
ok 18 - git ls-files --format with -d
ok 19 - git ls-files --format v.s -s
ok 20 - git ls-files --format with --debug
# passed all 20 test(s)
1..20
*** t3020-ls-files-error-unmatch.sh ***
ok 1 - setup
ok 2 - git ls-files --error-unmatch should fail with unmatched path.
ok 3 - git ls-files --error-unmatch should succeed with matched paths.
# passed all 3 test(s)
1..3
*** t3040-subprojects-basic.sh ***
ok 1 - setup: create superproject
ok 2 - setup: create subprojects
ok 3 - check if fsck ignores the subprojects
ok 4 - check if commit in a subproject detected
ok 5 - check if a changed subproject HEAD can be committed
ok 6 - check if diff-index works for subproject elements
ok 7 - check if diff-tree works for subproject elements
ok 8 - check if git diff works for subproject elements
ok 9 - check if clone works
ok 10 - removing and adding subproject
ok 11 - checkout in superproject
# passed all 11 test(s)
1..11
*** t3050-subprojects-fetch.sh ***
ok 1 - setup
ok 2 - clone
ok 3 - advance
ok 4 - fetch
# passed all 4 test(s)
1..4
*** t3060-ls-files-with-tree.sh ***
ok 1 - setup
ok 2 - usage
ok 3 - git ls-files --with-tree should succeed from subdir
ok 4 - git ls-files --with-tree should add entries from named tree.
ok 5 - no duplicates in --with-tree output
ok 6 - setup: output in a conflict
ok 7 - output in a conflict
ok 8 - output with removed .git/index
# passed all 8 test(s)
1..8
*** t3070-wildmatch.sh ***
ok 1 - cleanup after previous file test
ok 2 - setup match file test for foo
ok 3 - wildmatch: match 'foo' 'foo'
ok 4 - wildmatch (via ls-files): match 'foo' 'foo'
ok 5 - iwildmatch: match 'foo' 'foo'
ok 6 - iwildmatch (via ls-files): match 'foo' 'foo'
ok 7 - pathmatch: match 'foo' 'foo'
ok 8 - pathmatch (via ls-files): match 'foo' 'foo'
ok 9 - ipathmatch: match 'foo' 'foo'
ok 10 - ipathmatch (via ls-files): match 'foo' 'foo'
ok 11 - cleanup after previous file test
ok 12 - setup match file test for foo
ok 13 - wildmatch: no match 'foo' 'bar'
ok 14 - wildmatch (via ls-files): no match 'bar' 'foo'
ok 15 - iwildmatch: no match 'foo' 'bar'
ok 16 - iwildmatch (via ls-files): no match 'bar' 'foo'
ok 17 - pathmatch: no match 'foo' 'bar'
ok 18 - pathmatch (via ls-files): no match 'bar' 'foo'
ok 19 - ipathmatch: no match 'foo' 'bar'
ok 20 - ipathmatch (via ls-files): no match 'bar' 'foo'
ok 21 - cleanup after previous file test
ok 22 - setup match file test for 
ok 23 - wildmatch: match '' ''
not ok 24 - wildmatch (via ls-files): match skip '' '' # TODO known breakage
ok 25 - iwildmatch: match '' ''
not ok 26 - iwildmatch (via ls-files): match skip '' '' # TODO known breakage
ok 27 - pathmatch: match '' ''
not ok 28 - pathmatch (via ls-files): match skip '' '' # TODO known breakage
ok 29 - ipathmatch: match '' ''
not ok 30 - ipathmatch (via ls-files): match skip '' '' # TODO known breakage
ok 31 - cleanup after previous file test
ok 32 - setup match file test for foo
ok 33 - wildmatch: match 'foo' '???'
ok 34 - wildmatch (via ls-files): match '???' 'foo'
ok 35 - iwildmatch: match 'foo' '???'
ok 36 - iwildmatch (via ls-files): match '???' 'foo'
ok 37 - pathmatch: match 'foo' '???'
ok 38 - pathmatch (via ls-files): match '???' 'foo'
ok 39 - ipathmatch: match 'foo' '???'
ok 40 - ipathmatch (via ls-files): match '???' 'foo'
ok 41 - cleanup after previous file test
ok 42 - setup match file test for foo
ok 43 - wildmatch: no match 'foo' '??'
ok 44 - wildmatch (via ls-files): no match '??' 'foo'
ok 45 - iwildmatch: no match 'foo' '??'
ok 46 - iwildmatch (via ls-files): no match '??' 'foo'
ok 47 - pathmatch: no match 'foo' '??'
ok 48 - pathmatch (via ls-files): no match '??' 'foo'
ok 49 - ipathmatch: no match 'foo' '??'
ok 50 - ipathmatch (via ls-files): no match '??' 'foo'
ok 51 - cleanup after previous file test
ok 52 - setup match file test for foo
ok 53 - wildmatch: match 'foo' '*'
ok 54 - wildmatch (via ls-files): match '*' 'foo'
ok 55 - iwildmatch: match 'foo' '*'
ok 56 - iwildmatch (via ls-files): match '*' 'foo'
ok 57 - pathmatch: match 'foo' '*'
ok 58 - pathmatch (via ls-files): match '*' 'foo'
ok 59 - ipathmatch: match 'foo' '*'
ok 60 - ipathmatch (via ls-files): match '*' 'foo'
ok 61 - cleanup after previous file test
ok 62 - setup match file test for foo
ok 63 - wildmatch: match 'foo' 'f*'
ok 64 - wildmatch (via ls-files): match 'f*' 'foo'
ok 65 - iwildmatch: match 'foo' 'f*'
ok 66 - iwildmatch (via ls-files): match 'f*' 'foo'
ok 67 - pathmatch: match 'foo' 'f*'
ok 68 - pathmatch (via ls-files): match 'f*' 'foo'
ok 69 - ipathmatch: match 'foo' 'f*'
ok 70 - ipathmatch (via ls-files): match 'f*' 'foo'
ok 71 - cleanup after previous file test
ok 72 - setup match file test for foo
ok 73 - wildmatch: no match 'foo' '*f'
ok 74 - wildmatch (via ls-files): no match '*f' 'foo'
ok 75 - iwildmatch: no match 'foo' '*f'
ok 76 - iwildmatch (via ls-files): no match '*f' 'foo'
ok 77 - pathmatch: no match 'foo' '*f'
ok 78 - pathmatch (via ls-files): no match '*f' 'foo'
ok 79 - ipathmatch: no match 'foo' '*f'
ok 80 - ipathmatch (via ls-files): no match '*f' 'foo'
ok 81 - cleanup after previous file test
ok 82 - setup match file test for foo
ok 83 - wildmatch: match 'foo' '*foo*'
ok 84 - wildmatch (via ls-files): match '*foo*' 'foo'
ok 85 - iwildmatch: match 'foo' '*foo*'
ok 86 - iwildmatch (via ls-files): match '*foo*' 'foo'
ok 87 - pathmatch: match 'foo' '*foo*'
ok 88 - pathmatch (via ls-files): match '*foo*' 'foo'
ok 89 - ipathmatch: match 'foo' '*foo*'
ok 90 - ipathmatch (via ls-files): match '*foo*' 'foo'
ok 91 - cleanup after previous file test
ok 92 - setup match file test for foobar
ok 93 - wildmatch: match 'foobar' '*ob*a*r*'
ok 94 - wildmatch (via ls-files): match '*ob*a*r*' 'foobar'
ok 95 - iwildmatch: match 'foobar' '*ob*a*r*'
ok 96 - iwildmatch (via ls-files): match '*ob*a*r*' 'foobar'
ok 97 - pathmatch: match 'foobar' '*ob*a*r*'
ok 98 - pathmatch (via ls-files): match '*ob*a*r*' 'foobar'
ok 99 - ipathmatch: match 'foobar' '*ob*a*r*'
ok 100 - ipathmatch (via ls-files): match '*ob*a*r*' 'foobar'
ok 101 - cleanup after previous file test
ok 102 - setup match file test for aaaaaaabababab
ok 103 - wildmatch: match 'aaaaaaabababab' '*ab'
ok 104 - wildmatch (via ls-files): match '*ab' 'aaaaaaabababab'
ok 105 - iwildmatch: match 'aaaaaaabababab' '*ab'
ok 106 - iwildmatch (via ls-files): match '*ab' 'aaaaaaabababab'
ok 107 - pathmatch: match 'aaaaaaabababab' '*ab'
ok 108 - pathmatch (via ls-files): match '*ab' 'aaaaaaabababab'
ok 109 - ipathmatch: match 'aaaaaaabababab' '*ab'
ok 110 - ipathmatch (via ls-files): match '*ab' 'aaaaaaabababab'
ok 111 - cleanup after previous file test
ok 112 - setup match file test for foo*
ok 113 - wildmatch: match 'foo*' 'foo\*'
ok 114 - wildmatch (via ls-files): match 'foo\*' 'foo*'
ok 115 - iwildmatch: match 'foo*' 'foo\*'
ok 116 - iwildmatch (via ls-files): match 'foo\*' 'foo*'
ok 117 - pathmatch: match 'foo*' 'foo\*'
ok 118 - pathmatch (via ls-files): match 'foo\*' 'foo*'
ok 119 - ipathmatch: match 'foo*' 'foo\*'
ok 120 - ipathmatch (via ls-files): match 'foo\*' 'foo*'
ok 121 - cleanup after previous file test
ok 122 - setup match file test for foobar
ok 123 - wildmatch: no match 'foobar' 'foo\*bar'
ok 124 - wildmatch (via ls-files): no match 'foo\*bar' 'foobar'
ok 125 - iwildmatch: no match 'foobar' 'foo\*bar'
ok 126 - iwildmatch (via ls-files): no match 'foo\*bar' 'foobar'
ok 127 - pathmatch: no match 'foobar' 'foo\*bar'
ok 128 - pathmatch (via ls-files): no match 'foo\*bar' 'foobar'
ok 129 - ipathmatch: no match 'foobar' 'foo\*bar'
ok 130 - ipathmatch (via ls-files): no match 'foo\*bar' 'foobar'
ok 131 - cleanup after previous file test
ok 132 - setup match file test for f\oo
ok 133 - wildmatch: match 'f\oo' 'f\\oo'
ok 134 - wildmatch (via ls-files): match 'f\\oo' 'f\oo'
ok 135 - iwildmatch: match 'f\oo' 'f\\oo'
ok 136 - iwildmatch (via ls-files): match 'f\\oo' 'f\oo'
ok 137 - pathmatch: match 'f\oo' 'f\\oo'
ok 138 - pathmatch (via ls-files): match 'f\\oo' 'f\oo'
ok 139 - ipathmatch: match 'f\oo' 'f\\oo'
ok 140 - ipathmatch (via ls-files): match 'f\\oo' 'f\oo'
ok 141 - cleanup after previous file test
ok 142 - setup match file test for ball
ok 143 - wildmatch: match 'ball' '*[al]?'
ok 144 - wildmatch (via ls-files): match '*[al]?' 'ball'
ok 145 - iwildmatch: match 'ball' '*[al]?'
ok 146 - iwildmatch (via ls-files): match '*[al]?' 'ball'
ok 147 - pathmatch: match 'ball' '*[al]?'
ok 148 - pathmatch (via ls-files): match '*[al]?' 'ball'
ok 149 - ipathmatch: match 'ball' '*[al]?'
ok 150 - ipathmatch (via ls-files): match '*[al]?' 'ball'
ok 151 - cleanup after previous file test
ok 152 - setup match file test for ten
ok 153 - wildmatch: no match 'ten' '[ten]'
ok 154 - wildmatch (via ls-files): no match '[ten]' 'ten'
ok 155 - iwildmatch: no match 'ten' '[ten]'
ok 156 - iwildmatch (via ls-files): no match '[ten]' 'ten'
ok 157 - pathmatch: no match 'ten' '[ten]'
ok 158 - pathmatch (via ls-files): no match '[ten]' 'ten'
ok 159 - ipathmatch: no match 'ten' '[ten]'
ok 160 - ipathmatch (via ls-files): no match '[ten]' 'ten'
ok 161 - cleanup after previous file test
ok 162 - setup match file test for ten
ok 163 - wildmatch: match 'ten' '**[!te]'
ok 164 - wildmatch (via ls-files): match '**[!te]' 'ten'
ok 165 - iwildmatch: match 'ten' '**[!te]'
ok 166 - iwildmatch (via ls-files): match '**[!te]' 'ten'
ok 167 - pathmatch: match 'ten' '**[!te]'
ok 168 - pathmatch (via ls-files): match '**[!te]' 'ten'
ok 169 - ipathmatch: match 'ten' '**[!te]'
ok 170 - ipathmatch (via ls-files): match '**[!te]' 'ten'
ok 171 - cleanup after previous file test
ok 172 - setup match file test for ten
ok 173 - wildmatch: no match 'ten' '**[!ten]'
ok 174 - wildmatch (via ls-files): no match '**[!ten]' 'ten'
ok 175 - iwildmatch: no match 'ten' '**[!ten]'
ok 176 - iwildmatch (via ls-files): no match '**[!ten]' 'ten'
ok 177 - pathmatch: no match 'ten' '**[!ten]'
ok 178 - pathmatch (via ls-files): no match '**[!ten]' 'ten'
ok 179 - ipathmatch: no match 'ten' '**[!ten]'
ok 180 - ipathmatch (via ls-files): no match '**[!ten]' 'ten'
ok 181 - cleanup after previous file test
ok 182 - setup match file test for ten
ok 183 - wildmatch: match 'ten' 't[a-g]n'
ok 184 - wildmatch (via ls-files): match 't[a-g]n' 'ten'
ok 185 - iwildmatch: match 'ten' 't[a-g]n'
ok 186 - iwildmatch (via ls-files): match 't[a-g]n' 'ten'
ok 187 - pathmatch: match 'ten' 't[a-g]n'
ok 188 - pathmatch (via ls-files): match 't[a-g]n' 'ten'
ok 189 - ipathmatch: match 'ten' 't[a-g]n'
ok 190 - ipathmatch (via ls-files): match 't[a-g]n' 'ten'
ok 191 - cleanup after previous file test
ok 192 - setup match file test for ten
ok 193 - wildmatch: no match 'ten' 't[!a-g]n'
ok 194 - wildmatch (via ls-files): no match 't[!a-g]n' 'ten'
ok 195 - iwildmatch: no match 'ten' 't[!a-g]n'
ok 196 - iwildmatch (via ls-files): no match 't[!a-g]n' 'ten'
ok 197 - pathmatch: no match 'ten' 't[!a-g]n'
ok 198 - pathmatch (via ls-files): no match 't[!a-g]n' 'ten'
ok 199 - ipathmatch: no match 'ten' 't[!a-g]n'
ok 200 - ipathmatch (via ls-files): no match 't[!a-g]n' 'ten'
ok 201 - cleanup after previous file test
ok 202 - setup match file test for ton
ok 203 - wildmatch: match 'ton' 't[!a-g]n'
ok 204 - wildmatch (via ls-files): match 't[!a-g]n' 'ton'
ok 205 - iwildmatch: match 'ton' 't[!a-g]n'
ok 206 - iwildmatch (via ls-files): match 't[!a-g]n' 'ton'
ok 207 - pathmatch: match 'ton' 't[!a-g]n'
ok 208 - pathmatch (via ls-files): match 't[!a-g]n' 'ton'
ok 209 - ipathmatch: match 'ton' 't[!a-g]n'
ok 210 - ipathmatch (via ls-files): match 't[!a-g]n' 'ton'
ok 211 - cleanup after previous file test
ok 212 - setup match file test for ton
ok 213 - wildmatch: match 'ton' 't[^a-g]n'
ok 214 - wildmatch (via ls-files): match 't[^a-g]n' 'ton'
ok 215 - iwildmatch: match 'ton' 't[^a-g]n'
ok 216 - iwildmatch (via ls-files): match 't[^a-g]n' 'ton'
ok 217 - pathmatch: match 'ton' 't[^a-g]n'
ok 218 - pathmatch (via ls-files): match 't[^a-g]n' 'ton'
ok 219 - ipathmatch: match 'ton' 't[^a-g]n'
ok 220 - ipathmatch (via ls-files): match 't[^a-g]n' 'ton'
ok 221 - cleanup after previous file test
ok 222 - setup match file test for a]b
ok 223 - wildmatch: match 'a]b' 'a[]]b'
ok 224 - wildmatch (via ls-files): match 'a[]]b' 'a]b'
ok 225 - iwildmatch: match 'a]b' 'a[]]b'
ok 226 - iwildmatch (via ls-files): match 'a[]]b' 'a]b'
ok 227 - pathmatch: match 'a]b' 'a[]]b'
ok 228 - pathmatch (via ls-files): match 'a[]]b' 'a]b'
ok 229 - ipathmatch: match 'a]b' 'a[]]b'
ok 230 - ipathmatch (via ls-files): match 'a[]]b' 'a]b'
ok 231 - cleanup after previous file test
ok 232 - setup match file test for a-b
ok 233 - wildmatch: match 'a-b' 'a[]-]b'
ok 234 - wildmatch (via ls-files): match 'a[]-]b' 'a-b'
ok 235 - iwildmatch: match 'a-b' 'a[]-]b'
ok 236 - iwildmatch (via ls-files): match 'a[]-]b' 'a-b'
ok 237 - pathmatch: match 'a-b' 'a[]-]b'
ok 238 - pathmatch (via ls-files): match 'a[]-]b' 'a-b'
ok 239 - ipathmatch: match 'a-b' 'a[]-]b'
ok 240 - ipathmatch (via ls-files): match 'a[]-]b' 'a-b'
ok 241 - cleanup after previous file test
ok 242 - setup match file test for a]b
ok 243 - wildmatch: match 'a]b' 'a[]-]b'
ok 244 - wildmatch (via ls-files): match 'a[]-]b' 'a]b'
ok 245 - iwildmatch: match 'a]b' 'a[]-]b'
ok 246 - iwildmatch (via ls-files): match 'a[]-]b' 'a]b'
ok 247 - pathmatch: match 'a]b' 'a[]-]b'
ok 248 - pathmatch (via ls-files): match 'a[]-]b' 'a]b'
ok 249 - ipathmatch: match 'a]b' 'a[]-]b'
ok 250 - ipathmatch (via ls-files): match 'a[]-]b' 'a]b'
ok 251 - cleanup after previous file test
ok 252 - setup match file test for aab
ok 253 - wildmatch: no match 'aab' 'a[]-]b'
ok 254 - wildmatch (via ls-files): no match 'a[]-]b' 'aab'
ok 255 - iwildmatch: no match 'aab' 'a[]-]b'
ok 256 - iwildmatch (via ls-files): no match 'a[]-]b' 'aab'
ok 257 - pathmatch: no match 'aab' 'a[]-]b'
ok 258 - pathmatch (via ls-files): no match 'a[]-]b' 'aab'
ok 259 - ipathmatch: no match 'aab' 'a[]-]b'
ok 260 - ipathmatch (via ls-files): no match 'a[]-]b' 'aab'
ok 261 - cleanup after previous file test
ok 262 - setup match file test for aab
ok 263 - wildmatch: match 'aab' 'a[]a-]b'
ok 264 - wildmatch (via ls-files): match 'a[]a-]b' 'aab'
ok 265 - iwildmatch: match 'aab' 'a[]a-]b'
ok 266 - iwildmatch (via ls-files): match 'a[]a-]b' 'aab'
ok 267 - pathmatch: match 'aab' 'a[]a-]b'
ok 268 - pathmatch (via ls-files): match 'a[]a-]b' 'aab'
ok 269 - ipathmatch: match 'aab' 'a[]a-]b'
ok 270 - ipathmatch (via ls-files): match 'a[]a-]b' 'aab'
ok 271 - cleanup after previous file test
ok 272 - setup match file test for ]
ok 273 - wildmatch: match ']' ']'
ok 274 - wildmatch (via ls-files): match ']' ']'
ok 275 - iwildmatch: match ']' ']'
ok 276 - iwildmatch (via ls-files): match ']' ']'
ok 277 - pathmatch: match ']' ']'
ok 278 - pathmatch (via ls-files): match ']' ']'
ok 279 - ipathmatch: match ']' ']'
ok 280 - ipathmatch (via ls-files): match ']' ']'
ok 281 - cleanup after previous file test
ok 282 - setup match file test for foo/baz/bar
ok 283 - wildmatch: no match 'foo/baz/bar' 'foo*bar'
ok 284 - wildmatch (via ls-files): no match 'foo*bar' 'foo/baz/bar'
ok 285 - iwildmatch: no match 'foo/baz/bar' 'foo*bar'
ok 286 - iwildmatch (via ls-files): no match 'foo*bar' 'foo/baz/bar'
ok 287 - pathmatch: match 'foo/baz/bar' 'foo*bar'
ok 288 - pathmatch (via ls-files): match 'foo*bar' 'foo/baz/bar'
ok 289 - ipathmatch: match 'foo/baz/bar' 'foo*bar'
ok 290 - ipathmatch (via ls-files): match 'foo*bar' 'foo/baz/bar'
ok 291 - cleanup after previous file test
ok 292 - setup match file test for foo/baz/bar
ok 293 - wildmatch: no match 'foo/baz/bar' 'foo**bar'
ok 294 - wildmatch (via ls-files): no match 'foo**bar' 'foo/baz/bar'
ok 295 - iwildmatch: no match 'foo/baz/bar' 'foo**bar'
ok 296 - iwildmatch (via ls-files): no match 'foo**bar' 'foo/baz/bar'
ok 297 - pathmatch: match 'foo/baz/bar' 'foo**bar'
ok 298 - pathmatch (via ls-files): match 'foo**bar' 'foo/baz/bar'
ok 299 - ipathmatch: match 'foo/baz/bar' 'foo**bar'
ok 300 - ipathmatch (via ls-files): match 'foo**bar' 'foo/baz/bar'
ok 301 - cleanup after previous file test
ok 302 - setup match file test for foobazbar
ok 303 - wildmatch: match 'foobazbar' 'foo**bar'
ok 304 - wildmatch (via ls-files): match 'foo**bar' 'foobazbar'
ok 305 - iwildmatch: match 'foobazbar' 'foo**bar'
ok 306 - iwildmatch (via ls-files): match 'foo**bar' 'foobazbar'
ok 307 - pathmatch: match 'foobazbar' 'foo**bar'
ok 308 - pathmatch (via ls-files): match 'foo**bar' 'foobazbar'
ok 309 - ipathmatch: match 'foobazbar' 'foo**bar'
ok 310 - ipathmatch (via ls-files): match 'foo**bar' 'foobazbar'
ok 311 - cleanup after previous file test
ok 312 - setup match file test for foo/baz/bar
ok 313 - wildmatch: match 'foo/baz/bar' 'foo/**/bar'
ok 314 - wildmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'
ok 315 - iwildmatch: match 'foo/baz/bar' 'foo/**/bar'
ok 316 - iwildmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'
ok 317 - pathmatch: match 'foo/baz/bar' 'foo/**/bar'
ok 318 - pathmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'
ok 319 - ipathmatch: match 'foo/baz/bar' 'foo/**/bar'
ok 320 - ipathmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'
ok 321 - cleanup after previous file test
ok 322 - setup match file test for foo/baz/bar
ok 323 - wildmatch: match 'foo/baz/bar' 'foo/**/**/bar'
ok 324 - wildmatch (via ls-files): match 'foo/**/**/bar' 'foo/baz/bar'
ok 325 - iwildmatch: match 'foo/baz/bar' 'foo/**/**/bar'
ok 326 - iwildmatch (via ls-files): match 'foo/**/**/bar' 'foo/baz/bar'
ok 327 - pathmatch: no match 'foo/baz/bar' 'foo/**/**/bar'
ok 328 - pathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/baz/bar'
ok 329 - ipathmatch: no match 'foo/baz/bar' 'foo/**/**/bar'
ok 330 - ipathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/baz/bar'
ok 331 - cleanup after previous file test
ok 332 - setup match file test for foo/b/a/z/bar
ok 333 - wildmatch: match 'foo/b/a/z/bar' 'foo/**/bar'
ok 334 - wildmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'
ok 335 - iwildmatch: match 'foo/b/a/z/bar' 'foo/**/bar'
ok 336 - iwildmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'
ok 337 - pathmatch: match 'foo/b/a/z/bar' 'foo/**/bar'
ok 338 - pathmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'
ok 339 - ipathmatch: match 'foo/b/a/z/bar' 'foo/**/bar'
ok 340 - ipathmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'
ok 341 - cleanup after previous file test
ok 342 - setup match file test for foo/b/a/z/bar
ok 343 - wildmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'
ok 344 - wildmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'
ok 345 - iwildmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'
ok 346 - iwildmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'
ok 347 - pathmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'
ok 348 - pathmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'
ok 349 - ipathmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'
ok 350 - ipathmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'
ok 351 - cleanup after previous file test
ok 352 - setup match file test for foo/bar
ok 353 - wildmatch: match 'foo/bar' 'foo/**/bar'
ok 354 - wildmatch (via ls-files): match 'foo/**/bar' 'foo/bar'
ok 355 - iwildmatch: match 'foo/bar' 'foo/**/bar'
ok 356 - iwildmatch (via ls-files): match 'foo/**/bar' 'foo/bar'
ok 357 - pathmatch: no match 'foo/bar' 'foo/**/bar'
ok 358 - pathmatch (via ls-files): no match 'foo/**/bar' 'foo/bar'
ok 359 - ipathmatch: no match 'foo/bar' 'foo/**/bar'
ok 360 - ipathmatch (via ls-files): no match 'foo/**/bar' 'foo/bar'
ok 361 - cleanup after previous file test
ok 362 - setup match file test for foo/bar
ok 363 - wildmatch: match 'foo/bar' 'foo/**/**/bar'
ok 364 - wildmatch (via ls-files): match 'foo/**/**/bar' 'foo/bar'
ok 365 - iwildmatch: match 'foo/bar' 'foo/**/**/bar'
ok 366 - iwildmatch (via ls-files): match 'foo/**/**/bar' 'foo/bar'
ok 367 - pathmatch: no match 'foo/bar' 'foo/**/**/bar'
ok 368 - pathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/bar'
ok 369 - ipathmatch: no match 'foo/bar' 'foo/**/**/bar'
ok 370 - ipathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/bar'
ok 371 - cleanup after previous file test
ok 372 - setup match file test for foo/bar
ok 373 - wildmatch: no match 'foo/bar' 'foo?bar'
ok 374 - wildmatch (via ls-files): no match 'foo?bar' 'foo/bar'
ok 375 - iwildmatch: no match 'foo/bar' 'foo?bar'
ok 376 - iwildmatch (via ls-files): no match 'foo?bar' 'foo/bar'
ok 377 - pathmatch: match 'foo/bar' 'foo?bar'
ok 378 - pathmatch (via ls-files): match 'foo?bar' 'foo/bar'
ok 379 - ipathmatch: match 'foo/bar' 'foo?bar'
ok 380 - ipathmatch (via ls-files): match 'foo?bar' 'foo/bar'
ok 381 - cleanup after previous file test
ok 382 - setup match file test for foo/bar
ok 383 - wildmatch: no match 'foo/bar' 'foo[/]bar'
ok 384 - wildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'
ok 385 - iwildmatch: no match 'foo/bar' 'foo[/]bar'
ok 386 - iwildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'
ok 387 - pathmatch: match 'foo/bar' 'foo[/]bar'
ok 388 - pathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'
ok 389 - ipathmatch: match 'foo/bar' 'foo[/]bar'
ok 390 - ipathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'
ok 391 - cleanup after previous file test
ok 392 - setup match file test for foo/bar
ok 393 - wildmatch: no match 'foo/bar' 'foo[^a-z]bar'
ok 394 - wildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'
ok 395 - iwildmatch: no match 'foo/bar' 'foo[^a-z]bar'
ok 396 - iwildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'
ok 397 - pathmatch: match 'foo/bar' 'foo[^a-z]bar'
ok 398 - pathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'
ok 399 - ipathmatch: match 'foo/bar' 'foo[^a-z]bar'
ok 400 - ipathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'
ok 401 - cleanup after previous file test
ok 402 - setup match file test for foo/bar
ok 403 - wildmatch: no match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 404 - wildmatch (via ls-files): no match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'
ok 405 - iwildmatch: no match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 406 - iwildmatch (via ls-files): no match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'
ok 407 - pathmatch: match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 408 - pathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'
ok 409 - ipathmatch: match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 410 - ipathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'
ok 411 - cleanup after previous file test
ok 412 - setup match file test for foo-bar
ok 413 - wildmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 414 - wildmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'
ok 415 - iwildmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 416 - iwildmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'
ok 417 - pathmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 418 - pathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'
ok 419 - ipathmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 420 - ipathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'
ok 421 - cleanup after previous file test
ok 422 - setup match file test for foo
ok 423 - wildmatch: match 'foo' '**/foo'
ok 424 - wildmatch (via ls-files): match '**/foo' 'foo'
ok 425 - iwildmatch: match 'foo' '**/foo'
ok 426 - iwildmatch (via ls-files): match '**/foo' 'foo'
ok 427 - pathmatch: no match 'foo' '**/foo'
ok 428 - pathmatch (via ls-files): no match '**/foo' 'foo'
ok 429 - ipathmatch: no match 'foo' '**/foo'
ok 430 - ipathmatch (via ls-files): no match '**/foo' 'foo'
ok 431 - cleanup after previous file test
ok 432 - setup match file test for XXX/foo
ok 433 - wildmatch: match 'XXX/foo' '**/foo'
ok 434 - wildmatch (via ls-files): match '**/foo' 'XXX/foo'
ok 435 - iwildmatch: match 'XXX/foo' '**/foo'
ok 436 - iwildmatch (via ls-files): match '**/foo' 'XXX/foo'
ok 437 - pathmatch: match 'XXX/foo' '**/foo'
ok 438 - pathmatch (via ls-files): match '**/foo' 'XXX/foo'
ok 439 - ipathmatch: match 'XXX/foo' '**/foo'
ok 440 - ipathmatch (via ls-files): match '**/foo' 'XXX/foo'
ok 441 - cleanup after previous file test
ok 442 - setup match file test for bar/baz/foo
ok 443 - wildmatch: match 'bar/baz/foo' '**/foo'
ok 444 - wildmatch (via ls-files): match '**/foo' 'bar/baz/foo'
ok 445 - iwildmatch: match 'bar/baz/foo' '**/foo'
ok 446 - iwildmatch (via ls-files): match '**/foo' 'bar/baz/foo'
ok 447 - pathmatch: match 'bar/baz/foo' '**/foo'
ok 448 - pathmatch (via ls-files): match '**/foo' 'bar/baz/foo'
ok 449 - ipathmatch: match 'bar/baz/foo' '**/foo'
ok 450 - ipathmatch (via ls-files): match '**/foo' 'bar/baz/foo'
ok 451 - cleanup after previous file test
ok 452 - setup match file test for bar/baz/foo
ok 453 - wildmatch: no match 'bar/baz/foo' '*/foo'
ok 454 - wildmatch (via ls-files): no match '*/foo' 'bar/baz/foo'
ok 455 - iwildmatch: no match 'bar/baz/foo' '*/foo'
ok 456 - iwildmatch (via ls-files): no match '*/foo' 'bar/baz/foo'
ok 457 - pathmatch: match 'bar/baz/foo' '*/foo'
ok 458 - pathmatch (via ls-files): match '*/foo' 'bar/baz/foo'
ok 459 - ipathmatch: match 'bar/baz/foo' '*/foo'
ok 460 - ipathmatch (via ls-files): match '*/foo' 'bar/baz/foo'
ok 461 - cleanup after previous file test
ok 462 - setup match file test for foo/bar/baz
ok 463 - wildmatch: no match 'foo/bar/baz' '**/bar*'
ok 464 - wildmatch (via ls-files): no match '**/bar*' 'foo/bar/baz'
ok 465 - iwildmatch: no match 'foo/bar/baz' '**/bar*'
ok 466 - iwildmatch (via ls-files): no match '**/bar*' 'foo/bar/baz'
ok 467 - pathmatch: match 'foo/bar/baz' '**/bar*'
ok 468 - pathmatch (via ls-files): match '**/bar*' 'foo/bar/baz'
ok 469 - ipathmatch: match 'foo/bar/baz' '**/bar*'
ok 470 - ipathmatch (via ls-files): match '**/bar*' 'foo/bar/baz'
ok 471 - cleanup after previous file test
ok 472 - setup match file test for deep/foo/bar/baz
ok 473 - wildmatch: match 'deep/foo/bar/baz' '**/bar/*'
ok 474 - wildmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'
ok 475 - iwildmatch: match 'deep/foo/bar/baz' '**/bar/*'
ok 476 - iwildmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'
ok 477 - pathmatch: match 'deep/foo/bar/baz' '**/bar/*'
ok 478 - pathmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'
ok 479 - ipathmatch: match 'deep/foo/bar/baz' '**/bar/*'
ok 480 - ipathmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'
ok 481 - cleanup after previous file test
ok 482 - setup match file test for deep/foo/bar/baz/
ok 483 - wildmatch: no match 'deep/foo/bar/baz/' '**/bar/*'
not ok 484 - wildmatch (via ls-files): no match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage
ok 485 - iwildmatch: no match 'deep/foo/bar/baz/' '**/bar/*'
not ok 486 - iwildmatch (via ls-files): no match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage
ok 487 - pathmatch: match 'deep/foo/bar/baz/' '**/bar/*'
not ok 488 - pathmatch (via ls-files): match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage
ok 489 - ipathmatch: match 'deep/foo/bar/baz/' '**/bar/*'
not ok 490 - ipathmatch (via ls-files): match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage
ok 491 - cleanup after previous file test
ok 492 - setup match file test for deep/foo/bar/baz/
ok 493 - wildmatch: match 'deep/foo/bar/baz/' '**/bar/**'
not ok 494 - wildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage
ok 495 - iwildmatch: match 'deep/foo/bar/baz/' '**/bar/**'
not ok 496 - iwildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage
ok 497 - pathmatch: match 'deep/foo/bar/baz/' '**/bar/**'
not ok 498 - pathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage
ok 499 - ipathmatch: match 'deep/foo/bar/baz/' '**/bar/**'
not ok 500 - ipathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage
ok 501 - cleanup after previous file test
ok 502 - setup match file test for deep/foo/bar
ok 503 - wildmatch: no match 'deep/foo/bar' '**/bar/*'
ok 504 - wildmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'
ok 505 - iwildmatch: no match 'deep/foo/bar' '**/bar/*'
ok 506 - iwildmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'
ok 507 - pathmatch: no match 'deep/foo/bar' '**/bar/*'
ok 508 - pathmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'
ok 509 - ipathmatch: no match 'deep/foo/bar' '**/bar/*'
ok 510 - ipathmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'
ok 511 - cleanup after previous file test
ok 512 - setup match file test for deep/foo/bar/
ok 513 - wildmatch: match 'deep/foo/bar/' '**/bar/**'
not ok 514 - wildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage
ok 515 - iwildmatch: match 'deep/foo/bar/' '**/bar/**'
not ok 516 - iwildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage
ok 517 - pathmatch: match 'deep/foo/bar/' '**/bar/**'
not ok 518 - pathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage
ok 519 - ipathmatch: match 'deep/foo/bar/' '**/bar/**'
not ok 520 - ipathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage
ok 521 - cleanup after previous file test
ok 522 - setup match file test for foo/bar/baz
ok 523 - wildmatch: no match 'foo/bar/baz' '**/bar**'
ok 524 - wildmatch (via ls-files): no match '**/bar**' 'foo/bar/baz'
ok 525 - iwildmatch: no match 'foo/bar/baz' '**/bar**'
ok 526 - iwildmatch (via ls-files): no match '**/bar**' 'foo/bar/baz'
ok 527 - pathmatch: match 'foo/bar/baz' '**/bar**'
ok 528 - pathmatch (via ls-files): match '**/bar**' 'foo/bar/baz'
ok 529 - ipathmatch: match 'foo/bar/baz' '**/bar**'
ok 530 - ipathmatch (via ls-files): match '**/bar**' 'foo/bar/baz'
ok 531 - cleanup after previous file test
ok 532 - setup match file test for foo/bar/baz/x
ok 533 - wildmatch: match 'foo/bar/baz/x' '*/bar/**'
ok 534 - wildmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'
ok 535 - iwildmatch: match 'foo/bar/baz/x' '*/bar/**'
ok 536 - iwildmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'
ok 537 - pathmatch: match 'foo/bar/baz/x' '*/bar/**'
ok 538 - pathmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'
ok 539 - ipathmatch: match 'foo/bar/baz/x' '*/bar/**'
ok 540 - ipathmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'
ok 541 - cleanup after previous file test
ok 542 - setup match file test for deep/foo/bar/baz/x
ok 543 - wildmatch: no match 'deep/foo/bar/baz/x' '*/bar/**'
ok 544 - wildmatch (via ls-files): no match '*/bar/**' 'deep/foo/bar/baz/x'
ok 545 - iwildmatch: no match 'deep/foo/bar/baz/x' '*/bar/**'
ok 546 - iwildmatch (via ls-files): no match '*/bar/**' 'deep/foo/bar/baz/x'
ok 547 - pathmatch: match 'deep/foo/bar/baz/x' '*/bar/**'
ok 548 - pathmatch (via ls-files): match '*/bar/**' 'deep/foo/bar/baz/x'
ok 549 - ipathmatch: match 'deep/foo/bar/baz/x' '*/bar/**'
ok 550 - ipathmatch (via ls-files): match '*/bar/**' 'deep/foo/bar/baz/x'
ok 551 - cleanup after previous file test
ok 552 - setup match file test for deep/foo/bar/baz/x
ok 553 - wildmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'
ok 554 - wildmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'
ok 555 - iwildmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'
ok 556 - iwildmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'
ok 557 - pathmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'
ok 558 - pathmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'
ok 559 - ipathmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'
ok 560 - ipathmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'
ok 561 - cleanup after previous file test
ok 562 - setup match file test for acrt
ok 563 - wildmatch: no match 'acrt' 'a[c-c]st'
ok 564 - wildmatch (via ls-files): no match 'a[c-c]st' 'acrt'
ok 565 - iwildmatch: no match 'acrt' 'a[c-c]st'
ok 566 - iwildmatch (via ls-files): no match 'a[c-c]st' 'acrt'
ok 567 - pathmatch: no match 'acrt' 'a[c-c]st'
ok 568 - pathmatch (via ls-files): no match 'a[c-c]st' 'acrt'
ok 569 - ipathmatch: no match 'acrt' 'a[c-c]st'
ok 570 - ipathmatch (via ls-files): no match 'a[c-c]st' 'acrt'
ok 571 - cleanup after previous file test
ok 572 - setup match file test for acrt
ok 573 - wildmatch: match 'acrt' 'a[c-c]rt'
ok 574 - wildmatch (via ls-files): match 'a[c-c]rt' 'acrt'
ok 575 - iwildmatch: match 'acrt' 'a[c-c]rt'
ok 576 - iwildmatch (via ls-files): match 'a[c-c]rt' 'acrt'
ok 577 - pathmatch: match 'acrt' 'a[c-c]rt'
ok 578 - pathmatch (via ls-files): match 'a[c-c]rt' 'acrt'
ok 579 - ipathmatch: match 'acrt' 'a[c-c]rt'
ok 580 - ipathmatch (via ls-files): match 'a[c-c]rt' 'acrt'
ok 581 - cleanup after previous file test
ok 582 - setup match file test for ]
ok 583 - wildmatch: no match ']' '[!]-]'
ok 584 - wildmatch (via ls-files): no match '[!]-]' ']'
ok 585 - iwildmatch: no match ']' '[!]-]'
ok 586 - iwildmatch (via ls-files): no match '[!]-]' ']'
ok 587 - pathmatch: no match ']' '[!]-]'
ok 588 - pathmatch (via ls-files): no match '[!]-]' ']'
ok 589 - ipathmatch: no match ']' '[!]-]'
ok 590 - ipathmatch (via ls-files): no match '[!]-]' ']'
ok 591 - cleanup after previous file test
ok 592 - setup match file test for a
ok 593 - wildmatch: match 'a' '[!]-]'
ok 594 - wildmatch (via ls-files): match '[!]-]' 'a'
ok 595 - iwildmatch: match 'a' '[!]-]'
ok 596 - iwildmatch (via ls-files): match '[!]-]' 'a'
ok 597 - pathmatch: match 'a' '[!]-]'
ok 598 - pathmatch (via ls-files): match '[!]-]' 'a'
ok 599 - ipathmatch: match 'a' '[!]-]'
ok 600 - ipathmatch (via ls-files): match '[!]-]' 'a'
ok 601 - cleanup after previous file test
ok 602 - setup match file test for 
ok 603 - wildmatch: no match '' '\'
not ok 604 - wildmatch (via ls-files): no match skip '\' '' # TODO known breakage
ok 605 - iwildmatch: no match '' '\'
not ok 606 - iwildmatch (via ls-files): no match skip '\' '' # TODO known breakage
ok 607 - pathmatch: no match '' '\'
not ok 608 - pathmatch (via ls-files): no match skip '\' '' # TODO known breakage
ok 609 - ipathmatch: no match '' '\'
not ok 610 - ipathmatch (via ls-files): no match skip '\' '' # TODO known breakage
ok 611 - cleanup after previous file test
ok 612 - setup match file test for \
ok 613 - wildmatch: no match '\' '\'
ok 614 - wildmatch (via ls-files): match '\' '\'
ok 615 - iwildmatch: no match '\' '\'
ok 616 - iwildmatch (via ls-files): match '\' '\'
ok 617 - pathmatch: no match '\' '\'
ok 618 - pathmatch (via ls-files): match '\' '\'
ok 619 - ipathmatch: no match '\' '\'
ok 620 - ipathmatch (via ls-files): match '\' '\'
ok 621 - cleanup after previous file test
ok 622 - setup match file test for XXX/\
ok 623 - wildmatch: no match 'XXX/\' '*/\'
ok 624 - wildmatch (via ls-files): no match '*/\' 'XXX/\'
ok 625 - iwildmatch: no match 'XXX/\' '*/\'
ok 626 - iwildmatch (via ls-files): no match '*/\' 'XXX/\'
ok 627 - pathmatch: no match 'XXX/\' '*/\'
ok 628 - pathmatch (via ls-files): no match '*/\' 'XXX/\'
ok 629 - ipathmatch: no match 'XXX/\' '*/\'
ok 630 - ipathmatch (via ls-files): no match '*/\' 'XXX/\'
ok 631 - cleanup after previous file test
ok 632 - setup match file test for XXX/\
ok 633 - wildmatch: match 'XXX/\' '*/\\'
ok 634 - wildmatch (via ls-files): match '*/\\' 'XXX/\'
ok 635 - iwildmatch: match 'XXX/\' '*/\\'
ok 636 - iwildmatch (via ls-files): match '*/\\' 'XXX/\'
ok 637 - pathmatch: match 'XXX/\' '*/\\'
ok 638 - pathmatch (via ls-files): match '*/\\' 'XXX/\'
ok 639 - ipathmatch: match 'XXX/\' '*/\\'
ok 640 - ipathmatch (via ls-files): match '*/\\' 'XXX/\'
ok 641 - cleanup after previous file test
ok 642 - setup match file test for foo
ok 643 - wildmatch: match 'foo' 'foo'
ok 644 - wildmatch (via ls-files): match 'foo' 'foo'
ok 645 - iwildmatch: match 'foo' 'foo'
ok 646 - iwildmatch (via ls-files): match 'foo' 'foo'
ok 647 - pathmatch: match 'foo' 'foo'
ok 648 - pathmatch (via ls-files): match 'foo' 'foo'
ok 649 - ipathmatch: match 'foo' 'foo'
ok 650 - ipathmatch (via ls-files): match 'foo' 'foo'
ok 651 - cleanup after previous file test
ok 652 - setup match file test for @foo
ok 653 - wildmatch: match '@foo' '@foo'
ok 654 - wildmatch (via ls-files): match '@foo' '@foo'
ok 655 - iwildmatch: match '@foo' '@foo'
ok 656 - iwildmatch (via ls-files): match '@foo' '@foo'
ok 657 - pathmatch: match '@foo' '@foo'
ok 658 - pathmatch (via ls-files): match '@foo' '@foo'
ok 659 - ipathmatch: match '@foo' '@foo'
ok 660 - ipathmatch (via ls-files): match '@foo' '@foo'
ok 661 - cleanup after previous file test
ok 662 - setup match file test for foo
ok 663 - wildmatch: no match 'foo' '@foo'
ok 664 - wildmatch (via ls-files): no match '@foo' 'foo'
ok 665 - iwildmatch: no match 'foo' '@foo'
ok 666 - iwildmatch (via ls-files): no match '@foo' 'foo'
ok 667 - pathmatch: no match 'foo' '@foo'
ok 668 - pathmatch (via ls-files): no match '@foo' 'foo'
ok 669 - ipathmatch: no match 'foo' '@foo'
ok 670 - ipathmatch (via ls-files): no match '@foo' 'foo'
ok 671 - cleanup after previous file test
ok 672 - setup match file test for [ab]
ok 673 - wildmatch: match '[ab]' '\[ab]'
ok 674 - wildmatch (via ls-files): match '\[ab]' '[ab]'
ok 675 - iwildmatch: match '[ab]' '\[ab]'
ok 676 - iwildmatch (via ls-files): match '\[ab]' '[ab]'
ok 677 - pathmatch: match '[ab]' '\[ab]'
ok 678 - pathmatch (via ls-files): match '\[ab]' '[ab]'
ok 679 - ipathmatch: match '[ab]' '\[ab]'
ok 680 - ipathmatch (via ls-files): match '\[ab]' '[ab]'
ok 681 - cleanup after previous file test
ok 682 - setup match file test for [ab]
ok 683 - wildmatch: match '[ab]' '[[]ab]'
ok 684 - wildmatch (via ls-files): match '[[]ab]' '[ab]'
ok 685 - iwildmatch: match '[ab]' '[[]ab]'
ok 686 - iwildmatch (via ls-files): match '[[]ab]' '[ab]'
ok 687 - pathmatch: match '[ab]' '[[]ab]'
ok 688 - pathmatch (via ls-files): match '[[]ab]' '[ab]'
ok 689 - ipathmatch: match '[ab]' '[[]ab]'
ok 690 - ipathmatch (via ls-files): match '[[]ab]' '[ab]'
ok 691 - cleanup after previous file test
ok 692 - setup match file test for [ab]
ok 693 - wildmatch: match '[ab]' '[[:]ab]'
ok 694 - wildmatch (via ls-files): match '[[:]ab]' '[ab]'
ok 695 - iwildmatch: match '[ab]' '[[:]ab]'
ok 696 - iwildmatch (via ls-files): match '[[:]ab]' '[ab]'
ok 697 - pathmatch: match '[ab]' '[[:]ab]'
ok 698 - pathmatch (via ls-files): match '[[:]ab]' '[ab]'
ok 699 - ipathmatch: match '[ab]' '[[:]ab]'
ok 700 - ipathmatch (via ls-files): match '[[:]ab]' '[ab]'
ok 701 - cleanup after previous file test
ok 702 - setup match file test for [ab]
ok 703 - wildmatch: no match '[ab]' '[[::]ab]'
ok 704 - wildmatch (via ls-files): no match '[[::]ab]' '[ab]'
ok 705 - iwildmatch: no match '[ab]' '[[::]ab]'
ok 706 - iwildmatch (via ls-files): no match '[[::]ab]' '[ab]'
ok 707 - pathmatch: no match '[ab]' '[[::]ab]'
ok 708 - pathmatch (via ls-files): no match '[[::]ab]' '[ab]'
ok 709 - ipathmatch: no match '[ab]' '[[::]ab]'
ok 710 - ipathmatch (via ls-files): no match '[[::]ab]' '[ab]'
ok 711 - cleanup after previous file test
ok 712 - setup match file test for [ab]
ok 713 - wildmatch: match '[ab]' '[[:digit]ab]'
ok 714 - wildmatch (via ls-files): match '[[:digit]ab]' '[ab]'
ok 715 - iwildmatch: match '[ab]' '[[:digit]ab]'
ok 716 - iwildmatch (via ls-files): match '[[:digit]ab]' '[ab]'
ok 717 - pathmatch: match '[ab]' '[[:digit]ab]'
ok 718 - pathmatch (via ls-files): match '[[:digit]ab]' '[ab]'
ok 719 - ipathmatch: match '[ab]' '[[:digit]ab]'
ok 720 - ipathmatch (via ls-files): match '[[:digit]ab]' '[ab]'
ok 721 - cleanup after previous file test
ok 722 - setup match file test for [ab]
ok 723 - wildmatch: match '[ab]' '[\[:]ab]'
ok 724 - wildmatch (via ls-files): match '[\[:]ab]' '[ab]'
ok 725 - iwildmatch: match '[ab]' '[\[:]ab]'
ok 726 - iwildmatch (via ls-files): match '[\[:]ab]' '[ab]'
ok 727 - pathmatch: match '[ab]' '[\[:]ab]'
ok 728 - pathmatch (via ls-files): match '[\[:]ab]' '[ab]'
ok 729 - ipathmatch: match '[ab]' '[\[:]ab]'
ok 730 - ipathmatch (via ls-files): match '[\[:]ab]' '[ab]'
ok 731 - cleanup after previous file test
ok 732 - setup match file test for ?a?b
ok 733 - wildmatch: match '?a?b' '\??\?b'
ok 734 - wildmatch (via ls-files): match '\??\?b' '?a?b'
ok 735 - iwildmatch: match '?a?b' '\??\?b'
ok 736 - iwildmatch (via ls-files): match '\??\?b' '?a?b'
ok 737 - pathmatch: match '?a?b' '\??\?b'
ok 738 - pathmatch (via ls-files): match '\??\?b' '?a?b'
ok 739 - ipathmatch: match '?a?b' '\??\?b'
ok 740 - ipathmatch (via ls-files): match '\??\?b' '?a?b'
ok 741 - cleanup after previous file test
ok 742 - setup match file test for abc
ok 743 - wildmatch: match 'abc' '\a\b\c'
ok 744 - wildmatch (via ls-files): match '\a\b\c' 'abc'
ok 745 - iwildmatch: match 'abc' '\a\b\c'
ok 746 - iwildmatch (via ls-files): match '\a\b\c' 'abc'
ok 747 - pathmatch: match 'abc' '\a\b\c'
ok 748 - pathmatch (via ls-files): match '\a\b\c' 'abc'
ok 749 - ipathmatch: match 'abc' '\a\b\c'
ok 750 - ipathmatch (via ls-files): match '\a\b\c' 'abc'
ok 751 - cleanup after previous file test
ok 752 - setup match file test for foo
ok 753 - wildmatch: no match 'foo' ''
ok 754 - wildmatch (via ls-files): match dies on '' 'foo'
ok 755 - iwildmatch: no match 'foo' ''
ok 756 - iwildmatch (via ls-files): match dies on '' 'foo'
ok 757 - pathmatch: no match 'foo' ''
ok 758 - pathmatch (via ls-files): match dies on '' 'foo'
ok 759 - ipathmatch: no match 'foo' ''
ok 760 - ipathmatch (via ls-files): match dies on '' 'foo'
ok 761 - cleanup after previous file test
ok 762 - setup match file test for foo/bar/baz/to
ok 763 - wildmatch: match 'foo/bar/baz/to' '**/t[o]'
ok 764 - wildmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'
ok 765 - iwildmatch: match 'foo/bar/baz/to' '**/t[o]'
ok 766 - iwildmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'
ok 767 - pathmatch: match 'foo/bar/baz/to' '**/t[o]'
ok 768 - pathmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'
ok 769 - ipathmatch: match 'foo/bar/baz/to' '**/t[o]'
ok 770 - ipathmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'
ok 771 - cleanup after previous file test
ok 772 - setup match file test for a1B
ok 773 - wildmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'
ok 774 - wildmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'
ok 775 - iwildmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'
ok 776 - iwildmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'
ok 777 - pathmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'
ok 778 - pathmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'
ok 779 - ipathmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'
ok 780 - ipathmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'
ok 781 - cleanup after previous file test
ok 782 - setup match file test for a
ok 783 - wildmatch: no match 'a' '[[:digit:][:upper:][:space:]]'
ok 784 - wildmatch (via ls-files): no match '[[:digit:][:upper:][:space:]]' 'a'
ok 785 - iwildmatch: match 'a' '[[:digit:][:upper:][:space:]]'
ok 786 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'a'
ok 787 - pathmatch: no match 'a' '[[:digit:][:upper:][:space:]]'
ok 788 - pathmatch (via ls-files): no match '[[:digit:][:upper:][:space:]]' 'a'
ok 789 - ipathmatch: match 'a' '[[:digit:][:upper:][:space:]]'
ok 790 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'a'
ok 791 - cleanup after previous file test
ok 792 - setup match file test for A
ok 793 - wildmatch: match 'A' '[[:digit:][:upper:][:space:]]'
ok 794 - wildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'
ok 795 - iwildmatch: match 'A' '[[:digit:][:upper:][:space:]]'
ok 796 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'
ok 797 - pathmatch: match 'A' '[[:digit:][:upper:][:space:]]'
ok 798 - pathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'
ok 799 - ipathmatch: match 'A' '[[:digit:][:upper:][:space:]]'
ok 800 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'
ok 801 - cleanup after previous file test
ok 802 - setup match file test for 1
ok 803 - wildmatch: match '1' '[[:digit:][:upper:][:space:]]'
ok 804 - wildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'
ok 805 - iwildmatch: match '1' '[[:digit:][:upper:][:space:]]'
ok 806 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'
ok 807 - pathmatch: match '1' '[[:digit:][:upper:][:space:]]'
ok 808 - pathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'
ok 809 - ipathmatch: match '1' '[[:digit:][:upper:][:space:]]'
ok 810 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'
ok 811 - cleanup after previous file test
ok 812 - setup match file test for 1
ok 813 - wildmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'
ok 814 - wildmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'
ok 815 - iwildmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'
ok 816 - iwildmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'
ok 817 - pathmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'
ok 818 - pathmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'
ok 819 - ipathmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'
ok 820 - ipathmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'
ok 821 - cleanup after previous file test
ok 822 - setup match file test for  
ok 823 - wildmatch: match ' ' '[[:digit:][:upper:][:space:]]'
ok 824 - wildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '
ok 825 - iwildmatch: match ' ' '[[:digit:][:upper:][:space:]]'
ok 826 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '
ok 827 - pathmatch: match ' ' '[[:digit:][:upper:][:space:]]'
ok 828 - pathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '
ok 829 - ipathmatch: match ' ' '[[:digit:][:upper:][:space:]]'
ok 830 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '
ok 831 - cleanup after previous file test
ok 832 - setup match file test for .
ok 833 - wildmatch: no match '.' '[[:digit:][:upper:][:space:]]'
not ok 834 - wildmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage
ok 835 - iwildmatch: no match '.' '[[:digit:][:upper:][:space:]]'
not ok 836 - iwildmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage
ok 837 - pathmatch: no match '.' '[[:digit:][:upper:][:space:]]'
not ok 838 - pathmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage
ok 839 - ipathmatch: no match '.' '[[:digit:][:upper:][:space:]]'
not ok 840 - ipathmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage
ok 841 - cleanup after previous file test
ok 842 - setup match file test for .
ok 843 - wildmatch: match '.' '[[:digit:][:punct:][:space:]]'
not ok 844 - wildmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage
ok 845 - iwildmatch: match '.' '[[:digit:][:punct:][:space:]]'
not ok 846 - iwildmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage
ok 847 - pathmatch: match '.' '[[:digit:][:punct:][:space:]]'
not ok 848 - pathmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage
ok 849 - ipathmatch: match '.' '[[:digit:][:punct:][:space:]]'
not ok 850 - ipathmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage
ok 851 - cleanup after previous file test
ok 852 - setup match file test for 5
ok 853 - wildmatch: match '5' '[[:xdigit:]]'
ok 854 - wildmatch (via ls-files): match '[[:xdigit:]]' '5'
ok 855 - iwildmatch: match '5' '[[:xdigit:]]'
ok 856 - iwildmatch (via ls-files): match '[[:xdigit:]]' '5'
ok 857 - pathmatch: match '5' '[[:xdigit:]]'
ok 858 - pathmatch (via ls-files): match '[[:xdigit:]]' '5'
ok 859 - ipathmatch: match '5' '[[:xdigit:]]'
ok 860 - ipathmatch (via ls-files): match '[[:xdigit:]]' '5'
ok 861 - cleanup after previous file test
ok 862 - setup match file test for f
ok 863 - wildmatch: match 'f' '[[:xdigit:]]'
ok 864 - wildmatch (via ls-files): match '[[:xdigit:]]' 'f'
ok 865 - iwildmatch: match 'f' '[[:xdigit:]]'
ok 866 - iwildmatch (via ls-files): match '[[:xdigit:]]' 'f'
ok 867 - pathmatch: match 'f' '[[:xdigit:]]'
ok 868 - pathmatch (via ls-files): match '[[:xdigit:]]' 'f'
ok 869 - ipathmatch: match 'f' '[[:xdigit:]]'
ok 870 - ipathmatch (via ls-files): match '[[:xdigit:]]' 'f'
ok 871 - cleanup after previous file test
ok 872 - setup match file test for D
ok 873 - wildmatch: match 'D' '[[:xdigit:]]'
ok 874 - wildmatch (via ls-files): match '[[:xdigit:]]' 'D'
ok 875 - iwildmatch: match 'D' '[[:xdigit:]]'
ok 876 - iwildmatch (via ls-files): match '[[:xdigit:]]' 'D'
ok 877 - pathmatch: match 'D' '[[:xdigit:]]'
ok 878 - pathmatch (via ls-files): match '[[:xdigit:]]' 'D'
ok 879 - ipathmatch: match 'D' '[[:xdigit:]]'
ok 880 - ipathmatch (via ls-files): match '[[:xdigit:]]' 'D'
ok 881 - cleanup after previous file test
ok 882 - setup match file test for _
ok 883 - wildmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'
ok 884 - wildmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'
ok 885 - iwildmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'
ok 886 - iwildmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'
ok 887 - pathmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'
ok 888 - pathmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'
ok 889 - ipathmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'
ok 890 - ipathmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'
ok 891 - cleanup after previous file test
ok 892 - setup match file test for .
ok 893 - wildmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'
not ok 894 - wildmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage
ok 895 - iwildmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'
not ok 896 - iwildmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage
ok 897 - pathmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'
not ok 898 - pathmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage
ok 899 - ipathmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'
not ok 900 - ipathmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage
ok 901 - cleanup after previous file test
ok 902 - setup match file test for 5
ok 903 - wildmatch: match '5' '[a-c[:digit:]x-z]'
ok 904 - wildmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'
ok 905 - iwildmatch: match '5' '[a-c[:digit:]x-z]'
ok 906 - iwildmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'
ok 907 - pathmatch: match '5' '[a-c[:digit:]x-z]'
ok 908 - pathmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'
ok 909 - ipathmatch: match '5' '[a-c[:digit:]x-z]'
ok 910 - ipathmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'
ok 911 - cleanup after previous file test
ok 912 - setup match file test for b
ok 913 - wildmatch: match 'b' '[a-c[:digit:]x-z]'
ok 914 - wildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'
ok 915 - iwildmatch: match 'b' '[a-c[:digit:]x-z]'
ok 916 - iwildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'
ok 917 - pathmatch: match 'b' '[a-c[:digit:]x-z]'
ok 918 - pathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'
ok 919 - ipathmatch: match 'b' '[a-c[:digit:]x-z]'
ok 920 - ipathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'
ok 921 - cleanup after previous file test
ok 922 - setup match file test for y
ok 923 - wildmatch: match 'y' '[a-c[:digit:]x-z]'
ok 924 - wildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'
ok 925 - iwildmatch: match 'y' '[a-c[:digit:]x-z]'
ok 926 - iwildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'
ok 927 - pathmatch: match 'y' '[a-c[:digit:]x-z]'
ok 928 - pathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'
ok 929 - ipathmatch: match 'y' '[a-c[:digit:]x-z]'
ok 930 - ipathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'
ok 931 - cleanup after previous file test
ok 932 - setup match file test for q
ok 933 - wildmatch: no match 'q' '[a-c[:digit:]x-z]'
ok 934 - wildmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'
ok 935 - iwildmatch: no match 'q' '[a-c[:digit:]x-z]'
ok 936 - iwildmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'
ok 937 - pathmatch: no match 'q' '[a-c[:digit:]x-z]'
ok 938 - pathmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'
ok 939 - ipathmatch: no match 'q' '[a-c[:digit:]x-z]'
ok 940 - ipathmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'
ok 941 - cleanup after previous file test
ok 942 - setup match file test for ]
ok 943 - wildmatch: match ']' '[\\-^]'
ok 944 - wildmatch (via ls-files): match '[\\-^]' ']'
ok 945 - iwildmatch: match ']' '[\\-^]'
ok 946 - iwildmatch (via ls-files): match '[\\-^]' ']'
ok 947 - pathmatch: match ']' '[\\-^]'
ok 948 - pathmatch (via ls-files): match '[\\-^]' ']'
ok 949 - ipathmatch: match ']' '[\\-^]'
ok 950 - ipathmatch (via ls-files): match '[\\-^]' ']'
ok 951 - cleanup after previous file test
ok 952 - setup match file test for [
ok 953 - wildmatch: no match '[' '[\\-^]'
ok 954 - wildmatch (via ls-files): no match '[\\-^]' '['
ok 955 - iwildmatch: no match '[' '[\\-^]'
ok 956 - iwildmatch (via ls-files): no match '[\\-^]' '['
ok 957 - pathmatch: no match '[' '[\\-^]'
ok 958 - pathmatch (via ls-files): no match '[\\-^]' '['
ok 959 - ipathmatch: no match '[' '[\\-^]'
ok 960 - ipathmatch (via ls-files): no match '[\\-^]' '['
ok 961 - cleanup after previous file test
ok 962 - setup match file test for -
ok 963 - wildmatch: match '-' '[\-_]'
ok 964 - wildmatch (via ls-files): match '[\-_]' '-'
ok 965 - iwildmatch: match '-' '[\-_]'
ok 966 - iwildmatch (via ls-files): match '[\-_]' '-'
ok 967 - pathmatch: match '-' '[\-_]'
ok 968 - pathmatch (via ls-files): match '[\-_]' '-'
ok 969 - ipathmatch: match '-' '[\-_]'
ok 970 - ipathmatch (via ls-files): match '[\-_]' '-'
ok 971 - cleanup after previous file test
ok 972 - setup match file test for ]
ok 973 - wildmatch: match ']' '[\]]'
ok 974 - wildmatch (via ls-files): match '[\]]' ']'
ok 975 - iwildmatch: match ']' '[\]]'
ok 976 - iwildmatch (via ls-files): match '[\]]' ']'
ok 977 - pathmatch: match ']' '[\]]'
ok 978 - pathmatch (via ls-files): match '[\]]' ']'
ok 979 - ipathmatch: match ']' '[\]]'
ok 980 - ipathmatch (via ls-files): match '[\]]' ']'
ok 981 - cleanup after previous file test
ok 982 - setup match file test for \]
ok 983 - wildmatch: no match '\]' '[\]]'
ok 984 - wildmatch (via ls-files): no match '[\]]' '\]'
ok 985 - iwildmatch: no match '\]' '[\]]'
ok 986 - iwildmatch (via ls-files): no match '[\]]' '\]'
ok 987 - pathmatch: no match '\]' '[\]]'
ok 988 - pathmatch (via ls-files): no match '[\]]' '\]'
ok 989 - ipathmatch: no match '\]' '[\]]'
ok 990 - ipathmatch (via ls-files): no match '[\]]' '\]'
ok 991 - cleanup after previous file test
ok 992 - setup match file test for \
ok 993 - wildmatch: no match '\' '[\]]'
ok 994 - wildmatch (via ls-files): no match '[\]]' '\'
ok 995 - iwildmatch: no match '\' '[\]]'
ok 996 - iwildmatch (via ls-files): no match '[\]]' '\'
ok 997 - pathmatch: no match '\' '[\]]'
ok 998 - pathmatch (via ls-files): no match '[\]]' '\'
ok 999 - ipathmatch: no match '\' '[\]]'
ok 1000 - ipathmatch (via ls-files): no match '[\]]' '\'
ok 1001 - cleanup after previous file test
ok 1002 - setup match file test for ab
ok 1003 - wildmatch: no match 'ab' 'a[]b'
ok 1004 - wildmatch (via ls-files): no match 'a[]b' 'ab'
ok 1005 - iwildmatch: no match 'ab' 'a[]b'
ok 1006 - iwildmatch (via ls-files): no match 'a[]b' 'ab'
ok 1007 - pathmatch: no match 'ab' 'a[]b'
ok 1008 - pathmatch (via ls-files): no match 'a[]b' 'ab'
ok 1009 - ipathmatch: no match 'ab' 'a[]b'
ok 1010 - ipathmatch (via ls-files): no match 'a[]b' 'ab'
ok 1011 - cleanup after previous file test
ok 1012 - setup match file test for a[]b
ok 1013 - wildmatch: no match 'a[]b' 'a[]b'
ok 1014 - wildmatch (via ls-files): match 'a[]b' 'a[]b'
ok 1015 - iwildmatch: no match 'a[]b' 'a[]b'
ok 1016 - iwildmatch (via ls-files): match 'a[]b' 'a[]b'
ok 1017 - pathmatch: no match 'a[]b' 'a[]b'
ok 1018 - pathmatch (via ls-files): match 'a[]b' 'a[]b'
ok 1019 - ipathmatch: no match 'a[]b' 'a[]b'
ok 1020 - ipathmatch (via ls-files): match 'a[]b' 'a[]b'
ok 1021 - cleanup after previous file test
ok 1022 - setup match file test for ab[
ok 1023 - wildmatch: no match 'ab[' 'ab['
ok 1024 - wildmatch (via ls-files): match 'ab[' 'ab['
ok 1025 - iwildmatch: no match 'ab[' 'ab['
ok 1026 - iwildmatch (via ls-files): match 'ab[' 'ab['
ok 1027 - pathmatch: no match 'ab[' 'ab['
ok 1028 - pathmatch (via ls-files): match 'ab[' 'ab['
ok 1029 - ipathmatch: no match 'ab[' 'ab['
ok 1030 - ipathmatch (via ls-files): match 'ab[' 'ab['
ok 1031 - cleanup after previous file test
ok 1032 - setup match file test for ab
ok 1033 - wildmatch: no match 'ab' '[!'
ok 1034 - wildmatch (via ls-files): no match '[!' 'ab'
ok 1035 - iwildmatch: no match 'ab' '[!'
ok 1036 - iwildmatch (via ls-files): no match '[!' 'ab'
ok 1037 - pathmatch: no match 'ab' '[!'
ok 1038 - pathmatch (via ls-files): no match '[!' 'ab'
ok 1039 - ipathmatch: no match 'ab' '[!'
ok 1040 - ipathmatch (via ls-files): no match '[!' 'ab'
ok 1041 - cleanup after previous file test
ok 1042 - setup match file test for ab
ok 1043 - wildmatch: no match 'ab' '[-'
ok 1044 - wildmatch (via ls-files): no match '[-' 'ab'
ok 1045 - iwildmatch: no match 'ab' '[-'
ok 1046 - iwildmatch (via ls-files): no match '[-' 'ab'
ok 1047 - pathmatch: no match 'ab' '[-'
ok 1048 - pathmatch (via ls-files): no match '[-' 'ab'
ok 1049 - ipathmatch: no match 'ab' '[-'
ok 1050 - ipathmatch (via ls-files): no match '[-' 'ab'
ok 1051 - cleanup after previous file test
ok 1052 - setup match file test for -
ok 1053 - wildmatch: match '-' '[-]'
ok 1054 - wildmatch (via ls-files): match '[-]' '-'
ok 1055 - iwildmatch: match '-' '[-]'
ok 1056 - iwildmatch (via ls-files): match '[-]' '-'
ok 1057 - pathmatch: match '-' '[-]'
ok 1058 - pathmatch (via ls-files): match '[-]' '-'
ok 1059 - ipathmatch: match '-' '[-]'
ok 1060 - ipathmatch (via ls-files): match '[-]' '-'
ok 1061 - cleanup after previous file test
ok 1062 - setup match file test for -
ok 1063 - wildmatch: no match '-' '[a-'
ok 1064 - wildmatch (via ls-files): no match '[a-' '-'
ok 1065 - iwildmatch: no match '-' '[a-'
ok 1066 - iwildmatch (via ls-files): no match '[a-' '-'
ok 1067 - pathmatch: no match '-' '[a-'
ok 1068 - pathmatch (via ls-files): no match '[a-' '-'
ok 1069 - ipathmatch: no match '-' '[a-'
ok 1070 - ipathmatch (via ls-files): no match '[a-' '-'
ok 1071 - cleanup after previous file test
ok 1072 - setup match file test for -
ok 1073 - wildmatch: no match '-' '[!a-'
ok 1074 - wildmatch (via ls-files): no match '[!a-' '-'
ok 1075 - iwildmatch: no match '-' '[!a-'
ok 1076 - iwildmatch (via ls-files): no match '[!a-' '-'
ok 1077 - pathmatch: no match '-' '[!a-'
ok 1078 - pathmatch (via ls-files): no match '[!a-' '-'
ok 1079 - ipathmatch: no match '-' '[!a-'
ok 1080 - ipathmatch (via ls-files): no match '[!a-' '-'
ok 1081 - cleanup after previous file test
ok 1082 - setup match file test for -
ok 1083 - wildmatch: match '-' '[--A]'
ok 1084 - wildmatch (via ls-files): match '[--A]' '-'
ok 1085 - iwildmatch: match '-' '[--A]'
ok 1086 - iwildmatch (via ls-files): match '[--A]' '-'
ok 1087 - pathmatch: match '-' '[--A]'
ok 1088 - pathmatch (via ls-files): match '[--A]' '-'
ok 1089 - ipathmatch: match '-' '[--A]'
ok 1090 - ipathmatch (via ls-files): match '[--A]' '-'
ok 1091 - cleanup after previous file test
ok 1092 - setup match file test for 5
ok 1093 - wildmatch: match '5' '[--A]'
ok 1094 - wildmatch (via ls-files): match '[--A]' '5'
ok 1095 - iwildmatch: match '5' '[--A]'
ok 1096 - iwildmatch (via ls-files): match '[--A]' '5'
ok 1097 - pathmatch: match '5' '[--A]'
ok 1098 - pathmatch (via ls-files): match '[--A]' '5'
ok 1099 - ipathmatch: match '5' '[--A]'
ok 1100 - ipathmatch (via ls-files): match '[--A]' '5'
ok 1101 - cleanup after previous file test
ok 1102 - setup match file test for  
ok 1103 - wildmatch: match ' ' '[ --]'
ok 1104 - wildmatch (via ls-files): match '[ --]' ' '
ok 1105 - iwildmatch: match ' ' '[ --]'
ok 1106 - iwildmatch (via ls-files): match '[ --]' ' '
ok 1107 - pathmatch: match ' ' '[ --]'
ok 1108 - pathmatch (via ls-files): match '[ --]' ' '
ok 1109 - ipathmatch: match ' ' '[ --]'
ok 1110 - ipathmatch (via ls-files): match '[ --]' ' '
ok 1111 - cleanup after previous file test
ok 1112 - setup match file test for $
ok 1113 - wildmatch: match '$' '[ --]'
ok 1114 - wildmatch (via ls-files): match '[ --]' '$'
ok 1115 - iwildmatch: match '$' '[ --]'
ok 1116 - iwildmatch (via ls-files): match '[ --]' '$'
ok 1117 - pathmatch: match '$' '[ --]'
ok 1118 - pathmatch (via ls-files): match '[ --]' '$'
ok 1119 - ipathmatch: match '$' '[ --]'
ok 1120 - ipathmatch (via ls-files): match '[ --]' '$'
ok 1121 - cleanup after previous file test
ok 1122 - setup match file test for -
ok 1123 - wildmatch: match '-' '[ --]'
ok 1124 - wildmatch (via ls-files): match '[ --]' '-'
ok 1125 - iwildmatch: match '-' '[ --]'
ok 1126 - iwildmatch (via ls-files): match '[ --]' '-'
ok 1127 - pathmatch: match '-' '[ --]'
ok 1128 - pathmatch (via ls-files): match '[ --]' '-'
ok 1129 - ipathmatch: match '-' '[ --]'
ok 1130 - ipathmatch (via ls-files): match '[ --]' '-'
ok 1131 - cleanup after previous file test
ok 1132 - setup match file test for 0
ok 1133 - wildmatch: no match '0' '[ --]'
ok 1134 - wildmatch (via ls-files): no match '[ --]' '0'
ok 1135 - iwildmatch: no match '0' '[ --]'
ok 1136 - iwildmatch (via ls-files): no match '[ --]' '0'
ok 1137 - pathmatch: no match '0' '[ --]'
ok 1138 - pathmatch (via ls-files): no match '[ --]' '0'
ok 1139 - ipathmatch: no match '0' '[ --]'
ok 1140 - ipathmatch (via ls-files): no match '[ --]' '0'
ok 1141 - cleanup after previous file test
ok 1142 - setup match file test for -
ok 1143 - wildmatch: match '-' '[---]'
ok 1144 - wildmatch (via ls-files): match '[---]' '-'
ok 1145 - iwildmatch: match '-' '[---]'
ok 1146 - iwildmatch (via ls-files): match '[---]' '-'
ok 1147 - pathmatch: match '-' '[---]'
ok 1148 - pathmatch (via ls-files): match '[---]' '-'
ok 1149 - ipathmatch: match '-' '[---]'
ok 1150 - ipathmatch (via ls-files): match '[---]' '-'
ok 1151 - cleanup after previous file test
ok 1152 - setup match file test for -
ok 1153 - wildmatch: match '-' '[------]'
ok 1154 - wildmatch (via ls-files): match '[------]' '-'
ok 1155 - iwildmatch: match '-' '[------]'
ok 1156 - iwildmatch (via ls-files): match '[------]' '-'
ok 1157 - pathmatch: match '-' '[------]'
ok 1158 - pathmatch (via ls-files): match '[------]' '-'
ok 1159 - ipathmatch: match '-' '[------]'
ok 1160 - ipathmatch (via ls-files): match '[------]' '-'
ok 1161 - cleanup after previous file test
ok 1162 - setup match file test for j
ok 1163 - wildmatch: no match 'j' '[a-e-n]'
ok 1164 - wildmatch (via ls-files): no match '[a-e-n]' 'j'
ok 1165 - iwildmatch: no match 'j' '[a-e-n]'
ok 1166 - iwildmatch (via ls-files): no match '[a-e-n]' 'j'
ok 1167 - pathmatch: no match 'j' '[a-e-n]'
ok 1168 - pathmatch (via ls-files): no match '[a-e-n]' 'j'
ok 1169 - ipathmatch: no match 'j' '[a-e-n]'
ok 1170 - ipathmatch (via ls-files): no match '[a-e-n]' 'j'
ok 1171 - cleanup after previous file test
ok 1172 - setup match file test for -
ok 1173 - wildmatch: match '-' '[a-e-n]'
ok 1174 - wildmatch (via ls-files): match '[a-e-n]' '-'
ok 1175 - iwildmatch: match '-' '[a-e-n]'
ok 1176 - iwildmatch (via ls-files): match '[a-e-n]' '-'
ok 1177 - pathmatch: match '-' '[a-e-n]'
ok 1178 - pathmatch (via ls-files): match '[a-e-n]' '-'
ok 1179 - ipathmatch: match '-' '[a-e-n]'
ok 1180 - ipathmatch (via ls-files): match '[a-e-n]' '-'
ok 1181 - cleanup after previous file test
ok 1182 - setup match file test for a
ok 1183 - wildmatch: match 'a' '[!------]'
ok 1184 - wildmatch (via ls-files): match '[!------]' 'a'
ok 1185 - iwildmatch: match 'a' '[!------]'
ok 1186 - iwildmatch (via ls-files): match '[!------]' 'a'
ok 1187 - pathmatch: match 'a' '[!------]'
ok 1188 - pathmatch (via ls-files): match '[!------]' 'a'
ok 1189 - ipathmatch: match 'a' '[!------]'
ok 1190 - ipathmatch (via ls-files): match '[!------]' 'a'
ok 1191 - cleanup after previous file test
ok 1192 - setup match file test for [
ok 1193 - wildmatch: no match '[' '[]-a]'
ok 1194 - wildmatch (via ls-files): no match '[]-a]' '['
ok 1195 - iwildmatch: no match '[' '[]-a]'
ok 1196 - iwildmatch (via ls-files): no match '[]-a]' '['
ok 1197 - pathmatch: no match '[' '[]-a]'
ok 1198 - pathmatch (via ls-files): no match '[]-a]' '['
ok 1199 - ipathmatch: no match '[' '[]-a]'
ok 1200 - ipathmatch (via ls-files): no match '[]-a]' '['
ok 1201 - cleanup after previous file test
ok 1202 - setup match file test for ^
ok 1203 - wildmatch: match '^' '[]-a]'
ok 1204 - wildmatch (via ls-files): match '[]-a]' '^'
ok 1205 - iwildmatch: match '^' '[]-a]'
ok 1206 - iwildmatch (via ls-files): match '[]-a]' '^'
ok 1207 - pathmatch: match '^' '[]-a]'
ok 1208 - pathmatch (via ls-files): match '[]-a]' '^'
ok 1209 - ipathmatch: match '^' '[]-a]'
ok 1210 - ipathmatch (via ls-files): match '[]-a]' '^'
ok 1211 - cleanup after previous file test
ok 1212 - setup match file test for ^
ok 1213 - wildmatch: no match '^' '[!]-a]'
ok 1214 - wildmatch (via ls-files): no match '[!]-a]' '^'
ok 1215 - iwildmatch: no match '^' '[!]-a]'
ok 1216 - iwildmatch (via ls-files): no match '[!]-a]' '^'
ok 1217 - pathmatch: no match '^' '[!]-a]'
ok 1218 - pathmatch (via ls-files): no match '[!]-a]' '^'
ok 1219 - ipathmatch: no match '^' '[!]-a]'
ok 1220 - ipathmatch (via ls-files): no match '[!]-a]' '^'
ok 1221 - cleanup after previous file test
ok 1222 - setup match file test for [
ok 1223 - wildmatch: match '[' '[!]-a]'
ok 1224 - wildmatch (via ls-files): match '[!]-a]' '['
ok 1225 - iwildmatch: match '[' '[!]-a]'
ok 1226 - iwildmatch (via ls-files): match '[!]-a]' '['
ok 1227 - pathmatch: match '[' '[!]-a]'
ok 1228 - pathmatch (via ls-files): match '[!]-a]' '['
ok 1229 - ipathmatch: match '[' '[!]-a]'
ok 1230 - ipathmatch (via ls-files): match '[!]-a]' '['
ok 1231 - cleanup after previous file test
ok 1232 - setup match file test for ^
ok 1233 - wildmatch: match '^' '[a^bc]'
ok 1234 - wildmatch (via ls-files): match '[a^bc]' '^'
ok 1235 - iwildmatch: match '^' '[a^bc]'
ok 1236 - iwildmatch (via ls-files): match '[a^bc]' '^'
ok 1237 - pathmatch: match '^' '[a^bc]'
ok 1238 - pathmatch (via ls-files): match '[a^bc]' '^'
ok 1239 - ipathmatch: match '^' '[a^bc]'
ok 1240 - ipathmatch (via ls-files): match '[a^bc]' '^'
ok 1241 - cleanup after previous file test
ok 1242 - setup match file test for -b]
ok 1243 - wildmatch: match '-b]' '[a-]b]'
ok 1244 - wildmatch (via ls-files): match '[a-]b]' '-b]'
ok 1245 - iwildmatch: match '-b]' '[a-]b]'
ok 1246 - iwildmatch (via ls-files): match '[a-]b]' '-b]'
ok 1247 - pathmatch: match '-b]' '[a-]b]'
ok 1248 - pathmatch (via ls-files): match '[a-]b]' '-b]'
ok 1249 - ipathmatch: match '-b]' '[a-]b]'
ok 1250 - ipathmatch (via ls-files): match '[a-]b]' '-b]'
ok 1251 - cleanup after previous file test
ok 1252 - setup match file test for \
ok 1253 - wildmatch: no match '\' '[\]'
ok 1254 - wildmatch (via ls-files): no match '[\]' '\'
ok 1255 - iwildmatch: no match '\' '[\]'
ok 1256 - iwildmatch (via ls-files): no match '[\]' '\'
ok 1257 - pathmatch: no match '\' '[\]'
ok 1258 - pathmatch (via ls-files): no match '[\]' '\'
ok 1259 - ipathmatch: no match '\' '[\]'
ok 1260 - ipathmatch (via ls-files): no match '[\]' '\'
ok 1261 - cleanup after previous file test
ok 1262 - setup match file test for \
ok 1263 - wildmatch: match '\' '[\\]'
ok 1264 - wildmatch (via ls-files): match '[\\]' '\'
ok 1265 - iwildmatch: match '\' '[\\]'
ok 1266 - iwildmatch (via ls-files): match '[\\]' '\'
ok 1267 - pathmatch: match '\' '[\\]'
ok 1268 - pathmatch (via ls-files): match '[\\]' '\'
ok 1269 - ipathmatch: match '\' '[\\]'
ok 1270 - ipathmatch (via ls-files): match '[\\]' '\'
ok 1271 - cleanup after previous file test
ok 1272 - setup match file test for \
ok 1273 - wildmatch: no match '\' '[!\\]'
ok 1274 - wildmatch (via ls-files): no match '[!\\]' '\'
ok 1275 - iwildmatch: no match '\' '[!\\]'
ok 1276 - iwildmatch (via ls-files): no match '[!\\]' '\'
ok 1277 - pathmatch: no match '\' '[!\\]'
ok 1278 - pathmatch (via ls-files): no match '[!\\]' '\'
ok 1279 - ipathmatch: no match '\' '[!\\]'
ok 1280 - ipathmatch (via ls-files): no match '[!\\]' '\'
ok 1281 - cleanup after previous file test
ok 1282 - setup match file test for G
ok 1283 - wildmatch: match 'G' '[A-\\]'
ok 1284 - wildmatch (via ls-files): match '[A-\\]' 'G'
ok 1285 - iwildmatch: match 'G' '[A-\\]'
ok 1286 - iwildmatch (via ls-files): match '[A-\\]' 'G'
ok 1287 - pathmatch: match 'G' '[A-\\]'
ok 1288 - pathmatch (via ls-files): match '[A-\\]' 'G'
ok 1289 - ipathmatch: match 'G' '[A-\\]'
ok 1290 - ipathmatch (via ls-files): match '[A-\\]' 'G'
ok 1291 - cleanup after previous file test
ok 1292 - setup match file test for aaabbb
ok 1293 - wildmatch: no match 'aaabbb' 'b*a'
ok 1294 - wildmatch (via ls-files): no match 'b*a' 'aaabbb'
ok 1295 - iwildmatch: no match 'aaabbb' 'b*a'
ok 1296 - iwildmatch (via ls-files): no match 'b*a' 'aaabbb'
ok 1297 - pathmatch: no match 'aaabbb' 'b*a'
ok 1298 - pathmatch (via ls-files): no match 'b*a' 'aaabbb'
ok 1299 - ipathmatch: no match 'aaabbb' 'b*a'
ok 1300 - ipathmatch (via ls-files): no match 'b*a' 'aaabbb'
ok 1301 - cleanup after previous file test
ok 1302 - setup match file test for aabcaa
ok 1303 - wildmatch: no match 'aabcaa' '*ba*'
ok 1304 - wildmatch (via ls-files): no match '*ba*' 'aabcaa'
ok 1305 - iwildmatch: no match 'aabcaa' '*ba*'
ok 1306 - iwildmatch (via ls-files): no match '*ba*' 'aabcaa'
ok 1307 - pathmatch: no match 'aabcaa' '*ba*'
ok 1308 - pathmatch (via ls-files): no match '*ba*' 'aabcaa'
ok 1309 - ipathmatch: no match 'aabcaa' '*ba*'
ok 1310 - ipathmatch (via ls-files): no match '*ba*' 'aabcaa'
ok 1311 - cleanup after previous file test
ok 1312 - setup match file test for ,
ok 1313 - wildmatch: match ',' '[,]'
ok 1314 - wildmatch (via ls-files): match '[,]' ','
ok 1315 - iwildmatch: match ',' '[,]'
ok 1316 - iwildmatch (via ls-files): match '[,]' ','
ok 1317 - pathmatch: match ',' '[,]'
ok 1318 - pathmatch (via ls-files): match '[,]' ','
ok 1319 - ipathmatch: match ',' '[,]'
ok 1320 - ipathmatch (via ls-files): match '[,]' ','
ok 1321 - cleanup after previous file test
ok 1322 - setup match file test for ,
ok 1323 - wildmatch: match ',' '[\\,]'
ok 1324 - wildmatch (via ls-files): match '[\\,]' ','
ok 1325 - iwildmatch: match ',' '[\\,]'
ok 1326 - iwildmatch (via ls-files): match '[\\,]' ','
ok 1327 - pathmatch: match ',' '[\\,]'
ok 1328 - pathmatch (via ls-files): match '[\\,]' ','
ok 1329 - ipathmatch: match ',' '[\\,]'
ok 1330 - ipathmatch (via ls-files): match '[\\,]' ','
ok 1331 - cleanup after previous file test
ok 1332 - setup match file test for \
ok 1333 - wildmatch: match '\' '[\\,]'
ok 1334 - wildmatch (via ls-files): match '[\\,]' '\'
ok 1335 - iwildmatch: match '\' '[\\,]'
ok 1336 - iwildmatch (via ls-files): match '[\\,]' '\'
ok 1337 - pathmatch: match '\' '[\\,]'
ok 1338 - pathmatch (via ls-files): match '[\\,]' '\'
ok 1339 - ipathmatch: match '\' '[\\,]'
ok 1340 - ipathmatch (via ls-files): match '[\\,]' '\'
ok 1341 - cleanup after previous file test
ok 1342 - setup match file test for -
ok 1343 - wildmatch: match '-' '[,-.]'
ok 1344 - wildmatch (via ls-files): match '[,-.]' '-'
ok 1345 - iwildmatch: match '-' '[,-.]'
ok 1346 - iwildmatch (via ls-files): match '[,-.]' '-'
ok 1347 - pathmatch: match '-' '[,-.]'
ok 1348 - pathmatch (via ls-files): match '[,-.]' '-'
ok 1349 - ipathmatch: match '-' '[,-.]'
ok 1350 - ipathmatch (via ls-files): match '[,-.]' '-'
ok 1351 - cleanup after previous file test
ok 1352 - setup match file test for +
ok 1353 - wildmatch: no match '+' '[,-.]'
ok 1354 - wildmatch (via ls-files): no match '[,-.]' '+'
ok 1355 - iwildmatch: no match '+' '[,-.]'
ok 1356 - iwildmatch (via ls-files): no match '[,-.]' '+'
ok 1357 - pathmatch: no match '+' '[,-.]'
ok 1358 - pathmatch (via ls-files): no match '[,-.]' '+'
ok 1359 - ipathmatch: no match '+' '[,-.]'
ok 1360 - ipathmatch (via ls-files): no match '[,-.]' '+'
ok 1361 - cleanup after previous file test
ok 1362 - setup match file test for -.]
ok 1363 - wildmatch: no match '-.]' '[,-.]'
ok 1364 - wildmatch (via ls-files): no match '[,-.]' '-.]'
ok 1365 - iwildmatch: no match '-.]' '[,-.]'
ok 1366 - iwildmatch (via ls-files): no match '[,-.]' '-.]'
ok 1367 - pathmatch: no match '-.]' '[,-.]'
ok 1368 - pathmatch (via ls-files): no match '[,-.]' '-.]'
ok 1369 - ipathmatch: no match '-.]' '[,-.]'
ok 1370 - ipathmatch (via ls-files): no match '[,-.]' '-.]'
ok 1371 - cleanup after previous file test
ok 1372 - setup match file test for 2
ok 1373 - wildmatch: match '2' '[\1-\3]'
ok 1374 - wildmatch (via ls-files): match '[\1-\3]' '2'
ok 1375 - iwildmatch: match '2' '[\1-\3]'
ok 1376 - iwildmatch (via ls-files): match '[\1-\3]' '2'
ok 1377 - pathmatch: match '2' '[\1-\3]'
ok 1378 - pathmatch (via ls-files): match '[\1-\3]' '2'
ok 1379 - ipathmatch: match '2' '[\1-\3]'
ok 1380 - ipathmatch (via ls-files): match '[\1-\3]' '2'
ok 1381 - cleanup after previous file test
ok 1382 - setup match file test for 3
ok 1383 - wildmatch: match '3' '[\1-\3]'
ok 1384 - wildmatch (via ls-files): match '[\1-\3]' '3'
ok 1385 - iwildmatch: match '3' '[\1-\3]'
ok 1386 - iwildmatch (via ls-files): match '[\1-\3]' '3'
ok 1387 - pathmatch: match '3' '[\1-\3]'
ok 1388 - pathmatch (via ls-files): match '[\1-\3]' '3'
ok 1389 - ipathmatch: match '3' '[\1-\3]'
ok 1390 - ipathmatch (via ls-files): match '[\1-\3]' '3'
ok 1391 - cleanup after previous file test
ok 1392 - setup match file test for 4
ok 1393 - wildmatch: no match '4' '[\1-\3]'
ok 1394 - wildmatch (via ls-files): no match '[\1-\3]' '4'
ok 1395 - iwildmatch: no match '4' '[\1-\3]'
ok 1396 - iwildmatch (via ls-files): no match '[\1-\3]' '4'
ok 1397 - pathmatch: no match '4' '[\1-\3]'
ok 1398 - pathmatch (via ls-files): no match '[\1-\3]' '4'
ok 1399 - ipathmatch: no match '4' '[\1-\3]'
ok 1400 - ipathmatch (via ls-files): no match '[\1-\3]' '4'
ok 1401 - cleanup after previous file test
ok 1402 - setup match file test for \
ok 1403 - wildmatch: match '\' '[[-\]]'
ok 1404 - wildmatch (via ls-files): match '[[-\]]' '\'
ok 1405 - iwildmatch: match '\' '[[-\]]'
ok 1406 - iwildmatch (via ls-files): match '[[-\]]' '\'
ok 1407 - pathmatch: match '\' '[[-\]]'
ok 1408 - pathmatch (via ls-files): match '[[-\]]' '\'
ok 1409 - ipathmatch: match '\' '[[-\]]'
ok 1410 - ipathmatch (via ls-files): match '[[-\]]' '\'
ok 1411 - cleanup after previous file test
ok 1412 - setup match file test for [
ok 1413 - wildmatch: match '[' '[[-\]]'
ok 1414 - wildmatch (via ls-files): match '[[-\]]' '['
ok 1415 - iwildmatch: match '[' '[[-\]]'
ok 1416 - iwildmatch (via ls-files): match '[[-\]]' '['
ok 1417 - pathmatch: match '[' '[[-\]]'
ok 1418 - pathmatch (via ls-files): match '[[-\]]' '['
ok 1419 - ipathmatch: match '[' '[[-\]]'
ok 1420 - ipathmatch (via ls-files): match '[[-\]]' '['
ok 1421 - cleanup after previous file test
ok 1422 - setup match file test for ]
ok 1423 - wildmatch: match ']' '[[-\]]'
ok 1424 - wildmatch (via ls-files): match '[[-\]]' ']'
ok 1425 - iwildmatch: match ']' '[[-\]]'
ok 1426 - iwildmatch (via ls-files): match '[[-\]]' ']'
ok 1427 - pathmatch: match ']' '[[-\]]'
ok 1428 - pathmatch (via ls-files): match '[[-\]]' ']'
ok 1429 - ipathmatch: match ']' '[[-\]]'
ok 1430 - ipathmatch (via ls-files): match '[[-\]]' ']'
ok 1431 - cleanup after previous file test
ok 1432 - setup match file test for -
ok 1433 - wildmatch: no match '-' '[[-\]]'
ok 1434 - wildmatch (via ls-files): no match '[[-\]]' '-'
ok 1435 - iwildmatch: no match '-' '[[-\]]'
ok 1436 - iwildmatch (via ls-files): no match '[[-\]]' '-'
ok 1437 - pathmatch: no match '-' '[[-\]]'
ok 1438 - pathmatch (via ls-files): no match '[[-\]]' '-'
ok 1439 - ipathmatch: no match '-' '[[-\]]'
ok 1440 - ipathmatch (via ls-files): no match '[[-\]]' '-'
ok 1441 - cleanup after previous file test
ok 1442 - setup match file test for -adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1
ok 1443 - wildmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1444 - wildmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'
ok 1445 - iwildmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1446 - iwildmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'
ok 1447 - pathmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1448 - pathmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'
ok 1449 - ipathmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1450 - ipathmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'
ok 1451 - cleanup after previous file test
ok 1452 - setup match file test for -adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1
ok 1453 - wildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1454 - wildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'
ok 1455 - iwildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1456 - iwildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'
ok 1457 - pathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1458 - pathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'
ok 1459 - ipathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1460 - ipathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'
ok 1461 - cleanup after previous file test
ok 1462 - setup match file test for -adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1
ok 1463 - wildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1464 - wildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'
ok 1465 - iwildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1466 - iwildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'
ok 1467 - pathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1468 - pathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'
ok 1469 - ipathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1470 - ipathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'
ok 1471 - cleanup after previous file test
ok 1472 - setup match file test for XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1
ok 1473 - wildmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1474 - wildmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage
ok 1475 - iwildmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1476 - iwildmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage
ok 1477 - pathmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1478 - pathmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage
ok 1479 - ipathmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1480 - ipathmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage
ok 1481 - cleanup after previous file test
ok 1482 - setup match file test for XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1
ok 1483 - wildmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1484 - wildmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage
ok 1485 - iwildmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1486 - iwildmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage
ok 1487 - pathmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1488 - pathmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage
ok 1489 - ipathmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1490 - ipathmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage
ok 1491 - cleanup after previous file test
ok 1492 - setup match file test for abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt
ok 1493 - wildmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'
ok 1494 - wildmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'
ok 1495 - iwildmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'
ok 1496 - iwildmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'
ok 1497 - pathmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'
ok 1498 - pathmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'
ok 1499 - ipathmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'
ok 1500 - ipathmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'
ok 1501 - cleanup after previous file test
ok 1502 - setup match file test for abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz
ok 1503 - wildmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'
ok 1504 - wildmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'
ok 1505 - iwildmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'
ok 1506 - iwildmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'
ok 1507 - pathmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'
ok 1508 - pathmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'
ok 1509 - ipathmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'
ok 1510 - ipathmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'
ok 1511 - cleanup after previous file test
ok 1512 - setup match file test for foo
ok 1513 - wildmatch: no match 'foo' '*/*/*'
ok 1514 - wildmatch (via ls-files): no match '*/*/*' 'foo'
ok 1515 - iwildmatch: no match 'foo' '*/*/*'
ok 1516 - iwildmatch (via ls-files): no match '*/*/*' 'foo'
ok 1517 - pathmatch: no match 'foo' '*/*/*'
ok 1518 - pathmatch (via ls-files): no match '*/*/*' 'foo'
ok 1519 - ipathmatch: no match 'foo' '*/*/*'
ok 1520 - ipathmatch (via ls-files): no match '*/*/*' 'foo'
ok 1521 - cleanup after previous file test
ok 1522 - setup match file test for foo/bar
ok 1523 - wildmatch: no match 'foo/bar' '*/*/*'
ok 1524 - wildmatch (via ls-files): no match '*/*/*' 'foo/bar'
ok 1525 - iwildmatch: no match 'foo/bar' '*/*/*'
ok 1526 - iwildmatch (via ls-files): no match '*/*/*' 'foo/bar'
ok 1527 - pathmatch: no match 'foo/bar' '*/*/*'
ok 1528 - pathmatch (via ls-files): no match '*/*/*' 'foo/bar'
ok 1529 - ipathmatch: no match 'foo/bar' '*/*/*'
ok 1530 - ipathmatch (via ls-files): no match '*/*/*' 'foo/bar'
ok 1531 - cleanup after previous file test
ok 1532 - setup match file test for foo/bba/arr
ok 1533 - wildmatch: match 'foo/bba/arr' '*/*/*'
ok 1534 - wildmatch (via ls-files): match '*/*/*' 'foo/bba/arr'
ok 1535 - iwildmatch: match 'foo/bba/arr' '*/*/*'
ok 1536 - iwildmatch (via ls-files): match '*/*/*' 'foo/bba/arr'
ok 1537 - pathmatch: match 'foo/bba/arr' '*/*/*'
ok 1538 - pathmatch (via ls-files): match '*/*/*' 'foo/bba/arr'
ok 1539 - ipathmatch: match 'foo/bba/arr' '*/*/*'
ok 1540 - ipathmatch (via ls-files): match '*/*/*' 'foo/bba/arr'
ok 1541 - cleanup after previous file test
ok 1542 - setup match file test for foo/bb/aa/rr
ok 1543 - wildmatch: no match 'foo/bb/aa/rr' '*/*/*'
ok 1544 - wildmatch (via ls-files): no match '*/*/*' 'foo/bb/aa/rr'
ok 1545 - iwildmatch: no match 'foo/bb/aa/rr' '*/*/*'
ok 1546 - iwildmatch (via ls-files): no match '*/*/*' 'foo/bb/aa/rr'
ok 1547 - pathmatch: match 'foo/bb/aa/rr' '*/*/*'
ok 1548 - pathmatch (via ls-files): match '*/*/*' 'foo/bb/aa/rr'
ok 1549 - ipathmatch: match 'foo/bb/aa/rr' '*/*/*'
ok 1550 - ipathmatch (via ls-files): match '*/*/*' 'foo/bb/aa/rr'
ok 1551 - cleanup after previous file test
ok 1552 - setup match file test for foo/bb/aa/rr
ok 1553 - wildmatch: match 'foo/bb/aa/rr' '**/**/**'
ok 1554 - wildmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'
ok 1555 - iwildmatch: match 'foo/bb/aa/rr' '**/**/**'
ok 1556 - iwildmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'
ok 1557 - pathmatch: match 'foo/bb/aa/rr' '**/**/**'
ok 1558 - pathmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'
ok 1559 - ipathmatch: match 'foo/bb/aa/rr' '**/**/**'
ok 1560 - ipathmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'
ok 1561 - cleanup after previous file test
ok 1562 - setup match file test for abcXdefXghi
ok 1563 - wildmatch: match 'abcXdefXghi' '*X*i'
ok 1564 - wildmatch (via ls-files): match '*X*i' 'abcXdefXghi'
ok 1565 - iwildmatch: match 'abcXdefXghi' '*X*i'
ok 1566 - iwildmatch (via ls-files): match '*X*i' 'abcXdefXghi'
ok 1567 - pathmatch: match 'abcXdefXghi' '*X*i'
ok 1568 - pathmatch (via ls-files): match '*X*i' 'abcXdefXghi'
ok 1569 - ipathmatch: match 'abcXdefXghi' '*X*i'
ok 1570 - ipathmatch (via ls-files): match '*X*i' 'abcXdefXghi'
ok 1571 - cleanup after previous file test
ok 1572 - setup match file test for ab/cXd/efXg/hi
ok 1573 - wildmatch: no match 'ab/cXd/efXg/hi' '*X*i'
ok 1574 - wildmatch (via ls-files): no match '*X*i' 'ab/cXd/efXg/hi'
ok 1575 - iwildmatch: no match 'ab/cXd/efXg/hi' '*X*i'
ok 1576 - iwildmatch (via ls-files): no match '*X*i' 'ab/cXd/efXg/hi'
ok 1577 - pathmatch: match 'ab/cXd/efXg/hi' '*X*i'
ok 1578 - pathmatch (via ls-files): match '*X*i' 'ab/cXd/efXg/hi'
ok 1579 - ipathmatch: match 'ab/cXd/efXg/hi' '*X*i'
ok 1580 - ipathmatch (via ls-files): match '*X*i' 'ab/cXd/efXg/hi'
ok 1581 - cleanup after previous file test
ok 1582 - setup match file test for ab/cXd/efXg/hi
ok 1583 - wildmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'
ok 1584 - wildmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'
ok 1585 - iwildmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'
ok 1586 - iwildmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'
ok 1587 - pathmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'
ok 1588 - pathmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'
ok 1589 - ipathmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'
ok 1590 - ipathmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'
ok 1591 - cleanup after previous file test
ok 1592 - setup match file test for ab/cXd/efXg/hi
ok 1593 - wildmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'
ok 1594 - wildmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'
ok 1595 - iwildmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'
ok 1596 - iwildmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'
ok 1597 - pathmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'
ok 1598 - pathmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'
ok 1599 - ipathmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'
ok 1600 - ipathmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'
ok 1601 - cleanup after previous file test
ok 1602 - setup match file test for foo
ok 1603 - wildmatch: no match 'foo' 'fo'
ok 1604 - wildmatch (via ls-files): no match 'fo' 'foo'
ok 1605 - iwildmatch: no match 'foo' 'fo'
ok 1606 - iwildmatch (via ls-files): no match 'fo' 'foo'
ok 1607 - pathmatch: no match 'foo' 'fo'
ok 1608 - pathmatch (via ls-files): no match 'fo' 'foo'
ok 1609 - ipathmatch: no match 'foo' 'fo'
ok 1610 - ipathmatch (via ls-files): no match 'fo' 'foo'
ok 1611 - cleanup after previous file test
ok 1612 - setup match file test for foo/bar
ok 1613 - wildmatch: match 'foo/bar' 'foo/bar'
ok 1614 - wildmatch (via ls-files): match 'foo/bar' 'foo/bar'
ok 1615 - iwildmatch: match 'foo/bar' 'foo/bar'
ok 1616 - iwildmatch (via ls-files): match 'foo/bar' 'foo/bar'
ok 1617 - pathmatch: match 'foo/bar' 'foo/bar'
ok 1618 - pathmatch (via ls-files): match 'foo/bar' 'foo/bar'
ok 1619 - ipathmatch: match 'foo/bar' 'foo/bar'
ok 1620 - ipathmatch (via ls-files): match 'foo/bar' 'foo/bar'
ok 1621 - cleanup after previous file test
ok 1622 - setup match file test for foo/bar
ok 1623 - wildmatch: match 'foo/bar' 'foo/*'
ok 1624 - wildmatch (via ls-files): match 'foo/*' 'foo/bar'
ok 1625 - iwildmatch: match 'foo/bar' 'foo/*'
ok 1626 - iwildmatch (via ls-files): match 'foo/*' 'foo/bar'
ok 1627 - pathmatch: match 'foo/bar' 'foo/*'
ok 1628 - pathmatch (via ls-files): match 'foo/*' 'foo/bar'
ok 1629 - ipathmatch: match 'foo/bar' 'foo/*'
ok 1630 - ipathmatch (via ls-files): match 'foo/*' 'foo/bar'
ok 1631 - cleanup after previous file test
ok 1632 - setup match file test for foo/bba/arr
ok 1633 - wildmatch: no match 'foo/bba/arr' 'foo/*'
ok 1634 - wildmatch (via ls-files): no match 'foo/*' 'foo/bba/arr'
ok 1635 - iwildmatch: no match 'foo/bba/arr' 'foo/*'
ok 1636 - iwildmatch (via ls-files): no match 'foo/*' 'foo/bba/arr'
ok 1637 - pathmatch: match 'foo/bba/arr' 'foo/*'
ok 1638 - pathmatch (via ls-files): match 'foo/*' 'foo/bba/arr'
ok 1639 - ipathmatch: match 'foo/bba/arr' 'foo/*'
ok 1640 - ipathmatch (via ls-files): match 'foo/*' 'foo/bba/arr'
ok 1641 - cleanup after previous file test
ok 1642 - setup match file test for foo/bba/arr
ok 1643 - wildmatch: match 'foo/bba/arr' 'foo/**'
ok 1644 - wildmatch (via ls-files): match 'foo/**' 'foo/bba/arr'
ok 1645 - iwildmatch: match 'foo/bba/arr' 'foo/**'
ok 1646 - iwildmatch (via ls-files): match 'foo/**' 'foo/bba/arr'
ok 1647 - pathmatch: match 'foo/bba/arr' 'foo/**'
ok 1648 - pathmatch (via ls-files): match 'foo/**' 'foo/bba/arr'
ok 1649 - ipathmatch: match 'foo/bba/arr' 'foo/**'
ok 1650 - ipathmatch (via ls-files): match 'foo/**' 'foo/bba/arr'
ok 1651 - cleanup after previous file test
ok 1652 - setup match file test for foo/bba/arr
ok 1653 - wildmatch: no match 'foo/bba/arr' 'foo*'
ok 1654 - wildmatch (via ls-files): no match 'foo*' 'foo/bba/arr'
ok 1655 - iwildmatch: no match 'foo/bba/arr' 'foo*'
ok 1656 - iwildmatch (via ls-files): no match 'foo*' 'foo/bba/arr'
ok 1657 - pathmatch: match 'foo/bba/arr' 'foo*'
ok 1658 - pathmatch (via ls-files): match 'foo*' 'foo/bba/arr'
ok 1659 - ipathmatch: match 'foo/bba/arr' 'foo*'
ok 1660 - ipathmatch (via ls-files): match 'foo*' 'foo/bba/arr'
ok 1661 - cleanup after previous file test
ok 1662 - setup match file test for foo/bba/arr
ok 1663 - wildmatch: no match 'foo/bba/arr' 'foo**'
ok 1664 - wildmatch (via ls-files): match 'foo**' 'foo/bba/arr'
ok 1665 - iwildmatch: no match 'foo/bba/arr' 'foo**'
ok 1666 - iwildmatch (via ls-files): match 'foo**' 'foo/bba/arr'
ok 1667 - pathmatch: match 'foo/bba/arr' 'foo**'
ok 1668 - pathmatch (via ls-files): match 'foo**' 'foo/bba/arr'
ok 1669 - ipathmatch: match 'foo/bba/arr' 'foo**'
ok 1670 - ipathmatch (via ls-files): match 'foo**' 'foo/bba/arr'
ok 1671 - cleanup after previous file test
ok 1672 - setup match file test for foo/bba/arr
ok 1673 - wildmatch: no match 'foo/bba/arr' 'foo/*arr'
ok 1674 - wildmatch (via ls-files): no match 'foo/*arr' 'foo/bba/arr'
ok 1675 - iwildmatch: no match 'foo/bba/arr' 'foo/*arr'
ok 1676 - iwildmatch (via ls-files): no match 'foo/*arr' 'foo/bba/arr'
ok 1677 - pathmatch: match 'foo/bba/arr' 'foo/*arr'
ok 1678 - pathmatch (via ls-files): match 'foo/*arr' 'foo/bba/arr'
ok 1679 - ipathmatch: match 'foo/bba/arr' 'foo/*arr'
ok 1680 - ipathmatch (via ls-files): match 'foo/*arr' 'foo/bba/arr'
ok 1681 - cleanup after previous file test
ok 1682 - setup match file test for foo/bba/arr
ok 1683 - wildmatch: no match 'foo/bba/arr' 'foo/**arr'
ok 1684 - wildmatch (via ls-files): no match 'foo/**arr' 'foo/bba/arr'
ok 1685 - iwildmatch: no match 'foo/bba/arr' 'foo/**arr'
ok 1686 - iwildmatch (via ls-files): no match 'foo/**arr' 'foo/bba/arr'
ok 1687 - pathmatch: match 'foo/bba/arr' 'foo/**arr'
ok 1688 - pathmatch (via ls-files): match 'foo/**arr' 'foo/bba/arr'
ok 1689 - ipathmatch: match 'foo/bba/arr' 'foo/**arr'
ok 1690 - ipathmatch (via ls-files): match 'foo/**arr' 'foo/bba/arr'
ok 1691 - cleanup after previous file test
ok 1692 - setup match file test for foo/bba/arr
ok 1693 - wildmatch: no match 'foo/bba/arr' 'foo/*z'
ok 1694 - wildmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'
ok 1695 - iwildmatch: no match 'foo/bba/arr' 'foo/*z'
ok 1696 - iwildmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'
ok 1697 - pathmatch: no match 'foo/bba/arr' 'foo/*z'
ok 1698 - pathmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'
ok 1699 - ipathmatch: no match 'foo/bba/arr' 'foo/*z'
ok 1700 - ipathmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'
ok 1701 - cleanup after previous file test
ok 1702 - setup match file test for foo/bba/arr
ok 1703 - wildmatch: no match 'foo/bba/arr' 'foo/**z'
ok 1704 - wildmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'
ok 1705 - iwildmatch: no match 'foo/bba/arr' 'foo/**z'
ok 1706 - iwildmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'
ok 1707 - pathmatch: no match 'foo/bba/arr' 'foo/**z'
ok 1708 - pathmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'
ok 1709 - ipathmatch: no match 'foo/bba/arr' 'foo/**z'
ok 1710 - ipathmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'
ok 1711 - cleanup after previous file test
ok 1712 - setup match file test for foo/bar
ok 1713 - wildmatch: no match 'foo/bar' 'foo?bar'
ok 1714 - wildmatch (via ls-files): no match 'foo?bar' 'foo/bar'
ok 1715 - iwildmatch: no match 'foo/bar' 'foo?bar'
ok 1716 - iwildmatch (via ls-files): no match 'foo?bar' 'foo/bar'
ok 1717 - pathmatch: match 'foo/bar' 'foo?bar'
ok 1718 - pathmatch (via ls-files): match 'foo?bar' 'foo/bar'
ok 1719 - ipathmatch: match 'foo/bar' 'foo?bar'
ok 1720 - ipathmatch (via ls-files): match 'foo?bar' 'foo/bar'
ok 1721 - cleanup after previous file test
ok 1722 - setup match file test for foo/bar
ok 1723 - wildmatch: no match 'foo/bar' 'foo[/]bar'
ok 1724 - wildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'
ok 1725 - iwildmatch: no match 'foo/bar' 'foo[/]bar'
ok 1726 - iwildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'
ok 1727 - pathmatch: match 'foo/bar' 'foo[/]bar'
ok 1728 - pathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'
ok 1729 - ipathmatch: match 'foo/bar' 'foo[/]bar'
ok 1730 - ipathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'
ok 1731 - cleanup after previous file test
ok 1732 - setup match file test for foo/bar
ok 1733 - wildmatch: no match 'foo/bar' 'foo[^a-z]bar'
ok 1734 - wildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'
ok 1735 - iwildmatch: no match 'foo/bar' 'foo[^a-z]bar'
ok 1736 - iwildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'
ok 1737 - pathmatch: match 'foo/bar' 'foo[^a-z]bar'
ok 1738 - pathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'
ok 1739 - ipathmatch: match 'foo/bar' 'foo[^a-z]bar'
ok 1740 - ipathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'
ok 1741 - cleanup after previous file test
ok 1742 - setup match file test for ab/cXd/efXg/hi
ok 1743 - wildmatch: no match 'ab/cXd/efXg/hi' '*Xg*i'
ok 1744 - wildmatch (via ls-files): no match '*Xg*i' 'ab/cXd/efXg/hi'
ok 1745 - iwildmatch: no match 'ab/cXd/efXg/hi' '*Xg*i'
ok 1746 - iwildmatch (via ls-files): no match '*Xg*i' 'ab/cXd/efXg/hi'
ok 1747 - pathmatch: match 'ab/cXd/efXg/hi' '*Xg*i'
ok 1748 - pathmatch (via ls-files): match '*Xg*i' 'ab/cXd/efXg/hi'
ok 1749 - ipathmatch: match 'ab/cXd/efXg/hi' '*Xg*i'
ok 1750 - ipathmatch (via ls-files): match '*Xg*i' 'ab/cXd/efXg/hi'
ok 1751 - cleanup after previous file test
ok 1752 - setup match file test for a
ok 1753 - wildmatch: no match 'a' '[A-Z]'
ok 1754 - wildmatch (via ls-files): no match '[A-Z]' 'a'
ok 1755 - iwildmatch: match 'a' '[A-Z]'
ok 1756 - iwildmatch (via ls-files): match '[A-Z]' 'a'
ok 1757 - pathmatch: no match 'a' '[A-Z]'
ok 1758 - pathmatch (via ls-files): no match '[A-Z]' 'a'
ok 1759 - ipathmatch: match 'a' '[A-Z]'
ok 1760 - ipathmatch (via ls-files): match '[A-Z]' 'a'
ok 1761 - cleanup after previous file test
ok 1762 - setup match file test for A
ok 1763 - wildmatch: match 'A' '[A-Z]'
ok 1764 - wildmatch (via ls-files): match '[A-Z]' 'A'
ok 1765 - iwildmatch: match 'A' '[A-Z]'
ok 1766 - iwildmatch (via ls-files): match '[A-Z]' 'A'
ok 1767 - pathmatch: match 'A' '[A-Z]'
ok 1768 - pathmatch (via ls-files): match '[A-Z]' 'A'
ok 1769 - ipathmatch: match 'A' '[A-Z]'
ok 1770 - ipathmatch (via ls-files): match '[A-Z]' 'A'
ok 1771 - cleanup after previous file test
ok 1772 - setup match file test for A
ok 1773 - wildmatch: no match 'A' '[a-z]'
ok 1774 - wildmatch (via ls-files): no match '[a-z]' 'A'
ok 1775 - iwildmatch: match 'A' '[a-z]'
ok 1776 - iwildmatch (via ls-files): match '[a-z]' 'A'
ok 1777 - pathmatch: no match 'A' '[a-z]'
ok 1778 - pathmatch (via ls-files): no match '[a-z]' 'A'
ok 1779 - ipathmatch: match 'A' '[a-z]'
ok 1780 - ipathmatch (via ls-files): match '[a-z]' 'A'
ok 1781 - cleanup after previous file test
ok 1782 - setup match file test for a
ok 1783 - wildmatch: match 'a' '[a-z]'
ok 1784 - wildmatch (via ls-files): match '[a-z]' 'a'
ok 1785 - iwildmatch: match 'a' '[a-z]'
ok 1786 - iwildmatch (via ls-files): match '[a-z]' 'a'
ok 1787 - pathmatch: match 'a' '[a-z]'
ok 1788 - pathmatch (via ls-files): match '[a-z]' 'a'
ok 1789 - ipathmatch: match 'a' '[a-z]'
ok 1790 - ipathmatch (via ls-files): match '[a-z]' 'a'
ok 1791 - cleanup after previous file test
ok 1792 - setup match file test for a
ok 1793 - wildmatch: no match 'a' '[[:upper:]]'
ok 1794 - wildmatch (via ls-files): no match '[[:upper:]]' 'a'
ok 1795 - iwildmatch: match 'a' '[[:upper:]]'
ok 1796 - iwildmatch (via ls-files): match '[[:upper:]]' 'a'
ok 1797 - pathmatch: no match 'a' '[[:upper:]]'
ok 1798 - pathmatch (via ls-files): no match '[[:upper:]]' 'a'
ok 1799 - ipathmatch: match 'a' '[[:upper:]]'
ok 1800 - ipathmatch (via ls-files): match '[[:upper:]]' 'a'
ok 1801 - cleanup after previous file test
ok 1802 - setup match file test for A
ok 1803 - wildmatch: match 'A' '[[:upper:]]'
ok 1804 - wildmatch (via ls-files): match '[[:upper:]]' 'A'
ok 1805 - iwildmatch: match 'A' '[[:upper:]]'
ok 1806 - iwildmatch (via ls-files): match '[[:upper:]]' 'A'
ok 1807 - pathmatch: match 'A' '[[:upper:]]'
ok 1808 - pathmatch (via ls-files): match '[[:upper:]]' 'A'
ok 1809 - ipathmatch: match 'A' '[[:upper:]]'
ok 1810 - ipathmatch (via ls-files): match '[[:upper:]]' 'A'
ok 1811 - cleanup after previous file test
ok 1812 - setup match file test for A
ok 1813 - wildmatch: no match 'A' '[[:lower:]]'
ok 1814 - wildmatch (via ls-files): no match '[[:lower:]]' 'A'
ok 1815 - iwildmatch: match 'A' '[[:lower:]]'
ok 1816 - iwildmatch (via ls-files): match '[[:lower:]]' 'A'
ok 1817 - pathmatch: no match 'A' '[[:lower:]]'
ok 1818 - pathmatch (via ls-files): no match '[[:lower:]]' 'A'
ok 1819 - ipathmatch: match 'A' '[[:lower:]]'
ok 1820 - ipathmatch (via ls-files): match '[[:lower:]]' 'A'
ok 1821 - cleanup after previous file test
ok 1822 - setup match file test for a
ok 1823 - wildmatch: match 'a' '[[:lower:]]'
ok 1824 - wildmatch (via ls-files): match '[[:lower:]]' 'a'
ok 1825 - iwildmatch: match 'a' '[[:lower:]]'
ok 1826 - iwildmatch (via ls-files): match '[[:lower:]]' 'a'
ok 1827 - pathmatch: match 'a' '[[:lower:]]'
ok 1828 - pathmatch (via ls-files): match '[[:lower:]]' 'a'
ok 1829 - ipathmatch: match 'a' '[[:lower:]]'
ok 1830 - ipathmatch (via ls-files): match '[[:lower:]]' 'a'
ok 1831 - cleanup after previous file test
ok 1832 - setup match file test for A
ok 1833 - wildmatch: no match 'A' '[B-Za]'
ok 1834 - wildmatch (via ls-files): no match '[B-Za]' 'A'
ok 1835 - iwildmatch: match 'A' '[B-Za]'
ok 1836 - iwildmatch (via ls-files): match '[B-Za]' 'A'
ok 1837 - pathmatch: no match 'A' '[B-Za]'
ok 1838 - pathmatch (via ls-files): no match '[B-Za]' 'A'
ok 1839 - ipathmatch: match 'A' '[B-Za]'
ok 1840 - ipathmatch (via ls-files): match '[B-Za]' 'A'
ok 1841 - cleanup after previous file test
ok 1842 - setup match file test for a
ok 1843 - wildmatch: match 'a' '[B-Za]'
ok 1844 - wildmatch (via ls-files): match '[B-Za]' 'a'
ok 1845 - iwildmatch: match 'a' '[B-Za]'
ok 1846 - iwildmatch (via ls-files): match '[B-Za]' 'a'
ok 1847 - pathmatch: match 'a' '[B-Za]'
ok 1848 - pathmatch (via ls-files): match '[B-Za]' 'a'
ok 1849 - ipathmatch: match 'a' '[B-Za]'
ok 1850 - ipathmatch (via ls-files): match '[B-Za]' 'a'
ok 1851 - cleanup after previous file test
ok 1852 - setup match file test for A
ok 1853 - wildmatch: no match 'A' '[B-a]'
ok 1854 - wildmatch (via ls-files): no match '[B-a]' 'A'
ok 1855 - iwildmatch: match 'A' '[B-a]'
ok 1856 - iwildmatch (via ls-files): match '[B-a]' 'A'
ok 1857 - pathmatch: no match 'A' '[B-a]'
ok 1858 - pathmatch (via ls-files): no match '[B-a]' 'A'
ok 1859 - ipathmatch: match 'A' '[B-a]'
ok 1860 - ipathmatch (via ls-files): match '[B-a]' 'A'
ok 1861 - cleanup after previous file test
ok 1862 - setup match file test for a
ok 1863 - wildmatch: match 'a' '[B-a]'
ok 1864 - wildmatch (via ls-files): match '[B-a]' 'a'
ok 1865 - iwildmatch: match 'a' '[B-a]'
ok 1866 - iwildmatch (via ls-files): match '[B-a]' 'a'
ok 1867 - pathmatch: match 'a' '[B-a]'
ok 1868 - pathmatch (via ls-files): match '[B-a]' 'a'
ok 1869 - ipathmatch: match 'a' '[B-a]'
ok 1870 - ipathmatch (via ls-files): match '[B-a]' 'a'
ok 1871 - cleanup after previous file test
ok 1872 - setup match file test for z
ok 1873 - wildmatch: no match 'z' '[Z-y]'
ok 1874 - wildmatch (via ls-files): no match '[Z-y]' 'z'
ok 1875 - iwildmatch: match 'z' '[Z-y]'
ok 1876 - iwildmatch (via ls-files): match '[Z-y]' 'z'
ok 1877 - pathmatch: no match 'z' '[Z-y]'
ok 1878 - pathmatch (via ls-files): no match '[Z-y]' 'z'
ok 1879 - ipathmatch: match 'z' '[Z-y]'
ok 1880 - ipathmatch (via ls-files): match '[Z-y]' 'z'
ok 1881 - cleanup after previous file test
ok 1882 - setup match file test for Z
ok 1883 - wildmatch: match 'Z' '[Z-y]'
ok 1884 - wildmatch (via ls-files): match '[Z-y]' 'Z'
ok 1885 - iwildmatch: match 'Z' '[Z-y]'
ok 1886 - iwildmatch (via ls-files): match '[Z-y]' 'Z'
ok 1887 - pathmatch: match 'Z' '[Z-y]'
ok 1888 - pathmatch (via ls-files): match '[Z-y]' 'Z'
ok 1889 - ipathmatch: match 'Z' '[Z-y]'
ok 1890 - ipathmatch (via ls-files): match '[Z-y]' 'Z'
ok 1891 - matching does not exhibit exponential behavior
# still have 40 known breakage(s)
# passed all remaining 1851 test(s)
1..1891
*** t3100-ls-tree-restrict.sh ***
ok 1 - setup
ok 2 - ls-tree plain
ok 3 - ls-tree recursive
ok 4 - ls-tree recursive with -t
ok 5 - ls-tree recursive with -d
ok 6 - ls-tree filtered with path
ok 7 - ls-tree filtered with path1 path0
ok 8 - ls-tree filtered with path0/
ok 9 - ls-tree filtered with path2
ok 10 - ls-tree filtered with path2/
ok 11 - ls-tree filtered with path2/baz
ok 12 - ls-tree filtered with path2/bak
ok 13 - ls-tree -t filtered with path2/bak
ok 14 - ls-tree with one path a prefix of the other
# passed all 14 test(s)
1..14
*** t3101-ls-tree-dirname.sh ***
ok 1 - setup
ok 2 - ls-tree plain
ok 3 - ls-tree recursive
ok 4 - ls-tree filter 1.txt
ok 5 - ls-tree filter path1/b/c/1.txt
ok 6 - ls-tree filter all 1.txt files
ok 7 - ls-tree filter directories
ok 8 - ls-tree filter odd names
ok 9 - ls-tree filter missing files and extra slashes
ok 10 - ls-tree filter is leading path match
ok 11 - ls-tree --full-name
ok 12 - ls-tree --no-full-name
ok 13 - ls-tree --full-tree
ok 14 - ls-tree --full-tree -r
ok 15 - ls-tree --abbrev=5
ok 16 - ls-tree --name-only
ok 17 - ls-tree --name-only -r
ok 18 - ls-tree --name-status
ok 19 - ls-tree --name-status -r
# passed all 19 test(s)
1..19
*** t3102-ls-tree-wildcards.sh ***
ok 1 - setup
ok 2 - ls-tree a[a] matches literally
ok 3 - ls-tree outside prefix
not ok 4 - ls-tree does not yet support negated pathspec # TODO known breakage
# still have 1 known breakage(s)
# passed all remaining 3 test(s)
1..4
*** t3103-ls-tree-misc.sh ***
ok 1 - setup
ok 2 - ls-tree fails with non-zero exit code on broken tree
ok 3 - usage: incompatible options: --long --name-only
ok 4 - usage: incompatible options: --long and --format
ok 5 - usage: incompatible options: --name-only --name-status
ok 6 - usage: incompatible options: --name-only and --format
ok 7 - usage: incompatible options: --name-status --object-only
ok 8 - usage: incompatible options: --name-status and --format
ok 9 - usage: incompatible options: --object-only --long
ok 10 - usage: incompatible options: --object-only and --format
# passed all 10 test(s)
1..10
*** t3104-ls-tree-format.sh ***
ok 1 - ls-tree --format usage
ok 2 - setup
ok 3 - ls-tree --format='%(path) %(path) %(path)' HEAD top-file
ok 4 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' is like options ' '
ok 5 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' on optimized v.s. non-optimized path
ok 6 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname) %(objectsize:padded)%x09%(path)>' is like options '--long '
ok 7 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname) %(objectsize:padded)%x09%(path)>' on optimized v.s. non-optimized path
ok 8 - ls-tree '--format=<%(path)>' is like options '--name-only '
ok 9 - ls-tree '--format=<%(path)>' on optimized v.s. non-optimized path
ok 10 - ls-tree '--format=<%(objectname)>' is like options '--object-only '
ok 11 - ls-tree '--format=<%(objectname)>' on optimized v.s. non-optimized path
ok 12 - ls-tree '--format=<%(objectname)>' is like options '--object-only --abbrev --abbrev'
ok 13 - ls-tree '--format=<%(objectname)>' on optimized v.s. non-optimized path
ok 14 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' is like options '-t -t'
ok 15 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' on optimized v.s. non-optimized path
ok 16 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' is like options '--full-name --full-name'
ok 17 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' on optimized v.s. non-optimized path
ok 18 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' is like options '--full-tree --full-tree'
ok 19 - ls-tree '--format=<%(objectmode) %(objecttype) %(objectname)%x09%(path)>' on optimized v.s. non-optimized path
# passed all 19 test(s)
1..19
*** t3105-ls-tree-output.sh ***
ok 1 - ls-tree --format usage
ok 2 - setup
ok 3 - setup: HEAD_* variables
ok 4 - 'ls-tree ' output
ok 5 - 'ls-tree ' output (via subdir)
ok 6 - 'ls-tree  -t' output
ok 7 - 'ls-tree  -t' output (via subdir)
ok 8 - 'ls-tree  -d' output
ok 9 - 'ls-tree  -d' output (via subdir)
ok 10 - 'ls-tree  -r' output
ok 11 - 'ls-tree  -r' output (via subdir)
ok 12 - 'ls-tree --long' output
ok 13 - 'ls-tree --long' output (via subdir)
ok 14 - 'ls-tree --long -t' output
ok 15 - 'ls-tree --long -t' output (via subdir)
ok 16 - 'ls-tree --long -d' output
ok 17 - 'ls-tree --long -d' output (via subdir)
ok 18 - 'ls-tree --long -r' output
ok 19 - 'ls-tree --long -r' output (via subdir)
ok 20 - 'ls-tree --name-only' output
ok 21 - 'ls-tree --name-only' output (via subdir)
ok 22 - 'ls-tree --name-only -t' output
ok 23 - 'ls-tree --name-only -t' output (via subdir)
ok 24 - 'ls-tree --name-only -d' output
ok 25 - 'ls-tree --name-only -d' output (via subdir)
ok 26 - 'ls-tree --name-only -r' output
ok 27 - 'ls-tree --name-only -r' output (via subdir)
ok 28 - 'ls-tree --object-only' output
ok 29 - 'ls-tree --object-only' output (via subdir)
ok 30 - 'ls-tree --object-only -t' output
ok 31 - 'ls-tree --object-only -t' output (via subdir)
ok 32 - 'ls-tree --object-only -d' output
ok 33 - 'ls-tree --object-only -d' output (via subdir)
ok 34 - 'ls-tree --object-only -r' output
ok 35 - 'ls-tree --object-only -r' output (via subdir)
ok 36 - setup: HEAD_short_* variables
ok 37 - 'ls-tree --object-only --abbrev' output
ok 38 - 'ls-tree --object-only --abbrev' output (via subdir)
ok 39 - 'ls-tree --object-only --abbrev -t' output
ok 40 - 'ls-tree --object-only --abbrev -t' output (via subdir)
ok 41 - 'ls-tree --object-only --abbrev -d' output
ok 42 - 'ls-tree --object-only --abbrev -d' output (via subdir)
ok 43 - 'ls-tree --object-only --abbrev -r' output
ok 44 - 'ls-tree --object-only --abbrev -r' output (via subdir)
ok 45 - 'ls-tree --full-name' output
ok 46 - 'ls-tree --full-name' output (via subdir)
ok 47 - 'ls-tree --full-name -d' output
ok 48 - 'ls-tree --full-name -d' output (via subdir)
ok 49 - 'ls-tree --full-name -r' output
ok 50 - 'ls-tree --full-name -r' output (via subdir)
ok 51 - 'ls-tree --full-name -t' output
ok 52 - 'ls-tree --full-name -t' output (via subdir)
ok 53 - 'ls-tree --full-tree' output
ok 54 - 'ls-tree --full-tree' output (via subdir, fails)
ok 55 - 'ls-tree --full-tree -t' output
ok 56 - 'ls-tree --full-tree -t' output (via subdir, fails)
ok 57 - 'ls-tree --full-tree -d' output
ok 58 - 'ls-tree --full-tree -d' output (via subdir, fails)
ok 59 - 'ls-tree --full-tree -r' output
ok 60 - 'ls-tree --full-tree -r' output (via subdir, fails)
# passed all 60 test(s)
1..60
*** t3200-branch.sh ***
ok 1 - prepare a trivial repository
ok 2 - git branch --help should not have created a bogus branch
ok 3 - branch -h in broken repository
ok 4 - git branch abc should create a branch
ok 5 - git branch abc should fail when abc exists
ok 6 - git branch --force abc should fail when abc is checked out
ok 7 - git branch --force abc should succeed when abc exists
ok 8 - git branch a/b/c should create a branch
ok 9 - git branch mb main... should create a branch
ok 10 - git branch HEAD should fail
ok 11 - git branch --create-reflog d/e/f should create a branch and a log
ok 12 - git branch -d d/e/f should delete a branch and a log
ok 13 - git branch j/k should work after branch j has been deleted
ok 14 - git branch l should work after branch l/m has been deleted
ok 15 - git branch -m dumps usage
ok 16 - git branch -m m broken_symref should work
ok 17 - git branch -m m m/m should work
ok 18 - git branch -m n/n n should work
ok 19 - git branch -m bbb should rename checked out branch
ok 20 - renaming checked out branch works with d/f conflict
ok 21 - git branch -m o/o o should fail when o/p exists
ok 22 - git branch -m o/q o/p should fail when o/p exists
ok 23 - git branch -M o/q o/p should work when o/p exists
ok 24 - git branch -m -f o/q o/p should work when o/p exists
ok 25 - git branch -m q r/q should fail when r exists
ok 26 - git branch -M foo bar should fail when bar is checked out
ok 27 - git branch -M foo bar should fail when bar is checked out in worktree
ok 28 - git branch -M baz bam should succeed when baz is checked out
ok 29 - git branch -M baz bam should add entries to HEAD reflog
ok 30 - git branch -M should leave orphaned HEAD alone
ok 31 - resulting reflog can be shown by log -g
ok 32 - git branch -M baz bam should succeed when baz is checked out as linked working tree
ok 33 - git branch -M fails if updating any linked working tree fails
ok 34 - git branch -M baz bam should succeed within a worktree in which baz is checked out
ok 35 - git branch -M main should work when main is checked out
ok 36 - git branch -M main main should work when main is checked out
ok 37 - git branch -M topic topic should work when main is checked out
ok 38 - git branch -M and -C fail on detached HEAD
ok 39 - git branch -m should work with orphan branches
ok 40 - git branch -d on orphan HEAD (merged)
ok 41 - git branch -d on orphan HEAD (merged, graph)
ok 42 - git branch -d on orphan HEAD (unmerged)
ok 43 - git branch -d on orphan HEAD (unmerged, graph)
ok 44 - git branch -v -d t should work
ok 45 - git branch -v -m t s should work
ok 46 - git branch -m -d t s should fail
ok 47 - git branch --list -d t should fail
ok 48 - deleting checked-out branch from repo that is a submodule
ok 49 - bare main worktree has HEAD at branch deleted by secondary worktree
ok 50 - git branch --list -v with --abbrev
ok 51 - git branch --column
ok 52 - git branch --column with an extremely long branch name
ok 53 - git branch with column.*
ok 54 - git branch --column -v should fail
ok 55 - git branch -v with column.ui ignored
ok 56 - git branch -m q q2 without config should succeed
ok 57 - git branch -m s/s s should work when s/t is deleted
ok 58 - config information was renamed, too
ok 59 - git branch -m correctly renames multiple config sections
ok 60 - git branch -c dumps usage
ok 61 - git branch --copy dumps usage
ok 62 - git branch -c d e should work
ok 63 - git branch --copy is a synonym for -c
ok 64 - git branch -c ee ef should copy ee to create branch ef
ok 65 - git branch -c f/f g/g should work
ok 66 - git branch -c m2 m2 should work
ok 67 - git branch -c zz zz/zz should fail
ok 68 - git branch -c b/b b should fail
ok 69 - git branch -C o/q o/p should work when o/p exists
ok 70 - git branch -c -f o/q o/p should work when o/p exists
ok 71 - git branch -c qq rr/qq should fail when rr exists
ok 72 - git branch -C b1 b2 should fail when b2 is checked out
ok 73 - git branch -C c1 c2 should succeed when c1 is checked out
ok 74 - git branch -C c1 c2 should never touch HEAD
ok 75 - git branch -C main should work when main is checked out
ok 76 - git branch -C main main should work when main is checked out
ok 77 - git branch -C main5 main5 should work when main is checked out
ok 78 - git branch -C ab cd should overwrite existing config for cd
ok 79 - git branch -c correctly copies multiple config sections
ok 80 - deleting a symref
ok 81 - deleting a dangling symref
ok 82 - deleting a self-referential symref
ok 83 - renaming a symref is not allowed
ok 84 - test tracking setup via --track
ok 85 - test tracking setup (non-wildcard, matching)
ok 86 - tracking setup fails on non-matching refspec
ok 87 - test tracking setup via config
ok 88 - test overriding tracking setup via --no-track
ok 89 - no tracking without .fetch entries
ok 90 - test tracking setup via --track but deeper
ok 91 - test deleting branch deletes branch config
ok 92 - test deleting branch without config
ok 93 - deleting currently checked out branch fails
ok 94 - deleting in-use branch fails
ok 95 - test --track without .fetch entries
ok 96 - branch from non-branch HEAD w/autosetupmerge=always
ok 97 - branch from non-branch HEAD w/--track causes failure
ok 98 - branch from tag w/--track causes failure
ok 99 - simple tracking works when remote branch name matches
ok 100 - simple tracking skips when remote branch name does not match
ok 101 - simple tracking skips when remote ref is not a branch
ok 102 - --set-upstream-to fails on multiple branches
ok 103 - --set-upstream-to fails on detached HEAD
ok 104 - --set-upstream-to fails on a missing dst branch
ok 105 - --set-upstream-to fails on a missing src branch
ok 106 - --set-upstream-to fails on a non-ref
ok 107 - --set-upstream-to fails on locked config
ok 108 - use --set-upstream-to modify HEAD
ok 109 - use --set-upstream-to modify a particular branch
ok 110 - --unset-upstream should fail if given a non-existent branch
ok 111 - --unset-upstream should fail if config is locked
ok 112 - test --unset-upstream on HEAD
ok 113 - --unset-upstream should fail on multiple branches
ok 114 - --unset-upstream should fail on detached HEAD
ok 115 - test --unset-upstream on a particular branch
ok 116 - disabled option --set-upstream fails
ok 117 - --set-upstream-to notices an error to set branch as own upstream
ok 118 - git checkout -b g/h/i -l should create a branch and a log
ok 119 - checkout -b makes reflog by default
ok 120 - checkout -b does not make reflog when core.logAllRefUpdates = false
ok 121 - checkout -b with -l makes reflog when core.logAllRefUpdates = false
ok 122 - avoid ambiguous track and advise
ok 123 - autosetuprebase local on a tracked local branch
ok 124 - autosetuprebase always on a tracked local branch
ok 125 - autosetuprebase remote on a tracked local branch
ok 126 - autosetuprebase never on a tracked local branch
ok 127 - autosetuprebase local on a tracked remote branch
ok 128 - autosetuprebase never on a tracked remote branch
ok 129 - autosetuprebase remote on a tracked remote branch
ok 130 - autosetuprebase always on a tracked remote branch
ok 131 - autosetuprebase unconfigured on a tracked remote branch
ok 132 - autosetuprebase unconfigured on a tracked local branch
ok 133 - autosetuprebase unconfigured on untracked local branch
ok 134 - autosetuprebase unconfigured on untracked remote branch
ok 135 - autosetuprebase never on an untracked local branch
ok 136 - autosetuprebase local on an untracked local branch
ok 137 - autosetuprebase remote on an untracked local branch
ok 138 - autosetuprebase always on an untracked local branch
ok 139 - autosetuprebase never on an untracked remote branch
ok 140 - autosetuprebase local on an untracked remote branch
ok 141 - autosetuprebase remote on an untracked remote branch
ok 142 - autosetuprebase always on an untracked remote branch
ok 143 - autosetuprebase always on detached HEAD
ok 144 - detect misconfigured autosetuprebase (bad value)
ok 145 - detect misconfigured autosetuprebase (no value)
ok 146 - attempt to delete a branch without base and unmerged to HEAD
ok 147 - attempt to delete a branch merged to its base
ok 148 - attempt to delete a branch merged to its base
ok 149 - branch --delete --force removes dangling branch
ok 150 - use --edit-description
ok 151 - detect typo in branch name when using --edit-description
ok 152 - refuse --edit-description on unborn branch for now
ok 153 - --merged catches invalid object names
ok 154 - --list during rebase
ok 155 - --list during rebase from detached HEAD
ok 156 - tracking with unexpected .fetch refspec
ok 157 - configured committerdate sort
ok 158 - option override configured sort
ok 159 - --no-sort cancels config sort keys
ok 160 - --no-sort cancels command line sort keys
ok 161 - --no-sort without subsequent --sort prints expected branches
ok 162 - invalid sort parameter in configuration
ok 163 - tracking info copied with --track=inherit
ok 164 - tracking info copied with autoSetupMerge=inherit
ok 165 - --track overrides branch.autoSetupMerge
ok 166 - errors if given a bad branch name
# passed all 166 test(s)
1..166
*** t3201-branch-contains.sh ***
ok 1 - setup
ok 2 - branch --contains=main
ok 3 - branch --contains main
ok 4 - branch --no-contains=main
ok 5 - branch --no-contains main
ok 6 - branch --contains=side
ok 7 - branch --no-contains=side
ok 8 - branch --contains with pattern implies --list
ok 9 - branch --no-contains with pattern implies --list
ok 10 - side: branch --merged
ok 11 - branch --merged with pattern implies --list
ok 12 - side: branch --no-merged
ok 13 - main: branch --merged
ok 14 - main: branch --no-merged
ok 15 - branch --no-merged with pattern implies --list
ok 16 - implicit --list conflicts with modification options
ok 17 - Assert that --contains only works on commits, not trees & blobs
ok 18 - multiple branch --contains
ok 19 - multiple branch --merged
ok 20 - multiple branch --no-contains
ok 21 - multiple branch --no-merged
ok 22 - branch --contains combined with --no-contains
ok 23 - branch --merged combined with --no-merged
ok 24 - branch --merged with --verbose
# passed all 24 test(s)
1..24
*** t3202-show-branch.sh ***
ok 1 - error descriptions on empty repository
ok 2 - fatal descriptions on empty repository
ok 3 - setup
ok 4 - show-branch with more than 8 branches
ok 5 - show-branch with showbranch.default
ok 6 - show-branch --color output
ok 7 - show branch --remotes
ok 8 - show-branch --sparse
ok 9 - setup show branch --list
ok 10 - show branch --list
ok 11 - show branch --list has no --color output
ok 12 - show branch --merge-base with one argument
ok 13 - show branch --merge-base with two arguments
ok 14 - show branch --merge-base with N arguments
ok 15 - show-branch --all --reflog (should fail)
ok 16 - show-branch --merge-base --reflog (should fail)
ok 17 - show-branch --list --merge-base (should fail)
ok 18 - show-branch --reflog --current (should fail)
ok 19 - show-branch --no-topo-order (should fail)
ok 20 - show-branch --no-date-order (should fail)
ok 21 - show-branch --no-reflog (should fail)
ok 22 - error descriptions on non-existent branch
ok 23 - fatal descriptions on non-existent branch
ok 24 - error descriptions on orphan branch
ok 25 - setup reflogs
ok 26 - --reflog shows reflog entries
ok 27 - --reflog handles missing reflog
# passed all 27 test(s)
1..27
*** t3203-branch-output.sh ***
ok 1 - make commits
ok 2 - make branches
ok 3 - make remote branches
ok 4 - git branch shows local branches
ok 5 - git branch --list shows local branches
ok 6 - git branch --list pattern shows matching local branches
ok 7 - git branch -r shows remote branches
ok 8 - git branch --no-remotes is rejected
ok 9 - git branch -a shows local and remote branches
ok 10 - git branch --no-all is rejected
ok 11 - git branch -v shows branch summaries
ok 12 - git branch --list -v pattern shows branch summaries
ok 13 - git branch --ignore-case --list -v pattern shows branch summaries
ok 14 - git branch -v pattern does not show branch summaries
ok 15 - git branch `--show-current` shows current branch
ok 16 - git branch `--show-current` is silent when detached HEAD
ok 17 - git branch `--show-current` works properly when tag exists
ok 18 - git branch `--show-current` works properly with worktrees
ok 19 - git branch shows detached HEAD properly
ok 20 - git branch shows detached HEAD properly after checkout --detach
ok 21 - git branch shows detached HEAD properly after moving
ok 22 - git branch shows detached HEAD properly from tag
ok 23 - git branch shows detached HEAD properly after moving from tag
ok 24 - git branch `--sort=[-]objectsize` option
ok 25 - git branch `--sort=[-]type` option
ok 26 - git branch `--sort=[-]version:refname` option
ok 27 - git branch --points-at option
ok 28 - ambiguous branch/tag not marked
ok 29 - local-branch symrefs shortened properly
ok 30 - sort branches, ignore case
ok 31 - git branch --format option
ok 32 - git branch --format with ahead-behind
ok 33 - git branch with --format=%(rest) must fail
ok 34 - git branch --format --omit-empty
ok 35 - worktree colors correct
ok 36 - set up color tests
ok 37 - %(color) omitted without tty
ok 38 - %(color) present with tty
ok 39 - --color overrides auto-color
ok 40 - verbose output lists worktree path
# passed all 40 test(s)
1..40
*** t3204-branch-name-interpretation.sh ***
ok 1 - set up repo
ok 2 - update branch via @{-1}
ok 3 - update branch via local @{upstream}
ok 4 - disallow updating branch via remote @{upstream}
ok 5 - create branch with pseudo-qualified name
ok 6 - force-copy a branch to itself via @{-1} is no-op
ok 7 - delete branch via @{-1}
ok 8 - delete branch via local @{upstream}
ok 9 - delete branch via remote @{upstream}
ok 10 - delete @{upstream} expansion matches -r option
ok 11 - disallow deleting remote branch via @{-1}
ok 12 - create branch named "@"
ok 13 - delete branch named "@"
ok 14 - checkout does not treat remote @{upstream} as a branch
ok 15 - edit-description via @{-1}
ok 16 - modify branch upstream via "@{-1}" and "@{-1}@{upstream}"
# passed all 16 test(s)
1..16
*** t3205-branch-color.sh ***
ok 1 - set up some sample branches
ok 2 - set up some color config
ok 3 - regular output shows colors
ok 4 - verbose output shows colors
# passed all 4 test(s)
1..4
*** t3206-range-diff.sh ***
ok 1 - setup
ok 2 - simple A..B A..C (unmodified)
ok 3 - simple B...C (unmodified)
ok 4 - simple A B C (unmodified)
ok 5 - simple A..B A..C (unmodified) with --abbrev
ok 6 - A^! and A^-<n> (unmodified)
ok 7 - A^{/..} is not mistaken for a range
ok 8 - trivial reordering
ok 9 - removed a commit
ok 10 - added a commit
ok 11 - new base, A B C
ok 12 - new base, B...C
ok 13 - changed commit
ok 14 - changed commit with --no-patch diff option
ok 15 - changed commit with --stat diff option
ok 16 - changed commit with sm config
ok 17 - renamed file
ok 18 - file with mode only change
ok 19 - file added and later removed
ok 20 - no commits on one side
ok 21 - changed message
ok 22 - dual-coloring
ok 23 - format-patch --range-diff=topic
ok 24 - format-patch --range-diff=main..topic
ok 25 - format-patch --range-diff as commentary
ok 26 - format-patch --range-diff reroll-count with a non-integer
ok 27 - format-patch --range-diff reroll-count with a integer
ok 28 - format-patch --range-diff with v0
ok 29 - range-diff overrides diff.noprefix internally
ok 30 - basic with modified format.pretty with suffix
ok 31 - basic with modified format.pretty without "commit "
ok 32 - range-diff compares notes by default
ok 33 - range-diff with --no-notes
ok 34 - range-diff with multiple --notes
ok 35 - range-diff with --notes=custom does not show default notes
ok 36 - format-patch --range-diff does not compare notes by default
ok 37 - format-patch --notes=custom --range-diff only compares custom notes
ok 38 - format-patch --range-diff with --no-notes
ok 39 - format-patch --range-diff with --notes
ok 40 - format-patch --range-diff with format.notes config
ok 41 - format-patch --range-diff with multiple notes
ok 42 - --left-only/--right-only
ok 43 - ranges with pathspecs
ok 44 - submodule changes are shown irrespective of diff.submodule
# passed all 44 test(s)
1..44
*** t3207-branch-submodule.sh ***
ok 1 - setup superproject and submodule
ok 2 - --recurse-submodules should create branches
ok 3 - --recurse-submodules should die if submodule.propagateBranches is false
ok 4 - --recurse-submodules should fail when not creating branches
ok 5 - should respect submodule.recurse when creating branches
ok 6 - should ignore submodule.recurse when not creating branches
ok 7 - should create branches based off commit id in superproject
ok 8 - should not create any branches if branch is not valid for all repos
ok 9 - should create branches if branch exists and --force is given
ok 10 - should create branch when submodule is not in HEAD:.gitmodules
ok 11 - should not create branches in inactive submodules
ok 12 - should set up tracking of local branches with track=always
ok 13 - should set up tracking of local branches with explicit track
ok 14 - should not set up unnecessary tracking of local branches
ok 15 - setup tests with remotes
ok 16 - should get fatal error upon branch creation when submodule is not in .git/modules
ok 17 - should set up tracking of remote-tracking branches by default
ok 18 - should not fail when unable to set up tracking in submodule
ok 19 - --track=inherit should set up tracking correctly
ok 20 - --no-track should not set up tracking
# passed all 20 test(s)
1..20
*** t3211-peel-ref.sh ***
ok 1 - create annotated tag in refs/tags
ok 2 - create annotated tag outside of refs/tags
ok 3 - set up expected show-ref output
ok 4 - refs are peeled outside of refs/tags (loose)
ok 5 - refs are peeled outside of refs/tags (packed)
ok 6 - create old-style pack-refs without fully-peeled
ok 7 - refs are peeled outside of refs/tags (old packed)
ok 8 - peeled refs survive deletion of packed ref
# passed all 8 test(s)
1..8
*** t3300-funny-names.sh ***
ok 1 - setup
ok 2 - setup: populate index and tree
ok 3 - ls-files prints space in filename verbatim
ok 4 - setup: add funny filename
ok 5 - ls-files quotes funny filename
ok 6 - ls-files -z does not quote funny filename
ok 7 - ls-tree quotes funny filename
ok 8 - diff-index --name-status quotes funny filename
ok 9 - diff-tree --name-status quotes funny filename
ok 10 - diff-index -z does not quote funny filename
ok 11 - diff-tree -z does not quote funny filename
ok 12 - diff-tree --find-copies-harder quotes funny filename
ok 13 - setup: remove unfunny index entry
ok 14 - diff-tree -M quotes funny filename
ok 15 - diff-index -M -p quotes funny filename
ok 16 - setup: mode change
ok 17 - diff-index -M -p with mode change quotes funny filename
ok 18 - diffstat for rename quotes funny filename
ok 19 - numstat for rename quotes funny filename
ok 20 - numstat without -M quotes funny filename
ok 21 - numstat for non-git rename diff quotes funny filename
# passed all 21 test(s)
1..21
*** t3301-notes.sh ***
ok 1 - cannot annotate non-existing HEAD
ok 2 - setup
ok 3 - need valid notes ref
ok 4 - refusing to add notes in refs/heads/
ok 5 - refusing to edit notes in refs/remotes/
ok 6 - handle empty notes gracefully
ok 7 - show non-existent notes entry with %N
ok 8 - create notes
ok 9 - show notes entry with %N
ok 10 - create reflog entry
ok 11 - edit existing notes
ok 12 - show notes from treeish
ok 13 - cannot edit notes from non-ref
ok 14 - cannot "git notes add -m" where notes already exists
ok 15 - can overwrite existing note with "git notes add -f -m"
ok 16 - add w/no options on existing note morphs into edit
ok 17 - can overwrite existing note with "git notes add -f"
ok 18 - show notes
ok 19 - show multi-line notes
ok 20 - show -F notes
ok 21 - Re-adding -F notes without -f fails
ok 22 - git log --pretty=raw does not show notes
ok 23 - git log --show-notes
ok 24 - git log --no-notes
ok 25 - git format-patch does not show notes
ok 26 - git format-patch --show-notes does show notes
ok 27 - git show  does show notes
ok 28 - git show --pretty does not show notes
ok 29 - git show --pretty=raw does not show notes
ok 30 - git show --pretty=short does not show notes
ok 31 - git show --pretty=medium does not show notes
ok 32 - git show --pretty=full does not show notes
ok 33 - git show --pretty=fuller does not show notes
ok 34 - git show --pretty=format:%s does not show notes
ok 35 - git show --oneline does not show notes
ok 36 - setup alternate notes ref
ok 37 - git log --notes shows default notes
ok 38 - git log --notes=X shows only X
ok 39 - git log --notes --notes=X shows both
ok 40 - git log --no-notes resets default state
ok 41 - git log --no-notes resets ref list
ok 42 - show -m notes
ok 43 - remove note with add -f -F /dev/null
ok 44 - do not create empty note with -m ""
ok 45 - create note with combination of -m and -F
ok 46 - create note with combination of -m and -F and --separator
ok 47 - create note with combination of -m and -F and --no-separator
ok 48 - remove note with "git notes remove"
ok 49 - removing non-existing note should not create new commit
ok 50 - removing more than one
ok 51 - removing is atomic
ok 52 - removing with --ignore-missing
ok 53 - removing with --ignore-missing but bogus ref
ok 54 - remove reads from --stdin
ok 55 - remove --stdin is also atomic
ok 56 - removing with --stdin --ignore-missing
ok 57 - list notes with "git notes list"
ok 58 - list notes with "git notes"
ok 59 - "git notes" without subcommand does not take arguments
ok 60 - list specific note with "git notes list <object>"
ok 61 - listing non-existing notes fails
ok 62 - append: specify a separator with an empty arg
ok 63 - append: specify a separator without arg
ok 64 - append: specify as --no-separator
ok 65 - append: specify separator with line break
ok 66 - append: specify separator without line break
ok 67 - append: specify separator with multiple messages
ok 68 - append note with combination of -m and -F and --separator
ok 69 - append to existing note with "git notes append"
ok 70 - "git notes list" does not expand to "git notes list HEAD"
ok 71 - appending empty string does not change existing note
ok 72 - git notes append == add when there is no existing note
ok 73 - appending empty string to non-existing note does not create note
ok 74 - create other note on a different notes ref (setup)
ok 75 - Do not show note on other ref by default
ok 76 - Do show note when ref is given in GIT_NOTES_REF
ok 77 - Do show note when ref is given in core.notesRef config
ok 78 - Do not show note when core.notesRef is overridden
ok 79 - Show all notes when notes.displayRef=refs/notes/*
ok 80 - core.notesRef is implicitly in notes.displayRef
ok 81 - notes.displayRef can be given more than once
ok 82 - notes.displayRef respects order
ok 83 - notes.displayRef with no value handled gracefully
ok 84 - GIT_NOTES_DISPLAY_REF works
ok 85 - GIT_NOTES_DISPLAY_REF overrides config
ok 86 - --show-notes=* adds to GIT_NOTES_DISPLAY_REF
ok 87 - --no-standard-notes
ok 88 - --standard-notes
ok 89 - --show-notes=ref accumulates
ok 90 - Allow notes on non-commits (trees, blobs, tags)
ok 91 - create note from other note with "git notes add -C"
ok 92 - create note from non-existing note with "git notes add -C" fails
ok 93 - create note from non-blob with "git notes add -C" fails
ok 94 - create note from blob with "git notes add -C" reuses blob id
ok 95 - create note from blob with "-C", also specify "-m", "-F" and "--separator"
ok 96 - create note from other note with "git notes add -c"
ok 97 - create note from non-existing note with "git notes add -c" fails
ok 98 - append to note from other note with "git notes append -C"
ok 99 - create note from other note with "git notes append -c"
ok 100 - append to note from other note with "git notes append -c"
ok 101 - copy note with "git notes copy"
ok 102 - copy note with "git notes copy" with default
ok 103 - prevent overwrite with "git notes copy"
ok 104 - allow overwrite with "git notes copy -f"
ok 105 - allow overwrite with "git notes copy -f" with default
ok 106 - cannot copy note from object without notes
ok 107 - git notes copy --stdin
ok 108 - git notes copy --for-rewrite (unconfigured)
ok 109 - git notes copy --for-rewrite (enabled)
ok 110 - git notes copy --for-rewrite (disabled)
ok 111 - git notes copy --for-rewrite (overwrite)
ok 112 - git notes copy --for-rewrite (ignore)
ok 113 - git notes copy --for-rewrite (append)
ok 114 - git notes copy --for-rewrite (append two to one)
ok 115 - git notes copy --for-rewrite (append empty)
ok 116 - GIT_NOTES_REWRITE_MODE works
ok 117 - GIT_NOTES_REWRITE_REF works
ok 118 - GIT_NOTES_REWRITE_REF overrides config
ok 119 - git notes copy diagnoses too many or too few arguments
ok 120 - git notes get-ref expands refs/heads/main to refs/notes/refs/heads/main
ok 121 - git notes get-ref (no overrides)
ok 122 - git notes get-ref (core.notesRef)
ok 123 - git notes get-ref (GIT_NOTES_REF)
ok 124 - git notes get-ref (--ref)
ok 125 - setup testing of empty notes
ok 126 - 'git notes add' removes empty note
ok 127 - 'git notes add --allow-empty' stores empty note
ok 128 - 'git notes add -F /dev/null' removes empty note
ok 129 - 'git notes add -F /dev/null --allow-empty' stores empty note
ok 130 - 'git notes add -m ""' removes empty note
ok 131 - 'git notes add -m "" --allow-empty' stores empty note
ok 132 - 'git notes add -c "$empty_blob"' removes empty note
ok 133 - 'git notes add -c "$empty_blob" --allow-empty' stores empty note
ok 134 - 'git notes add -C "$empty_blob"' removes empty note
ok 135 - 'git notes add -C "$empty_blob" --allow-empty' stores empty note
ok 136 - 'git notes append' removes empty note
ok 137 - 'git notes append --allow-empty' stores empty note
ok 138 - 'git notes append -F /dev/null' removes empty note
ok 139 - 'git notes append -F /dev/null --allow-empty' stores empty note
ok 140 - 'git notes append -m ""' removes empty note
ok 141 - 'git notes append -m "" --allow-empty' stores empty note
ok 142 - 'git notes append -c "$empty_blob"' removes empty note
ok 143 - 'git notes append -c "$empty_blob" --allow-empty' stores empty note
ok 144 - 'git notes append -C "$empty_blob"' removes empty note
ok 145 - 'git notes append -C "$empty_blob" --allow-empty' stores empty note
ok 146 - 'git notes edit' removes empty note
ok 147 - 'git notes edit --allow-empty' stores empty note
ok 148 - empty notes are displayed by git log
# passed all 148 test(s)
1..148
*** t3302-notes-index-expensive.sh ***
ok 1 - setup 10
ok 2 - notes work
ok 3 - notes timing with /usr/bin/time
ok 4 # skip setup 100 (missing EXPENSIVE)
ok 5 # skip notes work (missing EXPENSIVE)
ok 6 # skip notes timing with /usr/bin/time (missing EXPENSIVE of USR_BIN_TIME,EXPENSIVE)
ok 7 # skip setup 1000 (missing EXPENSIVE)
ok 8 # skip notes work (missing EXPENSIVE)
ok 9 # skip notes timing with /usr/bin/time (missing EXPENSIVE of USR_BIN_TIME,EXPENSIVE)
ok 10 # skip setup 10000 (missing EXPENSIVE)
ok 11 # skip notes work (missing EXPENSIVE)
ok 12 # skip notes timing with /usr/bin/time (missing EXPENSIVE of USR_BIN_TIME,EXPENSIVE)
# passed all 12 test(s)
1..12
*** t3303-notes-subtrees.sh ***
ok 1 - setup: create 100 commits
ok 2 - test notes in 2/38-fanout
ok 3 - verify notes in 2/38-fanout
ok 4 - test notes in 2/2/36-fanout
ok 5 - verify notes in 2/2/36-fanout
ok 6 - test notes in 2/2/2/34-fanout
ok 7 - verify notes in 2/2/2/34-fanout
ok 8 - test same notes in no fanout and 2/38-fanout
ok 9 - verify same notes in no fanout and 2/38-fanout
ok 10 - test same notes in no fanout and 2/2/36-fanout
ok 11 - verify same notes in no fanout and 2/2/36-fanout
ok 12 - test same notes in 2/38-fanout and 2/2/36-fanout
ok 13 - verify same notes in 2/38-fanout and 2/2/36-fanout
ok 14 - test same notes in 2/2/2/34-fanout and 2/2/36-fanout
ok 15 - verify same notes in 2/2/2/34-fanout and 2/2/36-fanout
ok 16 - test notes in no fanout concatenated with 2/38-fanout
ok 17 - verify notes in no fanout concatenated with 2/38-fanout
ok 18 - test notes in no fanout concatenated with 2/2/36-fanout
ok 19 - verify notes in no fanout concatenated with 2/2/36-fanout
ok 20 - test notes in 2/38-fanout concatenated with 2/2/36-fanout
ok 21 - verify notes in 2/38-fanout concatenated with 2/2/36-fanout
ok 22 - test notes in 2/2/36-fanout concatenated with 2/2/2/34-fanout
ok 23 - verify notes in 2/2/36-fanout concatenated with 2/2/2/34-fanout
# passed all 23 test(s)
1..23
*** t3304-notes-mixed.sh ***
ok 1 - setup: create a couple of commits
ok 2 - create a notes tree with both notes and non-notes
ok 3 - verify contents of notes
ok 4 - verify contents of non-notes
ok 5 - git-notes preserves non-notes
ok 6 - verify contents of non-notes after git-notes
# passed all 6 test(s)
1..6
*** t3305-notes-fanout.sh ***
ok 1 - tweak test environment
ok 2 - creating many notes with git-notes
ok 3 - many notes created correctly with git-notes
ok 4 - stable fanout 0 is followed by stable fanout 1
ok 5 - deleting most notes with git-notes
ok 6 - most notes deleted correctly with git-notes
ok 7 - stable fanout 1 is followed by stable fanout 0
# passed all 7 test(s)
1..7
*** t3306-notes-prune.sh ***
ok 1 - setup: create a few commits with notes
ok 2 - verify commits and notes
ok 3 - remove some commits
ok 4 - verify that commits are gone
ok 5 - verify that notes are still present
ok 6 - prune -n does not remove notes
ok 7 - prune -n lists prunable notes
ok 8 - prune notes
ok 9 - verify that notes are gone
ok 10 - remove some commits
ok 11 - prune -v notes
ok 12 - verify that notes are gone
# passed all 12 test(s)
1..12
*** t3307-notes-man.sh ***
ok 1 - setup
ok 2 - example 1: notes to add an Acked-by line
ok 3 - example 2: binary notes
# passed all 3 test(s)
1..3
*** t3308-notes-merge.sh ***
ok 1 - setup
ok 2 - verify initial notes (x)
ok 3 - fail to merge empty notes ref into empty notes ref (z => y)
ok 4 - fail to merge into various non-notes refs
ok 5 - merge non-notes ref into empty notes ref (remote-notes/origin/x => v)
ok 6 - merge notes into empty notes ref (x => y)
ok 7 - merge empty notes ref (z => y)
ok 8 - change notes on other notes ref (y)
ok 9 - merge previous notes commit (y^ => y) => No-op
ok 10 - verify changed notes on other notes ref (y)
ok 11 - verify unchanged notes on original notes ref (x)
ok 12 - merge original notes (x) into changed notes (y) => No-op
ok 13 - merge changed (y) into original (x) => Fast-forward
ok 14 - merge empty notes ref (z => y)
ok 15 - change notes on other notes ref (y)
ok 16 - change notes on notes ref (x)
ok 17 - merge y into x => Non-conflicting 3-way merge
ok 18 - create notes on new, separate notes ref (w)
ok 19 - merge w into x => Non-conflicting history-less merge
# passed all 19 test(s)
1..19
*** t3309-notes-merge-auto-resolve.sh ***
ok 1 - setup commits
ok 2 - setup merge base (x)
ok 3 - verify state of merge base (x)
ok 4 - setup local branch (y)
ok 5 - verify state of local branch (y)
ok 6 - setup remote branch (z)
ok 7 - verify state of remote branch (z)
ok 8 - merge z into y with invalid strategy => Fail/No changes
ok 9 - merge z into y with invalid configuration option => Fail/No changes
ok 10 - merge z into y with "ours" strategy => Non-conflicting 3-way merge
ok 11 - reset to pre-merge state (y)
ok 12 - merge z into y with "ours" configuration option => Non-conflicting 3-way merge
ok 13 - reset to pre-merge state (y)
ok 14 - merge z into y with "ours" per-ref configuration option => Non-conflicting 3-way merge
ok 15 - reset to pre-merge state (y)
ok 16 - merge z into y with "theirs" strategy => Non-conflicting 3-way merge
ok 17 - reset to pre-merge state (y)
ok 18 - merge z into y with "theirs" strategy overriding configuration option "ours" => Non-conflicting 3-way merge
ok 19 - reset to pre-merge state (y)
ok 20 - merge z into y with "union" strategy => Non-conflicting 3-way merge
ok 21 - reset to pre-merge state (y)
ok 22 - merge z into y with "union" strategy overriding per-ref configuration => Non-conflicting 3-way merge
ok 23 - reset to pre-merge state (y)
ok 24 - merge z into y with "union" per-ref overriding general configuration => Non-conflicting 3-way merge
ok 25 - reset to pre-merge state (y)
ok 26 - merge z into y with "manual" per-ref only checks specific ref configuration => Conflicting 3-way merge
ok 27 - merge y into z with "union" strategy => Non-conflicting 3-way merge
ok 28 - reset to pre-merge state (z)
ok 29 - merge y into z with "cat_sort_uniq" strategy => Non-conflicting 3-way merge
ok 30 - reset to pre-merge state (z)
ok 31 - merge y into z with "cat_sort_uniq" strategy configuration option => Non-conflicting 3-way merge
# passed all 31 test(s)
1..31
*** t3310-notes-merge-manual-resolve.sh ***
ok 1 - setup commits
ok 2 - setup merge base (x)
ok 3 - setup local branch (y)
ok 4 - setup remote branch (z)
ok 5 - merge z into m (== y) with default ("manual") resolver => Conflicting 3-way merge
ok 6 - change notes in z
ok 7 - cannot do merge w/conflicts when previous merge is unfinished
ok 8 - setup unrelated notes ref (w)
ok 9 - can do merge without conflicts even if previous merge is unfinished (x => w)
ok 10 - do not allow mixing --commit and --abort
ok 11 - do not allow mixing --commit and --strategy
ok 12 - do not allow mixing --abort and --strategy
ok 13 - finalize conflicting merge (z => m)
ok 14 - redo merge of z into m (== y) with default ("manual") resolver => Conflicting 3-way merge
ok 15 - abort notes merge
ok 16 - redo merge of z into m (== y) with default ("manual") resolver => Conflicting 3-way merge
ok 17 - add + remove notes in finalized merge (z => m)
ok 18 - redo merge of z into m (== y) with default ("manual") resolver => Conflicting 3-way merge
ok 19 - reset notes ref m to somewhere else (w)
ok 20 - fail to finalize conflicting merge if underlying ref has moved in the meantime (m != NOTES_MERGE_PARTIAL^1)
ok 21 - resolve situation by aborting the notes merge
ok 22 - switch cwd before committing notes merge
# passed all 22 test(s)
1..22
*** t3311-notes-merge-fanout.sh ***
ok 1 - setup a few initial commits with notes (notes ref: x)
ok 2 - sanity check (x)
ok 3 - Add a few hundred commits w/notes to trigger fanout (x -> y)
ok 4 - notes tree has fanout (y)
ok 5 - No-op merge (already included) (x => y)
ok 6 - Fast-forward merge (y => x)
ok 7 - change some of the initial 5 notes (x -> z)
ok 8 - notes tree has no fanout (z)
ok 9 - successful merge without conflicts (y => z)
ok 10 - notes tree still has fanout after merge (m)
ok 11 - introduce conflicting changes (y -> w)
ok 12 - successful merge using "ours" strategy (z => w)
ok 13 - notes tree still has fanout after merge (m)
ok 14 - successful merge using "theirs" strategy (z => w)
ok 15 - notes tree still has fanout after merge (m)
ok 16 - successful merge using "union" strategy (z => w)
ok 17 - notes tree still has fanout after merge (m)
ok 18 - successful merge using "cat_sort_uniq" strategy (z => w)
ok 19 - notes tree still has fanout after merge (m)
ok 20 - fails to merge using "manual" strategy (z => w)
ok 21 - notes tree still has fanout after merge (m)
ok 22 - verify conflict entries (with no fanout)
ok 23 - resolve and finalize merge (z => w)
ok 24 - notes tree still has fanout after merge (m)
# passed all 24 test(s)
1..24
*** t3320-notes-merge-worktrees.sh ***
ok 1 - setup commit
ok 2 - setup notes ref (x)
ok 3 - setup local branch (y)
ok 4 - setup remote branch (z)
ok 5 - modify notes ref ourselves (x)
ok 6 - create some new worktrees
ok 7 - merge z into y fails and sets NOTES_MERGE_REF
ok 8 - merge z into y while mid-merge in another workdir fails
ok 9 - merge z into x while mid-merge on y succeeds
# passed all 9 test(s)
1..9
*** t3321-notes-stripspace.sh ***
ok 1 - setup the commit
ok 2 - add note by editor
ok 3 - add note by specifying single "-m", "--stripspace" is the default behavior
ok 4 - add note by specifying single "-m" and "--no-stripspace" 
ok 5 - add note by specifying multiple "-m", "--stripspace" is the default behavior
ok 6 - add notes by specifying multiple "-m" and "--no-stripspace"
ok 7 - add note by specifying single "-F", "--stripspace" is the default behavior
ok 8 - add note by specifying single "-F" and "--no-stripspace"
ok 9 - add note by specifying multiple "-F", "--stripspace" is the default behavior
ok 10 - add note by specifying multiple "-F" with "--no-stripspace"
ok 11 - append note by editor
ok 12 - append note by specifying single "-m"
ok 13 - append note by specifying multiple "-m"
ok 14 - add note by specifying single "-F"
ok 15 - add notes by specifying multiple "-F"
ok 16 - append note by specifying single "-F"
ok 17 - append notes by specifying multiple "-F"
ok 18 - append note by specifying multiple "-F" with "--no-stripspace"
ok 19 - add notes with empty messages
ok 20 - add note by specifying "-C", "--no-stripspace" is the default behavior
ok 21 - reuse note by specifying "-C" and "--stripspace"
ok 22 - reuse with "-C" and add note with "-m", "-m" will stripspace all together
ok 23 - add note with "-m" and reuse note with "-C", "-C" will not stripspace all together
ok 24 - add note by specifying "-c", "--stripspace" is the default behavior
ok 25 - add note by specifying "-c" with "--no-stripspace"
ok 26 - edit note by specifying "-c", "--stripspace" is the default behavior
ok 27 - edit note by specifying "-c" with "--no-stripspace"
# passed all 27 test(s)
1..27
*** t3400-rebase.sh ***
ok 1 - prepare repository with topic branches
ok 2 - rebase on dirty worktree
ok 3 - rebase on dirty cache
ok 4 - rebase against main
ok 5 - rebase sets ORIG_HEAD to pre-rebase state
ok 6 - rebase, with <onto> and <upstream> specified as :/quuxery
ok 7 - the rebase operation should not have destroyed author information
ok 8 - the rebase operation should not have destroyed author information (2)
ok 9 - HEAD was detached during rebase
ok 10 - rebase from ambiguous branch name
ok 11 - rebase off of the previous branch using "-"
ok 12 - rebase a single mode change
ok 13 - rebase is not broken by diff.renames
ok 14 - setup: recover
ok 15 - Show verbose error when HEAD could not be detached
ok 16 - fail when upstream arg is missing and not on branch
ok 17 - fail when upstream arg is missing and not configured
ok 18 - rebase works with format.useAutoBase
ok 19 - default to common base in @{upstream}s reflog if no upstream arg (--merge)
ok 20 - default to common base in @{upstream}s reflog if no upstream arg (--apply)
ok 21 - cherry-picked commits and fork-point work together
ok 22 - rebase --apply -q is quiet
ok 23 - rebase --merge -q is quiet
ok 24 - Rebase a commit that sprinkles CRs in
ok 25 - rebase can copy notes
ok 26 - rebase -m can copy notes
ok 27 - rebase commit with an ancient timestamp
ok 28 - rebase with "From " line in commit message
ok 29 - rebase --apply and --show-current-patch
ok 30 - rebase --apply and .gitattributes
ok 31 - rebase--merge.sh and --show-current-patch
ok 32 - switch to branch checked out here
ok 33 - switch to branch checked out elsewhere fails
ok 34 - switch to branch not checked out
ok 35 - switch to non-branch detaches HEAD
ok 36 - refuse to switch to branch checked out elsewhere
ok 37 - rebase when inside worktree subdirectory
# passed all 37 test(s)
1..37
*** t3401-rebase-and-am-rename.sh ***
ok 1 - setup testcase where directory rename should be detected
ok 2 - rebase --interactive: directory rename detected
not ok 3 - rebase --apply: directory rename detected # TODO known breakage
ok 4 - rebase --merge: directory rename detected
not ok 5 - am: directory rename detected # TODO known breakage
ok 6 - setup testcase where directory rename should NOT be detected
ok 7 - rebase --interactive: NO directory rename
ok 8 - rebase (am): NO directory rename
ok 9 - rebase --merge: NO directory rename
ok 10 - am: NO directory rename
# still have 2 known breakage(s)
# passed all remaining 8 test(s)
1..10
*** t3402-rebase-merge.sh ***
ok 1 - setup
ok 2 - reference merge
ok 3 - rebase
ok 4 - test-rebase@{1} is pre rebase
ok 5 - merge and rebase should match
ok 6 - rebase the other way
ok 7 - rebase -Xtheirs
ok 8 - rebase -Xtheirs from orphan
ok 9 - merge and rebase should match
ok 10 - picking rebase
ok 11 - rebase --skip works with two conflicts in a row
ok 12 - --reapply-cherry-picks
ok 13 - --reapply-cherry-picks refrains from reading unneeded blobs
# passed all 13 test(s)
1..13
*** t3403-rebase-skip.sh ***
ok 1 - setup
ok 2 - rebase with git am -3 (default)
ok 3 - rebase --skip can not be used with other options
ok 4 - rebase --skip with am -3
ok 5 - rebase moves back to skip-reference
ok 6 - checkout skip-merge
ok 7 - rebase with --merge
ok 8 - rebase --skip with --merge
ok 9 - merge and reference trees equal
ok 10 - moved back to branch correctly
ok 11 - skipping final pick removes .git/MERGE_MSG
ok 12 - correct advice upon picking empty commit
ok 13 - correct authorship when committing empty pick
ok 14 - correct advice upon rewording empty commit
ok 15 - correct advice upon editing empty commit
ok 16 - correct advice upon cherry-picking an empty commit during a rebase
ok 17 - correct advice upon multi cherry-pick picking an empty commit during a rebase
ok 18 - fixup that empties commit fails
ok 19 - squash that empties commit fails
ok 20 - $EDITOR and friends are unchanged
# passed all 20 test(s)
1..20
*** t3404-rebase-interactive.sh ***
ok 1 - setup
ok 2 - rebase --keep-empty
ok 3 - rebase -i with empty todo list
ok 4 - rebase -i with the exec command
ok 5 - rebase -i with the exec command runs from tree root
ok 6 - rebase -i with exec allows git commands in subdirs
ok 7 - rebase -i sets work tree properly
ok 8 - rebase -i with the exec command checks tree cleanness
ok 9 - cherry-pick works with rebase --exec
ok 10 - rebase -x with empty command fails
ok 11 - rebase -x with newline in command fails
ok 12 - rebase -i with exec of inexistent command
ok 13 - implicit interactive rebase does not invoke sequence editor
ok 14 - no changes are a nop
ok 15 - test the [branch] option
ok 16 - test --onto <branch>
ok 17 - rebase on top of a non-conflicting commit
ok 18 - reflog for the branch shows state before rebase
ok 19 - reflog for the branch shows correct finish message
ok 20 - exchange two commits
ok 21 - stop on conflicting pick
ok 22 - show conflicted patch
ok 23 - abort
ok 24 - abort with error when new base cannot be checked out
ok 25 - retain authorship
ok 26 - retain authorship w/ conflicts
ok 27 - squash
ok 28 - retain authorship when squashing
ok 29 - --continue tries to commit
ok 30 - verbose flag is heeded, even after --continue
ok 31 - multi-squash only fires up editor once
ok 32 - multi-fixup does not fire up editor
ok 33 - commit message used after conflict
ok 34 - commit message retained after conflict
ok 35 - squash and fixup generate correct log messages
ok 36 - squash ignores comments
ok 37 - squash ignores blank lines
ok 38 - squash works as expected
ok 39 - interrupted squash works as expected
ok 40 - interrupted squash works as expected (case 2)
ok 41 - --continue tries to commit, even for "edit"
ok 42 - aborted --continue does not squash commits after "edit"
ok 43 - auto-amend only edited commits after "edit"
ok 44 - clean error after failed "exec"
ok 45 - rebase a detached HEAD
ok 46 - rebase a commit violating pre-commit
ok 47 - rebase with a file named HEAD in worktree
ok 48 - do "noop" when there is nothing to cherry-pick
ok 49 - submodule rebase setup
ok 50 - submodule rebase -i
ok 51 - submodule conflict setup
ok 52 - rebase -i continue with only submodule staged
ok 53 - rebase -i continue with unstaged submodule
ok 54 - avoid unnecessary reset
ok 55 - reword
ok 56 - no uncommitted changes when rewording and the todo list is reloaded
ok 57 - rebase -i can copy notes
ok 58 - rebase -i can copy notes over a fixup
ok 59 - rebase while detaching HEAD
ok 60 - always cherry-pick with --no-ff
ok 61 - set up commits with funny messages
ok 62 - rebase-i history with funny messages
ok 63 - prepare for rebase -i --exec
ok 64 - running "git rebase -i --exec git show HEAD"
ok 65 - running "git rebase --exec git show HEAD -i"
ok 66 - running "git rebase -ix git show HEAD"
ok 67 - rebase -ix with several <CMD>
ok 68 - rebase -ix with several instances of --exec
ok 69 - rebase -ix with --autosquash
ok 70 - rebase --exec works without -i 
ok 71 - rebase -i --exec without <CMD>
ok 72 - rebase -i --root re-order and drop commits
ok 73 - rebase -i --root retain root commit author and message
ok 74 - rebase -i --root temporary sentinel commit
ok 75 - rebase -i --root fixup root commit
ok 76 - rebase -i --root reword original root commit
ok 77 - rebase -i --root reword new root commit
ok 78 - rebase -i --root when root has untracked file conflict
ok 79 - rebase -i --root reword root when root has untracked file conflict
ok 80 - rebase --edit-todo does not work on non-interactive rebase
ok 81 - rebase --edit-todo can be used to modify todo
ok 82 - rebase -i produces readable reflog
ok 83 - rebase -i respects core.commentchar
ok 84 - rebase -i respects core.commentchar=auto
ok 85 - rebase -i, with <onto> and <upstream> specified as :/quuxery
ok 86 - rebase -i with --strategy and -X
ok 87 - interrupted rebase -i with --strategy and -X
ok 88 - rebase -i error on commits with \ in message
ok 89 - short commit ID setup
ok 90 - short commit ID collide
ok 91 - respect core.abbrev
ok 92 - todo count
ok 93 - rebase -i commits that overwrite untracked files (pick)
ok 94 - rebase -i commits that overwrite untracked files (squash)
ok 95 - rebase -i commits that overwrite untracked files (no ff)
ok 96 - rebase --continue removes CHERRY_PICK_HEAD
ok 97 - drop
ok 98 - rebase -i respects rebase.missingCommitsCheck = ignore
ok 99 - rebase -i respects rebase.missingCommitsCheck = warn
ok 100 - rebase -i respects rebase.missingCommitsCheck = error
ok 101 - rebase --edit-todo respects rebase.missingCommitsCheck = ignore
ok 102 - rebase --edit-todo respects rebase.missingCommitsCheck = warn
ok 103 - rebase --edit-todo respects rebase.missingCommitsCheck = error
ok 104 - rebase.missingCommitsCheck = error after resolving conflicts
ok 105 - rebase.missingCommitsCheck = error when editing for a second time
ok 106 - respects rebase.abbreviateCommands with fixup, squash and exec
ok 107 - static check of bad command
ok 108 - the first command cannot be a fixup
ok 109 - tabs and spaces are accepted in the todolist
ok 110 - static check of bad SHA-1
ok 111 - editor saves as CR/LF
ok 112 - rebase -i --gpg-sign=<key-id>
ok 113 - rebase -i --gpg-sign=<key-id> overrides commit.gpgSign
ok 114 - valid author header after --root swap
ok 115 - valid author header when author contains single quote
ok 116 - post-commit hook is called
ok 117 - correct error message for partial commit after empty pick
ok 118 - correct error message for commit --amend after empty pick
ok 119 - todo has correct onto hash
ok 120 - ORIG_HEAD is updated correctly
ok 121 - --update-refs adds label and update-ref commands
ok 122 - --update-refs adds commands with --rebase-merges
ok 123 - --update-refs updates refs correctly
ok 124 - respect user edits to update-ref steps
ok 125 - --update-refs: all update-ref lines removed
ok 126 - --update-refs: all update-ref lines removed, then some re-added
ok 127 - --update-refs: --edit-todo with no update-ref lines
ok 128 - --update-refs: check failed ref update
ok 129 - bad labels and refs rejected when parsing todo list
ok 130 - $EDITOR and friends are unchanged
# passed all 130 test(s)
1..130
*** t3405-rebase-malformed.sh ***
ok 1 - setup
ok 2 - rebase commit with multi-line subject
ok 3 - rebase commit with diff in message
ok 4 - rebase -m commit with empty message
ok 5 - rebase -i commit with empty message
# passed all 5 test(s)
1..5
*** t3406-rebase-message.sh ***
ok 1 - setup
ok 2 - rebase -m
ok 3 - rebase against main twice
ok 4 - rebase against main twice with --force
ok 5 - rebase against main twice from another branch
ok 6 - rebase fast-forward to main
ok 7 - rebase --stat
ok 8 - rebase w/config rebase.stat
ok 9 - rebase -n overrides config rebase.stat config
ok 10 - rebase --onto outputs the invalid ref
ok 11 - error out early upon -C<n> or --whitespace=<bad>
ok 12 - rebase --merge reflog
ok 13 - rebase --merge fast-forward reflog
ok 14 - rebase --merge --skip reflog
ok 15 - rebase --merge --abort reflog
ok 16 - rebase --merge --abort detached HEAD reflog
ok 17 - rebase --merge reflog GIT_REFLOG_ACTION=my-reflog-action
ok 18 - rebase --merge fast-forward reflog GIT_REFLOG_ACTION=my-reflog-action
ok 19 - rebase --merge --skip reflog GIT_REFLOG_ACTION=my-reflog-action
ok 20 - rebase --merge --abort reflog GIT_REFLOG_ACTION=my-reflog-action
ok 21 - rebase --merge --abort detached HEAD reflog GIT_REFLOG_ACTION=my-reflog-action
ok 22 - rebase --apply reflog
ok 23 - rebase --apply fast-forward reflog
ok 24 - rebase --apply --skip reflog
ok 25 - rebase --apply --abort reflog
ok 26 - rebase --apply --abort detached HEAD reflog
ok 27 - rebase --apply reflog GIT_REFLOG_ACTION=my-reflog-action
ok 28 - rebase --apply fast-forward reflog GIT_REFLOG_ACTION=my-reflog-action
ok 29 - rebase --apply --skip reflog GIT_REFLOG_ACTION=my-reflog-action
ok 30 - rebase --apply --abort reflog GIT_REFLOG_ACTION=my-reflog-action
ok 31 - rebase --apply --abort detached HEAD reflog GIT_REFLOG_ACTION=my-reflog-action
ok 32 - rebase -i onto unrelated history
# passed all 32 test(s)
1..32
*** t3407-rebase-abort.sh ***
ok 1 - setup
ok 2 - rebase --apply --abort
ok 3 - pre rebase --apply head is marked as reachable
ok 4 - rebase --apply --abort after --skip
ok 5 - rebase --apply --abort after --continue
ok 6 - rebase --apply --abort when checking out a tag
ok 7 - rebase --apply --abort does not update reflog
ok 8 - rebase --abort can not be used with other options
ok 9 - rebase --apply --quit
ok 10 - rebase --merge --abort
ok 11 - pre rebase --merge head is marked as reachable
ok 12 - rebase --merge --abort after --skip
ok 13 - rebase --merge --abort after --continue
ok 14 - rebase --merge --abort when checking out a tag
ok 15 - rebase --merge --abort does not update reflog
ok 16 - rebase --abort can not be used with other options
ok 17 - rebase --merge --quit
# passed all 17 test(s)
1..17
*** t3408-rebase-multi-line.sh ***
ok 1 - setup
ok 2 - rebase
# passed all 2 test(s)
1..2
*** t3409-rebase-environ.sh ***
ok 1 - setup
ok 2 - rebase --exec does not muck with GIT_DIR
ok 3 - rebase --exec does not muck with GIT_WORK_TREE
# passed all 3 test(s)
1..3
*** t3412-rebase-root.sh ***
ok 1 - prepare repository
ok 2 - rebase --root fails with too many args
ok 3 - setup pre-rebase hook
ok 4 - rebase --root --onto <newbase>
ok 5 - pre-rebase got correct input (1)
ok 6 - rebase --root --onto <newbase> <branch>
ok 7 - pre-rebase got correct input (2)
ok 8 - rebase -i --root --onto <newbase>
ok 9 - pre-rebase got correct input (3)
ok 10 - rebase -i --root --onto <newbase> <branch>
ok 11 - pre-rebase got correct input (4)
ok 12 - set up merge history
ok 13 - set up second root and merge
ok 14 - setup pre-rebase hook that fails
ok 15 - pre-rebase hook stops rebase
ok 16 - pre-rebase hook stops rebase -i
ok 17 - remove pre-rebase hook
ok 18 - set up a conflict
ok 19 - rebase --root with conflict (first part)
ok 20 - fix the conflict
ok 21 - rebase --root with conflict (second part)
ok 22 - rebase -i --root with conflict (first part)
ok 23 - fix the conflict
ok 24 - rebase -i --root with conflict (second part)
ok 25 - fix the conflict
# passed all 25 test(s)
1..25
*** t3413-rebase-hook.sh ***
ok 1 - setup
ok 2 - rebase
ok 3 - rebase -i
ok 4 - setup pre-rebase hook
ok 5 - pre-rebase hook gets correct input (1)
ok 6 - pre-rebase hook gets correct input (2)
ok 7 - pre-rebase hook gets correct input (3)
ok 8 - pre-rebase hook gets correct input (4)
ok 9 - pre-rebase hook gets correct input (5)
ok 10 - pre-rebase hook gets correct input (6)
ok 11 - setup pre-rebase hook that fails
ok 12 - pre-rebase hook stops rebase (1)
ok 13 - pre-rebase hook stops rebase (2)
ok 14 - rebase --no-verify overrides pre-rebase (1)
ok 15 - rebase --no-verify overrides pre-rebase (2)
# passed all 15 test(s)
1..15
*** t3415-rebase-autosquash.sh ***
ok 1 - setup
ok 2 - auto fixup (option)
ok 3 - auto fixup (config true)
ok 4 - auto fixup (config false)
ok 5 - auto squash (option)
ok 6 - auto squash (config true)
ok 7 - auto squash (config false)
ok 8 - misspelled auto squash
ok 9 - auto squash that matches 2 commits
ok 10 - auto squash that matches a commit after the squash
ok 11 - auto squash that matches a sha1
ok 12 - auto squash that matches longer sha1
ok 13 - auto squash of fixup commit that matches branch name which points back to fixup commit
ok 14 - use commit --fixup
ok 15 - use commit --squash
ok 16 - fixup! fixup!
ok 17 - fixup! squash!
ok 18 - squash! squash!
ok 19 - squash! fixup!
ok 20 - autosquash with custom inst format
ok 21 - autosquash with empty custom instructionFormat
ok 22 - autosquash with multiple empty patches
ok 23 - extra spaces after fixup!
ok 24 - wrapped original subject
ok 25 - abort last squash
ok 26 - fixup a fixup
ok 27 - fixup does not clean up commit message
# passed all 27 test(s)
1..27
*** t3416-rebase-onto-threedots.sh ***
ok 1 - setup
ok 2 - rebase --onto main...topic
ok 3 - rebase --onto main...
ok 4 - rebase --onto main...side
ok 5 - rebase -i --onto main...topic
ok 6 - rebase -i --onto main...
ok 7 - rebase --onto main...side requires a single merge-base
ok 8 - rebase --keep-base --onto incompatible
ok 9 - rebase --keep-base --root incompatible
ok 10 - rebase --keep-base main from topic
ok 11 - rebase --keep-base main topic from main
ok 12 - rebase --keep-base main from side
ok 13 - rebase -i --keep-base main from topic
ok 14 - rebase -i --keep-base main topic from main
ok 15 - rebase --keep-base requires a single merge base
ok 16 - rebase --keep-base keeps cherry picks
ok 17 - rebase --keep-base --no-reapply-cherry-picks
ok 18 - $EDITOR and friends are unchanged
# passed all 18 test(s)
1..18
*** t3417-rebase-whitespace-fix.sh ***
ok 1 - blank line at end of file; extend at end of file
ok 2 - two blanks line at end of file; extend at end of file
ok 3 - same, but do not remove trailing spaces
ok 4 - at beginning of file
# passed all 4 test(s)
1..4
*** t3418-rebase-continue.sh ***
ok 1 - setup
ok 2 - merge based rebase --continue with works with touched file
ok 3 - merge based rebase --continue removes .git/MERGE_MSG
ok 4 - apply based rebase --continue works with touched file
ok 5 - rebase --continue can not be used with other options
ok 6 - rebase --continue remembers merge strategy and options
ok 7 - rebase -r passes merge strategy options correctly
ok 8 - --skip after failed fixup cleans commit message
ok 9 - setup rerere database
ok 10 - rebase --apply --continue remembers --rerere-autoupdate
ok 11 - rebase --apply --continue honors rerere.autoUpdate
ok 12 - rebase --apply --continue remembers --no-rerere-autoupdate
ok 13 - rebase -m --continue remembers --rerere-autoupdate
ok 14 - rebase -m --continue honors rerere.autoUpdate
ok 15 - rebase -m --continue remembers --no-rerere-autoupdate
ok 16 - rebase -i --continue remembers --rerere-autoupdate
ok 17 - rebase -i --continue honors rerere.autoUpdate
ok 18 - rebase -i --continue remembers --no-rerere-autoupdate
ok 19 - the todo command "break" works
ok 20 - patch file is removed before break command
ok 21 - --reschedule-failed-exec
ok 22 - rebase.rescheduleFailedExec only affects `rebase -i`
ok 23 - rebase.rescheduleFailedExec=true & --no-reschedule-failed-exec
ok 24 - new rebase.rescheduleFailedExec=true setting in an ongoing rebase is ignored
ok 25 - there is no --no-reschedule-failed-exec in an ongoing rebase
ok 26 - rebase --apply sets ORIG_HEAD correctly
ok 27 - rebase --apply <upstream> <branch> sets ORIG_HEAD correctly
ok 28 - rebase --merge sets ORIG_HEAD correctly
ok 29 - rebase --merge <upstream> <branch> sets ORIG_HEAD correctly
# passed all 29 test(s)
1..29
*** t3419-rebase-patch-id.sh ***
ok 1 - setup
ok 2 - setup: 500 lines
ok 3 - detect upstream patch
ok 4 - detect upstream patch binary
ok 5 - detect upstream patch modechange
ok 6 - do not drop patch
ok 7 - do not drop patch binary
ok 8 - do not drop patch modechange
# passed all 8 test(s)
1..8
*** t3420-rebase-autostash.sh ***
ok 1 - setup
ok 2 - rebase: fast-forward rebase
ok 3 - rebase: noop rebase
ok 4 - rebase --apply: dirty worktree, --no-autostash
ok 5 - rebase --apply: dirty worktree, non-conflicting rebase
ok 6 - rebase --apply --autostash: check output
ok 7 - rebase --apply: dirty index, non-conflicting rebase
ok 8 - rebase --apply: conflicting rebase
ok 9 - rebase --apply: --continue
ok 10 - rebase --apply: --skip
ok 11 - rebase --apply: --abort
ok 12 - rebase --apply: --quit
ok 13 - rebase --apply: non-conflicting rebase, conflicting stash
ok 14 - rebase --apply: check output with conflicting stash
ok 15 - rebase --merge: dirty worktree, --no-autostash
ok 16 - rebase --merge: dirty worktree, non-conflicting rebase
ok 17 - rebase --merge --autostash: check output
ok 18 - rebase --merge: dirty index, non-conflicting rebase
ok 19 - rebase --merge: conflicting rebase
ok 20 - rebase --merge: --continue
ok 21 - rebase --merge: --skip
ok 22 - rebase --merge: --abort
ok 23 - rebase --merge: --quit
ok 24 - rebase --merge: non-conflicting rebase, conflicting stash
ok 25 - rebase --merge: check output with conflicting stash
ok 26 - rebase --interactive: dirty worktree, --no-autostash
ok 27 - rebase --interactive: dirty worktree, non-conflicting rebase
ok 28 - rebase --interactive --autostash: check output
ok 29 - rebase --interactive: dirty index, non-conflicting rebase
ok 30 - rebase --interactive: conflicting rebase
ok 31 - rebase --interactive: --continue
ok 32 - rebase --interactive: --skip
ok 33 - rebase --interactive: --abort
ok 34 - rebase --interactive: --quit
ok 35 - rebase --interactive: non-conflicting rebase, conflicting stash
ok 36 - rebase --interactive: check output with conflicting stash
ok 37 - abort rebase -i with --autostash
ok 38 - restore autostash on editor failure
ok 39 - autostash is saved on editor failure with conflict
ok 40 - autostash with dirty submodules
ok 41 - branch is left alone when possible
ok 42 - never change active branch
ok 43 - autostash commit is marked as reachable
# passed all 43 test(s)
1..43
*** t3421-rebase-topology-linear.sh ***
ok 1 - setup
ok 2 - simple rebase --apply
ok 3 - simple rebase -m
ok 4 - simple rebase -i
ok 5 - setup branches and remote tracking
ok 6 - rebase --apply is no-op if upstream is an ancestor
ok 7 - rebase -m is no-op if upstream is an ancestor
ok 8 - rebase -i is no-op if upstream is an ancestor
ok 9 - rebase --apply -f rewrites even if upstream is an ancestor
ok 10 - rebase --fork-point -f rewrites even if upstream is an ancestor
ok 11 - rebase -m -f rewrites even if upstream is an ancestor
ok 12 - rebase -i -f rewrites even if upstream is an ancestor
ok 13 - rebase --apply -f rewrites even if remote upstream is an ancestor
ok 14 - rebase --fork-point -f rewrites even if remote upstream is an ancestor
ok 15 - rebase -m -f rewrites even if remote upstream is an ancestor
ok 16 - rebase -i -f rewrites even if remote upstream is an ancestor
ok 17 - rebase --apply fast-forwards from ancestor of upstream
ok 18 - rebase --fork-point fast-forwards from ancestor of upstream
ok 19 - rebase -m fast-forwards from ancestor of upstream
ok 20 - rebase -i fast-forwards from ancestor of upstream
ok 21 - setup of linear history for range selection tests
ok 22 - rebase --apply drops patches in upstream
ok 23 - rebase -m drops patches in upstream
ok 24 - rebase -i drops patches in upstream
ok 25 - rebase --apply can drop last patch if in upstream
ok 26 - rebase -m can drop last patch if in upstream
ok 27 - rebase -i can drop last patch if in upstream
ok 28 - rebase --apply --onto drops patches in upstream
ok 29 - rebase -m --onto drops patches in upstream
ok 30 - rebase -i --onto drops patches in upstream
ok 31 - rebase --apply --onto does not drop patches in onto
ok 32 - rebase -m --onto does not drop patches in onto
ok 33 - rebase -i --onto does not drop patches in onto
ok 34 - setup of linear history for empty commit tests
not ok 35 - rebase --apply keeps begin-empty commits # TODO known breakage
ok 36 - rebase -m keeps begin-empty commits
ok 37 - rebase -i keeps begin-empty commits
ok 38 - rebase -m --no-keep-empty drops begin-empty commits
ok 39 - rebase -i --no-keep-empty drops begin-empty commits
ok 40 - rebase -m --keep-empty keeps empty even if already in upstream
ok 41 - rebase -i --keep-empty keeps empty even if already in upstream
ok 42 - rebase --rebase-merges --keep-empty keeps empty even if already in upstream
ok 43 - setup of linear history for test involving root
ok 44 - rebase --apply --onto --root
ok 45 - rebase -m --onto --root
ok 46 - rebase -i --onto --root
ok 47 - rebase --apply without --onto --root with disjoint history
ok 48 - rebase -m without --onto --root with disjoint history
ok 49 - rebase -i without --onto --root with disjoint history
ok 50 - rebase --apply --onto --root drops patch in onto
ok 51 - rebase -m --onto --root drops patch in onto
ok 52 - rebase -i --onto --root drops patch in onto
ok 53 - rebase --apply --onto --root with merge-base does not go to root
ok 54 - rebase -m --onto --root with merge-base does not go to root
ok 55 - rebase -i --onto --root with merge-base does not go to root
ok 56 - rebase --apply without --onto --root with disjoint history drops patch in onto
ok 57 - rebase -m without --onto --root with disjoint history drops patch in onto
ok 58 - rebase -i without --onto --root with disjoint history drops patch in onto
ok 59 - rebase  --root on linear history is a no-op
ok 60 - rebase -m --root on linear history is a no-op
ok 61 - rebase -i --root on linear history is a no-op
ok 62 - rebase  -f --root on linear history causes re-write
ok 63 - rebase -m -f --root on linear history causes re-write
ok 64 - rebase -i -f --root on linear history causes re-write
# still have 1 known breakage(s)
# passed all remaining 63 test(s)
1..64
*** t3422-rebase-incompatible-options.sh ***
ok 1 - setup
ok 2 - --whitespace=fix incompatible with --merge
ok 3 - --whitespace=fix incompatible with --strategy=ours
ok 4 - --whitespace=fix incompatible with --strategy-option=ours
ok 5 - --whitespace=fix incompatible with --autosquash
ok 6 - --whitespace=fix incompatible with --interactive
ok 7 - --whitespace=fix incompatible with --exec
ok 8 - --whitespace=fix incompatible with --keep-empty
ok 9 - --whitespace=fix incompatible with --empty=...
ok 10 - --whitespace=fix incompatible with --no-reapply-cherry-picks
ok 11 - --whitespace=fix incompatible with --reapply-cherry-picks
ok 12 - --whitespace=fix incompatible with --rebase-merges
ok 13 - --whitespace=fix incompatible with --update-refs
ok 14 - --whitespace=fix incompatible with --root without --onto
ok 15 - --whitespace=fix incompatible with rebase.rebaseMerges
ok 16 - --whitespace=fix incompatible with rebase.updateRefs
ok 17 - --whitespace=fix okay with overridden rebase.rebaseMerges
ok 18 - --whitespace=fix okay with overridden rebase.updateRefs
ok 19 - -C4 incompatible with --merge
ok 20 - -C4 incompatible with --strategy=ours
ok 21 - -C4 incompatible with --strategy-option=ours
ok 22 - -C4 incompatible with --autosquash
ok 23 - -C4 incompatible with --interactive
ok 24 - -C4 incompatible with --exec
ok 25 - -C4 incompatible with --keep-empty
ok 26 - -C4 incompatible with --empty=...
ok 27 - -C4 incompatible with --no-reapply-cherry-picks
ok 28 - -C4 incompatible with --reapply-cherry-picks
ok 29 - -C4 incompatible with --rebase-merges
ok 30 - -C4 incompatible with --update-refs
ok 31 - -C4 incompatible with --root without --onto
ok 32 - -C4 incompatible with rebase.rebaseMerges
ok 33 - -C4 incompatible with rebase.updateRefs
ok 34 - -C4 okay with overridden rebase.rebaseMerges
ok 35 - -C4 okay with overridden rebase.updateRefs
ok 36 - --apply incompatible with --merge
ok 37 - --apply incompatible with --strategy=ours
ok 38 - --apply incompatible with --strategy-option=ours
ok 39 - --apply incompatible with --autosquash
ok 40 - --apply incompatible with --interactive
ok 41 - --apply incompatible with --exec
ok 42 - --apply incompatible with --keep-empty
ok 43 - --apply incompatible with --empty=...
ok 44 - --apply incompatible with --no-reapply-cherry-picks
ok 45 - --apply incompatible with --reapply-cherry-picks
ok 46 - --apply incompatible with --rebase-merges
ok 47 - --apply incompatible with --update-refs
ok 48 - --apply incompatible with --root without --onto
ok 49 - --apply incompatible with rebase.rebaseMerges
ok 50 - --apply incompatible with rebase.updateRefs
ok 51 - --apply okay with overridden rebase.rebaseMerges
ok 52 - --apply okay with overridden rebase.updateRefs
# passed all 52 test(s)
1..52
*** t3423-rebase-reword.sh ***
ok 1 - setup
ok 2 - reword without issues functions as intended
ok 3 - reword after a conflict preserves commit
# passed all 3 test(s)
1..3
*** t3424-rebase-empty.sh ***
ok 1 - setup test repository
not ok 2 - rebase (apply-backend) # TODO known breakage
ok 3 - rebase --merge --empty=drop
ok 4 - rebase --merge uses default of --empty=drop
ok 5 - rebase --merge --empty=keep
ok 6 - rebase --merge --empty=stop
ok 7 - rebase --merge --empty=ask
ok 8 - rebase --interactive --empty=drop
ok 9 - rebase --interactive --empty=keep
ok 10 - rebase --interactive --empty=stop
ok 11 - rebase --interactive uses default of --empty=stop
ok 12 - rebase --merge --empty=drop --keep-empty
ok 13 - rebase --merge --empty=drop --no-keep-empty
ok 14 - rebase --merge --empty=keep --keep-empty
ok 15 - rebase --merge --empty=keep --no-keep-empty
ok 16 - rebase --merge does not leave state laying around
ok 17 - rebase --exec --empty=drop
ok 18 - rebase --exec --empty=keep
ok 19 - rebase --exec uses default of --empty=keep
ok 20 - rebase --exec --empty=stop
# still have 1 known breakage(s)
# passed all remaining 19 test(s)
1..20
*** t3425-rebase-topology-merges.sh ***
ok 1 - setup of non-linear-history
ok 2 - rebase --apply after merge from upstream
ok 3 - rebase -m after merge from upstream
ok 4 - rebase -i after merge from upstream
ok 5 - rebase --apply of non-linear history is linearized in place
ok 6 - rebase -m of non-linear history is linearized in place
ok 7 - rebase -i of non-linear history is linearized in place
ok 8 - rebase --apply of non-linear history is linearized upstream
ok 9 - rebase -m of non-linear history is linearized upstream
ok 10 - rebase -i of non-linear history is linearized upstream
ok 11 - rebase --apply of non-linear history with merges after upstream merge is linearized
ok 12 - rebase -m of non-linear history with merges after upstream merge is linearized
ok 13 - rebase -i of non-linear history with merges after upstream merge is linearized
# passed all 13 test(s)
1..13
*** t3426-rebase-submodule.sh ***
ok 1 - git_rebase: added submodule creates empty directory
ok 2 - git_rebase: added submodule leaves existing empty directory alone
ok 3 - git_rebase: replace tracked file with submodule creates empty directory
ok 4 - git_rebase: replace directory with submodule
ok 5 - git_rebase: removed submodule leaves submodule directory and its contents in place
ok 6 - git_rebase: removed submodule leaves submodule containing a .git directory alone
ok 7 - git_rebase: replace submodule with a directory must fail
ok 8 - git_rebase: replace submodule containing a .git directory with a directory must fail
not ok 9 - git_rebase: replace submodule with a file must fail # TODO known breakage
not ok 10 - git_rebase: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - git_rebase: modified submodule does not update submodule work tree
ok 12 - git_rebase: modified submodule does not update submodule work tree to invalid commit
ok 13 - git_rebase: modified submodule does not update submodule work tree from invalid commit
ok 14 - git_rebase: added submodule doesn't remove untracked unignored file with same name
ok 15 - git_rebase_interactive: added submodule creates empty directory
ok 16 - git_rebase_interactive: added submodule leaves existing empty directory alone
ok 17 - git_rebase_interactive: replace tracked file with submodule creates empty directory
ok 18 - git_rebase_interactive: replace directory with submodule
ok 19 - git_rebase_interactive: removed submodule leaves submodule directory and its contents in place
ok 20 - git_rebase_interactive: removed submodule leaves submodule containing a .git directory alone
ok 21 - git_rebase_interactive: replace submodule with a directory must fail
ok 22 - git_rebase_interactive: replace submodule containing a .git directory with a directory must fail
not ok 23 - git_rebase_interactive: replace submodule with a file must fail # TODO known breakage
not ok 24 - git_rebase_interactive: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 25 - git_rebase_interactive: modified submodule does not update submodule work tree
ok 26 - git_rebase_interactive: modified submodule does not update submodule work tree to invalid commit
ok 27 - git_rebase_interactive: modified submodule does not update submodule work tree from invalid commit
ok 28 - git_rebase_interactive: added submodule doesn't remove untracked unignored file with same name
ok 29 - rebase interactive ignores modified submodules
# still have 4 known breakage(s)
# passed all remaining 25 test(s)
1..29
*** t3427-rebase-subtree.sh ***
ok 1 - setup
ok 2 - Rebase -Xsubtree --empty=ask --onto commit
ok 3 - Rebase -Xsubtree --empty=ask --rebase-merges --onto commit
# passed all 3 test(s)
1..3
*** t3428-rebase-signoff.sh ***
ok 1 - setup
ok 2 - rebase --apply --signoff adds a sign-off line
ok 3 - rebase --no-signoff does not add a sign-off line
ok 4 - rebase --exec --signoff adds a sign-off line
ok 5 - rebase --root --signoff adds a sign-off line
ok 6 - rebase -i --signoff fails
ok 7 - rebase -m --signoff fails
# passed all 7 test(s)
1..7
*** t3429-rebase-edit-todo.sh ***
ok 1 - setup
ok 2 - rebase exec modifies rebase-todo
ok 3 - rebase exec with an empty list does not exec anything
ok 4 - loose object cache vs re-reading todo list
ok 5 - todo is re-read after reword and squash
ok 6 - re-reading todo doesnt interfere with revert --edit
ok 7 - re-reading todo doesnt interfere with cherry-pick --edit
# passed all 7 test(s)
1..7
*** t3430-rebase-merges.sh ***
ok 1 - setup
ok 2 - create completely different structure
ok 3 - generate correct todo list
ok 4 - `reset` refuses to overwrite untracked files
ok 5 - `reset` rejects trees
ok 6 - `reset` only looks for labels under refs/rewritten/
ok 7 - failed `merge -C` writes patch (may be rescheduled, too)
ok 8 - failed `merge <branch>` does not crash
ok 9 - merge -c commits before rewording and reloads todo-list
ok 10 - merge -c rewords when a strategy is given
ok 11 - with a branch tip that was cherry-picked already
ok 12 - --no-rebase-merges countermands --rebase-merges
ok 13 - do not rebase cousins unless asked for
ok 14 - rebase.rebaseMerges=rebase-cousins is equivalent to --rebase-merges=rebase-cousins
ok 15 - --no-rebase-merges overrides rebase.rebaseMerges=no-rebase-cousins
ok 16 - --rebase-merges overrides rebase.rebaseMerges=rebase-cousins
ok 17 - refs/rewritten/* is worktree-local
ok 18 - --abort cleans up refs/rewritten
ok 19 - --quit cleans up refs/rewritten
ok 20 - post-rewrite hook and fixups work for merges
ok 21 - refuse to merge ancestors of HEAD
ok 22 - root commits
ok 23 - a "merge" into a root commit is a fast-forward
ok 24 - A root commit can be a cousin, treat it that way
ok 25 - labels that are object IDs are rewritten
ok 26 - octopus merges
ok 27 - with --autosquash and --exec
ok 28 - --continue after resolving conflicts after a merge
ok 29 - --rebase-merges with strategies
ok 30 - --rebase-merges with commit that can generate bad characters for filename
ok 31 - --rebase-merges with message matched with onto label
ok 32 - progress shows the correct total
ok 33 - truncate label names
# passed all 33 test(s)
1..33
*** t3431-rebase-fork-point.sh ***
ok 1 - setup
ok 2 - git rebase 
ok 3 - git rebase --onto D
ok 4 - git rebase --keep-base
ok 5 - git rebase --no-fork-point
ok 6 - git rebase --no-fork-point --onto D
ok 7 - git rebase --no-fork-point --keep-base
ok 8 - git rebase --fork-point refs/heads/main
ok 9 - git rebase --fork-point main
ok 10 - git rebase --fork-point --onto D refs/heads/main
ok 11 - git rebase --fork-point --onto D main
ok 12 - git rebase --fork-point --keep-base refs/heads/main
ok 13 - git rebase --fork-point --keep-base main
ok 14 - git rebase refs/heads/main
ok 15 - git rebase main
ok 16 - git rebase --onto D refs/heads/main
ok 17 - git rebase --onto D main
ok 18 - git rebase --keep-base refs/heads/main
ok 19 - git rebase --keep-base main
ok 20 - git rebase --fork-point with ambigous refname
ok 21 - --fork-point and --root both given
ok 22 - rebase.forkPoint set to false
ok 23 - rebase.forkPoint set to false and then to true
ok 24 - rebase.forkPoint set to false and command line says --fork-point
ok 25 - rebase.forkPoint set to true and command line says --no-fork-point
ok 26 - rebase.forkPoint set to true and --root given
# passed all 26 test(s)
1..26
*** t3432-rebase-fast-forward.sh ***
ok 1 - setup
ok 2 - git rebase --apply  with no changes is noop with same HEAD
ok 3 - git rebase --apply --no-ff  with no changes is work with same HEAD
ok 4 - git rebase --merge  with no changes is noop with same HEAD
ok 5 - git rebase --merge --no-ff  with no changes is work with same HEAD
ok 6 - git rebase --merge  (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 7 - git rebase --merge --no-ff  (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 8 - git rebase --apply main with no changes is noop with same HEAD
ok 9 - git rebase --apply --no-ff main with no changes is work with same HEAD
ok 10 - git rebase --merge main with no changes is noop with same HEAD
ok 11 - git rebase --merge --no-ff main with no changes is work with same HEAD
ok 12 - git rebase --merge main (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 13 - git rebase --merge --no-ff main (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 14 - git rebase --apply --onto B B with no changes is noop with same HEAD
ok 15 - git rebase --apply --no-ff --onto B B with no changes is work with diff HEAD
ok 16 - git rebase --merge --onto B B with no changes is noop with same HEAD
ok 17 - git rebase --merge --no-ff --onto B B with no changes is work with diff HEAD
ok 18 - git rebase --merge --onto B B (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 19 - git rebase --merge --no-ff --onto B B (rebase.abbreviateCommands = true) with no changes is work with diff HEAD
ok 20 - git rebase --apply --onto B... B with no changes is noop with same HEAD
ok 21 - git rebase --apply --no-ff --onto B... B with no changes is work with diff HEAD
ok 22 - git rebase --merge --onto B... B with no changes is noop with same HEAD
ok 23 - git rebase --merge --no-ff --onto B... B with no changes is work with diff HEAD
ok 24 - git rebase --merge --onto B... B (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 25 - git rebase --merge --no-ff --onto B... B (rebase.abbreviateCommands = true) with no changes is work with diff HEAD
ok 26 - git rebase --apply --onto main... main with no changes is noop with same HEAD
ok 27 - git rebase --apply --no-ff --onto main... main with no changes is work with same HEAD
ok 28 - git rebase --merge --onto main... main with no changes is noop with same HEAD
ok 29 - git rebase --merge --no-ff --onto main... main with no changes is work with same HEAD
ok 30 - git rebase --merge --onto main... main (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 31 - git rebase --merge --no-ff --onto main... main (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 32 - git rebase --apply --keep-base main with no changes is noop with same HEAD
ok 33 - git rebase --apply --no-ff --keep-base main with no changes is work with same HEAD
ok 34 - git rebase --merge --keep-base main with no changes is noop with same HEAD
ok 35 - git rebase --merge --no-ff --keep-base main with no changes is work with same HEAD
ok 36 - git rebase --merge --keep-base main (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 37 - git rebase --merge --no-ff --keep-base main (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 38 - git rebase --apply --keep-base with no changes is noop with same HEAD
ok 39 - git rebase --apply --no-ff --keep-base with no changes is work with same HEAD
ok 40 - git rebase --merge --keep-base with no changes is noop with same HEAD
ok 41 - git rebase --merge --no-ff --keep-base with no changes is work with same HEAD
ok 42 - git rebase --merge --keep-base (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 43 - git rebase --merge --no-ff --keep-base (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 44 - git rebase --apply --no-fork-point with no changes is noop with same HEAD
ok 45 - git rebase --apply --no-ff --no-fork-point with no changes is work with same HEAD
ok 46 - git rebase --merge --no-fork-point with no changes is noop with same HEAD
ok 47 - git rebase --merge --no-ff --no-fork-point with no changes is work with same HEAD
ok 48 - git rebase --merge --no-fork-point (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 49 - git rebase --merge --no-ff --no-fork-point (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 50 - git rebase --apply --keep-base --no-fork-point with no changes is noop with same HEAD
ok 51 - git rebase --apply --no-ff --keep-base --no-fork-point with no changes is work with same HEAD
ok 52 - git rebase --merge --keep-base --no-fork-point with no changes is noop with same HEAD
ok 53 - git rebase --merge --no-ff --keep-base --no-fork-point with no changes is work with same HEAD
ok 54 - git rebase --merge --keep-base --no-fork-point (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 55 - git rebase --merge --no-ff --keep-base --no-fork-point (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 56 - git rebase --apply --fork-point main with no changes is noop with same HEAD
ok 57 - git rebase --apply --no-ff --fork-point main with no changes is work with same HEAD
ok 58 - git rebase --merge --fork-point main with no changes is noop with same HEAD
ok 59 - git rebase --merge --no-ff --fork-point main with no changes is work with same HEAD
ok 60 - git rebase --merge --fork-point main (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 61 - git rebase --merge --no-ff --fork-point main (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 62 - git rebase --apply --fork-point --onto B B with no changes is noop with same HEAD
ok 63 - git rebase --apply --no-ff --fork-point --onto B B with no changes is work with diff HEAD
ok 64 - git rebase --merge --fork-point --onto B B with no changes is noop with same HEAD
ok 65 - git rebase --merge --no-ff --fork-point --onto B B with no changes is work with diff HEAD
ok 66 - git rebase --merge --fork-point --onto B B (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 67 - git rebase --merge --no-ff --fork-point --onto B B (rebase.abbreviateCommands = true) with no changes is work with diff HEAD
ok 68 - git rebase --apply --fork-point --onto B... B with no changes is noop with same HEAD
ok 69 - git rebase --apply --no-ff --fork-point --onto B... B with no changes is work with diff HEAD
ok 70 - git rebase --merge --fork-point --onto B... B with no changes is noop with same HEAD
ok 71 - git rebase --merge --no-ff --fork-point --onto B... B with no changes is work with diff HEAD
ok 72 - git rebase --merge --fork-point --onto B... B (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 73 - git rebase --merge --no-ff --fork-point --onto B... B (rebase.abbreviateCommands = true) with no changes is work with diff HEAD
ok 74 - git rebase --apply --fork-point --onto main... main with no changes is noop with same HEAD
ok 75 - git rebase --apply --no-ff --fork-point --onto main... main with no changes is work with same HEAD
ok 76 - git rebase --merge --fork-point --onto main... main with no changes is noop with same HEAD
ok 77 - git rebase --merge --no-ff --fork-point --onto main... main with no changes is work with same HEAD
ok 78 - git rebase --merge --fork-point --onto main... main (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 79 - git rebase --merge --no-ff --fork-point --onto main... main (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 80 - git rebase --apply --keep-base --keep-base main with no changes is noop with same HEAD
ok 81 - git rebase --apply --no-ff --keep-base --keep-base main with no changes is work with same HEAD
ok 82 - git rebase --merge --keep-base --keep-base main with no changes is noop with same HEAD
ok 83 - git rebase --merge --no-ff --keep-base --keep-base main with no changes is work with same HEAD
ok 84 - git rebase --merge --keep-base --keep-base main (rebase.abbreviateCommands = true) with no changes is noop with same HEAD
ok 85 - git rebase --merge --no-ff --keep-base --keep-base main (rebase.abbreviateCommands = true) with no changes is work with same HEAD
ok 86 - add work same to side
ok 87 - git rebase --apply  with our changes is noop with same HEAD
ok 88 - git rebase --apply --no-ff  with our changes is work with same HEAD
ok 89 - git rebase --merge  with our changes is noop with same HEAD
ok 90 - git rebase --merge --no-ff  with our changes is work with same HEAD
ok 91 - git rebase --merge  (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 92 - git rebase --merge --no-ff  (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 93 - git rebase --apply main with our changes is noop with same HEAD
ok 94 - git rebase --apply --no-ff main with our changes is work with same HEAD
ok 95 - git rebase --merge main with our changes is noop with same HEAD
ok 96 - git rebase --merge --no-ff main with our changes is work with same HEAD
ok 97 - git rebase --merge main (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 98 - git rebase --merge --no-ff main (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 99 - git rebase --apply --onto B B with our changes is noop with same HEAD
ok 100 - git rebase --apply --no-ff --onto B B with our changes is work with diff HEAD
ok 101 - git rebase --merge --onto B B with our changes is noop with same HEAD
ok 102 - git rebase --merge --no-ff --onto B B with our changes is work with diff HEAD
ok 103 - git rebase --merge --onto B B (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 104 - git rebase --merge --no-ff --onto B B (rebase.abbreviateCommands = true) with our changes is work with diff HEAD
ok 105 - git rebase --apply --onto B... B with our changes is noop with same HEAD
ok 106 - git rebase --apply --no-ff --onto B... B with our changes is work with diff HEAD
ok 107 - git rebase --merge --onto B... B with our changes is noop with same HEAD
ok 108 - git rebase --merge --no-ff --onto B... B with our changes is work with diff HEAD
ok 109 - git rebase --merge --onto B... B (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 110 - git rebase --merge --no-ff --onto B... B (rebase.abbreviateCommands = true) with our changes is work with diff HEAD
ok 111 - git rebase --apply --onto main... main with our changes is noop with same HEAD
ok 112 - git rebase --apply --no-ff --onto main... main with our changes is work with same HEAD
ok 113 - git rebase --merge --onto main... main with our changes is noop with same HEAD
ok 114 - git rebase --merge --no-ff --onto main... main with our changes is work with same HEAD
ok 115 - git rebase --merge --onto main... main (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 116 - git rebase --merge --no-ff --onto main... main (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 117 - git rebase --apply --keep-base main with our changes is noop with same HEAD
ok 118 - git rebase --apply --no-ff --keep-base main with our changes is work with same HEAD
ok 119 - git rebase --merge --keep-base main with our changes is noop with same HEAD
ok 120 - git rebase --merge --no-ff --keep-base main with our changes is work with same HEAD
ok 121 - git rebase --merge --keep-base main (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 122 - git rebase --merge --no-ff --keep-base main (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 123 - git rebase --apply --keep-base with our changes is noop with same HEAD
ok 124 - git rebase --apply --no-ff --keep-base with our changes is work with same HEAD
ok 125 - git rebase --merge --keep-base with our changes is noop with same HEAD
ok 126 - git rebase --merge --no-ff --keep-base with our changes is work with same HEAD
ok 127 - git rebase --merge --keep-base (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 128 - git rebase --merge --no-ff --keep-base (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 129 - git rebase --apply --no-fork-point with our changes is noop with same HEAD
ok 130 - git rebase --apply --no-ff --no-fork-point with our changes is work with same HEAD
ok 131 - git rebase --merge --no-fork-point with our changes is noop with same HEAD
ok 132 - git rebase --merge --no-ff --no-fork-point with our changes is work with same HEAD
ok 133 - git rebase --merge --no-fork-point (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 134 - git rebase --merge --no-ff --no-fork-point (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 135 - git rebase --apply --keep-base --no-fork-point with our changes is noop with same HEAD
ok 136 - git rebase --apply --no-ff --keep-base --no-fork-point with our changes is work with same HEAD
ok 137 - git rebase --merge --keep-base --no-fork-point with our changes is noop with same HEAD
ok 138 - git rebase --merge --no-ff --keep-base --no-fork-point with our changes is work with same HEAD
ok 139 - git rebase --merge --keep-base --no-fork-point (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 140 - git rebase --merge --no-ff --keep-base --no-fork-point (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 141 - git rebase --apply --fork-point main with our changes is noop with same HEAD
ok 142 - git rebase --apply --no-ff --fork-point main with our changes is work with same HEAD
ok 143 - git rebase --merge --fork-point main with our changes is noop with same HEAD
ok 144 - git rebase --merge --no-ff --fork-point main with our changes is work with same HEAD
ok 145 - git rebase --merge --fork-point main (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 146 - git rebase --merge --no-ff --fork-point main (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 147 - git rebase --apply --fork-point --onto B B with our changes is noop with same HEAD
ok 148 - git rebase --apply --no-ff --fork-point --onto B B with our changes is work with diff HEAD
ok 149 - git rebase --merge --fork-point --onto B B with our changes is noop with same HEAD
ok 150 - git rebase --merge --no-ff --fork-point --onto B B with our changes is work with diff HEAD
ok 151 - git rebase --merge --fork-point --onto B B (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 152 - git rebase --merge --no-ff --fork-point --onto B B (rebase.abbreviateCommands = true) with our changes is work with diff HEAD
ok 153 - git rebase --apply --fork-point --onto B... B with our changes is noop with same HEAD
ok 154 - git rebase --apply --no-ff --fork-point --onto B... B with our changes is work with diff HEAD
ok 155 - git rebase --merge --fork-point --onto B... B with our changes is noop with same HEAD
ok 156 - git rebase --merge --no-ff --fork-point --onto B... B with our changes is work with diff HEAD
ok 157 - git rebase --merge --fork-point --onto B... B (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 158 - git rebase --merge --no-ff --fork-point --onto B... B (rebase.abbreviateCommands = true) with our changes is work with diff HEAD
ok 159 - git rebase --apply --fork-point --onto main... main with our changes is noop with same HEAD
ok 160 - git rebase --apply --no-ff --fork-point --onto main... main with our changes is work with same HEAD
ok 161 - git rebase --merge --fork-point --onto main... main with our changes is noop with same HEAD
ok 162 - git rebase --merge --no-ff --fork-point --onto main... main with our changes is work with same HEAD
ok 163 - git rebase --merge --fork-point --onto main... main (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 164 - git rebase --merge --no-ff --fork-point --onto main... main (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 165 - git rebase --apply --fork-point --keep-base main with our changes is noop with same HEAD
ok 166 - git rebase --apply --no-ff --fork-point --keep-base main with our changes is work with same HEAD
ok 167 - git rebase --merge --fork-point --keep-base main with our changes is noop with same HEAD
ok 168 - git rebase --merge --no-ff --fork-point --keep-base main with our changes is work with same HEAD
ok 169 - git rebase --merge --fork-point --keep-base main (rebase.abbreviateCommands = true) with our changes is noop with same HEAD
ok 170 - git rebase --merge --no-ff --fork-point --keep-base main (rebase.abbreviateCommands = true) with our changes is work with same HEAD
ok 171 - add work same to upstream
ok 172 - git rebase --apply --onto B B with our and their changes is noop with same HEAD
ok 173 - git rebase --apply --no-ff --onto B B with our and their changes is work with diff HEAD
ok 174 - git rebase --merge --onto B B with our and their changes is noop with same HEAD
ok 175 - git rebase --merge --no-ff --onto B B with our and their changes is work with diff HEAD
ok 176 - git rebase --merge --onto B B (rebase.abbreviateCommands = true) with our and their changes is noop with same HEAD
ok 177 - git rebase --merge --no-ff --onto B B (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
ok 178 - git rebase --apply --onto B... B with our and their changes is noop with same HEAD
ok 179 - git rebase --apply --no-ff --onto B... B with our and their changes is work with diff HEAD
ok 180 - git rebase --merge --onto B... B with our and their changes is noop with same HEAD
ok 181 - git rebase --merge --no-ff --onto B... B with our and their changes is work with diff HEAD
ok 182 - git rebase --merge --onto B... B (rebase.abbreviateCommands = true) with our and their changes is noop with same HEAD
ok 183 - git rebase --merge --no-ff --onto B... B (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
ok 184 - git rebase --apply --onto main... main with our and their changes is noop with same HEAD
ok 185 - git rebase --apply --no-ff --onto main... main with our and their changes is work with diff HEAD
ok 186 - git rebase --merge --onto main... main with our and their changes is noop with same HEAD
ok 187 - git rebase --merge --no-ff --onto main... main with our and their changes is work with diff HEAD
ok 188 - git rebase --merge --onto main... main (rebase.abbreviateCommands = true) with our and their changes is noop with same HEAD
ok 189 - git rebase --merge --no-ff --onto main... main (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
ok 190 - git rebase --apply --keep-base main with our and their changes is noop with same HEAD
ok 191 - git rebase --apply --no-ff --keep-base main with our and their changes is work with diff HEAD
ok 192 - git rebase --merge --keep-base main with our and their changes is noop with same HEAD
ok 193 - git rebase --merge --no-ff --keep-base main with our and their changes is work with diff HEAD
ok 194 - git rebase --merge --keep-base main (rebase.abbreviateCommands = true) with our and their changes is noop with same HEAD
ok 195 - git rebase --merge --no-ff --keep-base main (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
ok 196 - git rebase --apply --keep-base with our and their changes is noop with same HEAD
ok 197 - git rebase --apply --no-ff --keep-base with our and their changes is work with diff HEAD
ok 198 - git rebase --merge --keep-base with our and their changes is noop with same HEAD
ok 199 - git rebase --merge --no-ff --keep-base with our and their changes is work with diff HEAD
ok 200 - git rebase --merge --keep-base (rebase.abbreviateCommands = true) with our and their changes is noop with same HEAD
ok 201 - git rebase --merge --no-ff --keep-base (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
not ok 202 - git rebase --apply --fork-point --onto B B with our and their changes is work with same HEAD # TODO known breakage
ok 203 - git rebase --apply --no-ff --fork-point --onto B B with our and their changes is work with diff HEAD
not ok 204 - git rebase --merge --fork-point --onto B B with our and their changes is work with same HEAD # TODO known breakage
ok 205 - git rebase --merge --no-ff --fork-point --onto B B with our and their changes is work with diff HEAD
not ok 206 - git rebase --merge --fork-point --onto B B (rebase.abbreviateCommands = true) with our and their changes is work with same HEAD # TODO known breakage
ok 207 - git rebase --merge --no-ff --fork-point --onto B B (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
not ok 208 - git rebase --apply --fork-point --onto B... B with our and their changes is work with same HEAD # TODO known breakage
ok 209 - git rebase --apply --no-ff --fork-point --onto B... B with our and their changes is work with diff HEAD
not ok 210 - git rebase --merge --fork-point --onto B... B with our and their changes is work with same HEAD # TODO known breakage
ok 211 - git rebase --merge --no-ff --fork-point --onto B... B with our and their changes is work with diff HEAD
not ok 212 - git rebase --merge --fork-point --onto B... B (rebase.abbreviateCommands = true) with our and their changes is work with same HEAD # TODO known breakage
ok 213 - git rebase --merge --no-ff --fork-point --onto B... B (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
ok 214 - git rebase --apply --fork-point --onto main... main with our and their changes is noop with same HEAD
ok 215 - git rebase --apply --no-ff --fork-point --onto main... main with our and their changes is work with diff HEAD
ok 216 - git rebase --merge --fork-point --onto main... main with our and their changes is noop with same HEAD
ok 217 - git rebase --merge --no-ff --fork-point --onto main... main with our and their changes is work with diff HEAD
ok 218 - git rebase --merge --fork-point --onto main... main (rebase.abbreviateCommands = true) with our and their changes is noop with same HEAD
ok 219 - git rebase --merge --no-ff --fork-point --onto main... main (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
ok 220 - git rebase --apply --fork-point --keep-base main with our and their changes is noop with same HEAD
ok 221 - git rebase --apply --no-ff --fork-point --keep-base main with our and their changes is work with diff HEAD
ok 222 - git rebase --merge --fork-point --keep-base main with our and their changes is noop with same HEAD
ok 223 - git rebase --merge --no-ff --fork-point --keep-base main with our and their changes is work with diff HEAD
ok 224 - git rebase --merge --fork-point --keep-base main (rebase.abbreviateCommands = true) with our and their changes is noop with same HEAD
ok 225 - git rebase --merge --no-ff --fork-point --keep-base main (rebase.abbreviateCommands = true) with our and their changes is work with diff HEAD
# still have 6 known breakage(s)
# passed all remaining 219 test(s)
1..225
*** t3433-rebase-across-mode-change.sh ***
ok 1 - setup
ok 2 - rebase changes with the apply backend
ok 3 - rebase changes with the merge backend
ok 4 - rebase changes with the merge backend with a delay
# passed all 4 test(s)
1..4
*** t3434-rebase-i18n.sh ***
ok 1 - setup
ok 2 - rebase --rebase-merges update encoding eucJP to UTF-8
ok 3 - rebase --rebase-merges update encoding eucJP to ISO-2022-JP
ok 4 - rebase --continue update from ISO-8859-1 to UTF-8
ok 5 - rebase --continue update from eucJP to UTF-8
ok 6 - rebase --continue update from eucJP to ISO-2022-JP
# passed all 6 test(s)
1..6
*** t3435-rebase-gpg-sign.sh ***
1..0 # SKIP skip all test rebase --[no-]gpg-sign, gpg not available
*** t3436-rebase-more-options.sh ***
ok 1 - setup
ok 2 - --ignore-whitespace works with apply backend
ok 3 - --ignore-whitespace works with merge backend
ok 4 - --ignore-whitespace is remembered when continuing
ok 5 - --committer-date-is-author-date works with apply backend
ok 6 - --committer-date-is-author-date works with merge backend
ok 7 - --committer-date-is-author-date works when rewording
ok 8 - --committer-date-is-author-date works with rebase -r
ok 9 - --committer-date-is-author-date works when forking merge
ok 10 - --committer-date-is-author-date works when committing conflict resolution
ok 11 - --reset-author-date works with apply backend
ok 12 - --reset-author-date works with merge backend
ok 13 - --reset-author-date works after conflict resolution
ok 14 - --reset-author-date works with rebase -r
ok 15 - --reset-author-date with --committer-date-is-author-date works
ok 16 - reset-author-date with --committer-date-is-author-date works when rewording
ok 17 - --reset-author-date --committer-date-is-author-date works when forking merge
ok 18 - --ignore-date is an alias for --reset-author-date
ok 19 - $EDITOR and friends are unchanged
# passed all 19 test(s)
1..19
*** t3437-rebase-fixup-options.sh ***
ok 1 - setup
ok 2 - simple fixup -C works
ok 3 - simple fixup -c works
ok 4 - fixup -C removes amend! from message
ok 5 - fixup -C with conflicts gives correct message
ok 6 - skipping fixup -C after fixup gives correct message
ok 7 - sequence of fixup, fixup -C & squash --signoff works
ok 8 - first fixup -C commented out in sequence fixup fixup -C fixup -C
ok 9 - multiple fixup -c opens editor once
ok 10 - sequence squash, fixup & fixup -c gives combined message
ok 11 - fixup -C works upon --autosquash with amend!
ok 12 - fixup -[Cc]<commit> works
# passed all 12 test(s)
1..12
*** t3438-rebase-broken-files.sh ***
ok 1 - set up conflicting branches
ok 2 - detect missing GIT_AUTHOR_NAME
ok 3 - detect missing GIT_AUTHOR_EMAIL
ok 4 - detect missing GIT_AUTHOR_DATE
ok 5 - detect duplicate GIT_AUTHOR_NAME
ok 6 - detect duplicate GIT_AUTHOR_EMAIL
ok 7 - detect duplicate GIT_AUTHOR_DATE
ok 8 - unknown key in author-script
ok 9 - unwritable rebased-patches does not leak
# passed all 9 test(s)
1..9
*** t3500-cherry.sh ***
ok 1 - prepare repository with topic branch, and check cherry finds the 2 patches from there
ok 2 - check that cherry with limit returns only the top patch
ok 3 - cherry-pick one of the 2 patches, and check cherry recognized one and only one as new
ok 4 - cherry ignores whitespace
# passed all 4 test(s)
1..4
*** t3501-revert-cherry-pick.sh ***
ok 1 - setup
ok 2 - cherry-pick --nonsense
ok 3 - revert --nonsense
ok 4 - cherry-pick after renaming branch
ok 5 - revert after renaming branch
ok 6 - cherry-pick on stat-dirty working tree
ok 7 - revert forbidden on dirty working tree
ok 8 - cherry-pick on unborn branch
ok 9 - cherry-pick on unborn branch with --allow-empty
ok 10 - cherry-pick "-" to pick from previous branch
ok 11 - cherry-pick "-" is meaningless without checkout
ok 12 - cherry-pick "-" works with arguments
ok 13 - cherry-pick works with dirty renamed file
ok 14 - advice from failed revert
ok 15 - titles of fresh reverts
ok 16 - title of legacy double revert
ok 17 - identification of reverted commit (default)
ok 18 - identification of reverted commit (--reference)
ok 19 - identification of reverted commit (revert.reference)
ok 20 - cherry-pick is unaware of --reference (for now)
# passed all 20 test(s)
1..20
*** t3502-cherry-pick-merge.sh ***
ok 1 - setup
ok 2 - cherry-pick -m complains of bogus numbers
ok 3 - cherry-pick explicit first parent of a non-merge
ok 4 - cherry pick a merge without -m should fail
ok 5 - cherry pick a merge (1)
ok 6 - cherry pick a merge (2)
ok 7 - cherry pick a merge relative to nonexistent parent should fail
ok 8 - revert explicit first parent of a non-merge
ok 9 - revert a merge without -m should fail
ok 10 - revert a merge (1)
ok 11 - revert a merge (2)
ok 12 - revert a merge relative to nonexistent parent should fail
# passed all 12 test(s)
1..12
*** t3503-cherry-pick-root.sh ***
ok 1 - setup
ok 2 - cherry-pick a root commit
ok 3 - revert a root commit
ok 4 - cherry-pick a root commit with an external strategy
ok 5 - revert a root commit with an external strategy
ok 6 - cherry-pick two root commits
# passed all 6 test(s)
1..6
*** t3504-cherry-pick-rerere.sh ***
ok 1 - setup
ok 2 - conflicting merge
ok 3 - fixup
ok 4 - cherry-pick conflict with --rerere-autoupdate
ok 5 - cherry-pick conflict repsects rerere.autoUpdate
ok 6 - cherry-pick conflict with --no-rerere-autoupdate
ok 7 - cherry-pick --continue rejects --rerere-autoupdate
ok 8 - cherry-pick --rerere-autoupdate more than once
ok 9 - cherry-pick conflict without rerere
# passed all 9 test(s)
1..9
*** t3505-cherry-pick-empty.sh ***
ok 1 - setup
ok 2 - cherry-pick an empty commit
ok 3 - index lockfile was removed
ok 4 - cherry-pick a commit with an empty message
ok 5 - index lockfile was removed
ok 6 - cherry-pick a commit with an empty message with --allow-empty-message
ok 7 - cherry pick an empty non-ff commit without --allow-empty
ok 8 - cherry pick an empty non-ff commit with --allow-empty
ok 9 - cherry pick with --keep-redundant-commits
ok 10 - cherry-pick a commit that becomes no-op (prep)
ok 11 - cherry-pick a no-op with neither --keep-redundant nor --empty
ok 12 - cherry-pick a no-op with --keep-redundant
ok 13 - --keep-redundant-commits is incompatible with operations
ok 14 - --empty is incompatible with operations
ok 15 - cherry-pick a no-op with --empty=stop
ok 16 - cherry-pick a no-op with --empty=drop
ok 17 - cherry-pick a no-op with --empty=keep
# passed all 17 test(s)
1..17
*** t3506-cherry-pick-ff.sh ***
ok 1 - setup
ok 2 - cherry-pick using --ff fast forwards
ok 3 - cherry-pick not using --ff does not fast forwards
ok 4 - merge setup
ok 5 - cherry-pick explicit first parent of a non-merge with --ff
ok 6 - cherry pick a merge with --ff but without -m should fail
ok 7 - cherry pick with --ff a merge (1)
ok 8 - cherry pick with --ff a merge (2)
ok 9 - cherry pick a merge relative to nonexistent parent with --ff should fail
ok 10 - cherry pick a root commit with --ff
ok 11 - cherry-pick --ff on unborn branch
# passed all 11 test(s)
1..11
*** t3507-cherry-pick-conflict.sh ***
ok 1 - setup
ok 2 - failed cherry-pick does not advance HEAD
ok 3 - advice from failed cherry-pick
ok 4 - advice from failed cherry-pick --no-commit
ok 5 - failed cherry-pick sets CHERRY_PICK_HEAD
ok 6 - successful cherry-pick does not set CHERRY_PICK_HEAD
ok 7 - cherry-pick --no-commit does not set CHERRY_PICK_HEAD
ok 8 - cherry-pick w/dirty tree does not set CHERRY_PICK_HEAD
ok 9 - cherry-pick --strategy=resolve w/dirty tree does not set CHERRY_PICK_HEAD
ok 10 - GIT_CHERRY_PICK_HELP suppresses CHERRY_PICK_HEAD
ok 11 - git reset clears CHERRY_PICK_HEAD
ok 12 - failed commit does not clear CHERRY_PICK_HEAD
ok 13 - cancelled commit does not clear CHERRY_PICK_HEAD
ok 14 - successful commit clears CHERRY_PICK_HEAD
ok 15 - partial commit of cherry-pick fails
ok 16 - commit --amend of cherry-pick fails
ok 17 - successful final commit clears cherry-pick state
ok 18 - reset after final pick clears cherry-pick state
ok 19 - failed cherry-pick produces dirty index
ok 20 - failed cherry-pick registers participants in index
ok 21 - cherry-pick conflict, ensure commit.cleanup = scissors places scissors line properly
ok 22 - cherry-pick conflict, ensure cleanup=scissors places scissors line properly
ok 23 - failed cherry-pick describes conflict in work tree
ok 24 - diff3 -m style
ok 25 - revert also handles conflicts sanely
ok 26 - failed revert sets REVERT_HEAD
ok 27 - successful revert does not set REVERT_HEAD
ok 28 - revert --no-commit sets REVERT_HEAD
ok 29 - revert w/dirty tree does not set REVERT_HEAD
ok 30 - GIT_CHERRY_PICK_HELP does not suppress REVERT_HEAD
ok 31 - git reset clears REVERT_HEAD
ok 32 - failed commit does not clear REVERT_HEAD
ok 33 - successful final commit clears revert state
ok 34 - reset after final pick clears revert state
ok 35 - revert conflict, diff3 -m style
ok 36 - revert conflict, ensure commit.cleanup = scissors places scissors line properly
ok 37 - revert conflict, ensure cleanup=scissors places scissors line properly
ok 38 - failed cherry-pick does not forget -s
ok 39 - commit after failed cherry-pick does not add duplicated -s
ok 40 - commit after failed cherry-pick adds -s at the right place
ok 41 - commit --amend -s places the sign-off at the right place
ok 42 - cherry-pick preserves sparse-checkout
ok 43 - cherry-pick --continue remembers --keep-redundant-commits
ok 44 - cherry-pick --continue remembers --allow-empty and --allow-empty-message
# passed all 44 test(s)
1..44
*** t3508-cherry-pick-many-commits.sh ***
ok 1 - setup
ok 2 - cherry-pick first..fourth works
ok 3 - cherry-pick three one two works
ok 4 - cherry-pick three one two: fails
ok 5 - output to keep user entertained during multi-pick
ok 6 - cherry-pick --strategy resolve first..fourth works
ok 7 - output during multi-pick indicates merge strategy
ok 8 - cherry-pick --ff first..fourth works
ok 9 - cherry-pick -n first..fourth works
ok 10 - revert first..fourth works
ok 11 - revert ^first fourth works
ok 12 - revert fourth fourth~1 fourth~2 works
ok 13 - cherry-pick -3 fourth works
ok 14 - cherry-pick --stdin works
# passed all 14 test(s)
1..14
*** t3509-cherry-pick-merge-df.sh ***
ok 1 - Initialize repository
ok 2 - Setup rename across paths each below D/F conflicts
ok 3 - Cherry-pick succeeds with rename across D/F conflicts
ok 4 - Setup rename with file on one side matching directory name on other
ok 5 - Cherry-pick succeeds with was_a_dir/file -> was_a_dir (resolve)
ok 6 - Cherry-pick succeeds with was_a_dir/file -> was_a_dir (recursive)
ok 7 - Setup rename with file on one side matching different dirname on other
ok 8 - Cherry-pick with rename to different D/F conflict succeeds (resolve)
ok 9 - Cherry-pick with rename to different D/F conflict succeeds (recursive)
# passed all 9 test(s)
1..9
*** t3510-cherry-pick-sequence.sh ***
ok 1 - setup
ok 2 - cherry-pick persists data on failure
ok 3 - cherry-pick mid-cherry-pick-sequence
ok 4 - cherry-pick persists opts correctly
ok 5 - cherry-pick persists --empty=stop correctly
ok 6 - cherry-pick persists --empty=drop correctly
ok 7 - cherry-pick persists --empty=keep correctly
ok 8 - revert persists opts correctly
ok 9 - cherry-pick cleans up sequencer state upon success
ok 10 - cherry-pick --skip requires cherry-pick in progress
ok 11 - revert --skip requires revert in progress
ok 12 - cherry-pick --skip to skip commit
ok 13 - revert --skip to skip commit
ok 14 - skip "empty" commit
ok 15 - skip a commit and check if rest of sequence is correct
ok 16 - check advice when we move HEAD by committing
ok 17 - selectively advise --skip while launching another sequence
ok 18 - allow skipping commit but not abort for a new history
ok 19 - allow skipping stopped cherry-pick because of untracked file modifications
ok 20 - --quit does not complain when no cherry-pick is in progress
ok 21 - --abort requires cherry-pick in progress
ok 22 - --quit cleans up sequencer state
ok 23 - --quit keeps HEAD and conflicted index intact
ok 24 - --abort to cancel multiple cherry-pick
ok 25 - --abort to cancel single cherry-pick
ok 26 - --abort does not unsafely change HEAD
ok 27 - cherry-pick --abort to cancel multiple revert
ok 28 - revert --abort works, too
ok 29 - --abort to cancel single revert
ok 30 - --abort keeps unrelated change, easy case
ok 31 - --abort refuses to clobber unrelated change, harder case
ok 32 - cherry-pick still writes sequencer state when one commit is left
ok 33 - --abort after last commit in sequence
ok 34 - cherry-pick does not implicitly stomp an existing operation
ok 35 - --continue complains when no cherry-pick is in progress
ok 36 - --continue complains when there are unresolved conflicts
ok 37 - --continue of single cherry-pick
ok 38 - --continue of single revert
ok 39 - --continue after resolving conflicts
ok 40 - --continue after resolving conflicts and committing
ok 41 - --continue asks for help after resolving patch to nil
ok 42 - follow advice and skip nil patch
ok 43 - --continue respects opts
ok 44 - --continue of single-pick respects -x
ok 45 - --continue respects -x in first commit in multi-pick
not ok 46 - --signoff is automatically propagated to resolved conflict # TODO known breakage
not ok 47 - --signoff dropped for implicit commit of resolution, multi-pick case # TODO known breakage
not ok 48 - sign-off needs to be reaffirmed after conflict resolution, single-pick case # TODO known breakage
ok 49 - malformed instruction sheet 1
ok 50 - malformed instruction sheet 2
ok 51 - empty commit set (no commits to walk)
ok 52 - empty commit set (culled during walk)
ok 53 - malformed instruction sheet 3
ok 54 - instruction sheet, fat-fingers version
ok 55 - commit descriptions in insn sheet are optional
# still have 3 known breakage(s)
# passed all remaining 52 test(s)
1..55
*** t3511-cherry-pick-x.sh ***
ok 1 - setup
ok 2 - cherry-pick -x inserts blank line after one line subject
ok 3 - cherry-pick -s inserts blank line after one line subject
ok 4 - cherry-pick -s inserts blank line after non-conforming footer
ok 5 - cherry-pick -s recognizes trailer config
ok 6 - cherry-pick -x inserts blank line when conforming footer not found
ok 7 - cherry-pick -s inserts blank line when conforming footer not found
ok 8 - cherry-pick -x -s inserts blank line when conforming footer not found
ok 9 - cherry-pick -s adds sob when last sob doesnt match committer
ok 10 - cherry-pick -x -s adds sob when last sob doesnt match committer
ok 11 - cherry-pick -s refrains from adding duplicate trailing sob
ok 12 - cherry-pick -x -s adds sob even when trailing sob exists for committer
ok 13 - cherry-pick -x handles commits with no NL at end of message
ok 14 - cherry-pick -x handles commits with no footer and no NL at end of message
ok 15 - cherry-pick -s handles commits with no NL at end of message
ok 16 - cherry-pick -s handles commits with no footer and no NL at end of message
ok 17 - cherry-pick -x treats "(cherry picked from..." line as part of footer
ok 18 - cherry-pick -s treats "(cherry picked from..." line as part of footer
ok 19 - cherry-pick -x -s treats "(cherry picked from..." line as part of footer
ok 20 - cherry-pick preserves commit message
ok 21 - cherry-pick -x cleans commit message
ok 22 - cherry-pick -x respects commit.cleanup
# passed all 22 test(s)
1..22
*** t3512-cherry-pick-submodule.sh ***
ok 1 - git_test_func: added submodule creates empty directory
ok 2 - git_test_func: added submodule leaves existing empty directory alone
ok 3 - git_test_func: replace tracked file with submodule creates empty directory
ok 4 - git_test_func: replace directory with submodule
ok 5 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 6 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 7 - git_test_func: replace submodule with a directory must fail
ok 8 - git_test_func: replace submodule containing a .git directory with a directory must fail
not ok 9 - git_test_func: replace submodule with a file must fail # TODO known breakage
not ok 10 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - git_test_func: modified submodule does not update submodule work tree
ok 12 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 13 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 14 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 15 - unrelated submodule/file conflict is ignored
# still have 2 known breakage(s)
# passed all remaining 13 test(s)
1..15
*** t3513-revert-submodule.sh ***
ok 1 - git_revert: added submodule creates empty directory
ok 2 - git_revert: added submodule leaves existing empty directory alone
ok 3 - git_revert: replace tracked file with submodule creates empty directory
ok 4 - git_revert: replace directory with submodule
ok 5 - git_revert: removed submodule leaves submodule directory and its contents in place
ok 6 - git_revert: removed submodule leaves submodule containing a .git directory alone
ok 7 - git_revert: replace submodule with a directory must fail
ok 8 - git_revert: replace submodule containing a .git directory with a directory must fail
not ok 9 - git_revert: replace submodule with a file must fail # TODO known breakage
not ok 10 - git_revert: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - git_revert: modified submodule does not update submodule work tree
ok 12 - git_revert: modified submodule does not update submodule work tree to invalid commit
ok 13 - git_revert: modified submodule does not update submodule work tree from invalid commit
ok 14 - git_revert: added submodule doesn't remove untracked unignored file with same name
# still have 2 known breakage(s)
# passed all remaining 12 test(s)
1..14
*** t3514-cherry-pick-revert-gpg.sh ***
1..0 # SKIP skip all test {cherry-pick,revert} --[no-]gpg-sign, gpg not available
*** t3600-rm.sh ***
ok 1 - Initialize test directory
ok 2 - add files with funny names
ok 3 - Pre-check that foo exists and is in index before git rm foo
ok 4 - Test that git rm foo succeeds
ok 5 - Test that git rm --cached foo succeeds if the index matches the file
ok 6 - Test that git rm --cached foo succeeds if the index matches the file
ok 7 - Test that git rm --cached foo fails if the index matches neither the file nor HEAD
ok 8 - Test that git rm --cached -f foo works in case where --cached only did not
ok 9 - Post-check that foo exists but is not in index after git rm foo
ok 10 - Pre-check that bar exists and is in index before "git rm bar"
ok 11 - Test that "git rm bar" succeeds
ok 12 - Post-check that bar does not exist and is not in index after "git rm -f bar"
ok 13 - Test that "git rm -- -q" succeeds (remove a file that looks like an option)
ok 14 - Test that "git rm -f" succeeds with embedded space, tab, or newline characters.
ok 15 - Test that "git rm -f" fails if its rm fails
ok 16 - When the rm in "git rm -f" fails, it should not remove the file from the index
ok 17 - Remove nonexistent file with --ignore-unmatch
ok 18 - "rm" command printed
ok 19 - "rm" command suppressed with --quiet
ok 20 - Re-add foo and baz
ok 21 - Modify foo -- rm should refuse
ok 22 - Modified foo -- rm -f should work
ok 23 - Re-add foo and baz for HEAD tests
ok 24 - foo is different in index from HEAD -- rm should refuse
ok 25 - but with -f it should work.
ok 26 - refuse to remove cached empty file with modifications
ok 27 - remove intent-to-add file without --force
ok 28 - Recursive test setup
ok 29 - Recursive without -r fails
ok 30 - Recursive with -r but dirty
ok 31 - Recursive with -r -f
ok 32 - Remove nonexistent file returns nonzero exit status
ok 33 - Call "rm" from outside the work tree
ok 34 - refresh index before checking if it is up-to-date
ok 35 - choking "git rm" should not let it die with cruft (induce SIGPIPE)
ok 36 - choking "git rm" should not let it die with cruft (induce and check SIGPIPE)
ok 37 - Resolving by removal is not a warning-worthy event
ok 38 - rm removes subdirectories recursively
ok 39 - rm removes empty submodules from work tree
ok 40 - rm removes removed submodule from index and .gitmodules
ok 41 - rm removes work tree of unmodified submodules
ok 42 - rm removes a submodule with a trailing /
ok 43 - rm fails when given a file with a trailing /
ok 44 - rm succeeds when given a directory with a trailing /
ok 45 - rm of a populated submodule with different HEAD fails unless forced
ok 46 - rm --cached leaves work tree of populated submodules and .gitmodules alone
ok 47 - rm --dry-run does not touch the submodule or .gitmodules
ok 48 - rm does not complain when no .gitmodules file is found
ok 49 - rm will error out on a modified .gitmodules file unless staged
ok 50 - rm will not error out on .gitmodules file with zero stat data
ok 51 - rm issues a warning when section is not found in .gitmodules
ok 52 - rm of a populated submodule with modifications fails unless forced
ok 53 - rm of a populated submodule with untracked files fails unless forced
ok 54 - setup submodule conflict
ok 55 - rm removes work tree of unmodified conflicted submodule
ok 56 - rm of a conflicted populated submodule with different HEAD fails unless forced
ok 57 - rm of a conflicted populated submodule with modifications fails unless forced
ok 58 - rm of a conflicted populated submodule with untracked files fails unless forced
ok 59 - rm of a conflicted populated submodule with a .git directory fails even when forced
ok 60 - rm of a conflicted unpopulated submodule succeeds
ok 61 - rm of a populated submodule with a .git directory migrates git dir
ok 62 - setup subsubmodule
ok 63 - rm recursively removes work tree of unmodified submodules
ok 64 - rm of a populated nested submodule with different nested HEAD fails unless forced
ok 65 - rm of a populated nested submodule with nested modifications fails unless forced
ok 66 - rm of a populated nested submodule with nested untracked files fails unless forced
ok 67 - rm absorbs submodule's nested .git directory
ok 68 - checking out a commit after submodule removal needs manual updates
ok 69 - rm of d/f when d has become a non-directory
ok 70 - rm of d/f when d has become a dangling symlink
ok 71 - rm of file when it has become a directory
ok 72 - rm across a symlinked leading path (no index)
not ok 73 - rm across a symlinked leading path (w/ index) # TODO known breakage
ok 74 - setup for testing rm messages
ok 75 - rm files with different staged content
ok 76 - rm files with different staged content without hints
ok 77 - rm file with local modification
ok 78 - rm file with local modification without hints
ok 79 - rm file with changes in the index
ok 80 - rm file with changes in the index without hints
ok 81 - rm files with two different errors
ok 82 - rm empty string should fail
# still have 1 known breakage(s)
# passed all remaining 81 test(s)
1..82
*** t3601-rm-pathspec-file.sh ***
ok 1 - setup
ok 2 - simplest
ok 3 - --pathspec-file-nul
ok 4 - only touches what was listed
ok 5 - error conditions
# passed all 5 test(s)
1..5
*** t3602-rm-sparse-checkout.sh ***
ok 1 - setup
ok 2 - rm does not remove sparse entries
ok 3 - rm -f does not remove sparse entries
ok 4 - rm --dry-run does not remove sparse entries
ok 5 - recursive rm does not remove sparse entries
ok 6 - recursive rm --sparse removes sparse entries
ok 7 - rm obeys advice.updateSparsePath
ok 8 - do not advice about sparse entries when they do not match the pathspec
ok 9 - do not warn about sparse entries when pathspec matches dense entries
ok 10 - do not warn about sparse entries with --ignore-unmatch
ok 11 - refuse to rm a non-skip-worktree path outside sparse cone
ok 12 - can remove files from non-sparse dir
ok 13 - refuse to remove non-skip-worktree file from sparse dir
# passed all 13 test(s)
1..13
*** t3650-replay-basics.sh ***
ok 1 - setup
ok 2 - setup bare
ok 3 - using replay to rebase two branches, one on top of other
ok 4 - using replay on bare repo to rebase two branches, one on top of other
ok 5 - using replay to rebase with a conflict
ok 6 - using replay on bare repo to rebase with a conflict
ok 7 - using replay to perform basic cherry-pick
ok 8 - using replay on bare repo to perform basic cherry-pick
ok 9 - replay on bare repo fails with both --advance and --onto
ok 10 - replay fails when both --advance and --onto are omitted
ok 11 - using replay to also rebase a contained branch
ok 12 - using replay on bare repo to also rebase a contained branch
ok 13 - using replay to rebase multiple divergent branches
ok 14 - using replay on bare repo to rebase multiple divergent branches, including contained ones
# passed all 14 test(s)
1..14
*** t3700-add.sh ***
ok 1 - Test of git add
ok 2 - Test with no pathspecs
ok 3 - Post-check that foo is in the index
ok 4 - Test that "git add -- -q" works
ok 5 - git add: core.fsyncmethod=batch
ok 6 - git update-index: core.fsyncmethod=batch
ok 7 - git add: Test that executable bit is not used if core.filemode=0
ok 8 - git add: filemode=0 should not get confused by symlink
ok 9 - git update-index --add: Test that executable bit is not used...
ok 10 - git add: filemode=0 should not get confused by symlink
ok 11 - git update-index --add: Test that executable bit is not used...
ok 12 - .gitignore test setup
ok 13 - .gitignore is honored
ok 14 - error out when attempting to add ignored ones without -f
ok 15 - error out when attempting to add ignored ones without -f
ok 16 - error out when attempting to add ignored ones but add others
ok 17 - add ignored ones with -f
ok 18 - add ignored ones with -f
ok 19 - add ignored ones with -f
ok 20 - .gitignore with subdirectory
ok 21 - check correct prefix detection
ok 22 - git add with filemode=0, symlinks=0, and unmerged entries
ok 23 - git add with filemode=0, symlinks=0 prefers stage 2 over stage 1
ok 24 - git add --refresh
ok 25 - git add --refresh with pathspec
ok 26 - git add --refresh correctly reports no match error
ok 27 - git add should fail atomically upon an unreadable file
ok 28 - git add --ignore-errors
ok 29 - git add (add.ignore-errors)
ok 30 - git add (add.ignore-errors = false)
ok 31 - --no-ignore-errors overrides config
ok 32 - git add 'fo\[ou\]bar' ignores foobar
ok 33 - git add to resolve conflicts on otherwise ignored path
ok 34 - "add non-existent" should fail
ok 35 - git add -A on empty repo does not error out
ok 36 - "git add ." in empty repo
ok 37 - "git add" a embedded repository
ok 38 - error on a repository with no commits
ok 39 - git add --dry-run of existing changed file
ok 40 - git add --dry-run of non-existing file
ok 41 - git add --dry-run of an existing file output
ok 42 - git add --dry-run --ignore-missing of non-existing file
ok 43 - git add --dry-run --ignore-missing of non-existing file output
ok 44 - git add --dry-run --interactive should fail
ok 45 - git add empty string should fail
ok 46 - git add --chmod=[+-]x stages correctly
ok 47 - git add --chmod=+x with symlinks
ok 48 - git add --chmod=[+-]x changes index with already added file
ok 49 - git add --chmod=[+-]x does not change the working tree
ok 50 - git add --chmod fails with non regular files (but updates the other paths)
ok 51 - git add --chmod honors --dry-run
ok 52 - git add --chmod --dry-run reports error for non regular files
ok 53 - git add --chmod --dry-run reports error for unmatched pathspec
ok 54 - no file status change if no pathspec is given
ok 55 - no file status change if no pathspec is given in subdir
ok 56 - all statuses changed in folder if . is given
ok 57 # skip path is case-insensitive (missing CASE_INSENSITIVE_FS)
# passed all 57 test(s)
1..57
*** t3701-add-interactive.sh ***
ok 1 - warn about add.interactive.useBuiltin
ok 2 - setup (initial)
ok 3 - status works (initial)
ok 4 - setup expected
ok 5 - diff works (initial)
ok 6 - revert works (initial)
ok 7 - add untracked (multiple)
ok 8 - setup (commit)
ok 9 - status works (commit)
ok 10 - update can stage deletions
ok 11 - setup expected
ok 12 - diff works (commit)
ok 13 - revert works (commit)
ok 14 - setup expected
ok 15 - dummy edit works
ok 16 - setup patch
ok 17 - setup fake editor
ok 18 - bad edit rejected
ok 19 - setup patch
ok 20 - garbage edit rejected
ok 21 - setup patch
ok 22 - setup expected
ok 23 - real edit works
ok 24 - setup file
ok 25 - setup patch
ok 26 - setup expected
ok 27 - edit can strip spaces from empty context lines
ok 28 - skip files similarly as commit -a
ok 29 - patch does not affect mode
ok 30 - stage mode but not hunk
ok 31 - stage mode and hunk
ok 32 - different prompts for mode change/deleted
ok 33 - correct message when there is nothing to do
ok 34 - setup again
ok 35 - setup patch
ok 36 - setup expected
ok 37 - add first line works
ok 38 - setup expected
ok 39 - deleting a non-empty file
ok 40 - setup expected
ok 41 - deleting an empty file
ok 42 - adding an empty file
ok 43 - split hunk setup
ok 44 - goto hunk
ok 45 - navigate to hunk via regex
ok 46 - split hunk "add -p (edit)"
ok 47 - split hunk "add -p (no, yes, edit)"
ok 48 - split hunk with incomplete line at end
ok 49 - edit, adding lines to the first hunk
ok 50 - patch mode ignores unmerged entries
ok 51 - index is refreshed after applying patch
ok 52 - diffs can be colorized
ok 53 - colors can be overridden
ok 54 - brackets appear without color
ok 55 - colors can be skipped with color.ui=false
ok 56 - colorized diffs respect diff.wsErrorHighlight
ok 57 - diffFilter filters diff
ok 58 - detect bogus diffFilter output
ok 59 - handle iffy colored hunk headers
ok 60 - handle very large filtered diff
ok 61 - diff.algorithm is passed to `git diff-files`
ok 62 - patch-mode via -i prompts for files
ok 63 - add -p handles globs
ok 64 - add -p handles relative paths
ok 65 - add -p does not expand argument lists
ok 66 - hunk-editing handles custom comment char
ok 67 - add -p works even with color.ui=always
ok 68 - setup different kinds of dirty submodules
ok 69 - status ignores dirty submodules (except HEAD)
ok 70 - handle submodules
ok 71 - set up pathological context
ok 72 - add -p works with pathological context lines
ok 73 - add -p patch editing works with pathological context lines
ok 74 - checkout -p works with pathological context lines
ok 75 - add -N followed by add -p patch editing
ok 76 - checkout -p patch editing of added file
ok 77 - show help from add--helper
ok 78 - reset -p with unmerged files
# passed all 78 test(s)
1..78
*** t3702-add-edit.sh ***
ok 1 - setup
ok 2 - add -e
ok 3 - add -e notices editor failure
# passed all 3 test(s)
1..3
*** t3703-add-magic-pathspec.sh ***
ok 1 - setup
ok 2 - add :/
ok 3 - add :/anothersub
ok 4 - add :/non-existent
ok 5 - a file with the same (long) magic name exists
ok 6 - a file with the same (short) magic name exists
# passed all 6 test(s)
1..6
*** t3704-add-pathspec-file.sh ***
ok 1 - setup
ok 2 - --pathspec-from-file from stdin
ok 3 - --pathspec-from-file from file
ok 4 - NUL delimiters
ok 5 - LF delimiters
ok 6 - no trailing delimiter
ok 7 - CRLF delimiters
ok 8 - quotes
ok 9 - quotes not compatible with --pathspec-file-nul
ok 10 - only touches what was listed
ok 11 - error conditions
# passed all 11 test(s)
1..11
*** t3705-add-sparse-checkout.sh ***
ok 1 - setup
ok 2 - git add does not remove sparse entries
ok 3 - git add -A does not remove sparse entries
ok 4 - git add . does not remove sparse entries
ok 5 - git add does not update sparse entries
ok 6 - git add -f does not update sparse entries
ok 7 - git add -u does not update sparse entries
ok 8 - git add --ignore-removal does not update sparse entries
ok 9 - git add --dry-run does not update sparse entries
ok 10 - git add --refresh does not update sparse entries
ok 11 - git add --chmod does not update sparse entries
ok 12 - git add --renormalize does not update sparse entries
ok 13 - git add --dry-run --ignore-missing warn on sparse path
ok 14 - do not advice about sparse entries when they do not match the pathspec
ok 15 - do not warn when pathspec matches dense entries
ok 16 - git add fails outside of sparse-checkout definition
ok 17 - add obeys advice.updateSparsePath
ok 18 - add allows sparse entries with --sparse
ok 19 - can add files from non-sparse dir
ok 20 - refuse to add non-skip-worktree file from sparse dir
# passed all 20 test(s)
1..20
*** t3800-mktag.sh ***
ok 1 - setup
ok 2 - basic usage
ok 3 - fail with [--[no-]strict]: Tag object length check
ok 4 - setup: Tag object length check
ok 5 - hash-object & fsck unreachable: Tag object length check
ok 6 - update-ref & fsck reachable: Tag object length check
ok 7 - for-each-ref: Tag object length check
ok 8 - fast-export & fast-import: Tag object length check
ok 9 - fail with [--[no-]strict]: "object" line label check
ok 10 - setup: "object" line label check
ok 11 - hash-object & fsck unreachable: "object" line label check
ok 12 - update-ref & fsck reachable: "object" line label check
ok 13 - for-each-ref: "object" line label check
ok 14 - fast-export & fast-import: "object" line label check
ok 15 - fail with [--[no-]strict]: "object" line check
ok 16 - setup: "object" line check
ok 17 - hash-object & fsck unreachable: "object" line check
ok 18 - update-ref & fsck reachable: "object" line check
ok 19 - for-each-ref: "object" line check
ok 20 - fast-export & fast-import: "object" line check
ok 21 - fail with [--[no-]strict]: "type" line label check
ok 22 - setup: "type" line label check
ok 23 - hash-object & fsck unreachable: "type" line label check
ok 24 - update-ref & fsck reachable: "type" line label check
ok 25 - for-each-ref: "type" line label check
ok 26 - fast-export & fast-import: "type" line label check
ok 27 - fail with [--[no-]strict]: "type" line eol check
ok 28 - setup: "type" line eol check
ok 29 - hash-object & fsck unreachable: "type" line eol check
ok 30 - update-ref & fsck reachable: "type" line eol check
ok 31 - for-each-ref: "type" line eol check
ok 32 - fast-export & fast-import: "type" line eol check
ok 33 - fail with [--[no-]strict]: "tag" line label check #1
ok 34 - setup: "tag" line label check #1
ok 35 - hash-object & fsck unreachable: "tag" line label check #1
ok 36 - update-ref & fsck reachable: "tag" line label check #1
ok 37 - for-each-ref: "tag" line label check #1
ok 38 - fast-export & fast-import: "tag" line label check #1
ok 39 - fail with [--[no-]strict]: "tag" line label check #2
ok 40 - setup: "tag" line label check #2
ok 41 - hash-object & fsck unreachable: "tag" line label check #2
ok 42 - update-ref & fsck reachable: "tag" line label check #2
ok 43 - for-each-ref: "tag" line label check #2
ok 44 - fast-export & fast-import: "tag" line label check #2
ok 45 - fail with [--[no-]strict]: "type" line type-name length check
ok 46 - setup: "type" line type-name length check
ok 47 - hash-object & fsck unreachable: "type" line type-name length check
ok 48 - update-ref & fsck reachable: "type" line type-name length check
ok 49 - for-each-ref: "type" line type-name length check
ok 50 - fast-export & fast-import: "type" line type-name length check
ok 51 - fail with [--[no-]strict]: verify object (hash/type) check -- correct type, nonexisting object
ok 52 - setup: verify object (hash/type) check -- correct type, nonexisting object
ok 53 - hash-object & fsck unreachable: verify object (hash/type) check -- correct type, nonexisting object
ok 54 - update-ref & fsck reachable: verify object (hash/type) check -- correct type, nonexisting object
ok 55 - for-each-ref: verify object (hash/type) check -- correct type, nonexisting object
ok 56 - fast-export & fast-import: verify object (hash/type) check -- correct type, nonexisting object
ok 57 - fail with [--[no-]strict]: verify object (hash/type) check -- made-up type, valid object
ok 58 - setup: verify object (hash/type) check -- made-up type, valid object
ok 59 - hash-object & fsck unreachable: verify object (hash/type) check -- made-up type, valid object
ok 60 - update-ref & fsck reachable: verify object (hash/type) check -- made-up type, valid object
ok 61 - for-each-ref: verify object (hash/type) check -- made-up type, valid object
ok 62 - fast-export & fast-import: verify object (hash/type) check -- made-up type, valid object
ok 63 - fail with [--[no-]strict]: verify object (hash/type) check -- made-up type, nonexisting object
ok 64 - setup: verify object (hash/type) check -- made-up type, nonexisting object
ok 65 - hash-object & fsck unreachable: verify object (hash/type) check -- made-up type, nonexisting object
ok 66 - update-ref & fsck reachable: verify object (hash/type) check -- made-up type, nonexisting object
ok 67 - for-each-ref: verify object (hash/type) check -- made-up type, nonexisting object
ok 68 - fast-export & fast-import: verify object (hash/type) check -- made-up type, nonexisting object
ok 69 - fail with [--[no-]strict]: verify object (hash/type) check -- mismatched type, valid object
ok 70 - setup: verify object (hash/type) check -- mismatched type, valid object
ok 71 - hash-object & fsck unreachable: verify object (hash/type) check -- mismatched type, valid object
ok 72 - update-ref & fsck reachable: verify object (hash/type) check -- mismatched type, valid object
ok 73 - for-each-ref: verify object (hash/type) check -- mismatched type, valid object
ok 74 - fast-export & fast-import: verify object (hash/type) check -- mismatched type, valid object
ok 75 - setup replacement of commit -> commit and tree -> blob
ok 76 - tag to a commit replaced by another commit
ok 77 - fail with [--[no-]strict]: verify object (hash/type) check -- mismatched type, valid object
ok 78 - setup: verify object (hash/type) check -- mismatched type, valid object
ok 79 - hash-object & fsck unreachable: verify object (hash/type) check -- mismatched type, valid object
ok 80 - update-ref & fsck reachable: verify object (hash/type) check -- mismatched type, valid object
ok 81 - for-each-ref: verify object (hash/type) check -- mismatched type, valid object
ok 82 - fast-export & fast-import: verify object (hash/type) check -- mismatched type, valid object
ok 83 - fail with [--[no-]strict]: verify tag-name check
ok 84 - setup: verify tag-name check
ok 85 - hash-object & fsck unreachable: verify tag-name check
ok 86 - update-ref & fsck reachable: verify tag-name check
ok 87 - for-each-ref: verify tag-name check
ok 88 - fast-export & fast-import: verify tag-name check
ok 89 - fail with [--[no-]strict]: "tagger" line label check #1
ok 90 - setup: "tagger" line label check #1
ok 91 - hash-object & fsck unreachable: "tagger" line label check #1
ok 92 - update-ref & fsck reachable: "tagger" line label check #1
ok 93 - for-each-ref: "tagger" line label check #1
ok 94 - fast-export & fast-import: "tagger" line label check #1
ok 95 - fail with [--[no-]strict]: "tagger" line label check #2
ok 96 - setup: "tagger" line label check #2
ok 97 - hash-object & fsck unreachable: "tagger" line label check #2
ok 98 - update-ref & fsck reachable: "tagger" line label check #2
ok 99 - for-each-ref: "tagger" line label check #2
ok 100 - fast-export & fast-import: "tagger" line label check #2
ok 101 - allow missing tag author name
ok 102 - fail with [--[no-]strict]: disallow malformed tagger
ok 103 - setup: disallow malformed tagger
ok 104 - hash-object & fsck unreachable: disallow malformed tagger
ok 105 - update-ref & fsck reachable: disallow malformed tagger
ok 106 - for-each-ref: disallow malformed tagger
ok 107 - fast-export & fast-import: disallow malformed tagger
ok 108 - allow empty tag email
ok 109 - allow spaces in tag email like fsck
ok 110 - fail with [--[no-]strict]: disallow missing tag timestamp
ok 111 - setup: disallow missing tag timestamp
ok 112 - hash-object & fsck unreachable: disallow missing tag timestamp
ok 113 - update-ref & fsck reachable: disallow missing tag timestamp
ok 114 - for-each-ref: disallow missing tag timestamp
ok 115 - fast-export & fast-import: disallow missing tag timestamp
ok 116 - fail with [--[no-]strict]: detect invalid tag timestamp1
ok 117 - setup: detect invalid tag timestamp1
ok 118 - hash-object & fsck unreachable: detect invalid tag timestamp1
ok 119 - update-ref & fsck reachable: detect invalid tag timestamp1
ok 120 - for-each-ref: detect invalid tag timestamp1
ok 121 - fast-export & fast-import: detect invalid tag timestamp1
ok 122 - fail with [--[no-]strict]: detect invalid tag timestamp2
ok 123 - setup: detect invalid tag timestamp2
ok 124 - hash-object & fsck unreachable: detect invalid tag timestamp2
ok 125 - update-ref & fsck reachable: detect invalid tag timestamp2
ok 126 - for-each-ref: detect invalid tag timestamp2
ok 127 - fast-export & fast-import: detect invalid tag timestamp2
ok 128 - fail with [--[no-]strict]: detect invalid tag timezone1
ok 129 - setup: detect invalid tag timezone1
ok 130 - hash-object & fsck unreachable: detect invalid tag timezone1
ok 131 - update-ref & fsck reachable: detect invalid tag timezone1
ok 132 - for-each-ref: detect invalid tag timezone1
ok 133 - fast-export & fast-import: detect invalid tag timezone1
ok 134 - fail with [--[no-]strict]: detect invalid tag timezone2
ok 135 - setup: detect invalid tag timezone2
ok 136 - hash-object & fsck unreachable: detect invalid tag timezone2
ok 137 - update-ref & fsck reachable: detect invalid tag timezone2
ok 138 - for-each-ref: detect invalid tag timezone2
ok 139 - fast-export & fast-import: detect invalid tag timezone2
ok 140 - allow invalid tag timezone
ok 141 - fail with [--[no-]strict]: detect invalid header entry
ok 142 - setup: detect invalid header entry
ok 143 - hash-object & fsck unreachable: detect invalid header entry
ok 144 - update-ref & fsck reachable: detect invalid header entry
ok 145 - for-each-ref: detect invalid header entry
ok 146 - fast-export & fast-import: detect invalid header entry
ok 147 - invalid header entry config & fsck
ok 148 - allow extra newlines at start of body
ok 149 - allow a blank line before an empty body (1)
ok 150 - allow no blank line before an empty body (2)
ok 151 - create valid tag object
# passed all 151 test(s)
1..151
*** t3900-i18n-commit.sh ***
ok 1 - setup
ok 2 - no encoding header for base case
ok 3 - UTF-16 refused because of NULs
ok 4 - UTF-8 invalid characters refused
ok 5 - UTF-8 overlong sequences rejected
ok 6 - UTF-8 non-characters refused
ok 7 - UTF-8 non-characters refused
ok 8 - ISO8859-1 setup
ok 9 - eucJP setup
ok 10 - ISO-2022-JP setup
ok 11 - check encoding header for ISO8859-1
ok 12 - check encoding header for eucJP
ok 13 - check encoding header for ISO-2022-JP
ok 14 - config to remove customization
ok 15 - ISO8859-1 should be shown in UTF-8 now
ok 16 - eucJP should be shown in UTF-8 now
ok 17 - ISO-2022-JP should be shown in UTF-8 now
ok 18 - config to add customization
ok 19 - ISO8859-1 should be shown in itself now
ok 20 - eucJP should be shown in itself now
ok 21 - ISO-2022-JP should be shown in itself now
ok 22 - config to tweak customization
ok 23 - ISO8859-1 should be shown in UTF-8 now
ok 24 - eucJP should be shown in UTF-8 now
ok 25 - ISO-2022-JP should be shown in UTF-8 now
ok 26 - eucJP should be shown in eucJP now
ok 27 - ISO-2022-JP should be shown in eucJP now
ok 28 - eucJP should be shown in ISO-2022-JP now
ok 29 - ISO-2022-JP should be shown in ISO-2022-JP now
ok 30 - No conversion with ISO8859-1
ok 31 - No conversion with eucJP
ok 32 - No conversion with ISO-2022-JP
ok 33 - commit --fixup with eucJP encoding
ok 34 - commit --squash with ISO-2022-JP encoding
ok 35 - commit --fixup into UTF-8 from ISO-8859-1
ok 36 - commit --squash into ISO-8859-1 from UTF-8
ok 37 - commit --squash into eucJP from ISO-2022-JP
ok 38 - commit --fixup into ISO-2022-JP from UTF-8
# passed all 38 test(s)
1..38
*** t3901-i18n-patch.sh ***
ok 1 - setup
ok 2 - format-patch output (ISO-8859-1)
ok 3 - format-patch output (UTF-8)
ok 4 - rebase (U/U)
ok 5 - rebase (U/L)
ok 6 - rebase (L/L)
ok 7 - rebase (L/U)
ok 8 - cherry-pick(U/U)
ok 9 - cherry-pick(L/L)
ok 10 - cherry-pick(U/L)
ok 11 - cherry-pick(L/U)
ok 12 - rebase --merge (U/U)
ok 13 - rebase --merge (U/L)
ok 14 - rebase --merge (L/L)
ok 15 - rebase --merge (L/U)
ok 16 - am (U/U)
ok 17 - am (L/L)
ok 18 - am (U/L)
ok 19 - am --no-utf8 (U/L)
ok 20 - am (L/U)
# passed all 20 test(s)
1..20
*** t3902-quoted.sh ***
ok 1 - setup
ok 2 - setup expected files
ok 3 - check fully quoted output from ls-files
ok 4 - check fully quoted output from diff-files
ok 5 - check fully quoted output from diff-index
ok 6 - check fully quoted output from diff-tree
ok 7 - check fully quoted output from ls-tree
ok 8 - setting core.quotepath
ok 9 - check fully quoted output from ls-files
ok 10 - check fully quoted output from diff-files
ok 11 - check fully quoted output from diff-index
ok 12 - check fully quoted output from diff-tree
ok 13 - check fully quoted output from ls-tree
# passed all 13 test(s)
1..13
*** t3903-stash.sh ***
ok 1 - usage on cmd and subcommand invalid option
ok 2 - usage on main command -h emits a summary of subcommands
ok 3 - usage for subcommands should emit subcommand usage
ok 4 - stash some dirty working directory
ok 5 - parents of stash
ok 6 - applying bogus stash does nothing
ok 7 - apply does not need clean working directory
ok 8 - apply does not clobber working directory changes
ok 9 - apply stashed changes
ok 10 - apply stashed changes (including index)
ok 11 - unstashing in a subdirectory
ok 12 - stash drop complains of extra options
ok 13 - drop top stash
ok 14 - drop middle stash
ok 15 - drop middle stash by index
ok 16 - drop stash reflog updates refs/stash
ok 17 - drop stash reflog updates refs/stash with rewrite
ok 18 - stash pop
ok 19 - stash branch
ok 20 - apply -q is quiet
ok 21 - apply --index -q is quiet
ok 22 - save -q is quiet
ok 23 - pop -q works and is quiet
ok 24 - pop -q --index works and is quiet
ok 25 - drop -q is quiet
ok 26 - stash push -q --staged refreshes the index
ok 27 - stash apply -q --index refreshes the index
ok 28 - stash -k
ok 29 - stash --no-keep-index
ok 30 - stash --staged
ok 31 - dont assume push with non-option args
ok 32 - stash --invalid-option
ok 33 - stash an added file
ok 34 - stash --intent-to-add file
ok 35 - stash rm then recreate
ok 36 - stash rm and ignore
ok 37 - stash rm and ignore (stage .gitignore)
ok 38 - stash file to symlink
ok 39 - stash file to symlink (stage rm)
ok 40 - stash file to symlink (full stage)
ok 41 - stash symlink to file
ok 42 - this must have re-created the symlink
ok 43 - unstash must re-create the file
ok 44 - stash symlink to file (stage rm)
ok 45 - this must have re-created the symlink
ok 46 - unstash must re-create the file
ok 47 - stash symlink to file (full stage)
ok 48 - this must have re-created the symlink
ok 49 - unstash must re-create the file
not ok 50 - stash directory to file # TODO known breakage
not ok 51 - stash file to directory # TODO known breakage
ok 52 - giving too many ref arguments does not modify files
ok 53 - drop: too many arguments errors out (does nothing)
ok 54 - show: too many arguments errors out (does nothing)
ok 55 - stash create - no changes
ok 56 - stash branch - no stashes on stack, stash-like argument
ok 57 - stash branch - stashes on stack, stash-like argument
ok 58 - stash branch complains with no arguments
ok 59 - stash show format defaults to --stat
ok 60 - stash show - stashes on stack, stash-like argument
ok 61 - stash show -p - stashes on stack, stash-like argument
ok 62 - stash show - no stashes on stack, stash-like argument
ok 63 - stash show -p - no stashes on stack, stash-like argument
ok 64 - stash show --patience shows diff
ok 65 - drop: fail early if specified stash is not a stash ref
ok 66 - pop: fail early if specified stash is not a stash ref
ok 67 - ref with non-existent reflog
ok 68 - invalid ref of the form stash@{n}, n >= N
ok 69 - invalid ref of the form "n", n >= N
ok 70 - valid ref of the form "n", n < N
ok 71 - branch: do not drop the stash if the branch exists
ok 72 - branch: should not drop the stash if the apply fails
ok 73 - apply: show same status as git status (relative to ./)
ok 74 - stash where working directory contains "HEAD" file
ok 75 - store called with invalid commit
ok 76 - store called with non-stash commit
ok 77 - store updates stash ref and reflog
ok 78 - handle stash specification with spaces
ok 79 - setup stash with index and worktree changes
ok 80 - stash list -p shows simple diff
ok 81 - stash list --cc shows combined diff
ok 82 - stash is not confused by partial renames
ok 83 - push -m shows right message
ok 84 - push -m also works without space
ok 85 - store -m foo shows right message
ok 86 - store -mfoo shows right message
ok 87 - store --message=foo shows right message
ok 88 - store --message foo shows right message
ok 89 - push -mfoo uses right message
ok 90 - push --message foo is synonym for -mfoo
ok 91 - push --message=foo is synonym for -mfoo
ok 92 - push -m shows right message
ok 93 - create stores correct message
ok 94 - create when branch name has /
ok 95 - create with multiple arguments for the message
ok 96 - create in a detached state
ok 97 - stash -- <pathspec> stashes and restores the file
ok 98 - stash -- <pathspec> stashes in subdirectory
ok 99 - stash with multiple pathspec arguments
ok 100 - stash with file including $IFS character
ok 101 - stash with pathspec matching multiple paths
ok 102 - stash push -p with pathspec shows no changes only once
ok 103 - push <pathspec>: show no changes when there are none
ok 104 - push: <pathspec> not in the repository errors out
ok 105 - push: -q is quiet with changes
ok 106 - push: -q is quiet with no changes
ok 107 - push: -q is quiet even if there is no initial commit
ok 108 - untracked files are left in place when -u is not given
ok 109 - stash without verb with pathspec
ok 110 - stash -k -- <pathspec> leaves unstaged files intact
ok 111 - stash -- <subdir> leaves untracked files in subdir intact
ok 112 - stash -- <subdir> works with binary files
ok 113 - stash with user.name and user.email set works
ok 114 - stash works when user.name and user.email are not set
ok 115 - stash --keep-index with file deleted in index does not resurrect it on disk
ok 116 - stash apply should succeed with unmodified file
ok 117 - stash handles skip-worktree entries nicely
ok 118 - stash with core.fsyncmethod=batch
ok 119 - git stash succeeds despite directory/file change
ok 120 - git stash can pop file -> directory saved changes
ok 121 - git stash can pop directory -> file saved changes
ok 122 - restore untracked files even when we hit conflicts
ok 123 - stash create reports a locked index
ok 124 - stash push reports a locked index
ok 125 - stash apply reports a locked index
# still have 2 known breakage(s)
# passed all remaining 123 test(s)
1..125
*** t3904-stash-patch.sh ***
ok 1 - setup
ok 2 - saying "n" does nothing
ok 3 - git stash -p
ok 4 - git stash -p --no-keep-index
ok 5 - git stash --no-keep-index -p
ok 6 - stash -p --no-keep-index -- <pathspec> does not unstage other files
ok 7 - none of this moved HEAD
ok 8 - stash -p with split hunk
# passed all 8 test(s)
1..8
*** t3905-stash-include-untracked.sh ***
ok 1 - stash save --include-untracked some dirty working directory
ok 2 - stash save --include-untracked cleaned the untracked files
ok 3 - stash save --include-untracked stashed the untracked files
ok 4 - stash save --patch --include-untracked fails
ok 5 - stash save --patch --all fails
ok 6 - clean up untracked/untracked file to prepare for next tests
ok 7 - stash pop after save --include-untracked leaves files untracked again
ok 8 - clean up untracked/ directory to prepare for next tests
ok 9 - stash save -u dirty index
ok 10 - stash save --include-untracked dirty index got stashed
ok 11 - stash save --include-untracked -q is quiet
ok 12 - stash save --include-untracked removed files
ok 13 - stash save --include-untracked removed files got stashed
ok 14 - stash save --include-untracked respects .gitignore
ok 15 - stash save -u can stash with only untracked files different
ok 16 - stash save --all does not respect .gitignore
ok 17 - stash save --all is stash poppable
ok 18 - stash push --include-untracked with pathspec
ok 19 - stash push with $IFS character
ok 20 - stash previously ignored file
ok 21 - stash -u -- <untracked> doesnt print error
ok 22 - stash -u -- <untracked> leaves rest of working tree in place
ok 23 - stash -u -- <tracked> <untracked> clears changes in both
ok 24 - stash --all -- <ignored> stashes ignored file
ok 25 - stash --all -- <tracked> <ignored> clears changes in both
ok 26 - stash -u -- <ignored> leaves ignored file alone
ok 27 - stash -u -- <non-existent> shows no changes when there are none
ok 28 - stash -u with globs
ok 29 - stash show --include-untracked shows untracked files
ok 30 - stash show --only-untracked only shows untracked files
ok 31 - stash show --no-include-untracked cancels --{include,only}-untracked
ok 32 - stash show --include-untracked errors on duplicate files
ok 33 - stash show --{include,only}-untracked on stashes without untracked entries
ok 34 - stash -u ignores sub-repository
# passed all 34 test(s)
1..34
*** t3906-stash-submodule.sh ***
ok 1 - git_stash: added submodule creates empty directory
not ok 2 - git_stash: added submodule leaves existing empty directory alone # TODO known breakage
not ok 3 - git_stash: replace tracked file with submodule creates empty directory # TODO known breakage
not ok 4 - git_stash: replace directory with submodule # TODO known breakage
not ok 5 - git_stash: removed submodule leaves submodule directory and its contents in place # TODO known breakage
not ok 6 - git_stash: removed submodule leaves submodule containing a .git directory alone # TODO known breakage
ok 7 - git_stash: replace submodule with a directory must fail
ok 8 - git_stash: replace submodule containing a .git directory with a directory must fail
not ok 9 - git_stash: replace submodule with a file must fail # TODO known breakage
not ok 10 - git_stash: replace submodule containing a .git directory with a file must fail # TODO known breakage
not ok 11 - git_stash: modified submodule does not update submodule work tree # TODO known breakage
not ok 12 - git_stash: modified submodule does not update submodule work tree to invalid commit # TODO known breakage
not ok 13 - git_stash: modified submodule does not update submodule work tree from invalid commit # TODO known breakage
ok 14 - git_stash: added submodule doesn't remove untracked unignored file with same name
ok 15 - stash push with submodule.recurse=true preserves dirty submodule worktree
ok 16 - stash push and pop with submodule.recurse=true preserves dirty submodule worktree
# still have 10 known breakage(s)
# passed all remaining 6 test(s)
1..16
*** t3907-stash-show-config.sh ***
ok 1 - setup
ok 2 - showStat unset showPatch unset
ok 3 - showStat unset showPatch false
ok 4 - showStat unset showPatch true
ok 5 - showStat false showPatch unset
ok 6 - showStat false showPatch false
ok 7 - showStat false showPatch true
ok 8 - showStat true showPatch unset
ok 9 - showStat true showPatch false
ok 10 - showStat true showPatch true
# passed all 10 test(s)
1..10
*** t3908-stash-in-worktree.sh ***
ok 1 - setup
ok 2 - apply in subdirectory
# passed all 2 test(s)
1..2
*** t3909-stash-pathspec-file.sh ***
ok 1 - setup
ok 2 - simplest
ok 3 - --pathspec-file-nul
ok 4 - only touches what was listed
ok 5 - error conditions
# passed all 5 test(s)
1..5
*** t3910-mac-os-precompose.sh ***
1..0 # SKIP filesystem does not corrupt utf-8
*** t3920-crlf-messages.sh ***
ok 1 - Setup refs with commit and tag messages using CRLF
ok 2 - branch: --verbose works with messages using CRLF
ok 3 - branch: --format='%(contents:subject)' works with messages using CRLF
ok 4 - branch: --format='%(contents:body)' works with messages using CRLF
ok 5 - branch: --format='%(contents)' works with messages using CRLF
ok 6 - tag: --format='%(contents:subject)' works with messages using CRLF
ok 7 - tag: --format='%(contents:body)' works with messages using CRLF
ok 8 - tag: --format='%(contents)' works with messages using CRLF
ok 9 - for-each-ref: --format='%(contents:subject)' works with messages using CRLF
ok 10 - for-each-ref: --format='%(contents:body)' works with messages using CRLF
ok 11 - for-each-ref: --format='%(contents)' works with messages using CRLF
ok 12 - log: --oneline works with messages using CRLF
ok 13 - log: --format='%s' works with messages using CRLF
ok 14 - log: --format='%b' works with messages using CRLF
ok 15 - log: --format='%B' works with messages using CRLF
ok 16 - show: --format='%s' works with messages using CRLF
ok 17 - show: --format='%b' works with messages using CRLF
ok 18 - show: --format='%B' works with messages using CRLF
# passed all 18 test(s)
1..18
*** t4000-diff-format.sh ***
ok 1 - update-index --add two files with and without +x.
ok 2 - git diff-files -p after editing work tree.
ok 3 - validate git diff-files -p output.
ok 4 - git diff-files -s after editing work tree
ok 5 - git diff-files --no-patch as synonym for -s
ok 6 - git diff-files --no-patch --patch shows the patch
ok 7 - git diff-files --no-patch --patch-with-raw shows the patch and raw data
ok 8 - git diff-files --patch --no-patch does not show the patch
ok 9 - --no-patch in 'git diff-files --no-patch --stat' is a no-op
ok 10 - --no-patch clears all previous ones
ok 11 - --no-patch in 'git diff --no-patch --stat' is a no-op
ok 12 - --no-patch in 'git diff-files --no-patch --raw' is a no-op
ok 13 - --no-patch clears all previous ones
ok 14 - --no-patch in 'git diff --no-patch --raw' is a no-op
ok 15 - --no-patch in 'git diff-files --no-patch --numstat' is a no-op
ok 16 - --no-patch clears all previous ones
ok 17 - --no-patch in 'git diff --no-patch --numstat' is a no-op
ok 18 - --no-patch in 'git diff-files --no-patch --shortstat' is a no-op
ok 19 - --no-patch clears all previous ones
ok 20 - --no-patch in 'git diff --no-patch --shortstat' is a no-op
ok 21 - --no-patch in 'git diff-files --no-patch --summary' is a no-op
ok 22 - --no-patch clears all previous ones
ok 23 - --no-patch in 'git diff --no-patch --summary' is a no-op
ok 24 - --no-patch in 'git diff-files --no-patch --dirstat' is a no-op
ok 25 - --no-patch clears all previous ones
ok 26 - --no-patch in 'git diff --no-patch --dirstat' is a no-op
ok 27 - --no-patch in 'git diff-files --no-patch --cumulative' is a no-op
ok 28 - --no-patch clears all previous ones
ok 29 - --no-patch in 'git diff --no-patch --cumulative' is a no-op
ok 30 - --no-patch in 'git diff-files --no-patch --dirstat-by-file' is a no-op
ok 31 - --no-patch clears all previous ones
ok 32 - --no-patch in 'git diff --no-patch --dirstat-by-file' is a no-op
ok 33 - --no-patch in 'git diff-files --no-patch --patch-with-raw' is a no-op
ok 34 - --no-patch clears all previous ones
ok 35 - --no-patch in 'git diff --no-patch --patch-with-raw' is a no-op
ok 36 - --no-patch in 'git diff-files --no-patch --patch-with-stat' is a no-op
ok 37 - --no-patch clears all previous ones
ok 38 - --no-patch in 'git diff --no-patch --patch-with-stat' is a no-op
ok 39 - --no-patch in 'git diff-files --no-patch --compact-summary' is a no-op
ok 40 - --no-patch clears all previous ones
ok 41 - --no-patch in 'git diff --no-patch --compact-summary' is a no-op
# passed all 41 test(s)
1..41
*** t4001-diff-rename.sh ***
ok 1 - setup
ok 2 - update-index --add a file.
ok 3 - write that tree.
ok 4 - renamed and edited the file.
ok 5 - git diff-index -p -M after rename and editing.
ok 6 - validate the output.
ok 7 - test diff.renames=true
ok 8 - test diff.renames=false
ok 9 - test diff.renames unset
ok 10 - favour same basenames over different ones
ok 11 - test diff.renames=true for git status
ok 12 - test diff.renames=false for git status
ok 13 - favour same basenames even with minor differences
ok 14 - two files with same basename and same content
ok 15 - setup for many rename source candidates
ok 16 - rename pretty print with nothing in common
ok 17 - rename pretty print with common prefix
ok 18 - rename pretty print with common suffix
ok 19 - rename pretty print with common prefix and suffix
ok 20 - rename pretty print common prefix and suffix overlap
ok 21 - diff-tree -l0 defaults to a big rename limit, not zero
ok 22 - basename similarity vs best similarity
ok 23 - last line matters too
# passed all 23 test(s)
1..23
*** t4002-diff-basic.sh ***
ok 1 - adding test file NN and Z/NN
ok 2 - adding test file ND and Z/ND
ok 3 - adding test file NM and Z/NM
ok 4 - adding test file DN and Z/DN
ok 5 - adding test file DD and Z/DD
ok 6 - adding test file DM and Z/DM
ok 7 - adding test file MN and Z/MN
ok 8 - adding test file MD and Z/MD
ok 9 - adding test file MM and Z/MM
ok 10 - adding test file SS
ok 11 - adding test file TT
ok 12 - prepare initial tree
ok 13 - change in branch A (removal)
ok 14 - change in branch A (modification)
ok 15 - change in branch A (modification)
ok 16 - change in branch A (modification)
ok 17 - change in branch A (modification)
ok 18 - change in branch A (modification)
ok 19 - change in branch A (modification)
ok 20 - change in branch A (addition)
ok 21 - change in branch A (addition)
ok 22 - change in branch A (addition)
ok 23 - change in branch A (addition)
ok 24 - change in branch A (addition)
ok 25 - change in branch A (edit)
ok 26 - change in branch A (change file to directory)
ok 27 - recording branch A tree
ok 28 - reading original tree and checking out
ok 29 - change in branch B (removal)
ok 30 - change in branch B (modification)
ok 31 - change in branch B (modification)
ok 32 - change in branch B (modification)
ok 33 - change in branch B (modification)
ok 34 - change in branch B (modification)
ok 35 - change in branch B (modification)
ok 36 - change in branch B (addition)
ok 37 - change in branch B (addition)
ok 38 - change in branch B (addition)
ok 39 - change in branch B (addition)
ok 40 - change in branch B (addition and modification)
ok 41 - change in branch B (modification)
ok 42 - change in branch B (addition of a file to conflict with directory)
ok 43 - recording branch B tree
ok 44 - keep contents of 3 trees for easy access
ok 45 - diff-tree of known trees.
ok 46 - diff-tree of known trees.
ok 47 - diff-tree of known trees.
ok 48 - diff-tree of known trees.
ok 49 - diff-tree of known trees.
ok 50 - diff-tree of known trees.
ok 51 - diff-tree --stdin of known trees.
ok 52 - diff-tree --stdin of known trees.
ok 53 - diff-cache O with A in cache
ok 54 - diff-cache O with B in cache
ok 55 - diff-cache A with B in cache
ok 56 - diff-files with O in cache and A checked out
ok 57 - diff-files with O in cache and B checked out
ok 58 - diff-files with A in cache and B checked out
ok 59 - diff-tree O A == diff-tree -R A O
ok 60 - diff-tree -r O A == diff-tree -r -R A O
ok 61 - diff-tree B A == diff-tree -R A B
ok 62 - diff-tree -r B A == diff-tree -r -R A B
ok 63 - diff can read from stdin
# passed all 63 test(s)
1..63
*** t4003-diff-rename-1.sh ***
ok 1 - prepare reference tree
ok 2 - prepare work tree
ok 3 - validate output from rename/copy detection (#1)
ok 4 - prepare work tree again
ok 5 - validate output from rename/copy detection (#2)
ok 6 - prepare work tree once again
ok 7 - validate output from rename/copy detection (#3)
# passed all 7 test(s)
1..7
*** t4004-diff-rename-symlink.sh ***
ok 1 - prepare reference tree
ok 2 - prepare work tree
ok 3 - setup diff output
ok 4 - validate diff output
# passed all 4 test(s)
1..4
*** t4005-diff-rename-2.sh ***
ok 1 - setup reference tree
ok 2 - validate output from rename/copy detection (#1)
ok 3 - validate output from rename/copy detection (#2)
ok 4 - validate output from rename/copy detection (#3)
# passed all 4 test(s)
1..4
*** t4006-diff-mode.sh ***
ok 1 - setup
ok 2 - chmod
ok 3 - prepare binary file
ok 4 - --stat output after text chmod
ok 5 - --shortstat output after text chmod
ok 6 - --stat output after binary chmod
ok 7 - --shortstat output after binary chmod
# passed all 7 test(s)
1..7
*** t4007-rename-3.sh ***
ok 1 - prepare reference tree
ok 2 - prepare work tree
ok 3 - copy detection
ok 4 - copy detection, cached
ok 5 - copy, limited to a subtree
ok 6 - tweak work tree
ok 7 - rename detection
ok 8 - rename, limited to a subtree
# passed all 8 test(s)
1..8
*** t4008-diff-break-rewrite.sh ***
ok 1 - setup
ok 2 - change file1 with copy-edit of file0 and remove file0
ok 3 - run diff with -B (#1)
ok 4 - run diff with -B and -M (#2)
ok 5 - swap file0 and file1
ok 6 - run diff with -B (#3)
ok 7 - run diff with -B and -M (#4)
ok 8 - make file0 into something completely different
ok 9 - run diff with -B (#5)
ok 10 - run diff with -B -M (#6)
ok 11 - run diff with -M (#7)
ok 12 - file1 edited to look like file0 and file0 rename-edited to file2
ok 13 - run diff with -B (#8)
ok 14 - run diff with -B -C (#9)
# passed all 14 test(s)
1..14
*** t4009-diff-rename-4.sh ***
ok 1 - prepare reference tree
ok 2 - prepare work tree
ok 3 - validate output from rename/copy detection (#1)
ok 4 - prepare work tree again
ok 5 - validate output from rename/copy detection (#2)
ok 6 - prepare work tree once again
ok 7 - validate output from rename/copy detection (#3)
# passed all 7 test(s)
1..7
*** t4010-diff-pathspec.sh ***
ok 1 - setup
ok 2 - limit to path should show nothing
ok 3 - limit to path1 should show path1/file1
ok 4 - limit to path1/ should show path1/file1
ok 5 - "*file1" should show path1/file1
ok 6 - limit to file0 should show file0
ok 7 - limit to file0/ should emit nothing.
ok 8 - diff-tree pathspec
ok 9 - diff-tree with wildcard shows dir also matches
ok 10 - diff-tree -r with wildcard
ok 11 - diff-tree with wildcard shows dir also matches
ok 12 - diff-tree -r with wildcard from beginning
ok 13 - diff-tree -r with wildcard
ok 14 - setup submodules
ok 15 - diff-tree ignores trailing slash on submodule path
ok 16 - diff multiple wildcard pathspecs
ok 17 - diff-cache ignores trailing slash on submodule path
# passed all 17 test(s)
1..17
*** t4011-diff-symlink.sh ***
ok 1 - diff new symlink and file
ok 2 - diff unchanged symlink and file
ok 3 - diff removed symlink and file
ok 4 - diff identical, but newly created symlink and file
ok 5 - diff different symlink and file
ok 6 - diff symlinks with non-existing targets
ok 7 - setup symlinks with attributes
ok 8 - symlinks do not respect userdiff config by path
# passed all 8 test(s)
1..8
*** t4012-diff-binary.sh ***
ok 1 - prepare repository
ok 2 - apply --stat output for binary file change
ok 3 - diff --shortstat output for binary file change
ok 4 - diff --shortstat output for binary file change only
ok 5 - apply --numstat notices binary file change
ok 6 - apply --numstat understands diff --binary format
ok 7 - apply detecting corrupt patch correctly
ok 8 - apply detecting corrupt patch correctly
ok 9 - initial commit
ok 10 - diff-index with --binary
ok 11 - apply binary patch
ok 12 - diff --no-index with binary creation
ok 13 - diff --stat with binary files and big change count
# passed all 13 test(s)
1..13
*** t4013-diff-various.sh ***
ok 1 - setup
ok 2 - git diff-tree initial # magic is (not used)
ok 3 - git diff-tree -r initial # magic is (not used)
ok 4 - git diff-tree -r --abbrev initial # magic is (not used)
ok 5 - git diff-tree -r --abbrev=4 initial # magic is (not used)
ok 6 - git diff-tree --root initial # magic is (not used)
ok 7 - git diff-tree --root --abbrev initial # magic is (not used)
ok 8 - git diff-tree --root --abbrev initial # magic is noellipses
ok 9 - git diff-tree --root -r initial # magic is (not used)
ok 10 - git diff-tree --root -r --abbrev initial # magic is (not used)
ok 11 - git diff-tree --root -r --abbrev initial # magic is noellipses
ok 12 - git diff-tree --root -r --abbrev=4 initial # magic is (not used)
ok 13 - git diff-tree --root -r --abbrev=4 initial # magic is noellipses
ok 14 - git diff-tree -p initial # magic is (not used)
ok 15 - git diff-tree --root -p initial # magic is (not used)
ok 16 - git diff-tree --root -p --abbrev=10 initial # magic is (not used)
ok 17 - git diff-tree --root -p --full-index initial # magic is (not used)
ok 18 - git diff-tree --root -p --full-index --abbrev=10 initial # magic is (not used)
ok 19 - git diff-tree --patch-with-stat initial # magic is (not used)
ok 20 - git diff-tree --root --patch-with-stat initial # magic is (not used)
ok 21 - git diff-tree --patch-with-raw initial # magic is (not used)
ok 22 - git diff-tree --root --patch-with-raw initial # magic is (not used)
ok 23 - git diff-tree --pretty initial # magic is (not used)
ok 24 - git diff-tree --pretty --root initial # magic is (not used)
ok 25 - git diff-tree --pretty -p initial # magic is (not used)
ok 26 - git diff-tree --pretty --stat initial # magic is (not used)
ok 27 - git diff-tree --pretty --summary initial # magic is (not used)
ok 28 - git diff-tree --pretty --stat --summary initial # magic is (not used)
ok 29 - git diff-tree --pretty --root -p initial # magic is (not used)
ok 30 - git diff-tree --pretty --root --stat initial # magic is (not used)
ok 31 - git diff-tree --pretty --root --summary initial # magic is (not used)
ok 32 - git diff-tree --pretty --root --summary -r initial # magic is (not used)
ok 33 - git diff-tree --pretty --root --stat --summary initial # magic is (not used)
ok 34 - git diff-tree --pretty --patch-with-stat initial # magic is (not used)
ok 35 - git diff-tree --pretty --root --patch-with-stat initial # magic is (not used)
ok 36 - git diff-tree --pretty --patch-with-raw initial # magic is (not used)
ok 37 - git diff-tree --pretty --root --patch-with-raw initial # magic is (not used)
ok 38 - git diff-tree --pretty=oneline initial # magic is (not used)
ok 39 - git diff-tree --pretty=oneline --root initial # magic is (not used)
ok 40 - git diff-tree --pretty=oneline -p initial # magic is (not used)
ok 41 - git diff-tree --pretty=oneline --root -p initial # magic is (not used)
ok 42 - git diff-tree --pretty=oneline --patch-with-stat initial # magic is (not used)
ok 43 - git diff-tree --pretty=oneline --root --patch-with-stat initial # magic is (not used)
ok 44 - git diff-tree --pretty=oneline --patch-with-raw initial # magic is (not used)
ok 45 - git diff-tree --pretty=oneline --root --patch-with-raw initial # magic is (not used)
ok 46 - git diff-tree --pretty side # magic is (not used)
ok 47 - git diff-tree --pretty -p side # magic is (not used)
ok 48 - git diff-tree --pretty --patch-with-stat side # magic is (not used)
ok 49 - git diff-tree initial mode # magic is (not used)
ok 50 - git diff-tree --stat initial mode # magic is (not used)
ok 51 - git diff-tree --summary initial mode # magic is (not used)
ok 52 - git diff-tree master # magic is (not used)
ok 53 - git diff-tree -m master # magic is (not used)
ok 54 - git diff-tree -p master # magic is (not used)
ok 55 - git diff-tree -p -m master # magic is (not used)
ok 56 - git diff-tree -c master # magic is (not used)
ok 57 - git diff-tree -c --abbrev master # magic is (not used)
ok 58 - git diff-tree -c --abbrev master # magic is noellipses
ok 59 - git diff-tree --cc master # magic is (not used)
ok 60 - git diff-tree -c --stat master # magic is (not used)
ok 61 - git diff-tree --cc --stat master # magic is (not used)
ok 62 - git diff-tree -c --stat --summary master # magic is (not used)
ok 63 - git diff-tree --cc --stat --summary master # magic is (not used)
ok 64 - git diff-tree -c --stat --summary side # magic is (not used)
ok 65 - git diff-tree --cc --stat --summary side # magic is (not used)
ok 66 - git diff-tree --cc --shortstat master # magic is (not used)
ok 67 - git diff-tree --cc --summary REVERSE # magic is (not used)
ok 68 - git diff-tree --cc --patch-with-stat master # magic is (not used)
ok 69 - git diff-tree --cc --patch-with-stat --summary master # magic is (not used)
ok 70 - git diff-tree --cc --patch-with-stat --summary side # magic is (not used)
ok 71 - git log master # magic is (not used)
ok 72 - git log -p master # magic is (not used)
ok 73 - git log --root master # magic is (not used)
ok 74 - git log --root -p master # magic is (not used)
ok 75 - git log --patch-with-stat master # magic is (not used)
ok 76 - git log --root --patch-with-stat master # magic is (not used)
ok 77 - git log --root --patch-with-stat --summary master # magic is (not used)
ok 78 - git log --root -c --patch-with-stat --summary master # magic is (not used)
ok 79 - git log --root --cc --patch-with-stat --summary master # magic is (not used)
ok 80 - git log --no-diff-merges -p --first-parent master # magic is (not used)
ok 81 - git log --diff-merges=off -p --first-parent master # magic is (not used)
ok 82 - git log --first-parent --diff-merges=off -p master # magic is (not used)
ok 83 - git log -p --first-parent master # magic is (not used)
ok 84 - git log -p --diff-merges=first-parent master # magic is (not used)
ok 85 - git log --diff-merges=first-parent master # magic is (not used)
ok 86 - git log -m -p --first-parent master # magic is (not used)
ok 87 - git log -m -p master # magic is (not used)
ok 88 - git log --cc -m -p master # magic is (not used)
ok 89 - git log -c -m -p master # magic is (not used)
ok 90 - git log -m --raw master # magic is (not used)
ok 91 - git log -m --stat master # magic is (not used)
ok 92 - git log -SF master # magic is (not used)
ok 93 - git log -S F master # magic is (not used)
ok 94 - git log -SF -p master # magic is (not used)
ok 95 - git log -SF master --max-count=0 # magic is (not used)
ok 96 - git log -SF master --max-count=1 # magic is (not used)
ok 97 - git log -SF master --max-count=2 # magic is (not used)
ok 98 - git log -GF master # magic is (not used)
ok 99 - git log -GF -p master # magic is (not used)
ok 100 - git log -GF -p --pickaxe-all master # magic is (not used)
ok 101 - git log -IA -IB -I1 -I2 -p master # magic is (not used)
ok 102 - git log --decorate --all # magic is (not used)
ok 103 - git log --decorate=full --all # magic is (not used)
ok 104 - git log --decorate --clear-decorations --all # magic is (not used)
ok 105 - git log --decorate=full --clear-decorations --all # magic is (not used)
ok 106 - git rev-list --parents HEAD # magic is (not used)
ok 107 - git rev-list --children HEAD # magic is (not used)
ok 108 - git whatchanged master # magic is (not used)
ok 109 - git whatchanged master # magic is noellipses
ok 110 - git whatchanged -p master # magic is (not used)
ok 111 - git whatchanged --root master # magic is (not used)
ok 112 - git whatchanged --root master # magic is noellipses
ok 113 - git whatchanged --root -p master # magic is (not used)
ok 114 - git whatchanged --patch-with-stat master # magic is (not used)
ok 115 - git whatchanged --root --patch-with-stat master # magic is (not used)
ok 116 - git whatchanged --root --patch-with-stat --summary master # magic is (not used)
ok 117 - git whatchanged --root -c --patch-with-stat --summary master # magic is (not used)
ok 118 - git whatchanged --root --cc --patch-with-stat --summary master # magic is (not used)
ok 119 - git whatchanged -SF master # magic is (not used)
ok 120 - git whatchanged -SF master # magic is noellipses
ok 121 - git whatchanged -SF -p master # magic is (not used)
ok 122 - git log --patch-with-stat master -- dir/ # magic is (not used)
ok 123 - git whatchanged --patch-with-stat master -- dir/ # magic is (not used)
ok 124 - git log --patch-with-stat --summary master -- dir/ # magic is (not used)
ok 125 - git whatchanged --patch-with-stat --summary master -- dir/ # magic is (not used)
ok 126 - git show initial # magic is (not used)
ok 127 - git show --root initial # magic is (not used)
ok 128 - git show side # magic is (not used)
ok 129 - git show master # magic is (not used)
ok 130 - git show -c master # magic is (not used)
ok 131 - git show -m master # magic is (not used)
ok 132 - git show --first-parent master # magic is (not used)
ok 133 - git show --stat side # magic is (not used)
ok 134 - git show --stat --summary side # magic is (not used)
ok 135 - git show --patch-with-stat side # magic is (not used)
ok 136 - git show --patch-with-raw side # magic is (not used)
ok 137 - git show --patch-with-raw side # magic is noellipses
ok 138 - git show --patch-with-stat --summary side # magic is (not used)
ok 139 - git format-patch --stdout initial..side # magic is (not used)
ok 140 - git format-patch --stdout initial..master^ # magic is (not used)
ok 141 - git format-patch --stdout initial..master # magic is (not used)
ok 142 - git format-patch --stdout --no-numbered initial..master # magic is (not used)
ok 143 - git format-patch --stdout --numbered initial..master # magic is (not used)
ok 144 - git format-patch --attach --stdout initial..side # magic is (not used)
ok 145 - git format-patch --attach --stdout --suffix=.diff initial..side # magic is (not used)
ok 146 - git format-patch --attach --stdout initial..master^ # magic is (not used)
ok 147 - git format-patch --attach --stdout initial..master # magic is (not used)
ok 148 - git format-patch --inline --stdout initial..side # magic is (not used)
ok 149 - git format-patch --inline --stdout initial..master^ # magic is (not used)
ok 150 - git format-patch --inline --stdout --numbered-files initial..master # magic is (not used)
ok 151 - git format-patch --inline --stdout initial..master # magic is (not used)
ok 152 - git format-patch --inline --stdout --subject-prefix=TESTCASE initial..master # magic is (not used)
ok 153 - git config format.subjectprefix DIFFERENT_PREFIX # magic is (not used)
ok 154 - git format-patch --inline --stdout initial..master^^ # magic is (not used)
ok 155 - git format-patch --stdout --cover-letter -n initial..master^ # magic is (not used)
ok 156 - git diff --abbrev initial..side # magic is (not used)
ok 157 - git diff -U initial..side # magic is (not used)
ok 158 - git diff -U1 initial..side # magic is (not used)
ok 159 - git diff -r initial..side # magic is (not used)
ok 160 - git diff --stat initial..side # magic is (not used)
ok 161 - git diff -r --stat initial..side # magic is (not used)
ok 162 - git diff initial..side # magic is (not used)
ok 163 - git diff --patch-with-stat initial..side # magic is (not used)
ok 164 - git diff --patch-with-raw initial..side # magic is (not used)
ok 165 - git diff --patch-with-raw initial..side # magic is noellipses
ok 166 - git diff --patch-with-stat -r initial..side # magic is (not used)
ok 167 - git diff --patch-with-raw -r initial..side # magic is (not used)
ok 168 - git diff --patch-with-raw -r initial..side # magic is noellipses
ok 169 - git diff --name-status dir2 dir # magic is (not used)
ok 170 - git diff --no-index --name-status dir2 dir # magic is (not used)
ok 171 - git diff --no-index --name-status -- dir2 dir # magic is (not used)
ok 172 - git diff --no-index dir dir3 # magic is (not used)
ok 173 - git diff master master^ side # magic is (not used)
ok 174 - git diff --line-prefix=abc master master^ side # magic is (not used)
ok 175 - git diff --dirstat master~1 master~2 # magic is (not used)
ok 176 - git diff --dirstat initial rearrange # magic is (not used)
ok 177 - git diff --dirstat-by-file initial rearrange # magic is (not used)
ok 178 - git diff --dirstat --cc master~1 master # magic is (not used)
ok 179 - git diff --raw initial # magic is (not used)
ok 180 - git diff --raw initial # magic is noellipses
ok 181 - git diff --raw --abbrev=4 initial # magic is (not used)
ok 182 - git diff --raw --abbrev=4 initial # magic is noellipses
ok 183 - git diff --raw --no-abbrev initial # magic is (not used)
ok 184 - git diff --no-index --raw dir2 dir # magic is (not used)
ok 185 - git diff --no-index --raw dir2 dir # magic is noellipses
ok 186 - git diff --no-index --raw --abbrev=4 dir2 dir # magic is (not used)
ok 187 - git diff --no-index --raw --abbrev=4 dir2 dir # magic is noellipses
ok 188 - git diff --no-index --raw --no-abbrev dir2 dir # magic is (not used)
ok 189 - git diff-tree --pretty --root --stat --compact-summary initial # magic is (not used)
ok 190 - git diff-tree --pretty -R --root --stat --compact-summary initial # magic is (not used)
ok 191 - git diff-tree --pretty note # magic is (not used)
ok 192 - git diff-tree --pretty --notes note # magic is (not used)
ok 193 - git diff-tree --format=%N note # magic is (not used)
ok 194 - git diff-tree --stat --compact-summary initial mode # magic is (not used)
ok 195 - git diff-tree -R --stat --compact-summary initial mode # magic is (not used)
ok 196 - log -m matches pure log
ok 197 - log --diff-merges=on matches --diff-merges=separate
ok 198 - log --dd matches --diff-merges=1 -p
ok 199 - deny wrong log.diffMerges config
ok 200 - git config log.diffMerges first-parent
ok 201 - git config log.diffMerges first-parent vs -m
ok 202 - git diff-index -m
ok 203 - log -S requires an argument
ok 204 - diff --cached on unborn branch
ok 205 - diff --cached -- file on unborn branch
ok 206 - diff --line-prefix with spaces
ok 207 - diff-tree --stdin with log formatting
ok 208 - diff-tree --stdin with pathspec
ok 209 - show A B ... -- <pathspec>
ok 210 - diff -I<regex>: setup
ok 211 - diff -I<regex>
ok 212 - diff -I<regex> --stat
ok 213 - diff -I<regex>: detect malformed regex
ok 214 - diff-files does not respect diff.noPrefix
ok 215 - diff-files respects --no-prefix
ok 216 - diff respects diff.noPrefix
ok 217 - diff --default-prefix overrides diff.noPrefix
ok 218 - diff respects diff.mnemonicPrefix
ok 219 - diff --default-prefix overrides diff.mnemonicPrefix
ok 220 - diff respects diff.srcPrefix
ok 221 - diff respects diff.dstPrefix
ok 222 - diff --src-prefix overrides diff.srcPrefix
ok 223 - diff --dst-prefix overrides diff.dstPrefix
ok 224 - diff.{src,dst}Prefix ignored with diff.noPrefix
ok 225 - diff.{src,dst}Prefix ignored with diff.mnemonicPrefix
ok 226 - diff.{src,dst}Prefix ignored with --default-prefix
ok 227 - diff --no-renames cannot be abbreviated
# passed all 227 test(s)
1..227
*** t4014-format-patch.sh ***
ok 1 - setup
ok 2 - format-patch --ignore-if-in-upstream
ok 3 - format-patch --ignore-if-in-upstream
ok 4 - format-patch --ignore-if-in-upstream handles tags
ok 5 - format-patch doesn't consider merge commits
ok 6 - format-patch result applies
ok 7 - format-patch --ignore-if-in-upstream result applies
ok 8 - commit did not screw up the log message
ok 9 - format-patch did not screw up the log message
ok 10 - replay did not screw up the log message
ok 11 - format-patch empty commit
ok 12 - extra headers
ok 13 - extra headers without newlines
ok 14 - extra headers with multiple To:s
ok 15 - additional command line cc (ascii)
not ok 16 - additional command line cc (rfc822) # TODO known breakage
ok 17 - command line headers
ok 18 - configuration headers and command line headers
ok 19 - command line To: header (ascii)
not ok 20 - command line To: header (rfc822) # TODO known breakage
not ok 21 - command line To: header (rfc2047) # TODO known breakage
ok 22 - configuration To: header (ascii)
not ok 23 - configuration To: header (rfc822) # TODO known breakage
not ok 24 - configuration To: header (rfc2047) # TODO known breakage
ok 25 - format.from=false
ok 26 - format.from=true
ok 27 - format.from with address
ok 28 - --no-from overrides format.from
ok 29 - --from overrides format.from
ok 30 - --no-to overrides config.to
ok 31 - --no-to and --to replaces config.to
ok 32 - --no-cc overrides config.cc
ok 33 - --no-add-header overrides config.headers
ok 34 - multiple files
ok 35 - filename length limit
ok 36 - filename length limit from config
ok 37 - filename limit applies only to basename
ok 38 - reroll count
ok 39 - reroll count (-v)
ok 40 - reroll count (-v) with a fractional number
ok 41 - reroll (-v) count with a non number
ok 42 - reroll (-v) count with a non-pathname character
ok 43 - no threading
ok 44 - thread
ok 45 - --thread overrides format.thread=deep
ok 46 - thread in-reply-to
ok 47 - thread cover-letter
ok 48 - thread cover-letter in-reply-to
ok 49 - thread explicit shallow
ok 50 - thread deep
ok 51 - thread deep in-reply-to
ok 52 - thread deep cover-letter
ok 53 - thread deep cover-letter in-reply-to
ok 54 - thread via config
ok 55 - thread deep via config
ok 56 - thread config + override
ok 57 - thread config + --no-thread
ok 58 - excessive subject
ok 59 - failure to write cover-letter aborts gracefully
ok 60 - cover-letter inherits diff options
ok 61 - shortlog of cover-letter wraps overly-long onelines
ok 62 - format-patch respects -U
ok 63 - format-patch -p suppresses stat
ok 64 - format-patch from a subdirectory (1)
ok 65 - format-patch from a subdirectory (2)
ok 66 - format-patch from a subdirectory (3)
ok 67 - format-patch --in-reply-to
ok 68 - format-patch --signoff
ok 69 - format-patch --notes --signoff
ok 70 - format-patch notes output control
ok 71 - format-patch with multiple notes refs
ok 72 - format-patch with multiple notes refs in config
ok 73 - options no longer allowed for format-patch
ok 74 - format-patch --numstat should produce a patch
ok 75 - format-patch -- <path>
ok 76 - format-patch --ignore-if-in-upstream HEAD
ok 77 - get git version
ok 78 - format-patch default signature
ok 79 - format-patch --signature
ok 80 - format-patch with format.signature config
ok 81 - format-patch --signature overrides format.signature
ok 82 - format-patch --no-signature ignores format.signature
ok 83 - format-patch --signature --cover-letter
ok 84 - format.signature="" suppresses signatures
ok 85 - format-patch --no-signature suppresses signatures
ok 86 - format-patch --signature="" suppresses signatures
ok 87 - prepare mail-signature input
ok 88 - --signature-file=file works
ok 89 - format.signaturefile works
ok 90 - --no-signature suppresses format.signaturefile 
ok 91 - --signature-file overrides format.signaturefile
ok 92 - --signature overrides format.signaturefile
ok 93 - format-patch --stdout paginates
ok 94 - format-patch --stdout pagination can be disabled
ok 95 - format-patch handles multi-line subjects
ok 96 - format-patch handles multi-line encoded subjects
ok 97 - format-patch wraps extremely long subject (ascii)
ok 98 - format-patch wraps extremely long subject (rfc2047)
ok 99 - format-patch quotes dot in from-headers
ok 100 - format-patch quotes double-quote in from-headers
ok 101 - format-patch uses rfc2047-encoded from-headers when necessary
ok 102 - rfc2047-encoded from-headers leave no rfc822 specials
ok 103 - format-patch wraps moderately long from-header (ascii)
ok 104 - format-patch wraps extremely long from-header (ascii)
ok 105 - format-patch wraps extremely long from-header (rfc822)
ok 106 - format-patch wraps extremely long from-header (rfc2047)
ok 107 - format-patch wraps extremely long from-header (non-ASCII without Q-encoding)
ok 108 - subject lines are unencoded with --no-encode-email-headers
ok 109 - subject lines are unencoded with format.encodeEmailHeaders=false
ok 110 - --encode-email-headers overrides format.encodeEmailHeaders
ok 111 - subject lines do not have 822 atom-quoting
ok 112 - subject prefixes have space prepended
ok 113 - empty subject prefix does not have extra space
ok 114 - --rfc
ok 115 - --rfc does not overwrite prefix
ok 116 - --rfc is argument order independent
ok 117 - --from=ident notices bogus ident
ok 118 - --from=ident replaces author
ok 119 - --from uses committer ident
ok 120 - --from omits redundant in-body header
ok 121 - with --force-in-body-from, redundant in-body from is kept
ok 122 - format.forceInBodyFrom, equivalent to --force-in-body-from
ok 123 - format.forceInBodyFrom, equivalent to --force-in-body-from
ok 124 - in-body headers trigger content encoding
ok 125 - signoff: commit with no body
ok 126 - signoff: commit with only subject
ok 127 - signoff: commit with only subject that does not end with NL
ok 128 - signoff: no existing signoffs
ok 129 - signoff: no existing signoffs and no trailing NL
ok 130 - signoff: some random signoff
ok 131 - signoff: misc conforming footer elements
ok 132 - signoff: some random signoff-alike
ok 133 - signoff: not really a signoff
ok 134 - signoff: not really a signoff (2)
ok 135 - signoff: valid S-o-b paragraph in the middle
ok 136 - signoff: the same signoff at the end
ok 137 - signoff: the same signoff at the end, no trailing NL
ok 138 - signoff: the same signoff NOT at the end
ok 139 - signoff: tolerate garbage in conforming footer
ok 140 - signoff: respect trailer config
ok 141 - signoff: footer begins with non-signoff without @ sign
ok 142 - format patch ignores color.ui
ok 143 - format patch respects diff.relative
ok 144 - cover letter with invalid --cover-from-description and config
ok 145 - cover letter with format.coverFromDescription = default
ok 146 - cover letter with --cover-from-description default
ok 147 - cover letter with format.coverFromDescription = none
ok 148 - cover letter with --cover-from-description none
ok 149 - cover letter with format.coverFromDescription = message
ok 150 - cover letter with --cover-from-description message
ok 151 - cover letter with format.coverFromDescription = subject
ok 152 - cover letter with --cover-from-description subject
ok 153 - cover letter with --cover-from-description subject (UTF-8 subject line)
ok 154 - cover letter with format.coverFromDescription = auto (short subject line)
ok 155 - cover letter with --cover-from-description auto (short subject line)
ok 156 - cover letter with format.coverFromDescription = auto (long subject line)
ok 157 - cover letter with --cover-from-description auto (long subject line)
ok 158 - cover letter with command-line --cover-from-description overrides config
ok 159 - cover letter using branch description (1)
ok 160 - cover letter using branch description (2)
ok 161 - cover letter using branch description (3)
ok 162 - cover letter using branch description (4)
ok 163 - cover letter using branch description (5)
ok 164 - cover letter using branch description (6)
ok 165 - cover letter with --description-file
ok 166 - cover letter with nothing
ok 167 - cover letter auto
ok 168 - cover letter auto user override
ok 169 - format-patch --zero-commit
ok 170 - From line has expected format
ok 171 - format-patch -o with no leading directories
ok 172 - format-patch -o with leading existing directories
ok 173 - format-patch -o with leading non-existing directories
ok 174 - format-patch format.outputDirectory option
ok 175 - format-patch -o overrides format.outputDirectory
ok 176 - format-patch forbids multiple outputs
ok 177 - configured outdir does not conflict with output options
ok 178 - format-patch --output
ok 179 - format-patch --cover-letter --output
ok 180 - format-patch --base
ok 181 - format-patch --base errors out when base commit is in revision list
ok 182 - format-patch --base errors out when base commit is not ancestor of revision list
ok 183 - format-patch --base=auto
ok 184 - format-patch errors out when history involves criss-cross
ok 185 - format-patch format.useAutoBase whenAble history involves criss-cross
ok 186 - format-patch format.useAutoBase option
ok 187 - format-patch format.useAutoBase option with whenAble
ok 188 - format-patch --base overrides format.useAutoBase
ok 189 - format-patch --no-base overrides format.useAutoBase
ok 190 - format-patch --no-base overrides format.useAutoBase whenAble
ok 191 - format-patch --base with --attach
ok 192 - format-patch --attach cover-letter only is non-multipart
ok 193 - format-patch with format.attach
ok 194 - format-patch with format.attach=disabled
ok 195 - -c format.mboxrd format-patch
ok 196 - interdiff: setup
ok 197 - interdiff: cover-letter
ok 198 - interdiff: reroll-count
ok 199 - interdiff: reroll-count with a non-integer
ok 200 - interdiff: reroll-count with a integer
ok 201 - interdiff: solo-patch
ok 202 - format-patch does not respect diff.noprefix
ok 203 - format-patch respects format.noprefix
ok 204 - format-patch --default-prefix overrides format.noprefix
# still have 5 known breakage(s)
# passed all remaining 199 test(s)
1..204
*** t4015-diff-whitespace.sh ***
ok 1 - status with --patch (different)
ok 2 - status with --patch (mode differs)
ok 3 - status with --patch (removing an empty file)
ok 4 - status with --patch (different but equivalent)
ok 5 - status with --quiet (different)
ok 6 - status with --quiet (mode differs)
ok 7 - status with --quiet (removing an empty file)
ok 8 - status with --quiet (different but equivalent)
ok 9 - status with -s (different)
ok 10 - status with -s (mode differs)
ok 11 - status with -s (removing an empty file)
ok 12 - status with -s (different but equivalent)
ok 13 - status with --stat (different)
ok 14 - status with --stat (mode differs)
ok 15 - status with --stat (removing an empty file)
ok 16 - status with --stat (different but equivalent)
ok 17 - status with --shortstat (different)
ok 18 - status with --shortstat (mode differs)
ok 19 - status with --shortstat (removing an empty file)
ok 20 - status with --shortstat (different but equivalent)
ok 21 - status with --dirstat=lines (different)
ok 22 - status with --dirstat=lines (mode differs)
ok 23 - status with --dirstat=lines (removing an empty file)
ok 24 - status with --dirstat=lines (different but equivalent)
ok 25 - status with --raw (different)
ok 26 - status with --raw (mode differs)
ok 27 - status with --raw (removing an empty file)
ok 28 - status with --raw (different but equivalent)
ok 29 - status with --name-only (different)
ok 30 - status with --name-only (mode differs)
ok 31 - status with --name-only (removing an empty file)
ok 32 - status with --name-only (different but equivalent)
ok 33 - status with --name-status (different)
ok 34 - status with --name-status (mode differs)
ok 35 - status with --name-status (removing an empty file)
ok 36 - status with --name-status (different but equivalent)
ok 37 - Ray Lehtiniemi's example
ok 38 - another test, without options
ok 39 - ignore-blank-lines: only new lines
ok 40 - ignore-blank-lines: only new lines with space
ok 41 - ignore-blank-lines: after change
ok 42 - ignore-blank-lines: before change
ok 43 - ignore-blank-lines: between changes
ok 44 - ignore-blank-lines: between changes (with interhunkctx)
ok 45 - ignore-blank-lines: scattered spaces
ok 46 - ignore-blank-lines: spaces coalesce
ok 47 - ignore-blank-lines: mix changes and blank lines
ok 48 - check mixed spaces and tabs in indent
ok 49 - check mixed tabs and spaces in indent
ok 50 - check with no whitespace errors
ok 51 - check with trailing whitespace
ok 52 - check with space before tab in indent
ok 53 - --check and --exit-code are not exclusive
ok 54 - --check and --quiet are not exclusive
ok 55 - -w and --exit-code interact sensibly
ok 56 - -I and --exit-code interact sensibly
ok 57 - check staged with no whitespace errors
ok 58 - check staged with trailing whitespace
ok 59 - check staged with space before tab in indent
ok 60 - check with no whitespace errors (diff-index)
ok 61 - check with trailing whitespace (diff-index)
ok 62 - check with space before tab in indent (diff-index)
ok 63 - check staged with no whitespace errors (diff-index)
ok 64 - check staged with trailing whitespace (diff-index)
ok 65 - check staged with space before tab in indent (diff-index)
ok 66 - check with no whitespace errors (diff-tree)
ok 67 - check with trailing whitespace (diff-tree)
ok 68 - check with space before tab in indent (diff-tree)
ok 69 - check with ignored trailing whitespace attr (diff-tree)
ok 70 - check trailing whitespace (trailing-space: off)
ok 71 - check trailing whitespace (trailing-space: on)
ok 72 - check space before tab in indent (space-before-tab: off)
ok 73 - check space before tab in indent (space-before-tab: on)
ok 74 - check spaces as indentation (indent-with-non-tab: off)
ok 75 - check spaces as indentation (indent-with-non-tab: on)
ok 76 - ditto, but tabwidth=9
ok 77 - check tabs and spaces as indentation (indent-with-non-tab: on)
ok 78 - ditto, but tabwidth=10
ok 79 - ditto, but tabwidth=20
ok 80 - check tabs as indentation (tab-in-indent: off)
ok 81 - check tabs as indentation (tab-in-indent: on)
ok 82 - check tabs and spaces as indentation (tab-in-indent: on)
ok 83 - ditto, but tabwidth=1 (must be irrelevant)
ok 84 - check tab-in-indent and indent-with-non-tab conflict
ok 85 - check tab-in-indent excluded from wildcard whitespace attribute
ok 86 - line numbers in --check output are correct
ok 87 - checkdiff detects new trailing blank lines (1)
ok 88 - checkdiff detects new trailing blank lines (2)
ok 89 - checkdiff allows new blank lines
ok 90 - whitespace-only changes not reported (diff)
ok 91 - whitespace-only changes not reported (diffstat)
ok 92 - whitespace changes with modification reported (diffstat)
ok 93 - whitespace-only changes reported across renames (diffstat)
ok 94 - whitespace-only changes reported across renames
ok 95 - rename empty
ok 96 - combined diff with autocrlf conversion
ok 97 - setup diff colors
ok 98 - diff that introduces a line with only tabs
ok 99 - diff that introduces and removes ws breakages
ok 100 - ws-error-highlight test setup
ok 101 - test --ws-error-highlight option
ok 102 - test diff.wsErrorHighlight config
ok 103 - option overrides diff.wsErrorHighlight
ok 104 - detect moved code, complete file
ok 105 - detect malicious moved code, inside file
ok 106 - plain moved code, inside file
ok 107 - detect blocks of moved code
ok 108 - detect permutations inside moved code -- dimmed-zebra
ok 109 - zebra alternate color is only used when necessary
ok 110 - short lines of opposite sign do not get marked as moved
ok 111 - cmd option assumes configured colored-moved
ok 112 - no effect on diff from --color-moved with --word-diff
ok 113 - no effect on show from --color-moved with --word-diff
ok 114 - set up whitespace tests
ok 115 - move detection ignoring whitespace 
ok 116 - move detection ignoring whitespace changes
ok 117 - move detection ignoring whitespace at eol
ok 118 - clean up whitespace-test colors
ok 119 - --color-moved block at end of diff output respects MIN_ALNUM_COUNT
ok 120 - --color-moved respects MIN_ALNUM_COUNT
ok 121 - --color-moved treats adjacent blocks as separate for MIN_ALNUM_COUNT
ok 122 - --color-moved rewinds for MIN_ALNUM_COUNT
ok 123 - move detection with submodules
ok 124 - only move detection ignores white spaces
ok 125 - compare whitespace delta across moved blocks
ok 126 - bogus settings in move detection erroring out
ok 127 - compare whitespace delta incompatible with other space options
ok 128 - compare mixed whitespace delta across moved blocks
ok 129 - combine --ignore-blank-lines with --function-context
ok 130 - combine --ignore-blank-lines with --function-context 2
# passed all 130 test(s)
1..130
*** t4016-diff-quote.sh ***
ok 1 - setup
ok 2 - setup expected files
ok 3 - git diff --summary -M HEAD
ok 4 - git diff --numstat -M HEAD
ok 5 - git diff --stat -M HEAD
# passed all 5 test(s)
1..5
*** t4017-diff-retval.sh ***
ok 1 - setup
ok 2 - git diff --quiet -w  HEAD^^ HEAD^
ok 3 - git diff --quiet HEAD^^ HEAD^
ok 4 - git diff --quiet -w  HEAD^ HEAD
ok 5 - git diff-tree HEAD^ HEAD
ok 6 - git diff-tree HEAD^ HEAD -- a
ok 7 - git diff-tree HEAD^ HEAD -- b
ok 8 - echo HEAD | git diff-tree --stdin
ok 9 - git diff-tree HEAD HEAD
ok 10 - git diff-files
ok 11 - git diff-index --cached HEAD
ok 12 - git diff-index --cached HEAD^
ok 13 - git diff-index --cached HEAD^
ok 14 - git diff-tree -Stext HEAD^ HEAD -- b
ok 15 - git diff-tree -Snot-found HEAD^ HEAD -- b
ok 16 - git diff-files
ok 17 - git diff-index --cached HEAD
ok 18 - --check --exit-code returns 0 for no difference
ok 19 - --check --exit-code returns 1 for a clean difference
ok 20 - --check --exit-code returns 3 for a dirty difference
ok 21 - --check with --no-pager returns 2 for dirty difference
ok 22 - check should test not just the last line
ok 23 - check detects leftover conflict markers
ok 24 - check honors conflict marker length
ok 25 - option errors are not confused by --exit-code
# passed all 25 test(s)
1..25
*** t4018-diff-funcname.sh ***
ok 1 - setup
ok 2 - setup: test-tool userdiff
ok 3 - builtin ada pattern compiles
ok 4 - builtin ada wordRegex pattern compiles
ok 5 - builtin ada pattern compiles on bare repo with --attr-source
ok 6 - builtin bash pattern compiles
ok 7 - builtin bash wordRegex pattern compiles
ok 8 - builtin bash pattern compiles on bare repo with --attr-source
ok 9 - builtin bibtex pattern compiles
ok 10 - builtin bibtex wordRegex pattern compiles
ok 11 - builtin bibtex pattern compiles on bare repo with --attr-source
ok 12 - builtin cpp pattern compiles
ok 13 - builtin cpp wordRegex pattern compiles
ok 14 - builtin cpp pattern compiles on bare repo with --attr-source
ok 15 - builtin csharp pattern compiles
ok 16 - builtin csharp wordRegex pattern compiles
ok 17 - builtin csharp pattern compiles on bare repo with --attr-source
ok 18 - builtin css pattern compiles
ok 19 - builtin css wordRegex pattern compiles
ok 20 - builtin css pattern compiles on bare repo with --attr-source
ok 21 - builtin dts pattern compiles
ok 22 - builtin dts wordRegex pattern compiles
ok 23 - builtin dts pattern compiles on bare repo with --attr-source
ok 24 - builtin elixir pattern compiles
ok 25 - builtin elixir wordRegex pattern compiles
ok 26 - builtin elixir pattern compiles on bare repo with --attr-source
ok 27 - builtin fortran pattern compiles
ok 28 - builtin fortran wordRegex pattern compiles
ok 29 - builtin fortran pattern compiles on bare repo with --attr-source
ok 30 - builtin fountain pattern compiles
ok 31 - builtin fountain wordRegex pattern compiles
ok 32 - builtin fountain pattern compiles on bare repo with --attr-source
ok 33 - builtin golang pattern compiles
ok 34 - builtin golang wordRegex pattern compiles
ok 35 - builtin golang pattern compiles on bare repo with --attr-source
ok 36 - builtin html pattern compiles
ok 37 - builtin html wordRegex pattern compiles
ok 38 - builtin html pattern compiles on bare repo with --attr-source
ok 39 - builtin java pattern compiles
ok 40 - builtin java wordRegex pattern compiles
ok 41 - builtin java pattern compiles on bare repo with --attr-source
ok 42 - builtin kotlin pattern compiles
ok 43 - builtin kotlin wordRegex pattern compiles
ok 44 - builtin kotlin pattern compiles on bare repo with --attr-source
ok 45 - builtin markdown pattern compiles
ok 46 - builtin markdown wordRegex pattern compiles
ok 47 - builtin markdown pattern compiles on bare repo with --attr-source
ok 48 - builtin matlab pattern compiles
ok 49 - builtin matlab wordRegex pattern compiles
ok 50 - builtin matlab pattern compiles on bare repo with --attr-source
ok 51 - builtin objc pattern compiles
ok 52 - builtin objc wordRegex pattern compiles
ok 53 - builtin objc pattern compiles on bare repo with --attr-source
ok 54 - builtin pascal pattern compiles
ok 55 - builtin pascal wordRegex pattern compiles
ok 56 - builtin pascal pattern compiles on bare repo with --attr-source
ok 57 - builtin perl pattern compiles
ok 58 - builtin perl wordRegex pattern compiles
ok 59 - builtin perl pattern compiles on bare repo with --attr-source
ok 60 - builtin php pattern compiles
ok 61 - builtin php wordRegex pattern compiles
ok 62 - builtin php pattern compiles on bare repo with --attr-source
ok 63 - builtin python pattern compiles
ok 64 - builtin python wordRegex pattern compiles
ok 65 - builtin python pattern compiles on bare repo with --attr-source
ok 66 - builtin ruby pattern compiles
ok 67 - builtin ruby wordRegex pattern compiles
ok 68 - builtin ruby pattern compiles on bare repo with --attr-source
ok 69 - builtin rust pattern compiles
ok 70 - builtin rust wordRegex pattern compiles
ok 71 - builtin rust pattern compiles on bare repo with --attr-source
ok 72 - builtin scheme pattern compiles
ok 73 - builtin scheme wordRegex pattern compiles
ok 74 - builtin scheme pattern compiles on bare repo with --attr-source
ok 75 - builtin tex pattern compiles
ok 76 - builtin tex wordRegex pattern compiles
ok 77 - builtin tex pattern compiles on bare repo with --attr-source
ok 78 - builtin custom1 pattern compiles
ok 79 - builtin custom1 wordRegex pattern compiles
ok 80 - builtin custom1 pattern compiles on bare repo with --attr-source
ok 81 - builtin custom2 pattern compiles
ok 82 - builtin custom2 wordRegex pattern compiles
ok 83 - builtin custom2 pattern compiles on bare repo with --attr-source
ok 84 - builtin custom3 pattern compiles
ok 85 - builtin custom3 wordRegex pattern compiles
ok 86 - builtin custom3 pattern compiles on bare repo with --attr-source
ok 87 - last regexp must not be negated
ok 88 - setup hunk header tests
ok 89 - hunk header: README
ok 90 - hunk header: bash-arithmetic-function
ok 91 - hunk header: bash-bashism-style-compact
ok 92 - hunk header: bash-bashism-style-function
ok 93 - hunk header: bash-bashism-style-whitespace
ok 94 - hunk header: bash-conditional-function
ok 95 - hunk header: bash-missing-parentheses
ok 96 - hunk header: bash-mixed-style-compact
ok 97 - hunk header: bash-mixed-style-function
ok 98 - hunk header: bash-nested-functions
ok 99 - hunk header: bash-other-characters
ok 100 - hunk header: bash-posix-style-compact
ok 101 - hunk header: bash-posix-style-function
ok 102 - hunk header: bash-posix-style-whitespace
ok 103 - hunk header: bash-subshell-function
ok 104 - hunk header: bash-trailing-comment
ok 105 - hunk header: cpp-c++-function
ok 106 - hunk header: cpp-class-constructor
ok 107 - hunk header: cpp-class-constructor-mem-init
ok 108 - hunk header: cpp-class-definition
ok 109 - hunk header: cpp-class-definition-derived
ok 110 - hunk header: cpp-class-destructor
ok 111 - hunk header: cpp-function-returning-global-type
ok 112 - hunk header: cpp-function-returning-nested
ok 113 - hunk header: cpp-function-returning-pointer
ok 114 - hunk header: cpp-function-returning-reference
ok 115 - hunk header: cpp-gnu-style-function
ok 116 - hunk header: cpp-namespace-definition
ok 117 - hunk header: cpp-operator-definition
ok 118 - hunk header: cpp-skip-access-specifiers
ok 119 - hunk header: cpp-skip-comment-block
ok 120 - hunk header: cpp-skip-labels
ok 121 - hunk header: cpp-struct-definition
ok 122 - hunk header: cpp-struct-single-line
ok 123 - hunk header: cpp-template-function-definition
ok 124 - hunk header: cpp-union-definition
ok 125 - hunk header: cpp-void-c-function
ok 126 - hunk header: csharp-exclude-assignments
ok 127 - hunk header: csharp-exclude-control-statements
ok 128 - hunk header: csharp-exclude-exceptions
ok 129 - hunk header: csharp-exclude-generic-method-calls
ok 130 - hunk header: csharp-exclude-init-dispose
ok 131 - hunk header: csharp-exclude-iterations
ok 132 - hunk header: csharp-exclude-method-calls
ok 133 - hunk header: csharp-exclude-other
ok 134 - hunk header: csharp-method
ok 135 - hunk header: csharp-method-array
ok 136 - hunk header: csharp-method-explicit
ok 137 - hunk header: csharp-method-generics
ok 138 - hunk header: csharp-method-generics-alternate-spaces
ok 139 - hunk header: csharp-method-modifiers
ok 140 - hunk header: csharp-method-multiline
ok 141 - hunk header: csharp-method-params
ok 142 - hunk header: csharp-method-special-chars
ok 143 - hunk header: csharp-method-with-spacing
ok 144 - hunk header: csharp-property
ok 145 - hunk header: csharp-property-braces-same-line
ok 146 - hunk header: css-attribute-value-selector
ok 147 - hunk header: css-block-level-@-statements
ok 148 - hunk header: css-brace-in-col-1
ok 149 - hunk header: css-class-selector
ok 150 - hunk header: css-colon-eol
ok 151 - hunk header: css-colon-selector
ok 152 - hunk header: css-common
ok 153 - hunk header: css-id-selector
ok 154 - hunk header: css-long-selector-list
ok 155 - hunk header: css-prop-sans-indent
ok 156 - hunk header: css-root-selector
ok 157 - hunk header: css-short-selector-list
ok 158 - hunk header: css-trailing-space
ok 159 - hunk header: custom1-pattern
ok 160 - hunk header: custom2-match-to-end-of-line
ok 161 - hunk header: custom3-alternation-in-pattern
ok 162 - hunk header: dts-labels
ok 163 - hunk header: dts-node-unitless
ok 164 - hunk header: dts-nodes
ok 165 - hunk header: dts-nodes-boolean-prop
ok 166 - hunk header: dts-nodes-comment1
ok 167 - hunk header: dts-nodes-comment2
ok 168 - hunk header: dts-nodes-multiline-prop
ok 169 - hunk header: dts-reference
ok 170 - hunk header: dts-root
ok 171 - hunk header: dts-root-comment
ok 172 - hunk header: elixir-do-not-pick-end
ok 173 - hunk header: elixir-ex-unit-test
ok 174 - hunk header: elixir-function
ok 175 - hunk header: elixir-macro
ok 176 - hunk header: elixir-module
ok 177 - hunk header: elixir-module-func
ok 178 - hunk header: elixir-nested-module
ok 179 - hunk header: elixir-private-function
ok 180 - hunk header: elixir-protocol
ok 181 - hunk header: elixir-protocol-implementation
ok 182 - hunk header: fortran-block-data
ok 183 - hunk header: fortran-comment
ok 184 - hunk header: fortran-comment-keyword
ok 185 - hunk header: fortran-comment-legacy
ok 186 - hunk header: fortran-comment-legacy-star
ok 187 - hunk header: fortran-external-function
ok 188 - hunk header: fortran-external-subroutine
ok 189 - hunk header: fortran-module
ok 190 - hunk header: fortran-module-procedure
ok 191 - hunk header: fortran-program
ok 192 - hunk header: fountain-scene
ok 193 - hunk header: golang-complex-function
ok 194 - hunk header: golang-func
ok 195 - hunk header: golang-interface
ok 196 - hunk header: golang-long-func
ok 197 - hunk header: golang-struct
ok 198 - hunk header: java-class-brace-on-separate-line
ok 199 - hunk header: java-class-member-function
ok 200 - hunk header: java-class-space-before-type-parameters
ok 201 - hunk header: java-class-type-parameters
ok 202 - hunk header: java-class-type-parameters-implements
ok 203 - hunk header: java-enum-constant
ok 204 - hunk header: java-interface-type-parameters
ok 205 - hunk header: java-interface-type-parameters-extends
ok 206 - hunk header: java-method-return-generic-bounded
ok 207 - hunk header: java-method-return-generic-wildcard
ok 208 - hunk header: java-nested-field
ok 209 - hunk header: java-non-sealed
ok 210 - hunk header: java-record
ok 211 - hunk header: java-record-space-before-components
ok 212 - hunk header: java-record-type-parameters
ok 213 - hunk header: java-sealed
ok 214 - hunk header: java-sealed-permits
ok 215 - hunk header: java-sealed-type-parameters
ok 216 - hunk header: java-sealed-type-parameters-implements-permits
ok 217 - hunk header: java-sealed-type-parameters-permits
ok 218 - hunk header: kotlin-class
ok 219 - hunk header: kotlin-enum-class
ok 220 - hunk header: kotlin-fun
ok 221 - hunk header: kotlin-inheritace-class
ok 222 - hunk header: kotlin-inline-class
ok 223 - hunk header: kotlin-interface
ok 224 - hunk header: kotlin-nested-fun
ok 225 - hunk header: kotlin-public-class
ok 226 - hunk header: kotlin-sealed-class
ok 227 - hunk header: markdown-heading-indented
ok 228 - hunk header: markdown-heading-non-headings
ok 229 - hunk header: matlab-class-definition
ok 230 - hunk header: matlab-function
ok 231 - hunk header: matlab-octave-section-1
ok 232 - hunk header: matlab-octave-section-2
ok 233 - hunk header: matlab-section
ok 234 - hunk header: perl-skip-end-of-heredoc
ok 235 - hunk header: perl-skip-forward-decl
ok 236 - hunk header: perl-skip-sub-in-pod
ok 237 - hunk header: perl-sub-definition
ok 238 - hunk header: perl-sub-definition-kr-brace
ok 239 - hunk header: php-abstract-class
ok 240 - hunk header: php-abstract-method
ok 241 - hunk header: php-class
ok 242 - hunk header: php-enum
ok 243 - hunk header: php-final-class
ok 244 - hunk header: php-final-method
ok 245 - hunk header: php-function
ok 246 - hunk header: php-interface
ok 247 - hunk header: php-method
ok 248 - hunk header: php-trait
ok 249 - hunk header: python-async-def
ok 250 - hunk header: python-class
ok 251 - hunk header: python-def
ok 252 - hunk header: python-indented-async-def
ok 253 - hunk header: python-indented-class
ok 254 - hunk header: python-indented-def
ok 255 - hunk header: rust-fn
ok 256 - hunk header: rust-impl
ok 257 - hunk header: rust-macro-rules
ok 258 - hunk header: rust-struct
ok 259 - hunk header: rust-trait
ok 260 - hunk header: scheme-class
ok 261 - hunk header: scheme-def
ok 262 - hunk header: scheme-def-variant
ok 263 - hunk header: scheme-define-slash-public
ok 264 - hunk header: scheme-define-syntax
ok 265 - hunk header: scheme-define-variant
ok 266 - hunk header: scheme-library
ok 267 - hunk header: scheme-local-define
ok 268 - hunk header: scheme-module
ok 269 - hunk header: scheme-top-level-define
ok 270 - hunk header: scheme-user-defined-define
# passed all 270 test(s)
1..270
*** t4019-diff-wserror.sh ***
ok 1 - setup
ok 2 - default
ok 3 - default (attribute)
ok 4 - default, tabwidth=10 (attribute)
ok 5 - no check (attribute)
ok 6 - no check, tabwidth=10 (attribute), must be irrelevant
ok 7 - without -trail
ok 8 - without -trail (attribute)
ok 9 - without -space
ok 10 - without -space (attribute)
ok 11 - with indent-non-tab only
ok 12 - with indent-non-tab only (attribute)
ok 13 - with indent-non-tab only, tabwidth=10
ok 14 - with indent-non-tab only, tabwidth=10 (attribute)
ok 15 - with cr-at-eol
ok 16 - with cr-at-eol (attribute)
ok 17 - trailing empty lines (1)
ok 18 - trailing empty lines (2)
ok 19 - checkdiff shows correct line number for trailing blank lines
ok 20 - do not color trailing cr in context
ok 21 - color new trailing blank lines
# passed all 21 test(s)
1..21
*** t4020-diff-external.sh ***
ok 1 - setup
ok 2 - GIT_EXTERNAL_DIFF environment
ok 3 - GIT_EXTERNAL_DIFF environment should apply only to diff
ok 4 - GIT_EXTERNAL_DIFF environment and --no-ext-diff
ok 5 - typechange diff
ok 6 - diff.external
ok 7 - diff.external should apply only to diff
ok 8 - diff.external and --no-ext-diff
ok 9 - diff attribute
ok 10 - diff attribute should apply only to diff
ok 11 - diff attribute and --no-ext-diff
ok 12 - diff attribute
ok 13 - diff attribute should apply only to diff
ok 14 - diff attribute and --no-ext-diff
ok 15 - GIT_EXTERNAL_DIFF trumps diff.external
ok 16 - attributes trump GIT_EXTERNAL_DIFF and diff.external
ok 17 - no diff with -diff
ok 18 - force diff with "diff"
ok 19 - GIT_EXTERNAL_DIFF with more than one changed files
ok 20 - GIT_EXTERNAL_DIFF path counter/total
ok 21 - GIT_EXTERNAL_DIFF generates pretty paths
ok 22 - external diff with autocrlf = true
ok 23 - diff --cached
ok 24 - clean up crlf leftovers
ok 25 - submodule diff
# passed all 25 test(s)
1..25
*** t4021-format-patch-numbered.sh ***
ok 1 - setup
ok 2 - single patch defaults to no numbers
ok 3 - multiple patch defaults to numbered
ok 4 - Use --numbered
ok 5 - format.numbered = true
ok 6 - format.numbered && single patch
ok 7 - format.numbered && --no-numbered
ok 8 - format.numbered && --keep-subject
ok 9 - format.numbered = auto
ok 10 - format.numbered = auto && single patch
ok 11 - format.numbered = auto && --no-numbered
ok 12 - --start-number && --numbered
ok 13 - single patch with cover-letter defaults to numbers
ok 14 - Use --no-numbered and --cover-letter single patch
# passed all 14 test(s)
1..14
*** t4022-diff-rewrite.sh ***
ok 1 - setup
ok 2 - detect rewrite
ok 3 - show deletion diff without -D
ok 4 - suppress deletion diff with -D
ok 5 - show deletion diff with -B
ok 6 - suppress deletion diff with -B -D
ok 7 - prepare a file that ends with an incomplete line
ok 8 - rewrite the middle 90% of sequence file and terminate with newline
ok 9 - confirm that sequence file is considered a rewrite
ok 10 - no newline at eof is on its own line without -B
ok 11 - no newline at eof is on its own line with -B
# passed all 11 test(s)
1..11
*** t4023-diff-rename-typechange.sh ***
ok 1 - setup
ok 2 - cross renames to be detected for regular files
ok 3 - cross renames to be detected for typechange
ok 4 - moves and renames
# passed all 4 test(s)
1..4
*** t4024-diff-optimize-common.sh ***
ok 1 - setup
ok 2 - diff -U0
# passed all 2 test(s)
1..2
*** t4025-hunk-header.sh ***
ok 1 - setup
ok 2 - hunk header truncation with an overly long line
# passed all 2 test(s)
1..2
*** t4026-color.sh ***
ok 1 - reset
ok 2 - empty color is empty
ok 3 - attribute before color name
ok 4 - aixterm bright fg color
ok 5 - aixterm bright bg color
ok 6 - color name before attribute
ok 7 - attr fg bg
ok 8 - fg attr bg
ok 9 - fg bg attr
ok 10 - fg bg attr...
ok 11 - reset fg bg attr...
ok 12 - attr negation
ok 13 - "no-" variant of negation
ok 14 - long color specification
ok 15 - absurdly long color specification
ok 16 - 0-7 are aliases for basic ANSI color names
ok 17 - 8-15 are aliases for aixterm color names
ok 18 - 256 colors
ok 19 - 24-bit colors
ok 20 - "default" foreground
ok 21 - "normal default" to clear background
ok 22 - "default" can be combined with attributes
ok 23 - "normal" yields no color at all"
ok 24 - -1 is a synonym for "normal"
ok 25 - color too small
ok 26 - color too big
ok 27 - extra character after color number
ok 28 - extra character after color name
ok 29 - extra character after attribute
ok 30 - unknown color slots are ignored (diff)
ok 31 - unknown color slots are ignored (branch)
ok 32 - unknown color slots are ignored (status)
# passed all 32 test(s)
1..32
*** t4027-diff-submodule.sh ***
ok 1 - setup
ok 2 - git diff --raw HEAD
ok 3 - git diff-index --raw HEAD
ok 4 - git diff-files --raw
ok 5 - git diff HEAD
ok 6 - git diff HEAD with dirty submodule (work tree)
ok 7 - git diff HEAD with dirty submodule (index)
ok 8 - git diff HEAD with dirty submodule (untracked)
ok 9 - git diff HEAD with dirty submodule (untracked) (none ignored)
ok 10 - git diff HEAD with dirty submodule (work tree, refs match)
ok 11 - git diff HEAD with dirty submodule (work tree, refs match) [.gitmodules]
ok 12 - git diff HEAD with dirty submodule (index, refs match)
ok 13 - git diff HEAD with dirty submodule (untracked, refs match)
ok 14 - git diff HEAD with dirty submodule (untracked, refs match) [.gitmodules]
ok 15 - git diff between submodule commits
ok 16 - git diff between submodule commits [.gitmodules]
ok 17 - git diff (empty submodule dir)
ok 18 - conflicted submodule setup
ok 19 - combined (empty submodule)
ok 20 - combined (with submodule)
# passed all 20 test(s)
1..20
*** t4028-format-patch-mime-headers.sh ***
ok 1 - create commit with utf-8 body
ok 2 - patch has mime headers
ok 3 - patch has mime and extra headers
# passed all 3 test(s)
1..3
*** t4029-diff-trailing-space.sh ***
ok 1 - diff honors config option, diff.suppressBlankEmpty
# passed all 1 test(s)
1..1
*** t4030-diff-textconv.sh ***
ok 1 - setup binary file with history
ok 2 - file is considered binary by porcelain
ok 3 - file is considered binary by plumbing
ok 4 - setup textconv filters
ok 5 - diff produces text
ok 6 - show commit produces text
ok 7 - diff-tree produces binary
ok 8 - log produces text
ok 9 - format-patch produces binary
ok 10 - status -v produces text
ok 11 - show blob produces binary
ok 12 - show --textconv blob produces text
ok 13 - show --no-textconv blob produces binary
ok 14 - grep-diff (-G) operates on textconv data (add)
ok 15 - grep-diff (-G) operates on textconv data (modification)
ok 16 - pickaxe (-S) operates on textconv data (add)
ok 17 - pickaxe (-S) operates on textconv data (modification)
ok 18 - diffstat does not run textconv
ok 19 - textconv does not act on symlinks
# passed all 19 test(s)
1..19
*** t4031-diff-rewrite-binary.sh ***
ok 1 - create binary file with changes
ok 2 - vanilla diff is binary
ok 3 - rewrite diff is binary
ok 4 - rewrite diff can show binary patch
ok 5 - rewrite diff --numstat shows binary changes
ok 6 - diff --stat counts binary rewrite as 0 lines
ok 7 - setup textconv
ok 8 - rewrite diff respects textconv
# passed all 8 test(s)
1..8
*** t4032-diff-inter-hunk-context.sh ***
ok 1 - diff -U0, 1 common line: count hunks (2)
ok 2 - diff -U0, 1 common line: check output
ok 3 - diff -U0 --inter-hunk-context=0, 1 common line: count hunks (2)
ok 4 - diff -U0 --inter-hunk-context=0, 1 common line: check output
ok 5 - diff -U0 --inter-hunk-context=1, 1 common line: count hunks (1)
ok 6 - diff -U0 --inter-hunk-context=1, 1 common line: check output
ok 7 - diff -U0 --inter-hunk-context=2, 1 common line: count hunks (1)
ok 8 - diff -U0 --inter-hunk-context=2, 1 common line: check output
ok 9 - diff -U1, 1 common line: count hunks (1)
ok 10 - diff -U0, 2 common lines: count hunks (2)
ok 11 - diff -U0 --inter-hunk-context=0, 2 common lines: count hunks (2)
ok 12 - diff -U0 --inter-hunk-context=1, 2 common lines: count hunks (2)
ok 13 - diff -U0 --inter-hunk-context=2, 2 common lines: count hunks (1)
ok 14 - diff -U1, 2 common lines: count hunks (1)
ok 15 - diff -U1, 3 common lines: count hunks (2)
ok 16 - diff -U1 --inter-hunk-context=0, 3 common lines: count hunks (2)
ok 17 - diff -U1 --inter-hunk-context=1, 3 common lines: count hunks (1)
ok 18 - diff -U1 --inter-hunk-context=2, 3 common lines: count hunks (1)
ok 19 - diff -U3, 9 common lines: count hunks (2)
ok 20 - diff -U3 --inter-hunk-context=2, 9 common lines: count hunks (2)
ok 21 - diff -U3 --inter-hunk-context=3, 9 common lines: count hunks (1)
ok 22 - (diff.interHunkContext=0) diff -U0, 1 common line: count hunks (2)
ok 23 - (diff.interHunkContext=0) diff -U0, 1 common line: check output
ok 24 - (diff.interHunkContext=1) diff -U0, 1 common line: count hunks (1)
ok 25 - (diff.interHunkContext=1) diff -U0, 1 common line: check output
ok 26 - (diff.interHunkContext=2) diff -U0, 1 common line: count hunks (1)
ok 27 - (diff.interHunkContext=2) diff -U0, 1 common line: check output
ok 28 - (diff.interHunkContext=3) diff -U3, 9 common lines: count hunks (1)
ok 29 - (diff.interHunkContext=0) diff -U0, 2 common lines: count hunks (2)
ok 30 - (diff.interHunkContext=1) diff -U0, 2 common lines: count hunks (2)
ok 31 - (diff.interHunkContext=2) diff -U0, 2 common lines: count hunks (1)
ok 32 - (diff.interHunkContext=0) diff -U1, 3 common lines: count hunks (2)
ok 33 - (diff.interHunkContext=1) diff -U1, 3 common lines: count hunks (1)
ok 34 - (diff.interHunkContext=2) diff -U1, 3 common lines: count hunks (1)
ok 35 - (diff.interHunkContext=2) diff -U3, 9 common lines: count hunks (2)
ok 36 - (diff.interHunkContext=3) diff -U3, 9 common lines: count hunks (1)
ok 37 - diff.interHunkContext invalid
# passed all 37 test(s)
1..37
*** t4033-diff-patience.sh ***
ok 1 - --ignore-space-at-eol with a single appended character
ok 2 - setup attributes files for tests with patience
ok 3 - patience diff from attributes
ok 4 - diff from attributes with bare repo with source
ok 5 - diff from attributes with bare repo with invalid source
ok 6 - patience diff from attributes has valid diffstat
ok 7 - patience diff
ok 8 - patience diff command line precedence before attributes
ok 9 - patience diff attributes precedence before config
ok 10 - patience diff output is valid
ok 11 - completely different files
# passed all 11 test(s)
1..11
*** t4034-diff-words.sh ***
ok 1 - setup
ok 2 - set up pre and post with runs of whitespace
ok 3 - word diff with runs of whitespace
ok 4 - --word-diff=porcelain
ok 5 - --word-diff=plain
ok 6 - --word-diff=plain --color
ok 7 - word diff without context
ok 8 - word diff with a regular expression
ok 9 - word diff with zero length matches
ok 10 - set up a diff driver
ok 11 - option overrides .gitattributes
ok 12 - use regex supplied by driver
ok 13 - set up diff.wordRegex option
ok 14 - command-line overrides config
ok 15 - command-line overrides config: --word-diff-regex
ok 16 - .gitattributes override config
ok 17 - setup: remove diff driver regex
ok 18 - use configured regex
ok 19 - test parsing words for newline
ok 20 - test when words are only removed at the end
ok 21 - --word-diff=none
ok 22 - unset default driver
ok 23 - diff driver 'ada'
ok 24 - diff driver 'ada' in Islandic
ok 25 - diff driver 'bibtex'
ok 26 - diff driver 'bibtex' in Islandic
ok 27 - diff driver 'cpp'
ok 28 - diff driver 'cpp' in Islandic
ok 29 - diff driver 'csharp'
ok 30 - diff driver 'csharp' in Islandic
ok 31 - diff driver 'css'
ok 32 - diff driver 'css' in Islandic
ok 33 - diff driver 'dts'
ok 34 - diff driver 'dts' in Islandic
ok 35 - diff driver 'fortran'
ok 36 - diff driver 'fortran' in Islandic
ok 37 - diff driver 'html'
ok 38 - diff driver 'html' in Islandic
ok 39 - diff driver 'java'
ok 40 - diff driver 'java' in Islandic
ok 41 - diff driver 'kotlin'
ok 42 - diff driver 'kotlin' in Islandic
ok 43 - diff driver 'matlab'
ok 44 - diff driver 'matlab' in Islandic
ok 45 - diff driver 'objc'
ok 46 - diff driver 'objc' in Islandic
ok 47 - diff driver 'pascal'
ok 48 - diff driver 'pascal' in Islandic
ok 49 - diff driver 'perl'
ok 50 - diff driver 'perl' in Islandic
ok 51 - diff driver 'php'
ok 52 - diff driver 'php' in Islandic
ok 53 - diff driver 'python'
ok 54 - diff driver 'python' in Islandic
ok 55 - diff driver 'ruby'
ok 56 - diff driver 'ruby' in Islandic
ok 57 - diff driver 'scheme'
ok 58 - diff driver 'scheme' in Islandic
ok 59 - diff driver 'tex'
ok 60 - diff driver 'tex' in Islandic
ok 61 - word-diff with diff.sbe
ok 62 - word-diff with no newline at EOF
ok 63 - setup history with two files
ok 64 - wordRegex for the first file does not apply to the second
# passed all 64 test(s)
1..64
*** t4035-diff-quiet.sh ***
ok 1 - setup
ok 2 - git diff-tree HEAD^ HEAD
ok 3 - git diff-tree HEAD^ HEAD -- a
ok 4 - git diff-tree HEAD^ HEAD -- b
ok 5 - echo HEAD | git diff-tree --stdin
ok 6 - git diff-tree HEAD HEAD
ok 7 - git diff-files
ok 8 - git diff-index --cached HEAD
ok 9 - git diff-index --cached HEAD^
ok 10 - git diff-index --cached HEAD^
ok 11 - git diff-tree -Stext HEAD^ HEAD -- b
ok 12 - git diff-tree -Snot-found HEAD^ HEAD -- b
ok 13 - git diff-files
ok 14 - git diff-index --cached HEAD
ok 15 - git diff, one file outside repo
ok 16 - git diff, both files outside repo
ok 17 - git diff --ignore-space-at-eol, one file outside repo
ok 18 - git diff --ignore-space-at-eol, both files outside repo
ok 19 - git diff --ignore-all-space, one file outside repo
ok 20 - git diff --ignore-all-space, both files outside repo
ok 21 - git diff --quiet ignores stat-change only entries
ok 22 - git diff --quiet on a path that need conversion
# passed all 22 test(s)
1..22
*** t4036-format-patch-signer-mime.sh ***
ok 1 - setup
ok 2 - format normally
ok 3 - format with signoff without funny signer name
ok 4 - format with non ASCII signer name
ok 5 - attach and signoff do not duplicate mime headers
# passed all 5 test(s)
1..5
*** t4037-diff-r-t-dirs.sh ***
ok 1 - setup
ok 2 - verify
# passed all 2 test(s)
1..2
*** t4038-diff-combined.sh ***
ok 1 - setup
ok 2 - check combined output (1)
ok 3 - check combined output (1) with git diff <rev>^!
ok 4 - check combined output (2)
ok 5 - check combined output (2) with git diff <rev>^!
ok 6 - diagnose truncated file
ok 7 - setup for --cc --raw
ok 8 - check --cc --raw with four trees
ok 9 - check --cc --raw with forty trees
ok 10 - setup combined ignore spaces
ok 11 - check combined output (no ignore space)
ok 12 - check combined output (ignore space at eol)
ok 13 - check combined output (ignore space change)
ok 14 - check combined output (ignore all spaces)
ok 15 - combine diff coalesce simple
ok 16 - combine diff coalesce tricky
not ok 17 - combine diff coalesce three parents # TODO known breakage
ok 18 - combine diff missing delete bug
ok 19 - combine diff gets tree sorting right
ok 20 - setup for --combined-all-paths
ok 21 - --combined-all-paths and --raw
ok 22 - --combined-all-paths and --cc
ok 23 - setup for --combined-all-paths with funny names
ok 24 - --combined-all-paths and --raw and funny names
ok 25 - --combined-all-paths and --raw -and -z and funny names
ok 26 - --combined-all-paths and --cc and funny names
# still have 1 known breakage(s)
# passed all remaining 25 test(s)
1..26
*** t4039-diff-assume-unchanged.sh ***
ok 1 - setup
ok 2 - diff-index does not examine assume-unchanged entries
ok 3 - diff-files does not examine assume-unchanged entries
ok 4 - find-copies-harder is not confused by mode bits
# passed all 4 test(s)
1..4
*** t4040-whitespace-status.sh ***
ok 1 - setup
ok 2 - diff-tree --exit-code
ok 3 - diff-tree -b --exit-code
ok 4 - diff-index --cached --exit-code
ok 5 - diff-index -b -p --cached --exit-code
ok 6 - diff-index --exit-code
ok 7 - diff-index -b -p --exit-code
ok 8 - diff-files --exit-code
ok 9 - diff-files -b -p --exit-code
ok 10 - diff-files --diff-filter --quiet
ok 11 - diff-tree --diff-filter --quiet
# passed all 11 test(s)
1..11
*** t4041-diff-submodule-option.sh ***
Initialized empty Git repository in $(@D)/t/trash directory.t4041-diff-submodule-option/sm1/.git/
ok 1 - added submodule
ok 2 - added submodule, set diff.submodule
ok 3 - --submodule=short overrides diff.submodule
ok 4 - diff.submodule does not affect plumbing
ok 5 - modified submodule(forward)
ok 6 - modified submodule(forward)
ok 7 - modified submodule(forward) --submodule
ok 8 - modified submodule(forward) --submodule=short
ok 9 - modified submodule(backward)
ok 10 - modified submodule(backward and forward)
ok 11 - typechanged submodule(submodule->blob), --cached
ok 12 - typechanged submodule(submodule->blob)
ok 13 - typechanged submodule(submodule->blob)
Initialized empty Git repository in $(@D)/t/trash directory.t4041-diff-submodule-option/sm1/.git/
ok 14 - nonexistent commit
ok 15 - typechanged submodule(blob->submodule)
ok 16 - submodule is up to date
ok 17 - submodule contains untracked content
ok 18 - submodule contains untracked content (untracked ignored)
ok 19 - submodule contains untracked content (dirty ignored)
ok 20 - submodule contains untracked content (all ignored)
ok 21 - submodule contains untracked and modified content
ok 22 - submodule contains untracked and modified content (untracked ignored)
ok 23 - submodule contains untracked and modified content (dirty ignored)
ok 24 - submodule contains untracked and modified content (all ignored)
ok 25 - submodule contains modified content
ok 26 - submodule is modified
ok 27 - modified submodule contains untracked content
ok 28 - modified submodule contains untracked content (untracked ignored)
ok 29 - modified submodule contains untracked content (dirty ignored)
ok 30 - modified submodule contains untracked content (all ignored)
ok 31 - modified submodule contains untracked and modified content
ok 32 - modified submodule contains untracked and modified content (untracked ignored)
ok 33 - modified submodule contains untracked and modified content (dirty ignored)
ok 34 - modified submodule contains untracked and modified content (all ignored)
ok 35 - modified submodule contains modified content
ok 36 - deleted submodule
ok 37 - create second submodule
ok 38 - multiple submodules
ok 39 - path filter
ok 40 - given commit
ok 41 - given commit --submodule
ok 42 - given commit --submodule=short
ok 43 - setup .git file for sm2
ok 44 - diff --submodule with .git file
ok 45 - diff --submodule with objects referenced by alternates
# passed all 45 test(s)
1..45
*** t4042-diff-textconv-caching.sh ***
ok 1 - setup
ok 2 - first textconv works
ok 3 - cached textconv produces same output
ok 4 - cached textconv does not run helper
ok 5 - changing textconv invalidates cache
ok 6 - switching diff driver produces correct results
ok 7 - log notes cache and still use cache for -p
ok 8 - caching is silently ignored outside repo
# passed all 8 test(s)
1..8
*** t4043-diff-rename-binary.sh ***
ok 1 - prepare repository
ok 2 - move the files into a "sub" directory
ok 3 - git show -C -C report renames
# passed all 3 test(s)
1..3
*** t4044-diff-index-unique-abbrev.sh ***
ok 1 - setup
ok 2 - diff does not produce ambiguous index line
# passed all 2 test(s)
1..2
*** t4045-diff-relative.sh ***
ok 1 - setup
ok 2 - -p --relative=subdir/
ok 3 - -p --relative=subdir
ok 4 - -p --relative
ok 5 - -p --relative=sub
ok 6 - --numstat --relative=subdir/
ok 7 - --numstat --relative=subdir
ok 8 - --numstat --relative
ok 9 - --numstat --relative=sub
ok 10 - --stat --relative=subdir/
ok 11 - --stat --relative=subdir
ok 12 - --stat --relative
ok 13 - --stat --relative=sub
ok 14 - --raw --relative=subdir/
ok 15 - --raw --relative=subdir
ok 16 - --raw --relative
ok 17 - --raw --relative=sub
ok 18 - config diff.relative false -p 
ok 19 - config diff.relative true -p --no-relative
ok 20 - config diff.relative false -p --no-relative
ok 21 - config diff.relative false -p 
ok 22 - config diff.relative true -p --no-relative
ok 23 - config diff.relative false -p --no-relative
ok 24 - config diff.relative false -p --relative=subdir/
ok 25 - config diff.relative false -p --relative=subdir
ok 26 - config diff.relative true -p --relative=subdir/
ok 27 - config diff.relative true -p --relative=subdir
ok 28 - config diff.relative false -p --relative
ok 29 - config diff.relative true -p --relative
ok 30 - config diff.relative true -p 
ok 31 - config diff.relative false -p --no-relative --relative
ok 32 - config diff.relative true -p --no-relative --relative
ok 33 - config diff.relative false -p --no-relative --relative=subdir
ok 34 - config diff.relative true -p --no-relative --relative=subdir
ok 35 - external diff with --relative
ok 36 - setup diff --relative unmerged
ok 37 - diff --relative without change in subdir
ok 38 - diff --relative --name-only with change in subdir
not ok 39 - diff --relative with change in subdir # TODO known breakage
# still have 1 known breakage(s)
# passed all remaining 38 test(s)
1..39
*** t4046-diff-unmerged.sh ***
ok 1 - setup
ok 2 - diff-files -0
ok 3 - diff-files -1
ok 4 - diff-files -2
ok 5 - diff-files -3
ok 6 - diff --stat
# passed all 6 test(s)
1..6
*** t4047-diff-dirstat.sh ***
ok 1 - setup
ok 2 - sanity check setup (--numstat)
ok 3 - various ways to misspell --dirstat
ok 4 - vanilla --dirstat
ok 5 - vanilla -X
ok 6 - explicit defaults: --dirstat=changes,noncumulative,3
ok 7 - explicit defaults: -Xchanges,noncumulative,3
ok 8 - later options override earlier options:
ok 9 - non-defaults in config overridden by explicit defaults on command line
ok 10 - --dirstat=0
ok 11 - -X0
ok 12 - diff.dirstat=0
ok 13 - --dirstat=0 --cumulative
ok 14 - --dirstat=0,cumulative
ok 15 - -X0,cumulative
ok 16 - diff.dirstat=0,cumulative
ok 17 - diff.dirstat=0 & --dirstat=cumulative
ok 18 - --dirstat-by-file
ok 19 - --dirstat=files
ok 20 - diff.dirstat=files
ok 21 - --dirstat-by-file=10
ok 22 - --dirstat=files,10
ok 23 - diff.dirstat=10,files
ok 24 - --dirstat-by-file --cumulative
ok 25 - --dirstat=files,cumulative
ok 26 - diff.dirstat=cumulative,files
ok 27 - --dirstat=files,cumulative,10
ok 28 - diff.dirstat=10,cumulative,files
ok 29 - --dirstat=files,cumulative,16.7
ok 30 - diff.dirstat=16.7,cumulative,files
ok 31 - diff.dirstat=16.70,cumulative,files
ok 32 - --dirstat=files,cumulative,27.2
ok 33 - --dirstat=files,cumulative,27.09
ok 34 - --dirstat=lines
ok 35 - diff.dirstat=lines
ok 36 - --dirstat=lines,0
ok 37 - diff.dirstat=0,lines
ok 38 - --dirstat=future_param,lines,0 should fail loudly
ok 39 - --dirstat=dummy1,cumulative,2dummy should report both unrecognized parameters
ok 40 - diff.dirstat=future_param,0,lines should warn, but still work
ok 41 - --shortstat --dirstat should output only one dirstat
# passed all 41 test(s)
1..41
*** t4048-diff-combined-binary.sh ***
ok 1 - setup binary merge conflict
ok 2 - diff -m indicates binary-ness
ok 3 - diff -c indicates binary-ness
ok 4 - diff --cc indicates binary-ness
ok 5 - setup non-binary with binary attribute
ok 6 - diff -m respects binary attribute
ok 7 - diff -c respects binary attribute
ok 8 - diff --cc respects binary attribute
ok 9 - setup textconv attribute
ok 10 - diff -m respects textconv attribute
ok 11 - diff -c respects textconv attribute
ok 12 - diff --cc respects textconv attribute
ok 13 - diff-tree plumbing does not respect textconv
ok 14 - diff --cc respects textconv on worktree file
# passed all 14 test(s)
1..14
*** t4049-diff-stat-count.sh ***
ok 1 - setup
ok 2 - mode-only change show as a 0-line change
ok 3 - binary changes do not count in lines
ok 4 - exclude unmerged entries from total file count
# passed all 4 test(s)
1..4
*** t4050-diff-histogram.sh ***
ok 1 - setup attributes files for tests with histogram
ok 2 - histogram diff from attributes
ok 3 - diff from attributes with bare repo with source
ok 4 - diff from attributes with bare repo with invalid source
ok 5 - histogram diff from attributes has valid diffstat
ok 6 - histogram diff
ok 7 - histogram diff command line precedence before attributes
ok 8 - histogram diff attributes precedence before config
ok 9 - histogram diff output is valid
ok 10 - completely different files
# passed all 10 test(s)
1..10
*** t4051-diff-function-context.sh ***
ok 1 - setup
ok 2 - changed function
ok 3 -  diff applies
ok 4 -  context includes comment
ok 5 -  context includes begin
ok 6 -  context includes end
ok 7 -  context does not include other functions
ok 8 -  context does not include preceding empty lines
ok 9 -  context does not include trailing empty lines
ok 10 - changed includes
ok 11 -  diff applies
ok 12 -  context includes begin
ok 13 -  context includes end
ok 14 -  context does not include other functions
ok 15 -  context does not include trailing empty lines
ok 16 - appended function
ok 17 -  diff applies
ok 18 -  context includes begin
ok 19 -  context includes end
ok 20 -  context does not include other functions
ok 21 - appended function part
ok 22 -  diff applies
ok 23 -  context includes begin
ok 24 -  context includes end
ok 25 -  context does not include other functions
ok 26 -  context does not include preceding empty lines
ok 27 - change with long common tail and no context
ok 28 -  diff applies
ok 29 -  context includes begin
ok 30 -  context includes end
ok 31 -  context does not include other functions
ok 32 -  context does not include preceding empty lines
ok 33 - changed function plus appended function
ok 34 -  diff applies
ok 35 -  context includes begin
ok 36 -  context includes end
ok 37 -  context does not include other functions
ok 38 - changed two consecutive functions
ok 39 -  diff applies
ok 40 -  context includes begin
ok 41 -  context includes end
ok 42 -  overlapping hunks are merged
# passed all 42 test(s)
1..42
*** t4052-stat-output.sh ***
ok 1 - preparation
ok 2 - format-patch: small change with long name gives more space to the name
ok 3 - diff: small change with long name gives more space to the name
ok 4 - show: small change with long name gives more space to the name
ok 5 - log: small change with long name gives more space to the name
ok 6 - format-patch ignores diff.statNameWidth with long name
ok 7 - format-patch --stat=width ignores diff.statNameWidth with long name
ok 8 - diff respects diff.statNameWidth with long name
ok 9 - diff --stat=width respects diff.statNameWidth with long name
ok 10 - show respects diff.statNameWidth with long name
ok 11 - show --stat=width respects diff.statNameWidth with long name
ok 12 - log respects diff.statNameWidth with long name
ok 13 - log --stat=width respects diff.statNameWidth with long name
ok 14 - format-patch --stat=width: a long name is given more room when the bar is short
ok 15 - format-patch --stat-width=width with long name
ok 16 - format-patch --stat=width,name-width with long name
ok 17 - format-patch --stat-name-width=width with long name
ok 18 - diff --stat=width: a long name is given more room when the bar is short
ok 19 - diff --stat-width=width with long name
ok 20 - diff --stat=width,name-width with long name
ok 21 - diff --stat-name-width=width with long name
ok 22 - show --stat=width: a long name is given more room when the bar is short
ok 23 - show --stat-width=width with long name
ok 24 - show --stat=width,name-width with long name
ok 25 - show --stat-name-width=width with long name
ok 26 - log --stat=width: a long name is given more room when the bar is short
ok 27 - log --stat-width=width with long name
ok 28 - log --stat=width,name-width with long name
ok 29 - log --stat-name-width=width with long name
ok 30 - preparation for big-change tests
ok 31 - format-patch --cover-letter ignores COLUMNS with big change
ok 32 - format-patch ignores COLUMNS with big change
ok 33 - format-patch --graph ignores COLUMNS with big change
ok 34 - diff respects COLUMNS with big change
ok 35 - show respects COLUMNS with big change
ok 36 - log respects COLUMNS with big change
ok 37 - log --graph respects COLUMNS with big change
ok 38 - format-patch ignores not enough COLUMNS with big change
ok 39 - format-patch --graph ignores not enough COLUMNS with big change
ok 40 - diff respects not enough COLUMNS with big change
ok 41 - show respects not enough COLUMNS with big change
ok 42 - log respects not enough COLUMNS with big change
ok 43 - log --graph respects not enough COLUMNS with big change
ok 44 - format-patch ignores diff.statGraphWidth
ok 45 - format-patch --graph ignores diff.statGraphWidth
ok 46 - diff respects diff.statGraphWidth
ok 47 - show respects diff.statGraphWidth
ok 48 - log respects diff.statGraphWidth
ok 49 - log --graph respects diff.statGraphWidth
ok 50 - format-patch --stat=width with big change
ok 51 - format-patch --stat-width=width with big change
ok 52 - format-patch --stat-graph-width=width with big change
ok 53 - format-patch --stat-width=width --graph with big change
ok 54 - format-patch --stat-graph-width=width --graph with big change
ok 55 - diff --stat=width with big change
ok 56 - diff --stat-width=width with big change
ok 57 - diff --stat-graph-width=width with big change
ok 58 - show --stat=width with big change
ok 59 - show --stat-width=width with big change
ok 60 - show --stat-graph-width=width with big change
ok 61 - log --stat=width with big change
ok 62 - log --stat-width=width with big change
ok 63 - log --stat-graph-width=width with big change
ok 64 - log --stat-width=width --graph with big change
ok 65 - log --stat-graph-width=width --graph with big change
ok 66 - preparation for long-name tests
ok 67 - format-patch --stat=width with big change is more balanced
ok 68 - format-patch --stat=width --graph with big change is balanced
ok 69 - diff --stat=width with big change is more balanced
ok 70 - show --stat=width with big change is more balanced
ok 71 - log --stat=width with big change is more balanced
ok 72 - log --stat=width --graph with big change is balanced
ok 73 - format-patch ignores COLUMNS with long name
ok 74 - format-patch --graph ignores COLUMNS with long name
ok 75 - diff respects COLUMNS with long name
ok 76 - show respects COLUMNS with long name
ok 77 - log respects COLUMNS with long name
ok 78 - log --graph respects COLUMNS with long name
ok 79 - format-patch ignores prefix greater than COLUMNS with big change
ok 80 - format-patch --graph ignores prefix greater than COLUMNS with big change
ok 81 - diff respects prefix greater than COLUMNS with big change
ok 82 - show respects prefix greater than COLUMNS with big change
ok 83 - log respects prefix greater than COLUMNS with big change
ok 84 - log --graph respects prefix greater than COLUMNS with big change
ok 85 - merge --stat respects diff.statGraphWidth with big change
ok 86 - merge --stat respects COLUMNS with big change
ok 87 - merge --stat respects diff.statNameWidth with long name
ok 88 - merge --stat respects COLUMNS with long name
# passed all 88 test(s)
1..88
*** t4053-diff-no-index.sh ***
ok 1 - setup
ok 2 - git diff --no-index --exit-code
ok 3 - git diff --no-index directories
ok 4 - git diff --no-index relative path outside repo
ok 5 - git diff --no-index with broken index
ok 6 - git diff outside repo with broken index
ok 7 - git diff --no-index executed outside repo gives correct error message
ok 8 - diff D F and diff F D
ok 9 - turning a file into a directory
ok 10 - diff from repo subdir shows real paths (explicit)
ok 11 - diff from repo subdir shows real paths (implicit)
ok 12 - diff --no-index from repo subdir respects config (explicit)
ok 13 - diff --no-index from repo subdir respects config (implicit)
ok 14 - diff --no-index from repo subdir with absolute paths
ok 15 - diff --no-index allows external diff
ok 16 - diff --no-index normalizes mode: no changes
ok 17 - diff --no-index normalizes mode: chmod +x
ok 18 - diff --no-index normalizes: mode not like git mode
ok 19 - diff --no-index normalizes: mode not like git mode (symlink)
ok 20 - external diff with mode-only change
ok 21 - diff --no-index treats '-' as stdin
ok 22 - diff --no-index -R treats '-' as stdin
ok 23 - diff --no-index refuses to diff stdin and a directory
ok 24 - diff --no-index refuses to diff a named pipe and a directory
ok 25 - diff --no-index reads from pipes
# passed all 25 test(s)
1..25
*** t4054-diff-bogus-tree.sh ***
ok 1 - create bogus tree
ok 2 - create tree with matching file
ok 3 - raw diff shows null sha1 (addition)
ok 4 - raw diff shows null sha1 (removal)
ok 5 - raw diff shows null sha1 (modification)
ok 6 - raw diff shows null sha1 (other direction)
ok 7 - raw diff shows null sha1 (reverse)
ok 8 - raw diff shows null sha1 (index)
ok 9 - patch fails due to bogus sha1 (addition)
ok 10 - patch fails due to bogus sha1 (removal)
ok 11 - patch fails due to bogus sha1 (modification)
ok 12 - patch fails due to bogus sha1 (other direction)
ok 13 - patch fails due to bogus sha1 (reverse)
ok 14 - patch fails due to bogus sha1 (index)
# passed all 14 test(s)
1..14
*** t4055-diff-context.sh ***
ok 1 - setup
ok 2 - the default number of context lines is 3
ok 3 - diff.context honored by "log"
ok 4 - The -U option overrides diff.context
ok 5 - diff.context honored by "diff"
ok 6 - plumbing not affected
ok 7 - non-integer config parsing
ok 8 - negative integer config parsing
ok 9 - -U0 is valid, so is diff.context=0
# passed all 9 test(s)
1..9
*** t4056-diff-order.sh ***
ok 1 - setup
ok 2 - no order (=tree object order)
ok 3 - missing orderfile
ok 4 - unreadable orderfile
ok 5 - orderfile using option from subdir with --output
ok 6 - orderfile using option (1)
ok 7 - orderfile is fifo (1)
ok 8 - orderfile using config (1)
ok 9 - cancelling configured orderfile (1)
ok 10 - orderfile using option (2)
ok 11 - orderfile is fifo (2)
ok 12 - orderfile using config (2)
ok 13 - cancelling configured orderfile (2)
ok 14 - setup for testing combine-diff order
ok 15 - combine-diff: no order (=tree object order)
ok 16 - combine-diff: orderfile using option (1)
ok 17 - combine-diff: orderfile using option (2)
ok 18 - rotate and skip setup
ok 19 - diff --rotate-to
ok 20 - diff --skip-to
ok 21 - diff --rotate/skip-to error condition
ok 22 - log --rotate-to
ok 23 - log --skip-to
# passed all 23 test(s)
1..23
*** t4057-diff-combined-paths.sh ***
ok 1 - trivial merge - combine-diff empty
ok 2 - only one truly conflicting path
ok 3 - merge introduces new file
ok 4 - merge removed a file
# passed all 4 test(s)
1..4
*** t4058-diff-duplicates.sh ***
ok 1 - create trees with duplicate entries
ok 2 - create tree without duplicate entries
ok 3 - diff-tree between duplicate trees
ok 4 - diff-tree with renames
ok 5 - diff-tree FROM duplicate tree
ok 6 - diff-tree FROM duplicate tree, with renames
ok 7 - create a few commits
not ok 8 - git read-tree does not segfault # TODO known breakage
not ok 9 - reset --hard does not segfault # TODO known breakage
not ok 10 - git diff HEAD does not segfault # TODO known breakage
not ok 11 - can switch to another branch when status is empty # TODO known breakage
ok 12 - forcibly switch to another branch, verify status empty
ok 13 - fast-forward from non-duplicate entries to duplicate
not ok 14 - clean status, switch branches, status still clean # TODO known breakage
ok 15 - switch to base branch and force status to be clean
not ok 16 - fast-forward from duplicate entries to non-duplicate # TODO known breakage
# still have 6 known breakage(s)
# passed all remaining 10 test(s)
1..16
*** t4059-diff-submodule-not-initialized.sh ***
ok 1 - setup - submodules
ok 2 - setup - git submodule add
ok 3 - submodule directory removed
ok 4 - setup - submodule multiple commits
ok 5 - submodule removed multiple commits
ok 6 - submodule not initialized in new clone
ok 7 - setup submodule moved
ok 8 - submodule moved then removed
# passed all 8 test(s)
1..8
*** t4060-diff-submodule-option-diff-format.sh ***
ok 1 - setup repository
ok 2 - added submodule
ok 3 - added submodule, set diff.submodule
ok 4 - --submodule=short overrides diff.submodule
ok 5 - diff.submodule does not affect plumbing
ok 6 - modified submodule(forward)
ok 7 - modified submodule(forward)
ok 8 - modified submodule(forward) --submodule
ok 9 - modified submodule(forward) --submodule=short
ok 10 - modified submodule(backward)
ok 11 - modified submodule(backward and forward)
ok 12 - typechanged submodule(submodule->blob), --cached
ok 13 - typechanged submodule(submodule->blob)
ok 14 - typechanged submodule(submodule->blob)
Initialized empty Git repository in $(@D)/t/trash directory.t4060-diff-submodule-option-diff-format/sm1/.git/
ok 15 - nonexistent commit
ok 16 - typechanged submodule(blob->submodule)
ok 17 - submodule is up to date
ok 18 - submodule contains untracked content
ok 19 - submodule contains untracked content (untracked ignored)
ok 20 - submodule contains untracked content (dirty ignored)
ok 21 - submodule contains untracked content (all ignored)
ok 22 - submodule contains untracked and modified content
ok 23 - submodule contains untracked and modified content (untracked ignored)
ok 24 - submodule contains untracked and modified content (dirty ignored)
ok 25 - submodule contains untracked and modified content (all ignored)
ok 26 - submodule contains modified content
ok 27 - submodule is modified
ok 28 - modified submodule contains untracked content
ok 29 - modified submodule contains untracked content (untracked ignored)
ok 30 - modified submodule contains untracked content (dirty ignored)
ok 31 - modified submodule contains untracked content (all ignored)
ok 32 - modified submodule contains untracked and modified content
ok 33 - modified submodule contains untracked and modified content (untracked ignored)
ok 34 - modified submodule contains untracked and modified content (dirty ignored)
ok 35 - modified submodule contains untracked and modified content (all ignored)
ok 36 - modified submodule contains modified content
ok 37 - deleted submodule
ok 38 - create second submodule
ok 39 - multiple submodules
ok 40 - path filter
ok 41 - given commit
ok 42 - setup .git file for sm2
ok 43 - diff --submodule=diff with .git file
ok 44 - deleted submodule with .git file
ok 45 - typechanged(submodule->blob) submodule with .git file
ok 46 - setup nested submodule
ok 47 - move nested submodule HEAD
ok 48 - diff --submodule=diff with moved nested submodule HEAD
ok 49 - diff --submodule=diff recurses into nested submodules
ok 50 - diff --submodule=diff recurses into deleted nested submodules
# passed all 50 test(s)
1..50
*** t4061-diff-indent.sh ***
ok 1 - prepare
ok 2 - diff: ugly spaces
ok 3 - diff: --no-indent-heuristic overrides config
ok 4 - diff: nice spaces with --indent-heuristic
ok 5 - diff: nice spaces with diff.indentHeuristic=true
ok 6 - diff: --indent-heuristic with --patience
ok 7 - diff: --indent-heuristic with --histogram
ok 8 - diff: ugly functions
ok 9 - diff: nice functions with --indent-heuristic
ok 10 - blame: nice spaces with --indent-heuristic
ok 11 - blame: nice spaces with diff.indentHeuristic=true
ok 12 - blame: ugly spaces with --no-indent-heuristic
ok 13 - blame: ugly spaces with diff.indentHeuristic=false
ok 14 - blame: --no-indent-heuristic overrides config
ok 15 - blame: --indent-heuristic overrides config
ok 16 - diff-tree: nice spaces with --indent-heuristic
ok 17 - diff-tree: nice spaces with diff.indentHeuristic=true
ok 18 - diff-tree: ugly spaces with --no-indent-heuristic
ok 19 - diff-tree: ugly spaces with diff.indentHeuristic=false
ok 20 - diff-tree: --indent-heuristic overrides config
ok 21 - diff-tree: --no-indent-heuristic overrides config
ok 22 - diff-index: nice spaces with --indent-heuristic
ok 23 - diff-index: nice spaces with diff.indentHeuristic=true
ok 24 - diff-index: ugly spaces with --no-indent-heuristic
ok 25 - diff-index: ugly spaces with diff.indentHeuristic=false
ok 26 - diff-index: --indent-heuristic overrides config
ok 27 - diff-index: --no-indent-heuristic overrides config
ok 28 - diff-files: nice spaces with --indent-heuristic
ok 29 - diff-files: nice spaces with diff.indentHeuristic=true
ok 30 - diff-files: ugly spaces with --no-indent-heuristic
ok 31 - diff-files: ugly spaces with diff.indentHeuristic=false
ok 32 - diff-files: --indent-heuristic overrides config
ok 33 - diff-files: --no-indent-heuristic overrides config
# passed all 33 test(s)
1..33
*** t4062-diff-pickaxe.sh ***
ok 1 - setup
ok 2 - -G matches
ok 3 - -S --pickaxe-regex
# passed all 3 test(s)
1..3
*** t4063-diff-blobs.sh ***
ok 1 - create some blobs
ok 2 - diff by sha1
ok 3 - index of sha1 diff
ok 4 - sha1 diff uses arguments as paths
ok 5 - sha1 diff has no mode change
ok 6 - diff by tree:path (run)
ok 7 - index of tree:path diff
ok 8 - tree:path diff uses filenames as paths
ok 9 - tree:path diff shows mode change
ok 10 - diff by ranged tree:path
ok 11 - index of ranged tree:path diff
ok 12 - ranged tree:path diff uses filenames as paths
ok 13 - ranged tree:path diff shows mode change
ok 14 - diff blob against file
ok 15 - index of blob-file diff
ok 16 - blob-file diff uses filename as paths
ok 17 - blob-file diff shows mode change
ok 18 - blob-file diff prefers filename to sha1
# passed all 18 test(s)
1..18
*** t4064-diff-oidfind.sh ***
ok 1 - setup 
ok 2 - find the greeting blob
ok 3 - setup a tree
ok 4 - find a tree
ok 5 - setup a submodule
ok 6 - find a submodule
ok 7 - set up merge tests
ok 8 - detect merge which introduces blob
ok 9 - detect merge which removes blob
ok 10 - do not detect merge that does not touch blob
# passed all 10 test(s)
1..10
*** t4065-diff-anchored.sh ***
ok 1 - --anchored
ok 2 - --anchored multiple
ok 3 - --anchored with nonexistent line has no effect
ok 4 - --anchored with non-unique line has no effect
ok 5 - diff still produced with impossible multiple --anchored
ok 6 - later algorithm arguments override earlier ones
ok 7 - --anchored works with other commands like "git show"
# passed all 7 test(s)
1..7
*** t4066-diff-emit-delay.sh ***
ok 1 - set up history with a merge
ok 2 - log --cc -p --stat --color-moved
# passed all 2 test(s)
1..2
*** t4067-diff-partial-clone.sh ***
ok 1 - git show batches blobs
ok 2 - diff batches blobs
ok 3 - diff skips same-OID blobs
ok 4 - when fetching missing objects, diff skips GITLINKs
ok 5 - diff with rename detection batches blobs
ok 6 - diff does not fetch anything if inexact rename detection is not needed
ok 7 - diff --break-rewrites fetches only if necessary, and batches blobs if it does
# passed all 7 test(s)
1..7
*** t4068-diff-symmetric-merge-base.sh ***
ok 1 - setup
ok 2 - diff with one merge base
ok 3 - diff with two merge bases
ok 4 - diff with no merge bases
ok 5 - diff with too many symmetric differences
ok 6 - diff with symmetric difference and extraneous arg
ok 7 - diff with two ranges
ok 8 - diff with ranges and extra arg
ok 9 - diff --merge-base with no commits
ok 10 - diff --merge-base with three commits
ok 11 - diff-index --merge-base with one commit
ok 12 - diff-index --merge-base with annotated tag
ok 13 - diff-index --merge-base with one commit and unstaged changes
ok 14 - diff-index --merge-base with one commit and staged and unstaged changes
ok 15 - diff-index --merge-base --cached with one commit and staged and unstaged changes
ok 16 - diff-index --merge-base with non-commit
ok 17 - diff-index --merge-base with no merge bases and one commit
ok 18 - diff-index --merge-base with multiple merge bases and one commit
ok 19 - diff --merge-base with one commit
ok 20 - diff --merge-base with annotated tag
ok 21 - diff --merge-base with one commit and unstaged changes
ok 22 - diff --merge-base with one commit and staged and unstaged changes
ok 23 - diff --merge-base --cached with one commit and staged and unstaged changes
ok 24 - diff --merge-base with non-commit
ok 25 - diff --merge-base with no merge bases and one commit
ok 26 - diff --merge-base with multiple merge bases and one commit
ok 27 - diff-tree --merge-base with two commits
ok 28 - diff-tree --merge-base commit and non-commit
ok 29 - diff-tree --merge-base with no merge bases and two commits
ok 30 - diff-tree --merge-base with multiple merge bases and two commits
ok 31 - diff --merge-base with two commits
ok 32 - diff --merge-base commit and non-commit
ok 33 - diff --merge-base with no merge bases and two commits
ok 34 - diff --merge-base with multiple merge bases and two commits
ok 35 - diff-tree --merge-base with one commit
ok 36 - diff --merge-base with range
# passed all 36 test(s)
1..36
*** t4069-remerge-diff.sh ***
ok 1 - setup basic merges
ok 2 - remerge-diff on a clean merge
ok 3 - remerge-diff on a clean merge with a filter
ok 4 - remerge-diff with both a resolved conflict and an unrelated change
ok 5 - pickaxe still includes additional headers for relevant changes
ok 6 - can filter out additional headers with pickaxe
ok 7 - setup non-content conflicts
ok 8 - remerge-diff with non-content conflicts
ok 9 - remerge-diff w/ diff-filter=U: all conflict headers, no diff content
ok 10 - submodule formatting ignores additional headers
ok 11 - remerge-diff w/ diff-filter=R: relevant file + conflict header
ok 12 - remerge-diff w/ pathspec: limits to relevant file including conflict header
ok 13 - setup non-content conflicts
ok 14 - remerge-diff turns off history simplification
# passed all 14 test(s)
1..14
*** t4100-apply-stat.sh ***
ok 1 - rename
ok 2 - rename with recount
ok 3 - copy
ok 4 - copy with recount
ok 5 - rewrite
ok 6 - rewrite with recount
ok 7 - mode
ok 8 - mode with recount
ok 9 - non git (1)
ok 10 - non git (1) with recount
ok 11 - non git (2)
ok 12 - non git (2) with recount
ok 13 - non git (3)
ok 14 - non git (3) with recount
ok 15 - incomplete (1)
ok 16 - incomplete (1) with recount
ok 17 - incomplete (2)
ok 18 - incomplete (2) with recount
# passed all 18 test(s)
1..18
*** t4101-apply-nonl.sh ***
ok 1 - apply diff between 0 and 1
ok 2 - apply diff between 0 and 2
ok 3 - apply diff between 0 and 3
ok 4 - apply diff between 1 and 0
ok 5 - apply diff between 1 and 2
ok 6 - apply diff between 1 and 3
ok 7 - apply diff between 2 and 0
ok 8 - apply diff between 2 and 1
ok 9 - apply diff between 2 and 3
ok 10 - apply diff between 3 and 0
ok 11 - apply diff between 3 and 1
ok 12 - apply diff between 3 and 2
# passed all 12 test(s)
1..12
*** t4102-apply-rename.sh ***
ok 1 - setup
ok 2 - apply
ok 3 - validate
ok 4 - apply reverse
ok 5 - apply copy
# passed all 5 test(s)
1..5
*** t4103-apply-binary.sh ***
ok 1 - setup
ok 2 - stat binary diff -- should not fail.
ok 3 - stat binary -p0 diff -- should not fail.
ok 4 - stat binary diff (copy) -- should not fail.
ok 5 - check binary diff -- should fail.
ok 6 - check binary diff (copy) -- should fail.
ok 7 - check incomplete binary diff with replacement -- should fail.
ok 8 - check incomplete binary diff with replacement (copy) -- should fail.
ok 9 - check binary diff with replacement.
ok 10 - check binary diff with replacement (copy).
ok 11 - apply binary diff -- should fail.
ok 12 - apply binary diff -- should fail.
ok 13 - apply binary diff (copy) -- should fail.
ok 14 - apply binary diff (copy) -- should fail.
ok 15 - apply binary diff with full-index
ok 16 - apply binary diff with full-index (copy)
ok 17 - apply full-index binary diff in new repo
ok 18 - apply binary diff without replacement.
ok 19 - apply binary diff without replacement (copy).
ok 20 - apply binary diff.
ok 21 - apply binary diff (copy).
ok 22 - apply binary -p0 diff
ok 23 - reject truncated binary diff
# passed all 23 test(s)
1..23
*** t4104-apply-boundary.sh ***
ok 1 - setup
ok 2 - apply add-a-patch with context
ok 3 - apply add-z-patch with context
ok 4 - apply insert-a-patch with context
ok 5 - apply mod-a-patch with context
ok 6 - apply mod-z-patch with context
ok 7 - apply del-a-patch with context
ok 8 - apply del-z-patch with context
ok 9 - apply add-a-patch without context
ok 10 - apply add-z-patch without context
ok 11 - apply insert-a-patch without context
ok 12 - apply mod-a-patch without context
ok 13 - apply mod-z-patch without context
ok 14 - apply del-a-patch without context
ok 15 - apply del-z-patch without context
ok 16 - apply non-git add-a-patch without context
ok 17 - apply non-git add-z-patch without context
ok 18 - apply non-git insert-a-patch without context
ok 19 - apply non-git mod-a-patch without context
ok 20 - apply non-git mod-z-patch without context
ok 21 - apply non-git del-a-patch without context
ok 22 - apply non-git del-z-patch without context
ok 23 - two lines
ok 24 - apply patch with 3 context lines matching at end
# passed all 24 test(s)
1..24
*** t4105-apply-fuzz.sh ***
ok 1 - setup
ok 2 - unmodified patch
ok 3 - minus offset
ok 4 - plus offset
ok 5 - big offset
ok 6 - fuzz with no offset
ok 7 - fuzz with minus offset
ok 8 - fuzz with plus offset
ok 9 - fuzz with big offset
# passed all 9 test(s)
1..9
*** t4106-apply-stdin.sh ***
ok 1 - setup
ok 2 - git apply --numstat - < patch
ok 3 - git apply --numstat - < patch patch
# passed all 3 test(s)
1..3
*** t4107-apply-ignore-whitespace.sh ***
ok 1 - file creation
ok 2 - patch2 fails (retab)
ok 3 - patch2 applies with --ignore-whitespace
ok 4 - patch2 reverse applies with --ignore-space-change
ok 5 - patch2 applies (apply.ignorewhitespace = change)
ok 6 - patch3 fails (missing string at EOL)
ok 7 - patch4 fails (missing EOL at EOF)
ok 8 - patch5 fails (leading whitespace differences matter)
ok 9 - re-create file (with --ignore-whitespace)
ok 10 - patch5 fails (--no-ignore-whitespace)
ok 11 - apply --ignore-space-change --inaccurate-eof
# passed all 11 test(s)
1..11
*** t4108-apply-threeway.sh ***
ok 1 - setup
ok 2 - apply without --3way
ok 3 - apply with --3way
ok 4 - apply with --3way with merge.conflictStyle = diff3
ok 5 - apply with --3way with rerere enabled
ok 6 - apply -3 with add/add conflict setup
ok 7 - apply -3 with add/add conflict
ok 8 - apply -3 with add/add conflict (dirty working tree)
ok 9 - apply -3 with ambiguous repeating file
ok 10 - apply with --3way --cached clean apply
ok 11 - apply with --3way --cached and conflicts
ok 12 - apply binary file patch
ok 13 - apply binary file patch with 3way
ok 14 - apply full-index patch with 3way
ok 15 - apply delete then new patch with 3way
# passed all 15 test(s)
1..15
*** t4109-apply-multifrag.sh ***
ok 1 - git apply (1)
ok 2 - git apply (2)
ok 3 - git apply (3)
# passed all 3 test(s)
1..3
*** t4110-apply-scan.sh ***
ok 1 - git apply scan
# passed all 1 test(s)
1..1
*** t4111-apply-subdir.sh ***
ok 1 - setup
ok 2 - setup: subdir
ok 3 - apply from subdir of toplevel
ok 4 - apply --cached from subdir of toplevel
ok 5 - apply --index from subdir of toplevel
ok 6 - apply half-broken patch from subdir of toplevel
ok 7 - apply from .git dir
ok 8 - apply from subdir of .git dir
ok 9 - apply --cached from .git dir
ok 10 - apply --cached from subdir of .git dir
# passed all 10 test(s)
1..10
*** t4112-apply-renames.sh ***
ok 1 - check rename/copy patch
ok 2 - apply rename/copy patch
# passed all 2 test(s)
1..2
*** t4113-apply-ending.sh ***
ok 1 - setup
ok 2 - apply at the end
ok 3 - apply at the beginning
# passed all 3 test(s)
1..3
*** t4114-apply-typechange.sh ***
ok 1 - setup repository and commits
ok 2 - file renamed from foo to foo/baz
ok 3 - file renamed from foo/baz to foo
ok 4 - directory becomes file
ok 5 - file becomes directory
ok 6 - file becomes symlink
ok 7 - symlink becomes file
ok 8 - symlink becomes file, in reverse
ok 9 - binary file becomes symlink
ok 10 - symlink becomes binary file
ok 11 - symlink becomes directory
ok 12 - directory becomes symlink
# passed all 12 test(s)
1..12
*** t4115-apply-symlink.sh ***
ok 1 - setup
ok 2 - apply symlink patch
ok 3 - apply --index symlink patch
ok 4 - symlink setup
ok 5 - symlink escape when creating new files
ok 6 - symlink escape when modifying file
ok 7 - symlink escape when deleting file
ok 8 - --reject removes .rej symlink if it exists
# passed all 8 test(s)
1..8
*** t4116-apply-reverse.sh ***
ok 1 - setup
ok 2 - apply in forward
ok 3 - apply in reverse
ok 4 - setup separate repository lacking postimage
ok 5 - apply in forward without postimage
ok 6 - apply in reverse without postimage
ok 7 - reversing a whitespace introduction
# passed all 7 test(s)
1..7
*** t4117-apply-reject.sh ***
ok 1 - setup
ok 2 - apply --reject is incompatible with --3way
ok 3 - apply without --reject should fail
ok 4 - apply without --reject should fail
ok 5 - apply with --reject should fail but update the file
ok 6 - apply with --reject should fail but update the file
ok 7 - the same test with --verbose
ok 8 - apply cleanly with --verbose
# passed all 8 test(s)
1..8
*** t4118-apply-empty-context.sh ***
ok 1 - setup
ok 2 - apply --numstat
ok 3 - apply --apply
# passed all 3 test(s)
1..3
*** t4119-apply-config.sh ***
ok 1 - setup
ok 2 - apply --whitespace=strip
ok 3 - apply --whitespace=strip from config
ok 4 - apply --whitespace=strip in subdir
ok 5 - apply --whitespace=strip from config in subdir
ok 6 - same in subdir but with traditional patch input
ok 7 - same but with traditional patch input of depth 1
ok 8 - same but with traditional patch input of depth 2
ok 9 - same but with traditional patch input of depth 1
ok 10 - same but with traditional patch input of depth 2
ok 11 - in subdir with traditional patch input
# passed all 11 test(s)
1..11
*** t4120-apply-popt.sh ***
ok 1 - setup
ok 2 - apply git diff with -p2
ok 3 - apply with too large -p
ok 4 - apply (-p2) traditional diff with funny filenames
ok 5 - apply with too large -p and fancy filename
ok 6 - apply (-p2) diff, mode change only
ok 7 - file mode was changed
ok 8 - apply (-p2) diff, rename
# passed all 8 test(s)
1..8
*** t4121-apply-diffs.sh ***
ok 1 - setup
ok 2 - check if contextually independent diffs for the same file apply
# passed all 2 test(s)
1..2
*** t4122-apply-symlink-inside.sh ***
ok 1 - setup
ok 2 - apply
ok 3 - check result
ok 4 - do not read from beyond symbolic link
ok 5 - do not follow symbolic link (setup)
ok 6 - do not follow symbolic link (same input)
ok 7 - do not follow symbolic link (existing)
# passed all 7 test(s)
1..7
*** t4123-apply-shrink.sh ***
ok 1 - setup
ok 2 - apply should fail gracefully
# passed all 2 test(s)
1..2
*** t4124-apply-ws-rule.sh ***
ok 1 - setup
ok 2 - whitespace=nowarn, default rule
ok 3 - whitespace=warn, default rule
ok 4 - whitespace=error-all, default rule
ok 5 - whitespace=error-all, no rule
ok 6 - whitespace=error-all, no rule (attribute)
ok 7 - spaces inserted by tab-in-indent
ok 8 - rule=-trailing,-space,-indent,-tab
ok 9 - rule=-trailing,-space,-indent,-tab,tabwidth=16
ok 10 - rule=-trailing,-space,-indent,-tab (attributes)
ok 11 - rule=-trailing,-space,-indent,-tab,tabwidth=16 (attributes)
ok 12 - rule=-trailing,-space,-indent,tab
ok 13 - rule=-trailing,-space,-indent,tab,tabwidth=16
ok 14 - rule=-trailing,-space,-indent,tab (attributes)
ok 15 - rule=-trailing,-space,-indent,tab,tabwidth=16 (attributes)
ok 16 - rule=-trailing,-space,indent,-tab
ok 17 - rule=-trailing,-space,indent,-tab,tabwidth=16
ok 18 - rule=-trailing,-space,indent,-tab (attributes)
ok 19 - rule=-trailing,-space,indent,-tab,tabwidth=16 (attributes)
ok 20 - rule=-trailing,space,-indent,-tab
ok 21 - rule=-trailing,space,-indent,-tab,tabwidth=16
ok 22 - rule=-trailing,space,-indent,-tab (attributes)
ok 23 - rule=-trailing,space,-indent,-tab,tabwidth=16 (attributes)
ok 24 - rule=-trailing,space,-indent,tab
ok 25 - rule=-trailing,space,-indent,tab,tabwidth=16
ok 26 - rule=-trailing,space,-indent,tab (attributes)
ok 27 - rule=-trailing,space,-indent,tab,tabwidth=16 (attributes)
ok 28 - rule=-trailing,space,indent,-tab
ok 29 - rule=-trailing,space,indent,-tab,tabwidth=16
ok 30 - rule=-trailing,space,indent,-tab (attributes)
ok 31 - rule=-trailing,space,indent,-tab,tabwidth=16 (attributes)
ok 32 - rule=trailing,-space,-indent,-tab
ok 33 - rule=trailing,-space,-indent,-tab,tabwidth=16
ok 34 - rule=trailing,-space,-indent,-tab (attributes)
ok 35 - rule=trailing,-space,-indent,-tab,tabwidth=16 (attributes)
ok 36 - rule=trailing,-space,-indent,tab
ok 37 - rule=trailing,-space,-indent,tab,tabwidth=16
ok 38 - rule=trailing,-space,-indent,tab (attributes)
ok 39 - rule=trailing,-space,-indent,tab,tabwidth=16 (attributes)
ok 40 - rule=trailing,-space,indent,-tab
ok 41 - rule=trailing,-space,indent,-tab,tabwidth=16
ok 42 - rule=trailing,-space,indent,-tab (attributes)
ok 43 - rule=trailing,-space,indent,-tab,tabwidth=16 (attributes)
ok 44 - rule=trailing,space,-indent,-tab
ok 45 - rule=trailing,space,-indent,-tab,tabwidth=16
ok 46 - rule=trailing,space,-indent,-tab (attributes)
ok 47 - rule=trailing,space,-indent,-tab,tabwidth=16 (attributes)
ok 48 - rule=trailing,space,-indent,tab
ok 49 - rule=trailing,space,-indent,tab,tabwidth=16
ok 50 - rule=trailing,space,-indent,tab (attributes)
ok 51 - rule=trailing,space,-indent,tab,tabwidth=16 (attributes)
ok 52 - rule=trailing,space,indent,-tab
ok 53 - rule=trailing,space,indent,-tab,tabwidth=16
ok 54 - rule=trailing,space,indent,-tab (attributes)
ok 55 - rule=trailing,space,indent,-tab,tabwidth=16 (attributes)
ok 56 - trailing whitespace & no newline at the end of file
ok 57 - blank at EOF with --whitespace=fix (1)
ok 58 - blank at EOF with --whitespace=fix (2)
ok 59 - blank at EOF with --whitespace=fix (3)
ok 60 - blank at end of hunk, not at EOF with --whitespace=fix
ok 61 - blank at EOF with --whitespace=warn
ok 62 - blank at EOF with --whitespace=error
ok 63 - blank but not empty at EOF
ok 64 - applying beyond EOF requires one non-blank context line
ok 65 - tons of blanks at EOF should not apply
ok 66 - missing blank line at end with --whitespace=fix
ok 67 - two missing blank lines at end with --whitespace=fix
ok 68 - missing blank line at end, insert before end, --whitespace=fix
ok 69 - shrink file with tons of missing blanks at end of file
ok 70 - missing blanks at EOF must only match blank lines
ok 71 - missing blank line should match context line with spaces
ok 72 - same, but with the --ignore-space-option
ok 73 - same, but with CR-LF line endings && cr-at-eol set
ok 74 - CR-LF line endings && add line && text=auto
ok 75 - CR-LF line endings && change line && text=auto
ok 76 - LF in repo, CRLF in worktree && change line && text=auto
ok 77 - whitespace=fix to expand
ok 78 - whitespace check skipped for excluded paths
# passed all 78 test(s)
1..78
*** t4125-apply-ws-fuzz.sh ***
ok 1 - setup
ok 2 - nofix
ok 3 - withfix (forward)
ok 4 - withfix (backward)
# passed all 4 test(s)
1..4
*** t4126-apply-empty.sh ***
ok 1 - setup
ok 2 - apply empty
ok 3 - apply empty patch fails
ok 4 - apply with --allow-empty succeeds
ok 5 - apply --index empty
ok 6 - apply create
ok 7 - apply --index create
ok 8 - apply with no-contents and a funny pathname
# passed all 8 test(s)
1..8
*** t4127-apply-same-fn.sh ***
ok 1 - setup
ok 2 - apply same filename with independent changes
ok 3 - apply same filename with overlapping changes
ok 4 - apply same filename with overlapping changes, in reverse
ok 5 - apply same new filename after rename
ok 6 - apply same old filename after rename -- should fail.
ok 7 - apply A->B (rename), C->A (rename), A->A -- should pass.
# passed all 7 test(s)
1..7
*** t4128-apply-root.sh ***
ok 1 - setup
ok 2 - apply --directory -p (1)
ok 3 - apply --directory -p (2) 
ok 4 - apply --directory (new file)
ok 5 - apply --directory -p (new file)
ok 6 - apply --directory (delete file)
ok 7 - apply --directory (quoted filename)
# passed all 7 test(s)
1..7
*** t4129-apply-samemode.sh ***
ok 1 - setup
ok 2 - same mode (no index)
ok 3 - same mode (with index)
ok 4 - same mode (index only)
ok 5 - mode update (no index)
ok 6 - mode update (with index)
ok 7 - mode update (index only)
ok 8 - empty mode is rejected
ok 9 - bogus mode is rejected
ok 10 - do not use core.sharedRepository for working tree files
ok 11 - git apply respects core.fileMode
# passed all 11 test(s)
1..11
*** t4130-apply-criss-cross-rename.sh ***
ok 1 - setup
ok 2 - criss-cross rename
ok 3 - diff -M -B
ok 4 - apply
ok 5 - criss-cross rename
ok 6 - diff -M -B
ok 7 - apply
# passed all 7 test(s)
1..7
*** t4131-apply-fake-ancestor.sh ***
ok 1 - setup
ok 2 - apply --build-fake-ancestor
ok 3 - apply --build-fake-ancestor in a subdirectory
# passed all 3 test(s)
1..3
*** t4132-apply-removal.sh ***
ok 1 - setup
ok 2 - test addEast.patch
ok 3 - test addGMT.patch
ok 4 - test addWest.patch
ok 5 - test createEast.patch
ok 6 - test createGMT.patch
ok 7 - test createWest.patch
ok 8 - test emptyEast.patch
ok 9 - test emptyGMT.patch
ok 10 - test emptyWest.patch
ok 11 - test removeEast.patch
ok 12 - test removeGMT.patch
ok 13 - test removeWest.patch
ok 14 - test removeWest2.patch
# passed all 14 test(s)
1..14
*** t4133-apply-filenames.sh ***
ok 1 - setup
ok 2 - apply diff with inconsistent filenames in headers
ok 3 - apply diff with new filename missing from headers
ok 4 - apply diff with old filename missing from headers
# passed all 4 test(s)
1..4
*** t4134-apply-submodule.sh ***
ok 1 - setup
ok 2 - removing a submodule also removes all leading subdirectories
# passed all 2 test(s)
1..2
*** t4135-apply-weird-filenames.sh ***
ok 1 - setup
ok 2 - plain, git-style file creation patch
ok 3 - plain, traditional patch
ok 4 - plain, traditional file creation patch
ok 5 - with spaces, git-style file creation patch
ok 6 - with spaces, traditional patch
ok 7 - with spaces, traditional file creation patch
ok 8 - with tab, git-style file creation patch
ok 9 - with tab, traditional patch
ok 10 - with tab, traditional file creation patch
ok 11 - with backslash, git-style file creation patch
ok 12 - with backslash, traditional patch
ok 13 - with backslash, traditional file creation patch
ok 14 - with quote, git-style file creation patch
not ok 15 - with quote, traditional patch # TODO known breakage
ok 16 - with quote, traditional file creation patch
ok 17 - whitespace-damaged traditional patch
ok 18 - traditional patch with colon in timezone
ok 19 - traditional, whitespace-damaged, colon in timezone
ok 20 - apply handles a diff generated by Subversion
# still have 1 known breakage(s)
# passed all remaining 19 test(s)
1..20
*** t4136-apply-check.sh ***
ok 1 - setup
ok 2 - apply --check exits non-zero with unrecognized input
ok 3 - apply exits non-zero with no-op patch
ok 4 - `apply --recount` allows no-op patch
ok 5 - invalid combination: create and copy
ok 6 - invalid combination: create and rename
# passed all 6 test(s)
1..6
*** t4137-apply-submodule.sh ***
ok 1 - apply_index: added submodule creates empty directory
ok 2 - apply_index: added submodule leaves existing empty directory alone
ok 3 - apply_index: replace tracked file with submodule creates empty directory
ok 4 - apply_index: replace directory with submodule
ok 5 - apply_index: removed submodule leaves submodule directory and its contents in place
ok 6 - apply_index: removed submodule leaves submodule containing a .git directory alone
ok 7 - apply_index: replace submodule with a directory must fail
ok 8 - apply_index: replace submodule containing a .git directory with a directory must fail
not ok 9 - apply_index: replace submodule with a file must fail # TODO known breakage
not ok 10 - apply_index: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - apply_index: modified submodule does not update submodule work tree
ok 12 - apply_index: modified submodule does not update submodule work tree to invalid commit
ok 13 - apply_index: modified submodule does not update submodule work tree from invalid commit
ok 14 - apply_index: added submodule doesn't remove untracked unignored file with same name
ok 15 - apply_3way: added submodule creates empty directory
ok 16 - apply_3way: added submodule leaves existing empty directory alone
ok 17 - apply_3way: replace tracked file with submodule creates empty directory
ok 18 - apply_3way: replace directory with submodule
ok 19 - apply_3way: removed submodule leaves submodule directory and its contents in place
ok 20 - apply_3way: removed submodule leaves submodule containing a .git directory alone
ok 21 - apply_3way: replace submodule with a directory must fail
ok 22 - apply_3way: replace submodule containing a .git directory with a directory must fail
not ok 23 - apply_3way: replace submodule with a file must fail # TODO known breakage
not ok 24 - apply_3way: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 25 - apply_3way: modified submodule does not update submodule work tree
ok 26 - apply_3way: modified submodule does not update submodule work tree to invalid commit
ok 27 - apply_3way: modified submodule does not update submodule work tree from invalid commit
ok 28 - apply_3way: added submodule doesn't remove untracked unignored file with same name
# still have 4 known breakage(s)
# passed all remaining 24 test(s)
1..28
*** t4138-apply-ws-expansion.sh ***
ok 1 - setup
ok 2 - apply with ws expansion (t=$t)
ok 3 - apply with ws expansion (t=$t)
ok 4 - apply with ws expansion (t=$t)
ok 5 - apply with ws expansion (t=$t)
# passed all 5 test(s)
1..5
*** t4139-apply-escape.sh ***
ok 1 - bump git repo one level down
ok 2 - cannot create file containing ..
ok 3 - can create file containing .. with --unsafe-paths
ok 4 - cannot create file containing .. (index)
ok 5 - cannot create file containing .. with --unsafe-paths (index)
ok 6 - cannot delete file containing ..
ok 7 - can delete file containing .. with --unsafe-paths
ok 8 - cannot delete file containing .. (index)
ok 9 - symlink escape via ..
ok 10 - symlink escape via .. (index)
ok 11 - symlink escape via absolute path
ok 12 - symlink escape via absolute path (index)
# passed all 12 test(s)
1..12
*** t4140-apply-ita.sh ***
ok 1 - setup
ok 2 - apply creation patch to ita path (--cached)
ok 3 - apply creation patch to ita path (--index)
ok 4 - apply deletion patch to ita path (--cached)
ok 5 - apply deletion patch to ita path (--index)
# passed all 5 test(s)
1..5
*** t4141-apply-too-large.sh ***
ok 1 # skip git apply rejects patches that are too large (missing EXPENSIVE)
# passed all 1 test(s)
1..1
*** t4150-am.sh ***
ok 1 - setup: messages
ok 2 - setup
ok 3 - am applies patch correctly
ok 4 - am fails if index is dirty
ok 5 - am applies patch e-mail not in a mbox
ok 6 - am applies patch e-mail not in a mbox with CRLF
ok 7 - am applies patch e-mail with preceding whitespace
ok 8 - am applies stgit patch
ok 9 - am --patch-format=stgit applies stgit patch
ok 10 - am applies stgit series
ok 11 - am applies hg patch
ok 12 - am --patch-format=hg applies hg patch
ok 13 - am with applypatch-msg hook
ok 14 - am with failing applypatch-msg hook
ok 15 - am with failing applypatch-msg hook (no verify)
ok 16 - am with pre-applypatch hook
ok 17 - am with failing pre-applypatch hook
ok 18 - am with failing pre-applypatch hook (no verify)
ok 19 - am with post-applypatch hook
ok 20 - am with failing post-applypatch hook
ok 21 - am --scissors cuts the message at the scissors line
ok 22 - am --no-scissors overrides mailinfo.scissors
ok 23 - setup: new author and committer
ok 24 - am changes committer and keeps author
ok 25 - am --signoff adds Signed-off-by: line
ok 26 - am stays in branch
ok 27 - am --signoff does not add Signed-off-by: line if already there
ok 28 - am --signoff adds Signed-off-by: if another author is preset
ok 29 - am --signoff duplicates Signed-off-by: if it is not the last one
ok 30 - am without --keep removes Re: and [PATCH] stuff
ok 31 - am --keep really keeps the subject
ok 32 - am --keep-non-patch really keeps the non-patch part
ok 33 - setup am -3
ok 34 - am -3 falls back to 3-way merge
ok 35 - am -3 -p0 can read --no-prefix patch
ok 36 - am with config am.threeWay falls back to 3-way merge
ok 37 - am with config am.threeWay overridden by --no-3way
ok 38 - am can rename a file
ok 39 - am -3 can rename a file
ok 40 - am -3 can rename a file after falling back to 3-way merge
ok 41 - am -3 -q is quiet
ok 42 - am pauses on conflict
ok 43 - am --show-current-patch
ok 44 - am --show-current-patch=raw
ok 45 - am --show-current-patch=diff
ok 46 - am accepts repeated --show-current-patch
ok 47 - am detects incompatible --show-current-patch
ok 48 - am --skip works
ok 49 - am --abort removes a stray directory
ok 50 - am refuses patches when paused
ok 51 - am --resolved works
ok 52 - am --resolved fails if index has no changes
ok 53 - am --resolved fails if index has unmerged entries
ok 54 - am takes patches from a Pine mailbox
ok 55 - am fails on mail without patch
ok 56 - am fails on empty patch
ok 57 - am works from stdin in subdirectory
ok 58 - am works from file (relative path given) in subdirectory
ok 59 - am works from file (absolute path given) in subdirectory
ok 60 - am --committer-date-is-author-date
ok 61 - am without --committer-date-is-author-date
ok 62 - am --ignore-date
ok 63 - am into an unborn branch
ok 64 - am newline in subject
ok 65 - am -q is quiet
ok 66 - am empty-file does not infloop
ok 67 - am --message-id really adds the message id
ok 68 - am.messageid really adds the message id
ok 69 - am --message-id -s signs off after the message id
ok 70 - am -3 works with rerere
ok 71 - am -s unexpected trailer block
ok 72 - am --patch-format=mboxrd handles mboxrd
ok 73 - am works with multi-line in-body headers
ok 74 - am --quit keeps HEAD where it is
ok 75 - am and .gitattibutes
ok 76 - apply binary blob in partial clone
ok 77 - an empty input file is error regardless of --empty option
ok 78 - invalid when passing the --empty option alone
ok 79 - a message without a patch is an error (default)
ok 80 - a message without a patch is an error where an explicit "--empty=stop" is given
ok 81 - a message without a patch will be skipped when "--empty=drop" is given
ok 82 - record as an empty commit when meeting e-mail message that lacks a patch
ok 83 - skip an empty patch in the middle of an am session
ok 84 - record an empty patch as an empty commit in the middle of an am session
ok 85 - create an non-empty commit when the index IS changed though "--allow-empty" is given
ok 86 - cannot create empty commits when there is a clean index due to merge conflicts
ok 87 - cannot create empty commits when there is unmerged index due to merge conflicts
# passed all 87 test(s)
1..87
*** t4151-am-abort.sh ***
ok 1 - setup
ok 2 - am stops at a patch that does not apply
ok 3 - am --skip continue after failed am
ok 4 - am --abort goes back after failed am
ok 5 - am -3 stops at a patch that does not apply
ok 6 - am -3 --skip continue after failed am -3
ok 7 - am --abort goes back after failed am -3
ok 8 - am -3 --skip removes otherfile-4
ok 9 - am -3 --abort removes otherfile-4
ok 10 - am --abort will keep the local commits intact
ok 11 - am --abort will keep dirty index intact
ok 12 - am -3 stops on conflict on unborn branch
ok 13 - am -3 --skip clears index on unborn branch
ok 14 - am -3 --abort removes otherfile-4 on unborn branch
ok 15 - am -3 --abort on unborn branch removes applied commits
ok 16 - am --abort on unborn branch will keep local commits intact
ok 17 - am --skip leaves index stat info alone
ok 18 - am --abort leaves index stat info alone
ok 19 - git am --abort return failed exit status when it fails
ok 20 - git am --abort cleans relevant files
# passed all 20 test(s)
1..20
*** t4152-am-subjects.sh ***
ok 1 - setup baseline commit
ok 2 - create patches with short subject
ok 3 - create patches with long subject
ok 4 - create patches with multiline subject
ok 5 - short subject preserved (format-patch | am)
ok 6 - short subject preserved (format-patch -k | am)
ok 7 - short subject preserved (format-patch -k | am -k)
ok 8 - long subject preserved (format-patch | am)
ok 9 - long subject preserved (format-patch -k | am)
ok 10 - long subject preserved (format-patch -k | am -k)
ok 11 - multiline subject unwrapped (format-patch | am)
ok 12 - multiline subject unwrapped (format-patch -k | am)
ok 13 - multiline subject preserved (format-patch -k | am -k)
# passed all 13 test(s)
1..13
*** t4153-am-resume-override-opts.sh ***
ok 1 - setup
ok 2 - --3way overrides --no-3way
ok 3 - --no-quiet overrides --quiet
ok 4 - --signoff overrides --no-signoff
ok 5 - --reject overrides --no-reject
# passed all 5 test(s)
1..5
*** t4200-rerere.sh ***
ok 1 - setup
ok 2 - nothing recorded without rerere
ok 3 - activate rerere, old style (conflicting merge)
ok 4 - rerere.enabled works, too
ok 5 - set up rr-cache
ok 6 - rr-cache looks sane
ok 7 - rerere diff
ok 8 - rerere status
ok 9 - first postimage wins
ok 10 - rerere updates postimage timestamp
ok 11 - rerere clear
ok 12 - leftover directory
ok 13 - missing preimage
ok 14 - set up for garbage collection tests
ok 15 - gc preserves young or recently used records
ok 16 - old records rest in peace
ok 17 - rerere gc with custom expiry (5, 0)
ok 18 - rerere gc with custom expiry (5.days.ago, now)
ok 19 - setup: file2 added differently in two branches
ok 20 - resolution was recorded properly
ok 21 - rerere.autoupdate
ok 22 - merge --rerere-autoupdate
ok 23 - merge --no-rerere-autoupdate
ok 24 - set up an unresolved merge
ok 25 - explicit rerere
ok 26 - explicit rerere with autoupdate
ok 27 - explicit rerere --rerere-autoupdate overrides
ok 28 - rerere --no-no-rerere-autoupdate
ok 29 - rerere -h
ok 30 - multiple identical conflicts
ok 31 - rerere with unexpected conflict markers does not crash
ok 32 - rerere with inner conflict markers
ok 33 - setup simple stage 1 handling
ok 34 - test simple stage 1 handling
ok 35 - rerere does not crash with missing preimage
ok 36 - rerere does not crash with unmatched conflict marker
# passed all 36 test(s)
1..36
*** t4201-shortlog.sh ***
ok 1 - setup
ok 2 - default output format
ok 3 - pretty format
ok 4 - pretty format (with --date)
ok 5 - --abbrev
ok 6 - output from user-defined format is re-wrapped
ok 7 - shortlog wrapping
ok 8 - shortlog from non-git directory
ok 9 - shortlog can read --format=raw output
ok 10 - shortlog from non-git directory refuses extra arguments
ok 11 - shortlog should add newline when input line matches wraplen
ok 12 - shortlog encoding
ok 13 - shortlog with revision pseudo options
ok 14 - shortlog with --output=<file>
ok 15 - shortlog --committer (internal)
ok 16 - shortlog --committer (external)
ok 17 - --group=committer is the same as --committer
ok 18 - shortlog --group=trailer:signed-off-by
ok 19 - shortlog --group=format
ok 20 - shortlog --group=<format> DWIM
ok 21 - shortlog bogus --group
ok 22 - trailer idents are split
ok 23 - trailer idents are mailmapped
ok 24 - shortlog de-duplicates trailers in a single commit
ok 25 - shortlog de-duplicates trailers in a single commit (folded/unfolded values)
ok 26 - shortlog can match multiple groups
ok 27 - shortlog can match multiple format groups
ok 28 - set up option selection tests
ok 29 - --no-group resets group list to author
ok 30 - --no-group resets trailer list
ok 31 - stdin with multiple groups reports error
# passed all 31 test(s)
1..31
*** t4202-log.sh ***
ok 1 - setup
ok 2 - pretty
ok 3 - pretty (tformat)
ok 4 - pretty (shortcut)
ok 5 - format
ok 6 - format %w(11,1,2)
ok 7 - format %w(,1,2)
ok 8 - oneline
ok 9 - diff-filter=A
ok 10 - diff-filter=M
ok 11 - diff-filter=D
ok 12 - diff-filter=R
ok 13 - multiple --diff-filter bits
ok 14 - diff-filter=C
ok 15 - git log --follow
ok 16 - git config log.follow works like --follow
ok 17 - git config log.follow does not die with multiple paths
ok 18 - git config log.follow does not die with no paths
ok 19 - git log --follow rejects unsupported pathspec magic
ok 20 - log.follow disabled with unsupported pathspec magic
ok 21 - git config log.follow is overridden by --no-follow
ok 22 - git log --no-walk <commits> sorts by commit time
ok 23 - git log --no-walk=sorted <commits> sorts by commit time
ok 24 - git log --line-prefix="=== " --no-walk <commits> sorts by commit time
ok 25 - git log --no-walk=unsorted <commits> leaves list of commits as given
ok 26 - git show <commits> leaves list of commits as given
ok 27 - setup case sensitivity tests
ok 28 - log --grep
ok 29 - log --invert-grep without --grep is a NOOP
ok 30 - log --all-match without --grep is a NOOP
ok 31 - log --invert-grep --grep
ok 32 - log --invert-grep --grep -i
ok 33 - log --grep option parsing
ok 34 - log -i --grep
ok 35 - log --grep -i
ok 36 - log -F -E --grep=<ere> uses ere
ok 37 - log -F -E --perl-regexp --grep=<pcre> uses PCRE
ok 38 - log with grep.patternType configuration
ok 39 - log with grep.patternType configuration and command line
ok 40 - log with various grep.patternType configurations & command-lines
ok 41 - show: understands grep.patternType, like 'log'
ok 42 - whatchanged: understands grep.patternType, like 'log'
ok 43 - reflog: understands grep.patternType, like 'log'
ok 44 - format-patch: understands grep.patternType, like 'log'
ok 45 - log --author
ok 46 - log --committer
ok 47 - log -i --grep with color
ok 48 - -c color.grep.selected log --grep
ok 49 - -c color.grep.matchSelected log --grep
ok 50 - simple log --graph
ok 51 - simple log --graph --line-prefix="123 "
ok 52 - set up merge history
ok 53 - log --graph with merge
ok 54 - log --graph --line-prefix="| | | " with merge
ok 55 - log --graph with merge with log.graphColors
ok 56 - log --raw --graph -m with merge
ok 57 - diff-tree --graph
ok 58 - log --graph with full output
ok 59 - set up more tangled history
ok 60 - log --graph with merge
ok 61 - log.decorate configuration
ok 62 - parse log.excludeDecoration with no value
ok 63 - decorate-refs with glob
ok 64 - decorate-refs without globs
ok 65 - multiple decorate-refs
ok 66 - decorate-refs-exclude with glob
ok 67 - decorate-refs-exclude without globs
ok 68 - multiple decorate-refs-exclude
ok 69 - decorate-refs and decorate-refs-exclude
ok 70 - deocrate-refs and log.excludeDecoration
ok 71 - decorate-refs-exclude and simplify-by-decoration
ok 72 - decorate-refs with implied decorate from format
ok 73 - implied decorate does not override option
ok 74 - decorate-refs and simplify-by-decoration without output
ok 75 - decorate-refs-exclude HEAD
ok 76 - decorate-refs focus from default
ok 77 - --clear-decorations overrides defaults
ok 78 - --clear-decorations clears previous exclusions
ok 79 - log.decorate config parsing
ok 80 - log output on a TTY
ok 81 - reflog is expected format
ok 82 - whatchanged is expected format
ok 83 - log.abbrevCommit configuration
ok 84 - show added path under "--follow -M"
ok 85 - git log -c --follow
ok 86 - log --graph with diff and stats
ok 87 - log --line-prefix="*** " --graph with diff and stats
ok 88 - log --graph with --name-status
ok 89 - log --graph with --name-only
ok 90 - --no-graph countermands --graph
ok 91 - --graph countermands --no-graph
ok 92 - --no-graph does not unset --topo-order
ok 93 - --no-graph does not unset --parents
ok 94 - --reverse and --graph conflict
ok 95 - --reverse --graph --no-graph works
ok 96 - --show-linear-break and --graph conflict
ok 97 - --show-linear-break --graph --no-graph works
ok 98 - --no-walk and --graph conflict
ok 99 - --no-walk --graph --no-graph works
ok 100 - --walk-reflogs and --graph conflict
ok 101 - --walk-reflogs --graph --no-graph works
ok 102 - dotdot is a parent directory
ok 103 # skip setup signed branch (missing GPG)
ok 104 # skip setup signed branch with subkey (missing GPG)
ok 105 # skip setup signed branch x509 (missing GPGSM)
ok 106 - setup sshkey signed branch
ok 107 - create signed commits with keys having defined lifetimes
ok 108 # skip log x509 fingerprint (missing GPGSM)
ok 109 # skip log OpenPGP fingerprint (missing GPGSM)
ok 110 - log ssh key fingerprint
ok 111 # skip log --graph --show-signature (missing GPG)
ok 112 # skip log --graph --show-signature x509 (missing GPGSM)
ok 113 - log --graph --show-signature ssh
ok 114 - log shows failure on expired signature key
ok 115 - log shows failure on not yet valid signature key
ok 116 - log show success with commit date and key validity matching
ok 117 - log shows failure with commit date outside of key validity
ok 118 # skip log --graph --show-signature for merged tag (missing GPG)
ok 119 # skip log --graph --show-signature for merged tag in shallow clone (missing GPG)
ok 120 # skip log --graph --show-signature for merged tag with missing key (missing GPG)
ok 121 # skip log --graph --show-signature for merged tag with bad signature (missing GPG)
ok 122 # skip log --show-signature for merged tag with GPG failure (missing GPG)
ok 123 # skip log --graph --show-signature for merged tag x509 (missing GPGSM)
ok 124 # skip log --graph --show-signature for merged tag x509 missing key (missing GPGSM)
ok 125 # skip log --graph --show-signature for merged tag x509 bad signature (missing GPGSM)
ok 126 # skip --no-show-signature overrides --show-signature (missing GPG)
ok 127 # skip log.showsignature=true behaves like --show-signature (missing GPG)
ok 128 # skip --no-show-signature overrides log.showsignature=true (missing GPG)
ok 129 # skip --show-signature overrides log.showsignature=false (missing GPG)
ok 130 - log --graph --no-walk is forbidden
ok 131 - log on empty repo fails
ok 132 - log does not default to HEAD when rev input is given
ok 133 - do not default to HEAD with ignored object on cmdline
ok 134 - do not default to HEAD with ignored object on stdin
ok 135 - set up --source tests
ok 136 - log --source paints branch names
ok 137 - log --source paints tag names
ok 138 - log --source paints symmetric ranges
ok 139 - --exclude-promisor-objects does not BUG-crash
ok 140 - log --decorate includes all levels of tag annotated tags
ok 141 - log --decorate does not include things outside filter
ok 142 - log --end-of-options
ok 143 - set up commits with different authors
ok 144 - log --invert-grep --grep --author
# passed all 144 test(s)
1..144
*** t4203-mailmap.sh ***
ok 1 - setup commits and contacts file
ok 2 - check-mailmap no arguments
ok 3 - check-mailmap arguments
ok 4 - check-mailmap --stdin
ok 5 - check-mailmap --stdin arguments: no mapping
ok 6 - check-mailmap --stdin arguments: mapping
ok 7 - check-mailmap bogus contact
ok 8 - check-mailmap bogus contact --stdin
ok 9 - No mailmap
ok 10 - setup default .mailmap
ok 11 - test default .mailmap
ok 12 - mailmap.file set
ok 13 - mailmap.file override
ok 14 - mailmap.file non-existent
ok 15 - name entry after email entry
ok 16 - name entry after email entry, case-insensitive
ok 17 - No mailmap files, but configured
ok 18 - setup mailmap blob tests
ok 19 - mailmap.blob set
ok 20 - mailmap.blob overrides .mailmap
ok 21 - mailmap.file overrides mailmap.blob
ok 22 - mailmap.file can be missing
ok 23 - mailmap.blob can be missing
ok 24 - mailmap.blob might be the wrong type
ok 25 - mailmap.blob defaults to off in non-bare repo
ok 26 - mailmap.blob defaults to HEAD:.mailmap in bare repo
ok 27 - mailmap.blob can handle blobs without trailing newline
ok 28 - single-character name
ok 29 - preserve canonical email case
ok 30 - gitmailmap(5) example output: setup
ok 31 - gitmailmap(5) example output: example #1
ok 32 - gitmailmap(5) example output: example #2
ok 33 - gitmailmap(5) example output: example #3
ok 34 - Shortlog output (complex mapping)
ok 35 - Log output (complex mapping)
ok 36 - Log output (local-part email address)
ok 37 - Log output with --use-mailmap
ok 38 - Log output with log.mailmap
ok 39 - log.mailmap=false disables mailmap
ok 40 - --no-use-mailmap disables mailmap
ok 41 - Grep author with --use-mailmap
ok 42 - Grep author with log.mailmap
ok 43 - log.mailmap is true by default these days
ok 44 - Only grep replaced author with --use-mailmap
ok 45 - Blame --porcelain output (complex mapping)
ok 46 - Blame output (complex mapping)
ok 47 - commit --author honors mailmap
ok 48 - comment syntax: setup
ok 49 - whitespace syntax: setup
ok 50 - empty syntax: setup
ok 51 - set up mailmap location tests
ok 52 - bare repo with --work-tree finds mailmap at top-level
ok 53 - bare repo does not look in current directory
ok 54 - non-git shortlog respects mailmap in current dir
ok 55 - shortlog on stdin respects mailmap from repo
ok 56 - find top-level mailmap from subdir
ok 57 - set up symlink tests
ok 58 - symlinks respected in mailmap.file
ok 59 - symlinks respected in non-repo shortlog
ok 60 - symlinks not respected in-tree
ok 61 - prepare for cat-file --mailmap
ok 62 - --no-use-mailmap disables mailmap in cat-file
ok 63 - --use-mailmap enables mailmap in cat-file
ok 64 - --no-mailmap disables mailmap in cat-file for annotated tag objects
ok 65 - --mailmap enables mailmap in cat-file for annotated tag objects
ok 66 - git cat-file -s returns correct size with --use-mailmap
ok 67 - git cat-file -s returns correct size with --use-mailmap for tag objects
ok 68 - git cat-file --batch-check returns correct size with --use-mailmap
ok 69 - git cat-file --batch-command returns correct size with --use-mailmap
# passed all 69 test(s)
1..69
*** t4204-patch-id.sh ***
ok 1 - setup
ok 2 - patch-id output is well-formed
ok 3 - patch-id detects equality
ok 4 - patch-id detects inequality
ok 5 - patch-id detects equality binary
ok 6 - patch-id detects inequality binary
ok 7 - patch-id supports git-format-patch output
ok 8 - whitespace is irrelevant in footer
ok 9 - file order is irrelevant with --stable
ok 10 - file order is relevant with --unstable
ok 11 - whitespace is relevant with --verbatim
ok 12 - whitespace is irrelevant without --verbatim
ok 13 - default is unstable
ok 14 - patchid.stable = true is stable
ok 15 - patchid.stable = false is unstable
ok 16 - patchid.verbatim = true is correct and stable
ok 17 - patchid.verbatim = false is unstable
ok 18 - --unstable overrides patchid.stable = true
ok 19 - --stable overrides patchid.stable = false
ok 20 - --verbatim overrides patchid.stable = false
ok 21 - patch-id supports git-format-patch MIME output
ok 22 - patch-id respects config from subdir
ok 23 - patch-id handles no-nl-at-eof markers
ok 24 - patch-id handles diffs with one line of before/after
# passed all 24 test(s)
1..24
*** t4205-log-pretty-formats.sh ***
ok 1 - set up basic repos
ok 2 - alias builtin format
ok 3 - alias masking builtin format
ok 4 - alias user-defined format
ok 5 - alias user-defined format is matched case-insensitively
ok 6 - alias user-defined tformat with %s (ISO8859-1 encoding)
ok 7 - alias user-defined tformat with %s (utf-8 encoding)
ok 8 - alias user-defined tformat
ok 9 - alias non-existent format
ok 10 - alias of an alias
ok 11 - alias masking an alias
ok 12 - alias loop
ok 13 - NUL separation
ok 14 - NUL termination
ok 15 - NUL separation with --stat
not ok 16 - NUL termination with --stat # TODO known breakage
ok 17 - NUL termination with --reflog --pretty=short
ok 18 - NUL termination with --reflog --pretty=medium
ok 19 - NUL termination with --reflog --pretty=full
ok 20 - NUL termination with --reflog --pretty=fuller
ok 21 - NUL termination with --reflog --pretty=email
ok 22 - NUL termination with --reflog --pretty=raw
ok 23 - NUL termination with --reflog --pretty=oneline
ok 24 - setup more commits
ok 25 - left alignment formatting
ok 26 - left alignment formatting. i18n.logOutputEncoding
ok 27 - left alignment formatting at the nth column
ok 28 - left alignment formatting at the nth column
ok 29 - left alignment formatting at the nth column. i18n.logOutputEncoding
ok 30 - left alignment formatting with no padding
ok 31 - left alignment formatting with no padding. i18n.logOutputEncoding
ok 32 - left alignment formatting with trunc
ok 33 - left alignment formatting with trunc. i18n.logOutputEncoding
ok 34 - left alignment formatting with ltrunc
ok 35 - left alignment formatting with ltrunc. i18n.logOutputEncoding
ok 36 - left alignment formatting with mtrunc
ok 37 - left alignment formatting with mtrunc. i18n.logOutputEncoding
ok 38 - right alignment formatting
ok 39 - right alignment formatting. i18n.logOutputEncoding
ok 40 - right alignment formatting at the nth column
ok 41 - right alignment formatting at the nth column
ok 42 - right alignment formatting at the nth column. i18n.logOutputEncoding
ok 43 - right alignment formatting at the nth column with --graph. i18n.logOutputEncoding
ok 44 - right alignment formatting with no padding
ok 45 - right alignment formatting with no padding and with --graph
ok 46 - right alignment formatting with no padding. i18n.logOutputEncoding
ok 47 - center alignment formatting
ok 48 - center alignment formatting. i18n.logOutputEncoding
ok 49 - center alignment formatting at the nth column
ok 50 - center alignment formatting at the nth column
ok 51 - center alignment formatting at the nth column. i18n.logOutputEncoding
ok 52 - center alignment formatting with no padding
ok 53 - center alignment formatting with no padding. i18n.logOutputEncoding
ok 54 - left/right alignment formatting with stealing
ok 55 - left/right alignment formatting with stealing. i18n.logOutputEncoding
ok 56 - strbuf_utf8_replace() not producing NUL
ok 57 - --date=iso-strict %ad%cd is the same as %aI%cI
ok 58 - --date=short %ad%cd is the same as %as%cs
ok 59 - --date=human %ad%cd is the same as %ah%ch
ok 60 - set up log decoration tests
ok 61 - log decoration properly follows tag chain
ok 62 - clean log decoration
ok 63 - pretty format %decorate
ok 64 - set up trailer tests
ok 65 - pretty format %(trailers) shows trailers
ok 66 - pretty format %(trailers:) enables no options
ok 67 - %(trailers:only) shows only "key: value" trailers
ok 68 - %(trailers:only=yes) shows only "key: value" trailers
ok 69 - %(trailers:only=no) shows all trailers
ok 70 - %(trailers:only=no,only=true) shows only "key: value" trailers
ok 71 - %(trailers:unfold) unfolds trailers
ok 72 - :only and :unfold work together
ok 73 - pretty format %(trailers:key=foo) shows that trailer
ok 74 - pretty format %(trailers:key=foo) is case insensitive
ok 75 - pretty format %(trailers:key=foo:) trailing colon also works
ok 76 - pretty format %(trailers:key=foo) multiple keys
ok 77 - %(trailers:key=nonexistent) becomes empty
ok 78 - %(trailers:key=foo) handles multiple lines even if folded
ok 79 - %(trailers:key=foo,unfold) properly unfolds
ok 80 - pretty format %(trailers:key=foo,only=no) also includes nontrailer lines
ok 81 - %(trailers:key) without value is error
ok 82 - %(trailers:keyonly) shows only keys
ok 83 - %(trailers:key=foo,keyonly) shows only key
ok 84 - %(trailers:key=foo,valueonly) shows only value
ok 85 - %(trailers:valueonly) shows only values
ok 86 - %(trailers:key=foo,keyonly,valueonly) shows nothing
ok 87 - pretty format %(trailers:separator) changes separator
ok 88 - pretty format %(trailers:separator=X,unfold) changes separator
ok 89 - pretty format %(trailers:key_value_separator) changes key-value separator
ok 90 - pretty format %(trailers:key_value_separator,unfold) changes key-value separator
ok 91 - pretty format %(trailers:separator,key_value_separator) changes both separators
ok 92 - pretty format %(trailers) combining separator/key/keyonly/valueonly
ok 93 - trailer parsing not fooled by --- line
ok 94 - set up %S tests
ok 95 - log --format=%S paints branch names
ok 96 - log --format=%S paints tag names
ok 97 - log --format=%S paints symmetric ranges
ok 98 - %S in git log --format works with other placeholders (part 1)
ok 99 - %S in git log --format works with other placeholders (part 2)
ok 100 - setup more commits for %S with --bisect
ok 101 - %S with --bisect labels commits with refs/bisect/bad ref
ok 102 - log --pretty=reference
ok 103 - log --pretty=reference with log.date is overridden by short date
ok 104 - log --pretty=reference with explicit date overrides short date
ok 105 - log --pretty=reference is never unabbreviated
ok 106 - log --pretty=reference is never decorated
ok 107 - log --pretty=reference does not output reflog info
ok 108 - log --pretty=reference is colored appropriately
ok 109 - %(describe) vs git describe
ok 110 - %(describe:match=...) vs git describe --match ...
ok 111 - %(describe:exclude=...) vs git describe --exclude ...
ok 112 - %(describe:tags) vs git describe --tags
ok 113 - %(describe:abbrev=...) vs git describe --abbrev=...
ok 114 - log --pretty with space stealing
ok 115 - log --pretty with invalid padding format
ok 116 - log --pretty with magical wrapping directives
ok 117 - log --pretty with overflowing wrapping directive
ok 118 - log --pretty with overflowing padding directive
ok 119 - log --pretty with padding and preceding control chars
ok 120 - log --pretty truncation with control chars
ok 121 # skip log --pretty with huge commit message (missing EXPENSIVE of EXPENSIVE,SIZE_T_IS_64BIT)
ok 122 # skip set up huge commit (missing EXPENSIVE of EXPENSIVE,SIZE_T_IS_64BIT)
ok 123 # skip log --pretty with huge commit message (missing EXPENSIVE of EXPENSIVE,SIZE_T_IS_64BIT)
ok 124 # skip log --pretty with huge commit message does not cause allocation failure (missing EXPENSIVE of EXPENSIVE,SIZE_T_IS_64BIT)
not ok 125 - wide and decomposed characters column counting # TODO known breakage
# still have 2 known breakage(s)
# passed all remaining 123 test(s)
1..125
*** t4206-log-follow-harder-copies.sh ***
ok 1 - add a file path0 and commit.
ok 2 - Change path0.
ok 3 - copy path0 to path1.
ok 4 - find the copy path0 -> path1 harder
ok 5 - validate the output.
# passed all 5 test(s)
1..5
*** t4207-log-decoration-colors.sh ***
ok 1 - setup
ok 2 - commit decorations colored correctly
ok 3 - test coloring with replace-objects
ok 4 - test coloring with grafted commit
# passed all 4 test(s)
1..4
*** t4208-log-magic-pathspec.sh ***
ok 1 - setup
ok 2 - "git log :/" should not be ambiguous
ok 3 - "git log :/a" should be ambiguous (applied both rev and worktree)
ok 4 - "git log :/a -- " should not be ambiguous
ok 5 - "git log :/detached -- " should find a commit only in HEAD
ok 6 - "git log :/detached -- " should not find an orphaned commit
ok 7 - "git log :/detached -- " should find HEAD only of own worktree
ok 8 - "git log -- :/a" should not be ambiguous
ok 9 - "git log :/any/path/" should not segfault
ok 10 - "git log :/in" should not be ambiguous
ok 11 - "git log :" should be ambiguous
ok 12 - git log -- :
ok 13 - git log HEAD -- :/
ok 14 - "git log :^sub" is not ambiguous
ok 15 - "git log :^does-not-exist" does not match anything
ok 16 - "git log :!" behaves the same as :^
ok 17 - "git log :(exclude)sub" is not ambiguous
ok 18 - "git log :(exclude)sub --" must resolve as an object
ok 19 - "git log :(unknown-magic) complains of bogus magic
ok 20 - command line pathspec parsing for "git log"
ok 21 - tree_entry_interesting does not match past submodule boundaries
# passed all 21 test(s)
1..21
*** t4209-log-pickaxe.sh ***
ok 1 - setup
ok 2 - usage
ok 3 - usage: --pickaxe-regex
ok 4 - usage: --no-pickaxe-regex
ok 5 - log --grep (match)
ok 6 - log --grep (nomatch)
ok 7 - log --grep --regexp-ignore-case (match)
ok 8 - log --grep -i (match)
ok 9 - log --grep --regexp-ignore-case (nomatch)
ok 10 - log --grep -i (nomatch)
ok 11 - log --author (match)
ok 12 - log --author (nomatch)
ok 13 - log --author --regexp-ignore-case (match)
ok 14 - log --author -i (match)
ok 15 - log --author --regexp-ignore-case (nomatch)
ok 16 - log --author -i (nomatch)
ok 17 - log -G (nomatch)
ok 18 - log -G (match)
ok 19 - log -G --regexp-ignore-case (nomatch)
ok 20 - log -G -i (nomatch)
ok 21 - log -G --regexp-ignore-case (match)
ok 22 - log -G -i (match)
ok 23 - log -G --textconv (missing textconv tool)
ok 24 - log -G --no-textconv (missing textconv tool)
ok 25 - log -S (nomatch)
ok 26 - log -S (match)
ok 27 - log -S --regexp-ignore-case (match)
ok 28 - log -S -i (match)
ok 29 - log -S --regexp-ignore-case (nomatch)
ok 30 - log -S -i (nomatch)
ok 31 - log -S --pickaxe-regex (nomatch)
ok 32 - log -S --pickaxe-regex (match)
ok 33 - log -S --pickaxe-regex --regexp-ignore-case (match)
ok 34 - log -S --pickaxe-regex -i (match)
ok 35 - log -S --pickaxe-regex --regexp-ignore-case (nomatch)
ok 36 - log -S --pickaxe-regex -i (nomatch)
ok 37 - log -S --textconv (missing textconv tool)
ok 38 - log -S --no-textconv (missing textconv tool)
ok 39 - setup log -[GS] plain & regex
ok 40 - log -G trims diff new/old [-+]
ok 41 - log -S<pat> is not a regex, but -S<pat> --pickaxe-regex is
ok 42 - setup log -[GS] binary & --text
ok 43 - log -G ignores binary files
ok 44 - log -G looks into binary files with -a
ok 45 - log -G looks into binary files with textconv filter
ok 46 - log -S looks into binary files
ok 47 - log -S --pickaxe-regex looks into binary files
# passed all 47 test(s)
1..47
*** t4210-log-i18n.sh ***
# lib-gettext: Found 'is_IS.UTF-8' as an is_IS UTF-8 locale
# lib-gettext: Found 'is_IS.ISO8859-1' as an is_IS ISO-8859-1 locale
ok 1 - create commits in different encodings
ok 2 - log --grep searches in log output encoding (utf8)
ok 3 - log --grep searches in log output encoding (latin1)
ok 4 - log --grep does not find non-reencoded values (utf8)
ok 5 - log --grep does not find non-reencoded values (latin1)
ok 6 - config grep.patternType=fixed
ok 7 - log --grep does not find non-reencoded values (latin1 + locale)
ok 8 - log --grep searches in log output encoding (latin1 + locale)
ok 9 - log --grep does not die on invalid UTF-8 value (latin1 + locale + invalid needle)
ok 10 - config grep.patternType=basic
ok 11 - log --grep does not find non-reencoded values (latin1 + locale)
ok 12 - config grep.patternType=extended
ok 13 - log --grep does not find non-reencoded values (latin1 + locale)
ok 14 - config grep.patternType=perl
ok 15 - log --grep does not find non-reencoded values (latin1 + locale)
ok 16 - log --grep searches in log output encoding (latin1 + locale)
ok 17 - log --grep does not die on invalid UTF-8 value (latin1 + locale + invalid needle)
# passed all 17 test(s)
1..17
*** t4211-line-log.sh ***
ok 1 - setup (import history)
ok 2 - basic command line parsing
ok 3 - -L 4,12:a.c simple
ok 4 - -L 4,+9:a.c simple
ok 5 - -L '/long f/,/^}/:a.c' simple
ok 6 - -L :f:a.c simple
ok 7 - -L '/main/,/^}/:a.c' simple
ok 8 - -L :main:a.c simple
ok 9 - -L 1,+4:a.c simple
ok 10 - -L 20:a.c simple
ok 11 - -L '/long f/',/^}/:a.c -L /main/,/^}/:a.c simple
ok 12 - -L 24,+1:a.c simple
ok 13 - -M -L '/long f/,/^}/:b.c' move-support
ok 14 - -M -L ':f:b.c' parallel-change
ok 15 - -L 4,12:a.c -L :main:a.c simple
ok 16 - -L 4,18:a.c -L ^:main:a.c simple
ok 17 - -L :main:a.c -L 4,18:a.c simple
ok 18 - -L 4:a.c -L 8,12:a.c simple
ok 19 - -L 8,12:a.c -L 4:a.c simple
ok 20 - invalid args: -L
ok 21 - invalid args: -L b.c
ok 22 - invalid args: -L 1:
ok 23 - invalid args: -L 1:nonexistent
ok 24 - invalid args: -L 1:simple
ok 25 - invalid args: -L '/foo:b.c'
ok 26 - invalid args: -L 1000:b.c
ok 27 - invalid args: -L :b.c
ok 28 - invalid args: -L :foo:b.c
ok 29 - -L X (X == nlines)
ok 30 - -L X (X == nlines + 1)
ok 31 - -L X (X == nlines + 2)
ok 32 - -L ,Y (Y == nlines)
ok 33 - -L ,Y (Y == nlines + 1)
ok 34 - -L ,Y (Y == nlines + 2)
ok 35 - -L with --first-parent and a merge
ok 36 - -L with --output
ok 37 - range_set_union
ok 38 - -s shows only line-log commits
ok 39 - -p shows the default patch output
ok 40 - --raw is forbidden
ok 41 - setup for checking fancy rename following
ok 42 - fancy rename following #1
ok 43 - fancy rename following #2
ok 44 - setup for checking line-log and parent oids
ok 45 - parent oids without parent rewriting
ok 46 - parent oids with parent rewriting
ok 47 - line-log with --before
ok 48 - setup tests for zero-width regular expressions
ok 49 - zero-width regex $ matches any function name
ok 50 - zero-width regex ^ matches any function name
ok 51 - zero-width regex .* matches any function name
# passed all 51 test(s)
1..51
*** t4212-log-corrupt.sh ***
ok 1 - setup
ok 2 - fsck notices broken commit
ok 3 - git log with broken author email
ok 4 - git log --format with broken author email
ok 5 - --until handles broken email
ok 6 - unparsable dates produce sentinel value
ok 7 - unparsable dates produce sentinel value (%ad)
ok 8 - date parser recognizes integer overflow
ok 9 - date parser recognizes time_t overflow
ok 10 - absurdly far-in-future date
ok 11 - create commits with whitespace committer dates
ok 12 - --until treats whitespace date as sentinel
ok 13 - pretty-printer handles whitespace date
# passed all 13 test(s)
1..13
*** t4213-log-tabexpand.sh ***
ok 1 - setup
ok 2 - expand/no-expand
ok 3 - expand/no-expand for --pretty
ok 4 - expand/no-expand for --pretty=short
ok 5 - expand/no-expand for --pretty=medium
ok 6 - expand/no-expand for --pretty=full
ok 7 - expand/no-expand for --pretty=fuller
ok 8 - expand/no-expand for --pretty=raw
ok 9 - expand/no-expand for --pretty=email
# passed all 9 test(s)
1..9
*** t4214-log-graph-octopus.sh ***
ok 1 - set up merge history
ok 2 - log --graph with tricky octopus merge, no color
ok 3 - log --graph with tricky octopus merge with colors
ok 4 - log --graph with normal octopus merge, no color
ok 5 - log --graph with normal octopus merge with colors
ok 6 - log --graph with normal octopus merge and child, no color
ok 7 - log --graph with normal octopus and child merge with colors
ok 8 - log --graph with tricky octopus merge and its child, no color
ok 9 - log --graph with tricky octopus merge and its child with colors
ok 10 - log --graph with crossover in octopus merge, no color
ok 11 - log --graph with crossover in octopus merge with colors
ok 12 - log --graph with crossover in octopus merge and its child, no color
ok 13 - log --graph with crossover in octopus merge and its child with colors
ok 14 - log --graph with unrelated commit and octopus tip, no color
ok 15 - log --graph with unrelated commit and octopus tip with colors
ok 16 - log --graph with unrelated commit and octopus child, no color
ok 17 - log --graph with unrelated commit and octopus child with colors
# passed all 17 test(s)
1..17
*** t4215-log-skewed-merges.sh ***
ok 1 - log --graph with merge fusing with its left and right neighbors
ok 2 - log --graph with left-skewed merge
ok 3 - log --graph with nested left-skewed merge
ok 4 - log --graph with nested left-skewed merge following normal merge
ok 5 - log --graph with nested right-skewed merge following left-skewed merge
ok 6 - log --graph with right-skewed merge following a left-skewed one
ok 7 - log --graph with octopus merge with column joining its penultimate parent
ok 8 - log --graph with multiple tips
ok 9 - log --graph with multiple tips and colors
ok 10 - log --graph with multiple tips
# passed all 10 test(s)
1..10
*** t4216-log-bloom.sh ***
ok 1 - setup test - repo, commits, commit graph, log outputs
ok 2 - commit-graph write wrote out the bloom chunks
ok 3 - git log option:  for path: A
ok 4 - git log option: --all for path: A
ok 5 - git log option: --full-history for path: A
ok 6 - git log option: --full-history --simplify-merges for path: A
ok 7 - git log option: --simplify-merges for path: A
ok 8 - git log option: --simplify-by-decoration for path: A
ok 9 - git log option: --follow for path: A
ok 10 - git log option: --first-parent for path: A
ok 11 - git log option: --topo-order for path: A
ok 12 - git log option: --date-order for path: A
ok 13 - git log option: --author-date-order for path: A
ok 14 - git log option: --ancestry-path side..main for path: A
ok 15 - git log option:  for path: A/B
ok 16 - git log option: --all for path: A/B
ok 17 - git log option: --full-history for path: A/B
ok 18 - git log option: --full-history --simplify-merges for path: A/B
ok 19 - git log option: --simplify-merges for path: A/B
ok 20 - git log option: --simplify-by-decoration for path: A/B
ok 21 - git log option: --follow for path: A/B
ok 22 - git log option: --first-parent for path: A/B
ok 23 - git log option: --topo-order for path: A/B
ok 24 - git log option: --date-order for path: A/B
ok 25 - git log option: --author-date-order for path: A/B
ok 26 - git log option: --ancestry-path side..main for path: A/B
ok 27 - git log option:  for path: A/B/C
ok 28 - git log option: --all for path: A/B/C
ok 29 - git log option: --full-history for path: A/B/C
ok 30 - git log option: --full-history --simplify-merges for path: A/B/C
ok 31 - git log option: --simplify-merges for path: A/B/C
ok 32 - git log option: --simplify-by-decoration for path: A/B/C
ok 33 - git log option: --follow for path: A/B/C
ok 34 - git log option: --first-parent for path: A/B/C
ok 35 - git log option: --topo-order for path: A/B/C
ok 36 - git log option: --date-order for path: A/B/C
ok 37 - git log option: --author-date-order for path: A/B/C
ok 38 - git log option: --ancestry-path side..main for path: A/B/C
ok 39 - git log option:  for path: A/file1
ok 40 - git log option: --all for path: A/file1
ok 41 - git log option: --full-history for path: A/file1
ok 42 - git log option: --full-history --simplify-merges for path: A/file1
ok 43 - git log option: --simplify-merges for path: A/file1
ok 44 - git log option: --simplify-by-decoration for path: A/file1
ok 45 - git log option: --follow for path: A/file1
ok 46 - git log option: --first-parent for path: A/file1
ok 47 - git log option: --topo-order for path: A/file1
ok 48 - git log option: --date-order for path: A/file1
ok 49 - git log option: --author-date-order for path: A/file1
ok 50 - git log option: --ancestry-path side..main for path: A/file1
ok 51 - git log option:  for path: A/B/file2
ok 52 - git log option: --all for path: A/B/file2
ok 53 - git log option: --full-history for path: A/B/file2
ok 54 - git log option: --full-history --simplify-merges for path: A/B/file2
ok 55 - git log option: --simplify-merges for path: A/B/file2
ok 56 - git log option: --simplify-by-decoration for path: A/B/file2
ok 57 - git log option: --follow for path: A/B/file2
ok 58 - git log option: --first-parent for path: A/B/file2
ok 59 - git log option: --topo-order for path: A/B/file2
ok 60 - git log option: --date-order for path: A/B/file2
ok 61 - git log option: --author-date-order for path: A/B/file2
ok 62 - git log option: --ancestry-path side..main for path: A/B/file2
ok 63 - git log option:  for path: A/B/C/file3
ok 64 - git log option: --all for path: A/B/C/file3
ok 65 - git log option: --full-history for path: A/B/C/file3
ok 66 - git log option: --full-history --simplify-merges for path: A/B/C/file3
ok 67 - git log option: --simplify-merges for path: A/B/C/file3
ok 68 - git log option: --simplify-by-decoration for path: A/B/C/file3
ok 69 - git log option: --follow for path: A/B/C/file3
ok 70 - git log option: --first-parent for path: A/B/C/file3
ok 71 - git log option: --topo-order for path: A/B/C/file3
ok 72 - git log option: --date-order for path: A/B/C/file3
ok 73 - git log option: --author-date-order for path: A/B/C/file3
ok 74 - git log option: --ancestry-path side..main for path: A/B/C/file3
ok 75 - git log option:  for path: file4
ok 76 - git log option: --all for path: file4
ok 77 - git log option: --full-history for path: file4
ok 78 - git log option: --full-history --simplify-merges for path: file4
ok 79 - git log option: --simplify-merges for path: file4
ok 80 - git log option: --simplify-by-decoration for path: file4
ok 81 - git log option: --follow for path: file4
ok 82 - git log option: --first-parent for path: file4
ok 83 - git log option: --topo-order for path: file4
ok 84 - git log option: --date-order for path: file4
ok 85 - git log option: --author-date-order for path: file4
ok 86 - git log option: --ancestry-path side..main for path: file4
ok 87 - git log option:  for path: file5
ok 88 - git log option: --all for path: file5
ok 89 - git log option: --full-history for path: file5
ok 90 - git log option: --full-history --simplify-merges for path: file5
ok 91 - git log option: --simplify-merges for path: file5
ok 92 - git log option: --simplify-by-decoration for path: file5
ok 93 - git log option: --follow for path: file5
ok 94 - git log option: --first-parent for path: file5
ok 95 - git log option: --topo-order for path: file5
ok 96 - git log option: --date-order for path: file5
ok 97 - git log option: --author-date-order for path: file5
ok 98 - git log option: --ancestry-path side..main for path: file5
ok 99 - git log option:  for path: file5_renamed
ok 100 - git log option: --all for path: file5_renamed
ok 101 - git log option: --full-history for path: file5_renamed
ok 102 - git log option: --full-history --simplify-merges for path: file5_renamed
ok 103 - git log option: --simplify-merges for path: file5_renamed
ok 104 - git log option: --simplify-by-decoration for path: file5_renamed
ok 105 - git log option: --follow for path: file5_renamed
ok 106 - git log option: --first-parent for path: file5_renamed
ok 107 - git log option: --topo-order for path: file5_renamed
ok 108 - git log option: --date-order for path: file5_renamed
ok 109 - git log option: --author-date-order for path: file5_renamed
ok 110 - git log option: --ancestry-path side..main for path: file5_renamed
ok 111 - git log option:  for path: file_to_be_deleted
ok 112 - git log option: --all for path: file_to_be_deleted
ok 113 - git log option: --full-history for path: file_to_be_deleted
ok 114 - git log option: --full-history --simplify-merges for path: file_to_be_deleted
ok 115 - git log option: --simplify-merges for path: file_to_be_deleted
ok 116 - git log option: --simplify-by-decoration for path: file_to_be_deleted
ok 117 - git log option: --follow for path: file_to_be_deleted
ok 118 - git log option: --first-parent for path: file_to_be_deleted
ok 119 - git log option: --topo-order for path: file_to_be_deleted
ok 120 - git log option: --date-order for path: file_to_be_deleted
ok 121 - git log option: --author-date-order for path: file_to_be_deleted
ok 122 - git log option: --ancestry-path side..main for path: file_to_be_deleted
ok 123 - git log -- folder works with and without the trailing slash
ok 124 - git log for path that does not exist. 
ok 125 - git log with --walk-reflogs does not use Bloom filters
ok 126 - git log -- multiple path specs does not use Bloom filters
ok 127 - git log -- "." pathspec at root does not use Bloom filters
ok 128 - git log with wildcard that resolves to a single path uses Bloom filters
ok 129 - git log with wildcard that resolves to a multiple paths does not uses Bloom filters
ok 130 - setup - add commit-graph to the chain without Bloom filters
ok 131 - use Bloom filters even if the latest graph does not have Bloom filters
ok 132 - setup - add commit-graph to the chain with Bloom filters
ok 133 - Use Bloom filters if they exist in the latest but not all commit graphs in the chain.
ok 134 - persist filter settings
ok 135 - correctly report changes over limit
ok 136 - correctly report commits with no changed paths
ok 137 - Bloom generation is limited by --max-new-filters
ok 138 - Bloom generation backfills previously-skipped filters
ok 139 - --max-new-filters overrides configuration
ok 140 - Bloom generation backfills empty commits
ok 141 - Bloom reader notices too-small data chunk
ok 142 - Bloom reader notices out-of-bounds filter offsets
ok 143 - Bloom reader notices too-small index chunk
ok 144 - Bloom reader notices out-of-order index offsets
# passed all 144 test(s)
1..144
*** t4217-log-limit.sh ***
ok 1 - setup test
ok 2 - git log --since-as-filter=...
ok 3 - git log --children --since-as-filter=...
# passed all 3 test(s)
1..3
*** t4252-am-options.sh ***
ok 1 - setup
ok 2 - interrupted am --whitespace=fix
ok 3 - interrupted am -C1
ok 4 - interrupted am -p2
ok 5 - interrupted am -C1 -p2
ok 6 - interrupted am --directory="frotz nitfol"
ok 7 - apply to a funny path
ok 8 - am --reject
# passed all 8 test(s)
1..8
*** t4253-am-keep-cr-dos.sh ***
ok 1 - setup repository with dos files
ok 2 - am with dos files without --keep-cr
ok 3 - am with dos files with --keep-cr
ok 4 - am with dos files config am.keepcr
ok 5 - am with dos files config am.keepcr overridden by --no-keep-cr
ok 6 - am with dos files with --keep-cr continue
ok 7 - am with unix files config am.keepcr overridden by --no-keep-cr
# passed all 7 test(s)
1..7
*** t4254-am-corrupt.sh ***
ok 1 - setup
ok 2 - try to apply corrupted patch
ok 3 - NUL in commit message's body
ok 4 - NUL in commit message's header
# passed all 4 test(s)
1..4
*** t4255-am-submodule.sh ***
ok 1 - am: added submodule creates empty directory
ok 2 - am: added submodule leaves existing empty directory alone
ok 3 - am: replace tracked file with submodule creates empty directory
ok 4 - am: replace directory with submodule
ok 5 - am: removed submodule leaves submodule directory and its contents in place
ok 6 - am: removed submodule leaves submodule containing a .git directory alone
ok 7 - am: replace submodule with a directory must fail
ok 8 - am: replace submodule containing a .git directory with a directory must fail
not ok 9 - am: replace submodule with a file must fail # TODO known breakage
not ok 10 - am: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - am: modified submodule does not update submodule work tree
ok 12 - am: modified submodule does not update submodule work tree to invalid commit
ok 13 - am: modified submodule does not update submodule work tree from invalid commit
ok 14 - am: added submodule doesn't remove untracked unignored file with same name
ok 15 - am_3way: added submodule creates empty directory
ok 16 - am_3way: added submodule leaves existing empty directory alone
ok 17 - am_3way: replace tracked file with submodule creates empty directory
ok 18 - am_3way: replace directory with submodule
ok 19 - am_3way: removed submodule leaves submodule directory and its contents in place
ok 20 - am_3way: removed submodule leaves submodule containing a .git directory alone
not ok 21 - am_3way: replace submodule with a directory must fail # TODO known breakage
not ok 22 - am_3way: replace submodule containing a .git directory with a directory must fail # TODO known breakage
not ok 23 - am_3way: replace submodule with a file must fail # TODO known breakage
not ok 24 - am_3way: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 25 - am_3way: modified submodule does not update submodule work tree
ok 26 - am_3way: modified submodule does not update submodule work tree to invalid commit
ok 27 - am_3way: modified submodule does not update submodule work tree from invalid commit
ok 28 - am_3way: added submodule doesn't remove untracked unignored file with same name
ok 29 - setup diff.submodule
ok 30 - diff.submodule unset
ok 31 - diff.submodule unset with extra file
ok 32 - diff.submodule=log
ok 33 - diff.submodule=log with extra file
# still have 6 known breakage(s)
# passed all remaining 27 test(s)
1..33
*** t4256-am-format-flowed.sh ***
ok 1 - setup
ok 2 - am with format=flowed
# passed all 2 test(s)
1..2
*** t4257-am-interactive.sh ***
ok 1 - set up patches to apply
ok 2 - applying all patches generates conflict
ok 3 - interactive am can apply a single patch
ok 4 - interactive am can resolve conflict
# passed all 4 test(s)
1..4
*** t4258-am-quoted-cr.sh ***
ok 1 - setup
ok 2 - am warn if quoted-cr is found
ok 3 - am --quoted-cr=strip
ok 4 - am with config mailinfo.quotedCr=strip
# passed all 4 test(s)
1..4
*** t4300-merge-tree.sh ***
ok 1 - setup
ok 2 - file add A, !B
ok 3 - file add !A, B
ok 4 - file add A, B (same)
ok 5 - file add A, B (different)
ok 6 - file change A, !B
ok 7 - file change !A, B
ok 8 - 3-way merge with --attr-source
ok 9 - file change A, B (same)
ok 10 - file change A, B (different)
ok 11 - file change A, B (mixed)
ok 12 - file remove A, !B
ok 13 - file remove !A, B
ok 14 - file remove A, B (same)
ok 15 - file change A, remove B
ok 16 - file remove A, change B
ok 17 - tree add A, B (same)
ok 18 - tree add A, B (different)
ok 19 - tree unchanged A, removed B
ok 20 - turn file to tree
ok 21 - turn tree to file
ok 22 - merge-tree respects core.useReplaceRefs=false
# passed all 22 test(s)
1..22
*** t4301-merge-tree-write-tree.sh ***
ok 1 - setup
ok 2 - Clean merge
ok 3 - Content merge and a few conflicts
ok 4 - Auto resolve conflicts by "ours" strategy option
ok 5 - Barf on misspelled option, with exit code other than 0 or 1
ok 6 - Barf on too many arguments
ok 7 - test conflict notices and such
ok 8 - directory rename + content conflict
ok 9 - rename/delete handling
ok 10 - rename/add handling
ok 11 - rename/add, where add is a mode conflict
ok 12 - rename/rename + content conflict
ok 13 - rename/add/delete conflict
ok 14 - rename/rename(2to1)/delete/delete conflict
ok 15 - mod6: chains of rename/rename(1to2) and add/add via colliding renames
ok 16 - directory rename + rename/delete + modify/delete + directory/file conflict
ok 17 - usage: --trivial-merge is incompatible with --messages
ok 18 - usage: --trivial-merge is incompatible with --name-only
ok 19 - usage: --trivial-merge is incompatible with --allow-unrelated-histories
ok 20 - usage: --trivial-merge is incompatible with --stdin
ok 21 - usage: --trivial-merge is incompatible with --merge-base=
ok 22 - usage: --trivial-merge is incompatible with --strategy-option=
ok 23 - usage: --trivial-merge is incompatible with --no-messages
ok 24 - usage: --trivial-merge is incompatible with --
ok 25 - usage: --trivial-merge is incompatible with --no-merge-base
ok 26 - usage: --trivial-merge is incompatible with --no-strategy-option
ok 27 - Just the conflicted files without the messages
ok 28 - Check conflicted oids and modes without messages
ok 29 - NUL terminated conflicted file "lines"
ok 30 - error out by default for unrelated histories
ok 31 - can override merge of unrelated histories
ok 32 - merge-ort fails gracefully in a read-only repository
ok 33 - --stdin with both a successful and a conflicted merge
ok 34 - --merge-base is incompatible with --stdin
ok 35 - specify merge-base as parent of branch2
ok 36 - check the input format when --stdin is passed
ok 37 - --merge-base with tree OIDs
ok 38 - error out on missing tree objects
ok 39 - error out on missing blob objects
ok 40 - error out on missing commits as well
# passed all 40 test(s)
1..40
*** t5000-tar-tree.sh ***
ok 1 - setup
ok 2 - --list notices extra parameters
ok 3 - end-of-options is correctly eaten
ok 4 - populate workdir
ok 5 - add ignored file
ok 6 - add files to repository
ok 7 - setup export-subst
ok 8 - create bare clone
ok 9 - remove ignored file
ok 10 - git archive
ok 11 -  extract tar archive
ok 12 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)
ok 13 -  validate filenames
ok 14 -  validate file contents
ok 15 -  validate mtime of a/a
ok 16 - git archive --mtime
ok 17 -  extract tar archive
ok 18 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)
ok 19 -  validate filenames
ok 20 -  validate file contents
ok 21 -  validate mtime of a/a
ok 22 - git archive --prefix=prefix/
ok 23 -  extract tar archive
ok 24 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)
ok 25 -  validate filenames
ok 26 -  validate file contents
ok 27 - git-archive --prefix=olde-
ok 28 -  extract tar archive
ok 29 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)
ok 30 -  validate filenames
ok 31 -  validate file contents
ok 32 - git archive --add-file
ok 33 -  extract tar archive
ok 34 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)
ok 35 -  validate filenames
ok 36 -  validate file contents
ok 37 -  validate extra file untracked
ok 38 - git archive --add-file twice
ok 39 -  extract tar archive
ok 40 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)
ok 41 -  validate filenames
ok 42 -  validate file contents
ok 43 -  validate extra file one/untracked
ok 44 -  validate extra file two/untracked
ok 45 - git archive on large files
ok 46 - git archive in a bare repo
ok 47 - git archive vs. the same in a bare repo
ok 48 - git archive with --output
ok 49 - git archive --remote
ok 50 - git archive --remote with configured remote
ok 51 - git get-tar-commit-id
ok 52 - git archive with --output, override inferred format
ok 53 - git archive with --output and --remote creates .tgz
ok 54 - git archive --list outside of a git repo
ok 55 - git archive --remote outside of a git repo
ok 56 - clients cannot access unreachable commits
ok 57 - upload-archive can allow unreachable commits
ok 58 - setup tar filters
ok 59 - archive --list mentions user filter
ok 60 - archive --list shows only enabled remote filters
ok 61 - invoke tar filter by format
ok 62 - invoke tar filter by extension
ok 63 - default output format remains tar
ok 64 - extension matching requires dot
ok 65 - only enabled filters are available remotely
ok 66 - invalid filter is reported only once
ok 67 - git archive --format=tgz
ok 68 - git archive --format=tar.gz
ok 69 - infer tgz from .tgz filename
ok 70 - infer tgz from .tar.gz filename
ok 71 - extract tgz file
ok 72 - remote tar.gz is allowed by default
ok 73 - remote tar.gz can be disabled
ok 74 - git archive --format=tgz (external gzip)
ok 75 - git archive --format=tar.gz (external gzip)
ok 76 - extract tgz file (external gzip)
ok 77 - archive and :(glob)
ok 78 - catch non-matching pathspec
ok 79 - reject paths outside the current directory
ok 80 - allow pathspecs that resolve to the current directory
ok 81 - set up repository with huge blob
ok 82 - generate tar with huge size
ok 83 - system tar can read our huge size
ok 84 - set up repository with far-future (2^34 - 1) commit
ok 85 - generate tar with far-future mtime
ok 86 - system tar can read our future mtime
ok 87 - set up repository with far-far-future (2^36 + 1) commit
ok 88 - generate tar with far-far-future mtime
ok 89 - system tar can read our future mtime
# passed all 89 test(s)
1..89
*** t5001-archive-attr.sh ***
ok 1 - setup
ok 2 - git archive
ok 3 -  archive/ignored does not exist
ok 4 -  archive/ignored-by-tree does not exist
ok 5 -  archive/ignored-by-tree.d does not exist
ok 6 -  archive/ignored-by-tree.d/file does not exist
ok 7 -  archive/ignored-by-worktree exists
ok 8 -  archive/excluded-by-pathspec.d exists
ok 9 -  archive/excluded-by-pathspec.d/file exists
ok 10 - git archive with pathspec
ok 11 -  archive-pathspec/ignored does not exist
ok 12 -  archive-pathspec/ignored-by-tree does not exist
ok 13 -  archive-pathspec/ignored-by-tree.d does not exist
ok 14 -  archive-pathspec/ignored-by-tree.d/file does not exist
ok 15 -  archive-pathspec/ignored-by-worktree exists
ok 16 -  archive-pathspec/excluded-by-pathspec.d does not exist
ok 17 -  archive-pathspec/excluded-by-pathspec.d/file does not exist
ok 18 - git archive with wildcard pathspec
ok 19 -  archive-pathspec-wildcard/ignored does not exist
ok 20 -  archive-pathspec-wildcard/ignored-by-tree does not exist
ok 21 -  archive-pathspec-wildcard/ignored-by-tree.d does not exist
ok 22 -  archive-pathspec-wildcard/ignored-by-tree.d/file does not exist
ok 23 -  archive-pathspec-wildcard/ignored-by-worktree exists
ok 24 -  archive-pathspec-wildcard/excluded-by-pathspec.d does not exist
ok 25 -  archive-pathspec-wildcard/excluded-by-pathspec.d/file does not exist
ok 26 - git -C subdir archive
ok 27 -  archive-subdir/included exists
ok 28 -  archive-subdir/ignored-by-subtree does not exist
ok 29 -  archive-subdir/ignored-by-tree does not exist
ok 30 - git archive with worktree attributes
ok 31 -  worktree/ignored does not exist
ok 32 -  worktree/ignored-by-tree exists
ok 33 -  worktree/ignored-by-worktree does not exist
ok 34 - git archive --worktree-attributes option
ok 35 -  worktree2/ignored does not exist
ok 36 -  worktree2/ignored-by-tree exists
ok 37 -  worktree2/ignored-by-worktree does not exist
ok 38 - git archive vs. bare
ok 39 - git archive with worktree attributes, bare
ok 40 -  bare-worktree/ignored does not exist
ok 41 -  bare-worktree/ignored-by-tree does not exist
ok 42 -  bare-worktree/ignored-by-worktree exists
ok 43 - export-subst
ok 44 - export-subst expands %(describe) once
# passed all 44 test(s)
1..44
*** t5002-archive-attr-pattern.sh ***
ok 1 - setup
ok 2 - git archive
ok 3 -  archive/ignored does not exist
ok 4 -  archive/not-ignored-dir/ignored does not exist
ok 5 -  archive/not-ignored-dir/ignored-only-if-dir exists
ok 6 -  archive/not-ignored-dir/ exists
ok 7 -  archive/ignored-only-if-dir/ does not exist
ok 8 -  archive/ignored-ony-if-dir/ignored-by-ignored-dir does not exist
ok 9 -  archive/ignored-without-slash/ does not exist
ok 10 -  archive/ignored-without-slash/foo does not exist
ok 11 -  archive/wildcard-without-slash/ does not exist
ok 12 -  archive/wildcard-without-slash/foo does not exist
ok 13 -  archive/deep/and/slashless/ does not exist
ok 14 -  archive/deep/and/slashless/foo does not exist
ok 15 -  archive/deep/with/wildcard/ does not exist
ok 16 -  archive/deep/with/wildcard/foo does not exist
ok 17 -  archive/one-level-lower/ does not exist
ok 18 -  archive/one-level-lower/two-levels-lower/ignored-only-if-dir/ does not exist
ok 19 -  archive/one-level-lower/two-levels-lower/ignored-ony-if-dir/ignored-by-ignored-dir does not exist
# passed all 19 test(s)
1..19
*** t5003-archive-zip.sh ***
ok 1 - populate workdir
ok 2 - add symlink
ok 3 - prepare file list
ok 4 - add ignored file
ok 5 - add files to repository
ok 6 - setup export-subst and diff attributes
ok 7 - create bare clone
ok 8 - remove ignored file
ok 9 - git archive --format=zip
ok 10 -  extract ZIP archive
ok 11 -  validate filenames
ok 12 -  validate file contents
ok 13 -  extract ZIP archive with EOL conversion
ok 14 -  validate that text files are converted
ok 15 -  validate that binary files are unchanged
ok 16 -  validate that diff files are converted
ok 17 -  validate that -diff files are unchanged
ok 18 -  validate that custom diff is unchanged 
ok 19 - git archive --format=zip in a bare repo
ok 20 - git archive --format=zip vs. the same in a bare repo
ok 21 - git archive --format=zip with --output
ok 22 - git archive with --output, inferring format (local)
ok 23 - git archive with --output, inferring format (remote)
ok 24 - git archive --format=zip with prefix
ok 25 -  extract ZIP archive
ok 26 -  validate filenames
ok 27 -  validate file contents
ok 28 -  extract ZIP archive with EOL conversion
ok 29 -  validate that text files are converted
ok 30 -  validate that binary files are unchanged
ok 31 -  validate that diff files are converted
ok 32 -  validate that -diff files are unchanged
ok 33 -  validate that custom diff is unchanged 
ok 34 - git archive -0 --format=zip on large files
ok 35 -  extract ZIP archive
ok 36 -  validate filenames
ok 37 -  validate file contents
ok 38 -  extract ZIP archive with EOL conversion
ok 39 -  validate that text files are converted
ok 40 -  validate that binary files are unchanged
ok 41 -  validate that diff files are converted
ok 42 -  validate that -diff files are unchanged
ok 43 -  validate that custom diff is unchanged 
ok 44 - git archive --format=zip on large files
ok 45 -  extract ZIP archive
ok 46 -  validate filenames
ok 47 -  validate file contents
ok 48 -  extract ZIP archive with EOL conversion
ok 49 -  validate that text files are converted
ok 50 -  validate that binary files are unchanged
ok 51 -  validate that diff files are converted
ok 52 -  validate that -diff files are unchanged
ok 53 -  validate that custom diff is unchanged 
ok 54 - git archive --format=zip --add-file
ok 55 -  extract ZIP archive
ok 56 -  validate filenames
ok 57 -  validate file contents
ok 58 -  extract ZIP archive with EOL conversion
ok 59 -  validate that text files are converted
ok 60 -  validate that binary files are unchanged
ok 61 -  validate that diff files are converted
ok 62 -  validate that -diff files are unchanged
ok 63 -  validate that custom diff is unchanged 
ok 64 -  validate extra file untracked
ok 65 - git archive --format=zip --add-virtual-file
ok 66 - git archive --format=zip --add-file twice
ok 67 -  extract ZIP archive
ok 68 -  validate filenames
ok 69 -  validate file contents
ok 70 -  extract ZIP archive with EOL conversion
ok 71 -  validate that text files are converted
ok 72 -  validate that binary files are unchanged
ok 73 -  validate that diff files are converted
ok 74 -  validate that -diff files are unchanged
ok 75 -  validate that custom diff is unchanged 
ok 76 -  validate extra file one/untracked
ok 77 -  validate extra file two/untracked
# passed all 77 test(s)
# SKIP no web server found at ''
1..77
*** t5004-archive-corner-cases.sh ***
ok 1 - create commit with empty tree and fake empty tar
ok 2 - tar archive of commit with empty tree
ok 3 - tar archive of empty tree is empty
ok 4 - tar archive of empty tree with prefix
ok 5 - zip archive of empty tree is empty
ok 6 - zip archive of empty tree with prefix
ok 7 - archive complains about pathspec on empty tree
ok 8 - create a commit with an empty subtree
ok 9 - archive empty subtree with no pathspec
ok 10 - archive empty subtree by direct pathspec
ok 11 - zip archive with many entries
ok 12 # skip zip archive bigger than 4GB (missing EXPENSIVE of EXPENSIVE,UNZIP,UNZIP_ZIP64_SUPPORT)
ok 13 # skip zip archive with files bigger than 4GB (missing EXPENSIVE of EXPENSIVE,LONG_IS_64BIT,UNZIP,UNZIP_ZIP64_SUPPORT,ZIPINFO)
ok 14 - tar archive with long paths
# passed all 14 test(s)
1..14
*** t5100-mailinfo.sh ***
ok 1 - split sample box
ok 2 - mailinfo 0001
ok 3 - mailinfo 0002
ok 4 - mailinfo 0003
ok 5 - mailinfo 0004
ok 6 - mailinfo 0005
ok 7 - mailinfo 0006
ok 8 - mailinfo 0007
ok 9 - mailinfo 0008
ok 10 - mailinfo 0009
ok 11 - mailinfo 0010
ok 12 - mailinfo 0011
ok 13 - mailinfo 0012
ok 14 - mailinfo 0013
ok 15 - mailinfo 0014
ok 16 - mailinfo 0015
ok 17 - mailinfo 0016
ok 18 - mailinfo 0017
ok 19 - mailinfo 0018
ok 20 - split box with rfc2047 samples
ok 21 - mailinfo rfc2047/0001
ok 22 - mailinfo rfc2047/0002
ok 23 - mailinfo rfc2047/0003
ok 24 - mailinfo rfc2047/0004
ok 25 - mailinfo rfc2047/0005
ok 26 - mailinfo rfc2047/0006
ok 27 - mailinfo rfc2047/0007
ok 28 - mailinfo rfc2047/0008
ok 29 - mailinfo rfc2047/0009
ok 30 - mailinfo rfc2047/0010
ok 31 - mailinfo rfc2047/0011
ok 32 - respect NULs
ok 33 - Preserve NULs out of MIME encoded message
ok 34 - mailinfo on from header without name works
ok 35 - mailinfo finds headers after embedded From line
ok 36 - mailinfo on message with quoted >From
ok 37 - mailinfo unescapes with --mboxrd
ok 38 - mailinfo handles rfc2822 quoted-string
ok 39 - mailinfo handles rfc2822 comment
ok 40 - mailinfo with mailinfo.scissors config
ok 41 - mailinfo no options
ok 42 - mailinfo -k
ok 43 - mailinfo -b no [PATCH]
ok 44 - mailinfo -b leading [PATCH]
ok 45 - mailinfo -b double [PATCH]
ok 46 - mailinfo -b trailing [PATCH]
ok 47 - mailinfo -b separated double [PATCH]
ok 48 - mailinfo handles unusual header whitespace
ok 49 - split base64 email with quoted-cr
ok 50 - mailinfo warn CR in base64 encoded email
ok 51 - from line with unterminated quoted string
ok 52 - from line with unterminated comment
# passed all 52 test(s)
1..52
*** t5150-request-pull.sh ***
ok 1 - setup
ok 2 - setup: two scripts for reading pull requests
ok 3 - pull request when forgot to push
ok 4 - pull request after push
ok 5 - request asks HEAD to be pulled
ok 6 - pull request format
ok 7 - request-pull ignores OPTIONS_KEEPDASHDASH poison
ok 8 - request-pull quotes regex metacharacters properly
ok 9 - pull request with mismatched object
ok 10 - pull request with stale object
# passed all 10 test(s)
1..10
*** t5200-update-server-info.sh ***
ok 1 - setup
ok 2 - create info/refs
ok 3 - modify and store mtime
ok 4 - info/refs is not needlessly overwritten
ok 5 - info/refs can be forced to update
ok 6 - info/refs updates when changes are made
# passed all 6 test(s)
1..6
*** t5300-pack-object.sh ***
ok 1 - setup
ok 2 - setup pack-object <stdin
ok 3 - pack-object <stdin parsing: basic [|--revs]
ok 4 - pack-object <stdin parsing: [|--revs] bad line
ok 5 - pack-object <stdin parsing: [|--revs] empty line
ok 6 - pack-object <stdin parsing: [|--revs] with --stdin
ok 7 - pack-object <stdin parsing: --stdin-packs handles garbage
ok 8 - pack without delta
ok 9 - pack-objects with bogus arguments
ok 10 - unpack without delta
ok 11 - unpack without delta (core.fsyncmethod=batch)
ok 12 - pack with REF_DELTA
ok 13 - unpack with REF_DELTA
ok 14 - unpack with REF_DELTA (core.fsyncmethod=batch)
ok 15 - pack with OFS_DELTA
ok 16 - unpack with OFS_DELTA
ok 17 - unpack with OFS_DELTA (core.fsyncmethod=batch)
ok 18 - compare delta flavors
ok 19 - use packed objects
ok 20 - use packed deltified (REF_DELTA) objects
ok 21 - use packed deltified (OFS_DELTA) objects
ok 22 - survive missing objects/pack directory
ok 23 - verify pack
ok 24 - verify pack -v
ok 25 - verify-pack catches mismatched .idx and .pack files
ok 26 - verify-pack catches a corrupted pack signature
ok 27 - verify-pack catches a corrupted pack version
ok 28 - verify-pack catches a corrupted type/size of the 1st packed object data
ok 29 - verify-pack catches a corrupted sum of the index file itself
ok 30 - build pack index for an existing pack
ok 31 - unpacking with --strict
ok 32 - index-pack with --strict
ok 33 - setup for --strict and --fsck-objects downgrading fsck msgs
ok 34 - index-pack with --strict downgrading fsck msgs
ok 35 - index-pack with --fsck-objects downgrading fsck msgs
ok 36 - cleanup for --strict and --fsck-objects downgrading fsck msgs
ok 37 - honor pack.packSizeLimit
ok 38 - verify resulting packs
ok 39 - tolerate packsizelimit smaller than biggest object
ok 40 - verify resulting packs
ok 41 - set up pack for non-repo tests
ok 42 - index-pack --stdin complains of non-repo
ok 43 - index-pack <pack> works in non-repo
ok 44 - index-pack --strict <pack> works in non-repo
ok 45 # skip index-pack --threads=N or pack.threads=N warns when no pthreads (missing !PTHREADS of !PTHREADS,!FAIL_PREREQS)
ok 46 # skip pack-objects --threads=N or pack.threads=N warns when no pthreads (missing !PTHREADS of !PTHREADS,!FAIL_PREREQS)
ok 47 - pack-objects in too-many-packs mode
ok 48 - setup: fake a SHA1 hash collision
ok 49 - make sure index-pack detects the SHA1 collision
ok 50 - make sure index-pack detects the SHA1 collision (large blobs)
ok 51 - prefetch objects
ok 52 - negative window clamps to 0
# passed all 52 test(s)
1..52
*** t5301-sliding-window.sh ***
ok 1 - setup
ok 2 - verify-pack -v, defaults
ok 3 - verify-pack -v, packedGitWindowSize == 1 page
ok 4 - verify-pack -v, packedGit{WindowSize,Limit} == 1 page
ok 5 - repack -a -d, packedGit{WindowSize,Limit} == 1 page
ok 6 - verify-pack -v, defaults
# passed all 6 test(s)
1..6
*** t5302-pack-index.sh ***
ok 1 - setup
ok 2 - pack-objects with index version 1
ok 3 - pack-objects with index version 2
ok 4 - both packs should be identical
ok 5 - index v1 and index v2 should be different
ok 6 - index-pack with index version 1
ok 7 - index-pack with index version 2
ok 8 - index-pack results should match pack-objects ones
ok 9 - index-pack --verify on index version 1
ok 10 - index-pack --verify on index version 2
ok 11 - pack-objects --index-version=2, is not accepted
ok 12 - index v2: force some 64-bit offsets with pack-objects
ok 13 - index v2: verify a pack with some 64-bit offsets
ok 14 - 64-bit offsets: should be different from previous index v2 results
ok 15 - index v2: force some 64-bit offsets with index-pack
ok 16 - 64-bit offsets: index-pack result should match pack-objects one
ok 17 - index-pack --verify on 64-bit offset v2 (cheat)
ok 18 - index-pack --verify on 64-bit offset v2
ok 19 - [index v1] 1) stream pack to repository
ok 20 - [index v1] 2) create a stealth corruption in a delta base reference
ok 21 - [index v1] 3) corrupted delta happily returned wrong data
ok 22 - [index v1] 4) confirm that the pack is actually corrupted
ok 23 - [index v1] 5) pack-objects happily reuses corrupted data
ok 24 - [index v1] 6) newly created pack is BAD !
ok 25 - [index v2] 1) stream pack to repository
ok 26 - [index v2] 2) create a stealth corruption in a delta base reference
ok 27 - [index v2] 3) corrupted delta happily returned wrong data
ok 28 - [index v2] 4) confirm that the pack is actually corrupted
ok 29 - [index v2] 5) pack-objects refuses to reuse corrupted data
ok 30 - [index v2] 6) verify-pack detects CRC mismatch
ok 31 - running index-pack in the object store
ok 32 - index-pack --strict warns upon missing tagger in tag
ok 33 - index-pack --fsck-objects also warns upon missing tagger in tag
ok 34 - index-pack -v --stdin produces progress for both phases
ok 35 - too-large packs report the breach
# passed all 35 test(s)
1..35
*** t5303-pack-corruption-resilience.sh ***
ok 1 - initial setup validation
ok 2 - create corruption in header of first object
ok 3 - ... but having a loose copy allows for full recovery
ok 4 - ... and loose copy of first delta allows for partial recovery
ok 5 - create corruption in data of first object
ok 6 - ... but having a loose copy allows for full recovery
ok 7 - ... and loose copy of second object allows for partial recovery
ok 8 - create corruption in header of first delta
ok 9 - ... but having a loose copy allows for full recovery
ok 10 - ... and then a repack "clears" the corruption
ok 11 - create corruption in data of first delta
ok 12 - ... but having a loose copy allows for full recovery
ok 13 - ... and then a repack "clears" the corruption
ok 14 - corruption in delta base reference of first delta (OBJ_REF_DELTA)
ok 15 - ... but having a loose copy allows for full recovery
ok 16 - ... and then a repack "clears" the corruption
ok 17 - corruption #0 in delta base reference of first delta (OBJ_OFS_DELTA)
ok 18 - ... but having a loose copy allows for full recovery
ok 19 - ... and then a repack "clears" the corruption
ok 20 - corruption #1 in delta base reference of first delta (OBJ_OFS_DELTA)
ok 21 - ... but having a loose copy allows for full recovery
ok 22 - ... and then a repack "clears" the corruption
ok 23 - ... and a redundant pack allows for full recovery too
ok 24 - corruption of delta base reference pointing to wrong object
ok 25 - ... but having a loose copy allows for full recovery
ok 26 - ... and then a repack "clears" the corruption
ok 27 - corrupting header to have too small output buffer fails unpack
ok 28 - apply good minimal delta
ok 29 - apply delta with too many literal bytes
ok 30 - apply delta with too many copied bytes
ok 31 - apply delta with too few literal bytes
ok 32 - apply delta with too few bytes in base
ok 33 - apply delta with truncated copy parameters
ok 34 - apply delta with trailing garbage literal
ok 35 - apply delta with trailing garbage copy
ok 36 - apply delta with trailing garbage opcode
# passed all 36 test(s)
1..36
*** t5304-prune.sh ***
ok 1 - setup
ok 2 - bare repo prune is quiet without $GIT_DIR/objects/pack
ok 3 - prune stale packs
ok 4 - prune --expire
ok 5 - gc: implicit prune --expire
ok 6 - gc: refuse to start with invalid gc.pruneExpire
ok 7 - gc: start with ok gc.pruneExpire
ok 8 - prune: prune nonsense parameters
ok 9 - prune: prune unreachable heads
ok 10 - prune: do not prune detached HEAD with no reflog
ok 11 - prune: prune former HEAD after checking out branch
ok 12 - prune: do not prune heads listed as an argument
ok 13 - gc --no-prune
ok 14 - gc respects gc.pruneExpire
ok 15 - gc --prune=<date>
ok 16 - gc --prune=never
ok 17 - gc respects gc.pruneExpire=never
ok 18 - prune --expire=never
ok 19 - gc: prune old objects after local clone
ok 20 - garbage report in count-objects -v
ok 21 - clean pack garbage with gc
ok 22 - prune .git/shallow
ok 23 - prune .git/shallow when there are no loose objects
ok 24 - prune: handle alternate object database
ok 25 - prune: handle index in multiple worktrees
ok 26 - prune: handle HEAD in multiple worktrees
ok 27 - prune: handle HEAD reflog in multiple worktrees
ok 28 - prune: handle expire option correctly
ok 29 - trivial prune with bitmaps enabled
ok 30 - old reachable-from-recent retained with bitmaps
ok 31 - gc.recentObjectsHook
# passed all 31 test(s)
1..31
*** t5305-include-tag.sh ***
ok 1 - setup
ok 2 - pack without --include-tag
ok 3 - unpack objects
ok 4 - check unpacked result (have commit, no tag)
ok 5 - pack with --include-tag
ok 6 - unpack objects
ok 7 - check unpacked result (have commit, have tag)
ok 8 - create hidden inner tag
ok 9 - pack explicit outer tag
ok 10 - unpack objects
ok 11 - check unpacked result (have all objects)
ok 12 - pack implied outer tag
ok 13 - unpack objects
ok 14 - check unpacked result (have all objects)
ok 15 - single-branch clone can transfer tag
# passed all 15 test(s)
1..15
*** t5306-pack-nobase.sh ***
ok 1 - setup base
ok 2 - setup patch_clone
ok 3 - indirectly clone patch_clone
ok 4 - clone of patch_clone is incomplete
# passed all 4 test(s)
1..4
*** t5307-pack-missing-commit.sh ***
ok 1 - setup
ok 2 - check corruption
ok 3 - rev-list notices corruption (1)
ok 4 - rev-list notices corruption (2)
ok 5 - pack-objects notices corruption
# passed all 5 test(s)
1..5
*** t5308-pack-detect-duplicates.sh ***
ok 1 - setup
ok 2 - pack with no duplicates
ok 3 - index-pack will allow duplicate objects by default
ok 4 - create batch-check test vectors
ok 5 - lookup in duplicated pack
ok 6 - index-pack can reject packs with duplicates
# passed all 6 test(s)
1..6
*** t5309-pack-delta-cycles.sh ***
ok 1 - index-pack works with a single delta (A->B)
ok 2 - index-pack works with a single delta (B->A)
ok 3 - index-pack detects missing base objects
ok 4 - index-pack detects REF_DELTA cycles
ok 5 - failover to an object in another pack
ok 6 - failover to a duplicate object in the same pack
# passed all 6 test(s)
1..6
*** t5310-pack-bitmaps.sh ***
ok 1 - setup test repository
ok 2 - setup repo with moderate-sized history
ok 3 - setup writing bitmaps during repack
ok 4 - full repack creates bitmaps
ok 5 - rev-list --test-bitmap verifies bitmaps
ok 6 - counting commits via bitmap (full bitmap, second)
ok 7 - counting partial commits via bitmap (full bitmap, second)
ok 8 - counting commits with limit (full bitmap, second)
ok 9 - counting non-linear history (full bitmap, second)
ok 10 - counting commits with limiting (full bitmap, second)
ok 11 - counting objects via bitmap (full bitmap, second)
ok 12 - enumerate commits (full bitmap, second)
ok 13 - enumerate --objects (full bitmap, second)
ok 14 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 15 - counting commits via bitmap (full bitmap, other)
ok 16 - counting partial commits via bitmap (full bitmap, other)
ok 17 - counting commits with limit (full bitmap, other)
ok 18 - counting non-linear history (full bitmap, other)
ok 19 - counting commits with limiting (full bitmap, other)
ok 20 - counting objects via bitmap (full bitmap, other)
ok 21 - enumerate commits (full bitmap, other)
ok 22 - enumerate --objects (full bitmap, other)
ok 23 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 24 - clone from bitmapped repository
ok 25 - partial clone from bitmapped repository
ok 26 - setup further non-bitmapped commits
ok 27 - counting commits via bitmap (partial bitmap, second)
ok 28 - counting partial commits via bitmap (partial bitmap, second)
ok 29 - counting commits with limit (partial bitmap, second)
ok 30 - counting non-linear history (partial bitmap, second)
ok 31 - counting commits with limiting (partial bitmap, second)
ok 32 - counting objects via bitmap (partial bitmap, second)
ok 33 - enumerate commits (partial bitmap, second)
ok 34 - enumerate --objects (partial bitmap, second)
ok 35 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 36 - counting commits via bitmap (partial bitmap, other)
ok 37 - counting partial commits via bitmap (partial bitmap, other)
ok 38 - counting commits with limit (partial bitmap, other)
ok 39 - counting non-linear history (partial bitmap, other)
ok 40 - counting commits with limiting (partial bitmap, other)
ok 41 - counting objects via bitmap (partial bitmap, other)
ok 42 - enumerate commits (partial bitmap, other)
ok 43 - enumerate --objects (partial bitmap, other)
ok 44 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 45 - fetch (partial bitmap)
ok 46 - enumerating progress counts pack-reused objects
ok 47 - pack-objects respects --local (non-local loose)
ok 48 - pack-objects respects --honor-pack-keep (local non-bitmapped pack)
ok 49 - pack-objects respects --local (non-local pack)
ok 50 - pack-objects respects --honor-pack-keep (local bitmapped pack)
ok 51 - pack-objects respects --local (non-local bitmapped pack)
ok 52 - pack-objects to file can use bitmap
ok 53 - full repack, reusing previous bitmaps
ok 54 - fetch (full bitmap)
ok 55 - create objects for missing-HAVE tests
ok 56 - pack-objects respects --incremental
ok 57 - pack with missing blob
ok 58 - pack with missing tree
ok 59 - pack with missing parent
ok 60 # skip we can read jgit bitmaps (missing JGIT of JGIT,SHA1)
ok 61 # skip jgit can read our bitmaps (missing JGIT of JGIT,SHA1)
ok 62 - splitting packs does not generate bogus bitmaps
ok 63 - set up reusable pack
ok 64 - pack reuse respects --honor-pack-keep
ok 65 - pack reuse respects --local
ok 66 - pack reuse respects --incremental
ok 67 - truncated bitmap fails gracefully (ewah)
ok 68 - truncated bitmap fails gracefully (cache)
ok 69 - set up thin delta-reuse parent
ok 70 - fetch without bitmaps ignores delta against old base
ok 71 - fetch with bitmaps can reuse old base
ok 72 - pack.preferBitmapTips
ok 73 - pack.preferBitmapTips
ok 74 - complains about multiple pack bitmaps
ok 75 - setup test repository
ok 76 - setup repo with moderate-sized history
ok 77 - setup writing bitmaps during repack
ok 78 - full repack creates bitmaps
ok 79 - rev-list --test-bitmap verifies bitmaps
ok 80 - counting commits via bitmap (full bitmap, second)
ok 81 - counting partial commits via bitmap (full bitmap, second)
ok 82 - counting commits with limit (full bitmap, second)
ok 83 - counting non-linear history (full bitmap, second)
ok 84 - counting commits with limiting (full bitmap, second)
ok 85 - counting objects via bitmap (full bitmap, second)
ok 86 - enumerate commits (full bitmap, second)
ok 87 - enumerate --objects (full bitmap, second)
ok 88 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 89 - counting commits via bitmap (full bitmap, other)
ok 90 - counting partial commits via bitmap (full bitmap, other)
ok 91 - counting commits with limit (full bitmap, other)
ok 92 - counting non-linear history (full bitmap, other)
ok 93 - counting commits with limiting (full bitmap, other)
ok 94 - counting objects via bitmap (full bitmap, other)
ok 95 - enumerate commits (full bitmap, other)
ok 96 - enumerate --objects (full bitmap, other)
ok 97 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 98 - clone from bitmapped repository
ok 99 - partial clone from bitmapped repository
ok 100 - setup further non-bitmapped commits
ok 101 - counting commits via bitmap (partial bitmap, second)
ok 102 - counting partial commits via bitmap (partial bitmap, second)
ok 103 - counting commits with limit (partial bitmap, second)
ok 104 - counting non-linear history (partial bitmap, second)
ok 105 - counting commits with limiting (partial bitmap, second)
ok 106 - counting objects via bitmap (partial bitmap, second)
ok 107 - enumerate commits (partial bitmap, second)
ok 108 - enumerate --objects (partial bitmap, second)
ok 109 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 110 - counting commits via bitmap (partial bitmap, other)
ok 111 - counting partial commits via bitmap (partial bitmap, other)
ok 112 - counting commits with limit (partial bitmap, other)
ok 113 - counting non-linear history (partial bitmap, other)
ok 114 - counting commits with limiting (partial bitmap, other)
ok 115 - counting objects via bitmap (partial bitmap, other)
ok 116 - enumerate commits (partial bitmap, other)
ok 117 - enumerate --objects (partial bitmap, other)
ok 118 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 119 - fetch (partial bitmap)
ok 120 - enumerating progress counts pack-reused objects
ok 121 - pack-objects respects --local (non-local loose)
ok 122 - pack-objects respects --honor-pack-keep (local non-bitmapped pack)
ok 123 - pack-objects respects --local (non-local pack)
ok 124 - pack-objects respects --honor-pack-keep (local bitmapped pack)
ok 125 - pack-objects respects --local (non-local bitmapped pack)
ok 126 - pack-objects to file can use bitmap
ok 127 - full repack, reusing previous bitmaps
ok 128 - fetch (full bitmap)
ok 129 - create objects for missing-HAVE tests
ok 130 - pack-objects respects --incremental
ok 131 - pack with missing blob
ok 132 - pack with missing tree
ok 133 - pack with missing parent
ok 134 # skip we can read jgit bitmaps (missing JGIT of JGIT,SHA1)
ok 135 # skip jgit can read our bitmaps (missing JGIT of JGIT,SHA1)
ok 136 - splitting packs does not generate bogus bitmaps
ok 137 - set up reusable pack
ok 138 - pack reuse respects --honor-pack-keep
ok 139 - pack reuse respects --local
ok 140 - pack reuse respects --incremental
ok 141 - truncated bitmap fails gracefully (ewah)
ok 142 - truncated bitmap fails gracefully (cache)
ok 143 - set up thin delta-reuse parent
ok 144 - fetch without bitmaps ignores delta against old base
ok 145 - fetch with bitmaps can reuse old base
ok 146 - pack.preferBitmapTips
ok 147 - pack.preferBitmapTips
ok 148 - complains about multiple pack bitmaps
ok 149 - incremental repack fails when bitmaps are requested
ok 150 - incremental repack can disable bitmaps
ok 151 - boundary-based traversal is used when requested
ok 152 - setup test repository
ok 153 - setup repo with moderate-sized history
ok 154 - setup writing bitmaps during repack
ok 155 - full repack creates bitmaps
ok 156 - rev-list --test-bitmap verifies bitmaps
ok 157 - counting commits via bitmap (full bitmap, second)
ok 158 - counting partial commits via bitmap (full bitmap, second)
ok 159 - counting commits with limit (full bitmap, second)
ok 160 - counting non-linear history (full bitmap, second)
ok 161 - counting commits with limiting (full bitmap, second)
ok 162 - counting objects via bitmap (full bitmap, second)
ok 163 - enumerate commits (full bitmap, second)
ok 164 - enumerate --objects (full bitmap, second)
ok 165 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 166 - counting commits via bitmap (full bitmap, other)
ok 167 - counting partial commits via bitmap (full bitmap, other)
ok 168 - counting commits with limit (full bitmap, other)
ok 169 - counting non-linear history (full bitmap, other)
ok 170 - counting commits with limiting (full bitmap, other)
ok 171 - counting objects via bitmap (full bitmap, other)
ok 172 - enumerate commits (full bitmap, other)
ok 173 - enumerate --objects (full bitmap, other)
ok 174 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 175 - clone from bitmapped repository
ok 176 - partial clone from bitmapped repository
ok 177 - setup further non-bitmapped commits
ok 178 - counting commits via bitmap (partial bitmap, second)
ok 179 - counting partial commits via bitmap (partial bitmap, second)
ok 180 - counting commits with limit (partial bitmap, second)
ok 181 - counting non-linear history (partial bitmap, second)
ok 182 - counting commits with limiting (partial bitmap, second)
ok 183 - counting objects via bitmap (partial bitmap, second)
ok 184 - enumerate commits (partial bitmap, second)
ok 185 - enumerate --objects (partial bitmap, second)
ok 186 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 187 - counting commits via bitmap (partial bitmap, other)
ok 188 - counting partial commits via bitmap (partial bitmap, other)
ok 189 - counting commits with limit (partial bitmap, other)
ok 190 - counting non-linear history (partial bitmap, other)
ok 191 - counting commits with limiting (partial bitmap, other)
ok 192 - counting objects via bitmap (partial bitmap, other)
ok 193 - enumerate commits (partial bitmap, other)
ok 194 - enumerate --objects (partial bitmap, other)
ok 195 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 196 - fetch (partial bitmap)
ok 197 - enumerating progress counts pack-reused objects
ok 198 - pack-objects respects --local (non-local loose)
ok 199 - pack-objects respects --honor-pack-keep (local non-bitmapped pack)
ok 200 - pack-objects respects --local (non-local pack)
ok 201 - pack-objects respects --honor-pack-keep (local bitmapped pack)
ok 202 - pack-objects respects --local (non-local bitmapped pack)
ok 203 - pack-objects to file can use bitmap
ok 204 - full repack, reusing previous bitmaps
ok 205 - fetch (full bitmap)
ok 206 - create objects for missing-HAVE tests
ok 207 - pack-objects respects --incremental
ok 208 - pack with missing blob
ok 209 - pack with missing tree
ok 210 - pack with missing parent
ok 211 # skip we can read jgit bitmaps (missing JGIT of JGIT,SHA1)
ok 212 # skip jgit can read our bitmaps (missing JGIT of JGIT,SHA1)
ok 213 - splitting packs does not generate bogus bitmaps
ok 214 - set up reusable pack
ok 215 - pack reuse respects --honor-pack-keep
ok 216 - pack reuse respects --local
ok 217 - pack reuse respects --incremental
ok 218 - truncated bitmap fails gracefully (ewah)
ok 219 - truncated bitmap fails gracefully (cache)
ok 220 - set up thin delta-reuse parent
ok 221 - fetch without bitmaps ignores delta against old base
ok 222 - fetch with bitmaps can reuse old base
ok 223 - pack.preferBitmapTips
ok 224 - pack.preferBitmapTips
ok 225 - complains about multiple pack bitmaps
ok 226 - verify writing bitmap lookup table when enabled
ok 227 - truncated bitmap fails gracefully (lookup table)
# passed all 227 test(s)
1..227
*** t5311-pack-bitmaps-shallow.sh ***
ok 1 - setup shallow repo
ok 2 - turn on bitmaps in the parent
ok 3 - shallow fetch from bitmapped repo
ok 4 - setup shallow repo
ok 5 - turn on bitmaps in the parent
ok 6 - shallow fetch from bitmapped repo
# passed all 6 test(s)
1..6
*** t5312-prune-corruption.sh ***
ok 1 - disable reflogs
ok 2 - create history reachable only from a bogus-named ref
ok 3 - pruning does not drop bogus object
ok 4 - put bogus object into pack
ok 5 - non-destructive repack bails on bogus ref
ok 6 - GIT_REF_PARANOIA=0 overrides safety
ok 7 - destructive repack keeps packed object
ok 8 - destructive repack not confused by dangling symref
ok 9 - create history with missing tip commit
ok 10 - pruning with a corrupted tip does not drop history
ok 11 - pack-refs does not silently delete broken loose ref
# passed all 11 test(s)
1..11
*** t5313-pack-bounds-checks.sh ***
ok 1 - setup
ok 2 - set up base packfile and variables
ok 3 - pack/index object count mismatch
ok 4 - matched bogus object count
ok 5 - bogus object offset (v1)
ok 6 - bogus object offset (v2, no msb)
ok 7 - bogus offset into v2 extended table
ok 8 - bogus offset inside v2 extended table
ok 9 - bogus OFS_DELTA in packfile
# passed all 9 test(s)
1..9
*** t5314-pack-cycle-detection.sh ***
ok 1 - setup
ok 2 - repack
# passed all 2 test(s)
1..2
*** t5315-pack-objects-compression.sh ***
ok 1 - setup
ok 2 - pack-objects with -c core.compression=0
ok 3 - pack-objects with -c core.compression=9
ok 4 - pack-objects with -c core.compression=0 -c pack.compression=0
ok 5 - pack-objects with -c core.compression=9 -c pack.compression=0
ok 6 - pack-objects with -c core.compression=0 -c pack.compression=9
ok 7 - pack-objects with -c core.compression=9 -c pack.compression=9
ok 8 - pack-objects with -c pack.compression=0
ok 9 - pack-objects with -c pack.compression=9
# passed all 9 test(s)
1..9
*** t5316-pack-delta-depth.sh ***
ok 1 - create series of packs
ok 2 - packing produces a long delta
ok 3 - --depth limits depth
ok 4 - --depth=0 disables deltas
ok 5 - negative depth disables deltas
# passed all 5 test(s)
1..5
*** t5317-pack-objects-filter-objects.sh ***
ok 1 - setup r1
ok 2 - verify blob count in normal packfile
ok 3 - verify blob:none packfile has no blobs
ok 4 - verify blob:none packfile without --stdout
ok 5 - verify normal and blob:none packfiles have same commits/trees
ok 6 - get an error for missing tree object
ok 7 - setup for tests of tree:0
ok 8 - verify tree:0 packfile has no blobs or trees
ok 9 - grab tree directly when using tree:0
ok 10 - setup r2
ok 11 - verify blob count in normal packfile
ok 12 - verify blob:limit=500 omits all blobs
ok 13 - verify blob:limit=1000
ok 14 - verify blob:limit=1001
ok 15 - verify blob:limit=10001
ok 16 - verify blob:limit=1k
ok 17 - verify explicitly specifying oversized blob in input
ok 18 - verify blob:limit=1m
ok 19 - verify normal and blob:limit packfiles have same commits/trees
ok 20 - verify small limit and big limit results in small limit
ok 21 - verify big limit and small limit results in small limit
ok 22 - setup r3
ok 23 - verify blob count in normal packfile
ok 24 - verify sparse:path=pattern1 fails
ok 25 - verify sparse:path=pattern2 fails
ok 26 - setup r4
ok 27 - verify blob count in normal packfile
ok 28 - verify sparse:oid=OID
ok 29 - verify sparse:oid=oid-ish
ok 30 - setup r1 - delete loose blobs
ok 31 - verify pack-objects fails w/ missing objects
ok 32 - verify pack-objects fails w/ --missing=error
ok 33 - verify pack-objects w/ --missing=allow-any
# passed all 33 test(s)
1..33
*** t5318-commit-graph.sh ***
ok 1 - usage
ok 2 - usage shown without sub-command
ok 3 - usage shown with an error on unknown sub-command
ok 4 - setup full repo
ok 5 - tweak umask for modebit tests
ok 6 - verify graph with no graph file
ok 7 - write graph with no packs
ok 8 - exit with correct error on bad input to --stdin-packs
ok 9 - create commits and repack
ok 10 - check normal git operations: no graph
ok 11 - exit with correct error on bad input to --stdin-commits
ok 12 - write graph
ok 13 - write graph has correct permissions
ok 14 - check normal git operations: graph exists
ok 15 - Add more commits
ok 16 - commit-graph write progress off for redirected stderr
ok 17 - commit-graph write force progress on for stderr
ok 18 - commit-graph write with the --no-progress option
ok 19 - commit-graph write --stdin-commits progress off for redirected stderr
ok 20 - commit-graph write --stdin-commits force progress on for stderr
ok 21 - commit-graph write --stdin-commits with the --no-progress option
ok 22 - commit-graph verify progress off for redirected stderr
ok 23 - commit-graph verify force progress on for stderr
ok 24 - commit-graph verify with the --no-progress option
ok 25 - write graph with merges
ok 26 - check normal git operations: merge 1 vs 2
ok 27 - check normal git operations: merge 1 vs 3
ok 28 - check normal git operations: merge 2 vs 3
ok 29 - Add one more commit
ok 30 - check normal git operations: mixed mode, commit 8 vs merge 1
ok 31 - check normal git operations: mixed mode, commit 8 vs merge 2
ok 32 - write graph with new commit
ok 33 - check normal git operations: full graph, commit 8 vs merge 1
ok 34 - check normal git operations: full graph, commit 8 vs merge 2
ok 35 - write graph with nothing new
ok 36 - check normal git operations: cleared graph, commit 8 vs merge 1
ok 37 - check normal git operations: cleared graph, commit 8 vs merge 2
ok 38 - build graph from latest pack with closure
ok 39 - check normal git operations: graph from pack, commit 8 vs merge 1
ok 40 - check normal git operations: graph from pack, commit 8 vs merge 2
ok 41 - build graph from commits with closure
ok 42 - check normal git operations: graph from commits, commit 8 vs merge 1
ok 43 - check normal git operations: graph from commits, commit 8 vs merge 2
ok 44 - build graph from commits with append
ok 45 - check normal git operations: append graph, commit 8 vs merge 1
ok 46 - check normal git operations: append graph, commit 8 vs merge 2
ok 47 - build graph using --reachable
ok 48 - check normal git operations: append graph, commit 8 vs merge 1
ok 49 - check normal git operations: append graph, commit 8 vs merge 2
ok 50 - setup bare repo
ok 51 - check normal git operations: bare repo, commit 8 vs merge 1
ok 52 - check normal git operations: bare repo, commit 8 vs merge 2
ok 53 - write graph in bare repo
ok 54 - check normal git operations: bare repo with graph, commit 8 vs merge 1
ok 55 - check normal git operations: bare repo with graph, commit 8 vs merge 2
ok 56 - perform fast-forward merge in full repo
ok 57 - check that gc computes commit-graph
ok 58 - replace-objects invalidates commit-graph
ok 59 - commit grafts invalidate commit-graph
ok 60 - replace-objects invalidates commit-graph
ok 61 - warn on improper hash version
ok 62 - lower layers have overflow chunk
ok 63 - git commit-graph verify
ok 64 - detect permission problem
ok 65 - detect too small
ok 66 - detect bad signature
ok 67 - detect bad version
ok 68 - detect bad hash version
ok 69 - detect low chunk count
ok 70 - detect missing OID fanout chunk
ok 71 - detect missing OID lookup chunk
ok 72 - detect missing commit data chunk
ok 73 - detect incorrect fanout
ok 74 - detect incorrect fanout final value
ok 75 - detect incorrect OID order
ok 76 - detect OID not in object database
ok 77 - detect incorrect tree OID
ok 78 - detect incorrect parent int-id
ok 79 - detect extra parent int-id
ok 80 - detect wrong parent
ok 81 - detect incorrect generation number
ok 82 - detect incorrect commit date
ok 83 - detect incorrect parent for octopus merge
ok 84 - detect invalid checksum hash
ok 85 - detect incorrect chunk count
ok 86 - detect mixed generation numbers (non-zero to zero)
ok 87 - detect mixed generation numbers (zero to non-zero)
ok 88 - git fsck (checks commit-graph when config set to true)
ok 89 - git fsck (ignores commit-graph when config set to false)
ok 90 - git fsck (checks commit-graph when config unset)
ok 91 - git fsck shows commit-graph output with --progress
ok 92 - git fsck suppresses commit-graph output with --no-progress
ok 93 - setup non-the_repository tests
ok 94 - parse_commit_in_graph works for non-the_repository
ok 95 - get_commit_tree_in_graph works for non-the_repository
ok 96 - corrupt commit-graph write (broken parent)
ok 97 - corrupt commit-graph write (missing tree)
ok 98 - set up and verify repo with generation data overflow chunk
ok 99 - check normal git operations: generation data overflow chunk repo
ok 100 - overflow during generation version upgrade
ok 101 - reader notices too-small oid fanout chunk
ok 102 - reader notices fanout/lookup table mismatch
ok 103 - reader notices out-of-bounds fanout
ok 104 - reader notices too-small commit data chunk
ok 105 - reader notices out-of-bounds extra edge
ok 106 - reader notices too-small generations chunk
ok 107 - stale commit cannot be parsed when given directly
ok 108 - stale commit cannot be parsed when traversing graph
# passed all 108 test(s)
1..108
*** t5319-multi-pack-index.sh ***
ok 1 - setup
ok 2 - don't write midx with no packs
ok 3 - warn if a midx contains no oid
ok 4 - create objects
ok 5 - write midx with one v1 pack
ok 6 - write midx with one v2 pack
ok 7 - check normal git operations: one v2 pack
ok 8 - corrupt idx reports errors
ok 9 - add more objects
ok 10 - write midx with two packs
ok 11 - check normal git operations: two packs
ok 12 - write midx with --stdin-packs
ok 13 - check normal git operations: mixed mode (one pack + extra)
ok 14 - write with no objects and preferred pack
ok 15 - write progress off for redirected stderr
ok 16 - write force progress on for stderr
ok 17 - write with the --no-progress option
ok 18 - add more packs
ok 19 - check normal git operations: mixed mode (two packs + extra)
ok 20 - write midx with twelve packs
ok 21 - check normal git operations: twelve packs
ok 22 - multi-pack-index *.rev cleanup with --object-dir
ok 23 - warn on improper hash version
ok 24 - midx picks objects from preferred pack
ok 25 - preferred packs must be non-empty
ok 26 - verify multi-pack-index success
ok 27 - verify progress off for redirected stderr
ok 28 - verify force progress on for stderr
ok 29 - verify with the --no-progress option
ok 30 - verify bad signature
ok 31 - verify bad version
ok 32 - verify bad OID version
ok 33 - verify truncated chunk count
ok 34 - verify extended chunk count
ok 35 - verify missing required chunk
ok 36 - verify invalid chunk offset
ok 37 - verify packnames out of order
ok 38 - verify packnames out of order
ok 39 - verify oid fanout out of order
ok 40 - verify oid lookup out of order
ok 41 - verify incorrect pack-int-id
ok 42 - verify incorrect offset
ok 43 - git-fsck incorrect offset
ok 44 - git fsck shows MIDX output with --progress
ok 45 - git fsck suppresses MIDX output with --no-progress
ok 46 - corrupt MIDX is not reused
ok 47 - verify incorrect checksum
ok 48 - repack progress off for redirected stderr
ok 49 - repack force progress on for stderr
ok 50 - repack with the --no-progress option
ok 51 - repack removes multi-pack-index when deleting packs
ok 52 - repack preserves multi-pack-index when creating packs
ok 53 - check normal git operations: after repack
ok 54 - multi-pack-index and pack-bitmap
ok 55 - multi-pack-index and alternates
ok 56 - check normal git operations: with alternate (local midx)
ok 57 - multi-pack-index in an alternate
ok 58 - check normal git operations: with alternate (remote midx)
ok 59 - force some 64-bit offsets with pack-objects
ok 60 - verify multi-pack-index with 64-bit offsets
ok 61 - verify incorrect 64-bit offset
ok 62 - setup expire tests
ok 63 - expire does not remove any packs
ok 64 - expire progress off for redirected stderr
ok 65 - expire force progress on for stderr
ok 66 - expire with the --no-progress option
ok 67 - expire removes unreferenced packs
ok 68 - repack with minimum size does not alter existing packs
ok 69 - repack respects repack.packKeptObjects=false
ok 70 - repack creates a new pack
ok 71 - repack (all) ignores cruft pack
ok 72 - repack (--batch-size) ignores cruft pack
ok 73 - expire removes repacked packs
ok 74 - expire works when adding new packs
ok 75 - expire respects .keep files
ok 76 - expiring unreferenced cruft pack retains pack
ok 77 - repack --batch-size=0 repacks everything
ok 78 - repack --batch-size=<large> repacks everything
ok 79 - load reverse index when missing .idx, .pack
ok 80 - usage shown without sub-command
ok 81 - complains when run outside of a repository
ok 82 - repack with delta islands
ok 83 - reader notices too-small oid fanout chunk
ok 84 - reader notices too-small oid lookup chunk
ok 85 - reader notices too-small pack names chunk
ok 86 - reader handles unaligned chunks
ok 87 - reader notices too-small object offset chunk
ok 88 - reader bounds-checks large offset table
ok 89 - reader notices too-small revindex chunk
ok 90 - reader notices out-of-bounds fanout
ok 91 - bitmapped packs are stored via the BTMP chunk
# passed all 91 test(s)
1..91
*** t5320-delta-islands.sh ***
ok 1 - setup commits
ok 2 - vanilla repack deltas one against two
ok 3 - island repack with no island definition is vanilla
ok 4 - island repack with no matches is vanilla
ok 5 - separate islands disallows delta
ok 6 - same island allows delta
ok 7 - coalesce same-named islands
ok 8 - island restrictions drop reused deltas
ok 9 - island regexes are left-anchored
ok 10 - island regexes follow last-one-wins scheme
ok 11 - setup shared history
ok 12 - vanilla delta goes between branches
ok 13 - deltas allowed against superset islands
ok 14 - island core places core objects first
ok 15 - unmatched island core is not fatal
# passed all 15 test(s)
1..15
*** t5321-pack-large-objects.sh ***
ok 1 - setup
ok 2 - repack large deltas
# passed all 2 test(s)
1..2
*** t5322-pack-objects-sparse.sh ***
ok 1 - setup repo
ok 2 - non-sparse pack-objects
ok 3 - sparse pack-objects
ok 4 - duplicate a folder from f3 and commit to topic1
ok 5 - non-sparse pack-objects
ok 6 - sparse pack-objects
ok 7 - duplicate a folder from f1 into f3
ok 8 - non-sparse pack-objects
ok 9 - sparse pack-objects
ok 10 - pack.useSparse enables algorithm
ok 11 - pack.useSparse overridden
# passed all 11 test(s)
1..11
*** t5323-pack-redundant.sh ***
ok 1 - setup main repo
ok 2 - main: pack-redundant works with no packfile
ok 3 - main: pack-redundant works with one packfile
ok 4 - main: no redundant for pack 1, 2, 3
ok 5 - main: one of pack-2/pack-3 is redundant
ok 6 - main: pack 2, 4, and 6 are redundant
ok 7 - main: pack-8 (subset of pack-1) is also redundant
ok 8 - main: clean loose objects
ok 9 - main: remove redundant packs and pass fsck
ok 10 - setup shared.git
ok 11 - shared: all packs are redundant, but no output without --alt-odb
ok 12 - shared: show redundant packs in stderr for verbose mode
ok 13 - shared: remove redundant packs, no packs left
ok 14 - shared: create new objects and packs
ok 15 - shared: no redundant without --alt-odb
ok 16 - shared: one pack is redundant with --alt-odb
ok 17 - shared: ignore unique objects and all two packs are redundant
# passed all 17 test(s)
1..17
*** t5324-split-commit-graph.sh ***
ok 1 - setup repo
ok 2 - tweak umask for modebit tests
ok 3 - create commits and write commit-graph
ok 4 - check normal git operations: graph exists
ok 5 - add more commits, and write a new base graph
ok 6 - fork and fail to base a chain on a commit-graph file
ok 7 - add three more commits, write a tip graph
ok 8 - check normal git operations: split commit-graph: merge 3 vs 2
ok 9 - add one commit, write a tip graph
ok 10 - check normal git operations: three-layer commit-graph: commit 11 vs 6
ok 11 - add one commit, write a merged graph
ok 12 - check normal git operations: merged commit-graph: commit 12 vs 6
ok 13 - create fork and chain across alternate
ok 14 - check normal git operations: alternate: commit 13 vs 6
ok 15 - test merge stragety constants
ok 16 - remove commit-graph-chain file after flattening
ok 17 - verify hashes along chain, even in shallow
ok 18 - verify notices chain slice which is bogus (base)
ok 19 - verify notices chain slice which is bogus (tip)
ok 20 - verify --shallow does not check base contents
ok 21 - warn on base graph chunk incorrect
ok 22 - verify after commit-graph-chain corruption (base)
ok 23 - verify after commit-graph-chain corruption (tip)
ok 24 - verify notices too-short chain file
ok 25 - verify across alternates
ok 26 - reader bounds-checks base-graph chunk
ok 27 - add octopus merge
ok 28 - check normal git operations: graph exists
ok 29 - split across alternate where alternate is not split
ok 30 - --split=no-merge always writes an incremental
ok 31 - --split=replace replaces the chain
ok 32 - handles file descriptor exhaustion
ok 33 - split commit-graph respects core.sharedrepository 0666
ok 34 - split commit-graph respects core.sharedrepository 0600
ok 35 - --split=replace with partial Bloom data
ok 36 - prevent regression for duplicate commits across layers
ok 37 - setup repo for mixed generation commit-graph-chain
ok 38 - do not write generation data chunk if not present on existing tip
ok 39 - do not write generation data chunk if the topmost remaining layer does not have generation data chunk
ok 40 - write generation data chunk if topmost remaining layer has generation data chunk
ok 41 - write generation data chunk when commit-graph chain is replaced
# passed all 41 test(s)
1..41
*** t5325-reverse-index.sh ***
ok 1 - setup
ok 2 - index-pack with pack.writeReverseIndex
ok 3 - index-pack with --[no-]rev-index
ok 4 - index-pack can verify reverse indexes
ok 5 - index-pack infers reverse index name with -o
ok 6 - pack-objects respects pack.writeReverseIndex
ok 7 - reverse index is not generated when available on disk
ok 8 - reverse index is ignored when pack.readReverseIndex is false
ok 9 - revindex in-memory vs on-disk
ok 10 - fsck succeeds on good rev-index
ok 11 - set up rev-index corruption tests
ok 12 - fsck catches invalid checksum
ok 13 - fsck catches invalid row position
ok 14 - fsck catches invalid header: magic number
ok 15 - fsck catches invalid header: version
ok 16 - fsck catches invalid header: hash function
# passed all 16 test(s)
1..16
*** t5326-multi-pack-bitmaps.sh ***
ok 1 - setup test_repository
ok 2 - setup repo with moderate-sized history
ok 3 - create single-pack midx with bitmaps
ok 4 - reverse index exists (midx)
ok 5 - rev-list --test-bitmap verifies bitmaps
ok 6 - counting commits via bitmap (full bitmap, second)
ok 7 - counting partial commits via bitmap (full bitmap, second)
ok 8 - counting commits with limit (full bitmap, second)
ok 9 - counting non-linear history (full bitmap, second)
ok 10 - counting commits with limiting (full bitmap, second)
ok 11 - counting objects via bitmap (full bitmap, second)
ok 12 - enumerate commits (full bitmap, second)
ok 13 - enumerate --objects (full bitmap, second)
ok 14 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 15 - counting commits via bitmap (full bitmap, other)
ok 16 - counting partial commits via bitmap (full bitmap, other)
ok 17 - counting commits with limit (full bitmap, other)
ok 18 - counting non-linear history (full bitmap, other)
ok 19 - counting commits with limiting (full bitmap, other)
ok 20 - counting objects via bitmap (full bitmap, other)
ok 21 - enumerate commits (full bitmap, other)
ok 22 - enumerate --objects (full bitmap, other)
ok 23 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 24 - clone from bitmapped repository
ok 25 - partial clone from bitmapped repository
ok 26 - setup further non-bitmapped commits
ok 27 - counting commits via bitmap (partial bitmap, second)
ok 28 - counting partial commits via bitmap (partial bitmap, second)
ok 29 - counting commits with limit (partial bitmap, second)
ok 30 - counting non-linear history (partial bitmap, second)
ok 31 - counting commits with limiting (partial bitmap, second)
ok 32 - counting objects via bitmap (partial bitmap, second)
ok 33 - enumerate commits (partial bitmap, second)
ok 34 - enumerate --objects (partial bitmap, second)
ok 35 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 36 - counting commits via bitmap (partial bitmap, other)
ok 37 - counting partial commits via bitmap (partial bitmap, other)
ok 38 - counting commits with limit (partial bitmap, other)
ok 39 - counting non-linear history (partial bitmap, other)
ok 40 - counting commits with limiting (partial bitmap, other)
ok 41 - counting objects via bitmap (partial bitmap, other)
ok 42 - enumerate commits (partial bitmap, other)
ok 43 - enumerate --objects (partial bitmap, other)
ok 44 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 45 - fetch (partial bitmap)
ok 46 - enumerating progress counts pack-reused objects
ok 47 - create new additional packs
ok 48 - create multi-pack midx with bitmaps
ok 49 - reverse index exists (midx)
ok 50 - rev-list --test-bitmap verifies bitmaps
ok 51 - counting commits via bitmap (full bitmap, second)
ok 52 - counting partial commits via bitmap (full bitmap, second)
ok 53 - counting commits with limit (full bitmap, second)
ok 54 - counting non-linear history (full bitmap, second)
ok 55 - counting commits with limiting (full bitmap, second)
ok 56 - counting objects via bitmap (full bitmap, second)
ok 57 - enumerate commits (full bitmap, second)
ok 58 - enumerate --objects (full bitmap, second)
ok 59 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 60 - counting commits via bitmap (full bitmap, other)
ok 61 - counting partial commits via bitmap (full bitmap, other)
ok 62 - counting commits with limit (full bitmap, other)
ok 63 - counting non-linear history (full bitmap, other)
ok 64 - counting commits with limiting (full bitmap, other)
ok 65 - counting objects via bitmap (full bitmap, other)
ok 66 - enumerate commits (full bitmap, other)
ok 67 - enumerate --objects (full bitmap, other)
ok 68 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 69 - clone from bitmapped repository
ok 70 - partial clone from bitmapped repository
ok 71 - setup further non-bitmapped commits
ok 72 - counting commits via bitmap (partial bitmap, second)
ok 73 - counting partial commits via bitmap (partial bitmap, second)
ok 74 - counting commits with limit (partial bitmap, second)
ok 75 - counting non-linear history (partial bitmap, second)
ok 76 - counting commits with limiting (partial bitmap, second)
ok 77 - counting objects via bitmap (partial bitmap, second)
ok 78 - enumerate commits (partial bitmap, second)
ok 79 - enumerate --objects (partial bitmap, second)
ok 80 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 81 - counting commits via bitmap (partial bitmap, other)
ok 82 - counting partial commits via bitmap (partial bitmap, other)
ok 83 - counting commits with limit (partial bitmap, other)
ok 84 - counting non-linear history (partial bitmap, other)
ok 85 - counting commits with limiting (partial bitmap, other)
ok 86 - counting objects via bitmap (partial bitmap, other)
ok 87 - enumerate commits (partial bitmap, other)
ok 88 - enumerate --objects (partial bitmap, other)
ok 89 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 90 - fetch (partial bitmap)
ok 91 - enumerating progress counts pack-reused objects
ok 92 - --no-bitmap is respected when bitmaps exist
ok 93 - setup midx with base from later pack
ok 94 - counting commits via bitmap (full bitmap with backwards delta, second)
ok 95 - counting partial commits via bitmap (full bitmap with backwards delta, second)
ok 96 - counting commits with limit (full bitmap with backwards delta, second)
ok 97 - counting non-linear history (full bitmap with backwards delta, second)
ok 98 - counting commits with limiting (full bitmap with backwards delta, second)
ok 99 - counting objects via bitmap (full bitmap with backwards delta, second)
ok 100 - enumerate commits (full bitmap with backwards delta, second)
ok 101 - enumerate --objects (full bitmap with backwards delta, second)
ok 102 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, second)
ok 103 - counting commits via bitmap (full bitmap with backwards delta, other)
ok 104 - counting partial commits via bitmap (full bitmap with backwards delta, other)
ok 105 - counting commits with limit (full bitmap with backwards delta, other)
ok 106 - counting non-linear history (full bitmap with backwards delta, other)
ok 107 - counting commits with limiting (full bitmap with backwards delta, other)
ok 108 - counting objects via bitmap (full bitmap with backwards delta, other)
ok 109 - enumerate commits (full bitmap with backwards delta, other)
ok 110 - enumerate --objects (full bitmap with backwards delta, other)
ok 111 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, other)
ok 112 - clone with bitmaps enabled
ok 113 - changing the preferred pack does not corrupt bitmaps
ok 114 - setup pack reuse tests (pack -> MIDX)
ok 115 - build bitmap from existing (pack -> MIDX)
ok 116 - verify resulting bitmaps (pack -> MIDX)
ok 117 - setup pack reuse tests (MIDX -> pack)
ok 118 - build bitmap from existing (MIDX -> pack)
ok 119 - verify resulting bitmaps (MIDX -> pack)
ok 120 - setup pack reuse tests (MIDX -> MIDX)
ok 121 - build bitmap from existing (MIDX -> MIDX)
ok 122 - verify resulting bitmaps (MIDX -> MIDX)
ok 123 - missing object closure fails gracefully
ok 124 - setup partial bitmaps
ok 125 - reverse index exists (midx)
ok 126 - rev-list --test-bitmap verifies bitmaps
ok 127 - counting commits via bitmap (full bitmap, second)
ok 128 - counting partial commits via bitmap (full bitmap, second)
ok 129 - counting commits with limit (full bitmap, second)
ok 130 - counting non-linear history (full bitmap, second)
ok 131 - counting commits with limiting (full bitmap, second)
ok 132 - counting objects via bitmap (full bitmap, second)
ok 133 - enumerate commits (full bitmap, second)
ok 134 - enumerate --objects (full bitmap, second)
ok 135 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 136 - counting commits via bitmap (full bitmap, other)
ok 137 - counting partial commits via bitmap (full bitmap, other)
ok 138 - counting commits with limit (full bitmap, other)
ok 139 - counting non-linear history (full bitmap, other)
ok 140 - counting commits with limiting (full bitmap, other)
ok 141 - counting objects via bitmap (full bitmap, other)
ok 142 - enumerate commits (full bitmap, other)
ok 143 - enumerate --objects (full bitmap, other)
ok 144 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 145 - clone from bitmapped repository
ok 146 - partial clone from bitmapped repository
ok 147 - setup further non-bitmapped commits
ok 148 - counting commits via bitmap (partial bitmap, second)
ok 149 - counting partial commits via bitmap (partial bitmap, second)
ok 150 - counting commits with limit (partial bitmap, second)
ok 151 - counting non-linear history (partial bitmap, second)
ok 152 - counting commits with limiting (partial bitmap, second)
ok 153 - counting objects via bitmap (partial bitmap, second)
ok 154 - enumerate commits (partial bitmap, second)
ok 155 - enumerate --objects (partial bitmap, second)
ok 156 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 157 - counting commits via bitmap (partial bitmap, other)
ok 158 - counting partial commits via bitmap (partial bitmap, other)
ok 159 - counting commits with limit (partial bitmap, other)
ok 160 - counting non-linear history (partial bitmap, other)
ok 161 - counting commits with limiting (partial bitmap, other)
ok 162 - counting objects via bitmap (partial bitmap, other)
ok 163 - enumerate commits (partial bitmap, other)
ok 164 - enumerate --objects (partial bitmap, other)
ok 165 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 166 - fetch (partial bitmap)
ok 167 - enumerating progress counts pack-reused objects
ok 168 - removing a MIDX clears stale bitmaps
ok 169 - pack.preferBitmapTips
ok 170 - writing a bitmap with --refs-snapshot
ok 171 - write a bitmap with --refs-snapshot (preferred tips)
ok 172 - hash-cache values are propagated from pack bitmaps
ok 173 - no .bitmap is written without any objects
ok 174 - graceful fallback when missing reverse index
ok 175 - setup test_repository
ok 176 - setup repo with moderate-sized history
ok 177 - create single-pack midx with bitmaps
ok 178 - reverse index exists (midx)
ok 179 - rev-list --test-bitmap verifies bitmaps
ok 180 - counting commits via bitmap (full bitmap, second)
ok 181 - counting partial commits via bitmap (full bitmap, second)
ok 182 - counting commits with limit (full bitmap, second)
ok 183 - counting non-linear history (full bitmap, second)
ok 184 - counting commits with limiting (full bitmap, second)
ok 185 - counting objects via bitmap (full bitmap, second)
ok 186 - enumerate commits (full bitmap, second)
ok 187 - enumerate --objects (full bitmap, second)
ok 188 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 189 - counting commits via bitmap (full bitmap, other)
ok 190 - counting partial commits via bitmap (full bitmap, other)
ok 191 - counting commits with limit (full bitmap, other)
ok 192 - counting non-linear history (full bitmap, other)
ok 193 - counting commits with limiting (full bitmap, other)
ok 194 - counting objects via bitmap (full bitmap, other)
ok 195 - enumerate commits (full bitmap, other)
ok 196 - enumerate --objects (full bitmap, other)
ok 197 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 198 - clone from bitmapped repository
ok 199 - partial clone from bitmapped repository
ok 200 - setup further non-bitmapped commits
ok 201 - counting commits via bitmap (partial bitmap, second)
ok 202 - counting partial commits via bitmap (partial bitmap, second)
ok 203 - counting commits with limit (partial bitmap, second)
ok 204 - counting non-linear history (partial bitmap, second)
ok 205 - counting commits with limiting (partial bitmap, second)
ok 206 - counting objects via bitmap (partial bitmap, second)
ok 207 - enumerate commits (partial bitmap, second)
ok 208 - enumerate --objects (partial bitmap, second)
ok 209 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 210 - counting commits via bitmap (partial bitmap, other)
ok 211 - counting partial commits via bitmap (partial bitmap, other)
ok 212 - counting commits with limit (partial bitmap, other)
ok 213 - counting non-linear history (partial bitmap, other)
ok 214 - counting commits with limiting (partial bitmap, other)
ok 215 - counting objects via bitmap (partial bitmap, other)
ok 216 - enumerate commits (partial bitmap, other)
ok 217 - enumerate --objects (partial bitmap, other)
ok 218 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 219 - fetch (partial bitmap)
ok 220 - enumerating progress counts pack-reused objects
ok 221 - create new additional packs
ok 222 - create multi-pack midx with bitmaps
ok 223 - reverse index exists (midx)
ok 224 - rev-list --test-bitmap verifies bitmaps
ok 225 - counting commits via bitmap (full bitmap, second)
ok 226 - counting partial commits via bitmap (full bitmap, second)
ok 227 - counting commits with limit (full bitmap, second)
ok 228 - counting non-linear history (full bitmap, second)
ok 229 - counting commits with limiting (full bitmap, second)
ok 230 - counting objects via bitmap (full bitmap, second)
ok 231 - enumerate commits (full bitmap, second)
ok 232 - enumerate --objects (full bitmap, second)
ok 233 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 234 - counting commits via bitmap (full bitmap, other)
ok 235 - counting partial commits via bitmap (full bitmap, other)
ok 236 - counting commits with limit (full bitmap, other)
ok 237 - counting non-linear history (full bitmap, other)
ok 238 - counting commits with limiting (full bitmap, other)
ok 239 - counting objects via bitmap (full bitmap, other)
ok 240 - enumerate commits (full bitmap, other)
ok 241 - enumerate --objects (full bitmap, other)
ok 242 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 243 - clone from bitmapped repository
ok 244 - partial clone from bitmapped repository
ok 245 - setup further non-bitmapped commits
ok 246 - counting commits via bitmap (partial bitmap, second)
ok 247 - counting partial commits via bitmap (partial bitmap, second)
ok 248 - counting commits with limit (partial bitmap, second)
ok 249 - counting non-linear history (partial bitmap, second)
ok 250 - counting commits with limiting (partial bitmap, second)
ok 251 - counting objects via bitmap (partial bitmap, second)
ok 252 - enumerate commits (partial bitmap, second)
ok 253 - enumerate --objects (partial bitmap, second)
ok 254 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 255 - counting commits via bitmap (partial bitmap, other)
ok 256 - counting partial commits via bitmap (partial bitmap, other)
ok 257 - counting commits with limit (partial bitmap, other)
ok 258 - counting non-linear history (partial bitmap, other)
ok 259 - counting commits with limiting (partial bitmap, other)
ok 260 - counting objects via bitmap (partial bitmap, other)
ok 261 - enumerate commits (partial bitmap, other)
ok 262 - enumerate --objects (partial bitmap, other)
ok 263 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 264 - fetch (partial bitmap)
ok 265 - enumerating progress counts pack-reused objects
ok 266 - --no-bitmap is respected when bitmaps exist
ok 267 - setup midx with base from later pack
ok 268 - counting commits via bitmap (full bitmap with backwards delta, second)
ok 269 - counting partial commits via bitmap (full bitmap with backwards delta, second)
ok 270 - counting commits with limit (full bitmap with backwards delta, second)
ok 271 - counting non-linear history (full bitmap with backwards delta, second)
ok 272 - counting commits with limiting (full bitmap with backwards delta, second)
ok 273 - counting objects via bitmap (full bitmap with backwards delta, second)
ok 274 - enumerate commits (full bitmap with backwards delta, second)
ok 275 - enumerate --objects (full bitmap with backwards delta, second)
ok 276 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, second)
ok 277 - counting commits via bitmap (full bitmap with backwards delta, other)
ok 278 - counting partial commits via bitmap (full bitmap with backwards delta, other)
ok 279 - counting commits with limit (full bitmap with backwards delta, other)
ok 280 - counting non-linear history (full bitmap with backwards delta, other)
ok 281 - counting commits with limiting (full bitmap with backwards delta, other)
ok 282 - counting objects via bitmap (full bitmap with backwards delta, other)
ok 283 - enumerate commits (full bitmap with backwards delta, other)
ok 284 - enumerate --objects (full bitmap with backwards delta, other)
ok 285 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, other)
ok 286 - clone with bitmaps enabled
ok 287 - changing the preferred pack does not corrupt bitmaps
ok 288 - setup pack reuse tests (pack -> MIDX)
ok 289 - build bitmap from existing (pack -> MIDX)
ok 290 - verify resulting bitmaps (pack -> MIDX)
ok 291 - setup pack reuse tests (MIDX -> pack)
ok 292 - build bitmap from existing (MIDX -> pack)
ok 293 - verify resulting bitmaps (MIDX -> pack)
ok 294 - setup pack reuse tests (MIDX -> MIDX)
ok 295 - build bitmap from existing (MIDX -> MIDX)
ok 296 - verify resulting bitmaps (MIDX -> MIDX)
ok 297 - missing object closure fails gracefully
ok 298 - setup partial bitmaps
ok 299 - reverse index exists (midx)
ok 300 - rev-list --test-bitmap verifies bitmaps
ok 301 - counting commits via bitmap (full bitmap, second)
ok 302 - counting partial commits via bitmap (full bitmap, second)
ok 303 - counting commits with limit (full bitmap, second)
ok 304 - counting non-linear history (full bitmap, second)
ok 305 - counting commits with limiting (full bitmap, second)
ok 306 - counting objects via bitmap (full bitmap, second)
ok 307 - enumerate commits (full bitmap, second)
ok 308 - enumerate --objects (full bitmap, second)
ok 309 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 310 - counting commits via bitmap (full bitmap, other)
ok 311 - counting partial commits via bitmap (full bitmap, other)
ok 312 - counting commits with limit (full bitmap, other)
ok 313 - counting non-linear history (full bitmap, other)
ok 314 - counting commits with limiting (full bitmap, other)
ok 315 - counting objects via bitmap (full bitmap, other)
ok 316 - enumerate commits (full bitmap, other)
ok 317 - enumerate --objects (full bitmap, other)
ok 318 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 319 - clone from bitmapped repository
ok 320 - partial clone from bitmapped repository
ok 321 - setup further non-bitmapped commits
ok 322 - counting commits via bitmap (partial bitmap, second)
ok 323 - counting partial commits via bitmap (partial bitmap, second)
ok 324 - counting commits with limit (partial bitmap, second)
ok 325 - counting non-linear history (partial bitmap, second)
ok 326 - counting commits with limiting (partial bitmap, second)
ok 327 - counting objects via bitmap (partial bitmap, second)
ok 328 - enumerate commits (partial bitmap, second)
ok 329 - enumerate --objects (partial bitmap, second)
ok 330 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 331 - counting commits via bitmap (partial bitmap, other)
ok 332 - counting partial commits via bitmap (partial bitmap, other)
ok 333 - counting commits with limit (partial bitmap, other)
ok 334 - counting non-linear history (partial bitmap, other)
ok 335 - counting commits with limiting (partial bitmap, other)
ok 336 - counting objects via bitmap (partial bitmap, other)
ok 337 - enumerate commits (partial bitmap, other)
ok 338 - enumerate --objects (partial bitmap, other)
ok 339 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 340 - fetch (partial bitmap)
ok 341 - enumerating progress counts pack-reused objects
ok 342 - removing a MIDX clears stale bitmaps
ok 343 - pack.preferBitmapTips
ok 344 - writing a bitmap with --refs-snapshot
ok 345 - write a bitmap with --refs-snapshot (preferred tips)
ok 346 - hash-cache values are propagated from pack bitmaps
ok 347 - no .bitmap is written without any objects
ok 348 - graceful fallback when missing reverse index
ok 349 - multi-pack-index write writes lookup table if enabled
ok 350 - preferred pack change with existing MIDX bitmap
ok 351 - tagged commits are selected for bitmapping
ok 352 - git fsck correctly identifies good and bad bitmaps
ok 353 - corrupt MIDX with bitmap causes fallback
ok 354 - reading MIDX without BTMP chunk does not complain with single pack reuse
ok 355 - reading MIDX without BTMP chunk does not complain with multi pack reuse
# passed all 355 test(s)
1..355
*** t5327-multi-pack-bitmaps-rev.sh ***
ok 1 - setup bitmap config
ok 2 - setup repo with moderate-sized history
ok 3 - create single-pack midx with bitmaps
ok 4 - reverse index exists (rev)
ok 5 - rev-list --test-bitmap verifies bitmaps
ok 6 - counting commits via bitmap (full bitmap, second)
ok 7 - counting partial commits via bitmap (full bitmap, second)
ok 8 - counting commits with limit (full bitmap, second)
ok 9 - counting non-linear history (full bitmap, second)
ok 10 - counting commits with limiting (full bitmap, second)
ok 11 - counting objects via bitmap (full bitmap, second)
ok 12 - enumerate commits (full bitmap, second)
ok 13 - enumerate --objects (full bitmap, second)
ok 14 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 15 - counting commits via bitmap (full bitmap, other)
ok 16 - counting partial commits via bitmap (full bitmap, other)
ok 17 - counting commits with limit (full bitmap, other)
ok 18 - counting non-linear history (full bitmap, other)
ok 19 - counting commits with limiting (full bitmap, other)
ok 20 - counting objects via bitmap (full bitmap, other)
ok 21 - enumerate commits (full bitmap, other)
ok 22 - enumerate --objects (full bitmap, other)
ok 23 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 24 - clone from bitmapped repository
ok 25 - partial clone from bitmapped repository
ok 26 - setup further non-bitmapped commits
ok 27 - counting commits via bitmap (partial bitmap, second)
ok 28 - counting partial commits via bitmap (partial bitmap, second)
ok 29 - counting commits with limit (partial bitmap, second)
ok 30 - counting non-linear history (partial bitmap, second)
ok 31 - counting commits with limiting (partial bitmap, second)
ok 32 - counting objects via bitmap (partial bitmap, second)
ok 33 - enumerate commits (partial bitmap, second)
ok 34 - enumerate --objects (partial bitmap, second)
ok 35 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 36 - counting commits via bitmap (partial bitmap, other)
ok 37 - counting partial commits via bitmap (partial bitmap, other)
ok 38 - counting commits with limit (partial bitmap, other)
ok 39 - counting non-linear history (partial bitmap, other)
ok 40 - counting commits with limiting (partial bitmap, other)
ok 41 - counting objects via bitmap (partial bitmap, other)
ok 42 - enumerate commits (partial bitmap, other)
ok 43 - enumerate --objects (partial bitmap, other)
ok 44 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 45 - fetch (partial bitmap)
ok 46 - enumerating progress counts pack-reused objects
ok 47 - create new additional packs
ok 48 - create multi-pack midx with bitmaps
ok 49 - reverse index exists (rev)
ok 50 - rev-list --test-bitmap verifies bitmaps
ok 51 - counting commits via bitmap (full bitmap, second)
ok 52 - counting partial commits via bitmap (full bitmap, second)
ok 53 - counting commits with limit (full bitmap, second)
ok 54 - counting non-linear history (full bitmap, second)
ok 55 - counting commits with limiting (full bitmap, second)
ok 56 - counting objects via bitmap (full bitmap, second)
ok 57 - enumerate commits (full bitmap, second)
ok 58 - enumerate --objects (full bitmap, second)
ok 59 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 60 - counting commits via bitmap (full bitmap, other)
ok 61 - counting partial commits via bitmap (full bitmap, other)
ok 62 - counting commits with limit (full bitmap, other)
ok 63 - counting non-linear history (full bitmap, other)
ok 64 - counting commits with limiting (full bitmap, other)
ok 65 - counting objects via bitmap (full bitmap, other)
ok 66 - enumerate commits (full bitmap, other)
ok 67 - enumerate --objects (full bitmap, other)
ok 68 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 69 - clone from bitmapped repository
ok 70 - partial clone from bitmapped repository
ok 71 - setup further non-bitmapped commits
ok 72 - counting commits via bitmap (partial bitmap, second)
ok 73 - counting partial commits via bitmap (partial bitmap, second)
ok 74 - counting commits with limit (partial bitmap, second)
ok 75 - counting non-linear history (partial bitmap, second)
ok 76 - counting commits with limiting (partial bitmap, second)
ok 77 - counting objects via bitmap (partial bitmap, second)
ok 78 - enumerate commits (partial bitmap, second)
ok 79 - enumerate --objects (partial bitmap, second)
ok 80 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 81 - counting commits via bitmap (partial bitmap, other)
ok 82 - counting partial commits via bitmap (partial bitmap, other)
ok 83 - counting commits with limit (partial bitmap, other)
ok 84 - counting non-linear history (partial bitmap, other)
ok 85 - counting commits with limiting (partial bitmap, other)
ok 86 - counting objects via bitmap (partial bitmap, other)
ok 87 - enumerate commits (partial bitmap, other)
ok 88 - enumerate --objects (partial bitmap, other)
ok 89 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 90 - fetch (partial bitmap)
ok 91 - enumerating progress counts pack-reused objects
ok 92 - --no-bitmap is respected when bitmaps exist
ok 93 - setup midx with base from later pack
ok 94 - counting commits via bitmap (full bitmap with backwards delta, second)
ok 95 - counting partial commits via bitmap (full bitmap with backwards delta, second)
ok 96 - counting commits with limit (full bitmap with backwards delta, second)
ok 97 - counting non-linear history (full bitmap with backwards delta, second)
ok 98 - counting commits with limiting (full bitmap with backwards delta, second)
ok 99 - counting objects via bitmap (full bitmap with backwards delta, second)
ok 100 - enumerate commits (full bitmap with backwards delta, second)
ok 101 - enumerate --objects (full bitmap with backwards delta, second)
ok 102 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, second)
ok 103 - counting commits via bitmap (full bitmap with backwards delta, other)
ok 104 - counting partial commits via bitmap (full bitmap with backwards delta, other)
ok 105 - counting commits with limit (full bitmap with backwards delta, other)
ok 106 - counting non-linear history (full bitmap with backwards delta, other)
ok 107 - counting commits with limiting (full bitmap with backwards delta, other)
ok 108 - counting objects via bitmap (full bitmap with backwards delta, other)
ok 109 - enumerate commits (full bitmap with backwards delta, other)
ok 110 - enumerate --objects (full bitmap with backwards delta, other)
ok 111 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, other)
ok 112 - clone with bitmaps enabled
ok 113 - changing the preferred pack does not corrupt bitmaps
ok 114 - setup partial bitmaps
ok 115 - reverse index exists (rev)
ok 116 - rev-list --test-bitmap verifies bitmaps
ok 117 - counting commits via bitmap (full bitmap, second)
ok 118 - counting partial commits via bitmap (full bitmap, second)
ok 119 - counting commits with limit (full bitmap, second)
ok 120 - counting non-linear history (full bitmap, second)
ok 121 - counting commits with limiting (full bitmap, second)
ok 122 - counting objects via bitmap (full bitmap, second)
ok 123 - enumerate commits (full bitmap, second)
ok 124 - enumerate --objects (full bitmap, second)
ok 125 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 126 - counting commits via bitmap (full bitmap, other)
ok 127 - counting partial commits via bitmap (full bitmap, other)
ok 128 - counting commits with limit (full bitmap, other)
ok 129 - counting non-linear history (full bitmap, other)
ok 130 - counting commits with limiting (full bitmap, other)
ok 131 - counting objects via bitmap (full bitmap, other)
ok 132 - enumerate commits (full bitmap, other)
ok 133 - enumerate --objects (full bitmap, other)
ok 134 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 135 - clone from bitmapped repository
ok 136 - partial clone from bitmapped repository
ok 137 - setup further non-bitmapped commits
ok 138 - counting commits via bitmap (partial bitmap, second)
ok 139 - counting partial commits via bitmap (partial bitmap, second)
ok 140 - counting commits with limit (partial bitmap, second)
ok 141 - counting non-linear history (partial bitmap, second)
ok 142 - counting commits with limiting (partial bitmap, second)
ok 143 - counting objects via bitmap (partial bitmap, second)
ok 144 - enumerate commits (partial bitmap, second)
ok 145 - enumerate --objects (partial bitmap, second)
ok 146 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 147 - counting commits via bitmap (partial bitmap, other)
ok 148 - counting partial commits via bitmap (partial bitmap, other)
ok 149 - counting commits with limit (partial bitmap, other)
ok 150 - counting non-linear history (partial bitmap, other)
ok 151 - counting commits with limiting (partial bitmap, other)
ok 152 - counting objects via bitmap (partial bitmap, other)
ok 153 - enumerate commits (partial bitmap, other)
ok 154 - enumerate --objects (partial bitmap, other)
ok 155 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 156 - fetch (partial bitmap)
ok 157 - enumerating progress counts pack-reused objects
ok 158 - setup bitmap config
ok 159 - setup repo with moderate-sized history
ok 160 - create single-pack midx with bitmaps
ok 161 - reverse index exists (rev)
ok 162 - rev-list --test-bitmap verifies bitmaps
ok 163 - counting commits via bitmap (full bitmap, second)
ok 164 - counting partial commits via bitmap (full bitmap, second)
ok 165 - counting commits with limit (full bitmap, second)
ok 166 - counting non-linear history (full bitmap, second)
ok 167 - counting commits with limiting (full bitmap, second)
ok 168 - counting objects via bitmap (full bitmap, second)
ok 169 - enumerate commits (full bitmap, second)
ok 170 - enumerate --objects (full bitmap, second)
ok 171 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 172 - counting commits via bitmap (full bitmap, other)
ok 173 - counting partial commits via bitmap (full bitmap, other)
ok 174 - counting commits with limit (full bitmap, other)
ok 175 - counting non-linear history (full bitmap, other)
ok 176 - counting commits with limiting (full bitmap, other)
ok 177 - counting objects via bitmap (full bitmap, other)
ok 178 - enumerate commits (full bitmap, other)
ok 179 - enumerate --objects (full bitmap, other)
ok 180 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 181 - clone from bitmapped repository
ok 182 - partial clone from bitmapped repository
ok 183 - setup further non-bitmapped commits
ok 184 - counting commits via bitmap (partial bitmap, second)
ok 185 - counting partial commits via bitmap (partial bitmap, second)
ok 186 - counting commits with limit (partial bitmap, second)
ok 187 - counting non-linear history (partial bitmap, second)
ok 188 - counting commits with limiting (partial bitmap, second)
ok 189 - counting objects via bitmap (partial bitmap, second)
ok 190 - enumerate commits (partial bitmap, second)
ok 191 - enumerate --objects (partial bitmap, second)
ok 192 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 193 - counting commits via bitmap (partial bitmap, other)
ok 194 - counting partial commits via bitmap (partial bitmap, other)
ok 195 - counting commits with limit (partial bitmap, other)
ok 196 - counting non-linear history (partial bitmap, other)
ok 197 - counting commits with limiting (partial bitmap, other)
ok 198 - counting objects via bitmap (partial bitmap, other)
ok 199 - enumerate commits (partial bitmap, other)
ok 200 - enumerate --objects (partial bitmap, other)
ok 201 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 202 - fetch (partial bitmap)
ok 203 - enumerating progress counts pack-reused objects
ok 204 - create new additional packs
ok 205 - create multi-pack midx with bitmaps
ok 206 - reverse index exists (rev)
ok 207 - rev-list --test-bitmap verifies bitmaps
ok 208 - counting commits via bitmap (full bitmap, second)
ok 209 - counting partial commits via bitmap (full bitmap, second)
ok 210 - counting commits with limit (full bitmap, second)
ok 211 - counting non-linear history (full bitmap, second)
ok 212 - counting commits with limiting (full bitmap, second)
ok 213 - counting objects via bitmap (full bitmap, second)
ok 214 - enumerate commits (full bitmap, second)
ok 215 - enumerate --objects (full bitmap, second)
ok 216 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 217 - counting commits via bitmap (full bitmap, other)
ok 218 - counting partial commits via bitmap (full bitmap, other)
ok 219 - counting commits with limit (full bitmap, other)
ok 220 - counting non-linear history (full bitmap, other)
ok 221 - counting commits with limiting (full bitmap, other)
ok 222 - counting objects via bitmap (full bitmap, other)
ok 223 - enumerate commits (full bitmap, other)
ok 224 - enumerate --objects (full bitmap, other)
ok 225 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 226 - clone from bitmapped repository
ok 227 - partial clone from bitmapped repository
ok 228 - setup further non-bitmapped commits
ok 229 - counting commits via bitmap (partial bitmap, second)
ok 230 - counting partial commits via bitmap (partial bitmap, second)
ok 231 - counting commits with limit (partial bitmap, second)
ok 232 - counting non-linear history (partial bitmap, second)
ok 233 - counting commits with limiting (partial bitmap, second)
ok 234 - counting objects via bitmap (partial bitmap, second)
ok 235 - enumerate commits (partial bitmap, second)
ok 236 - enumerate --objects (partial bitmap, second)
ok 237 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 238 - counting commits via bitmap (partial bitmap, other)
ok 239 - counting partial commits via bitmap (partial bitmap, other)
ok 240 - counting commits with limit (partial bitmap, other)
ok 241 - counting non-linear history (partial bitmap, other)
ok 242 - counting commits with limiting (partial bitmap, other)
ok 243 - counting objects via bitmap (partial bitmap, other)
ok 244 - enumerate commits (partial bitmap, other)
ok 245 - enumerate --objects (partial bitmap, other)
ok 246 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 247 - fetch (partial bitmap)
ok 248 - enumerating progress counts pack-reused objects
ok 249 - --no-bitmap is respected when bitmaps exist
ok 250 - setup midx with base from later pack
ok 251 - counting commits via bitmap (full bitmap with backwards delta, second)
ok 252 - counting partial commits via bitmap (full bitmap with backwards delta, second)
ok 253 - counting commits with limit (full bitmap with backwards delta, second)
ok 254 - counting non-linear history (full bitmap with backwards delta, second)
ok 255 - counting commits with limiting (full bitmap with backwards delta, second)
ok 256 - counting objects via bitmap (full bitmap with backwards delta, second)
ok 257 - enumerate commits (full bitmap with backwards delta, second)
ok 258 - enumerate --objects (full bitmap with backwards delta, second)
ok 259 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, second)
ok 260 - counting commits via bitmap (full bitmap with backwards delta, other)
ok 261 - counting partial commits via bitmap (full bitmap with backwards delta, other)
ok 262 - counting commits with limit (full bitmap with backwards delta, other)
ok 263 - counting non-linear history (full bitmap with backwards delta, other)
ok 264 - counting commits with limiting (full bitmap with backwards delta, other)
ok 265 - counting objects via bitmap (full bitmap with backwards delta, other)
ok 266 - enumerate commits (full bitmap with backwards delta, other)
ok 267 - enumerate --objects (full bitmap with backwards delta, other)
ok 268 - bitmap --objects handles non-commit objects (full bitmap with backwards delta, other)
ok 269 - clone with bitmaps enabled
ok 270 - changing the preferred pack does not corrupt bitmaps
ok 271 - setup partial bitmaps
ok 272 - reverse index exists (rev)
ok 273 - rev-list --test-bitmap verifies bitmaps
ok 274 - counting commits via bitmap (full bitmap, second)
ok 275 - counting partial commits via bitmap (full bitmap, second)
ok 276 - counting commits with limit (full bitmap, second)
ok 277 - counting non-linear history (full bitmap, second)
ok 278 - counting commits with limiting (full bitmap, second)
ok 279 - counting objects via bitmap (full bitmap, second)
ok 280 - enumerate commits (full bitmap, second)
ok 281 - enumerate --objects (full bitmap, second)
ok 282 - bitmap --objects handles non-commit objects (full bitmap, second)
ok 283 - counting commits via bitmap (full bitmap, other)
ok 284 - counting partial commits via bitmap (full bitmap, other)
ok 285 - counting commits with limit (full bitmap, other)
ok 286 - counting non-linear history (full bitmap, other)
ok 287 - counting commits with limiting (full bitmap, other)
ok 288 - counting objects via bitmap (full bitmap, other)
ok 289 - enumerate commits (full bitmap, other)
ok 290 - enumerate --objects (full bitmap, other)
ok 291 - bitmap --objects handles non-commit objects (full bitmap, other)
ok 292 - clone from bitmapped repository
ok 293 - partial clone from bitmapped repository
ok 294 - setup further non-bitmapped commits
ok 295 - counting commits via bitmap (partial bitmap, second)
ok 296 - counting partial commits via bitmap (partial bitmap, second)
ok 297 - counting commits with limit (partial bitmap, second)
ok 298 - counting non-linear history (partial bitmap, second)
ok 299 - counting commits with limiting (partial bitmap, second)
ok 300 - counting objects via bitmap (partial bitmap, second)
ok 301 - enumerate commits (partial bitmap, second)
ok 302 - enumerate --objects (partial bitmap, second)
ok 303 - bitmap --objects handles non-commit objects (partial bitmap, second)
ok 304 - counting commits via bitmap (partial bitmap, other)
ok 305 - counting partial commits via bitmap (partial bitmap, other)
ok 306 - counting commits with limit (partial bitmap, other)
ok 307 - counting non-linear history (partial bitmap, other)
ok 308 - counting commits with limiting (partial bitmap, other)
ok 309 - counting objects via bitmap (partial bitmap, other)
ok 310 - enumerate commits (partial bitmap, other)
ok 311 - enumerate --objects (partial bitmap, other)
ok 312 - bitmap --objects handles non-commit objects (partial bitmap, other)
ok 313 - fetch (partial bitmap)
ok 314 - enumerating progress counts pack-reused objects
# passed all 314 test(s)
1..314
*** t5328-commit-graph-64bit-time.sh ***
ok 1 - lower layers have overflow chunk
ok 2 - check normal git operations: overflow
ok 3 - set up and verify repo with generation data overflow chunk
ok 4 - check normal git operations: overflow 2
ok 5 - single commit with generation data exceeding UINT32_MAX
ok 6 - reader notices out-of-bounds generation overflow
# passed all 6 test(s)
1..6
*** t5329-pack-objects-cruft.sh ***
ok 1 - unreachable loose objects are packed (expire never)
ok 2 - unreachable packed objects are packed (expire never)
ok 3 - unreachable cruft objects are repacked (expire never)
ok 4 - multiple cruft packs (expire never)
ok 5 - cruft packs tolerate missing trees (expire never)
ok 6 - cruft packs tolerate missing blobs (expire never)
ok 7 - unreachable loose objects are packed (expire 2.weeks.ago)
ok 8 - unreachable packed objects are packed (expire 2.weeks.ago)
ok 9 - unreachable cruft objects are repacked (expire 2.weeks.ago)
ok 10 - multiple cruft packs (expire 2.weeks.ago)
ok 11 - cruft packs tolerate missing trees (expire 2.weeks.ago)
ok 12 - cruft packs tolerate missing blobs (expire 2.weeks.ago)
ok 13 - cruft tags rescue tagged objects
ok 14 - cruft commits rescue parents, trees
ok 15 - cruft trees rescue sub-trees, blobs
ok 16 - expired objects are pruned
ok 17 - repack --cruft generates a cruft pack
ok 18 - loose objects mtimes upsert others
ok 19 - expiring cruft objects with git gc
ok 20 - cruft packs are not included in geometric repack
ok 21 - repack --geometric collects once-cruft objects
ok 22 - cruft repack with no reachable objects
ok 23 - cruft repack with --max-pack-size
ok 24 - cruft repack with pack.packSizeLimit
ok 25 - cruft repack respects repack.cruftWindow
ok 26 - cruft repack respects --window by default
ok 27 - cruft repack respects --quiet
ok 28 - cruft --local drops unreachable objects
ok 29 - MIDX bitmaps tolerate reachable cruft objects
ok 30 - cruft objects are freshend via loose
ok 31 - gc.recentObjectsHook
ok 32 - multi-valued gc.recentObjectsHook
ok 33 - additional cruft blobs via gc.recentObjectsHook
# passed all 33 test(s)
1..33
*** t5330-no-lazy-fetch-with-commit-graph.sh ***
ok 1 - setup: prepare a repository with a commit
ok 2 - setup: prepare a repository with commit-graph contains the commit
ok 3 - setup: change the alternates to what without the commit
ok 4 - fetch any commit from promisor with the usage of the commit graph
# passed all 4 test(s)
1..4
*** t5331-pack-objects-stdin.sh ***
ok 1 - setup for --stdin-packs tests
ok 2 - --stdin-packs with excluded packs
ok 3 - --stdin-packs is incompatible with --filter
ok 4 - --stdin-packs is incompatible with --revs
ok 5 - --stdin-packs with loose objects
ok 6 - --stdin-packs with broken links
ok 7 - pack-objects --stdin with duplicate packfile
ok 8 - pack-objects --stdin with same packfile excluded and included
ok 9 - pack-objects --stdin with packfiles from alternate object database
ok 10 - pack-objects --stdin with packfiles from main and alternate object database
# passed all 10 test(s)
1..10
*** t5332-multi-pack-reuse.sh ***
ok 1 - preferred pack is reused for single-pack reuse
ok 2 - multi-pack reuse is disabled by default
ok 3 - feature.experimental implies multi-pack reuse
ok 4 - multi-pack reuse can be disabled with feature.experimental
ok 5 - enable multi-pack reuse
ok 6 - reuse all objects from subset of bitmapped packs
ok 7 - reuse all objects from all packs
ok 8 - reuse objects from first pack with middle gap
ok 9 - reuse objects from middle pack with middle gap
ok 10 - omit delta with uninteresting base (same pack)
ok 11 - omit delta from uninteresting base (cross pack)
# passed all 11 test(s)
1..11
*** t5351-unpack-large-objects.sh ***
ok 1 - create large objects (1.5 MB) and PACK
ok 2 - set memory limitation to 1MB
ok 3 - unpack-objects failed under memory limitation
ok 4 - unpack-objects works with memory limitation in dry-run mode
ok 5 - unpack big object in stream
ok 6 - unpack big object in stream (core.fsyncmethod=batch)
ok 7 - do not unpack existing large objects
# passed all 7 test(s)
1..7
*** t5400-send-pack.sh ***
ok 1 - setup
ok 2 - pack the source repository
ok 3 - pack the destination repository
ok 4 - refuse pushing rewound head without --force
ok 5 - push can be used to delete a ref
ok 6 - refuse deleting push with denyDeletes
ok 7 - cannot override denyDeletes with git -c send-pack
ok 8 - override denyDeletes with git -c receive-pack
ok 9 - denyNonFastforwards trumps --force
ok 10 - send-pack --all sends all branches
ok 11 - push --all excludes remote-tracking hierarchy
ok 12 - receive-pack runs auto-gc in remote repo
ok 13 - pushing explicit refspecs respects forcing
ok 14 - pushing wildcard refspecs respects forcing
ok 15 - deny pushing to delete current branch
ok 16 - receive-pack de-dupes .have lines
# passed all 16 test(s)
1..16
*** t5401-update-hooks.sh ***
ok 1 - setup
ok 2 - push
ok 3 - updated as expected
ok 4 - hooks ran
ok 5 - pre-receive hook input
ok 6 - update hook arguments
ok 7 - post-receive hook input
ok 8 - post-update hook arguments
ok 9 - all hook stdin is /dev/null
ok 10 - all *-receive hook args are empty
ok 11 - send-pack produced no output
ok 12 - send-pack stderr contains hook messages
ok 13 - pre-receive hook that forgets to read its input
# passed all 13 test(s)
1..13
*** t5402-post-merge-hook.sh ***
ok 1 - setup
ok 2 - setup clone hooks
ok 3 - post-merge does not run for up-to-date 
ok 4 - post-merge runs as expected 
ok 5 - post-merge from normal merge receives the right argument 
ok 6 - post-merge from squash merge runs as expected 
ok 7 - post-merge from squash merge receives the right argument 
# passed all 7 test(s)
1..7
*** t5403-post-checkout-hook.sh ***
ok 1 - setup
ok 2 - post-checkout receives the right arguments with HEAD unchanged 
ok 3 - post-checkout args are correct with git checkout -b 
ok 4 - post-checkout receives the right args with HEAD changed 
ok 5 - post-checkout receives the right args when not switching branches 
ok 6 - post-checkout is triggered on rebase --apply
ok 7 - post-checkout is triggered on rebase --apply with fast-forward
ok 8 - rebase --apply fast-forward branch checkout runs post-checkout hook
ok 9 - rebase --apply checkout does not remove untracked files
ok 10 - post-checkout is triggered on rebase --merge
ok 11 - post-checkout is triggered on rebase --merge with fast-forward
ok 12 - rebase --merge fast-forward branch checkout runs post-checkout hook
ok 13 - rebase --merge checkout does not remove untracked files
ok 14 - post-checkout hook is triggered by clone
# passed all 14 test(s)
1..14
*** t5404-tracking-branches.sh ***
ok 1 - setup
ok 2 - prepare pushable branches
ok 3 - mixed-success push returns error
ok 4 - check tracking branches updated correctly after push
ok 5 - check tracking branches not updated for failed refs
ok 6 - deleted branches have their tracking branches removed
ok 7 - already deleted tracking branches ignored
# passed all 7 test(s)
1..7
*** t5405-send-pack-rewind.sh ***
ok 1 - setup
ok 2 - non forced push should die not segfault
ok 3 - forced push should succeed
# passed all 3 test(s)
1..3
*** t5406-remote-rejects.sh ***
ok 1 - setup
ok 2 - push reports error
ok 3 - individual ref reports error
# passed all 3 test(s)
1..3
*** t5407-post-rewrite-hook.sh ***
ok 1 - setup
ok 2 - git commit --amend
ok 3 - git commit --amend --no-post-rewrite
ok 4 - git rebase --apply
ok 5 - git rebase --apply --skip
ok 6 - git rebase --apply --skip the last one
ok 7 - git rebase -m
ok 8 - git rebase -m --skip
ok 9 - git rebase with implicit use of merge backend
ok 10 - git rebase --skip with implicit use of merge backend
ok 11 - git rebase with failed pick
ok 12 - git rebase -i (unchanged)
ok 13 - git rebase -i (skip)
ok 14 - git rebase -i (squash)
ok 15 - git rebase -i (fixup without conflict)
ok 16 - git rebase -i (double edit)
ok 17 - git rebase -i (exec)
# passed all 17 test(s)
1..17
*** t5408-send-pack-stdin.sh ***
ok 1 - setup refs
ok 2 - refs on cmdline
ok 3 - refs over stdin
ok 4 - stdin lines are full refspecs
ok 5 - stdin mixed with cmdline
ok 6 - cmdline refs written in order
ok 7 - --stdin refs come after cmdline
ok 8 - refspecs and --mirror do not mix (cmdline)
ok 9 - refspecs and --mirror do not mix (stdin)
# passed all 9 test(s)
1..9
*** t5409-colorize-remote-messages.sh ***
ok 1 - setup
ok 2 - keywords
ok 3 - whole words at line start
ok 4 - short line
ok 5 - case-insensitive
ok 6 - leading space
ok 7 - spaces only
ok 8 - no coloring for redirected output
ok 9 - push with customized color
ok 10 - error in customized color
ok 11 - fallback to color.ui
# passed all 11 test(s)
1..11
*** t5410-receive-pack-alternates.sh ***
ok 1 - setup
ok 2 - with core.alternateRefsCommand
ok 3 - with core.alternateRefsPrefixes
# passed all 3 test(s)
1..3
*** t5411-proc-receive-hook.sh ***
ok 1 - setup upstream and workbench
ok 2 - setup receive.procReceiveRefs
ok 3 - setup proc-receive hook
ok 4 - proc-receive: report status v1
ok 5 - setup upstream and workbench
ok 6 - git-push (builtin protocol)
ok 7 - git-push --atomic (builtin protocol)
ok 8 - non-fast-forward git-push (builtin protocol)
ok 9 - git-push -f (builtin protocol)
ok 10 - cleanup (builtin protocol)
ok 11 - git-push (builtin protocol/porcelain)
ok 12 - git-push --atomic (builtin protocol/porcelain)
ok 13 - non-fast-forward git-push (builtin protocol/porcelain)
ok 14 - git-push -f (builtin protocol/porcelain)
ok 15 - cleanup (builtin protocol/porcelain)
ok 16 - setup pre-receive hook (builtin protocol)
ok 17 - git-push is declined (builtin protocol)
ok 18 - cleanup (builtin protocol)
ok 19 - setup pre-receive hook (builtin protocol/porcelain)
ok 20 - git-push is declined (builtin protocol/porcelain)
ok 21 - cleanup (builtin protocol/porcelain)
ok 22 - add two receive.procReceiveRefs settings
ok 23 - proc-receive: no hook, fail to push special ref (builtin protocol)
ok 24 - cleanup (builtin protocol)
ok 25 - proc-receive: no hook, all failed for atomic push (builtin protocol)
ok 26 - proc-receive: no hook, fail to push special ref (builtin protocol/porcelain)
ok 27 - cleanup (builtin protocol/porcelain)
ok 28 - proc-receive: no hook, all failed for atomic push (builtin protocol/porcelain)
ok 29 - setup proc-receive hook (unknown version, builtin protocol)
ok 30 - proc-receive: bad protocol (unknown version, builtin protocol)
ok 31 - setup proc-receive hook (hook --die-read-version, builtin protocol)
ok 32 - proc-receive: bad protocol (hook --die-read-version, builtin protocol)
ok 33 - setup proc-receive hook (hook --die-write-version, builtin protocol)
ok 34 - proc-receive: bad protocol (hook --die-write-version, builtin protocol)
ok 35 - setup proc-receive hook (hook --die-read-commands, builtin protocol)
ok 36 - proc-receive: bad protocol (hook --die-read-commands, builtin protocol)
ok 37 - setup proc-receive hook (hook --die-read-push-options, builtin protocol)
ok 38 - proc-receive: bad protocol (hook --die-read-push-options, builtin protocol)
ok 39 - setup proc-receive hook (hook --die-write-report, builtin protocol)
ok 40 - proc-receive: bad protocol (hook --die-write-report, builtin protocol)
ok 41 - setup proc-receive hook (no report, builtin protocol)
ok 42 - proc-receive: bad protocol (no report, builtin protocol)
ok 43 - cleanup (builtin protocol)
ok 44 - setup proc-receive hook (no ref, builtin protocol)
ok 45 - proc-receive: bad protocol (no ref, builtin protocol)
ok 46 - setup proc-receive hook (unknown status, builtin protocol)
ok 47 - proc-receive: bad protocol (unknown status, builtin protocol)
ok 48 - setup proc-receive hook (unknown version, builtin protocol/porcelain)
ok 49 - proc-receive: bad protocol (unknown version, builtin protocol/porcelain)
ok 50 - setup proc-receive hook (hook --die-read-version, builtin protocol/porcelain)
ok 51 - proc-receive: bad protocol (hook --die-read-version, builtin protocol/porcelain)
ok 52 - setup proc-receive hook (hook --die-write-version, builtin protocol/porcelain)
ok 53 - proc-receive: bad protocol (hook --die-write-version, builtin protocol/porcelain)
ok 54 - setup proc-receive hook (hook --die-read-commands, builtin protocol/porcelain)
ok 55 - proc-receive: bad protocol (hook --die-read-commands, builtin protocol/porcelain)
ok 56 - setup proc-receive hook (hook --die-read-push-options, builtin protocol/porcelain)
ok 57 - proc-receive: bad protocol (hook --die-read-push-options, builtin protocol/porcelain)
ok 58 - setup proc-receive hook (hook --die-write-report, builtin protocol/porcelain)
ok 59 - proc-receive: bad protocol (hook --die-write-report, builtin protocol/porcelain)
ok 60 - setup proc-receive hook (no report, builtin protocol/porcelain)
ok 61 - proc-receive: bad protocol (no report, builtin protocol/porcelain)
ok 62 - cleanup (builtin protocol/porcelain)
ok 63 - setup proc-receive hook (no ref, builtin protocol/porcelain)
ok 64 - proc-receive: bad protocol (no ref, builtin protocol/porcelain)
ok 65 - setup proc-receive hook (unknown status, builtin protocol/porcelain)
ok 66 - proc-receive: bad protocol (unknown status, builtin protocol/porcelain)
ok 67 - setup proc-receive hook (ng, no message, builtin protocol)
ok 68 - proc-receive: fail to update (ng, no message, builtin protocol)
ok 69 - setup proc-receive hook (ng message, builtin protocol)
ok 70 - proc-receive: fail to update (ng, with message, builtin protocol)
ok 71 - setup proc-receive hook (ng, no message, builtin protocol/porcelain)
ok 72 - proc-receive: fail to update (ng, no message, builtin protocol/porcelain)
ok 73 - setup proc-receive hook (ng message, builtin protocol/porcelain)
ok 74 - proc-receive: fail to update (ng, with message, builtin protocol/porcelain)
ok 75 - setup proc-receive hook (unexpected ref, builtin protocol)
ok 76 - proc-receive: report unexpected ref (builtin protocol)
ok 77 - cleanup (builtin protocol)
ok 78 - setup proc-receive hook (unexpected ref, builtin protocol/porcelain)
ok 79 - proc-receive: report unexpected ref (builtin protocol/porcelain)
ok 80 - cleanup (builtin protocol/porcelain)
ok 81 - setup proc-receive hook (unexpected ref, builtin protocol)
ok 82 - proc-receive: report unknown reference (builtin protocol)
ok 83 - setup proc-receive hook (unexpected ref, builtin protocol/porcelain)
ok 84 - proc-receive: report unknown reference (builtin protocol/porcelain)
ok 85 - setup proc-receive hook and disable push-options (builtin protocol)
ok 86 - proc-receive: not support push options (builtin protocol)
ok 87 - enable push options (builtin protocol)
ok 88 - setup version=0 for proc-receive hook (builtin protocol)
ok 89 - proc-receive: ignore push-options for version 0 (builtin protocol)
ok 90 - restore proc-receive hook (builtin protocol)
ok 91 - cleanup (builtin protocol)
ok 92 - proc-receive: push with options (builtin protocol)
ok 93 - cleanup (builtin protocol)
ok 94 - setup proc-receive hook and disable push-options (builtin protocol/porcelain)
ok 95 - proc-receive: not support push options (builtin protocol/porcelain)
ok 96 - enable push options (builtin protocol/porcelain)
ok 97 - setup version=0 for proc-receive hook (builtin protocol/porcelain)
ok 98 - proc-receive: ignore push-options for version 0 (builtin protocol/porcelain)
ok 99 - restore proc-receive hook (builtin protocol/porcelain)
ok 100 - cleanup (builtin protocol/porcelain)
ok 101 - proc-receive: push with options (builtin protocol/porcelain)
ok 102 - cleanup (builtin protocol/porcelain)
ok 103 - setup proc-receive hook (ok, builtin protocol)
ok 104 - proc-receive: ok (builtin protocol)
ok 105 - setup proc-receive hook (ok, builtin protocol/porcelain)
ok 106 - proc-receive: ok (builtin protocol/porcelain)
ok 107 - setup proc-receive hook (option without matching ok, builtin protocol)
ok 108 - proc-receive: report option without matching ok (builtin protocol)
ok 109 - setup proc-receive hook (option refname, builtin protocol)
ok 110 - proc-receive: report option refname (builtin protocol)
ok 111 - setup proc-receive hook (option refname and forced-update, builtin protocol)
ok 112 - proc-receive: report option refname and forced-update (builtin protocol)
ok 113 - setup proc-receive hook (option refname and old-oid, builtin protocol)
ok 114 - proc-receive: report option refname and old-oid (builtin protocol)
ok 115 - setup proc-receive hook (option old-oid, builtin protocol)
ok 116 - proc-receive: report option old-oid (builtin protocol)
ok 117 - setup proc-receive hook (option old-oid and new-oid, builtin protocol)
ok 118 - proc-receive: report option old-oid and new-oid (builtin protocol)
ok 119 - setup proc-receive hook (report with multiple rewrites, builtin protocol)
ok 120 - proc-receive: report with multiple rewrites (builtin protocol)
ok 121 - setup proc-receive hook (option without matching ok, builtin protocol/porcelain)
ok 122 - proc-receive: report option without matching ok (builtin protocol/porcelain)
ok 123 - setup proc-receive hook (option refname, builtin protocol/porcelain)
ok 124 - proc-receive: report option refname (builtin protocol/porcelain)
ok 125 - setup proc-receive hook (option refname and forced-update, builtin protocol/porcelain)
ok 126 - proc-receive: report option refname and forced-update (builtin protocol/porcelain)
ok 127 - setup proc-receive hook (option refname and old-oid, builtin protocol/porcelain)
ok 128 - proc-receive: report option refname and old-oid (builtin protocol/porcelain)
ok 129 - setup proc-receive hook (option old-oid, builtin protocol/porcelain)
ok 130 - proc-receive: report option old-oid (builtin protocol/porcelain)
ok 131 - setup proc-receive hook (option old-oid and new-oid, builtin protocol/porcelain)
ok 132 - proc-receive: report option old-oid and new-oid (builtin protocol/porcelain)
ok 133 - setup proc-receive hook (report with multiple rewrites, builtin protocol/porcelain)
ok 134 - proc-receive: report with multiple rewrites (builtin protocol/porcelain)
ok 135 - setup proc-receive hook (ft, builtin protocol)
ok 136 - proc-receive: fall throught, let receive-pack to execute (builtin protocol)
ok 137 - cleanup (builtin protocol)
ok 138 - setup proc-receive hook (fall-through, builtin protocol/porcelain)
ok 139 - proc-receive: fall throught, let receive-pack to execute (builtin protocol/porcelain)
ok 140 - cleanup (builtin protocol/porcelain)
ok 141 - setup git config for remote-tracking of special refs
ok 142 - setup proc-receive hook (multiple rewrites for one ref, no refname for the 1st rewrite, builtin protocol)
ok 143 - proc-receive: multiple rewrite for one ref, no refname for the 1st rewrite (builtin protocol)
ok 144 - proc-receive: check remote-tracking #1 (builtin protocol)
ok 145 - setup proc-receive hook (multiple rewrites for one ref, no refname for the 2nd rewrite, builtin protocol)
ok 146 - proc-receive: multiple rewrites for one ref, no refname for the 2nd rewrite (builtin protocol)
ok 147 - proc-receive: check remote-tracking #2 (builtin protocol)
ok 148 - setup proc-receive hook (multiple rewrites for one ref, builtin protocol)
ok 149 - proc-receive: multiple rewrites for one ref (builtin protocol)
ok 150 - proc-receive: check remote-tracking #3 (builtin protocol)
ok 151 - setup proc-receive hook (multiple rewrites for one ref, no refname for the 1st rewrite, builtin protocol/porcelain)
ok 152 - proc-receive: multiple rewrite for one ref, no refname for the 1st rewrite (builtin protocol/porcelain)
ok 153 - setup proc-receive hook (multiple rewrites for one ref, no refname for the 2nd rewrite, builtin protocol/porcelain)
ok 154 - proc-receive: multiple rewrites for one ref, no refname for the 2nd rewrite (builtin protocol/porcelain)
ok 155 - setup proc-receive hook (multiple rewrites for one ref, builtin protocol/porcelain)
ok 156 - proc-receive: multiple rewrites for one ref (builtin protocol/porcelain)
ok 157 - setup proc-receive hook (builtin protocol)
ok 158 - proc-receive: report update of mixed refs (builtin protocol)
ok 159 - cleanup (builtin protocol)
ok 160 - setup proc-receive hook (builtin protocol/porcelain)
ok 161 - proc-receive: report update of mixed refs (builtin protocol/porcelain)
ok 162 - cleanup (builtin protocol/porcelain)
ok 163 - config receive.procReceiveRefs = refs (builtin protocol)
ok 164 - setup upstream branches (builtin protocol)
ok 165 - setup proc-receive hook (builtin protocol)
ok 166 - proc-receive: process all refs (builtin protocol)
ok 167 - cleanup (builtin protocol)
ok 168 - config receive.procReceiveRefs = refs (builtin protocol/porcelain)
ok 169 - setup upstream branches (builtin protocol/porcelain)
ok 170 - setup proc-receive hook (builtin protocol/porcelain)
ok 171 - proc-receive: process all refs (builtin protocol/porcelain)
ok 172 - cleanup (builtin protocol/porcelain)
ok 173 - config receive.procReceiveRefs with modifiers (builtin protocol)
ok 174 - setup proc-receive hook (builtin protocol)
ok 175 - proc-receive: update branch and new tag (builtin protocol)
ok 176 - setup upstream: create tags/v123 (builtin protocol)
ok 177 - setup proc-receive hook (builtin protocol)
ok 178 - proc-receive: create/delete branch, and delete tag (builtin protocol)
# passed all 178 test(s)
# SKIP no web server found at ''
1..178
*** t5500-fetch-pack.sh ***
ok 1 - setup
ok 2 - 1st pull
ok 3 - post 1st pull setup
ok 4 - 2nd pull
ok 5 - 3rd pull
ok 6 - single branch clone
ok 7 - single branch object count
ok 8 - single given branch clone
ok 9 - clone shallow depth 1
ok 10 - clone shallow depth 1 with fsck
ok 11 - clone shallow
ok 12 - clone shallow depth count
ok 13 - clone shallow object count
ok 14 - clone shallow object count (part 2)
ok 15 - fsck in shallow repo
ok 16 - simple fetch in shallow repo
ok 17 - no changes expected
ok 18 - fetch same depth in shallow repo
ok 19 - no changes expected
ok 20 - add two more
ok 21 - pull in shallow repo
ok 22 - clone shallow object count
ok 23 - add two more (part 2)
ok 24 - deepening pull in shallow repo
ok 25 - clone shallow object count
ok 26 - deepening fetch in shallow repo
ok 27 - clone shallow object count
ok 28 - pull in shallow repo with missing merge base
ok 29 - additional simple shallow deepenings
ok 30 - clone shallow depth count
ok 31 - clone shallow object count
ok 32 - fetch --no-shallow on full repo
ok 33 - fetch --depth --no-shallow
ok 34 - turn shallow to complete repository
ok 35 - clone shallow without --no-single-branch
ok 36 - clone shallow object count
ok 37 - clone shallow with --branch
ok 38 - clone shallow object count
ok 39 - clone shallow with detached HEAD
ok 40 - shallow clone pulling tags
ok 41 - shallow cloning single tag
ok 42 - clone shallow with packed refs
ok 43 - in_vain not triggered before first ACK
ok 44 - in_vain resetted upon ACK
ok 45 - fetch in shallow repo unreachable shallow objects
ok 46 - fetch creating new shallow root
ok 47 - setup tests for the --stdin parameter
ok 48 - setup fetch refs from cmdline v[12]
ok 49 - protocol.version= fetch refs from cmdline
ok 50 - protocol.version=0 fetch refs from cmdline
ok 51 - protocol.version=1 fetch refs from cmdline
ok 52 - protocol.version=2 fetch refs from cmdline
ok 53 - fetch refs from stdin
ok 54 - fetch mixed refs from cmdline and stdin
ok 55 - test duplicate refs from stdin
ok 56 - set up tests of missing reference
ok 57 - test lonely missing ref
ok 58 - test missing ref after existing
ok 59 - test missing ref before existing
ok 60 - test --all, --depth, and explicit head
ok 61 - test --all, --depth, and explicit tag
ok 62 - test --all with tag to non-tip
ok 63 - test --all wrt tag to non-commits
ok 64 - shallow fetch with tags does not break the repository
ok 65 - fetch-pack can fetch a raw sha1
ok 66 - fetch-pack can fetch a raw sha1 that is advertised as a ref
ok 67 - fetch-pack can fetch a raw sha1 overlapping a named ref
ok 68 - fetch-pack cannot fetch a raw sha1 that is not advertised as a ref
ok 69 - fetch-pack --diag-url ssh+git://host/repo
ok 70 - fetch-pack --diag-url ssh+git://host/~repo
ok 71 - fetch-pack --diag-url ssh+git://host:/repo
ok 72 - fetch-pack --diag-url ssh+git://host:/~repo
ok 73 - fetch-pack --diag-url ssh+git://user@host/repo
ok 74 - fetch-pack --diag-url ssh+git://user@host/~repo
ok 75 - fetch-pack --diag-url ssh+git://user@host:/repo
ok 76 - fetch-pack --diag-url ssh+git://user@host:/~repo
ok 77 - fetch-pack --diag-url ssh+git://user@[::1]/repo
ok 78 - fetch-pack --diag-url ssh+git://user@[::1]/~repo
ok 79 - fetch-pack --diag-url ssh+git://user@[::1]:/repo
ok 80 - fetch-pack --diag-url ssh+git://user@[::1]:/~repo
ok 81 - fetch-pack --diag-url ssh+git://user@::1/repo
ok 82 - fetch-pack --diag-url ssh+git://user@::1/~repo
ok 83 - fetch-pack --diag-url ssh+git://user@::1:/repo
ok 84 - fetch-pack --diag-url ssh+git://user@::1:/~repo
ok 85 - fetch-pack --diag-url ssh+git://host:22/repo
ok 86 - fetch-pack --diag-url ssh+git://User@host:22/repo
ok 87 - fetch-pack --diag-url ssh+git://User@[::1]:22/repo
ok 88 - fetch-pack --diag-url git+ssh://host/repo
ok 89 - fetch-pack --diag-url git+ssh://host/~repo
ok 90 - fetch-pack --diag-url git+ssh://host:/repo
ok 91 - fetch-pack --diag-url git+ssh://host:/~repo
ok 92 - fetch-pack --diag-url git+ssh://user@host/repo
ok 93 - fetch-pack --diag-url git+ssh://user@host/~repo
ok 94 - fetch-pack --diag-url git+ssh://user@host:/repo
ok 95 - fetch-pack --diag-url git+ssh://user@host:/~repo
ok 96 - fetch-pack --diag-url git+ssh://user@[::1]/repo
ok 97 - fetch-pack --diag-url git+ssh://user@[::1]/~repo
ok 98 - fetch-pack --diag-url git+ssh://user@[::1]:/repo
ok 99 - fetch-pack --diag-url git+ssh://user@[::1]:/~repo
ok 100 - fetch-pack --diag-url git+ssh://user@::1/repo
ok 101 - fetch-pack --diag-url git+ssh://user@::1/~repo
ok 102 - fetch-pack --diag-url git+ssh://user@::1:/repo
ok 103 - fetch-pack --diag-url git+ssh://user@::1:/~repo
ok 104 - fetch-pack --diag-url git+ssh://host:22/repo
ok 105 - fetch-pack --diag-url git+ssh://User@host:22/repo
ok 106 - fetch-pack --diag-url git+ssh://User@[::1]:22/repo
ok 107 - fetch-pack --diag-url git://host/repo
ok 108 - fetch-pack --diag-url git://host/~repo
ok 109 - fetch-pack --diag-url git://host:/repo
ok 110 - fetch-pack --diag-url git://host:/~repo
ok 111 - fetch-pack --diag-url git://user@host/repo
ok 112 - fetch-pack --diag-url git://user@host/~repo
ok 113 - fetch-pack --diag-url git://user@host:/repo
ok 114 - fetch-pack --diag-url git://user@host:/~repo
ok 115 - fetch-pack --diag-url git://user@[::1]/repo
ok 116 - fetch-pack --diag-url git://user@[::1]/~repo
ok 117 - fetch-pack --diag-url git://user@[::1]:/repo
ok 118 - fetch-pack --diag-url git://user@[::1]:/~repo
ok 119 - fetch-pack --diag-url git://user@::1/repo
ok 120 - fetch-pack --diag-url git://user@::1/~repo
ok 121 - fetch-pack --diag-url git://user@::1:/repo
ok 122 - fetch-pack --diag-url git://user@::1:/~repo
ok 123 - fetch-pack --diag-url git://host:22/repo
ok 124 - fetch-pack --diag-url git://User@host:22/repo
ok 125 - fetch-pack --diag-url git://User@[::1]:22/repo
ok 126 - fetch-pack --diag-url ssh://host/repo
ok 127 - fetch-pack --diag-url ssh://host/~repo
ok 128 - fetch-pack --diag-url ssh://host:/repo
ok 129 - fetch-pack --diag-url ssh://host:/~repo
ok 130 - fetch-pack --diag-url ssh://user@host/repo
ok 131 - fetch-pack --diag-url ssh://user@host/~repo
ok 132 - fetch-pack --diag-url ssh://user@host:/repo
ok 133 - fetch-pack --diag-url ssh://user@host:/~repo
ok 134 - fetch-pack --diag-url ssh://user@[::1]/repo
ok 135 - fetch-pack --diag-url ssh://user@[::1]/~repo
ok 136 - fetch-pack --diag-url ssh://user@[::1]:/repo
ok 137 - fetch-pack --diag-url ssh://user@[::1]:/~repo
ok 138 - fetch-pack --diag-url ssh://user@::1/repo
ok 139 - fetch-pack --diag-url ssh://user@::1/~repo
ok 140 - fetch-pack --diag-url ssh://user@::1:/repo
ok 141 - fetch-pack --diag-url ssh://user@::1:/~repo
ok 142 - fetch-pack --diag-url ssh://host:22/repo
ok 143 - fetch-pack --diag-url ssh://User@host:22/repo
ok 144 - fetch-pack --diag-url ssh://User@[::1]:22/repo
ok 145 - fetch-pack --diag-url file://User@[::1]/repo
ok 146 # skip fetch-pack --diag-url file://User@[::1]/repo (missing MINGW)
ok 147 # skip fetch-pack --diag-url file:///repo (missing MINGW)
ok 148 - fetch-pack --diag-url file://User@[::1]/~repo
ok 149 # skip fetch-pack --diag-url file://User@[::1]/~repo (missing MINGW)
ok 150 - fetch-pack --diag-url ./nohost:repo
ok 151 - fetch-pack --diag-url ./file:nohost/~repo
ok 152 - fetch-pack --diag-url ./nohost:12:repo
ok 153 - fetch-pack --diag-url ./file:nohost:12/~repo
ok 154 - fetch-pack --diag-url ./[::1]:repo
ok 155 - fetch-pack --diag-url ./file:[::1]/~repo
ok 156 - fetch-pack --diag-url ./[::1]:23:repo
ok 157 - fetch-pack --diag-url ./file:[::1]:23/~repo
ok 158 - fetch-pack --diag-url ./[:repo
ok 159 - fetch-pack --diag-url ./file:[/~repo
ok 160 - fetch-pack --diag-url ./[:aa:repo
ok 161 - fetch-pack --diag-url ./file:[:aa/~repo
ok 162 - fetch-pack --diag-url host:repo
ok 163 - fetch-pack --diag-url host:/~repo
ok 164 - fetch-pack --diag-url [::1]:repo
ok 165 - fetch-pack --diag-url [::1]:/~repo
ok 166 - fetch-pack --diag-url ssh+git://host/re:po
ok 167 - fetch-pack --diag-url ssh+git://host/~re:po
ok 168 - fetch-pack --diag-url ssh+git://host:/re:po
ok 169 - fetch-pack --diag-url ssh+git://host:/~re:po
ok 170 - fetch-pack --diag-url ssh+git://user@host/re:po
ok 171 - fetch-pack --diag-url ssh+git://user@host/~re:po
ok 172 - fetch-pack --diag-url ssh+git://user@host:/re:po
ok 173 - fetch-pack --diag-url ssh+git://user@host:/~re:po
ok 174 - fetch-pack --diag-url ssh+git://user@[::1]/re:po
ok 175 - fetch-pack --diag-url ssh+git://user@[::1]/~re:po
ok 176 - fetch-pack --diag-url ssh+git://user@[::1]:/re:po
ok 177 - fetch-pack --diag-url ssh+git://user@[::1]:/~re:po
ok 178 - fetch-pack --diag-url ssh+git://user@::1/re:po
ok 179 - fetch-pack --diag-url ssh+git://user@::1/~re:po
ok 180 - fetch-pack --diag-url ssh+git://user@::1:/re:po
ok 181 - fetch-pack --diag-url ssh+git://user@::1:/~re:po
ok 182 - fetch-pack --diag-url ssh+git://host:22/re:po
ok 183 - fetch-pack --diag-url ssh+git://User@host:22/re:po
ok 184 - fetch-pack --diag-url ssh+git://User@[::1]:22/re:po
ok 185 - fetch-pack --diag-url git+ssh://host/re:po
ok 186 - fetch-pack --diag-url git+ssh://host/~re:po
ok 187 - fetch-pack --diag-url git+ssh://host:/re:po
ok 188 - fetch-pack --diag-url git+ssh://host:/~re:po
ok 189 - fetch-pack --diag-url git+ssh://user@host/re:po
ok 190 - fetch-pack --diag-url git+ssh://user@host/~re:po
ok 191 - fetch-pack --diag-url git+ssh://user@host:/re:po
ok 192 - fetch-pack --diag-url git+ssh://user@host:/~re:po
ok 193 - fetch-pack --diag-url git+ssh://user@[::1]/re:po
ok 194 - fetch-pack --diag-url git+ssh://user@[::1]/~re:po
ok 195 - fetch-pack --diag-url git+ssh://user@[::1]:/re:po
ok 196 - fetch-pack --diag-url git+ssh://user@[::1]:/~re:po
ok 197 - fetch-pack --diag-url git+ssh://user@::1/re:po
ok 198 - fetch-pack --diag-url git+ssh://user@::1/~re:po
ok 199 - fetch-pack --diag-url git+ssh://user@::1:/re:po
ok 200 - fetch-pack --diag-url git+ssh://user@::1:/~re:po
ok 201 - fetch-pack --diag-url git+ssh://host:22/re:po
ok 202 - fetch-pack --diag-url git+ssh://User@host:22/re:po
ok 203 - fetch-pack --diag-url git+ssh://User@[::1]:22/re:po
ok 204 - fetch-pack --diag-url git://host/re:po
ok 205 - fetch-pack --diag-url git://host/~re:po
ok 206 - fetch-pack --diag-url git://host:/re:po
ok 207 - fetch-pack --diag-url git://host:/~re:po
ok 208 - fetch-pack --diag-url git://user@host/re:po
ok 209 - fetch-pack --diag-url git://user@host/~re:po
ok 210 - fetch-pack --diag-url git://user@host:/re:po
ok 211 - fetch-pack --diag-url git://user@host:/~re:po
ok 212 - fetch-pack --diag-url git://user@[::1]/re:po
ok 213 - fetch-pack --diag-url git://user@[::1]/~re:po
ok 214 - fetch-pack --diag-url git://user@[::1]:/re:po
ok 215 - fetch-pack --diag-url git://user@[::1]:/~re:po
ok 216 - fetch-pack --diag-url git://user@::1/re:po
ok 217 - fetch-pack --diag-url git://user@::1/~re:po
ok 218 - fetch-pack --diag-url git://user@::1:/re:po
ok 219 - fetch-pack --diag-url git://user@::1:/~re:po
ok 220 - fetch-pack --diag-url git://host:22/re:po
ok 221 - fetch-pack --diag-url git://User@host:22/re:po
ok 222 - fetch-pack --diag-url git://User@[::1]:22/re:po
ok 223 - fetch-pack --diag-url ssh://host/re:po
ok 224 - fetch-pack --diag-url ssh://host/~re:po
ok 225 - fetch-pack --diag-url ssh://host:/re:po
ok 226 - fetch-pack --diag-url ssh://host:/~re:po
ok 227 - fetch-pack --diag-url ssh://user@host/re:po
ok 228 - fetch-pack --diag-url ssh://user@host/~re:po
ok 229 - fetch-pack --diag-url ssh://user@host:/re:po
ok 230 - fetch-pack --diag-url ssh://user@host:/~re:po
ok 231 - fetch-pack --diag-url ssh://user@[::1]/re:po
ok 232 - fetch-pack --diag-url ssh://user@[::1]/~re:po
ok 233 - fetch-pack --diag-url ssh://user@[::1]:/re:po
ok 234 - fetch-pack --diag-url ssh://user@[::1]:/~re:po
ok 235 - fetch-pack --diag-url ssh://user@::1/re:po
ok 236 - fetch-pack --diag-url ssh://user@::1/~re:po
ok 237 - fetch-pack --diag-url ssh://user@::1:/re:po
ok 238 - fetch-pack --diag-url ssh://user@::1:/~re:po
ok 239 - fetch-pack --diag-url ssh://host:22/re:po
ok 240 - fetch-pack --diag-url ssh://User@host:22/re:po
ok 241 - fetch-pack --diag-url ssh://User@[::1]:22/re:po
ok 242 - fetch-pack --diag-url file://User@[::1]/re:po
ok 243 # skip fetch-pack --diag-url file://User@[::1]/re:po (missing MINGW)
ok 244 # skip fetch-pack --diag-url file:///re:po (missing MINGW)
ok 245 - fetch-pack --diag-url file://User@[::1]/~re:po
ok 246 # skip fetch-pack --diag-url file://User@[::1]/~re:po (missing MINGW)
ok 247 - fetch-pack --diag-url ./nohost:re:po
ok 248 - fetch-pack --diag-url ./file:nohost/~re:po
ok 249 - fetch-pack --diag-url ./nohost:12:re:po
ok 250 - fetch-pack --diag-url ./file:nohost:12/~re:po
ok 251 - fetch-pack --diag-url ./[::1]:re:po
ok 252 - fetch-pack --diag-url ./file:[::1]/~re:po
ok 253 - fetch-pack --diag-url ./[::1]:23:re:po
ok 254 - fetch-pack --diag-url ./file:[::1]:23/~re:po
ok 255 - fetch-pack --diag-url ./[:re:po
ok 256 - fetch-pack --diag-url ./file:[/~re:po
ok 257 - fetch-pack --diag-url ./[:aa:re:po
ok 258 - fetch-pack --diag-url ./file:[:aa/~re:po
ok 259 - fetch-pack --diag-url host:re:po
ok 260 - fetch-pack --diag-url host:/~re:po
ok 261 - fetch-pack --diag-url [::1]:re:po
ok 262 - fetch-pack --diag-url [::1]:/~re:po
ok 263 - fetch-pack --diag-url ssh+git://host/re/po
ok 264 - fetch-pack --diag-url ssh+git://host/~re/po
ok 265 - fetch-pack --diag-url ssh+git://host:/re/po
ok 266 - fetch-pack --diag-url ssh+git://host:/~re/po
ok 267 - fetch-pack --diag-url ssh+git://user@host/re/po
ok 268 - fetch-pack --diag-url ssh+git://user@host/~re/po
ok 269 - fetch-pack --diag-url ssh+git://user@host:/re/po
ok 270 - fetch-pack --diag-url ssh+git://user@host:/~re/po
ok 271 - fetch-pack --diag-url ssh+git://user@[::1]/re/po
ok 272 - fetch-pack --diag-url ssh+git://user@[::1]/~re/po
ok 273 - fetch-pack --diag-url ssh+git://user@[::1]:/re/po
ok 274 - fetch-pack --diag-url ssh+git://user@[::1]:/~re/po
ok 275 - fetch-pack --diag-url ssh+git://user@::1/re/po
ok 276 - fetch-pack --diag-url ssh+git://user@::1/~re/po
ok 277 - fetch-pack --diag-url ssh+git://user@::1:/re/po
ok 278 - fetch-pack --diag-url ssh+git://user@::1:/~re/po
ok 279 - fetch-pack --diag-url ssh+git://host:22/re/po
ok 280 - fetch-pack --diag-url ssh+git://User@host:22/re/po
ok 281 - fetch-pack --diag-url ssh+git://User@[::1]:22/re/po
ok 282 - fetch-pack --diag-url git+ssh://host/re/po
ok 283 - fetch-pack --diag-url git+ssh://host/~re/po
ok 284 - fetch-pack --diag-url git+ssh://host:/re/po
ok 285 - fetch-pack --diag-url git+ssh://host:/~re/po
ok 286 - fetch-pack --diag-url git+ssh://user@host/re/po
ok 287 - fetch-pack --diag-url git+ssh://user@host/~re/po
ok 288 - fetch-pack --diag-url git+ssh://user@host:/re/po
ok 289 - fetch-pack --diag-url git+ssh://user@host:/~re/po
ok 290 - fetch-pack --diag-url git+ssh://user@[::1]/re/po
ok 291 - fetch-pack --diag-url git+ssh://user@[::1]/~re/po
ok 292 - fetch-pack --diag-url git+ssh://user@[::1]:/re/po
ok 293 - fetch-pack --diag-url git+ssh://user@[::1]:/~re/po
ok 294 - fetch-pack --diag-url git+ssh://user@::1/re/po
ok 295 - fetch-pack --diag-url git+ssh://user@::1/~re/po
ok 296 - fetch-pack --diag-url git+ssh://user@::1:/re/po
ok 297 - fetch-pack --diag-url git+ssh://user@::1:/~re/po
ok 298 - fetch-pack --diag-url git+ssh://host:22/re/po
ok 299 - fetch-pack --diag-url git+ssh://User@host:22/re/po
ok 300 - fetch-pack --diag-url git+ssh://User@[::1]:22/re/po
ok 301 - fetch-pack --diag-url git://host/re/po
ok 302 - fetch-pack --diag-url git://host/~re/po
ok 303 - fetch-pack --diag-url git://host:/re/po
ok 304 - fetch-pack --diag-url git://host:/~re/po
ok 305 - fetch-pack --diag-url git://user@host/re/po
ok 306 - fetch-pack --diag-url git://user@host/~re/po
ok 307 - fetch-pack --diag-url git://user@host:/re/po
ok 308 - fetch-pack --diag-url git://user@host:/~re/po
ok 309 - fetch-pack --diag-url git://user@[::1]/re/po
ok 310 - fetch-pack --diag-url git://user@[::1]/~re/po
ok 311 - fetch-pack --diag-url git://user@[::1]:/re/po
ok 312 - fetch-pack --diag-url git://user@[::1]:/~re/po
ok 313 - fetch-pack --diag-url git://user@::1/re/po
ok 314 - fetch-pack --diag-url git://user@::1/~re/po
ok 315 - fetch-pack --diag-url git://user@::1:/re/po
ok 316 - fetch-pack --diag-url git://user@::1:/~re/po
ok 317 - fetch-pack --diag-url git://host:22/re/po
ok 318 - fetch-pack --diag-url git://User@host:22/re/po
ok 319 - fetch-pack --diag-url git://User@[::1]:22/re/po
ok 320 - fetch-pack --diag-url ssh://host/re/po
ok 321 - fetch-pack --diag-url ssh://host/~re/po
ok 322 - fetch-pack --diag-url ssh://host:/re/po
ok 323 - fetch-pack --diag-url ssh://host:/~re/po
ok 324 - fetch-pack --diag-url ssh://user@host/re/po
ok 325 - fetch-pack --diag-url ssh://user@host/~re/po
ok 326 - fetch-pack --diag-url ssh://user@host:/re/po
ok 327 - fetch-pack --diag-url ssh://user@host:/~re/po
ok 328 - fetch-pack --diag-url ssh://user@[::1]/re/po
ok 329 - fetch-pack --diag-url ssh://user@[::1]/~re/po
ok 330 - fetch-pack --diag-url ssh://user@[::1]:/re/po
ok 331 - fetch-pack --diag-url ssh://user@[::1]:/~re/po
ok 332 - fetch-pack --diag-url ssh://user@::1/re/po
ok 333 - fetch-pack --diag-url ssh://user@::1/~re/po
ok 334 - fetch-pack --diag-url ssh://user@::1:/re/po
ok 335 - fetch-pack --diag-url ssh://user@::1:/~re/po
ok 336 - fetch-pack --diag-url ssh://host:22/re/po
ok 337 - fetch-pack --diag-url ssh://User@host:22/re/po
ok 338 - fetch-pack --diag-url ssh://User@[::1]:22/re/po
ok 339 - fetch-pack --diag-url file://User@[::1]/re/po
ok 340 # skip fetch-pack --diag-url file://User@[::1]/re/po (missing MINGW)
ok 341 # skip fetch-pack --diag-url file:///re/po (missing MINGW)
ok 342 - fetch-pack --diag-url file://User@[::1]/~re/po
ok 343 # skip fetch-pack --diag-url file://User@[::1]/~re/po (missing MINGW)
ok 344 - fetch-pack --diag-url ./nohost:re/po
ok 345 - fetch-pack --diag-url ./file:nohost/~re/po
ok 346 - fetch-pack --diag-url ./nohost:12:re/po
ok 347 - fetch-pack --diag-url ./file:nohost:12/~re/po
ok 348 - fetch-pack --diag-url ./[::1]:re/po
ok 349 - fetch-pack --diag-url ./file:[::1]/~re/po
ok 350 - fetch-pack --diag-url ./[::1]:23:re/po
ok 351 - fetch-pack --diag-url ./file:[::1]:23/~re/po
ok 352 - fetch-pack --diag-url ./[:re/po
ok 353 - fetch-pack --diag-url ./file:[/~re/po
ok 354 - fetch-pack --diag-url ./[:aa:re/po
ok 355 - fetch-pack --diag-url ./file:[:aa/~re/po
ok 356 - fetch-pack --diag-url host:re/po
ok 357 - fetch-pack --diag-url host:/~re/po
ok 358 - fetch-pack --diag-url [::1]:re/po
ok 359 - fetch-pack --diag-url [::1]:/~re/po
ok 360 # skip fetch-pack --diag-url file://c:/repo (missing MINGW)
ok 361 # skip fetch-pack --diag-url c:repo (missing MINGW)
ok 362 - clone shallow since ...
ok 363 - fetch shallow since ...
ok 364 - clone shallow since selects no commits
ok 365 - shallow since with commit graph and already-seen commit
ok 366 - shallow clone exclude tag two
ok 367 - fetch exclude tag one
ok 368 - fetching deepen
ok 369 - use ref advertisement to prune "have" lines sent
ok 370 - same as last but with config overrides
ok 371 - ensure bogus fetch.negotiationAlgorithm yields error
ok 372 - filtering by size
ok 373 - filtering by size has no effect if support for it is not advertised
ok 374 - fetch with --filter=blob:limit=0
# passed all 374 test(s)
# SKIP no web server found at ''
1..374
*** t5501-fetch-push-alternates.sh ***
ok 1 - setup
ok 2 - pushing into a repository with the same alternate
ok 3 - fetching from a repository with the same alternate
# passed all 3 test(s)
1..3
*** t5502-quickfetch.sh ***
ok 1 - setup
ok 2 - clone without alternate
ok 3 - further commits in the original
ok 4 - copy commit and tree but not blob by hand
ok 5 - quickfetch should not leave a corrupted repository
ok 6 - quickfetch should not copy from alternate
ok 7 - quickfetch should handle ~1000 refs (on Windows)
# passed all 7 test(s)
1..7
*** t5503-tagfollow.sh ***
ok 1 - setup
ok 2 - setup expect
ok 3 - fetch A (new commit : 1 connection)
ok 4 - create tag T on A, create C on branch cat
ok 5 - setup expect
ok 6 - fetch C, T (new branch, tag : 1 connection)
ok 7 - create commits O, B, tag S on B
ok 8 - setup expect
ok 9 - fetch B, S (commit and tag : 1 connection)
ok 10 - setup expect
ok 11 - new clone fetch main and tags
# passed all 11 test(s)
1..11
*** t5504-fetch-receive-strict.sh ***
ok 1 - setup and inject "corrupt or missing" object
ok 2 - fetch without strict
ok 3 - fetch with !fetch.fsckobjects
ok 4 - fetch with fetch.fsckobjects
ok 5 - fetch with transfer.fsckobjects
ok 6 - push without strict
ok 7 - push with !receive.fsckobjects
ok 8 - push with receive.fsckobjects
ok 9 - push with transfer.fsckobjects
ok 10 - repair the "corrupt or missing" object
ok 11 - setup bogus commit
ok 12 - fsck with no skipList input
ok 13 - setup sorted and unsorted skipLists
ok 14 - fsck with sorted skipList
ok 15 - fsck with unsorted skipList
ok 16 - fsck with invalid or bogus skipList input
ok 17 - fsck with other accepted skipList input (comments & empty lines)
ok 18 - fsck no garbage output from comments & empty lines errors
ok 19 - fsck with invalid abbreviated skipList input
ok 20 - fsck with exhaustive accepted skipList input (various types of comments etc.)
ok 21 - push with receive.fsck.skipList
ok 22 - fetch with fetch.fsck.skipList
ok 23 - fsck.<unknownmsg-id> dies
ok 24 - push with receive.fsck.missingEmail=warn
ok 25 - fetch with fetch.fsck.missingEmail=warn
ok 26 - receive.fsck.unterminatedHeader=warn triggers error
ok 27 - fetch.fsck.unterminatedHeader=warn triggers error
ok 28 - badFilemode is not a strict error
# passed all 28 test(s)
1..28
*** t5505-remote.sh ***
ok 1 - setup
ok 2 - add remote whose URL agrees with url.<...>.insteadOf
ok 3 - remote information for the origin
ok 4 - add another remote
ok 5 - setup bare clone for server
ok 6 - filters for promisor remotes are listed by git remote -v
ok 7 - filters should not be listed for non promisor remotes (remote -v)
ok 8 - filters are listed by git remote -v only
ok 9 - check remote-tracking
ok 10 - remote forces tracking branches
ok 11 - remove remote
ok 12 - remove remote
ok 13 - remove remote protects local branches
ok 14 - remove errors out early when deleting non-existent branch
ok 15 - remove remote with a branch without configured merge
ok 16 - rename errors out early when deleting non-existent branch
ok 17 - rename errors out early when new name is invalid
ok 18 - add existing foreign_vcs remote
ok 19 - add existing foreign_vcs remote
ok 20 - add invalid foreign_vcs remote
ok 21 - without subcommand
ok 22 - without subcommand accepts -v
ok 23 - without subcommand does not take arguments
ok 24 - show
ok 25 - show with negative refspecs
not ok 26 - show stale with negative refspecs # TODO known breakage
ok 27 - show -n
ok 28 - prune
ok 29 - set-head --delete
ok 30 - set-head --auto
ok 31 - set-head --auto has no problem w/multiple HEADs
ok 32 - set-head explicit
ok 33 - prune --dry-run
ok 34 - add --mirror && prune
ok 35 - add --mirror=fetch
ok 36 - fetch mirrors act as mirrors during fetch
ok 37 - fetch mirrors can prune
ok 38 - fetch mirrors do not act as mirrors during push
ok 39 - add fetch mirror with specific branches
ok 40 - fetch mirror respects specific branches
ok 41 - add --mirror=push
ok 42 - push mirrors act as mirrors during push
ok 43 - push mirrors do not act as mirrors during fetch
ok 44 - push mirrors do not allow you to specify refs
ok 45 - add alt && prune
ok 46 - add with reachable tags (default)
ok 47 - add --tags
ok 48 - add --no-tags
ok 49 - reject --no-no-tags
ok 50 - update
ok 51 - update with arguments
ok 52 - update --prune
ok 53 - update default
ok 54 - update default (overridden, with funny whitespace)
ok 55 - update (with remotes.default defined)
ok 56 - "remote show" does not show symbolic refs
ok 57 - reject adding remote with an invalid name
ok 58 - rename a remote
ok 59 - rename a remote renames repo remote.pushDefault
ok 60 - rename a remote renames repo remote.pushDefault but ignores global
ok 61 - rename a remote renames repo remote.pushDefault but keeps global
ok 62 - rename handles remote without fetch refspec
ok 63 - rename does not update a non-default fetch refspec
ok 64 - rename a remote with name part of fetch spec
ok 65 - rename a remote with name prefix of other remote
ok 66 - rename succeeds with existing remote.<target>.prune
ok 67 - remove a remote
ok 68 - remove a remote removes repo remote.pushDefault
ok 69 - remove a remote removes repo remote.pushDefault but ignores global
ok 70 - remove a remote removes repo remote.pushDefault but keeps global
ok 71 - migrate a remote from named file in $GIT_DIR/remotes
ok 72 - migrate a remote from named file in $GIT_DIR/branches
ok 73 - migrate a remote from named file in $GIT_DIR/branches (2)
ok 74 - remote prune to cause a dangling symref
ok 75 - show empty remote
ok 76 - remote set-branches requires a remote
ok 77 - remote set-branches
ok 78 - remote set-branches with --mirror
ok 79 - new remote
ok 80 - get-url on new remote
ok 81 - remote set-url with locked config
ok 82 - remote set-url bar
ok 83 - remote set-url baz bar
ok 84 - remote set-url zot bar
ok 85 - remote set-url --push zot baz
ok 86 - remote set-url --push zot
ok 87 - get-url with different urls
ok 88 - remote set-url --push qux zot
ok 89 - remote set-url --push foo qu+x
ok 90 - remote set-url --push --add aaa
ok 91 - get-url on multi push remote
ok 92 - remote set-url --push bar aaa
ok 93 - remote set-url --push --delete bar
ok 94 - remote set-url --push --delete foo
ok 95 - remote set-url --add bbb
ok 96 - get-url on multi fetch remote
ok 97 - remote set-url --delete .*
ok 98 - remote set-url --delete bbb
ok 99 - remote set-url --delete baz
ok 100 - remote set-url --add ccc
ok 101 - remote set-url --delete baz
ok 102 - extra args: setup
ok 103 - extra args: add nick url
ok 104 - extra args: rename origin newname
ok 105 - extra args: remove origin
ok 106 - extra args: set-head origin main
ok 107 - extra args: get-url origin newurl
ok 108 - extra args: set-url origin newurl oldurl
ok 109 - add remote matching the "insteadOf" URL
ok 110 - unqualified <dst> refspec DWIM and advice
ok 111 - refs/remotes/* <src> refspec and unqualified <dst> DWIM and advice
# still have 1 known breakage(s)
# passed all remaining 110 test(s)
1..111
*** t5506-remote-groups.sh ***
ok 1 - setup
ok 2 - no group updates all
ok 3 - nonexistent group produces error
ok 4 - updating group updates all members (remote update)
ok 5 - updating group updates all members (fetch)
ok 6 - updating group does not update non-members (remote update)
ok 7 - updating group does not update non-members (fetch)
ok 8 - updating remote name updates that remote
ok 9 - updating group in parallel with a duplicate remote does not fail (fetch)
# passed all 9 test(s)
1..9
*** t5507-remote-environment.sh ***
ok 1 - set up "remote" push situation
ok 2 - set up fake ssh
ok 3 - confirm default push fails
ok 4 - config does not travel over same-machine push
ok 5 - config does not travel over ssh push
# passed all 5 test(s)
1..5
*** t5509-fetch-push-namespaces.sh ***
ok 1 - setup
ok 2 - pushing into a repository using a ref namespace
ok 3 - pulling from a repository using a ref namespace
ok 4 - mirroring a repository using a ref namespace
ok 5 - hide namespaced refs with transfer.hideRefs
ok 6 - check that transfer.hideRefs does not match unstripped refs
ok 7 - hide full refs with transfer.hideRefs
ok 8 - try to update a hidden ref
ok 9 - try to update a ref that is not hidden
ok 10 - try to update a hidden full ref
ok 11 - set up ambiguous HEAD
ok 12 - clone chooses correct HEAD (v0)
ok 13 - clone chooses correct HEAD (v2)
ok 14 - denyCurrentBranch and unborn branch with ref namespace
# passed all 14 test(s)
1..14
*** t5510-fetch.sh ***
ok 1 - setup
ok 2 - clone and setup child repos
ok 3 - fetch test
ok 4 - fetch test for-merge
ok 5 - fetch --prune on its own works as expected
ok 6 - fetch --prune with a branch name keeps branches
ok 7 - fetch --prune with a namespace keeps other namespaces
ok 8 - fetch --prune handles overlapping refspecs
ok 9 - fetch --prune --tags prunes branches but not tags
ok 10 - fetch --prune --tags with branch does not prune other things
ok 11 - fetch --prune --tags with refspec prunes based on refspec
ok 12 - fetch --prune fails to delete branches
ok 13 - fetch --atomic works with a single branch
ok 14 - fetch --atomic works with multiple branches
ok 15 - fetch --atomic works with mixed branches and tags
ok 16 - fetch --atomic prunes references
ok 17 - fetch --atomic aborts with non-fast-forward update
ok 18 - fetch --atomic executes a single reference transaction only
ok 19 - fetch --atomic aborts all reference updates if hook aborts
ok 20 - fetch --atomic --append appends to FETCH_HEAD
ok 21 - --refmap="" ignores configured refspec
ok 22 - --refmap="" and --prune
ok 23 - fetch tags when there is no tags
ok 24 - fetch following tags
ok 25 - fetch uses remote ref names to describe new refs
ok 26 - fetch must not resolve short tag name
ok 27 - fetch can now resolve short remote name
ok 28 - create bundle 1
ok 29 - header of bundle looks right
ok 30 - create bundle 2
ok 31 - unbundle 1
ok 32 - bundle 1 has only 3 files 
ok 33 - unbundle 2
ok 34 - bundle does not prerequisite objects
ok 35 - bundle should be able to create a full history
ok 36 - fetch with a non-applying branch.<name>.merge
ok 37 - fetch from GIT URL with a non-applying branch.<name>.merge [1]
ok 38 - fetch from GIT URL with a non-applying branch.<name>.merge [2]
ok 39 - fetch from GIT URL with a non-applying branch.<name>.merge [3]
ok 40 - quoting of a strangely named repo
ok 41 - bundle should record HEAD correctly
ok 42 - mark initial state of origin/main
ok 43 - explicit fetch should update tracking
ok 44 - explicit pull should update tracking
ok 45 - explicit --refmap is allowed only with command-line refspec
ok 46 - explicit --refmap option overrides remote.*.fetch
ok 47 - explicitly empty --refmap option disables remote.*.fetch
ok 48 - configured fetch updates tracking
ok 49 - non-matching refspecs do not confuse tracking update
ok 50 - pushing nonexistent branch by mistake should not segv
ok 51 - auto tag following fetches minimum
ok 52 - refuse to fetch into the current branch
ok 53 - fetch into the current branch with --update-head-ok
ok 54 - fetch --dry-run does not touch FETCH_HEAD, but still prints what would be written
ok 55 - --no-write-fetch-head does not touch FETCH_HEAD, and does not print what would be written
ok 56 - --write-fetch-head gets defeated by --dry-run
ok 57 - should be able to fetch with duplicate refspecs
ok 58 - LHS of refspec follows ref disambiguation rules
ok 59 - fetch.writeCommitGraph
ok 60 - fetch.writeCommitGraph with submodules
ok 61 - fetch from multiple configured URLs in single remote
ok 62 - setup cmdline_setup variable for subsequent test
ok 63 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 64 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 65 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 66 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 67 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 68 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 69 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 70 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 71 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 72 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 73 - name prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 74 - link prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 75 - name prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 76 - link prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 77 - name prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 78 - link prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 79 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 80 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 81 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 82 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 83 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 84 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 85 - name prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 86 - link prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 87 - name prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 88 - link prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 89 - name prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 90 - link prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 91 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 92 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 93 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 94 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 95 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 96 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 97 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 98 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 99 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 100 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 101 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 102 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 103 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 104 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 105 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 106 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 107 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 108 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 109 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 110 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 111 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 112 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 113 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 114 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 115 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 116 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 117 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 118 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 119 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 120 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 121 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 122 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 123 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 124 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 125 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 126 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 127 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 128 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 129 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune-tags; branch:kept tag:kept
ok 130 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune-tags; branch:kept tag:kept
ok 131 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:kept tag:kept
ok 132 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:kept tag:kept
ok 133 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true; branch:kept tag:kept
ok 134 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true; branch:kept tag:kept
ok 135 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags; branch:pruned tag:pruned
ok 136 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags; branch:pruned tag:pruned
ok 137 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned
ok 138 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned
ok 139 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true; branch:pruned tag:pruned
ok 140 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true; branch:pruned tag:pruned
ok 141 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned
ok 142 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned
ok 143 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=false remote.origin.pruneTags=true; branch:pruned tag:pruned
ok 144 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=false remote.origin.pruneTags=true; branch:pruned tag:pruned
ok 145 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=true remote.origin.pruneTags=false; branch:kept tag:kept
ok 146 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=true remote.origin.pruneTags=false; branch:kept tag:kept
ok 147 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 148 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 149 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 150 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 151 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 152 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 153 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune-tags; branch:kept tag:kept
ok 154 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune-tags; branch:kept tag:kept
ok 155 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:pruned tag:pruned
ok 156 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:kept tag:pruned
ok 157 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin; branch:pruned tag:pruned
ok 158 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin; branch:kept tag:pruned
ok 159 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin; branch:pruned tag:pruned
ok 160 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin; branch:kept tag:pruned
ok 161 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin; branch:pruned tag:pruned
ok 162 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin; branch:kept tag:pruned
ok 163 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:pruned tag:pruned
ok 164 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:kept tag:pruned
ok 165 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:pruned tag:pruned
ok 166 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:kept tag:pruned
ok 167 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true origin; branch:pruned tag:pruned
ok 168 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true origin; branch:kept tag:pruned
ok 169 - remove remote.origin.fetch "one"
ok 170 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:kept tag:pruned
ok 171 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:kept tag:pruned
ok 172 - all boundary commits are excluded
ok 173 - fetch --prune prints the remotes url
ok 174 - branchname D/F conflict resolved by --prune
ok 175 - fetching a one-level ref works
ok 176 - fetching with auto-gc does not lock up
ok 177 - fetch.hideRefs affects connectivity check
ok 178 - transfer.hideRefs affects connectivity check
ok 179 - prepare source branch
ok 180 - fetch trumps transfer limit
ok 181 - fetch trumps transfer limit
ok 182 - --negotiation-tip limits "have" lines sent
ok 183 - --negotiation-tip understands globs
ok 184 - --negotiation-tip understands abbreviated SHA-1
ok 185 - --negotiation-tip rejects missing OIDs
ok 186 - clone does not get confused by a D/F conflict
# passed all 186 test(s)
# SKIP no web server found at ''
1..186
*** t5511-refspec.sh ***
ok 1 - push  (invalid)
ok 2 - push :
ok 3 - push :: (invalid)
ok 4 - push +:
ok 5 - fetch 
ok 6 - fetch :
ok 7 - fetch :: (invalid)
ok 8 - push refs/heads/*:refs/remotes/frotz/*
ok 9 - push refs/heads/*:refs/remotes/frotz (invalid)
ok 10 - push refs/heads:refs/remotes/frotz/* (invalid)
ok 11 - push refs/heads/main:refs/remotes/frotz/xyzzy
ok 12 - fetch refs/heads/*:refs/remotes/frotz/*
ok 13 - fetch refs/heads/*:refs/remotes/frotz (invalid)
ok 14 - fetch refs/heads:refs/remotes/frotz/* (invalid)
ok 15 - fetch refs/heads/main:refs/remotes/frotz/xyzzy
ok 16 - fetch refs/heads/main::refs/remotes/frotz/xyzzy (invalid)
ok 17 - fetch refs/heads/maste :refs/remotes/frotz/xyzzy (invalid)
ok 18 - push main~1:refs/remotes/frotz/backup
ok 19 - fetch main~1:refs/remotes/frotz/backup (invalid)
ok 20 - push HEAD~4:refs/remotes/frotz/new
ok 21 - fetch HEAD~4:refs/remotes/frotz/new (invalid)
ok 22 - push HEAD
ok 23 - fetch HEAD
ok 24 - push @
ok 25 - fetch @
ok 26 - push refs/heads/ nitfol (invalid)
ok 27 - fetch refs/heads/ nitfol (invalid)
ok 28 - push HEAD: (invalid)
ok 29 - fetch HEAD:
ok 30 - push refs/heads/ nitfol: (invalid)
ok 31 - fetch refs/heads/ nitfol: (invalid)
ok 32 - push :refs/remotes/frotz/deleteme
ok 33 - fetch :refs/remotes/frotz/HEAD-to-me
ok 34 - push :refs/remotes/frotz/delete me (invalid)
ok 35 - fetch :refs/remotes/frotz/HEAD to me (invalid)
ok 36 - fetch refs/heads/*/for-linus:refs/remotes/mine/*-blah
ok 37 - push refs/heads/*/for-linus:refs/remotes/mine/*-blah
ok 38 - fetch refs/heads*/for-linus:refs/remotes/mine/*
ok 39 - push refs/heads*/for-linus:refs/remotes/mine/*
ok 40 - fetch refs/heads/*/*/for-linus:refs/remotes/mine/* (invalid)
ok 41 - push refs/heads/*/*/for-linus:refs/remotes/mine/* (invalid)
ok 42 - fetch refs/heads/*g*/for-linus:refs/remotes/mine/* (invalid)
ok 43 - push refs/heads/*g*/for-linus:refs/remotes/mine/* (invalid)
ok 44 - fetch refs/heads/*/for-linus:refs/remotes/mine/*
ok 45 - push refs/heads/*/for-linus:refs/remotes/mine/*
ok 46 - fetch refs/heads/Ä
ok 47 - fetch refs/heads/	tab (invalid)
# passed all 47 test(s)
1..47
*** t5512-ls-remote.sh ***
ok 1 - set up fake upload-pack
ok 2 - dies when no remote found
ok 3 - setup
ok 4 - ls-remote --tags .git
ok 5 - ls-remote .git
ok 6 - ls-remote --tags self
ok 7 - ls-remote self
ok 8 - ls-remote --sort="version:refname" --tags self
ok 9 - ls-remote --sort="-version:refname" --tags self
ok 10 - ls-remote --sort="-refname" --tags self
ok 11 - dies when no remote specified, multiple remotes found, and no default specified
ok 12 - succeeds when no remote specified but only one found
ok 13 - use "origin" when no remote specified and multiple found
ok 14 - suppress "From <url>" with -q
ok 15 - use branch.<name>.remote if possible
ok 16 - confuses pattern as remote when no remote specified
ok 17 - die with non-2 for wrong repository even with --exit-code
ok 18 - Report success even when nothing matches
ok 19 - Report no-match with --exit-code
ok 20 - Report match with --exit-code
ok 21 - set up some extra tags for ref hiding
ok 22 - Hide some refs with transfer.hiderefs
ok 23 - Override hiding of transfer.hiderefs
ok 24 - Hide some refs with uploadpack.hiderefs
ok 25 - Override hiding of uploadpack.hiderefs
ok 26 - overrides work between mixed transfer/upload-pack hideRefs
ok 27 - protocol v2 supports hiderefs
ok 28 - ls-remote --symref
ok 29 - ls-remote with filtered symref (refname)
ok 30 - ls-remote with filtered symref (--heads)
ok 31 - indicate no refs in v0 standards-compliant empty remote
ok 32 - ls-remote works outside repository
ok 33 - ls-remote --sort fails gracefully outside repository
ok 34 - ls-remote patterns work with all protocol versions
ok 35 - ls-remote prefixes work with all protocol versions
ok 36 - v0 clients can handle multiple symrefs
# passed all 36 test(s)
1..36
*** t5513-fetch-track.sh ***
ok 1 - setup
ok 2 - fetch
# passed all 2 test(s)
1..2
*** t5514-fetch-multiple.sh ***
ok 1 - setup
ok 2 - git fetch --all
ok 3 - git fetch --all --no-write-fetch-head
ok 4 - git fetch --all should continue if a remote has errors
ok 5 - git fetch --all does not allow non-option arguments
ok 6 - git fetch --multiple (but only one remote)
ok 7 - git fetch --multiple (two remotes)
ok 8 - git fetch --multiple (bad remote names)
ok 9 - git fetch --all (skipFetchAll)
ok 10 - git fetch --multiple (ignoring skipFetchAll)
ok 11 - git fetch --all --no-tags
ok 12 - git fetch --all --tags
ok 13 - parallel
ok 14 - git fetch --multiple --jobs=0 picks a default
ok 15 - git fetch --all (works with fetch.all = true)
ok 16 - git fetch --all (works with fetch.all = false)
ok 17 - git fetch (fetch all remotes with fetch.all = true)
ok 18 - git fetch one (explicit remote overrides fetch.all)
ok 19 - git config fetch.all false (fetch only default remote)
ok 20 - git fetch --no-all (fetch only default remote with fetch.all = true)
ok 21 - git fetch --no-all (fetch only default remote with fetch.all = false)
ok 22 - git fetch --no-all (fetch only default remote without fetch.all)
ok 23 - git fetch --all --no-all (fetch only default remote)
ok 24 - git fetch --no-all one (fetch only explicit remote)
ok 25 - git fetch --no-all --all (fetch all remotes)
# passed all 25 test(s)
1..25
*** t5515-fetch-merge-logic.sh ***
ok 1 - setup
ok 2 - br-config-explicit
ok 3 - br-config-explicit config-explicit
ok 4 - br-config-explicit-merge
ok 5 - br-config-explicit-merge config-explicit
ok 6 - br-config-explicit-octopus
ok 7 - br-config-explicit-octopus config-explicit
ok 8 - br-config-glob
ok 9 - br-config-glob config-glob
ok 10 - br-config-glob-merge
ok 11 - br-config-glob-merge config-glob
ok 12 - br-config-glob-octopus
ok 13 - br-config-glob-octopus config-glob
ok 14 - br-remote-explicit
ok 15 - br-remote-explicit remote-explicit
ok 16 - br-remote-explicit-merge
ok 17 - br-remote-explicit-merge remote-explicit
ok 18 - br-remote-explicit-octopus
ok 19 - br-remote-explicit-octopus remote-explicit
ok 20 - br-remote-glob
ok 21 - br-remote-glob remote-glob
ok 22 - br-remote-glob-merge
ok 23 - br-remote-glob-merge remote-glob
ok 24 - br-remote-glob-octopus
ok 25 - br-remote-glob-octopus remote-glob
ok 26 - br-branches-default
ok 27 - br-branches-default branches-default
ok 28 - br-branches-default-merge
ok 29 - br-branches-default-merge branches-default
ok 30 - br-branches-default-octopus
ok 31 - br-branches-default-octopus branches-default
ok 32 - br-branches-one
ok 33 - br-branches-one branches-one
ok 34 - br-branches-one-merge
ok 35 - br-branches-one-merge branches-one
ok 36 - br-branches-one-octopus
ok 37 - br-branches-one-octopus branches-one
ok 38 - main
ok 39 - main config-explicit
ok 40 - main config-glob
ok 41 - main remote-explicit
ok 42 - main remote-glob
ok 43 - main branches-default
ok 44 - main branches-one
ok 45 - br-unconfig
ok 46 - br-unconfig config-explicit
ok 47 - br-unconfig config-glob
ok 48 - br-unconfig remote-explicit
ok 49 - br-unconfig remote-glob
ok 50 - br-unconfig branches-default
ok 51 - br-unconfig branches-one
ok 52 - main ../.git
ok 53 - main ../.git one
ok 54 - main ../.git one two
ok 55 - main --tags ../.git
ok 56 - main ../.git tag tag-one tag tag-three
ok 57 - main ../.git tag tag-one-tree tag tag-three-file
ok 58 - main ../.git one tag tag-one tag tag-three-file
ok 59 - br-unconfig ../.git
ok 60 - br-unconfig ../.git one
ok 61 - br-unconfig ../.git one two
ok 62 - br-unconfig --tags ../.git
ok 63 - br-unconfig ../.git tag tag-one tag tag-three
ok 64 - br-unconfig ../.git tag tag-one-tree tag tag-three-file
ok 65 - br-unconfig ../.git one tag tag-one tag tag-three-file
# passed all 65 test(s)
1..65
*** t5516-fetch-push.sh ***
ok 1 - setup
ok 2 - reject 'git push --no-ipv4'
ok 3 - reject 'git push --no-ipv6'
ok 4 - reject 'git fetch --no-ipv4'
ok 5 - reject 'git fetch --no-ipv6'
ok 6 - fetch without wildcard
ok 7 - fetch with wildcard
ok 8 - fetch with insteadOf
ok 9 - fetch with pushInsteadOf (should not rewrite)
ok 10 - push without negotiation
ok 11 - push with negotiation
ok 12 - push with negotiation proceeds anyway even if negotiation fails
ok 13 - push with negotiation does not attempt to fetch submodules
ok 14 - push without wildcard
ok 15 - push with wildcard
ok 16 - push with insteadOf
ok 17 - push with pushInsteadOf
ok 18 - push with pushInsteadOf and explicit pushurl (pushInsteadOf should not rewrite)
ok 19 - push with matching heads
ok 20 - push with matching heads on the command line
ok 21 - failed (non-fast-forward) push with matching heads
ok 22 - push --force with matching heads
ok 23 - push with matching heads and forced update
ok 24 - push with no ambiguity (1)
ok 25 - push with no ambiguity (2)
ok 26 - push with colon-less refspec, no ambiguity
ok 27 - push with weak ambiguity (1)
ok 28 - push with weak ambiguity (2)
ok 29 - push with ambiguity
ok 30 - push with onelevel ref
ok 31 - push with colon-less refspec (1)
ok 32 - push with colon-less refspec (2)
ok 33 - push with colon-less refspec (3)
ok 34 - push with colon-less refspec (4)
ok 35 - push head with non-existent, incomplete dest
ok 36 - push tag with non-existent, incomplete dest
ok 37 - push sha1 with non-existent, incomplete dest
ok 38 - push ref expression with non-existent, incomplete dest
ok 39 - push with HEAD
ok 40 - push with HEAD nonexisting at remote
ok 41 - push with +HEAD
ok 42 - push HEAD with non-existent, incomplete dest
ok 43 - push with config remote.*.push = HEAD
ok 44 - push with @
ok 45 - push with @ nonexisting at remote
ok 46 - push with +@
ok 47 - push @ with non-existent, incomplete dest
ok 48 - push with config remote.*.push = @
ok 49 - push to remote with no explicit refspec and config remote.*.push = src:dest
ok 50 - push with remote.pushdefault
ok 51 - push with config remote.*.pushurl
ok 52 - push with config branch.*.pushremote
ok 53 - branch.*.pushremote config order is irrelevant
ok 54 - push rejects empty branch name entries
ok 55 - push ignores "branch." config without subsection
ok 56 - push with dry-run
ok 57 - push updates local refs
ok 58 - push updates up-to-date local refs
ok 59 - push preserves up-to-date packed refs
ok 60 - push does not update local refs on failure
ok 61 - allow deleting an invalid remote ref
ok 62 - pushing valid refs triggers post-receive and post-update hooks
ok 63 - deleting dangling ref triggers hooks with correct args
ok 64 - deletion of a non-existent ref is not fed to post-receive and post-update hooks
ok 65 - deletion of a non-existent ref alone does trigger post-receive and post-update hooks
ok 66 - mixed ref updates, deletes, invalid deletes trigger hooks with correct input
ok 67 - allow deleting a ref using --delete
ok 68 - allow deleting a tag using --delete
ok 69 - push --delete without args aborts
ok 70 - push --delete refuses src:dest refspecs
ok 71 - push --delete refuses empty string
ok 72 - push --delete onelevel refspecs
ok 73 - warn on push to HEAD of non-bare repository
ok 74 - deny push to HEAD of non-bare repository
ok 75 - allow push to HEAD of bare repository (bare)
ok 76 - allow push to HEAD of non-bare repository (config)
ok 77 - fetch with branches
ok 78 - fetch with branches containing #
ok 79 - push with branches
ok 80 - push with branches containing #
ok 81 - push into aliased refs (consistent)
ok 82 - push into aliased refs (inconsistent)
ok 83 - force pushing required to update lightweight tag
ok 84 - force pushing required to update annotated tag
ok 85 - fetch will not clobber an existing lightweight tag without --force
ok 86 - fetch will not clobber an existing annotated tag without --force
ok 87 - push --porcelain
ok 88 - push --porcelain bad url
ok 89 - push --porcelain rejected
ok 90 - push --porcelain --dry-run rejected
ok 91 - push --prune
ok 92 - push --prune refspec
ok 93 - push to update a ref hidden by transfer.hiderefs
ok 94 - push to update a ref hidden by receive.hiderefs
ok 95 - fetch exact SHA1
ok 96 - fetch exact SHA1 in protocol v2
ok 97 - shallow fetch reachable SHA1 (but not a ref), allowtipsha1inwant=true
ok 98 - deny fetch unreachable SHA1, allowtipsha1inwant=true
ok 99 - shallow fetch reachable SHA1 (but not a ref), allowtipsha1inwant=false
ok 100 - deny fetch unreachable SHA1, allowtipsha1inwant=false
ok 101 - fetch follows tags by default
ok 102 - peeled advertisements are not considered ref tips
ok 103 - pushing a specific ref applies remote.$name.push as refmap
ok 104 - with no remote.$name.push, it is not used as refmap
ok 105 - with no remote.$name.push, upstream mapping is used
ok 106 - push does not follow tags by default
ok 107 - push --follow-tags only pushes relevant tags
ok 108 - push --no-thin must produce non-thin pack
ok 109 - pushing a tag pushes the tagged object
ok 110 - push into bare respects core.logallrefupdates
ok 111 - fetch into bare respects core.logallrefupdates
ok 112 - receive.denyCurrentBranch = updateInstead
ok 113 - updateInstead with push-to-checkout hook
ok 114 - denyCurrentBranch and worktrees
ok 115 - denyCurrentBranch and bare repository worktrees
ok 116 - refuse fetch to current branch of worktree
ok 117 - refuse fetch to current branch of bare repository worktree
ok 118 - refuse to push a hidden ref, and make sure do not pollute the repository
ok 119 - push with config push.useBitmaps
# passed all 119 test(s)
1..119
*** t5517-push-mirror.sh ***
ok 1 - push mirror creates new branches
ok 2 - push mirror updates existing branches
ok 3 - push mirror force updates existing branches
ok 4 - push mirror removes branches
ok 5 - push mirror adds, updates and removes branches together
ok 6 - push mirror creates new tags
ok 7 - push mirror updates existing tags
ok 8 - push mirror force updates existing tags
ok 9 - push mirror removes tags
ok 10 - push mirror adds, updates and removes tags together
ok 11 - remote.foo.mirror adds and removes branches
ok 12 - remote.foo.mirror=no has no effect
ok 13 - push to mirrored repository with refspec fails
# passed all 13 test(s)
1..13
*** t5518-fetch-exit-status.sh ***
ok 1 - setup
ok 2 - non-fast-forward fetch
ok 3 - forced update
# passed all 3 test(s)
1..3
*** t5519-push-alternates.sh ***
ok 1 - setup
ok 2 - alice works and pushes
ok 3 - bob fetches from alice, works and pushes
ok 4 - clean-up in case the previous failed
ok 5 - alice works and pushes again
ok 6 - bob works and pushes
ok 7 - alice works and pushes yet again
ok 8 - bob works and pushes again
# passed all 8 test(s)
1..8
*** t5520-pull.sh ***
ok 1 - setup
ok 2 - pulling into void
ok 3 - pulling into void using main:main
ok 4 - pulling into void does not overwrite untracked files
ok 5 - pulling into void does not overwrite staged files
ok 6 - pulling into void does not remove new staged files
ok 7 - pulling into void must not create an octopus
ok 8 - test . as a remote
ok 9 - the default remote . should not break explicit pull
ok 10 - fail if wildcard spec does not match any refs
ok 11 - fail if no branches specified with non-default remote
ok 12 - fail if not on a branch
ok 13 - fail if no configuration for current branch
ok 14 - pull --all: fail if no configuration for current branch
ok 15 - fail if upstream branch does not exist
ok 16 - fetch upstream branch even if refspec excludes it
ok 17 - fail if the index has unresolved entries
ok 18 - fast-forwards working tree if branch head is updated
ok 19 - fast-forward fails with conflicting work tree
ok 20 - --rebase
ok 21 - --rebase (merge) fast forward
ok 22 - --rebase (am) fast forward
ok 23 - --rebase --autostash fast forward
ok 24 - --rebase with rebase.autostash succeeds on ff
ok 25 - --rebase with conflicts shows advice
ok 26 - failed --rebase shows advice
ok 27 - --rebase fails with multiple branches
ok 28 - pull --rebase succeeds with dirty working directory and rebase.autostash set
ok 29 - pull --rebase --autostash & rebase.autostash=true
ok 30 - pull --rebase --autostash & rebase.autostash=false
ok 31 - pull --rebase --autostash & rebase.autostash unset
ok 32 - pull --rebase --no-autostash & rebase.autostash=true
ok 33 - pull --rebase --no-autostash & rebase.autostash=false
ok 34 - pull --rebase --no-autostash & rebase.autostash unset
ok 35 - pull succeeds with dirty working directory and merge.autostash set
ok 36 - pull --autostash & merge.autostash=true
ok 37 - pull --autostash & merge.autostash=false
ok 38 - pull --autostash & merge.autostash unset
ok 39 - pull --no-autostash & merge.autostash=true
ok 40 - pull --no-autostash & merge.autostash=false
ok 41 - pull --no-autostash & merge.autostash unset
ok 42 - pull.rebase
ok 43 - pull --autostash & pull.rebase=true
ok 44 - pull --no-autostash & pull.rebase=true
ok 45 - branch.to-rebase.rebase
ok 46 - branch.to-rebase.rebase should override pull.rebase
ok 47 - pull --rebase warns on --verify-signatures
ok 48 - pull --rebase does not warn on --no-verify-signatures
ok 49 - preserve merge setup
ok 50 - pull.rebase=false create a new merge commit
ok 51 - pull.rebase=true flattens keep-merge
ok 52 - pull.rebase=1 is treated as true and flattens keep-merge
ok 53 - pull.rebase=interactive
ok 54 - pull --rebase=i
ok 55 - pull.rebase=invalid fails
ok 56 - --rebase=false create a new merge commit
ok 57 - --rebase=true rebases and flattens keep-merge
ok 58 - --rebase=invalid fails
ok 59 - --rebase overrides pull.rebase=merges and flattens keep-merge
ok 60 - --rebase with rebased upstream
ok 61 - --rebase -f with rebased upstream
ok 62 - --rebase with rebased default upstream
ok 63 - rebased upstream + fetch + pull --rebase
ok 64 - pull --rebase dies early with dirty working directory
ok 65 - pull --rebase works on branch yet to be born
ok 66 - pull --rebase fails on unborn branch with staged changes
ok 67 - pull --rebase fails on corrupt HEAD
ok 68 - setup for detecting upstreamed changes
ok 69 - git pull --rebase detects upstreamed changes
ok 70 - setup for avoiding reapplying old patches
ok 71 - git pull --rebase does not reapply old patches
ok 72 - git pull --rebase against local branch
# passed all 72 test(s)
1..72
*** t5521-pull-options.sh ***
ok 1 - setup
ok 2 - git pull -q --no-rebase
ok 3 - git pull -q --rebase
ok 4 - git pull --no-rebase
ok 5 - git pull --rebase
ok 6 - git pull -v --no-rebase
ok 7 - git pull -v --rebase
ok 8 - git pull -v -q --no-rebase
ok 9 - git pull -q -v --no-rebase
ok 10 - git pull --cleanup errors early on invalid argument
ok 11 - git pull --no-write-fetch-head fails
ok 12 - git pull --force
ok 13 - git pull --all
ok 14 - git pull --dry-run
ok 15 - git pull --all --dry-run
ok 16 - git pull --allow-unrelated-histories
ok 17 - git pull does not add a sign-off line
ok 18 - git pull --no-signoff does not add sign-off line
ok 19 - git pull --signoff add a sign-off line
ok 20 - git pull --no-signoff flag cancels --signoff flag
ok 21 - git pull --no-verify flag passed to merge
ok 22 - git pull --no-verify --verify passed to merge
# passed all 22 test(s)
1..22
*** t5522-pull-symlink.sh ***
ok 1 - setup
ok 2 - pulling from real subdir
ok 3 - pulling from symlinked subdir
ok 4 - pushing from symlinked subdir
# passed all 4 test(s)
1..4
*** t5523-push-upstream.sh ***
ok 1 - setup bare parent
ok 2 - setup local commit
ok 3 - push -u main:main
ok 4 - push -u main:other
ok 5 - push -u --dry-run main:otherX
ok 6 - push -u topic_2:topic_2
ok 7 - push -u topic_2:other2
ok 8 - push -u :topic_2
ok 9 - push -u --all(the same behavior with--branches)
ok 10 - push -u HEAD
ok 11 - progress messages go to tty
ok 12 - progress messages do not go to non-tty
ok 13 - progress messages go to non-tty (forced)
ok 14 - push -q suppresses progress
ok 15 - push --no-progress suppresses progress
ok 16 - quiet push
ok 17 - quiet push -u
# passed all 17 test(s)
1..17
*** t5524-pull-msg.sh ***
ok 1 - setup
ok 2 - pull
ok 3 - --log=1 limits shortlog length
# passed all 3 test(s)
1..3
*** t5525-fetch-tagopt.sh ***
ok 1 - setup
ok 2 - fetch with tagopt=--no-tags does not get tag
ok 3 - fetch --tags with tagopt=--no-tags gets tag
ok 4 - fetch --no-tags with tagopt=--tags does not get tag
ok 5 - fetch with tagopt=--tags gets tag
# passed all 5 test(s)
1..5
*** t5526-fetch-submodules.sh ***
ok 1 - setup
ok 2 - fetch --recurse-submodules recurses into submodules
ok 3 - fetch --recurse-submodules honors --no-write-fetch-head
ok 4 - submodule.recurse option triggers recursive fetch
ok 5 - fetch --recurse-submodules -j2 has the same output behaviour
ok 6 - fetch alone only fetches superproject
ok 7 - fetch --no-recurse-submodules only fetches superproject
ok 8 - using fetchRecurseSubmodules=true in .gitmodules recurses into submodules
ok 9 - --no-recurse-submodules overrides .gitmodules config
ok 10 - using fetchRecurseSubmodules=false in .git/config overrides setting in .gitmodules
ok 11 - --recurse-submodules overrides fetchRecurseSubmodules setting from .git/config
ok 12 - --quiet propagates to submodules
ok 13 - --quiet propagates to parallel submodules
ok 14 - --dry-run propagates to submodules
ok 15 - Without --dry-run propagates to submodules
ok 16 - recurseSubmodules=true propagates into submodules
ok 17 - --recurse-submodules overrides config in submodule
ok 18 - --no-recurse-submodules overrides config setting
ok 19 - Recursion doesn't happen when no new commits are fetched in the superproject
ok 20 - Recursion stops when no new submodule commits are fetched
ok 21 - Recursion doesn't happen when new superproject commits don't change any submodules
ok 22 - Recursion picks up config in submodule
ok 23 - Recursion picks up all submodules when necessary
ok 24 - '--recurse-submodules=on-demand' doesn't recurse when no new commits are fetched in the superproject (and ignores config)
ok 25 - '--recurse-submodules=on-demand' recurses as deep as necessary (and ignores config)
ok 26 - setup downstream branch without submodules
ok 27 - '--recurse-submodules=on-demand' should fetch submodule commits if the submodule is changed but the index has no submodules
ok 28 - '--recurse-submodules' should fetch submodule commits if the submodule is changed but the index has no submodules
ok 29 - '--recurse-submodules' should ignore changed, inactive submodules
ok 30 - setup downstream branch with other submodule
ok 31 - '--recurse-submodules' should fetch submodule commits in changed submodules and the index
ok 32 - '--recurse-submodules=on-demand' stops when no new submodule commits are found in the superproject (and ignores config)
ok 33 - 'fetch.recurseSubmodules=on-demand' overrides global config
ok 34 - 'submodule.<sub>.fetchRecurseSubmodules=on-demand' overrides fetch.recurseSubmodules
ok 35 - don't fetch submodule when newly recorded commits are already present
ok 36 - 'fetch.recurseSubmodules=on-demand' works also without .gitmodules entry
ok 37 - fetching submodules respects parallel settings
ok 38 - fetching submodule into a broken repository
ok 39 - fetch new commits when submodule got renamed
ok 40 - fetch new submodule commits on-demand outside standard refspec
ok 41 - fetch new submodule commit on-demand in FETCH_HEAD
ok 42 - fetch new submodule commits on-demand without .gitmodules entry
ok 43 - fetch new submodule commit intermittently referenced by superproject
ok 44 - setup nested submodule fetch test
ok 45 - fetching a superproject containing an uninitialized sub/sub project
ok 46 - setup recursive fetch with uninit submodule
ok 47 - recursive fetch with uninit submodule
ok 48 - recursive fetch after deinit a submodule
ok 49 - setup repo with upstreams that share a submodule name
ok 50 - fetch --recurse-submodules updates name-conflicted, populated submodule
ok 51 - fetch --recurse-submodules updates name-conflicted, unpopulated submodule
ok 52 - fetch --all with --recurse-submodules
ok 53 - fetch --all with --recurse-submodules with multiple
ok 54 - fetch --all with --no-recurse-submodules only fetches superproject
# passed all 54 test(s)
1..54
*** t5527-fetch-odd-refs.sh ***
ok 1 - setup repo with odd suffix ref
ok 2 - suffix ref is ignored during fetch
ok 3 - try to create repo with absurdly long refname
ok 4 # skip fetch handles extremely long refname (missing LONG_REF)
ok 5 # skip push handles extremely long refname (missing LONG_REF)
# passed all 5 test(s)
1..5
*** t5528-push-default.sh ***
ok 1 - setup bare remotes
ok 2 - "upstream" pushes to configured upstream
ok 3 - "upstream" does not push on unconfigured remote
ok 4 - "upstream" does not push on unconfigured branch
ok 5 - "upstream" does not push when remotes do not match
ok 6 - "current" does not push when multiple remotes and none origin
ok 7 - "current" pushes when remote explicitly specified
ok 8 - "current" pushes to origin when no remote specified among multiple
ok 9 - "current" pushes to single remote even when not specified
ok 10 - push from/to new branch with non-defaulted remote fails with upstream, matching, current and simple 
ok 11 - push from/to new branch fails with upstream and simple 
not ok 12 - push from/to new branch fails with matching  # TODO known breakage
ok 13 - push from/to branch with tracking fails with nothing 
ok 14 - push from/to new branch succeeds with upstream if push.autoSetupRemote
ok 15 - push from/to new branch succeeds with simple if push.autoSetupRemote
ok 16 - "matching" fails if none match
ok 17 - push ambiguously named branch with upstream, matching and simple
ok 18 - push from/to new branch with current creates remote branch
ok 19 - push to existing branch, with no upstream configured
ok 20 - push to existing branch, upstream configured with same name
ok 21 - push to existing branch, upstream configured with different name
ok 22 - push.default = current success in central workflows
ok 23 - push.default = upstream success in central workflows
ok 24 - push.default = simple failure in central workflows
ok 25 - push.default = matching success in central workflows
ok 26 - push.default = current success in triangular workflows
ok 27 - push.default = upstream failure in triangular workflows
ok 28 - push.default = simple success in triangular workflows
ok 29 - push.default = matching success in triangular workflows
ok 30 - default behavior allows "simple" push
ok 31 - default behavior rejects non-simple push
ok 32 - default triangular behavior acts like "current"
# still have 1 known breakage(s)
# passed all remaining 31 test(s)
1..32
*** t5529-push-errors.sh ***
ok 1 - setup commits
ok 2 - setup remote
ok 3 - setup fake receive-pack
ok 4 - detect missing branches early
ok 5 - detect missing sha1 expressions early
ok 6 - detect ambiguous refs early
# passed all 6 test(s)
1..6
*** t5530-upload-pack-error.sh ***
ok 1 - setup and corrupt repository
ok 2 - fsck fails
ok 3 - upload-pack fails due to error in pack-objects packing
ok 4 - corrupt repo differently
ok 5 - fsck fails
ok 6 - upload-pack fails due to error in rev-list
ok 7 - upload-pack fails due to bad want (no object)
ok 8 - upload-pack fails due to bad want (not tip)
ok 9 - upload-pack fails due to error in pack-objects enumeration
ok 10 - upload-pack tolerates EOF just after stateless client wants
ok 11 - create empty repository
ok 12 - fetch fails
# passed all 12 test(s)
1..12
*** t5531-deep-submodule-push.sh ***
ok 1 - setup
ok 2 - push works with recorded gitlink
ok 3 - push if submodule has no remote
ok 4 - push fails if submodule commit not on remote
ok 5 - push succeeds after commit was pushed to remote
ok 6 - push succeeds if submodule commit not on remote but using on-demand on command line
ok 7 - push succeeds if submodule commit not on remote but using on-demand from config
ok 8 - push succeeds if submodule commit not on remote but using auto-on-demand via submodule.recurse config
ok 9 - push recurse-submodules on command line overrides config
ok 10 - push recurse-submodules last one wins on command line
ok 11 - push succeeds if submodule commit not on remote using on-demand from cmdline overriding config
ok 12 - push succeeds if submodule commit disabling recursion from cmdline overriding config
ok 13 - push succeeds if submodule commit disabling recursion from cmdline (alternative form) overriding config
ok 14 - submodule entry pointing at a tag is error
ok 15 - push fails if recurse submodules option passed as yes
ok 16 - push fails when commit on multiple branches if one branch has no remote
ok 17 - push succeeds if submodule has no remote and is on the first superproject commit
ok 18 - push unpushed submodules when not needed
ok 19 - push unpushed submodules when not needed 2
ok 20 - push unpushed submodules recursively
ok 21 - push unpushable submodule recursively fails
ok 22 - push --dry-run does not recursively update submodules
ok 23 - push --dry-run does not recursively update submodules
ok 24 - push only unpushed submodules recursively
ok 25 - push with push.recurseSubmodules=only on superproject
ok 26 - push with push.recurseSubmodules=only on superproject and top-level submodule
ok 27 - push propagating the remotes name to a submodule
ok 28 - push propagating refspec to a submodule
ok 29 - push propagating HEAD refspec to a submodule
# passed all 29 test(s)
1..29
*** t5532-fetch-proxy.sh ***
ok 1 - setup remote repo
ok 2 - setup proxy script
ok 3 - setup local repo
ok 4 - fetch through proxy works
ok 5 - funny hostnames are rejected before running proxy
# passed all 5 test(s)
1..5
*** t5533-push-cas.sh ***
ok 1 - setup
ok 2 - push to update (protected)
ok 3 - push to update (protected, forced)
ok 4 - push to update (protected, tracking)
ok 5 - push to update (protected, tracking, forced)
ok 6 - push to update (allowed)
ok 7 - push to update (allowed, tracking)
ok 8 - push to update (allowed even though no-ff)
ok 9 - push to delete (protected)
ok 10 - push to delete (protected, forced)
ok 11 - push to delete (allowed)
ok 12 - cover everything with default force-with-lease (protected)
ok 13 - cover everything with default force-with-lease (allowed)
ok 14 - new branch covered by force-with-lease
ok 15 - new branch covered by force-with-lease (explicit)
ok 16 - new branch already exists
ok 17 - background updates of REMOTE can be mitigated with a non-updated REMOTE-push
ok 18 - background updates to remote can be mitigated with "--force-if-includes"
ok 19 - background updates to remote can be mitigated with "push.useForceIfIncludes"
ok 20 - "--force-if-includes" should be disabled for --force-with-lease="<refname>:<expect>"
ok 21 - "--force-if-includes" should allow forced update after a rebase ("pull --rebase")
ok 22 - "--force-if-includes" should allow forced update after a rebase ("pull --rebase", local rebase)
ok 23 - "--force-if-includes" should allow deletes
# passed all 23 test(s)
1..23
*** t5534-push-signed.sh ***
ok 1 - setup
ok 2 - unsigned push does not send push certificate
ok 3 - talking with a receiver without push certificate support
ok 4 - push --signed fails with a receiver without push certificate support
ok 5 - push --signed=1 is accepted
ok 6 # skip no certificate for a signed push with no update (missing GPG)
ok 7 # skip signed push sends push certificate (missing GPG)
ok 8 - ssh signed push sends push certificate
ok 9 # skip inconsistent push options in signed push not allowed (missing GPG)
ok 10 # skip fail without key and heed user.signingkey (missing GPG)
ok 11 # skip fail without key and heed user.signingkey x509 (missing GPGSM)
ok 12 - fail without key and heed user.signingkey ssh
ok 13 # skip failed atomic push does not execute GPG (missing GPG)
# passed all 13 test(s)
1..13
*** t5535-fetch-push-symref.sh ***
ok 1 - setup
ok 2 - push
ok 3 - fetch
# passed all 3 test(s)
1..3
*** t5536-fetch-conflicts.sh ***
ok 1 - setup
ok 2 - fetch with no conflict
ok 3 - fetch conflict: config vs. config
ok 4 - fetch duplicate: config vs. config
ok 5 - fetch conflict: arg overrides config
ok 6 - fetch conflict: arg vs. arg
ok 7 - fetch conflict: criss-cross args
# passed all 7 test(s)
1..7
*** t5537-fetch-shallow.sh ***
ok 1 - setup
ok 2 - setup shallow clone
ok 3 - clone from shallow clone
ok 4 - fetch from shallow clone
ok 5 - fetch --depth from shallow clone
ok 6 - fetch --unshallow from shallow clone
ok 7 - fetch --unshallow from a full clone
ok 8 - fetch something upstream has but hidden by clients shallow boundaries
ok 9 - fetch that requires changes in .git/shallow is filtered
ok 10 - fetch --update-shallow
ok 11 - fetch --update-shallow into a repo with submodules
ok 12 - fetch --update-shallow a commit that is also a shallow point into a repo with submodules
ok 13 - fetch --update-shallow (with fetch.writeCommitGraph)
ok 14 - shallow fetch from a read-only repo
ok 15 - .git/shallow is edited by repack
# passed all 15 test(s)
# SKIP no web server found at ''
1..15
*** t5538-push-shallow.sh ***
ok 1 - setup
ok 2 - push from shallow clone
ok 3 - push from shallow clone, with grafted roots
ok 4 - add new shallow root with receive.updateshallow on
ok 5 - push from shallow to shallow
ok 6 - push from full to shallow
# passed all 6 test(s)
1..6
*** t5539-fetch-http-shallow.sh ***
1..0 # SKIP no web server found at ''
*** t5540-http-push-webdav.sh ***
1..0 # SKIP no web server found at ''
*** t5541-http-push-smart.sh ***
1..0 # SKIP no web server found at ''
*** t5542-push-http-shallow.sh ***
1..0 # SKIP no web server found at ''
*** t5543-atomic-push.sh ***
ok 1 - atomic push works for a single branch
ok 2 - atomic push works for two branches
ok 3 - atomic push works in combination with --mirror
ok 4 - atomic push works in combination with --force
ok 5 - atomic push fails if one branch fails
ok 6 - atomic push fails if one tag fails remotely
ok 7 - atomic push obeys update hook preventing a branch to be pushed
ok 8 - atomic push is not advertised if configured
ok 9 - atomic push reports (reject by update hook)
ok 10 - atomic push reports (mirror, but reject by update hook)
ok 11 - atomic push reports (reject by non-ff)
# passed all 11 test(s)
1..11
*** t5544-pack-objects-hook.sh ***
ok 1 - create some history to fetch
ok 2 - create debugging hook script
ok 3 - hook runs via global config
ok 4 - hook outputs are sane
ok 5 - hook runs from -c config
ok 6 - hook does not run from repo config
ok 7 - hook works with partial clone
# passed all 7 test(s)
1..7
*** t5545-push-options.sh ***
ok 1 - one push option works for a single branch
ok 2 - push option denied by remote
ok 3 - two push options work
ok 4 - push options and submodules
ok 5 - default push option
ok 6 - two default push options
ok 7 - push option from command line overrides from-config push option
ok 8 - empty value of push.pushOption in config clears the list
ok 9 - invalid push option in config
ok 10 - push options keep quoted characters intact (direct)
# passed all 10 test(s)
# SKIP no web server found at ''
1..10
*** t5546-receive-limits.sh ***
ok 1 - create known-size (1024 bytes) commit
ok 2 - prepare destination repository
ok 3 - set unpacklimit to 1
ok 4 - setting receive.maxInputSize to 512 rejects push
ok 5 - bumping limit to 4k allows push
ok 6 - prepare destination repository (again)
ok 7 - lifting the limit allows push
ok 8 - prepare destination repository (once more)
ok 9 - receive trumps transfer
ok 10 - prepare destination repository
ok 11 - set unpacklimit to 10000
ok 12 - setting receive.maxInputSize to 512 rejects push
ok 13 - bumping limit to 4k allows push
ok 14 - prepare destination repository (again)
ok 15 - lifting the limit allows push
ok 16 - prepare destination repository (once more)
ok 17 - receive trumps transfer
# passed all 17 test(s)
1..17
*** t5547-push-quarantine.sh ***
ok 1 - create picky dest repo
ok 2 - accepted objects work
ok 3 - rejected objects are not installed
ok 4 - rejected objects are removed
ok 5 - push to repo path with path separator (colon)
ok 6 - updating a ref from quarantine is forbidden
# passed all 6 test(s)
1..6
*** t5548-push-porcelain.sh ***
ok 1 - setup upstream repository and workbench
ok 2 - porcelain output of successful git-push (builtin protocol)
ok 3 - atomic push failed (builtin protocol)
ok 4 - prepare pre-receive hook (builtin protocol)
ok 5 - pre-receive hook declined (builtin protocol)
ok 6 - remove pre-receive hook (builtin protocol)
ok 7 - non-fastforward push (builtin protocol)
# passed all 7 test(s)
# SKIP no web server found at ''
1..7
*** t5549-fetch-push-http.sh ***
1..0 # SKIP no web server found at ''
*** t5550-http-fetch-dumb.sh ***
1..0 # SKIP no web server found at ''
*** t5551-http-fetch-smart.sh ***
1..0 # SKIP no web server found at ''
*** t5552-skipping-fetch-negotiator.sh ***
ok 1 - fetch.negotiationalgorithm config
ok 2 - commits with no parents are sent regardless of skip distance
ok 3 - when two skips collide, favor the larger one
ok 4 - use ref advertisement to filter out commits
ok 5 - handle clock skew
ok 6 - do not send "have" with ancestors of commits that server ACKed
# passed all 6 test(s)
1..6
*** t5553-set-upstream.sh ***
ok 1 - setup bare parent fetch
ok 2 - setup commit on main and other fetch
ok 3 - fetch --set-upstream does not set upstream w/o branch
ok 4 - fetch --set-upstream upstream main sets branch main but not other
ok 5 - fetch --set-upstream upstream other sets branch other
ok 6 - fetch --set-upstream main:other does not set the branch other2
ok 7 - fetch --set-upstream http://nosuchdomain.example.com fails with invalid url
ok 8 - fetch --set-upstream with valid URL sets upstream to URL
ok 9 - fetch --set-upstream with a detached HEAD
ok 10 - setup bare parent pull
ok 11 - setup commit on main and other pull
ok 12 - pull --set-upstream upstream main sets branch main but not other
ok 13 - pull --set-upstream main:other2 does not set the branch other2
ok 14 - pull --set-upstream upstream other sets branch main
ok 15 - pull --set-upstream upstream tag does not set the tag
ok 16 - pull --set-upstream http://nosuchdomain.example.com fails with invalid url
ok 17 - pull --set-upstream upstream HEAD sets branch HEAD
ok 18 - pull --set-upstream upstream with more than one branch does nothing
ok 19 - pull --set-upstream with valid URL sets upstream to URL
ok 20 - pull --set-upstream with valid URL and branch sets branch
ok 21 - pull --set-upstream with a detached HEAD
# passed all 21 test(s)
1..21
*** t5554-noop-fetch-negotiator.sh ***
ok 1 - noop negotiator does not emit any "have"
# passed all 1 test(s)
1..1
*** t5555-http-smart-common.sh ***
ok 1 - setup
ok 2 - git upload-pack --http-backend-info-refs and --advertise-refs are aliased
ok 3 - git receive-pack --http-backend-info-refs and --advertise-refs are aliased
ok 4 - git upload-pack --advertise-refs
ok 5 - git upload-pack --advertise-refs: v0
ok 6 - git receive-pack --advertise-refs: v0
ok 7 - git upload-pack --advertise-refs: v1
ok 8 - git receive-pack --advertise-refs: v1
ok 9 - git upload-pack --advertise-refs: v2
ok 10 - git receive-pack --advertise-refs: v2
# passed all 10 test(s)
1..10
*** t5557-http-get.sh ***
1..0 # SKIP no web server found at ''
*** t5558-clone-bundle-uri.sh ***
ok 1 - fail to clone from non-existent file
ok 2 - fail to clone from non-bundle file
ok 3 - create bundle
ok 4 - clone with path bundle
ok 5 - clone with path bundle and non-default hash
ok 6 - clone with file:// bundle
ok 7 - construct incremental bundle list
ok 8 - clone bundle list (file, no heuristic)
ok 9 - clone bundle list (file, all mode, some failures)
ok 10 - clone bundle list (file, all mode, all failures)
ok 11 - clone bundle list (file, any mode)
ok 12 - clone bundle list (file, any mode, all failures)
# passed all 12 test(s)
# SKIP no web server found at ''
1..12
*** t5559-http-fetch-smart-http2.sh ***
1..0 # SKIP no web server found at ''
*** t5560-http-backend-noserver.sh ***
ok 1 - setup repository
ok 2 - direct refs/heads/main not found
ok 3 - static file is ok
ok 4 - no export by default
ok 5 - export if git-daemon-export-ok
ok 6 - static file if http.getanyfile true is ok
ok 7 - static file if http.getanyfile false fails
ok 8 - http.uploadpack default enabled
ok 9 - http.uploadpack true
ok 10 - http.uploadpack false
ok 11 - http.receivepack default disabled
ok 12 - http.receivepack true
ok 13 - http.receivepack false
ok 14 - http-backend blocks bad PATH_INFO
# passed all 14 test(s)
1..14
*** t5561-http-backend.sh ***
1..0 # SKIP no web server found at ''
*** t5562-http-backend-content-length.sh ***
ok 1 - setup
ok 2 - setup, compression related
ok 3 - fetch plain
ok 4 - fetch plain truncated
ok 5 - fetch plain empty
ok 6 - fetch gzipped
ok 7 - fetch gzipped truncated
ok 8 - fetch gzipped empty
ok 9 - push plain
ok 10 - push plain truncated
ok 11 - push plain empty
ok 12 - push gzipped
ok 13 - push gzipped truncated
ok 14 - push gzipped empty
ok 15 - CONTENT_LENGTH overflow ssite_t
ok 16 - empty CONTENT_LENGTH
# passed all 16 test(s)
1..16
*** t5563-simple-http-auth.sh ***
1..0 # SKIP no web server found at ''
*** t5564-http-proxy.sh ***
1..0 # SKIP no web server found at ''
*** t5570-git-daemon.sh ***
ok 1 - setup repository
ok 2 - create git-accessible bare repository
ok 3 - clone git repository
ok 4 - fetch changes via git protocol
ok 5 - no-op fetch -v stderr is as expected
ok 6 - no-op fetch without "-v" is quiet
ok 7 - remote detects correct HEAD
ok 8 - prepare pack objects
ok 9 - fetch notices corrupt pack
ok 10 - fetch notices corrupt idx
ok 11 - client refuses to ask for repo with newline
ok 12 - clone non-existent
ok 13 - push disabled
ok 14 - read access denied
ok 15 - not exported
ok 16 - clone non-existent
ok 17 - push disabled
ok 18 - read access denied
ok 19 - not exported
ok 20 - access repo via interpolated hostname
ok 21 - hostname cannot break out of directory
ok 22 - hostname interpolation works after LF-stripping
# passed all 22 test(s)
1..22
*** t5571-pre-push-hook.sh ***
ok 1 - setup
ok 2 - push with failing hook
ok 3 - --no-verify bypasses hook
ok 4 - push with hook
ok 5 - add a branch
ok 6 - push to default
ok 7 - push non-branches
ok 8 - push delete
ok 9 - push to URL
ok 10 - set up many-ref tests
ok 11 - sigpipe does not cause pre-push hook failure
# passed all 11 test(s)
1..11
*** t5572-pull-submodule.sh ***
ok 1 - git_pull: added submodule creates empty directory
ok 2 - git_pull: added submodule leaves existing empty directory alone
ok 3 - git_pull: replace tracked file with submodule creates empty directory
ok 4 - git_pull: replace directory with submodule
ok 5 - git_pull: removed submodule leaves submodule directory and its contents in place
ok 6 - git_pull: removed submodule leaves submodule containing a .git directory alone
ok 7 - git_pull: replace submodule with a directory must fail
ok 8 - git_pull: replace submodule containing a .git directory with a directory must fail
not ok 9 - git_pull: replace submodule with a file must fail # TODO known breakage
not ok 10 - git_pull: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - git_pull: modified submodule does not update submodule work tree
ok 12 - git_pull: modified submodule does not update submodule work tree to invalid commit
ok 13 - git_pull: modified submodule does not update submodule work tree from invalid commit
ok 14 - git_pull: added submodule doesn't remove untracked unignored file with same name
ok 15 - git_pull_ff: added submodule creates empty directory
ok 16 - git_pull_ff: added submodule leaves existing empty directory alone
ok 17 - git_pull_ff: replace tracked file with submodule creates empty directory
ok 18 - git_pull_ff: replace directory with submodule
ok 19 - git_pull_ff: removed submodule leaves submodule directory and its contents in place
ok 20 - git_pull_ff: removed submodule leaves submodule containing a .git directory alone
ok 21 - git_pull_ff: replace submodule with a directory must fail
ok 22 - git_pull_ff: replace submodule containing a .git directory with a directory must fail
not ok 23 - git_pull_ff: replace submodule with a file must fail # TODO known breakage
not ok 24 - git_pull_ff: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 25 - git_pull_ff: modified submodule does not update submodule work tree
ok 26 - git_pull_ff: modified submodule does not update submodule work tree to invalid commit
ok 27 - git_pull_ff: modified submodule does not update submodule work tree from invalid commit
ok 28 - git_pull_ff: added submodule doesn't remove untracked unignored file with same name
ok 29 - git_pull_ff_only: added submodule creates empty directory
ok 30 - git_pull_ff_only: added submodule leaves existing empty directory alone
ok 31 - git_pull_ff_only: replace tracked file with submodule creates empty directory
ok 32 - git_pull_ff_only: replace directory with submodule
ok 33 - git_pull_ff_only: removed submodule leaves submodule directory and its contents in place
ok 34 - git_pull_ff_only: removed submodule leaves submodule containing a .git directory alone
ok 35 - git_pull_ff_only: replace submodule with a directory must fail
ok 36 - git_pull_ff_only: replace submodule containing a .git directory with a directory must fail
not ok 37 - git_pull_ff_only: replace submodule with a file must fail # TODO known breakage
not ok 38 - git_pull_ff_only: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 39 - git_pull_ff_only: modified submodule does not update submodule work tree
ok 40 - git_pull_ff_only: modified submodule does not update submodule work tree to invalid commit
ok 41 - git_pull_ff_only: modified submodule does not update submodule work tree from invalid commit
ok 42 - git_pull_ff_only: added submodule doesn't remove untracked unignored file with same name
ok 43 - git_pull_noff: added submodule creates empty directory
ok 44 - git_pull_noff: added submodule leaves existing empty directory alone
ok 45 - git_pull_noff: replace tracked file with submodule creates empty directory
ok 46 - git_pull_noff: replace directory with submodule
ok 47 - git_pull_noff: removed submodule leaves submodule directory and its contents in place
ok 48 - git_pull_noff: removed submodule leaves submodule containing a .git directory alone
ok 49 - git_pull_noff: replace submodule with a directory must fail
ok 50 - git_pull_noff: replace submodule containing a .git directory with a directory must fail
not ok 51 - git_pull_noff: replace submodule with a file must fail # TODO known breakage
not ok 52 - git_pull_noff: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 53 - git_pull_noff: modified submodule does not update submodule work tree
ok 54 - git_pull_noff: modified submodule does not update submodule work tree to invalid commit
ok 55 - git_pull_noff: modified submodule does not update submodule work tree from invalid commit
ok 56 - git_pull_noff: added submodule doesn't remove untracked unignored file with same name
ok 57 - setup
ok 58 - pull --recurse-submodule setup
ok 59 - recursive pull updates working tree
ok 60 - submodule.recurse option triggers recursive pull
ok 61 -  --[no-]recurse-submodule and submodule.recurse
ok 62 - fetch.recurseSubmodules option triggers recursive fetch (but not recursive update)
ok 63 - fetch.recurseSubmodules takes precedence over submodule.recurse
ok 64 - pull --rebase --recurse-submodules (remote superproject submodule changes, local submodule changes)
ok 65 - pull --rebase --recurse-submodules fails if both sides record submodule changes
ok 66 - pull --rebase --recurse-submodules (no submodule changes, no fork-point)
ok 67 - branch has no merge base with remote-tracking counterpart
# still have 8 known breakage(s)
# passed all remaining 59 test(s)
1..67
*** t5573-pull-verify-signatures.sh ***
ok 1 # skip create repositories with signed commits (missing GPG)
ok 2 # skip pull unsigned commit with --verify-signatures (missing GPG)
ok 3 # skip pull commit with bad signature with --verify-signatures (missing GPG)
ok 4 # skip pull commit with untrusted signature with --verify-signatures (missing GPG)
ok 5 # skip pull commit with untrusted signature with --verify-signatures and minTrustLevel=ultimate (missing GPG)
ok 6 # skip pull commit with untrusted signature with --verify-signatures and minTrustLevel=marginal (missing GPG)
ok 7 # skip pull commit with untrusted signature with --verify-signatures and minTrustLevel=undefined (missing GPG)
ok 8 # skip pull signed commit with --verify-signatures (missing GPG)
ok 9 # skip pull commit with bad signature without verification (missing GPG)
ok 10 # skip pull commit with bad signature with --no-verify-signatures (missing GPG)
ok 11 # skip pull unsigned commit into unborn branch (missing GPG)
ok 12 # skip pull commit into unborn branch with bad signature and --verify-signatures (missing GPG)
ok 13 # skip pull commit into unborn branch with untrusted signature and --verify-signatures (missing GPG)
ok 14 # skip pull commit into unborn branch with untrusted signature and --verify-signatures and minTrustLevel=ultimate (missing GPG)
ok 15 # skip pull commit into unborn branch with untrusted signature and --verify-signatures and minTrustLevel=marginal (missing GPG)
ok 16 # skip pull commit into unborn branch with untrusted signature and --verify-signatures and minTrustLevel=undefined (missing GPG)
# passed all 16 test(s)
1..16
*** t5574-fetch-output.sh ***
ok 1 - fetch with invalid output format configuration
ok 2 - fetch aligned output
ok 3 - fetch compact output
ok 4 - setup for fetch porcelain output
ok 5 - fetch porcelain output 
ok 6 - fetch porcelain output (atomic)
ok 7 - fetch porcelain with multiple remotes
ok 8 - fetch porcelain refuses to work with submodules
ok 9 - fetch porcelain overrides fetch.output config
ok 10 - fetch --no-porcelain overrides previous --porcelain
ok 11 - fetch output with HEAD
ok 12 - fetch porcelain output with HEAD
ok 13 - fetch output with object ID
ok 14 - --no-show-forced-updates
# passed all 14 test(s)
1..14
*** t5580-unc-paths.sh ***
1..0 # SKIP skipping Windows-only path tests
*** t5581-http-curl-verbose.sh ***
1..0 # SKIP no web server found at ''
*** t5582-fetch-negative-refspec.sh ***
ok 1 - setup
ok 2 - clone and setup child repos
ok 3 - fetch one
ok 4 - fetch with negative refspec on commandline
ok 5 - fetch with negative sha1 refspec fails
ok 6 - fetch with negative pattern refspec
ok 7 - fetch with negative pattern refspec does not expand prefix
ok 8 - fetch with negative refspec avoids duplicate conflict
ok 9 - push --prune with negative refspec
ok 10 - push --prune with negative refspec apply to the destination
ok 11 - fetch --prune with negative refspec
ok 12 - push with matching : and negative refspec
ok 13 - push with matching +: and negative refspec
ok 14 - --prefetch correctly modifies refspecs
ok 15 - --prefetch succeeds when refspec becomes empty
# passed all 15 test(s)
1..15
*** t5583-push-branches.sh ***
ok 1 - setup bare remote
ok 2 - setup different types of references
ok 3 - --all and --branches have the same behavior
ok 4 - --all or --branches can not be combined with refspecs
ok 5 - --all or --branches can not be combined with --mirror
ok 6 - --all or --branches can not be combined with --tags
ok 7 - --all or --branches can not be combined with --delete
ok 8 - --all or --branches combines with --follow-tags have same behavior
# passed all 8 test(s)
1..8
*** t5600-clone-fail-cleanup.sh ***
ok 1 - clone of non-existent source should fail
ok 2 - failed clone should not leave a directory
ok 3 - create a repo to clone
ok 4 - create objects in repo for later corruption
ok 5 - clone of non-existent (relative to $PWD) source should fail
ok 6 - clone should work now that source exists
ok 7 - successful clone must leave the directory
ok 8 - failed clone --separate-git-dir should not leave any directories
ok 9 - failed clone into empty leaves directory (vanilla)
ok 10 - failed clone into empty leaves directory (bare)
ok 11 - failed clone into empty leaves directory (separate)
ok 12 - failed clone into empty leaves directory (separate, git)
ok 13 - failed clone into empty leaves directory (separate, wt)
ok 14 - transport failure cleans up directory
# passed all 14 test(s)
1..14
*** t5601-clone.sh ***
ok 1 - setup
ok 2 - clone with excess parameters (1)
ok 3 - clone with excess parameters (2)
ok 4 - output from clone
ok 5 - clone does not keep pack
ok 6 - clone checks out files
ok 7 - clone respects GIT_WORK_TREE
ok 8 - clone from hooks
ok 9 - clone creates intermediate directories
ok 10 - clone creates intermediate directories for bare repo
ok 11 - clone --mirror
ok 12 - clone --mirror with detached HEAD
ok 13 - clone --bare with detached HEAD
ok 14 - clone --bare names the local repository <name>.git
ok 15 - clone --mirror does not repeat tags
ok 16 - clone with files ref format
ok 17 - clone with garbage ref format
ok 18 - clone to destination with trailing /
ok 19 - clone to destination with extra trailing /
ok 20 - clone to an existing empty directory
ok 21 - clone to an existing non-empty directory
ok 22 - clone to an existing path
ok 23 - clone a void
ok 24 - clone respects global branch.autosetuprebase
ok 25 - respect url-encoding of file://
ok 26 - do not query-string-decode + in URLs
ok 27 - do not respect url-encoding of non-url path
ok 28 - clone separate gitdir
ok 29 - clone separate gitdir: output
ok 30 - clone from .git file
ok 31 - fetch from .git gitfile
ok 32 - fetch from gitfile parent
ok 33 - clone separate gitdir where target already exists
ok 34 - clone --reference from original
ok 35 - clone with more than one --reference
ok 36 - clone from original with relative alternate
ok 37 - clone checking out a tag
ok 38 - set up ssh wrapper
ok 39 - clone myhost:src uses ssh
ok 40 - clone local path foo:bar
ok 41 - bracketed hostnames are still ssh
ok 42 - OpenSSH variant passes -4
ok 43 - variant can be overridden
ok 44 - variant=auto picks based on basename
ok 45 - simple does not support -4/-6
ok 46 - simple does not support port
ok 47 - uplink is treated as simple
ok 48 - OpenSSH-like uplink is treated as ssh
ok 49 - plink is treated specially (as putty)
ok 50 - plink.exe is treated specially (as putty)
ok 51 - tortoiseplink is like putty, with extra arguments
ok 52 - double quoted plink.exe in GIT_SSH_COMMAND
ok 53 - single quoted plink.exe in GIT_SSH_COMMAND
ok 54 - GIT_SSH_VARIANT overrides plink detection
ok 55 - ssh.variant overrides plink detection
ok 56 - GIT_SSH_VARIANT overrides plink detection to plink
ok 57 - GIT_SSH_VARIANT overrides plink to tortoiseplink
ok 58 - clean failure on broken quoting
ok 59 - clone c:temp is ssl
ok 60 # skip clone c:temp is dos drive (missing MINGW)
ok 61 - clone host:rep
ok 62 - clone host:rep/home/project
ok 63 - clone host:123
ok 64 - clone [::1]:rep
ok 65 - clone [::1]:rep/home/project
ok 66 - clone [::1]:123
ok 67 - clone host:/~repo
ok 68 - clone [::1]:/~repo
ok 69 - clone foo/bar:baz is not ssh
ok 70 - clone [foo]bar/baz:qux is not ssh
ok 71 - clone [foo/bar]:baz is not ssh
ok 72 - clone ssh://host.xz/home/user/repo
ok 73 - clone ssh://host.xz/~repo
ok 74 - clone ssh://host.xz:/home/user/repo
ok 75 - clone ssh://host.xz:/~repo
ok 76 - clone ssh://host.xz:22/home/user/repo
ok 77 - clone ssh://host.xz:22/~repo
ok 78 - clone ssh://::1/home/user/repo
ok 79 - clone ssh://[::1]/home/user/repo
ok 80 - clone ssh://[::1]:/home/user/repo
ok 81 - clone ssh://user@::1/home/user/repo
ok 82 - clone ssh://user@[::1]/home/user/repo
ok 83 - clone ssh://user@[::1]:/home/user/repo
ok 84 - clone ssh://[user@::1]/home/user/repo
ok 85 - clone ssh://[user@::1]:/home/user/repo
ok 86 - clone ssh://::1/~repo
ok 87 - clone ssh://[::1]/~repo
ok 88 - clone ssh://user@::1/~repo
ok 89 - clone ssh://user@[::1]/~repo
ok 90 - clone ssh://[user@::1]/~repo
ok 91 - clone ssh://[::1]:22/home/user/repo
ok 92 - clone ssh://user@[::1]:22/home/user/repo
ok 93 - clone ssh://[user@::1]:22/home/user/repo
ok 94 - clone ssh://[::1]:22/~repo
ok 95 - clone ssh://user@[::1]:22/~repo
ok 96 - clone ssh://[user@::1]:22/~repo
ok 97 - clone from a repository with two identical branches
ok 98 - shallow clone locally
ok 99 - GIT_TRACE_PACKFILE produces a usable pack
ok 100 - clone on case-insensitive fs
ok 101 # skip colliding file detection (missing CASE_INSENSITIVE_FS)
ok 102 # skip colliding symlink/directory keeps directory (missing CASE_INSENSITIVE_FS of CASE_INSENSITIVE_FS,SYMLINKS)
ok 103 - clone with GIT_DEFAULT_HASH
ok 104 - partial clone
ok 105 - partial clone with -o
ok 106 - partial clone: warn if server does not support object filtering
ok 107 - batch missing blob request during checkout
ok 108 - batch missing blob request does not inadvertently try to fetch gitlinks
ok 109 - clone with init.templatedir runs hooks
# passed all 109 test(s)
# SKIP no web server found at ''
1..109
*** t5602-clone-remote-exec.sh ***
ok 1 - setup
ok 2 - clone calls git upload-pack unqualified with no -u option
ok 3 - clone calls specified git upload-pack with -u option
# passed all 3 test(s)
1..3
*** t5603-clone-dirname.sh ***
ok 1 - setup ssh wrapper
ok 2 - clone of host:foo goes to foo (non-bare)
ok 3 - clone of host:foo goes to foo.git (bare)
ok 4 - clone of host:foo.git goes to foo (non-bare)
ok 5 - clone of host:foo.git goes to foo.git (bare)
ok 6 - clone of host:foo/.git goes to foo (non-bare)
ok 7 - clone of host:foo/.git goes to foo.git (bare)
ok 8 - clone of ssh://host/foo goes to foo (non-bare)
ok 9 - clone of ssh://host/foo goes to foo.git (bare)
ok 10 - clone of ssh://host/foo.git goes to foo (non-bare)
ok 11 - clone of ssh://host/foo.git goes to foo.git (bare)
ok 12 - clone of ssh://host/foo/.git goes to foo (non-bare)
ok 13 - clone of ssh://host/foo/.git goes to foo.git (bare)
ok 14 - clone of ssh://host/foo/ goes to foo (non-bare)
ok 15 - clone of ssh://host/foo/// goes to foo (non-bare)
ok 16 - clone of ssh://host/foo/.git/ goes to foo (non-bare)
ok 17 - clone of ssh://host/foo.git/ goes to foo (non-bare)
ok 18 - clone of ssh://host/foo.git/// goes to foo (non-bare)
ok 19 - clone of ssh://host/foo///.git/ goes to foo (non-bare)
ok 20 - clone of ssh://host/foo/.git/// goes to foo (non-bare)
ok 21 - clone of host:foo/ goes to foo (non-bare)
ok 22 - clone of host:foo/// goes to foo (non-bare)
ok 23 - clone of host:foo.git/ goes to foo (non-bare)
ok 24 - clone of host:foo/.git/ goes to foo (non-bare)
ok 25 - clone of host:foo.git/// goes to foo (non-bare)
ok 26 - clone of host:foo///.git/ goes to foo (non-bare)
ok 27 - clone of host:foo/.git/// goes to foo (non-bare)
ok 28 - clone of ssh://host/ goes to host (non-bare)
ok 29 - clone of ssh://host:1234/ goes to host (non-bare)
ok 30 - clone of ssh://user@host/ goes to host (non-bare)
ok 31 - clone of host:/ goes to host (non-bare)
ok 32 - clone of ssh://user:password@host/ goes to host (non-bare)
ok 33 - clone of ssh://user:password@host:1234/ goes to host (non-bare)
ok 34 - clone of ssh://user:passw@rd@host:1234/ goes to host (non-bare)
ok 35 - clone of user@host:/ goes to host (non-bare)
ok 36 - clone of user:password@host:/ goes to host (non-bare)
ok 37 - clone of user:passw@rd@host:/ goes to host (non-bare)
ok 38 - clone of ssh://host/foo@bar goes to foo@bar (non-bare)
ok 39 - clone of ssh://host/foo@bar.git goes to foo@bar (non-bare)
ok 40 - clone of ssh://user:password@host/foo@bar goes to foo@bar (non-bare)
ok 41 - clone of ssh://user:passw@rd@host/foo@bar.git goes to foo@bar (non-bare)
ok 42 - clone of host:/foo@bar goes to foo@bar (non-bare)
ok 43 - clone of host:/foo@bar.git goes to foo@bar (non-bare)
ok 44 - clone of user:password@host:/foo@bar goes to foo@bar (non-bare)
ok 45 - clone of user:passw@rd@host:/foo@bar.git goes to foo@bar (non-bare)
ok 46 - clone of ssh://user:password@host/test:1234 goes to 1234 (non-bare)
ok 47 - clone of ssh://user:password@host/test:1234.git goes to 1234 (non-bare)
# passed all 47 test(s)
1..47
*** t5604-clone-reference.sh ***
ok 1 - preparing first repository
ok 2 - preparing second repository
ok 3 - cloning with reference (-l -s)
ok 4 - existence of info/alternates
ok 5 - pulling from reference
ok 6 - that reference gets used
ok 7 - cloning with reference (no -l -s)
ok 8 - fetched no objects
ok 9 - existence of info/alternates
ok 10 - pulling from reference
ok 11 - that reference gets used
ok 12 - updating origin
ok 13 - pulling changes from origin
ok 14 - that alternate to origin gets used
ok 15 - pulling changes from origin
ok 16 - check objects expected to exist locally
ok 17 - preparing alternate repository #1
ok 18 - cloning alternate repo #2 and adding changes to repo #1
ok 19 - cloning alternate repo #1, using #2 as reference
ok 20 - cloning with reference being subset of source (-l -s)
ok 21 - cloning with multiple references drops duplicates
ok 22 - clone with reference from a tagged repository
ok 23 - prepare branched repository
ok 24 - fetch with incomplete alternates
ok 25 - clone using repo with gitfile as a reference
ok 26 - clone using repo pointed at by gitfile as reference
ok 27 - clone and dissociate from reference
ok 28 - clone, dissociate from partial reference and repack
ok 29 - clone, dissociate from alternates
ok 30 - setup repo with garbage in objects/*
ok 31 - clone a repo with garbage in objects/*
ok 32 - setup repo with manually symlinked or unknown files at objects/
ok 33 - clone repo with symlinked or unknown files at objects/
ok 34 - clone repo with symlinked objects directory
# passed all 34 test(s)
1..34
*** t5605-clone-local.sh ***
ok 1 - preparing origin repository
ok 2 - local clone without .git suffix
ok 3 - local clone with .git suffix
ok 4 - local clone from x
ok 5 - local clone from x.git that does not exist
ok 6 - With -no-hardlinks, local will make a copy
ok 7 - Even without -l, local will make a hardlink
ok 8 - local clone of repo with nonexistent ref in HEAD
ok 9 - bundle clone without .bundle suffix
ok 10 - bundle clone with .bundle suffix
ok 11 - bundle clone from b4
ok 12 - bundle clone from b4.bundle that does not exist
ok 13 - bundle clone with nonexistent HEAD (match default)
ok 14 - bundle clone with nonexistent HEAD (no match default)
ok 15 - clone empty repository
ok 16 - clone empty repository, and then push should not segfault.
ok 17 - cloning non-existent directory fails
ok 18 - cloning non-git directory fails
ok 19 - cloning file:// does not hardlink
ok 20 - cloning a local path with --no-local does not hardlink
ok 21 - cloning locally respects "-u" for fetching refs
ok 22 - local clone from repo with corrupt refs fails gracefully
# passed all 22 test(s)
1..22
*** t5606-clone-options.sh ***
ok 1 - setup
ok 2 - submodule.stickyRecursiveClone flag manipulates submodule.recurse value
ok 3 - clone -o
ok 4 - rejects invalid -o/--origin
ok 5 - clone --bare -o
ok 6 - disallows --bare with --separate-git-dir
ok 7 - disallows --bundle-uri with shallow options
ok 8 - reject cloning shallow repository
ok 9 - reject cloning non-local shallow repository
ok 10 - succeed cloning normal repository
ok 11 - uses "origin" for default remote name
ok 12 - prefers --template config over normal config
ok 13 - prefers -c config over --template config
ok 14 - ignore --template config for core.bare
ok 15 - prefers config "clone.defaultRemoteName" over default
ok 16 - prefers --origin over -c config
ok 17 - redirected clone does not show progress
ok 18 - redirected clone -v does show progress
ok 19 - clone does not segfault with --bare and core.bare=false
ok 20 - chooses correct default initial branch name
ok 21 - guesses initial branch name correctly
# passed all 21 test(s)
1..21
*** t5607-clone-bundle.sh ***
ok 1 - setup
ok 2 - "verify" needs a worktree
ok 3 - annotated tags can be excluded by rev-list options
ok 4 - die if bundle file cannot be created
ok 5 - bundle --stdin
ok 6 - bundle --stdin <rev-list options>
ok 7 - empty bundle file is rejected
ok 8 - ridiculously long subject in boundary
ok 9 - prerequisites with an empty commit message
ok 10 - failed bundle creation does not leave cruft
ok 11 - fetch SHA-1 from bundle
ok 12 - git bundle uses expected default format
ok 13 - git bundle v3 has expected contents
ok 14 - git bundle v3 rejects unknown capabilities
# passed all 14 test(s)
1..14
*** t5608-clone-2gb.sh ***
1..0 # SKIP expensive 2GB clone test; enable with GIT_TEST_CLONE_2GB=true
*** t5609-clone-branch.sh ***
ok 1 - setup
ok 2 - vanilla clone chooses HEAD
ok 3 - clone -b chooses specified branch
ok 4 - clone -b sets up tracking
ok 5 - clone -b does not munge remotes/origin/HEAD
ok 6 - clone -b with bogus branch
ok 7 - clone -b not allowed with empty repos
# passed all 7 test(s)
1..7
*** t5610-clone-detached.sh ***
ok 1 - setup
ok 2 - clone repo (detached HEAD points to branch)
ok 3 - cloned HEAD matches
not ok 4 - cloned HEAD is detached # TODO known breakage
ok 5 - clone repo (detached HEAD points to tag)
ok 6 - cloned HEAD matches
ok 7 - cloned HEAD is detached
ok 8 - clone repo (detached HEAD points to history)
ok 9 - cloned HEAD matches
ok 10 - cloned HEAD is detached
ok 11 - clone repo (orphan detached HEAD)
ok 12 - cloned HEAD matches
ok 13 - cloned HEAD is detached
# still have 1 known breakage(s)
# passed all remaining 12 test(s)
1..13
*** t5611-clone-config.sh ***
ok 1 - clone -c sets config in cloned repo
ok 2 - clone -c can set multi-keys
ok 3 - clone -c can set multi-keys, including some empty
ok 4 - clone -c without a value is boolean true
ok 5 - clone -c config is available during clone
ok 6 - clone -c remote.origin.fetch=<refspec> works
ok 7 - git -c remote.origin.fetch=<refspec> clone works
ok 8 - clone -c remote.<remote>.fetch=<refspec> --origin=<name>
ok 9 - set up shallow repository
ok 10 - clone.rejectshallow=true should reject cloning shallow repo
ok 11 - option --[no-]reject-shallow override clone.rejectshallow config
ok 12 - clone.rejectshallow=true should succeed cloning normal repo
ok 13 # skip clone -c core.hideDotFiles (missing MINGW)
# passed all 13 test(s)
1..13
*** t5612-clone-refspec.sh ***
ok 1 - setup
ok 2 - by default all branches will be kept updated
ok 3 - by default no tags will be kept updated
ok 4 - clone with --no-tags
ok 5 - --single-branch while HEAD pointing at main
ok 6 - --single-branch while HEAD pointing at main and --no-tags
ok 7 - --single-branch while HEAD pointing at side
ok 8 - --single-branch with explicit --branch side
ok 9 - --single-branch with explicit --branch with tag fetches updated tag
ok 10 - --single-branch with explicit --branch with tag fetches updated tag despite --no-tags
ok 11 - --single-branch with --mirror
ok 12 - --single-branch with explicit --branch and --mirror
ok 13 - --single-branch with detached
# passed all 13 test(s)
1..13
*** t5613-info-alternate.sh ***
ok 1 - preparing first repository
ok 2 - preparing second repository
ok 3 - preparing third repository
ok 4 - count-objects shows the alternates
ok 5 - creating too deep nesting
ok 6 - validity of seventh repository
ok 7 - invalidity of eighth repository
ok 8 - breaking of loops
ok 9 - that info/alternates is necessary
ok 10 - that relative alternate is possible for current dir
ok 11 - that relative alternate is recursive
ok 12 - relative duplicates are eliminated
ok 13 # skip dup finding can be case-insensitive (missing CASE_INSENSITIVE_FS)
# passed all 13 test(s)
1..13
*** t5614-clone-submodules-shallow.sh ***
ok 1 - setup
ok 2 - nonshallow clone implies nonshallow submodule
ok 3 - shallow clone with shallow submodule
ok 4 - shallow clone does not imply shallow submodule
ok 5 - shallow clone with non shallow submodule
ok 6 - non shallow clone with shallow submodule
ok 7 - clone follows shallow recommendation
ok 8 - get unshallow recommended shallow submodule
ok 9 - clone follows non shallow recommendation
# passed all 9 test(s)
1..9
*** t5615-alternate-env.sh ***
ok 1 - create alternate repositories
ok 2 - objects inaccessible without alternates
ok 3 - access alternate via absolute path
ok 4 - access multiple alternates
ok 5 - access alternate via relative path (bare)
ok 6 - access alternate via relative path (worktree)
ok 7 - access alternate via relative path (subdir)
ok 8 - mix of quoted and unquoted alternates
ok 9 - broken quoting falls back to interpreting raw
# passed all 9 test(s)
1..9
*** t5616-partial-clone.sh ***
ok 1 - setup normal src repo
ok 2 - setup bare clone for server
ok 3 - do partial clone 1
ok 4 - rev-list --missing=allow-promisor on partial clone
ok 5 - verify that .promisor file contains refs fetched
ok 6 - verify checkout with dynamic object fetch
ok 7 - push new commits to server
ok 8 - partial fetch inherits filter settings
ok 9 - verify diff causes dynamic object fetch
ok 10 - verify blame causes dynamic object fetch
ok 11 - push new commits to server for file.2.txt
ok 12 - override inherited filter-spec using --no-filter
ok 13 - push new commits to server for file.3.txt
ok 14 - manual prefetch of missing objects
ok 15 - push new commits to server for file.4.txt
ok 16 - apply a different filter using --refetch
ok 17 - fetch --refetch works with a shallow clone
ok 18 - fetch --refetch triggers repacking
ok 19 - partial clone with transfer.fsckobjects=1 works with submodules
ok 20 - lazily fetched .gitmodules works
ok 21 - partial clone with transfer.fsckobjects=1 uses index-pack --fsck-objects
ok 22 - use fsck before and after manually fetching a missing subtree
ok 23 - implicitly construct combine: filter with repeated flags
ok 24 - upload-pack complains of bogus filter config
ok 25 - upload-pack fails banned object filters
ok 26 - upload-pack fails banned combine object filters
ok 27 - upload-pack fails banned object filters with fallback
ok 28 - upload-pack limits tree depth filters
ok 29 - partial clone fetches blobs pointed to by refs even if normally filtered out
ok 30 - fetch what is specified on CLI even if already promised
ok 31 - setup src repo for sparse filter
ok 32 - partial clone with sparse filter succeeds
ok 33 - partial clone with unresolvable sparse filter fails cleanly
ok 34 - fetch lazy-fetches only to resolve deltas
ok 35 - fetch lazy-fetches only to resolve deltas, protocol v2
ok 36 - fetch does not lazy-fetch missing targets of its refs
ok 37 - verify fetch succeeds when asking for new tags
ok 38 - verify fetch downloads only one pack when updating refs
ok 39 - single-branch tag following respects partial clone
ok 40 - fetch from a partial clone, protocol v0
ok 41 - fetch from a partial clone, protocol v2
ok 42 - repack does not loosen promisor objects
ok 43 - lazy-fetch in submodule succeeds
# passed all 43 test(s)
# SKIP no web server found at ''
1..43
*** t5617-clone-submodules-remote.sh ***
ok 1 - setup
ok 2 - setup bare clone for server
ok 3 - clone with --no-remote-submodules
ok 4 - clone with --remote-submodules
ok 5 - check the default is --no-remote-submodules
ok 6 - clone with --single-branch
ok 7 - clone with --filter
ok 8 - filters applied with clone.filterSubmodules
ok 9 - --no-also-filter-submodules overrides clone.filterSubmodules=true
# passed all 9 test(s)
1..9
*** t5618-alternate-refs.sh ***
ok 1 - set up local refs
ok 2 - set up shared clone
ok 3 - rev-list --alternate-refs
ok 4 - rev-list --not --alternate-refs
ok 5 - limiting with alternateRefsPrefixes
ok 6 - log --source shows .alternate marker
# passed all 6 test(s)
1..6
*** t5619-clone-local-ambiguous-transport.sh ***
1..0 # SKIP no web server found at ''
*** t5700-protocol-v1.sh ***
ok 1 - create repo to be served by git-daemon
ok 2 - clone with git:// using protocol v1
ok 3 - fetch with git:// using protocol v1
ok 4 - pull with git:// using protocol v1
ok 5 - push with git:// using protocol v1
ok 6 - create repo to be served by file:// transport
ok 7 - clone with file:// using protocol v1
ok 8 - fetch with file:// using protocol v1
ok 9 - pull with file:// using protocol v1
ok 10 - push with file:// using protocol v1
ok 11 - cloning branchless tagless but not refless remote
ok 12 - setup ssh wrapper
ok 13 - create repo to be served by ssh:// transport
ok 14 - clone with ssh:// using protocol v1
ok 15 - fetch with ssh:// using protocol v1
ok 16 - pull with ssh:// using protocol v1
ok 17 - push with ssh:// using protocol v1
ok 18 - clone propagates object-format from empty repo
# passed all 18 test(s)
# SKIP no web server found at ''
1..18
*** t5701-git-serve.sh ***
ok 1 - test capability advertisement
ok 2 - stateless-rpc flag does not list capabilities
ok 3 - request invalid capability
ok 4 - request with no command
ok 5 - request invalid command
ok 6 - request capability as command
ok 7 - request command as capability
ok 8 - requested command is command=value
ok 9 - wrong object-format
ok 10 - setup some refs and tags
ok 11 - basics of ls-refs
ok 12 - ls-refs complains about unknown options
ok 13 - basic ref-prefixes
ok 14 - refs/heads prefix
ok 15 - ignore very large set of prefixes
ok 16 - peel parameter
ok 17 - symrefs parameter
ok 18 - sending server-options
ok 19 - unexpected lines are not allowed in fetch request
ok 20 - basics of object-info
ok 21 - test capability advertisement with uploadpack.advertiseBundleURIs
ok 22 - basics of bundle-uri: dies if not enabled
ok 23 - object-info missing from capabilities when disabled
ok 24 - object-info commands rejected when disabled
# passed all 24 test(s)
1..24
*** t5702-protocol-v2.sh ***
ok 1 - create repo to be served by git-daemon
ok 2 - list refs with git:// using protocol v2
ok 3 - ref advertisement is filtered with ls-remote using protocol v2
ok 4 - clone with git:// using protocol v2
ok 5 - fetch with git:// using protocol v2
ok 6 - fetch by hash without tag following with protocol v2 does not list refs
ok 7 - pull with git:// using protocol v2
ok 8 - push with git:// and a config of v2 does not request v2
ok 9 - create repo to be served by file:// transport
ok 10 - list refs with file:// using protocol v2
ok 11 - ref advertisement is filtered with ls-remote using protocol v2
ok 12 - server-options are sent when using ls-remote
ok 13 - warn if using server-option with ls-remote with legacy protocol
ok 14 - clone with file:// using protocol v2
ok 15 - clone of empty repo propagates name of default branch
ok 16 - ...but not if explicitly forbidden by config
ok 17 - bare clone propagates empty default branch
ok 18 - clone propagates unborn HEAD from non-empty repo
ok 19 - clone propagates object-format from empty repo
ok 20 - bare clone propagates unborn HEAD from non-empty repo
ok 21 - defaulted HEAD uses remote branch if available
ok 22 - fetch with file:// using protocol v2
ok 23 - ref advertisement is filtered during fetch using protocol v2
ok 24 - server-options are sent when fetching
ok 25 - warn if using server-option with fetch with legacy protocol
ok 26 - server-options are sent when cloning
ok 27 - warn if using server-option with clone with legacy protocol
ok 28 - upload-pack respects config using protocol v2
ok 29 - setup filter tests
ok 30 - partial clone
ok 31 - dynamically fetch missing object
ok 32 - when dynamically fetching missing object, do not list refs
ok 33 - partial fetch
ok 34 - do not advertise filter if not configured to do so
ok 35 - partial clone warns if filter is not advertised
ok 36 - even with handcrafted request, filter does not work if not advertised
ok 37 - default refspec is used to filter ref when fetchcing
ok 38 - fetch supports various ways of have lines
ok 39 - fetch supports include-tag and tag following
ok 40 - upload-pack respects client shallows
ok 41 - ensure that multiple fetches in same process from a shallow repo works
ok 42 - deepen-relative
ok 43 - usage: --negotiate-only without --negotiation-tip
ok 44 - usage: --negotiate-only with --recurse-submodules
ok 45 - file:// --negotiate-only
ok 46 - file:// --negotiate-only with protocol v0
ok 47 - push with custom path does not request v2
ok 48 - fetch with custom path does request v2
ok 49 - archive with custom path does not request v2
ok 50 - reject client packfile-uris if not advertised
# passed all 50 test(s)
# SKIP no web server found at ''
1..50
*** t5703-upload-pack-ref-in-want.sh ***
ok 1 - setup repository
ok 2 - config controls ref-in-want advertisement
ok 3 - invalid want-ref line
ok 4 - basic want-ref
ok 5 - multiple want-ref lines
ok 6 - mix want and want-ref
ok 7 - want-ref with ref we already have commit for
ok 8 - setup repos for fetching with ref-in-want tests
ok 9 - fetching with exact OID
ok 10 - fetching multiple refs
ok 11 - fetching ref and exact OID
ok 12 - fetching with wildcard that does not match any refs
ok 13 - fetching with wildcard that matches multiple refs
ok 14 - setup namespaced repo
ok 15 - with namespace: want-ref is considered relative to namespace
ok 16 - with namespace: want-ref outside namespace is unknown
ok 17 - without namespace: want-ref outside namespace succeeds
ok 18 - with namespace: hideRefs is matched, relative to namespace
ok 19 - with namespace: want-ref succeeds if hideRefs is removed
ok 20 - without namespace: relative hideRefs does not match
# passed all 20 test(s)
# SKIP no web server found at ''
1..20
*** t5704-protocol-violations.sh ***
ok 1 - extra delim packet in v2 ls-refs args
ok 2 - extra delim packet in v2 fetch args
ok 3 - bogus symref in v0 capabilities
# passed all 3 test(s)
1..3
*** t5705-session-id-in-capabilities.sh ***
ok 1 - setup repos for session ID capability tests
ok 2 - session IDs not advertised by default (fetch v0)
ok 3 - session IDs not advertised by default (push v0)
ok 4 - session IDs not advertised by default (fetch v1)
ok 5 - session IDs not advertised by default (push v1)
ok 6 - session IDs not advertised by default (fetch v2)
ok 7 - session IDs not advertised by default (push v2)
ok 8 - enable SID advertisement
ok 9 - session IDs advertised (fetch v0)
ok 10 - session IDs advertised (push v0)
ok 11 - client & server log negotiated version (v0)
ok 12 - session IDs advertised (fetch v1)
ok 13 - session IDs advertised (push v1)
ok 14 - client & server log negotiated version (v1)
ok 15 - session IDs advertised (fetch v2)
ok 16 - session IDs advertised (push v2)
ok 17 - client & server log negotiated version (v2)
# passed all 17 test(s)
1..17
*** t5730-protocol-v2-bundle-uri-file.sh ***
ok 1 - setup protocol v2 file:// tests
ok 2 - connect with file:// using protocol v2: no bundle-uri
ok 3 - connect with file:// using protocol v2: have bundle-uri
ok 4 - clone with file:// using protocol v2: request bundle-uris
ok 5 - enable transfer.bundleURI for remaining tests
ok 6 - test bundle-uri with file:// using protocol v2
ok 7 - test bundle-uri with file:// using protocol v2 and extra data
ok 8 - test bundle-uri with file:// using protocol v2 with list
# passed all 8 test(s)
1..8
*** t5731-protocol-v2-bundle-uri-git.sh ***
ok 1 - setup protocol v2 git:// tests
ok 2 - connect with git:// using protocol v2: no bundle-uri
ok 3 - connect with git:// using protocol v2: have bundle-uri
ok 4 - clone with git:// using protocol v2: request bundle-uris
ok 5 - enable transfer.bundleURI for remaining tests
ok 6 - test bundle-uri with git:// using protocol v2
ok 7 - test bundle-uri with git:// using protocol v2 and extra data
ok 8 - test bundle-uri with git:// using protocol v2 with list
# passed all 8 test(s)
1..8
*** t5732-protocol-v2-bundle-uri-http.sh ***
1..0 # SKIP no web server found at ''
*** t5750-bundle-uri-parse.sh ***
ok 1 - bundle_uri_parse_line() just URIs
ok 2 - bundle_uri_parse_line(): relative URIs
ok 3 - bundle_uri_parse_line(): relative URIs and parent paths
ok 4 - bundle_uri_parse_line() parsing edge cases: empty key or value
ok 5 - bundle_uri_parse_line() parsing edge cases: empty lines
ok 6 - bundle_uri_parse_line() parsing edge cases: duplicate lines
ok 7 - parse config format: just URIs
ok 8 - parse config format: relative URIs
ok 9 - parse config format edge cases: empty key or value
ok 10 - parse config format: creationToken heuristic
ok 11 - parse config format edge cases: creationToken heuristic
# passed all 11 test(s)
1..11
*** t5801-remote-helpers.sh ***
ok 1 - setup repository
ok 2 - cloning from local repo
ok 3 - create new commit on remote
ok 4 - pulling from local repo
ok 5 - pushing to local repo
ok 6 - fetch new branch
ok 7 - fetch multiple branches
ok 8 - push when remote has extra refs
ok 9 - push new branch by name
ok 10 - push new branch with old:new refspec
ok 11 - push new branch with HEAD:new refspec
ok 12 - push delete branch
ok 13 - forced push
ok 14 - cloning without refspec
ok 15 - pulling without refspecs
ok 16 - pushing without refspecs
ok 17 - pulling without marks
not ok 18 - pushing without marks # TODO known breakage
ok 19 - push all with existing object
ok 20 - push ref with existing object
ok 21 # skip push signed tag (missing GPG)
ok 22 # skip push signed tag with signed-tags capability (missing GPG)
ok 23 - push update refs
ok 24 - push update refs disabled by no-private-update
ok 25 - push update refs failure
ok 26 - proper failure checks for fetching
ok 27 - proper failure checks for pushing
ok 28 - push messages
ok 29 - fetch HEAD
ok 30 - fetch url
ok 31 - fetch tag
# still have 1 known breakage(s)
# passed all remaining 30 test(s)
1..31
*** t5802-connect-helper.sh ***
ok 1 - setup
ok 2 - clone
ok 3 - update following tag
ok 4 - update backfilled tag
ok 5 - update backfilled tag without primary transfer
ok 6 - set up fake git-daemon
ok 7 - ext command can connect to git daemon (no vhost)
ok 8 - ext command can connect to git daemon (vhost)
# passed all 8 test(s)
1..8
*** t5810-proto-disable-local.sh ***
ok 1 - setup repository to clone
ok 2 - clone file:// (enabled)
ok 3 - fetch file:// (enabled)
ok 4 - push file:// (enabled)
ok 5 - push file:// (disabled)
ok 6 - fetch file:// (disabled)
ok 7 - clone file:// (disabled)
ok 8 - clone file:// (env var has precedence)
ok 9 - clone file:// (enabled with config)
ok 10 - fetch file:// (enabled)
ok 11 - push file:// (enabled)
ok 12 - push file:// (disabled)
ok 13 - fetch file:// (disabled)
ok 14 - clone file:// (disabled)
ok 15 - clone file:// (enabled)
ok 16 - fetch file:// (enabled)
ok 17 - push file:// (enabled)
ok 18 - push file:// (disabled)
ok 19 - fetch file:// (disabled)
ok 20 - clone file:// (disabled)
ok 21 - clone file:// (enabled)
ok 22 - fetch file:// (enabled)
ok 23 - push file:// (enabled)
ok 24 - push file:// (disabled)
ok 25 - fetch file:// (disabled)
ok 26 - clone file:// (disabled)
ok 27 - clone path (enabled)
ok 28 - fetch path (enabled)
ok 29 - push path (enabled)
ok 30 - push path (disabled)
ok 31 - fetch path (disabled)
ok 32 - clone path (disabled)
ok 33 - clone path (env var has precedence)
ok 34 - clone path (enabled with config)
ok 35 - fetch path (enabled)
ok 36 - push path (enabled)
ok 37 - push path (disabled)
ok 38 - fetch path (disabled)
ok 39 - clone path (disabled)
ok 40 - clone path (enabled)
ok 41 - fetch path (enabled)
ok 42 - push path (enabled)
ok 43 - push path (disabled)
ok 44 - fetch path (disabled)
ok 45 - clone path (disabled)
ok 46 - clone path (enabled)
ok 47 - fetch path (enabled)
ok 48 - push path (enabled)
ok 49 - push path (disabled)
ok 50 - fetch path (disabled)
ok 51 - clone path (disabled)
ok 52 - setup repo with dash
ok 53 - repo names starting with dash are rejected
ok 54 - full paths still work
# passed all 54 test(s)
1..54
*** t5811-proto-disable-git.sh ***
ok 1 - create git-accessible repo
ok 2 - clone git:// (enabled)
ok 3 - fetch git:// (enabled)
ok 4 - push git:// (enabled)
ok 5 - push git:// (disabled)
ok 6 - fetch git:// (disabled)
ok 7 - clone git:// (disabled)
ok 8 - clone git:// (env var has precedence)
ok 9 - clone git:// (enabled with config)
ok 10 - fetch git:// (enabled)
ok 11 - push git:// (enabled)
ok 12 - push git:// (disabled)
ok 13 - fetch git:// (disabled)
ok 14 - clone git:// (disabled)
ok 15 - clone git:// (enabled)
ok 16 - fetch git:// (enabled)
ok 17 - push git:// (enabled)
ok 18 - push git:// (disabled)
ok 19 - fetch git:// (disabled)
ok 20 - clone git:// (disabled)
ok 21 - clone git:// (enabled)
ok 22 - fetch git:// (enabled)
ok 23 - push git:// (enabled)
ok 24 - push git:// (disabled)
ok 25 - fetch git:// (disabled)
ok 26 - clone git:// (disabled)
# passed all 26 test(s)
1..26
*** t5812-proto-disable-http.sh ***
1..0 # SKIP no web server found at ''
*** t5813-proto-disable-ssh.sh ***
ok 1 - setup ssh wrapper
ok 2 - setup repository to clone
ok 3 - clone host:path (enabled)
ok 4 - fetch host:path (enabled)
ok 5 - push host:path (enabled)
ok 6 - push host:path (disabled)
ok 7 - fetch host:path (disabled)
ok 8 - clone host:path (disabled)
ok 9 - clone host:path (env var has precedence)
ok 10 - clone host:path (enabled with config)
ok 11 - fetch host:path (enabled)
ok 12 - push host:path (enabled)
ok 13 - push host:path (disabled)
ok 14 - fetch host:path (disabled)
ok 15 - clone host:path (disabled)
ok 16 - clone host:path (enabled)
ok 17 - fetch host:path (enabled)
ok 18 - push host:path (enabled)
ok 19 - push host:path (disabled)
ok 20 - fetch host:path (disabled)
ok 21 - clone host:path (disabled)
ok 22 - clone host:path (enabled)
ok 23 - fetch host:path (enabled)
ok 24 - push host:path (enabled)
ok 25 - push host:path (disabled)
ok 26 - fetch host:path (disabled)
ok 27 - clone host:path (disabled)
ok 28 - clone ssh:// (enabled)
ok 29 - fetch ssh:// (enabled)
ok 30 - push ssh:// (enabled)
ok 31 - push ssh:// (disabled)
ok 32 - fetch ssh:// (disabled)
ok 33 - clone ssh:// (disabled)
ok 34 - clone ssh:// (env var has precedence)
ok 35 - clone ssh:// (enabled with config)
ok 36 - fetch ssh:// (enabled)
ok 37 - push ssh:// (enabled)
ok 38 - push ssh:// (disabled)
ok 39 - fetch ssh:// (disabled)
ok 40 - clone ssh:// (disabled)
ok 41 - clone ssh:// (enabled)
ok 42 - fetch ssh:// (enabled)
ok 43 - push ssh:// (enabled)
ok 44 - push ssh:// (disabled)
ok 45 - fetch ssh:// (disabled)
ok 46 - clone ssh:// (disabled)
ok 47 - clone ssh:// (enabled)
ok 48 - fetch ssh:// (enabled)
ok 49 - push ssh:// (enabled)
ok 50 - push ssh:// (disabled)
ok 51 - fetch ssh:// (disabled)
ok 52 - clone ssh:// (disabled)
ok 53 - clone git+ssh:// (enabled)
ok 54 - fetch git+ssh:// (enabled)
ok 55 - push git+ssh:// (enabled)
ok 56 - push git+ssh:// (disabled)
ok 57 - fetch git+ssh:// (disabled)
ok 58 - clone git+ssh:// (disabled)
ok 59 - clone git+ssh:// (env var has precedence)
ok 60 - clone git+ssh:// (enabled with config)
ok 61 - fetch git+ssh:// (enabled)
ok 62 - push git+ssh:// (enabled)
ok 63 - push git+ssh:// (disabled)
ok 64 - fetch git+ssh:// (disabled)
ok 65 - clone git+ssh:// (disabled)
ok 66 - clone git+ssh:// (enabled)
ok 67 - fetch git+ssh:// (enabled)
ok 68 - push git+ssh:// (enabled)
ok 69 - push git+ssh:// (disabled)
ok 70 - fetch git+ssh:// (disabled)
ok 71 - clone git+ssh:// (disabled)
ok 72 - clone git+ssh:// (enabled)
ok 73 - fetch git+ssh:// (enabled)
ok 74 - push git+ssh:// (enabled)
ok 75 - push git+ssh:// (disabled)
ok 76 - fetch git+ssh:// (disabled)
ok 77 - clone git+ssh:// (disabled)
ok 78 - hostnames starting with dash are rejected
ok 79 - setup repo with dash
ok 80 - repo names starting with dash are rejected
ok 81 - full paths still work
# passed all 81 test(s)
1..81
*** t5814-proto-disable-ext.sh ***
ok 1 - setup ext wrapper
ok 2 - setup repository to clone
ok 3 - clone remote-helper (enabled)
ok 4 - fetch remote-helper (enabled)
ok 5 - push remote-helper (enabled)
ok 6 - push remote-helper (disabled)
ok 7 - fetch remote-helper (disabled)
ok 8 - clone remote-helper (disabled)
ok 9 - clone remote-helper (env var has precedence)
ok 10 - clone remote-helper (enabled with config)
ok 11 - fetch remote-helper (enabled)
ok 12 - push remote-helper (enabled)
ok 13 - push remote-helper (disabled)
ok 14 - fetch remote-helper (disabled)
ok 15 - clone remote-helper (disabled)
ok 16 - clone remote-helper (enabled)
ok 17 - fetch remote-helper (enabled)
ok 18 - push remote-helper (enabled)
ok 19 - push remote-helper (disabled)
ok 20 - fetch remote-helper (disabled)
ok 21 - clone remote-helper (disabled)
ok 22 - clone remote-helper (enabled)
ok 23 - fetch remote-helper (enabled)
ok 24 - push remote-helper (enabled)
ok 25 - push remote-helper (disabled)
ok 26 - fetch remote-helper (disabled)
ok 27 - clone remote-helper (disabled)
# passed all 27 test(s)
1..27
*** t5815-submodule-protos.sh ***
ok 1 - setup ext wrapper
ok 2 - setup ssh wrapper
ok 3 - setup repository with submodules
ok 4 - clone with recurse-submodules fails
ok 5 - setup individual updates
ok 6 - update of ssh allowed
ok 7 - update of ext not allowed
ok 8 - user can filter protocols with GIT_ALLOW_PROTOCOL
# passed all 8 test(s)
1..8
*** t5900-repo-selection.sh ***
ok 1 - find .git dir in worktree
ok 2 - automagically add .git suffix
ok 3 - automagically add .git suffix to worktree
ok 4 - prefer worktree foo over bare foo.git
ok 5 - prefer bare foo over bare foo.git
ok 6 - disambiguate with full foo.git
ok 7 - we are not fooled by non-git foo directory
ok 8 - prefer inner .git over outer bare
# passed all 8 test(s)
1..8
*** t6000-rev-list-misc.sh ***
ok 1 - setup
ok 2 - rev-list --objects heeds pathspecs
ok 3 - rev-list --objects with pathspecs and deeper paths
ok 4 - rev-list --objects with pathspecs and copied files
ok 5 - rev-list --objects --no-object-names has no space/names
ok 6 - rev-list --objects --no-object-names works with cat-file
ok 7 - --no-object-names and --object-names are last-one-wins
ok 8 - rev-list A..B and rev-list ^A B are the same
ok 9 - propagate uninteresting flag down correctly
ok 10 - symleft flag bit is propagated down from tag
ok 11 - rev-list can show index objects
ok 12 - rev-list can negate index objects
ok 13 - --bisect and --first-parent can be combined
ok 14 - --header shows a NUL after each commit
ok 15 - rev-list --end-of-options
ok 16 - rev-list --count
ok 17 - rev-list --count --objects
ok 18 - rev-list --unpacked
# passed all 18 test(s)
1..18
*** t6001-rev-list-graft.sh ***
ok 1 - setup
ok 2 - without grafts
ok 3 - with grafts
ok 4 - without grafts, with pathlimit
ok 5 - with grafts, with pathlimit
ok 6 - without grafts
ok 7 - with grafts
ok 8 - without grafts, with pathlimit
ok 9 - with grafts, with pathlimit
ok 10 - without grafts
ok 11 - with grafts
ok 12 - without grafts, with pathlimit
ok 13 - with grafts, with pathlimit
ok 14 - show advice that grafts are deprecated
# passed all 14 test(s)
1..14
*** t6002-rev-list-bisect.sh ***
ok 1 - bisection diff --bisect l0 ^root <= 0
ok 2 - bisection diff --bisect l1 ^root <= 0
ok 3 - bisection diff --bisect l2 ^root <= 0
ok 4 - bisection diff --bisect a0 ^root <= 0
ok 5 - bisection diff --bisect a1 ^root <= 0
ok 6 - bisection diff --bisect a2 ^root <= 0
ok 7 - bisection diff --bisect a3 ^root <= 0
ok 8 - bisection diff --bisect b1 ^root <= 0
ok 9 - bisection diff --bisect b2 ^root <= 0
ok 10 - bisection diff --bisect b3 ^root <= 0
ok 11 - bisection diff --bisect c1 ^root <= 0
ok 12 - bisection diff --bisect c2 ^root <= 0
ok 13 - bisection diff --bisect c3 ^root <= 0
ok 14 - bisection diff --bisect E ^F <= 0
ok 15 - bisection diff --bisect e1 ^F <= 0
ok 16 - bisection diff --bisect e2 ^F <= 0
ok 17 - bisection diff --bisect e3 ^F <= 0
ok 18 - bisection diff --bisect e4 ^F <= 0
ok 19 - bisection diff --bisect e5 ^F <= 0
ok 20 - bisection diff --bisect e6 ^F <= 0
ok 21 - bisection diff --bisect e7 ^F <= 0
ok 22 - bisection diff --bisect f1 ^F <= 0
ok 23 - bisection diff --bisect f2 ^F <= 0
ok 24 - bisection diff --bisect f3 ^F <= 0
ok 25 - bisection diff --bisect f4 ^F <= 0
ok 26 - bisection diff --bisect E ^F <= 0
ok 27 - bisection diff --bisect V ^U <= 1
ok 28 - bisection diff --bisect V ^U ^u1 ^u2 ^u3 <= 0
ok 29 - bisection diff --bisect u1 ^U <= 0
ok 30 - bisection diff --bisect u2 ^U <= 0
ok 31 - bisection diff --bisect u3 ^U <= 0
ok 32 - bisection diff --bisect u4 ^U <= 0
ok 33 - bisection diff --bisect u5 ^U <= 0
ok 34 - --bisect l5 ^root
ok 35 - --bisect l5 ^root ^c3
ok 36 - --bisect l5 ^root ^c3 ^b4
ok 37 - --bisect l3 ^root ^c3 ^b4
ok 38 - --bisect l5 ^b3 ^a3 ^b4 ^a4
ok 39 - --bisect l4 ^a2 ^a3 ^b ^a4
ok 40 - --bisect l3 ^a2 ^a3 ^b ^a4
ok 41 - --bisect a4 ^a2 ^a3 ^b4
ok 42 - --bisect a4 ^a2 ^a3 ^b4 ^c2
ok 43 - --bisect a4 ^a2 ^a3 ^b4 ^c2 ^c3
ok 44 - --bisect a4 ^a2 ^a3 ^b4
ok 45 - --bisect c3 ^a2 ^a3 ^b4 ^c2
ok 46 - set up fake --bisect refs
ok 47 - rev-list --bisect can default to good/bad refs
ok 48 - rev-parse --bisect can default to good/bad refs
ok 49 - --bisect --first-parent
ok 50 - --first-parent
ok 51 - --bisect-vars --first-parent
ok 52 - --bisect-all --first-parent
# passed all 52 test(s)
1..52
*** t6003-rev-list-topo-order.sh ***
ok 1 - rev-list has correct number of entries
ok 2 - simple topo order
ok 3 - simple date order
ok 4 - simple author-date order
ok 5 - two diamonds topo order (g6)
ok 6 - multiple heads
ok 7 - multiple heads, prune at a1
ok 8 - multiple heads, prune at l1
ok 9 - cross-epoch, head at l5, prune at l1
ok 10 - duplicated head arguments
ok 11 - prune near topo
ok 12 - head has no parent
ok 13 - two nodes - one head, one base
ok 14 - three nodes one head, one internal, one base
ok 15 - linear prune l2 ^root
ok 16 - linear prune l2 ^l0
ok 17 - linear prune l2 ^l1
ok 18 - linear prune l5 ^a4
ok 19 - linear prune l5 ^l3
ok 20 - linear prune l5 ^l4
ok 21 - max-count 10 - topo order
ok 22 - max-count 10 - non topo order
ok 23 - --max-age=c3, no --topo-order
ok 24 - --max-age=c3, --topo-order
ok 25 - one specified head reachable from another a4, c3, --topo-order
ok 26 - one specified head reachable from another c3, a4, --topo-order
ok 27 - one specified head reachable from another a4, c3, no --topo-order
ok 28 - one specified head reachable from another c3, a4, no --topo-order
ok 29 - graph with c3 and a4 parents of head
ok 30 - graph with a4 and c3 parents of head
ok 31 - head ^head --topo-order
ok 32 - head ^head no --topo-order
ok 33 - simple topo order (l5r1)
ok 34 - simple topo order (r1l5)
ok 35 - don't print things unreachable from one branch
ok 36 - --topo-order a4 l3
# passed all 36 test(s)
1..36
*** t6004-rev-list-path-optim.sh ***
ok 1 - setup
ok 2 - path-optimization
ok 3 - further setup
ok 4 - path optimization 2
ok 5 - pathspec with leading path
ok 6 - pathspec with glob (1)
ok 7 - pathspec with glob (2)
# passed all 7 test(s)
1..7
*** t6005-rev-list-count.sh ***
ok 1 - setup
ok 2 - no options
ok 3 - --max-count
ok 4 - --max-count all forms
ok 5 - --skip
ok 6 - --skip --max-count
# passed all 6 test(s)
1..6
*** t6006-rev-list-format.sh ***
ok 1 - setup
ok 2 - format percent
ok 3 - format hash
ok 4 - format hash-no-header
ok 5 - format hash-no-header-abbrev
ok 6 - format tree
ok 7 - format parents
ok 8 - format author
ok 9 - format committer
ok 10 - format encoding
ok 11 - format subject
ok 12 - format subject-truncated
ok 13 - format body
ok 14 - format raw-body
ok 15 - format raw-body-no-header
ok 16 - pretty oneline (without --no-commit-header)
ok 17 - pretty oneline (with --no-commit-header)
ok 18 - pretty short (without --no-commit-header)
ok 19 - pretty short (with --no-commit-header)
ok 20 - basic colors
ok 21 - %S is not a placeholder for rev-list yet
ok 22 - advanced colors
ok 23 - %Cred does not enable color by default
ok 24 - %Cred enables colors for color.diff
ok 25 - %Cred enables colors for color.ui
ok 26 - %Cred respects --color
ok 27 - %Cred respects --no-color
ok 28 - %Cred respects --color=auto (stdout is tty)
ok 29 - %Cred respects --color=auto (stdout not tty)
ok 30 - %C(...) does not enable color by default
ok 31 - %C(...) enables colors for color.diff
ok 32 - %C(...) enables colors for color.ui
ok 33 - %C(...) respects --color
ok 34 - %C(...) respects --no-color
ok 35 - %C(...) respects --color=auto (stdout is tty)
ok 36 - %C(...) respects --color=auto (stdout not tty)
ok 37 - %C(auto,...) does not enable color by default
ok 38 - %C(auto,...) enables colors for color.diff
ok 39 - %C(auto,...) enables colors for color.ui
ok 40 - %C(auto,...) respects --color
ok 41 - %C(auto,...) respects --no-color
ok 42 - %C(auto,...) respects --color=auto (stdout is tty)
ok 43 - %C(auto,...) respects --color=auto (stdout not tty)
ok 44 - %C(always,...) enables color even without tty
ok 45 - %C(auto) respects --color
ok 46 - %C(auto) respects --no-color
ok 47 - rev-list %C(auto,...) respects --color
ok 48 - setup complex body
ok 49 - format complex-encoding
ok 50 - format complex-subject
ok 51 - format complex-subject-trunc
ok 52 - format complex-subject-mtrunc
ok 53 - format complex-subject-ltrunc
ok 54 - setup expected messages (for test %b)
ok 55 - format complex-body
ok 56 - format complex-subject-commitencoding-unset
ok 57 - format complex-subject-commitencoding-unset-trunc
ok 58 - format complex-subject-commitencoding-unset-mtrunc
ok 59 - format complex-subject-commitencoding-unset-ltrunc
ok 60 - format complex-body-commitencoding-unset
ok 61 - %x00 shows NUL
ok 62 - %ad respects --date=
ok 63 - empty email
ok 64 - del LF before empty (1)
ok 65 - del LF before empty (2)
ok 66 - add LF before non-empty (1)
ok 67 - add LF before non-empty (2)
ok 68 - add SP before non-empty (1)
ok 69 - add SP before non-empty (2)
ok 70 - --abbrev
ok 71 - %H is not affected by --abbrev-commit
ok 72 - %h is not affected by --abbrev-commit
ok 73 - "%h %gD: %gs" is same as git-reflog
ok 74 - "%h %gD: %gs" is same as git-reflog (with date)
ok 75 - "%h %gD: %gs" is same as git-reflog (with --abbrev)
ok 76 - %gd shortens ref name
ok 77 - reflog identity
ok 78 - oneline with empty message
ok 79 - single-character name is parsed correctly
ok 80 - unused %G placeholders are passed through
# passed all 80 test(s)
1..80
*** t6007-rev-list-cherry-pick-file.sh ***
ok 1 - setup
ok 2 - --left-right
ok 3 - --count
ok 4 - --cherry-pick foo comes up empty
ok 5 - --cherry-pick bar does not come up empty
ok 6 - bar does not come up empty
ok 7 - --cherry-pick bar does not come up empty (II)
ok 8 - name-rev multiple --refs combine inclusive
ok 9 - name-rev --refs excludes non-matched patterns
ok 10 - name-rev --exclude excludes matched patterns
ok 11 - name-rev --no-refs clears the refs list
ok 12 - --cherry-mark
ok 13 - --cherry-mark --left-right
ok 14 - --cherry-pick --right-only
ok 15 - --cherry-pick --left-only
ok 16 - --cherry
ok 17 - --cherry --count
ok 18 - --cherry-mark --count
ok 19 - --cherry-mark --left-right --count
ok 20 - --cherry-pick with independent, but identical branches
ok 21 - --count --left-right
ok 22 - --cherry-pick with duplicates on each side
ok 23 - --cherry-pick avoids looking at full diffs
# passed all 23 test(s)
1..23
*** t6008-rev-list-submodule.sh ***
ok 1 - setup
ok 2 - Ilari's test
# passed all 2 test(s)
1..2
*** t6009-rev-list-parent.sh ***
ok 1 - setup
ok 2 - one is ancestor of others and should not be shown
ok 3 - setup roots, merges and octopuses
ok 4 - parse --max-parents & --min-parents
ok 5 - rev-list roots
ok 6 - rev-list no merges
ok 7 - rev-list no octopuses
ok 8 - rev-list no roots
ok 9 - rev-list merges
ok 10 - rev-list octopus
ok 11 - rev-list ordinary commits
ok 12 - rev-list --merges --no-merges yields empty set
ok 13 - rev-list override and infinities
ok 14 - dodecapus
ok 15 - ancestors with the same commit time
# passed all 15 test(s)
1..15
*** t6010-merge-base.sh ***
ok 1 - setup
ok 2 - set up G and H
ok 3 - merge-base G H
ok 4 - merge-base/show-branch --independent
ok 5 - unsynchronized clocks
ok 6 - --independent with unsynchronized clocks
ok 7 - merge-base for octopus-step (setup)
ok 8 - merge-base A B C
ok 9 - criss-cross merge-base for octopus-step
ok 10 - using reflog to find the fork point
ok 11 - --fork-point works with empty reflog
ok 12 - merge-base --octopus --all for complex tree
# passed all 12 test(s)
1..12
*** t6011-rev-list-with-bad-commit.sh ***
ok 1 - setup
ok 2 - verify number of revisions
ok 3 - corrupt second commit object
ok 4 - rev-list should fail
ok 5 - git repack _MUST_ fail
ok 6 - first commit is still available
# passed all 6 test(s)
1..6
*** t6012-rev-list-simplify.sh ***
ok 1 - setup
ok 2 - log --full-history --topo-order
ok 3 - log --full-history
ok 4 - log --full-history --date-order
ok 5 - log --full-history --author-date-order
ok 6 - log --full-history -- file
ok 7 - log --full-history --topo-order -- file
ok 8 - log --full-history --date-order -- file
ok 9 - log --full-history --author-date-order -- file
ok 10 - log --simplify-merges -- file
ok 11 - log --simplify-merges --topo-order -- file
ok 12 - log --simplify-merges --date-order -- file
ok 13 - log --simplify-merges --author-date-order -- file
ok 14 - log -- file
ok 15 - log --topo-order -- file
ok 16 - log --date-order -- file
ok 17 - log --author-date-order -- file
ok 18 - log --first-parent -- another-file
ok 19 - log --first-parent --topo-order -- another-file
ok 20 - log --first-parent L
ok 21 - log --exclude-first-parent-only F ^L
ok 22 - log F ^L
ok 23 - log L ^F
ok 24 - log --exclude-first-parent-only L ^F
ok 25 - log --exclude-first-parent-only --first-parent L ^F
ok 26 - log --full-history E -- lost
ok 27 - full history simplification without parent
ok 28 - --full-diff is not affected by --parents
ok 29 - setup rebuild repo
ok 30 - log -- file
ok 31 - log --show-pulls -- file
ok 32 - log --full-history --topo-order -- file
ok 33 - log --simplify-merges --topo-order --show-pulls -- file
ok 34 - log --simplify-merges --topo-order -- file
ok 35 - log --first-parent -- file
ok 36 - log --first-parent --show-pulls -- file
ok 37 - log --topo-order --ancestry-path A..HEAD -- file
ok 38 - log --topo-order --show-pulls --ancestry-path A..HEAD -- file
ok 39 - log --topo-order --full-history --ancestry-path A..HEAD -- file
ok 40 - log --topo-order --simplify-merges --ancestry-path A..HEAD -- file
ok 41 - log --topo-order --simplify-merges --show-pulls --ancestry-path A..HEAD -- file
ok 42 - log --graph --simplify-merges --show-pulls
# passed all 42 test(s)
1..42
*** t6013-rev-list-reverse-parents.sh ***
ok 1 - set up --reverse example
ok 2 - --reverse --parents --full-history combines correctly
ok 3 - --boundary does too
# passed all 3 test(s)
1..3
*** t6014-rev-list-all.sh ***
ok 1 - setup
ok 2 - rev-list --all lists detached HEAD
ok 3 - repack does not lose detached HEAD
ok 4 - rev-list --graph --no-walk is forbidden
# passed all 4 test(s)
1..4
*** t6016-rev-list-graph-simplify-history.sh ***
ok 1 - set up rev-list --graph test
ok 2 - --graph --all
ok 3 - --graph --simplify-by-decoration
ok 4 - setup: get rid of decorations on B
ok 5 - --graph --simplify-by-decoration prune branch B
ok 6 - --graph --full-history -- bar.txt
ok 7 - --graph --full-history --simplify-merges -- bar.txt
ok 8 - --graph -- bar.txt
ok 9 - --graph --sparse -- bar.txt
ok 10 - --graph ^C4
ok 11 - --graph ^C3
ok 12 - --graph --boundary ^C3
# passed all 12 test(s)
1..12
*** t6017-rev-list-stdin.sh ***
ok 1 - setup
ok 2 - check rev-list main
ok 3 - check log --stat main
ok 4 - check rev-list side-1 ^side-4
ok 5 - check log --stat side-1 ^side-4
ok 6 - check rev-list side-1 ^side-7 --
ok 7 - check log --stat side-1 ^side-7 --
ok 8 - check rev-list side-1 ^side-7 -- file-1
ok 9 - check log --stat side-1 ^side-7 -- file-1
ok 10 - check rev-list side-1 ^side-7 -- file-2
ok 11 - check log --stat side-1 ^side-7 -- file-2
ok 12 - check rev-list side-3 ^side-4 -- file-3
ok 13 - check log --stat side-3 ^side-4 -- file-3
ok 14 - check rev-list side-3 ^side-2
ok 15 - check log --stat side-3 ^side-2
ok 16 - check rev-list side-3 ^side-2 -- file-1
ok 17 - check log --stat side-3 ^side-2 -- file-1
ok 18 - check rev-list --all
ok 19 - check log --stat --all
ok 20 - check rev-list --all --not --branches
ok 21 - check log --stat --all --not --branches
ok 22 - check rev-list --glob=refs/heads
ok 23 - check log --stat --glob=refs/heads
ok 24 - check rev-list --glob=refs/heads --
ok 25 - check log --stat --glob=refs/heads --
ok 26 - check rev-list --glob=refs/heads -- file-1
ok 27 - check log --stat --glob=refs/heads -- file-1
ok 28 - check rev-list --end-of-options -dashed-branch
ok 29 - check log --stat --end-of-options -dashed-branch
ok 30 - check rev-list --all --not refs/heads/main
ok 31 - check log --stat --all --not refs/heads/main
ok 32 - not only --stdin
ok 33 - pseudo-opt with missing value
ok 34 - pseudo-opt with invalid value
ok 35 - unknown option without --end-of-options
ok 36 - --not on command line does not influence revisions read via --stdin
ok 37 - --not via stdin does not influence revisions from command line
# passed all 37 test(s)
1..37
*** t6018-rev-list-glob.sh ***
ok 1 - setup
ok 2 - rev-parse --glob=refs/heads/subspace/*
ok 3 - rev-parse --glob=heads/subspace/*
ok 4 - rev-parse --glob=refs/heads/subspace/
ok 5 - rev-parse --glob=heads/subspace/
ok 6 - rev-parse --glob=heads/subspace
not ok 7 - rev-parse accepts --glob as detached option # TODO known breakage
not ok 8 - rev-parse is not confused by option-like glob # TODO known breakage
ok 9 - rev-parse --branches=subspace/*
ok 10 - rev-parse --branches=subspace/
ok 11 - rev-parse --branches=subspace
ok 12 - rev-parse --glob=heads/subspace/* --glob=heads/other/*
ok 13 - rev-parse --glob=heads/someref/* main
ok 14 - rev-parse --glob=heads/*
ok 15 - rev-parse --tags=foo
ok 16 - rev-parse --remotes=foo
ok 17 - rev-parse --exclude with --branches
ok 18 - rev-parse --exclude with --all
ok 19 - rev-parse accumulates multiple --exclude
ok 20 - rev-parse --branches clears --exclude
ok 21 - rev-parse --tags clears --exclude
ok 22 - rev-parse --all clears --exclude
ok 23 - rev-parse --exclude=glob with --branches=glob
ok 24 - rev-parse --exclude=glob with --tags=glob
ok 25 - rev-parse --exclude=glob with --remotes=glob
ok 26 - rev-parse --exclude=ref with --branches=glob
ok 27 - rev-parse --exclude=ref with --tags=glob
ok 28 - rev-parse --exclude=ref with --remotes=glob
ok 29 - rev-parse --exclude-hidden=fetch with --all
ok 30 - rev-parse --exclude-hidden=fetch with --all
ok 31 - rev-parse --exclude-hidden=fetch with --glob
ok 32 - rev-parse --exclude-hidden=fetch can be passed once per pseudo-ref
ok 33 - rev-parse --exclude-hidden=fetch can only be passed once per pseudo-ref
ok 34 - rev-parse --exclude-hidden=fetch fails with --branches
ok 35 - rev-parse --exclude-hidden=fetch fails with --branches=pattern
ok 36 - rev-parse --exclude-hidden=fetch fails with --tags
ok 37 - rev-parse --exclude-hidden=fetch fails with --tags=pattern
ok 38 - rev-parse --exclude-hidden=fetch fails with --remotes
ok 39 - rev-parse --exclude-hidden=fetch fails with --remotes=pattern
ok 40 - rev-parse --exclude-hidden=receive with --all
ok 41 - rev-parse --exclude-hidden=receive with --all
ok 42 - rev-parse --exclude-hidden=receive with --glob
ok 43 - rev-parse --exclude-hidden=receive can be passed once per pseudo-ref
ok 44 - rev-parse --exclude-hidden=receive can only be passed once per pseudo-ref
ok 45 - rev-parse --exclude-hidden=receive fails with --branches
ok 46 - rev-parse --exclude-hidden=receive fails with --branches=pattern
ok 47 - rev-parse --exclude-hidden=receive fails with --tags
ok 48 - rev-parse --exclude-hidden=receive fails with --tags=pattern
ok 49 - rev-parse --exclude-hidden=receive fails with --remotes
ok 50 - rev-parse --exclude-hidden=receive fails with --remotes=pattern
ok 51 - rev-parse --exclude-hidden=uploadpack with --all
ok 52 - rev-parse --exclude-hidden=uploadpack with --all
ok 53 - rev-parse --exclude-hidden=uploadpack with --glob
ok 54 - rev-parse --exclude-hidden=uploadpack can be passed once per pseudo-ref
ok 55 - rev-parse --exclude-hidden=uploadpack can only be passed once per pseudo-ref
ok 56 - rev-parse --exclude-hidden=uploadpack fails with --branches
ok 57 - rev-parse --exclude-hidden=uploadpack fails with --branches=pattern
ok 58 - rev-parse --exclude-hidden=uploadpack fails with --tags
ok 59 - rev-parse --exclude-hidden=uploadpack fails with --tags=pattern
ok 60 - rev-parse --exclude-hidden=uploadpack fails with --remotes
ok 61 - rev-parse --exclude-hidden=uploadpack fails with --remotes=pattern
ok 62 - rev-list --exclude=glob with --branches=glob
ok 63 - rev-list --exclude=glob with --tags=glob
ok 64 - rev-list --exclude=glob with --remotes=glob
ok 65 - rev-list --exclude=ref with --branches=glob
ok 66 - rev-list --exclude=ref with --tags=glob
ok 67 - rev-list --exclude=ref with --remotes=glob
ok 68 - rev-list --glob=refs/heads/subspace/*
ok 69 - rev-list --glob refs/heads/subspace/*
ok 70 - rev-list not confused by option-like --glob arg
ok 71 - rev-list --glob=heads/subspace/*
ok 72 - rev-list --glob=refs/heads/subspace/
ok 73 - rev-list --glob=heads/subspace/
ok 74 - rev-list --glob=heads/subspace
ok 75 - rev-list --branches=subspace/*
ok 76 - rev-list --branches=subspace/
ok 77 - rev-list --branches=subspace
ok 78 - rev-list --branches
ok 79 - rev-list --glob=heads/someref/* main
ok 80 - rev-list --glob=heads/subspace/* --glob=heads/other/*
ok 81 - rev-list --glob=heads/*
ok 82 - rev-list --tags=foo
ok 83 - rev-list --tags
ok 84 - rev-list --remotes=foo
ok 85 - rev-list --exclude with --branches
ok 86 - rev-list --exclude with --all
ok 87 - rev-list accumulates multiple --exclude
ok 88 - rev-list should succeed with empty output on empty stdin
ok 89 - rev-list should succeed with empty output with all refs excluded
ok 90 - rev-list should succeed with empty output with empty --all
ok 91 - rev-list should succeed with empty output with empty glob
ok 92 - rev-list should succeed with empty output when ignoring missing
ok 93 - shortlog accepts --glob/--tags/--remotes
not ok 94 - shortlog accepts --glob as detached option # TODO known breakage
not ok 95 - shortlog --glob is not confused by option-like argument # TODO known breakage
# still have 4 known breakage(s)
# passed all remaining 91 test(s)
1..95
*** t6019-rev-list-ancestry-path.sh ***
ok 1 - setup
ok 2 - log D..M
ok 3 - log --ancestry-path D..M
ok 4 - log --ancestry-path=F D..M
ok 5 - log --ancestry-path=G D..M
ok 6 - log --ancestry-path=H D..M
ok 7 - log --ancestry-path=K D..M
ok 8 - log --ancestry-path=F --ancestry-path=K D..M
ok 9 - log D..M -- M.t
ok 10 - log --ancestry-path D..M -- M.t
ok 11 - log F...I
ok 12 - log --ancestry-path F...I
ok 13 - log G..M -- G.t
ok 14 - log --ancestry-path G..M -- G.t
ok 15 - log --ancestry-path --simplify-merges G^..M -- G.t
ok 16 - setup criss-cross
ok 17 - criss-cross: rev-list --ancestry-path cb..bc
ok 18 - criss-cross: rev-list --ancestry-path --all ^cb
# passed all 18 test(s)
1..18
*** t6020-bundle-misc.sh ***
ok 1 - usage: git bundle create needs an argument
ok 2 - usage: git bundle verify needs an argument
ok 3 - usage: git bundle list-heads needs an argument
ok 4 - usage: git bundle unbundle needs an argument
ok 5 - setup
ok 6 - create bundle from special rev: main^!
ok 7 - create bundle with --max-count option
ok 8 - create bundle with --since option
ok 9 - create bundle 1 - no prerequisites
ok 10 - create bundle 2 - has prerequisites
ok 11 - fail to verify bundle without prerequisites
ok 12 - create bundle 3 - two refs, same object
ok 13 - create bundle 4 - with tags
ok 14 - clone from bundle
ok 15 - unfiltered bundle with --objects
ok 16 - filtered bundle: blob:none
ok 17 - filtered bundle: tree:0
ok 18 - filtered bundle: tree:1
ok 19 - filtered bundle: blob:limit=100
ok 20 - cloning from filtered bundle has useful error
ok 21 - verify catches unreachable, broken prerequisites
ok 22 - bundle progress includes write phase
ok 23 - create --quiet disables all bundle progress
ok 24 - bundle progress with --no-quiet
ok 25 - read bundle over stdin
ok 26 - send a bundle to standard output
# passed all 26 test(s)
1..26
*** t6021-rev-list-exclude-hidden.sh ***
ok 1 - setup
ok 2 - invalid section
ok 3 - fetch: passed multiple times
ok 4 - fetch: without hiddenRefs
ok 5 - fetch: hidden via transfer.hideRefs
ok 6 - fetch: hidden via fetch.hideRefs
ok 7 - fetch: respects both transfer.hideRefs and fetch.hideRefs
ok 8 - fetch: negation without hidden refs marks everything as uninteresting
ok 9 - fetch: negation with hidden refs marks them as interesting
ok 10 - fetch: hidden refs and excludes work together
ok 11 - fetch: excluded hidden refs get reset
ok 12 - fetch: excluded hidden refs can be used with multiple pseudo-refs
ok 13 - fetch: works with --glob
ok 14 - fetch: operates on stripped refs by default
ok 15 - fetch: does not hide namespace by default
ok 16 - fetch: can operate on unstripped refs
ok 17 - fetch: fails with --remotes
ok 18 - fetch: fails with --remotes=pattern
ok 19 - fetch: fails with --branches
ok 20 - fetch: fails with --branches=pattern
ok 21 - fetch: fails with --tags
ok 22 - fetch: fails with --tags=pattern
ok 23 - receive: passed multiple times
ok 24 - receive: without hiddenRefs
ok 25 - receive: hidden via transfer.hideRefs
ok 26 - receive: hidden via receive.hideRefs
ok 27 - receive: respects both transfer.hideRefs and receive.hideRefs
ok 28 - receive: negation without hidden refs marks everything as uninteresting
ok 29 - receive: negation with hidden refs marks them as interesting
ok 30 - receive: hidden refs and excludes work together
ok 31 - receive: excluded hidden refs get reset
ok 32 - receive: excluded hidden refs can be used with multiple pseudo-refs
ok 33 - receive: works with --glob
ok 34 - receive: operates on stripped refs by default
ok 35 - receive: does not hide namespace by default
ok 36 - receive: can operate on unstripped refs
ok 37 - receive: fails with --remotes
ok 38 - receive: fails with --remotes=pattern
ok 39 - receive: fails with --branches
ok 40 - receive: fails with --branches=pattern
ok 41 - receive: fails with --tags
ok 42 - receive: fails with --tags=pattern
ok 43 - uploadpack: passed multiple times
ok 44 - uploadpack: without hiddenRefs
ok 45 - uploadpack: hidden via transfer.hideRefs
ok 46 - uploadpack: hidden via uploadpack.hideRefs
ok 47 - uploadpack: respects both transfer.hideRefs and uploadpack.hideRefs
ok 48 - uploadpack: negation without hidden refs marks everything as uninteresting
ok 49 - uploadpack: negation with hidden refs marks them as interesting
ok 50 - uploadpack: hidden refs and excludes work together
ok 51 - uploadpack: excluded hidden refs get reset
ok 52 - uploadpack: excluded hidden refs can be used with multiple pseudo-refs
ok 53 - uploadpack: works with --glob
ok 54 - uploadpack: operates on stripped refs by default
ok 55 - uploadpack: does not hide namespace by default
ok 56 - uploadpack: can operate on unstripped refs
ok 57 - uploadpack: fails with --remotes
ok 58 - uploadpack: fails with --remotes=pattern
ok 59 - uploadpack: fails with --branches
ok 60 - uploadpack: fails with --branches=pattern
ok 61 - uploadpack: fails with --tags
ok 62 - uploadpack: fails with --tags=pattern
# passed all 62 test(s)
1..62
*** t6022-rev-list-missing.sh ***
ok 1 - create repository and alternate directory
ok 2 - rev-list --missing=error fails with missing object HEAD~1
ok 3 - rev-list --missing=error fails with missing object HEAD~1^{tree}
ok 4 - rev-list --missing=error fails with missing object HEAD:1.t
ok 5 - rev-list --missing=allow-any with missing HEAD~1
ok 6 - rev-list --missing=print with missing HEAD~1
ok 7 - rev-list --missing=allow-any with missing HEAD~1^{tree}
ok 8 - rev-list --missing=print with missing HEAD~1^{tree}
ok 9 - rev-list --missing=allow-any with missing HEAD:1.t
ok 10 - rev-list --missing=print with missing HEAD:1.t
ok 11 - --missing=allow-any with tip 'annot_tag' missing and tip ''
ok 12 - --missing=print with tip 'annot_tag' missing and tip ''
ok 13 - --missing=allow-any with tip 'annot_tag' missing and tip 'HEAD'
ok 14 - --missing=print with tip 'annot_tag' missing and tip 'HEAD'
ok 15 - --missing=allow-any with tip 'regul_tag' missing and tip ''
ok 16 - --missing=print with tip 'regul_tag' missing and tip ''
ok 17 - --missing=allow-any with tip 'regul_tag' missing and tip 'HEAD'
ok 18 - --missing=print with tip 'regul_tag' missing and tip 'HEAD'
ok 19 - --missing=allow-any with tip 'a_branch' missing and tip ''
ok 20 - --missing=print with tip 'a_branch' missing and tip ''
ok 21 - --missing=allow-any with tip 'a_branch' missing and tip 'HEAD'
ok 22 - --missing=print with tip 'a_branch' missing and tip 'HEAD'
ok 23 - --missing=allow-any with tip 'HEAD~1' missing and tip ''
ok 24 - --missing=print with tip 'HEAD~1' missing and tip ''
ok 25 - --missing=allow-any with tip 'HEAD~1' missing and tip 'HEAD'
ok 26 - --missing=print with tip 'HEAD~1' missing and tip 'HEAD'
ok 27 - --missing=allow-any with tip 'HEAD~1^{tree}' missing and tip ''
ok 28 - --missing=print with tip 'HEAD~1^{tree}' missing and tip ''
ok 29 - --missing=allow-any with tip 'HEAD~1^{tree}' missing and tip 'HEAD'
ok 30 - --missing=print with tip 'HEAD~1^{tree}' missing and tip 'HEAD'
ok 31 - --missing=allow-any with tip 'HEAD:1.t' missing and tip ''
ok 32 - --missing=print with tip 'HEAD:1.t' missing and tip ''
ok 33 - --missing=allow-any with tip 'HEAD:1.t' missing and tip 'HEAD'
ok 34 - --missing=print with tip 'HEAD:1.t' missing and tip 'HEAD'
# passed all 34 test(s)
1..34
*** t6030-bisect-porcelain.sh ***
ok 1 - bisect usage
ok 2 - set up basic repo with 1 file (hello) and 4 commits
ok 3 - bisect starts with only one bad
ok 4 - bisect does not start with only one good
ok 5 - bisect start with one bad and good
ok 6 - bisect fails if given any junk instead of revs
ok 7 - bisect start without -- takes unknown arg as pathspec
ok 8 - bisect reset: back in a branch checked out also elsewhere
ok 9 - bisect reset: back in the main branch
ok 10 - bisect reset: back in another branch
ok 11 - bisect reset when not bisecting
ok 12 - bisect reset cleans up even when not bisecting
ok 13 - bisect reset removes packed refs
ok 14 - bisect reset removes bisect state after --no-checkout
ok 15 - bisect start: back in good branch
ok 16 - bisect start: no ".git/BISECT_START" created if junk rev
ok 17 - bisect start: existing ".git/BISECT_START" not modified if junk rev
ok 18 - bisect start: no ".git/BISECT_START" if mistaken rev
ok 19 - bisect start: no ".git/BISECT_START" if checkout error
ok 20 - bisect skip: successful result
ok 21 - bisect skip: cannot tell between 3 commits
ok 22 - bisect skip: cannot tell between 2 commits
ok 23 - bisect skip: with commit both bad and skipped
ok 24 - git bisect run: args, stdout and stderr with no arguments
ok 25 - git bisect run: args, stdout and stderr: "--" argument
ok 26 - git bisect run: args, stdout and stderr: "--log foo --no-log bar" arguments
ok 27 - git bisect run: args, stdout and stderr: "--bisect-start" argument
ok 28 - git bisect run: negative exit code
ok 29 - git bisect run: unable to verify on good
ok 30 - "git bisect run" simple case
ok 31 - "git bisect run" simple case
ok 32 - "git bisect run" with more complex "git bisect start"
ok 33 - bisect run accepts exit code 126 as bad
ok 34 - bisect run fails with non-executable test script
ok 35 - bisect run accepts exit code 127 as bad
ok 36 - bisect run fails with missing test script
ok 37 - bisect skip: add line and then a new test
ok 38 - bisect skip and bisect replay
ok 39 - bisect run & skip: cannot tell between 2
ok 40 - bisect run & skip: find first bad
ok 41 - bisect skip only one range
ok 42 - bisect skip many ranges
ok 43 - bisect starting with a detached HEAD
ok 44 - bisect errors out if bad and good are mistaken
ok 45 - bisect does not create a "bisect" branch
ok 46 - side branch creation
ok 47 - good merge base when good and bad are siblings
ok 48 - skipped merge base when good and bad are siblings
ok 49 - bad merge base when good and bad are siblings
ok 50 - many merge bases creation
ok 51 - "git bisect run --first-parent" simple case
ok 52 - good merge bases when good and bad are siblings
ok 53 - optimized merge base checks
ok 54 - "parallel" side branch creation
ok 55 - restricting bisection on one dir
ok 56 - restricting bisection on one dir and a file
ok 57 - skipping away from skipped commit
ok 58 - erroring out when using bad path arguments
ok 59 - test bisection on bare repo - --no-checkout specified
ok 60 - test bisection on bare repo - --no-checkout defaulted
ok 61 - broken branch creation
ok 62 - bisect fails if tree is broken on start commit
ok 63 - bisect fails if tree is broken on trial commit
ok 64 - bisect: --no-checkout - start commit bad
ok 65 - bisect: --no-checkout - trial commit bad
ok 66 - bisect: --no-checkout - target before breakage
ok 67 - bisect: --no-checkout - target in breakage
ok 68 - bisect: --no-checkout - target after breakage
ok 69 - bisect: demonstrate identification of damage boundary
ok 70 - bisect log: successful result
ok 71 - bisect log: only skip commits left
ok 72 - "git bisect bad HEAD" behaves as "git bisect bad"
ok 73 - bisect starts with only one new
ok 74 - bisect does not start with only one old
ok 75 - bisect start with one new and old
ok 76 - bisect replay with old and new
ok 77 - bisect replay with CRLF log
ok 78 - bisect cannot mix old/new and good/bad
ok 79 - bisect terms needs 0 or 1 argument
ok 80 - bisect terms shows good/bad after start
ok 81 - bisect start with one term1 and term2
ok 82 - bogus command does not start bisect
ok 83 - bisect replay with term1 and term2
ok 84 - bisect start term1 term2
ok 85 - bisect cannot mix terms
ok 86 - bisect terms rejects invalid terms
ok 87 - bisect start --term-* does store terms
ok 88 - bisect start takes options and revs in any order
ok 89 - bisect skip works with --term*
ok 90 - git bisect reset cleans bisection state properly
ok 91 - bisect handles annotated tags
ok 92 - bisect run fails with exit code equals or greater than 128
ok 93 - bisect visualize with a filename with dash and space
ok 94 - bisect state output with multiple good commits
ok 95 - bisect state output with bad commit
ok 96 - verify correct error message
# passed all 96 test(s)
1..96
*** t6040-tracking-info.sh ***
ok 1 - setup
ok 2 - branch -v
ok 3 - branch -vv
ok 4 - checkout (diverged from upstream)
ok 5 - checkout with local tracked branch
ok 6 - checkout (upstream is gone)
ok 7 - checkout (up-to-date with upstream)
ok 8 - status (diverged from upstream)
ok 9 - status (upstream is gone)
ok 10 - status (up-to-date with upstream)
ok 11 - status -s -b (diverged from upstream)
ok 12 - status -s -b --no-ahead-behind (diverged from upstream)
ok 13 - status.aheadbehind=false status -s -b (diverged from upstream)
ok 14 - status --long --branch
ok 15 - status --long --branch
ok 16 - status --long --branch --no-ahead-behind
ok 17 - status.aheadbehind=false status --long --branch
ok 18 - status -s -b (upstream is gone)
ok 19 - status -s -b (up-to-date with upstream)
ok 20 - fail to track lightweight tags
ok 21 - fail to track annotated tags
ok 22 - --set-upstream-to does not change branch
ok 23 - --set-upstream-to @{-1}
# passed all 23 test(s)
1..23
*** t6041-bisect-submodule.sh ***
ok 1 - git_bisect: added submodule creates empty directory
ok 2 - git_bisect: added submodule leaves existing empty directory alone
ok 3 - git_bisect: replace tracked file with submodule creates empty directory
ok 4 - git_bisect: replace directory with submodule
ok 5 - git_bisect: removed submodule leaves submodule directory and its contents in place
ok 6 - git_bisect: removed submodule leaves submodule containing a .git directory alone
ok 7 - git_bisect: replace submodule with a directory must fail
ok 8 - git_bisect: replace submodule containing a .git directory with a directory must fail
not ok 9 - git_bisect: replace submodule with a file must fail # TODO known breakage
not ok 10 - git_bisect: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - git_bisect: modified submodule does not update submodule work tree
ok 12 - git_bisect: modified submodule does not update submodule work tree to invalid commit
ok 13 - git_bisect: modified submodule does not update submodule work tree from invalid commit
ok 14 - git_bisect: added submodule doesn't remove untracked unignored file with same name
# still have 2 known breakage(s)
# passed all remaining 12 test(s)
1..14
*** t6050-replace.sh ***
ok 1 - set up buggy branch
ok 2 - replace the author
ok 3 - test --no-replace-objects option
ok 4 - test GIT_NO_REPLACE_OBJECTS env variable
ok 5 - test core.usereplacerefs config option
ok 6 - tag replaced commit
ok 7 - "git fsck" works
ok 8 - repack, clone and fetch work
ok 9 - "git replace" listing and deleting
ok 10 - "git replace" replacing
ok 11 - "git replace" resolves sha1
ok 12 - create parallel branch without the bug
ok 13 - push to cloned repo
ok 14 - push branch with replacement
ok 15 - fetch branch with replacement
ok 16 - bisect and replacements
ok 17 - index-pack and replacements
ok 18 - not just commits
ok 19 - replaced and replacement objects must be of the same type
ok 20 - -f option bypasses the type check
ok 21 - git cat-file --batch works on replace objects
ok 22 - test --format bogus
ok 23 - test --format short
ok 24 - test --format medium
ok 25 - test --format long
ok 26 - setup fake editors
ok 27 - --edit with and without already replaced object
ok 28 - --edit and change nothing or command failed
ok 29 - replace ref cleanup
ok 30 - --graft with and without already replaced object
ok 31 - --graft using a tag as the new parent
ok 32 - --graft using a tag as the replaced object
ok 33 # skip set up a signed commit (missing GPG)
ok 34 # skip --graft with a signed commit (missing GPG)
ok 35 # skip set up a merge commit with a mergetag (missing GPG)
ok 36 # skip --graft on a commit with a mergetag (missing GPG)
ok 37 - --convert-graft-file
# passed all 37 test(s)
1..37
*** t6060-merge-index.sh ***
ok 1 - setup diverging branches
ok 2 - read-tree does not resolve content merge
ok 3 - git merge-index git-merge-one-file resolves
ok 4 - setup bare merge
ok 5 - merge-one-file fails without a work tree
ok 6 - merge-one-file respects GIT_WORK_TREE
ok 7 - merge-one-file respects core.worktree
# passed all 7 test(s)
1..7
*** t6100-rev-list-in-order.sh ***
ok 1 - setup a commit history with trees, blobs
ok 2 - rev-list --in-commit-order
ok 3 - rev-list lists blobs and trees after commits
# passed all 3 test(s)
1..3
*** t6101-rev-parse-parents.sh ***
ok 1 - setup
ok 2 - start is valid
ok 3 - start^0
ok 4 - start^1 not valid
ok 5 - second^1 = second^
ok 6 - final^1^1^1
ok 7 - final^1^1^1 = final^^^
ok 8 - final^1^2
ok 9 - final^1^2 != final^1^1
ok 10 - final^1^3 not valid
ok 11 - --verify start2^1
ok 12 - --verify start2^0
ok 13 - final^1^@ = final^1^1 final^1^2
ok 14 - symbolic final^1^@ = final^1^1 final^1^2
ok 15 - final^1^! = final^1 ^final^1^1 ^final^1^2
ok 16 - symbolic final^1^! = final^1 ^final^1^1 ^final^1^2
ok 17 - large graft octopus
ok 18 - repack for next test
ok 19 - short SHA-1 works
ok 20 - setup for rev^- tests
ok 21 - rev-list --count merge^- = merge^..merge
ok 22 - rev-parse merge^- = merge^..merge
ok 23 - rev-parse merge^-1 = merge^..merge
ok 24 - rev-parse merge^-2 = merge^2..merge
ok 25 - symbolic merge^-1 = merge^1..merge
ok 26 - rev-parse merge^-0 (invalid parent)
ok 27 - rev-parse merge^-3 (invalid parent)
ok 28 - rev-parse merge^-^ (garbage after ^-)
ok 29 - rev-parse merge^-1x (garbage after ^-1)
ok 30 - rev-list merge^- = merge^..merge
ok 31 - rev-list merge^-1 = merge^1..merge
ok 32 - rev-list merge^-2 = merge^2..merge
ok 33 - rev-list merge^-0 (invalid parent)
ok 34 - rev-list merge^-3 (invalid parent)
ok 35 - rev-list merge^-^ (garbage after ^-)
ok 36 - rev-list merge^-1x (garbage after ^-1)
ok 37 - rev-parse $garbage^@ does not segfault
ok 38 - rev-parse $garbage...$garbage does not segfault
# passed all 38 test(s)
1..38
*** t6102-rev-list-unexpected-objects.sh ***
ok 1 - setup well-formed objects
ok 2 - setup unexpected non-blob entry
ok 3 - TODO (should fail!): traverse unexpected non-blob entry (lone)
ok 4 - traverse unexpected non-blob entry (seen)
ok 5 - setup unexpected non-tree entry
ok 6 - traverse unexpected non-tree entry (lone)
ok 7 - traverse unexpected non-tree entry (seen)
ok 8 - setup unexpected non-commit parent
ok 9 - traverse unexpected non-commit parent (lone)
ok 10 - traverse unexpected non-commit parent (seen)
ok 11 - setup unexpected non-tree root
ok 12 - traverse unexpected non-tree root (lone)
ok 13 - traverse unexpected non-tree root (seen)
ok 14 - setup unexpected non-commit tag
ok 15 - traverse unexpected non-commit tag (lone)
ok 16 - traverse unexpected non-commit tag (seen)
ok 17 - setup unexpected non-tree tag
ok 18 - traverse unexpected non-tree tag (lone)
ok 19 - traverse unexpected non-tree tag (seen)
ok 20 - setup unexpected non-blob tag
ok 21 - traverse unexpected non-blob tag (lone)
ok 22 - traverse unexpected non-blob tag (seen)
# passed all 22 test(s)
1..22
*** t6110-rev-list-sparse.sh ***
ok 1 - setup
ok 2 - rev-list --first-parent --boundary
# passed all 2 test(s)
1..2
*** t6111-rev-list-treesame.sh ***
ok 1 - setup
ok 2 - log 
ok 3 - log 
ok 4 - log --topo-order
ok 5 - log -- file
ok 6 - log --parents -- file
ok 7 - log --full-history -- file
ok 8 - log --full-history --parents -- file
ok 9 - log --simplify-merges -- file
ok 10 - log --first-parent
ok 11 - log --first-parent -- file
ok 12 - log F..M
ok 13 - log F..M --topo-order
ok 14 - log F..M -- file
ok 15 - log --parents F..M -- file
ok 16 - log F..M --full-history -- file
ok 17 - log F..M --full-history --parents -- file
ok 18 - log F..M --simplify-merges -- file
ok 19 - log F..M --ancestry-path
ok 20 - log F..M --ancestry-path -- file
ok 21 - log F..M --ancestry-path --parents -- file
ok 22 - log F..M --ancestry-path --simplify-merges -- file
ok 23 - log F..M --first-parent
ok 24 - log F..M --first-parent -- file
ok 25 - log E..M --ancestry-path
ok 26 - log E..M --ancestry-path -- file
ok 27 - log E..M --ancestry-path --parents -- file
ok 28 - log E..M --ancestry-path --simplify-merges -- file
ok 29 - log G..M
ok 30 - log G..M --topo-order
ok 31 - log G..M -- file
ok 32 - log G..M --parents -- file
ok 33 - log G..M --full-history -- file
ok 34 - log G..M --full-history --parents -- file
ok 35 - log G..M --simplify-merges -- file
ok 36 - log G..M --ancestry-path
ok 37 - log G..M --ancestry-path -- file
ok 38 - log G..M --ancestry-path --parents -- file
ok 39 - log G..M --ancestry-path --simplify-merges -- file
ok 40 - log B..F
ok 41 - log B..F -- file
ok 42 - log B..F --parents -- file
ok 43 - log B..F --full-history -- file
ok 44 - log B..F --full-history --parents -- file
ok 45 - log B..F --simplify-merges -- file
ok 46 - log B..F --ancestry-path
ok 47 - log B..F --ancestry-path -- file
ok 48 - log B..F --ancestry-path --parents -- file
ok 49 - log B..F --ancestry-path --simplify-merges -- file
ok 50 - log B..F --first-parent
ok 51 - log B..F --first-parent -- file
ok 52 - log E F ^B -- file
ok 53 - log E...F -- file
ok 54 - log C..F
ok 55 - log C..F -- file
ok 56 - log C..F --parents -- file
ok 57 - log C..F --full-history -- file
ok 58 - log C..F --full-history --parents -- file
ok 59 - log C..F --simplify-merges -- file
ok 60 - log C..F --ancestry-path
ok 61 - log C..F --ancestry-path -- file
ok 62 - log C..F --ancestry-path --parents -- file
ok 63 - log C..F --ancestry-path --simplify-merges -- file
ok 64 - log C..F --first-parent
ok 65 - log C..F --first-parent -- file
# passed all 65 test(s)
1..65
*** t6112-rev-list-filters-objects.sh ***
ok 1 - setup r1
ok 2 - verify blob:none omits all 5 blobs
ok 3 - specify blob explicitly prevents filtering
ok 4 - verify emitted+omitted == all
ok 5 - setup r2
ok 6 - verify blob:limit=500 omits all blobs
ok 7 - verify emitted+omitted == all
ok 8 - verify blob:limit=1000
ok 9 - verify blob:limit=1001
ok 10 - verify blob:limit=1k
ok 11 - verify blob:limit=1m
ok 12 - setup object-type
ok 13 - verify object:type= fails with invalid type
ok 14 - verify object:type=blob prints blob and commit
ok 15 - verify object:type=tree prints tree and commit
ok 16 - verify object:type=commit prints commit
ok 17 - verify object:type=tag prints tag
ok 18 - verify object:type=blob prints only blob with --filter-provided-objects
ok 19 - verify object:type=tree prints only tree with --filter-provided-objects
ok 20 - verify object:type=commit prints only commit with --filter-provided-objects
ok 21 - verify object:type=tag prints only tag with --filter-provided-objects
ok 22 - setup r3
ok 23 - verify sparse:path=pattern1 fails
ok 24 - verify sparse:path=pattern2 fails
ok 25 - setup r3 part 2
ok 26 - verify sparse:oid=OID omits top-level files
ok 27 - verify sparse:oid=oid-ish omits top-level files
ok 28 - rev-list W/ --missing=print and --missing=allow-any for trees
ok 29 - verify tree:0 includes trees in "filtered" output
ok 30 - verify skipping tree iteration when not collecting omits
ok 31 - verify tree:1 includes root trees
ok 32 - verify tree:2 includes root trees and immediate children
ok 33 - verify tree:3 includes everything expected
ok 34 - combine:... for a simple combination
ok 35 - combine:... with URL encoding
ok 36 - combine:... while URL-encoding things that should not be
ok 37 - combine: with nothing after the :
ok 38 - parse error in first sub-filter in combine:
ok 39 - combine:... with non-encoded reserved chars
ok 40 - validate err msg for "combine:<valid-filter>+"
ok 41 - combine:... with edge-case hex digits: Ff Aa 0 9
ok 42 - add sparse pattern blobs whose paths have reserved chars
ok 43 - combine:... with more than two sub-filters
ok 44 - setup r4
ok 45 - test tree:# filter provisional omit for blob and tree
ok 46 - verify skipping tree iteration when collecting omits
ok 47 - setup r5
ok 48 - verify collecting omits in combined: filter
ok 49 - tree:<depth> where we iterate over tree at two levels
ok 50 - tree:<depth> which filters out blob but given as arg
ok 51 - rev-list W/ --missing=print
ok 52 - rev-list W/O --missing fails
ok 53 - rev-list W/ missing=allow-any
ok 54 - expand blob limit in protocol
# passed all 54 test(s)
1..54
*** t6113-rev-list-bitmap-filters.sh ***
ok 1 - set up bitmapped repo
ok 2 - filters fallback to non-bitmap traversal
ok 3 - blob:none filter
ok 4 - blob:none filter with specified blob
ok 5 - blob:limit filter
ok 6 - blob:limit filter with specified blob
ok 7 - tree:0 filter
ok 8 - tree:0 filter with specified blob, tree
ok 9 - tree:1 filter
ok 10 - object:type filter
ok 11 - object:type filter with --filter-provided-objects
ok 12 - combine filter
ok 13 - combine filter with --filter-provided-objects
ok 14 - bitmap traversal with --unpacked
# passed all 14 test(s)
1..14
*** t6114-keep-packs.sh ***
ok 1 - setup
ok 2 - --no-kept-objects excludes trees and blobs in .keep packs
ok 3 - --no-kept-objects excludes kept non-MIDX object
# passed all 3 test(s)
1..3
*** t6115-rev-list-du.sh ***
ok 1 - set up repository
ok 2 - generate expected size (HEAD)
ok 3 - rev-list --disk-usage without bitmaps (HEAD)
ok 4 - rev-list --disk-usage with bitmaps (HEAD)
ok 5 - generate expected size (--objects HEAD)
ok 6 - rev-list --disk-usage without bitmaps (--objects HEAD)
ok 7 - rev-list --disk-usage with bitmaps (--objects HEAD)
ok 8 - generate expected size (--objects HEAD^..HEAD)
ok 9 - rev-list --disk-usage without bitmaps (--objects HEAD^..HEAD)
ok 10 - rev-list --disk-usage with bitmaps (--objects HEAD^..HEAD)
ok 11 - setup for --unpacked tests
ok 12 - generate expected size (--all --objects --unpacked)
ok 13 - rev-list --disk-usage without bitmaps (--all --objects --unpacked)
ok 14 - rev-list --disk-usage with bitmaps (--all --objects --unpacked)
ok 15 - rev-list --disk-usage=human
ok 16 - rev-list --disk-usage=human with bitmaps
ok 17 - rev-list use --disk-usage unproperly
# passed all 17 test(s)
1..17
*** t6120-describe.sh ***
ok 1 - setup
ok 2 - describe HEAD
ok 3 - describe HEAD^
ok 4 - describe HEAD^^
ok 5 - describe HEAD^^2
ok 6 - describe HEAD^^2^
ok 7 - describe HEAD^^^
ok 8 - describe --tags HEAD
ok 9 - describe --tags HEAD^
ok 10 - describe --tags HEAD^^
ok 11 - describe --tags HEAD^^2
ok 12 - describe --tags HEAD^^2^
ok 13 - describe --tags HEAD^^^
ok 14 - describe --tags --exact-match HEAD^^^
ok 15 - describe --all HEAD
ok 16 - describe --all HEAD^
ok 17 - describe --all HEAD^^^
ok 18 - describe --long HEAD^^2^
ok 19 - describe --long HEAD^^2
ok 20 - describe --tags
ok 21 - describe --first-parent --tags
ok 22 - describe --tags --no-exact-match HEAD
ok 23 - describe --first-parent --tags --no-exact-match HEAD
ok 24 - --exact-match failure
ok 25 - describe --contains defaults to HEAD without commit-ish
ok 26 - describe --all A^0
ok 27 - renaming tag A to Q locally produces a warning
ok 28 - misnamed annotated tag forces long output
ok 29 - abbrev=0 will not break misplaced tag (1)
ok 30 - abbrev=0 will not break misplaced tag (2)
ok 31 - rename tag Q back to A
ok 32 - pack tag refs
ok 33 - describe HEAD
ok 34 - describe works from outside repo using --git-dir
ok 35 - describe --dirty
ok 36 - describe --dirty with --work-tree
ok 37 - set-up dirty work tree
ok 38 - describe --dirty with --work-tree (dirty)
ok 39 - describe --dirty=.mod with --work-tree (dirty)
ok 40 - describe --dirty HEAD
ok 41 - set-up matching pattern tests
ok 42 - describe --match=test-*
ok 43 - describe --tags --match=test1-*
ok 44 - describe --tags --match=test2-*
ok 45 - describe --long --tags --match=test2-* HEAD^
ok 46 - describe --long --tags --match=test1-* --match=test2-* HEAD^
ok 47 - describe --long --tags --match=test1-* --no-match --match=test2-* HEAD^
ok 48 - describe --long --tags --match=test1-* --match=test3-* HEAD
ok 49 - describe --long --tags --match=test3-* --match=test1-* HEAD
ok 50 - set-up branches
ok 51 - describe --all --match=branch_* --exclude=branch_C HEAD
ok 52 - describe --all --match=origin/remote_branch_* --exclude=origin/remote_branch_C HEAD
ok 53 - describe --all test-annotated~1
ok 54 - --match does not work for other types
ok 55 - --exclude does not work for other types
ok 56 - name-rev with exact tags
ok 57 - name-rev --all
ok 58 - name-rev --annotate-stdin
ok 59 - name-rev --stdin deprecated
ok 60 - describe --contains with the exact tags
ok 61 - describe --contains and --match
ok 62 - describe --exclude
ok 63 - describe --contains and --no-match
ok 64 - setup and absorb a submodule
ok 65 - describe chokes on severely broken submodules
ok 66 - describe ignoring a broken submodule
ok 67 - describe with --work-tree ignoring a broken submodule
ok 68 - describe a blob at a directly tagged commit
ok 69 - describe a blob with its first introduction
ok 70 - describe directly tagged blob
ok 71 - describe tag object
ok 72 - name-rev works in a deep repo
ok 73 - describe works in a deep repo
ok 74 - describe --all A
ok 75 - describe --all c
ok 76 - describe --all --match=branch_* branch_A
ok 77 - describe complains about tree object
ok 78 - describe complains about missing object
ok 79 - name-rev a rev shortly after epoch
ok 80 - name-rev covers all conditions while looking at parents
ok 81 - non-monotonic commit dates setup
ok 82 - name-rev with commitGraph handles non-monotonic timestamps
ok 83 - name-rev --all works with non-monotonic timestamps
ok 84 - name-rev --annotate-stdin works with non-monotonic timestamps
ok 85 - name-rev --all works with commitGraph
ok 86 - name-rev --annotate-stdin works with commitGraph
ok 87 - setup: describe commits with disjoint bases
ok 88 - describe HEAD
ok 89 - setup: describe commits with disjoint bases 2
ok 90 - describe HEAD
ok 91 - setup misleading taggerdates
ok 92 - describe --contains unique-file~2
# passed all 92 test(s)
1..92
*** t6130-pathspec-noglob.sh ***
ok 1 - create commits with glob characters
ok 2 - vanilla pathspec matches literally
ok 3 - star pathspec globs
ok 4 - star pathspec globs
ok 5 - bracket pathspec globs and matches literal brackets
ok 6 - bracket pathspec globs and matches literal brackets
ok 7 - no-glob option matches literally (vanilla)
ok 8 - no-glob option matches literally (vanilla)
ok 9 - no-glob option matches literally (star)
ok 10 - no-glob option matches literally (star)
ok 11 - no-glob option matches literally (bracket)
ok 12 - no-glob option matches literally (bracket)
ok 13 - no-glob option disables :(literal)
ok 14 - no-glob environment variable works
ok 15 - blame takes global pathspec flags
ok 16 - setup xxx/bar
ok 17 - **/ works with :(glob)
ok 18 - **/ does not work with --noglob-pathspecs
ok 19 - **/ works with :(glob) and --noglob-pathspecs
ok 20 - **/ works with --glob-pathspecs
ok 21 - **/ does not work with :(literal) and --glob-pathspecs
# passed all 21 test(s)
1..21
*** t6131-pathspec-icase.sh ***
ok 1 - create commits with glob characters
ok 2 - tree_entry_interesting matches bar
ok 3 - tree_entry_interesting matches :(icase)bar
ok 4 - tree_entry_interesting matches :(icase)bar with prefix
ok 5 - tree_entry_interesting matches :(icase)bar with empty prefix
ok 6 - match_pathspec matches :(icase)bar
ok 7 - match_pathspec matches :(icase)bar with prefix
ok 8 - match_pathspec matches :(icase)bar with empty prefix
ok 9 - "git diff" can take magic :(icase) pathspec
# passed all 9 test(s)
1..9
*** t6132-pathspec-exclude.sh ***
ok 1 - setup
ok 2 - exclude only pathspec uses default implicit pathspec
ok 3 - t_e_i() exclude sub
ok 4 - t_e_i() exclude sub/sub/file
ok 5 - t_e_i() exclude sub using mnemonic
ok 6 - t_e_i() exclude :(icase)SUB
ok 7 - t_e_i() exclude sub2 from sub
ok 8 - t_e_i() exclude sub/*file
ok 9 - t_e_i() exclude :(glob)sub/*/file
ok 10 - m_p_d() exclude sub
ok 11 - m_p_d() exclude sub/sub/file
ok 12 - m_p_d() exclude sub using mnemonic
ok 13 - m_p_d() exclude :(icase)SUB
ok 14 - m_p_d() exclude sub2 from sub
ok 15 - m_p_d() exclude sub/*file
ok 16 - m_p_d() exclude :(glob)sub/*/file
ok 17 - multiple exclusions
ok 18 - t_e_i() exclude case #8
ok 19 - grep --untracked PATTERN
ok 20 - grep --untracked PATTERN :(exclude)DIR
ok 21 - grep --untracked PATTERN :(exclude)*FILE
ok 22 - archive with all negative
ok 23 - add with all negative
ok 24 - add -p with all negative
ok 25 - clean with all negative
ok 26 - commit with all negative
ok 27 - reset with all negative
ok 28 - grep with all negative
ok 29 - ls-files with all negative
ok 30 - rm with all negative
ok 31 - stash with all negative
# passed all 31 test(s)
1..31
*** t6133-pathspec-rev-dwim.sh ***
ok 1 - setup
ok 2 - non-rev wildcard dwims to pathspec
ok 3 - tree:path with metacharacters dwims to rev
ok 4 - ^{foo} with metacharacters dwims to rev
ok 5 - @{foo} with metacharacters dwims to rev
ok 6 - :/*.t from a subdir dwims to a pathspec
# passed all 6 test(s)
1..6
*** t6134-pathspec-in-submodule.sh ***
ok 1 - setup a submodule
ok 2 - error message for path inside submodule
ok 3 - error message for path inside submodule from within submodule
# passed all 3 test(s)
1..3
*** t6135-pathspec-with-attrs.sh ***
ok 1 - setup a tree
ok 2 - pathspec with no attr
ok 3 - pathspec with labels and non existent .gitattributes
ok 4 - pathspec with labels and non existent .gitattributes (2)
ok 5 - setup .gitattributes
ok 6 - setup .gitignore
ok 7 - check specific set attr
ok 8 - check set attr with pathspec pattern
ok 9 - check specific set attr in tree-ish
ok 10 - check specific set attr with pathspec pattern in tree-ish
ok 11 - check specific unset attr
ok 12 - check specific unset attr (2)
ok 13 - check specific value attr
ok 14 - check specific value attr (2)
ok 15 - check unspecified attr
ok 16 - check unspecified attr (2)
ok 17 - check multiple unspecified attr
ok 18 - check label with more labels but excluded path
ok 19 - check label excluding other labels
ok 20 - fail on multiple attr specifiers in one pathspec item
ok 21 - fail if attr magic is used in places not implemented
ok 22 - check that attr magic works for git stash push
ok 23 - check that attr magic works for git add --all
ok 24 - check that attr magic works for git add -u
ok 25 - check that attr magic works for git add <path>
ok 26 - check that attr magic works for git -add .
ok 27 - check that attr magic works for git add --pathspec-from-file
ok 28 - abort on giving invalid label on the command line
ok 29 - abort on asking for wrong magic
ok 30 - check attribute list
ok 31 - backslash cannot be the last character
ok 32 - backslash cannot be used as a value
ok 33 - reading from .gitattributes in a subdirectory (1)
ok 34 - reading from .gitattributes in a subdirectory (2)
ok 35 - reading from .gitattributes in a subdirectory (3)
ok 36 - pathspec with builtin_objectmode attr can be used
ok 37 - builtin_objectmode attr can be excluded
# passed all 37 test(s)
1..37
*** t6136-pathspec-in-bare.sh ***
ok 1 - setup a bare and non-bare repository
ok 2 - log and ls-files in a bare repository
ok 3 - log and ls-files in .git directory
# passed all 3 test(s)
1..3
*** t6200-fmt-merge-msg.sh ***
ok 1 - setup
ok 2 # skip set up a signed tag (missing GPG)
ok 3 - created ssh signed commit and tag
ok 4 - create signed tags with keys having defined lifetimes
ok 5 - message for merging local branch
ok 6 # skip message for merging local tag signed by good key (missing GPG)
ok 7 # skip message for merging local tag signed by unknown key (missing GPG)
ok 8 - message for merging local tag signed by good ssh key
ok 9 - message for merging local tag signed by unknown ssh key
ok 10 - message for merging local tag signed by expired ssh key
ok 11 - message for merging local tag signed by not yet valid ssh key
ok 12 - message for merging local tag signed by valid timeboxed ssh key
ok 13 - message for merging local tag signed by invalid timeboxed ssh key
ok 14 - message for merging external branch
ok 15 - [merge] summary/log configuration
ok 16 - setup FETCH_HEAD
ok 17 - merge.log=3 limits shortlog length
ok 18 - merge.log=5 shows all 5 commits
ok 19 - --log=5 with custom comment character
ok 20 - merge.log=0 disables shortlog
ok 21 - --log=3 limits shortlog length
ok 22 - --log=5 shows all 5 commits
ok 23 - --no-log disables shortlog
ok 24 - --log=0 disables shortlog
ok 25 - fmt-merge-msg -m
ok 26 - setup: expected shortlog for two branches
ok 27 - shortlog for two branches
ok 28 - merge-msg -F
ok 29 - merge-msg -F in subdirectory
ok 30 - merge-msg with nothing to merge
ok 31 - merge-msg tag
ok 32 - merge-msg two tags
ok 33 - merge-msg tag and branch
ok 34 - merge-msg lots of commits
ok 35 - merge-msg with "merging" an annotated tag
ok 36 - merge --into-name=<name>
ok 37 - merge.suppressDest configuration
# passed all 37 test(s)
1..37
*** t6300-for-each-ref.sh ***
ok 1 - setup
ok 2 - basic atom: refs/heads/main refname
ok 3 - basic atom: refs/heads/main refname:
ok 4 - basic atom: refs/heads/main refname:short
ok 5 - basic atom: refs/heads/main refname:lstrip=1
ok 6 - basic atom: refs/heads/main refname:lstrip=2
ok 7 - basic atom: refs/heads/main refname:lstrip=-1
ok 8 - basic atom: refs/heads/main refname:lstrip=-2
ok 9 - basic atom: refs/heads/main refname:rstrip=1
ok 10 - basic atom: refs/heads/main refname:rstrip=2
ok 11 - basic atom: refs/heads/main refname:rstrip=-1
ok 12 - basic atom: refs/heads/main refname:rstrip=-2
ok 13 - basic atom: refs/heads/main refname:strip=1
ok 14 - basic atom: refs/heads/main refname:strip=2
ok 15 - basic atom: refs/heads/main refname:strip=-1
ok 16 - basic atom: refs/heads/main refname:strip=-2
ok 17 - basic atom: refs/heads/main upstream
ok 18 - basic atom: refs/heads/main upstream:short
ok 19 - basic atom: refs/heads/main upstream:lstrip=2
ok 20 - basic atom: refs/heads/main upstream:lstrip=-2
ok 21 - basic atom: refs/heads/main upstream:rstrip=2
ok 22 - basic atom: refs/heads/main upstream:rstrip=-2
ok 23 - basic atom: refs/heads/main upstream:strip=2
ok 24 - basic atom: refs/heads/main upstream:strip=-2
ok 25 - basic atom: refs/heads/main push
ok 26 - basic atom: refs/heads/main push:short
ok 27 - basic atom: refs/heads/main push:lstrip=1
ok 28 - basic atom: refs/heads/main push:lstrip=-1
ok 29 - basic atom: refs/heads/main push:rstrip=1
ok 30 - basic atom: refs/heads/main push:rstrip=-1
ok 31 - basic atom: refs/heads/main push:strip=1
ok 32 - basic atom: refs/heads/main push:strip=-1
ok 33 - basic atom: refs/heads/main objecttype
ok 34 - basic atom: refs/heads/main objectsize
ok 35 - basic atom: refs/heads/main objectsize:disk
ok 36 - basic atom: refs/heads/main deltabase
ok 37 - basic atom: refs/heads/main objectname
ok 38 - basic atom: refs/heads/main objectname:short
ok 39 - basic atom: refs/heads/main objectname:short=1
ok 40 - basic atom: refs/heads/main objectname:short=10
ok 41 - basic atom: refs/heads/main tree
ok 42 - basic atom: refs/heads/main tree:short
ok 43 - basic atom: refs/heads/main tree:short=1
ok 44 - basic atom: refs/heads/main tree:short=10
ok 45 - basic atom: refs/heads/main parent
ok 46 - basic atom: refs/heads/main parent:short
ok 47 - basic atom: refs/heads/main parent:short=1
ok 48 - basic atom: refs/heads/main parent:short=10
ok 49 - basic atom: refs/heads/main numparent
ok 50 - basic atom: refs/heads/main object
ok 51 - basic atom: refs/heads/main type
ok 52 - basic atom: refs/heads/main raw
ok 53 - basic atom: refs/heads/main *objectname
ok 54 - basic atom: refs/heads/main *objecttype
ok 55 - basic atom: refs/heads/main author
ok 56 - basic atom: refs/heads/main authorname
ok 57 - basic atom: refs/heads/main authorname:mailmap
ok 58 - basic atom: refs/heads/main authoremail
ok 59 - basic atom: refs/heads/main authoremail:trim
ok 60 - basic atom: refs/heads/main authoremail:localpart
ok 61 - basic atom: refs/heads/main authoremail:trim,localpart
ok 62 - basic atom: refs/heads/main authoremail:mailmap
ok 63 - basic atom: refs/heads/main authoremail:mailmap,trim
ok 64 - basic atom: refs/heads/main authoremail:trim,mailmap
ok 65 - basic atom: refs/heads/main authoremail:mailmap,localpart
ok 66 - basic atom: refs/heads/main authoremail:localpart,mailmap
ok 67 - basic atom: refs/heads/main authoremail:mailmap,trim,localpart,mailmap,trim
ok 68 - basic atom: refs/heads/main authordate
ok 69 - basic atom: refs/heads/main committer
ok 70 - basic atom: refs/heads/main committername
ok 71 - basic atom: refs/heads/main committername:mailmap
ok 72 - basic atom: refs/heads/main committeremail
ok 73 - basic atom: refs/heads/main committeremail:trim
ok 74 - basic atom: refs/heads/main committeremail:localpart
ok 75 - basic atom: refs/heads/main committeremail:localpart,trim
ok 76 - basic atom: refs/heads/main committeremail:mailmap
ok 77 - basic atom: refs/heads/main committeremail:mailmap,trim
ok 78 - basic atom: refs/heads/main committeremail:trim,mailmap
ok 79 - basic atom: refs/heads/main committeremail:mailmap,localpart
ok 80 - basic atom: refs/heads/main committeremail:localpart,mailmap
ok 81 - basic atom: refs/heads/main committeremail:trim,mailmap,trim,trim,localpart
ok 82 - basic atom: refs/heads/main committerdate
ok 83 - basic atom: refs/heads/main tag
ok 84 - basic atom: refs/heads/main tagger
ok 85 - basic atom: refs/heads/main taggername
ok 86 - basic atom: refs/heads/main taggeremail
ok 87 - basic atom: refs/heads/main taggeremail:trim
ok 88 - basic atom: refs/heads/main taggeremail:localpart
ok 89 - basic atom: refs/heads/main taggerdate
ok 90 - basic atom: refs/heads/main creator
ok 91 - basic atom: refs/heads/main creatordate
ok 92 - basic atom: refs/heads/main subject
ok 93 - basic atom: refs/heads/main subject:sanitize
ok 94 - basic atom: refs/heads/main contents:subject
ok 95 - basic atom: refs/heads/main body
ok 96 - basic atom: refs/heads/main contents:body
ok 97 - basic atom: refs/heads/main contents:signature
ok 98 - basic atom: refs/heads/main contents
ok 99 - basic atom: refs/heads/main contents:size
ok 100 - basic atom: refs/heads/main HEAD
ok 101 - basic atom: refs/tags/testtag refname
ok 102 - basic atom: refs/tags/testtag refname:short
ok 103 - basic atom: refs/tags/testtag upstream
ok 104 - basic atom: refs/tags/testtag push
ok 105 - basic atom: refs/tags/testtag objecttype
ok 106 - basic atom: refs/tags/testtag objectsize
ok 107 - basic atom: refs/tags/testtag objectsize:disk
ok 108 - basic atom: refs/tags/testtag *objectsize:disk
ok 109 - basic atom: refs/tags/testtag deltabase
ok 110 - basic atom: refs/tags/testtag *deltabase
ok 111 - basic atom: refs/tags/testtag objectname
ok 112 - basic atom: refs/tags/testtag objectname:short
ok 113 - basic atom: refs/heads/main objectname:short=1
ok 114 - basic atom: refs/heads/main objectname:short=10
ok 115 - basic atom: refs/tags/testtag tree
ok 116 - basic atom: refs/tags/testtag tree:short
ok 117 - basic atom: refs/tags/testtag tree:short=1
ok 118 - basic atom: refs/tags/testtag tree:short=10
ok 119 - basic atom: refs/tags/testtag parent
ok 120 - basic atom: refs/tags/testtag parent:short
ok 121 - basic atom: refs/tags/testtag parent:short=1
ok 122 - basic atom: refs/tags/testtag parent:short=10
ok 123 - basic atom: refs/tags/testtag numparent
ok 124 - basic atom: refs/tags/testtag object
ok 125 - basic atom: refs/tags/testtag type
ok 126 - basic atom: refs/tags/testtag *objectname
ok 127 - basic atom: refs/tags/testtag *objecttype
ok 128 - basic atom: refs/tags/testtag author
ok 129 - basic atom: refs/tags/testtag authorname
ok 130 - basic atom: refs/tags/testtag authorname:mailmap
ok 131 - basic atom: refs/tags/testtag authoremail
ok 132 - basic atom: refs/tags/testtag authoremail:trim
ok 133 - basic atom: refs/tags/testtag authoremail:localpart
ok 134 - basic atom: refs/tags/testtag authoremail:trim,localpart
ok 135 - basic atom: refs/tags/testtag authoremail:mailmap
ok 136 - basic atom: refs/tags/testtag authoremail:mailmap,trim
ok 137 - basic atom: refs/tags/testtag authoremail:trim,mailmap
ok 138 - basic atom: refs/tags/testtag authoremail:mailmap,localpart
ok 139 - basic atom: refs/tags/testtag authoremail:localpart,mailmap
ok 140 - basic atom: refs/tags/testtag authoremail:mailmap,trim,localpart,mailmap,trim
ok 141 - basic atom: refs/tags/testtag authordate
ok 142 - basic atom: refs/tags/testtag committer
ok 143 - basic atom: refs/tags/testtag committername
ok 144 - basic atom: refs/tags/testtag committername:mailmap
ok 145 - basic atom: refs/tags/testtag committeremail
ok 146 - basic atom: refs/tags/testtag committeremail:trim
ok 147 - basic atom: refs/tags/testtag committeremail:localpart
ok 148 - basic atom: refs/tags/testtag committeremail:localpart,trim
ok 149 - basic atom: refs/tags/testtag committeremail:mailmap
ok 150 - basic atom: refs/tags/testtag committeremail:mailmap,trim
ok 151 - basic atom: refs/tags/testtag committeremail:trim,mailmap
ok 152 - basic atom: refs/tags/testtag committeremail:mailmap,localpart
ok 153 - basic atom: refs/tags/testtag committeremail:localpart,mailmap
ok 154 - basic atom: refs/tags/testtag committeremail:trim,mailmap,trim,trim,localpart
ok 155 - basic atom: refs/tags/testtag committerdate
ok 156 - basic atom: refs/tags/testtag tag
ok 157 - basic atom: refs/tags/testtag tagger
ok 158 - basic atom: refs/tags/testtag taggername
ok 159 - basic atom: refs/tags/testtag taggername:mailmap
ok 160 - basic atom: refs/tags/testtag taggeremail
ok 161 - basic atom: refs/tags/testtag taggeremail:trim
ok 162 - basic atom: refs/tags/testtag taggeremail:localpart
ok 163 - basic atom: refs/tags/testtag taggeremail:trim,localpart
ok 164 - basic atom: refs/tags/testtag taggeremail:mailmap
ok 165 - basic atom: refs/tags/testtag taggeremail:mailmap,trim
ok 166 - basic atom: refs/tags/testtag taggeremail:trim,mailmap
ok 167 - basic atom: refs/tags/testtag taggeremail:mailmap,localpart
ok 168 - basic atom: refs/tags/testtag taggeremail:localpart,mailmap
ok 169 - basic atom: refs/tags/testtag taggeremail:trim,mailmap,trim,localpart,localpart
ok 170 - basic atom: refs/tags/testtag taggerdate
ok 171 - basic atom: refs/tags/testtag creator
ok 172 - basic atom: refs/tags/testtag creatordate
ok 173 - basic atom: refs/tags/testtag subject
ok 174 - basic atom: refs/tags/testtag subject:sanitize
ok 175 - basic atom: refs/tags/testtag contents:subject
ok 176 - basic atom: refs/tags/testtag body
ok 177 - basic atom: refs/tags/testtag contents:body
ok 178 - basic atom: refs/tags/testtag contents:signature
ok 179 - basic atom: refs/tags/testtag contents
ok 180 - basic atom: refs/tags/testtag contents:size
ok 181 - basic atom: refs/tags/testtag HEAD
ok 182 - basic atom: refs/tags/testtag *raw
ok 183 - Check invalid atoms names are errors
ok 184 - Check format specifiers are ignored in naming date atoms
ok 185 - Check valid format specifiers for date fields
ok 186 - Check invalid format specifiers are errors
ok 187 - arguments to %(objectname:short=) must be positive integers
ok 188 - err basic atom: refs/heads/main authoremail:foo
ok 189 - err basic atom: refs/heads/main authoremail:mailmap,trim,bar
ok 190 - err basic atom: refs/heads/main authoremail:trim,
ok 191 - err basic atom: refs/heads/main authoremail:mailmaptrim
ok 192 - err basic atom: refs/heads/main committeremail: 
ok 193 - err basic atom: refs/heads/main committeremail: trim,foo
ok 194 - err basic atom: refs/heads/main committeremail:mailmap,localpart 
ok 195 - err basic atom: refs/heads/main committeremail:trim_localpart
ok 196 - err basic atom: refs/heads/main committeremail:localpart,,,trim
ok 197 - err basic atom: refs/tags/testtag taggeremail:mailmap,trim, foo 
ok 198 - err basic atom: refs/tags/testtag taggeremail:trim,localpart,
ok 199 - err basic atom: refs/tags/testtag taggeremail:mailmap;localpart trim
ok 200 - err basic atom: refs/tags/testtag taggeremail:localpart trim
ok 201 - err basic atom: refs/tags/testtag taggeremail:mailmap,mailmap,trim,qux,localpart,trim
ok 202 - Check unformatted date fields output
ok 203 - Check format "default" formatted date fields output
ok 204 - Check format "default-local" date fields output
ok 205 - Check format "relative" date fields output
ok 206 - Check format "relative-local" date fields output
ok 207 - Check format "short" date fields output
ok 208 - Check format "short-local" date fields output
ok 209 - Check format "local" date fields output
ok 210 - Check format "iso8601" date fields output
ok 211 - Check format "iso8601-local" date fields output
ok 212 - Check format "rfc2822" date fields output
ok 213 - Check format "rfc2822-local" date fields output
ok 214 - Check format "raw" date fields output
ok 215 - Check format "raw-local" date fields output
ok 216 - Check format of strftime date fields
ok 217 - Check format of strftime-local date fields
ok 218 - exercise strftime with odd fields
ok 219 - Verify ascending sort
ok 220 - Verify descending sort
ok 221 - Give help even with invalid sort atoms
ok 222 - exercise patterns with prefixes
ok 223 - exercise glob patterns with prefixes
ok 224 - exercise patterns with prefix exclusions
ok 225 - exercise patterns with pattern exclusions
ok 226 - Quoting style: shell
ok 227 - Quoting style: perl
ok 228 - Quoting style: python
ok 229 - Quoting style: tcl
ok 230 - more than one quoting style: --perl --shell
ok 231 - more than one quoting style: -s --python
ok 232 - more than one quoting style: --python --tcl
ok 233 - more than one quoting style: --tcl --perl
ok 234 - setup for upstream:track[short]
ok 235 - basic atom: refs/heads/main upstream:track
ok 236 - basic atom: refs/heads/main upstream:trackshort
ok 237 - basic atom: refs/heads/main upstream:track,nobracket
ok 238 - basic atom: refs/heads/main upstream:nobracket,track
ok 239 - setup for push:track[short]
ok 240 - basic atom: refs/heads/main push:track
ok 241 - basic atom: refs/heads/main push:trackshort
ok 242 - Check that :track[short] cannot be used with other atoms
ok 243 - Check that :track[short] works when upstream is invalid
ok 244 - Check for invalid refname format
ok 245 - set up color tests
ok 246 - %(color) shows color with a tty
ok 247 - %(color) does not show color without tty
ok 248 - --color can override tty check
ok 249 - color.ui=always does not override tty check
ok 250 - setup for describe atom tests
ok 251 - describe atom vs git describe
ok 252 - describe:tags vs describe --tags
ok 253 - describe:abbrev=... vs describe --abbrev=...
ok 254 - describe:match=... vs describe --match ...
ok 255 - describe:exclude:... vs describe --exclude ...
ok 256 - deref with describe atom
ok 257 - err on bad describe atom arg
ok 258 - Check ambiguous head and tag refs (strict)
ok 259 - Check ambiguous head and tag refs (loose)
ok 260 - Check ambiguous head and tag refs II (loose)
ok 261 - create tag without tagger
ok 262 - basic atom: refs/tags/taggerless type
ok 263 - basic atom: refs/tags/taggerless tag
ok 264 - basic atom: refs/tags/taggerless tagger
ok 265 - basic atom: refs/tags/taggerless taggername
ok 266 - basic atom: refs/tags/taggerless taggeremail
ok 267 - basic atom: refs/tags/taggerless taggeremail:trim
ok 268 - basic atom: refs/tags/taggerless taggeremail:localpart
ok 269 - basic atom: refs/tags/taggerless taggerdate
ok 270 - basic atom: refs/tags/taggerless committer
ok 271 - basic atom: refs/tags/taggerless committername
ok 272 - basic atom: refs/tags/taggerless committeremail
ok 273 - basic atom: refs/tags/taggerless committeremail:trim
ok 274 - basic atom: refs/tags/taggerless committeremail:localpart
ok 275 - basic atom: refs/tags/taggerless committerdate
ok 276 - basic atom: refs/tags/taggerless subject
ok 277 - an unusual tag with an incomplete line
ok 278 - create tag with subject and body content
ok 279 - basic atom: refs/tags/subject-body subject
ok 280 - basic atom: refs/tags/subject-body subject:sanitize
ok 281 - basic atom: refs/tags/subject-body body
ok 282 - basic atom: refs/tags/subject-body contents
ok 283 - basic atom: refs/tags/subject-body contents:size
ok 284 - create tag with multiline subject
ok 285 - basic atom: refs/tags/multiline subject
ok 286 - basic atom: refs/tags/multiline subject:sanitize
ok 287 - basic atom: refs/tags/multiline contents:subject
ok 288 - basic atom: refs/tags/multiline body
ok 289 - basic atom: refs/tags/multiline contents:body
ok 290 - basic atom: refs/tags/multiline contents:signature
ok 291 - basic atom: refs/tags/multiline contents
ok 292 - basic atom: refs/tags/multiline contents:size
ok 293 # skip create signed tags (missing GPG)
ok 294 # skip basic atom: refs/tags/signed-empty subject (missing GPG)
ok 295 # skip basic atom: refs/tags/signed-empty subject:sanitize (missing GPG)
ok 296 # skip basic atom: refs/tags/signed-empty contents:subject (missing GPG)
ok 297 # skip basic atom: refs/tags/signed-empty body (missing GPG)
ok 298 # skip basic atom: refs/tags/signed-empty contents:body (missing GPG)
ok 299 # skip basic atom: refs/tags/signed-empty contents:signature (missing GPG)
ok 300 # skip basic atom: refs/tags/signed-empty contents (missing GPG)
ok 301 # skip basic atom: refs/tags/signed-empty contents:size (missing GPG)
ok 302 # skip basic atom: refs/tags/signed-empty raw (missing GPG)
ok 303 # skip basic atom: refs/tags/signed-short subject (missing GPG)
ok 304 # skip basic atom: refs/tags/signed-short subject:sanitize (missing GPG)
ok 305 # skip basic atom: refs/tags/signed-short contents:subject (missing GPG)
ok 306 # skip basic atom: refs/tags/signed-short body (missing GPG)
ok 307 # skip basic atom: refs/tags/signed-short contents:body (missing GPG)
ok 308 # skip basic atom: refs/tags/signed-short contents:signature (missing GPG)
ok 309 # skip basic atom: refs/tags/signed-short contents (missing GPG)
ok 310 # skip basic atom: refs/tags/signed-short contents:size (missing GPG)
ok 311 # skip basic atom: refs/tags/signed-short raw (missing GPG)
ok 312 # skip basic atom: refs/tags/signed-long subject (missing GPG)
ok 313 # skip basic atom: refs/tags/signed-long subject:sanitize (missing GPG)
ok 314 # skip basic atom: refs/tags/signed-long contents:subject (missing GPG)
ok 315 # skip basic atom: refs/tags/signed-long body (missing GPG)
ok 316 # skip basic atom: refs/tags/signed-long contents:body (missing GPG)
ok 317 # skip basic atom: refs/tags/signed-long contents:signature (missing GPG)
ok 318 # skip basic atom: refs/tags/signed-long contents (missing GPG)
ok 319 # skip basic atom: refs/tags/signed-long contents:size (missing GPG)
ok 320 # skip basic atom: refs/tags/signed-long raw (missing GPG)
ok 321 - set up refs pointing to tree and blob
ok 322 # skip basic atom: refs/mytrees/first subject (missing GPG)
ok 323 # skip basic atom: refs/mytrees/first contents:subject (missing GPG)
ok 324 # skip basic atom: refs/mytrees/first body (missing GPG)
ok 325 # skip basic atom: refs/mytrees/first contents:body (missing GPG)
ok 326 # skip basic atom: refs/mytrees/first contents:signature (missing GPG)
ok 327 # skip basic atom: refs/mytrees/first contents (missing GPG)
ok 328 # skip basic atom: refs/mytrees/first contents:size (missing GPG)
ok 329 - basic atom: refs/mytrees/first raw
ok 330 # skip basic atom: refs/myblobs/first subject (missing GPG)
ok 331 # skip basic atom: refs/myblobs/first contents:subject (missing GPG)
ok 332 # skip basic atom: refs/myblobs/first body (missing GPG)
ok 333 # skip basic atom: refs/myblobs/first contents:body (missing GPG)
ok 334 # skip basic atom: refs/myblobs/first contents:signature (missing GPG)
ok 335 # skip basic atom: refs/myblobs/first contents (missing GPG)
ok 336 # skip basic atom: refs/myblobs/first contents:size (missing GPG)
ok 337 - basic atom: refs/myblobs/first raw
ok 338 - set up refs pointing to binary blob
ok 339 - Verify sorts with raw
ok 340 - Verify sorts with raw:size
ok 341 - validate raw atom with %(if:equals)
ok 342 - validate raw atom with %(if:notequals)
ok 343 - empty raw refs with %(if)
ok 344 - %(raw) with --python must fail
ok 345 - %(raw) with --tcl must fail
ok 346 - %(raw) with --perl
ok 347 - %(raw) with --shell must fail
ok 348 - %(raw) with --shell and --sort=raw must fail
ok 349 - %(raw:size) with --shell
ok 350 - for-each-ref --format compare with cat-file --batch
ok 351 - verify sorts with contents:size
ok 352 - set up multiple-sort tags
ok 353 - Verify sort with multiple keys
ok 354 - equivalent sorts fall back on refname
ok 355 - --no-sort cancels the previous sort keys
ok 356 - --no-sort without subsequent --sort prints expected refs
ok 357 - set up custom date sorting
ok 358 - sort by date defaults to full timestamp
ok 359 - sort by custom date format
ok 360 - do not dereference NULL upon %(HEAD) on unborn branch
ok 361 - set up trailers for next test
ok 362 - %(trailers:unfold) unfolds trailers
ok 363 - %(trailers:only) shows only "key: value" trailers
ok 364 - %(trailers:only=no,only=true) shows only "key: value" trailers
ok 365 - %(trailers:only=yes) shows only "key: value" trailers
ok 366 - %(trailers:only=no) shows all trailers
ok 367 - %(trailers:only) and %(trailers:unfold) work together
ok 368 - %(trailers:unfold) and %(trailers:only) work together
ok 369 - %(trailers:key=foo) shows that trailer
ok 370 - %(trailers:key=foo) is case insensitive
ok 371 - %(trailers:key=foo:) trailing colon also works
ok 372 - %(trailers:key=foo) multiple keys
ok 373 - %(trailers:key=nonexistent) becomes empty
ok 374 - %(trailers:key=foo) handles multiple lines even if folded
ok 375 - %(trailers:key=foo,unfold) properly unfolds
ok 376 - %(trailers:key=foo,only=no) also includes nontrailer lines
ok 377 - %(trailers:key=foo,valueonly) shows only value
ok 378 - %(trailers:separator) changes separator
ok 379 - %(trailers:key_value_separator) changes key-value separator
ok 380 - %(trailers:separator,key_value_separator) changes both separators
ok 381 - %(trailers) rejects unknown trailers arguments
ok 382 - %(trailers:key) without value is error
ok 383 - if arguments, %(contents:trailers) shows error if colon is missing
ok 384 - basic atom: head contents:trailers
ok 385 - basic atom: rest must fail
ok 386 - HEAD atom does not take arguments
ok 387 - subject atom rejects unknown arguments
ok 388 - refname atom rejects unknown arguments
ok 389 - trailer parsing not fooled by --- line
ok 390 - Add symbolic ref for the following tests
ok 391 - Verify usage of %(symref) atom
ok 392 - Verify usage of %(symref:short) atom
ok 393 - Verify usage of %(symref:lstrip) atom
ok 394 - Verify usage of %(symref:rstrip) atom
ok 395 - :remotename and :remoteref
ok 396 - for-each-ref --ignore-case ignores case
ok 397 - for-each-ref --omit-empty works
ok 398 - for-each-ref --ignore-case works on multiple sort keys
ok 399 - for-each-ref reports broken tags
ok 400 - set up tag with signature and no blank lines
ok 401 # skip basic atom: refs/tags/fake-sig-no-blanks contents:subject (missing GPG)
ok 402 # skip basic atom: refs/tags/fake-sig-no-blanks contents:body (missing GPG)
ok 403 # skip basic atom: refs/tags/fake-sig-no-blanks contents:signature (missing GPG)
ok 404 - set up tag with CRLF signature
ok 405 # skip basic atom: refs/tags/fake-sig-crlf contents:subject (missing GPG)
ok 406 # skip basic atom: refs/tags/fake-sig-crlf contents:body (missing GPG)
ok 407 # skip basic atom: refs/tags/fake-sig-crlf contents:signature (missing GPG)
ok 408 - git for-each-ref --stdin: empty
ok 409 - git for-each-ref --stdin: fails if extra args
ok 410 - git for-each-ref --stdin: matches
ok 411 - git for-each-ref with non-existing refs
ok 412 - git for-each-ref with nested tags
ok 413 # skip setup for signature atom using gpg (missing GPG)
ok 414 - setup for signature atom using ssh
ok 415 # skip bare signature atom (missing GPG2)
ok 416 # skip show good signature with custom format (missing GPG)
ok 417 - show good signature with custom format
			    with ssh
ok 418 # skip signature atom with grade option and bad signature (missing GPG)
ok 419 # skip show untrusted signature with custom format (missing GPG)
ok 420 # skip show untrusted signature with undefined trust level (missing GPG)
ok 421 # skip show untrusted signature with ultimate trust level (missing GPG)
ok 422 # skip show unknown signature with custom format (missing GPG)
ok 423 # skip show lack of signature with custom format (missing GPG)
# passed all 423 test(s)
1..423
*** t6301-for-each-ref-errors.sh ***
ok 1 - setup
ok 2 - Broken refs are reported correctly
ok 3 - NULL_SHA1 refs are reported correctly
ok 4 - Missing objects are reported correctly
ok 5 - ahead-behind requires an argument
ok 6 - missing ahead-behind base
# passed all 6 test(s)
1..6
*** t6302-for-each-ref-filter.sh ***
ok 1 - setup some history and refs
ok 2 - --include-root-refs pattern prints pseudorefs
ok 3 - --include-root-refs with other patterns
ok 4 - filtering with --points-at
ok 5 - check signed tags with --points-at
ok 6 - filtering with --merged
ok 7 - filtering with --no-merged
ok 8 - filtering with --contains
ok 9 - filtering with --no-contains
ok 10 - filtering with --contains and --no-contains
ok 11 - %(color) must fail
ok 12 - %(color:#aa22ac) must succeed
ok 13 - left alignment is default
ok 14 - middle alignment
ok 15 - right alignment
ok 16 - align:middle,42
ok 17 - align:42,middle
ok 18 - align:position=middle,42
ok 19 - align:42,position=middle
ok 20 - align:middle,width=42
ok 21 - align:width=42,middle
ok 22 - align:position=middle,width=42
ok 23 - align:width=42,position=middle
ok 24 - align:32,width=42,middle
ok 25 - align:width=30,42,middle
ok 26 - align:width=42,position=right,middle
ok 27 - align:42,right,position=middle
ok 28 - alignment with format quote
ok 29 - nested alignment with quote formatting
ok 30 - check `%(contents:lines=1)`
ok 31 - check `%(contents:lines=0)`
ok 32 - check `%(contents:lines=99999)`
ok 33 - `%(contents:lines=-1)` should fail
ok 34 - setup for version sort
ok 35 - version sort
ok 36 - version sort (shortened)
ok 37 - reverse version sort
ok 38 - improper usage of %(if), %(then), %(else) and %(end) atoms
ok 39 - check %(if)...%(then)...%(end) atoms
ok 40 - check %(if)...%(then)...%(else)...%(end) atoms
ok 41 - ignore spaces in %(if) atom usage
ok 42 - check %(if:equals=<string>)
ok 43 - check %(if:notequals=<string>)
ok 44 - --merged is compatible with --no-merged
ok 45 - validate worktree atom
# passed all 45 test(s)
1..45
*** t6400-merge-df.sh ***
ok 1 - prepare repository
ok 2 - Merge with d/f conflicts
ok 3 - F/D conflict
ok 4 - setup modify/delete + directory/file conflict
ok 5 - modify/delete + directory/file conflict
ok 6 - modify/delete + directory/file conflict; other way
ok 7 - Simple merge in repo with interesting pathnames
# passed all 7 test(s)
1..7
*** t6401-merge-criss-cross.sh ***
ok 1 - prepare repository
ok 2 - Criss-cross merge
ok 3 - Criss-cross merge result
ok 4 - Criss-cross merge fails (-s resolve)
# passed all 4 test(s)
1..4
*** t6402-merge-rename.sh ***
ok 1 - setup
ok 2 - pull renaming branch into unrenaming one
ok 3 - pull renaming branch into another renaming one
ok 4 - pull unrenaming branch into renaming one
ok 5 - pull conflicting renames
ok 6 - interference with untracked working tree file
ok 7 - interference with untracked working tree file
ok 8 - interference with untracked working tree file
ok 9 - updated working tree file should prevent the merge
ok 10 - updated working tree file should prevent the merge
ok 11 - interference with untracked working tree file
ok 12 - merge of identical changes in a renamed file
ok 13 - setup for rename + d/f conflicts
ok 14 - Rename+D/F conflict; renamed file merges + dir not in way
ok 15 - Rename+D/F conflict; renamed file merges but dir in way
ok 16 - Same as previous, but merged other way
ok 17 - Rename+D/F conflict; renamed file cannot merge, dir not in way
ok 18 - Rename+D/F conflict; renamed file cannot merge and dir in the way
ok 19 - Same as previous, but merged other way
ok 20 - setup both rename source and destination involved in D/F conflict
ok 21 - both rename source and destination involved in D/F conflict
ok 22 - setup pair rename to parent of other (D/F conflicts)
ok 23 - pair rename to parent of other (D/F conflicts) w/ untracked dir
ok 24 - pair rename to parent of other (D/F conflicts) w/ clean start
ok 25 - setup rename of one file to two, with directories in the way
ok 26 - check handling of differently renamed file with D/F conflicts
ok 27 - setup rename one file to two; directories moving out of the way
ok 28 - check handling of differently renamed file with D/F conflicts
ok 29 - setup avoid unnecessary update, normal rename
ok 30 - avoid unnecessary update, normal rename
ok 31 - setup to test avoiding unnecessary update, with D/F conflict
ok 32 - avoid unnecessary update, with D/F conflict
ok 33 - setup avoid unnecessary update, dir->(file,nothing)
ok 34 - avoid unnecessary update, dir->(file,nothing)
ok 35 - setup avoid unnecessary update, modify/delete
ok 36 - avoid unnecessary update, modify/delete
ok 37 - setup avoid unnecessary update, rename/add-dest
ok 38 - avoid unnecessary update, rename/add-dest
ok 39 - setup merge of rename + small change
ok 40 - merge rename + small change
ok 41 - setup for use of extended merge markers
ok 42 - merge main into rename has correct extended markers
ok 43 - merge rename into main has correct extended markers
ok 44 - setup spurious "refusing to lose untracked" message
ok 45 - no spurious "refusing to lose untracked" message
ok 46 - do not follow renames for empty files
# passed all 46 test(s)
1..46
*** t6403-merge-file.sh ***
ok 1 - setup
ok 2 - merge with no changes
ok 3 - merge with no changes with --object-id
ok 4 - merge without conflict
ok 5 - merge without conflict with --object-id
ok 6 - can accept object ID with --object-id
ok 7 - works in subdirectory
ok 8 - merge without conflict (--quiet)
not ok 9 - merge without conflict (missing LF at EOF) # TODO known breakage
not ok 10 - merge result added missing LF # TODO known breakage
ok 11 - merge without conflict (missing LF at EOF, away from change in the other file)
ok 12 - merge does not add LF away of change
ok 13 - merge with conflicts
ok 14 - expected conflict markers
ok 15 - merge with conflicts with --object-id
ok 16 - merge with conflicts with --object-id with labels
ok 17 - merge conflicting with --ours
ok 18 - merge conflicting with --theirs
ok 19 - merge conflicting with --union
ok 20 - merge with conflicts, using -L
ok 21 - expected conflict markers, with -L
ok 22 - conflict in removed tail
ok 23 - expected conflict markers
ok 24 - binary files cannot be merged
ok 25 - binary files cannot be merged with --object-id
ok 26 - MERGE_ZEALOUS simplifies non-conflicts
ok 27 - ZEALOUS_ALNUM
ok 28 - "diff3 -m" style output (1)
ok 29 - "diff3 -m" style output (2)
ok 30 - marker size
ok 31 - conflict at EOF without LF resolved by --ours
ok 32 - conflict at EOF without LF resolved by --theirs
ok 33 - conflict at EOF without LF resolved by --union
ok 34 - conflict sections match existing line endings
ok 35 - --object-id fails without repository
ok 36 - merging C files with "myers" diff algorithm creates some spurious conflicts
ok 37 - merging C files with "histogram" diff algorithm avoids some spurious conflicts
# still have 2 known breakage(s)
# passed all remaining 35 test(s)
1..37
*** t6404-recursive-merge.sh ***
ok 1 - setup tests
ok 2 - combined merge conflicts
ok 3 - result contains a conflict
ok 4 - virtual trees were processed
ok 5 - refuse to merge binary files
ok 6 - mark rename/delete as unmerged
# passed all 6 test(s)
1..6
*** t6405-merge-symlinks.sh ***
ok 1 - setup
ok 2 - merge main into b-symlink, which has a different symbolic link
ok 3 - the merge result must be a file
ok 4 - merge main into b-file, which has a file instead of a symbolic link
ok 5 - the merge result must be a file
ok 6 - merge b-file, which has a file instead of a symbolic link, into main
ok 7 - the merge result must be a file
# passed all 7 test(s)
1..7
*** t6406-merge-attr.sh ***
ok 1 - setup
ok 2 - merge
ok 3 - check merge result in index
ok 4 - check merge result in working tree
ok 5 - retry the merge with longer context
ok 6 - custom merge backend
ok 7 - custom merge backend
ok 8 - custom merge driver that is killed with a signal
ok 9 - up-to-date merge without common ancestor
ok 10 - custom merge does not lock index
ok 11 - binary files with union attribute
# passed all 11 test(s)
1..11
*** t6407-merge-binary.sh ***
ok 1 - setup
ok 2 - resolve
ok 3 - recursive
# passed all 3 test(s)
1..3
*** t6408-merge-up-to-date.sh ***
ok 1 - setup
ok 2 - merge -s recursive up-to-date
ok 3 - merge -s recursive fast-forward
ok 4 - merge -s ours up-to-date
ok 5 - merge -s ours fast-forward
ok 6 - merge -s subtree up-to-date
ok 7 - merge fast-forward octopus
# passed all 7 test(s)
1..7
*** t6409-merge-subtree.sh ***
ok 1 - setup
ok 2 - subtree available and works like recursive
ok 3 - setup branch sub
ok 4 - setup topic branch
ok 5 - update branch sub
ok 6 - update topic branch
ok 7 - setup
ok 8 - initial merge
ok 9 - merge update
ok 10 - initial ambiguous subtree
ok 11 - merge using explicit
ok 12 - merge2 using explicit
# passed all 12 test(s)
1..12
*** t6411-merge-filemode.sh ***
ok 1 - set up mode change in one branch
ok 2 - resolve single mode change (recursive, a1)
ok 3 - verify executable bit on file (recursive, a1)
ok 4 - resolve single mode change (recursive, b1)
ok 5 - verify executable bit on file (recursive, b1)
ok 6 - resolve single mode change (resolve, a1)
ok 7 - verify executable bit on file (resolve, a1)
ok 8 - resolve single mode change (resolve, b1)
ok 9 - verify executable bit on file (resolve, b1)
ok 10 - set up mode change in both branches
ok 11 - detect conflict on double mode change (recursive)
ok 12 - verify executable bit on file (recursive)
ok 13 - detect conflict on double mode change (resolve)
ok 14 - verify executable bit on file (resolve)
ok 15 - set up delete/modechange scenario
ok 16 - detect delete/modechange conflict (recursive, b1)
ok 17 - detect delete/modechange conflict (recursive, deletion)
ok 18 - detect delete/modechange conflict (resolve, b1)
ok 19 - detect delete/modechange conflict (resolve, deletion)
# passed all 19 test(s)
1..19
*** t6412-merge-large-rename.sh ***
ok 1 - setup (initial)
ok 2 - rename (5, ok)
ok 3 - set diff.renamelimit to 4
ok 4 - rename (4, ok)
ok 5 - rename (5, fail)
ok 6 - set merge.renamelimit to 5
ok 7 - rename (5, ok)
ok 8 - rename (6, fail)
ok 9 - setup large simple rename
ok 10 - massive simple rename does not spam added files
# passed all 10 test(s)
1..10
*** t6413-merge-crlf.sh ***
ok 1 - setup
ok 2 - Check "ours" is CRLF
ok 3 - Check that conflict file is CRLF
# passed all 3 test(s)
1..3
*** t6414-merge-rename-nocruft.sh ***
ok 1 - setup
ok 2 - merge white into red (A->B,M->N)
ok 3 - merge blue into white (A->B, mod A, A untracked)
# passed all 3 test(s)
1..3
*** t6415-merge-dir-to-symlink.sh ***
ok 1 - create a commit where dir a/b changed to symlink
ok 2 - checkout does not clobber untracked symlink
ok 3 - a/b-2/c/d is kept when clobbering symlink b
ok 4 - checkout should not have deleted a/b-2/c/d
ok 5 - setup for merge test
ok 6 - Handle D/F conflict, do not lose a/b-2/c/d in merge (resolve)
ok 7 - a/b was resolved as symlink
ok 8 - Handle D/F conflict, do not lose a/b-2/c/d in merge (recursive)
ok 9 - a/b was resolved as symlink
ok 10 - Handle F/D conflict, do not lose a/b-2/c/d in merge (resolve)
ok 11 - a/b was resolved as symlink
ok 12 - Handle F/D conflict, do not lose a/b-2/c/d in merge (recursive)
ok 13 - a/b was resolved as symlink
not ok 14 - do not lose untracked in merge (resolve) # TODO known breakage
ok 15 - do not lose untracked in merge (recursive)
ok 16 - do not lose modifications in merge (resolve)
ok 17 - do not lose modifications in merge (recursive)
ok 18 - setup a merge where dir a/b-2 changed to symlink
ok 19 - merge should not have D/F conflicts (resolve)
ok 20 - a/b-2 was resolved as symlink
ok 21 - merge should not have D/F conflicts (recursive)
ok 22 - a/b-2 was resolved as symlink
ok 23 - merge should not have F/D conflicts (recursive)
ok 24 - a/b-2 was resolved as symlink
# still have 1 known breakage(s)
# passed all remaining 23 test(s)
1..24
*** t6416-recursive-corner-cases.sh ***
ok 1 - setup basic criss-cross + rename with no modifications
ok 2 - merge simple rename+criss-cross with no modifications
ok 3 - setup criss-cross + rename merges with basic modification
ok 4 - merge criss-cross + rename merges with basic modification
ok 5 - setup differently handled merges of rename/add conflict
ok 6 - git detects differently handled merges conflict
ok 7 - git detects differently handled merges conflict, swapped
ok 8 - setup criss-cross + modify/delete resolved differently
ok 9 - git detects conflict merging criss-cross+modify/delete
ok 10 - git detects conflict merging criss-cross+modify/delete, reverse direction
ok 11 - setup differently handled merges of directory/file conflict
ok 12 - merge of D1 & E1 fails but has appropriate contents
ok 13 - merge of E1 & D1 fails but has appropriate contents
ok 14 - merge of D1 & E2 fails but has appropriate contents
ok 15 - merge of E2 & D1 fails but has appropriate contents
ok 16 - merge of D1 & E3 succeeds
ok 17 - merge of D1 & E4 puts merge of a and a2 in both a and a2
not ok 18 - merge of D2 & E4 merges a2s & reports conflict for a/file # TODO known breakage
ok 19 - setup rename/rename(1to2)/modify followed by what looks like rename/rename(2to1)/modify
ok 20 - handle rename/rename(1to2)/modify followed by what looks like rename/rename(2to1)/modify
ok 21 - setup criss-cross + rename/rename/add-source + modify/modify
not ok 22 - detect rename/rename/add-source for virtual merge-base # TODO known breakage
ok 23 - setup criss-cross+rename/rename/add-dest + simple modify
ok 24 - virtual merge base handles rename/rename(1to2)/add-dest
ok 25 - setup symlink modify/modify
ok 26 - check symlink modify/modify
ok 27 - setup symlink add/add
ok 28 - check symlink add/add
ok 29 - setup submodule modify/modify
ok 30 - check submodule modify/modify
ok 31 - setup submodule add/add
ok 32 - check submodule add/add
ok 33 - setup conflicting entry types (submodule vs symlink)
ok 34 - check conflicting entry types (submodule vs symlink)
ok 35 - setup conflicting modes for regular file
not ok 36 - check conflicting modes for regular file # TODO known breakage
ok 37 - setup nested conflicts
ok 38 - check nested conflicts
ok 39 - setup virtual merge base with nested conflicts
ok 40 - check virtual merge base with nested conflicts
# still have 3 known breakage(s)
# passed all remaining 37 test(s)
1..40
*** t6417-merge-ours-theirs.sh ***
ok 1 - setup
ok 2 - plain recursive - should conflict
ok 3 - recursive favouring theirs
ok 4 - recursive favouring ours
ok 5 - binary file with -Xours/-Xtheirs
ok 6 - pull passes -X to underlying merge
ok 7 - symlink with -Xours/-Xtheirs
# passed all 7 test(s)
1..7
*** t6418-merge-text-auto.sh ***
ok 1 - setup
ok 2 - set up fuzz_conflict() helper
ok 3 - Merge after setting text=auto
ok 4 - Merge addition of text=auto eol=LF
ok 5 - Merge addition of text=auto eol=CRLF
ok 6 - Detect CRLF/LF conflict after setting text=auto
ok 7 - Detect LF/CRLF conflict from addition of text=auto
ok 8 - checkout -m after setting text=auto
ok 9 - checkout -m addition of text=auto
ok 10 - Test delete/normalize conflict
ok 11 - rename/delete vs. renormalization
# passed all 11 test(s)
1..11
*** t6419-merge-ignorecase.sh ***
1..0 # SKIP skipping case insensitive tests - case sensitive file system
*** t6421-merge-partial-clone.sh ***
ok 1 - Objects downloaded for single relevant rename
ok 2 - Objects downloaded when a directory rename triggered
ok 3 - Objects downloaded with lots of renames and modifications
# passed all 3 test(s)
1..3
*** t6422-merge-rename-corner-cases.sh ***
ok 1 - Does git preserve Gollum's precious artifact?
not ok 2 - rename/modify/add-source conflict resolvable # TODO known breakage
not ok 3 - conflict caused if rename not detected # TODO known breakage
not ok 4 - missed conflict if rename not detected # TODO known breakage
not ok 5 - detect rename/add-source and preserve all data # TODO known breakage
not ok 6 - detect rename/add-source and preserve all data, merge other way # TODO known breakage
ok 7 - rename/directory conflict + clean content merge
ok 8 - rename/directory conflict + content merge conflict
ok 9 - disappearing dir in rename/directory conflict handled
ok 10 - handle rename-with-content-merge vs. add
ok 11 - handle rename-with-content-merge vs. add, merge other way
ok 12 - handle rename/rename (2to1) conflict correctly
ok 13 - merge has correct working tree contents
not ok 14 - detect conflict with rename/rename(1to2)/add-source merge # TODO known breakage
not ok 15 - rename/rename/add-source still tracks new a file # TODO known breakage
ok 16 - rename/rename/add-dest merge still knows about conflicting file versions
ok 17 - rad-check: rename/add/delete conflict
ok 18 - rrdd-check: rename/rename(2to1)/delete/delete conflict
ok 19 - mod6-check: chains of rename/rename(1to2) and rename/rename(2to1)
ok 20 - check simple rename/rename conflict
ok 21 - check simple rename/add conflict
ok 22 - check simple add/rename conflict
ok 23 - check simple add/add conflict
ok 24 - check nested conflicts from rename/rename(2to1)
ok 25 - rename/rename(1to2) with a binary file
# still have 7 known breakage(s)
# passed all remaining 18 test(s)
1..25
*** t6423-merge-rename-directories.sh ***
ok 1 - 1a: Simple directory rename detection
ok 2 - 1b: Merge a directory with another
ok 3 - 1c: Transitive renaming
ok 4 - 1d: Directory renames cause a rename/rename(2to1) conflict
ok 5 - 1e: Renamed directory, with all files being renamed too
ok 6 - 1f: Split a directory into two other directories
ok 7 - 2a: Directory split into two on one side, with equal numbers of paths
ok 8 - 2b: Directory split into two on one side, with equal numbers of paths
ok 9 - 3a: Avoid implicit rename if involved as source on other side
ok 10 - 3b: Avoid implicit rename if involved as source on current side
ok 11 - 4a: Directory split, with original directory still present
ok 12 - 5a: Merge directories, other side adds files to original and target
ok 13 - 5b: Rename/delete in order to get add/add/add conflict
ok 14 - 5c: Transitive rename would cause rename/rename/rename/add/add/add
ok 15 - 5d: Directory/file/file conflict due to directory rename
ok 16 - 6a: Tricky rename/delete
ok 17 - 6b1: Same renames done on both sides, plus another rename
ok 18 - 6b2: Same rename done on both sides
ok 19 - 6c: Rename only done on same side
ok 20 - 6d: We do not always want transitive renaming
ok 21 - 6e: Add/add from one side
ok 22 - 7a: rename-dir vs. rename-dir (NOT split evenly) PLUS add-other-file
ok 23 - 7b: rename/rename(2to1), but only due to transitive rename
ok 24 - 7c: rename/rename(1to...2or3); transitive rename may add complexity
ok 25 - 7d: transitive rename involved in rename/delete; how is it reported?
ok 26 - 7e: transitive rename in rename/delete AND dirs in the way
ok 27 - 8a: Dual-directory rename, one into the others way
ok 28 - 8b: Dual-directory rename, one into the others way, with conflicting filenames
ok 29 - 8c: modify/delete or rename+modify/delete
ok 30 - 8d: rename/delete...or not?
ok 31 - 8e: Both sides rename, one side adds to original directory
ok 32 - 9a: Inner renamed directory within outer renamed directory
ok 33 - 9b: Transitive rename with content merge
ok 34 - 9c: Doubly transitive rename?
ok 35 - 9d: N-way transitive rename?
ok 36 - 9e: N-to-1 whammo
ok 37 - 9f: Renamed directory that only contained immediate subdirs
not ok 38 - 9g: Renamed directory that only contained immediate subdirs, immediate subdirs renamed # TODO known breakage
ok 39 - 9h: Avoid dir rename on merely modified path
ok 40 - 10a: Overwrite untracked with normal rename/delete
ok 41 - 10b: Overwrite untracked with dir rename + delete
ok 42 - 10c1: Overwrite untracked with dir rename/rename(1to2)
ok 43 - 10c2: Overwrite untracked with dir rename/rename(1to2), other direction
ok 44 - 10d: Delete untracked with dir rename/rename(2to1)
ok 45 - 10e: Does git complain about untracked file that is not really in the way?
ok 46 - 11a: Avoid losing dirty contents with simple rename
ok 47 - 11b: Avoid losing dirty file involved in directory rename
ok 48 - 11c: Avoid losing not-uptodate with rename + D/F conflict
ok 49 - 11d: Avoid losing not-uptodate with rename + D/F conflict
ok 50 - 11e: Avoid deleting not-uptodate with dir rename/rename(1to2)/add
ok 51 - 11f: Avoid deleting not-uptodate with dir rename/rename(2to1)
ok 52 - 12a: Moving one directory hierarchy into another
ok 53 - 12b1: Moving two directory hierarchies into each other
ok 54 - 12b2: Moving two directory hierarchies into each other
ok 55 - 12c1: Moving one directory hierarchy into another w/ content merge
ok 56 - 12c2: Moving one directory hierarchy into another w/ content merge
ok 57 - 12d: Rename/merge subdir into the root, variant 1
ok 58 - 12e: Rename/merge subdir into the root, variant 2
ok 59 - 12f: Trivial directory resolve, caching, all kinds of fun
ok 60 - 12g: Testcase with two kinds of "relevant" renames
not ok 61 - 12h: renaming a file within a renamed directory # TODO known breakage
ok 62 - 12i: Directory rename causes rename-to-self
ok 63 - 12j: Directory rename to root causes rename-to-self
ok 64 - 12k: Directory rename with sibling causes rename-to-self
ok 65 - 12l (B into A): Rename into each other + add/add conflict
ok 66 - 12l (A into B): Rename into each other + add/add conflict
ok 67 - 12m: Change parent of renamed-dir to symlink on other side
ok 68 - 13a(conflict): messages for newly added files
ok 69 - 13a(info): messages for newly added files
ok 70 - 13b(conflict): messages for transitive rename with conflicted content
ok 71 - 13b(info): messages for transitive rename with conflicted content
ok 72 - 13c(conflict): messages for rename/rename(1to1) via transitive rename
ok 73 - 13c(info): messages for rename/rename(1to1) via transitive rename
ok 74 - 13d(conflict): messages for rename/rename(1to1) via dual transitive rename
ok 75 - 13d(info): messages for rename/rename(1to1) via dual transitive rename
ok 76 - 13e: directory rename detection in recursive case
# still have 2 known breakage(s)
# passed all remaining 74 test(s)
1..76
*** t6424-merge-unrelated-index-changes.sh ***
ok 1 - setup trivial merges
ok 2 - ff update
ok 3 - ff update, important file modified
ok 4 - resolve, trivial
ok 5 - resolve, non-trivial
ok 6 - resolve, trivial, related file removed
ok 7 - resolve, non-trivial, related file removed
ok 8 - recursive
ok 9 - recursive, when merge branch matches merge base
ok 10 - merge-recursive, when index==head but head!=HEAD
ok 11 - recursive, when file has staged changes not matching HEAD nor what a merge would give
ok 12 - recursive, when file has staged changes matching what a merge would give
ok 13 - octopus, unrelated file touched
ok 14 - octopus, related file removed
ok 15 - octopus, related file modified
ok 16 - ours
ok 17 - subtree
ok 18 - avoid failure due to stat-dirty files
ok 19 - with multiple strategies, recursive or ort failure do not early abort
# passed all 19 test(s)
1..19
*** t6425-merge-rename-delete.sh ***
ok 1 - rename/delete
# passed all 1 test(s)
1..1
*** t6426-merge-skip-unneeded-updates.sh ***
ok 1 - 1a-L: Modify(A)/Modify(B), change on B subset of A
ok 2 - 1a-R: Modify(A)/Modify(B), change on B subset of A
ok 3 - 2a-L: Modify/rename, merge into modify side
ok 4 - 2a-R: Modify/rename, merge into rename side
ok 5 - 2b-L: Rename+Mod(A)/Mod(B), B mods subset of A
ok 6 - 2b-R: Rename+Mod(A)/Mod(B), B mods subset of A
ok 7 - 2c: Modify b & add c VS rename b->c
ok 8 - 3a-L: bq_1->foo/bq_2 on A, foo/->bar/ on B
ok 9 - 3a-R: bq_1->foo/bq_2 on A, foo/->bar/ on B
ok 10 - 3b-L: bq_1->foo/bq_2 on A, foo/->bar/ on B
ok 11 - 3b-R: bq_1->foo/bq_2 on A, foo/->bar/ on B
ok 12 - 4a: Change on A, change on B subset of A, dirty mods present
ok 13 - 4b: Rename+Mod(A)/Mod(B), change on B subset of A, dirty mods present
# passed all 13 test(s)
1..13
*** t6427-diff3-conflict-markers.sh ***
ok 1 - setup no merge base
ok 2 - check no merge base
ok 3 - setup unique merge base
ok 4 - check unique merge base
ok 5 - setup multiple merge bases
ok 6 - check multiple merge bases
ok 7 - rebase --merge describes parent of commit being picked
ok 8 - rebase --apply describes fake ancestor base
ok 9 - check zdiff3 markers
# passed all 9 test(s)
1..9
*** t6428-merge-conflicts-sparse.sh ***
ok 1 - conflicting entries written to worktree even if sparse
ok 2 - present-despite-SKIP_WORKTREE handled reasonably
# passed all 2 test(s)
1..2
*** t6429-merge-sequence-rename-caching.sh ***
ok 1 - caching renames does not preclude finding new ones
ok 2 - cherry-pick both a commit and its immediate revert
ok 3 - rename same file identically, then reintroduce it
ok 4 - rename same file identically, then add file to old dir
ok 5 - cached dir rename does not prevent noticing later conflict
ok 6 - dir rename unneeded, then add new file to old dir
ok 7 - dir rename unneeded, then rename existing file into old dir
ok 8 - caching renames only on upstream side, part 1
ok 9 - caching renames only on upstream side, part 2
ok 10 - avoid assuming we detected renames
# passed all 10 test(s)
1..10
*** t6430-merge-recursive.sh ***
ok 1 - setup 1
ok 2 - setup 2
ok 3 - setup 3
ok 4 - setup 4
ok 5 - setup 5
ok 6 - setup 6
ok 7 - setup 7
ok 8 - setup 8
ok 9 - setup 9
ok 10 - merge-recursive simple
ok 11 - merge-recursive result
ok 12 - fail if the index has unresolved entries
ok 13 - merge-recursive remove conflict
ok 14 - merge-recursive remove conflict
ok 15 - merge-recursive d/f simple
ok 16 - merge-recursive result
ok 17 - merge-recursive d/f conflict
ok 18 - merge-recursive d/f conflict result
ok 19 - merge-recursive d/f conflict the other way
ok 20 - merge-recursive d/f conflict result the other way
ok 21 - merge-recursive d/f conflict
ok 22 - merge-recursive d/f conflict result
ok 23 - merge-recursive d/f conflict
ok 24 - merge-recursive d/f conflict result
ok 25 - dir in working tree with symlink ancestor does not produce d/f conflict
ok 26 - reset and 3-way merge
ok 27 - reset and bind merge
ok 28 - merge-recursive w/ empty work tree - ours has rename
ok 29 - merge-recursive w/ empty work tree - theirs has rename
ok 30 - merge removes empty directories
ok 31 - merge-recursive simple w/submodule
ok 32 - merge-recursive simple w/submodule result
ok 33 - merge-recursive copy vs. rename
ok 34 - merge-recursive rename vs. rename/symlink
ok 35 - merging with triple rename across D/F conflict
ok 36 - merge-recursive remembers the names of all base trees
ok 37 - merge-recursive internal merge resolves to the sameness
# passed all 37 test(s)
1..37
*** t6431-merge-criscross.sh ***
ok 1 - setup repo with criss-cross history
ok 2 - recursive merge between F and G does not cause segfault
# passed all 2 test(s)
1..2
*** t6432-merge-recursive-space-options.sh ***
ok 1 - setup
ok 2 - naive merge fails
ok 3 - --ignore-space-change makes merge succeed
ok 4 - naive cherry-pick fails
ok 5 - -Xignore-space-change makes cherry-pick succeed
ok 6 - --ignore-space-change: our w/s-only change wins
ok 7 - --ignore-space-change: their real change wins over w/s
ok 8 - --ignore-space-change: does not ignore new spaces
ok 9 - --ignore-all-space drops their new spaces
ok 10 - --ignore-all-space keeps our new spaces
ok 11 - --ignore-space-at-eol
# passed all 11 test(s)
1..11
*** t6433-merge-toplevel.sh ***
ok 1 - setup
ok 2 - merge an octopus into void
ok 3 - merge an octopus, fast-forward (ff)
ok 4 - merge octopus, non-fast-forward (ff)
ok 5 - merge octopus, fast-forward (does not ff)
ok 6 - merge octopus, non-fast-forward
ok 7 - merge FETCH_HEAD octopus into void
ok 8 - merge FETCH_HEAD octopus fast-forward (ff)
ok 9 - merge FETCH_HEAD octopus non-fast-forward (ff)
ok 10 - merge FETCH_HEAD octopus fast-forward (does not ff)
ok 11 - merge FETCH_HEAD octopus non-fast-forward
ok 12 - refuse two-project merge by default
ok 13 - refuse two-project merge by default, quit before --autostash happens
ok 14 - two-project merge with --allow-unrelated-histories
ok 15 - two-project merge with --allow-unrelated-histories with --autostash
# passed all 15 test(s)
1..15
*** t6434-merge-recursive-rename-options.sh ***
ok 1 - setup repo
ok 2 - setup thresholds
ok 3 - assumption for tests: rename detection with diff
ok 4 - default similarity threshold is 50%
ok 5 - low rename threshold
ok 6 - medium rename threshold
ok 7 - high rename threshold
ok 8 - exact renames only
ok 9 - rename threshold is truncated
ok 10 - disabled rename detection
ok 11 - last wins in --find-renames=<m> --find-renames=<n>
ok 12 - --find-renames resets threshold
ok 13 - last wins in --no-renames --find-renames
ok 14 - last wins in --find-renames --no-renames
ok 15 - assumption for further tests: trivial merge succeeds
ok 16 - --find-renames rejects negative argument
ok 17 - --find-renames rejects non-numbers
ok 18 - rename-threshold=<n> is a synonym for find-renames=<n>
ok 19 - last wins in --no-renames --rename-threshold=<n>
ok 20 - last wins in --rename-threshold=<n> --no-renames
ok 21 - --rename-threshold=<n> rejects negative argument
ok 22 - --rename-threshold=<n> rejects non-numbers
ok 23 - last wins in --rename-threshold=<m> --find-renames=<n>
ok 24 - last wins in --find-renames=<m> --rename-threshold=<n>
ok 25 - merge.renames disables rename detection
ok 26 - merge.renames defaults to diff.renames
ok 27 - merge.renames overrides diff.renames
# passed all 27 test(s)
1..27
*** t6435-merge-sparse.sh ***
ok 1 - setup
ok 2 - reset --hard works after the conflict
ok 3 - is reset properly
ok 4 - setup: conflict back
ok 5 - Merge abort works after the conflict
ok 6 - is aborted properly
# passed all 6 test(s)
1..6
*** t6436-merge-overwrite.sh ***
ok 1 - setup
ok 2 - will not overwrite untracked file
ok 3 - will overwrite tracked file
ok 4 - will not overwrite new file
ok 5 - will not overwrite staged changes
ok 6 - will not overwrite removed file
ok 7 - will not overwrite re-added file
ok 8 - will not overwrite removed file with staged changes
ok 9 - will not overwrite unstaged changes in renamed file
ok 10 - will not overwrite untracked subtree
ok 11 - will not overwrite untracked file in leading path
ok 12 - will not overwrite untracked symlink in leading path
ok 13 - will not be confused by symlink in leading path
ok 14 - will not overwrite untracked file on unborn branch
ok 15 - will not overwrite untracked file on unborn branch .git/MERGE_HEAD sanity etc.
ok 16 - failed merge leaves unborn branch in the womb
ok 17 - set up unborn branch and content
ok 18 - will not clobber WT/index when merging into unborn
# passed all 18 test(s)
1..18
*** t6437-submodule-merge.sh ***
ok 1 - setup
ok 2 - setup for merge search
ok 3 - merging should conflict for non fast-forward
ok 4 - finish setup for merge-search
ok 5 - merge with one side as a fast-forward of the other
ok 6 - merging should conflict for non fast-forward (resolution exists)
ok 7 - merging should fail for ambiguous common parent
ok 8 - merging should fail for changes that are backwards
ok 9 - git submodule status should display the merge conflict properly with merge base
ok 10 - git submodule status should display the merge conflict properly without merge-base
ok 11 - merging with a modify/modify conflict between merge bases
ok 12 - setup for recursive merge with submodule
ok 13 - recursive merge with submodule
ok 14 - setup file/submodule conflict
ok 15 - file/submodule conflict
ok 16 - file/submodule conflict; merge --abort works afterward
ok 17 - setup directory/submodule conflict
not ok 18 - directory/submodule conflict; keep submodule clean # TODO known breakage
ok 19 - directory/submodule conflict; should not treat submodule files as untracked or in the way
not ok 20 - directory/submodule conflict; merge --abort works afterward # TODO known breakage
ok 21 - setup for null merge base
ok 22 - merging should fail with no merge base
# still have 2 known breakage(s)
# passed all remaining 20 test(s)
1..22
*** t6438-submodule-directory-file-conflicts.sh ***
ok 1 - git_test_func: added submodule creates empty directory
ok 2 - git_test_func: added submodule leaves existing empty directory alone
ok 3 - git_test_func: replace tracked file with submodule creates empty directory
ok 4 - git_test_func: replace directory with submodule
ok 5 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 6 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 7 - git_test_func: replace submodule with a directory must fail
ok 8 - git_test_func: replace submodule containing a .git directory with a directory must fail
not ok 9 - git_test_func: replace submodule with a file must fail # TODO known breakage
not ok 10 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - git_test_func: modified submodule does not update submodule work tree
ok 12 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 13 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 14 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 15 - git_test_func: added submodule creates empty directory
ok 16 - git_test_func: added submodule leaves existing empty directory alone
ok 17 - git_test_func: replace tracked file with submodule creates empty directory
ok 18 - git_test_func: replace directory with submodule
ok 19 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 20 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 21 - git_test_func: replace submodule with a directory must fail
ok 22 - git_test_func: replace submodule containing a .git directory with a directory must fail
not ok 23 - git_test_func: replace submodule with a file must fail # TODO known breakage
not ok 24 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 25 - git_test_func: modified submodule does not update submodule work tree
ok 26 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 27 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 28 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 29 - git_test_func: added submodule creates empty directory
ok 30 - git_test_func: added submodule leaves existing empty directory alone
ok 31 - git_test_func: replace tracked file with submodule creates empty directory
ok 32 - git_test_func: replace directory with submodule
ok 33 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 34 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 35 - git_test_func: replace submodule with a directory must fail
ok 36 - git_test_func: replace submodule containing a .git directory with a directory must fail
not ok 37 - git_test_func: replace submodule with a file must fail # TODO known breakage
not ok 38 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 39 - git_test_func: modified submodule does not update submodule work tree
ok 40 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 41 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 42 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 43 - git_test_func: added submodule creates empty directory
ok 44 - git_test_func: added submodule leaves existing empty directory alone
ok 45 - git_test_func: replace tracked file with submodule creates empty directory
ok 46 - git_test_func: replace directory with submodule
ok 47 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 48 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 49 - git_test_func: replace submodule with a directory must fail
ok 50 - git_test_func: replace submodule containing a .git directory with a directory must fail
not ok 51 - git_test_func: replace submodule with a file must fail # TODO known breakage
not ok 52 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 53 - git_test_func: modified submodule does not update submodule work tree
ok 54 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 55 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 56 - git_test_func: added submodule doesn't remove untracked unignored file with same name
# still have 8 known breakage(s)
# passed all remaining 48 test(s)
1..56
*** t6439-merge-co-error-msgs.sh ***
ok 1 - setup
ok 2 - untracked files overwritten by merge (fast and non-fast forward)
ok 3 - untracked files or local changes ovewritten by merge
ok 4 - cannot switch branches because of local changes
ok 5 - not uptodate file porcelain checkout error
ok 6 - not_uptodate_dir porcelain checkout error
# passed all 6 test(s)
1..6
*** t6500-gc.sh ***
ok 1 - setup
ok 2 - gc empty repository
ok 3 - gc does not leave behind pid file
ok 4 - gc --gobbledegook
ok 5 - gc -h with invalid configuration
ok 6 - gc is not aborted due to a stale symref
ok 7 - gc --keep-largest-pack
ok 8 - pre-auto-gc hook can stop auto gc
ok 9 - auto gc with too many loose objects does not attempt to create bitmaps
ok 10 - gc --no-quiet
ok 11 - with TTY: gc --no-quiet
ok 12 - gc --quiet
ok 13 - gc.reflogExpire{Unreachable,}=never skips "expire" via "gc"
ok 14 - one of gc.reflogExpire{Unreachable,}=never does not skip "expire" via "gc"
ok 15 - gc.repackFilter launches repack with a filter
ok 16 - gc.repackFilterTo store filtered out objects
ok 17 - git gc generates a cruft pack
ok 18 - git -c gc.cruftPacks=true gc generates a cruft pack
ok 19 - git -c gc.cruftPacks=false gc --cruft generates a cruft pack
ok 20 - git gc --no-cruft does not generate a cruft pack
ok 21 - git -c gc.cruftPacks=false gc does not generate a cruft pack
ok 22 - git -c gc.cruftPacks=true gc --no-cruft does not generate a cruft pack
ok 23 - --keep-largest-pack ignores cruft packs
ok 24 - gc.bigPackThreshold ignores cruft packs
ok 25 - setup for --max-cruft-size tests
ok 26 - --max-cruft-size sets appropriate repack options
ok 27 - gc.maxCruftSize sets appropriate repack options
ok 28 - background auto gc does not run if gc.log is present and recent but does if it is old
ok 29 - background auto gc respects lock for all operations
# passed all 29 test(s)
1..29
*** t6501-freshen-objects.sh ***
ok 1 - make repo completely empty (loose)
ok 2 - disable reflogs (loose)
ok 3 - setup basic history (loose)
ok 4 - create and abandon some objects (loose)
ok 5 - simulate time passing (loose)
ok 6 - start writing new commit with old blob (loose)
ok 7 - simultaneous gc (loose)
ok 8 - finish writing out commit (loose)
ok 9 - repository passes fsck (loose)
ok 10 - abandon objects again (loose)
ok 11 - start writing new commit with same tree (loose)
ok 12 - simultaneous gc (loose)
ok 13 - finish writing out commit (loose)
ok 14 - make repo completely empty (repack)
ok 15 - disable reflogs (repack)
ok 16 - setup basic history (repack)
ok 17 - create and abandon some objects (repack)
ok 18 - simulate time passing (repack)
ok 19 - start writing new commit with old blob (repack)
ok 20 - simultaneous gc (repack)
ok 21 - finish writing out commit (repack)
ok 22 - repository passes fsck (repack)
ok 23 - abandon objects again (repack)
ok 24 - start writing new commit with same tree (repack)
ok 25 - simultaneous gc (repack)
ok 26 - finish writing out commit (repack)
ok 27 - make repo completely empty (bitmap)
ok 28 - disable reflogs (bitmap)
ok 29 - setup basic history (bitmap)
ok 30 - create and abandon some objects (bitmap)
ok 31 - simulate time passing (bitmap)
ok 32 - start writing new commit with old blob (bitmap)
ok 33 - simultaneous gc (bitmap)
ok 34 - finish writing out commit (bitmap)
ok 35 - repository passes fsck (bitmap)
ok 36 - abandon objects again (bitmap)
ok 37 - start writing new commit with same tree (bitmap)
ok 38 - simultaneous gc (bitmap)
ok 39 - finish writing out commit (bitmap)
ok 40 - do not complain about existing broken links (commit)
ok 41 - do not complain about existing broken links (tree)
ok 42 - do not complain about existing broken links (tag)
# passed all 42 test(s)
1..42
*** t6600-test-reach.sh ***
ok 1 - setup
ok 2 - ref_newer:miss
ok 3 - ref_newer:hit
ok 4 - in_merge_bases:hit
ok 5 - in_merge_bases:miss
ok 6 - in_merge_bases_many:hit
ok 7 - in_merge_bases_many:miss
ok 8 - in_merge_bases_many:miss-heuristic
ok 9 - is_descendant_of:hit
ok 10 - is_descendant_of:miss
ok 11 - get_merge_bases_many
ok 12 - reduce_heads
ok 13 - can_all_from_reach:hit
ok 14 - can_all_from_reach:miss
ok 15 - can_all_from_reach_with_flag: tags case
ok 16 - commit_contains:hit
ok 17 - commit_contains:miss
ok 18 - rev-list: basic topo-order
ok 19 - rev-list: first-parent topo-order
ok 20 - rev-list: range topo-order
ok 21 - rev-list: range topo-order
ok 22 - rev-list: first-parent range topo-order
ok 23 - rev-list: ancestry-path topo-order
ok 24 - rev-list: symmetric difference topo-order
ok 25 - get_reachable_subset:all
ok 26 - get_reachable_subset:some
ok 27 - get_reachable_subset:none
ok 28 - for-each-ref ahead-behind:linear
ok 29 - for-each-ref ahead-behind:all
ok 30 - for-each-ref ahead-behind:some
ok 31 - for-each-ref ahead-behind:some, multibase
ok 32 - for-each-ref ahead-behind:none
ok 33 - for-each-ref merged:linear
ok 34 - for-each-ref merged:all
ok 35 - for-each-ref ahead-behind:some
ok 36 - for-each-ref merged:some, multibase
ok 37 - for-each-ref merged:none
# passed all 37 test(s)
1..37
*** t6700-tree-depth.sh ***
ok 1 - create small tree
ok 2 - create big tree
ok 3 - limit recursion of git-archive
ok 4 - default limit for git-archive fails gracefully
ok 5 - limit recursion of ls-tree -r
ok 6 - default limit for ls-tree fails gracefully
ok 7 - limit recursion of rev-list --objects
ok 8 - default limit for rev-list fails gracefully
ok 9 - limit recursion of diff-tree -r
ok 10 - default limit for diff-tree fails gracefully
# passed all 10 test(s)
1..10
*** t7001-mv.sh ***
ok 1 - mv -f refreshes updated index entry
ok 2 - prepare reference tree
ok 3 - moving the file out of subdirectory
ok 4 - commiting the change
ok 5 - checking the commit
ok 6 - moving the file back into subdirectory
ok 7 - commiting the change
ok 8 - checking the commit
ok 9 - mv --dry-run does not move file
ok 10 - checking -k on non-existing file
ok 11 - checking -k on untracked file
ok 12 - checking -k on multiple untracked files
ok 13 - checking -f on untracked file with existing target
ok 14 - moving to absent target with trailing slash
ok 15 - clean up
ok 16 - moving to existing untracked target with trailing slash
ok 17 - moving to existing tracked target with trailing slash
ok 18 - clean up
ok 19 - adding another file
ok 20 - moving whole subdirectory
ok 21 - commiting the change
ok 22 - checking the commit
ok 23 - succeed when source is a prefix of destination
ok 24 - moving whole subdirectory into subdirectory
ok 25 - commiting the change
ok 26 - checking the commit
ok 27 - do not move directory over existing directory
ok 28 - rename directory to non-existing directory
ok 29 - move into "."
ok 30 - Michael Cassar's test case
ok 31 - Sergey Vlasov's test case
ok 32 - absolute pathname
ok 33 - absolute pathname outside should fail
ok 34 - git mv to move multiple sources into a directory
ok 35 - git mv should not change sha1 of moved cache entry
ok 36 - git mv error on conflicted file
ok 37 - git mv should overwrite symlink to a file
ok 38 - git mv should overwrite file with a symlink
ok 39 - check moved symlink
ok 40 - setup submodule
ok 41 - git mv cannot move a submodule in a file
ok 42 - git mv moves a submodule with a .git directory and no .gitmodules
ok 43 - git mv moves a submodule with a .git directory and .gitmodules
ok 44 - git mv moves a submodule with gitfile
ok 45 - mv does not complain when no .gitmodules file is found
ok 46 - mv will error out on a modified .gitmodules file unless staged
ok 47 - mv issues a warning when section is not found in .gitmodules
ok 48 - mv --dry-run does not touch the submodule or .gitmodules
ok 49 - checking out a commit before submodule moved needs manual updates
ok 50 - mv -k does not accidentally destroy submodules
ok 51 - moving a submodule in nested directories
ok 52 - moving nested submodules
# passed all 52 test(s)
1..52
*** t7002-mv-sparse-checkout.sh ***
ok 1 - setup
ok 2 - mv refuses to move sparse-to-sparse
ok 3 - mv refuses to move sparse-to-sparse, ignores failure
ok 4 - mv refuses to move non-sparse-to-sparse
ok 5 - mv refuses to move sparse-to-non-sparse
ok 6 - recursive mv refuses to move (possible) sparse
ok 7 - recursive mv refuses to move sparse
ok 8 - can move files to non-sparse dir
ok 9 - refuse to move file to non-skip-worktree sparse path
ok 10 - refuse to move out-of-cone directory without --sparse
ok 11 - can move out-of-cone directory with --sparse
ok 12 - refuse to move out-of-cone file without --sparse
ok 13 - can move out-of-cone file with --sparse
ok 14 - refuse to move sparse file to existing destination
ok 15 - move sparse file to existing destination with --force and --sparse
ok 16 - move clean path from in-cone to out-of-cone
ok 17 - move clean path from in-cone to out-of-cone overwrite
ok 18 - move clean path from in-cone to out-of-cone file overwrite
ok 19 - move directory with one of the files overwrite
ok 20 - move dirty path from in-cone to out-of-cone
ok 21 - move dir from in-cone to out-of-cone
ok 22 - move partially-dirty dir from in-cone to out-of-cone
# passed all 22 test(s)
1..22
*** t7003-filter-branch.sh ***
ok 1 - setup
ok 2 - rewrite identically
ok 3 - result is really identical
ok 4 - rewrite bare repository identically
ok 5 - result is really identical
ok 6 - correct GIT_DIR while using -d
ok 7 - tree-filter works with -d
ok 8 - Fail if commit filter fails
ok 9 - rewrite, renaming a specific file
ok 10 - test that the file was renamed
ok 11 - rewrite, renaming a specific directory
ok 12 - test that the directory was renamed
ok 13 - populate --state-branch
ok 14 - using --state-branch to skip already rewritten commits
ok 15 - rewrite one branch, keeping a side branch
ok 16 - common ancestor is still common (unchanged)
ok 17 - filter subdirectory only
ok 18 - subdirectory filter result looks okay
ok 19 - more setup
ok 20 - use index-filter to move into a subdirectory
ok 21 - stops when msg filter fails
ok 22 - author information is preserved
ok 23 - remove a certain author's commits
ok 24 - barf on invalid name
ok 25 - "map" works in commit filter
ok 26 - Name needing quotes
ok 27 - Subdirectory filter with disappearing trees
ok 28 - Tag name filtering retains tag message
ok 29 - Tag name filtering strips gpg signature
ok 30 # skip Filtering retains message of gpg signed commit (missing GPG)
ok 31 - Tag name filtering allows slashes in tag names
ok 32 - setup --prune-empty comparisons
ok 33 - Prune empty commits
ok 34 - prune empty collapsed merges
ok 35 - prune empty works even without index/tree filters
ok 36 - --prune-empty is able to prune root commit
ok 37 - --prune-empty is able to prune entire branch
ok 38 - --remap-to-ancestor with filename filters
ok 39 - automatic remapping to ancestor with filename filters
ok 40 - setup submodule
ok 41 - rewrite submodule with another content
ok 42 - replace submodule revision
ok 43 - filter commit message without trailing newline
ok 44 - tree-filter deals with object name vs pathname ambiguity
ok 45 - rewrite repository including refs that point at non-commit object
ok 46 - filter-branch handles ref deletion
ok 47 - filter-branch handles ref rewrite
ok 48 - filter-branch handles ancestor rewrite
# passed all 48 test(s)
1..48
*** t7004-tag.sh ***
ok 1 - setup
ok 2 - listing all tags in an empty tree should succeed
ok 3 - listing all tags in an empty tree should output nothing
ok 4 - sort tags, ignore case
ok 5 - looking for a tag in an empty tree should fail
ok 6 - creating a tag in an empty tree should fail
ok 7 - creating a tag for HEAD in an empty tree should fail
ok 8 - creating a tag for an unknown revision should fail
ok 9 - creating a tag using default HEAD should succeed
ok 10 - creating a tag with --create-reflog should create reflog
ok 11 - annotated tag with --create-reflog has correct message
ok 12 - --create-reflog does not create reflog on failure
ok 13 - option core.logAllRefUpdates=always creates reflog
ok 14 - listing all tags if one exists should succeed
ok 15 - Multiple -l or --list options are equivalent to one -l option
ok 16 - listing all tags if one exists should output that tag
ok 17 - listing a tag using a matching pattern should succeed
ok 18 - listing a tag with --ignore-case
ok 19 - listing a tag using a matching pattern should output that tag
ok 20 - listing tags using a non-matching pattern should succeed
ok 21 - listing tags using a non-matching pattern should output nothing
ok 22 - trying to create a tag with the name of one existing should fail
ok 23 - trying to create a tag with a non-valid name should fail
ok 24 - creating a tag using HEAD directly should succeed
ok 25 - --force can create a tag with the name of one existing
ok 26 - --force is moot with a non-existing tag name
ok 27 - trying to delete an unknown tag should fail
ok 28 - trying to delete tags without params should succeed and do nothing
ok 29 - deleting two existing tags in one command should succeed
ok 30 - creating a tag with the name of another deleted one should succeed
ok 31 - trying to delete two tags, existing and not, should fail in the 2nd
ok 32 - trying to delete an already deleted tag should fail
ok 33 - listing all tags should print them ordered
ok 34 - listing tags with substring as pattern must print those matching
ok 35 - listing tags with a suffix as pattern must print those matching
ok 36 - listing tags with a prefix as pattern must print those matching
ok 37 - listing tags using a name as pattern must print that one matching
ok 38 - listing tags using a name as pattern must print that one matching
ok 39 - listing tags with ? in the pattern should print those matching
ok 40 - listing tags using v.* should print nothing because none have v.
ok 41 - listing tags using v* should print only those having v
ok 42 - tag -l can accept multiple patterns
ok 43 - tag -l <pattern> -l <pattern> works, as our buggy documentation previously suggested
ok 44 - listing tags in column
ok 45 - listing tags in column with column.*
ok 46 - listing tag with -n --column should fail
ok 47 - listing tags -n in column with column.ui ignored
ok 48 - a non-annotated tag created without parameters should point to HEAD
ok 49 - trying to verify an unknown tag should fail
ok 50 - trying to verify a non-annotated and non-signed tag should fail
ok 51 - trying to verify many non-annotated or unknown tags, should fail
ok 52 - creating an annotated tag with -m message should succeed
ok 53 - set up editor
ok 54 - creating an annotated tag with -m message --edit should succeed
ok 55 - creating an annotated tag with -F messagefile should succeed
ok 56 - set up editor
ok 57 - creating an annotated tag with -F messagefile --edit should succeed
ok 58 - creating an annotated tag with -F - should succeed
ok 59 - trying to create a tag with a non-existing -F file should fail
ok 60 - trying to create tags giving both -m or -F options should fail
ok 61 - creating a tag with an empty -m message should succeed
ok 62 - creating a tag with an empty -F messagefile should succeed
ok 63 - extra blanks in the message for an annotated tag should be removed
ok 64 - creating a tag with blank -m message with spaces should succeed
ok 65 - creating a tag with blank -F messagefile with spaces should succeed
ok 66 - creating a tag with -F file of spaces and no newline should succeed
ok 67 - creating a tag using a -F messagefile with #comments should succeed
ok 68 - creating a tag with a #comment in the -m message should succeed
ok 69 - creating a tag with #comments in the -F messagefile should succeed
ok 70 - creating a tag with a file of #comment and no newline should succeed
ok 71 - listing the one-line message of a non-signed tag should succeed
ok 72 - The -n 100 invocation means -n --list 100, not -n100
ok 73 - listing the zero-lines message of a non-signed tag should succeed
ok 74 - listing many message lines of a non-signed tag should succeed
ok 75 - annotations for blobs are empty
ok 76 - git tag --format with ahead-behind
ok 77 # skip trying to verify an annotated non-signed tag should fail (missing GPG)
ok 78 # skip trying to verify a file-annotated non-signed tag should fail (missing GPG)
ok 79 # skip trying to verify two annotated non-signed tags should fail (missing GPG)
ok 80 # skip creating a signed tag with -m message should succeed (missing GPG)
ok 81 # skip sign with a given key id (missing GPG)
ok 82 # skip sign with an unknown id (1) (missing GPG)
ok 83 # skip sign with an unknown id (2) (missing GPG)
ok 84 # skip -u implies signed tag (missing GPG)
ok 85 # skip creating a signed tag with -F messagefile should succeed (missing GPG)
ok 86 # skip creating a signed tag with -F - should succeed (missing GPG)
ok 87 # skip -s implies annotated tag (missing GPG)
ok 88 # skip git tag -s implied if configured with tag.forcesignannotated (missing GPG)
ok 89 # skip lightweight with no message when configured with tag.forcesignannotated (missing GPG)
ok 90 # skip git tag -a disable configured tag.forcesignannotated (missing GPG)
ok 91 # skip git tag --sign enable GPG sign (missing GPG)
ok 92 # skip git tag configured tag.gpgsign enables GPG sign (missing GPG)
ok 93 # skip git tag --no-sign configured tag.gpgsign skip GPG sign (missing GPG)
ok 94 # skip trying to create a signed tag with non-existing -F file should fail (missing GPG)
ok 95 # skip verifying a signed tag should succeed (missing GPG)
ok 96 # skip verifying two signed tags in one command should succeed (missing GPG)
ok 97 # skip verifying many signed and non-signed tags should fail (missing GPG)
ok 98 # skip verifying a forged tag should fail (missing GPG)
ok 99 # skip verifying a proper tag with --format pass and format accordingly (missing GPG)
ok 100 # skip verifying a forged tag with --format should fail silently (missing GPG)
ok 101 # skip creating a signed tag with an empty -m message should succeed (missing GPG)
ok 102 # skip creating a signed tag with an empty -F messagefile should succeed (missing GPG)
ok 103 # skip extra blanks in the message for a signed tag should be removed (missing GPG)
ok 104 # skip creating a signed tag with a blank -m message should succeed (missing GPG)
ok 105 # skip creating a signed tag with blank -F file with spaces should succeed (missing GPG)
ok 106 # skip creating a signed tag with spaces and no newline should succeed (missing GPG)
ok 107 # skip signed tag with embedded PGP message (missing GPG)
ok 108 # skip creating a signed tag with a -F file with #comments should succeed (missing GPG)
ok 109 # skip creating a signed tag with #commented -m message should succeed (missing GPG)
ok 110 # skip creating a signed tag with #commented -F messagefile should succeed (missing GPG)
ok 111 # skip creating a signed tag with a #comment and no newline should succeed (missing GPG)
ok 112 # skip listing the one-line message of a signed tag should succeed (missing GPG)
ok 113 # skip listing the zero-lines message of a signed tag should succeed (missing GPG)
ok 114 # skip listing many message lines of a signed tag should succeed (missing GPG)
ok 115 # skip creating a signed tag pointing to a tree should succeed (missing GPG)
ok 116 # skip creating a signed tag pointing to a blob should succeed (missing GPG)
ok 117 # skip creating a signed tag pointing to another tag should succeed (missing GPG)
ok 118 # skip creating a signed tag with rfc1991 (missing RFC1991,GPG of GPG,RFC1991)
ok 119 # skip reediting a signed tag body omits signature (missing RFC1991,GPG of GPG,RFC1991)
ok 120 # skip verifying rfc1991 signature (missing RFC1991,GPG of GPG,RFC1991)
ok 121 # skip list tag with rfc1991 signature (missing RFC1991,GPG of GPG,RFC1991)
ok 122 # skip verifying rfc1991 signature without --rfc1991 (missing RFC1991,GPG of GPG,RFC1991)
ok 123 # skip list tag with rfc1991 signature without --rfc1991 (missing RFC1991,GPG of GPG,RFC1991)
ok 124 # skip reediting a signed tag body omits signature (missing RFC1991,GPG of GPG,RFC1991)
ok 125 # skip git tag -s fails if gpg is misconfigured (bad key) (missing GPG)
ok 126 # skip git tag -s fails if gpg is misconfigured (bad signature format) (missing GPG)
ok 127 # skip git verifies tag is valid with double signature (missing GPG)
ok 128 # skip git tag -s fails if gpgsm is misconfigured (bad key) (missing GPGSM)
ok 129 # skip git tag -s fails if gpgsm is misconfigured (bad signature format) (missing GPGSM)
ok 130 # skip verify signed tag fails when public key is not present (missing GPG)
ok 131 - git tag -a fails if tag annotation is empty
ok 132 - message in editor has initial comment
ok 133 - message in editor has initial comment: first line
ok 134 - message in editor has initial comment: remainder
ok 135 - overwriting an annotated tag should use its previous body
ok 136 - filename for the message is relative to cwd
ok 137 - filename for the message is relative to cwd
ok 138 - creating second commit and tag
ok 139 - creating third commit without tag
ok 140 - checking that first commit is in all tags (hash)
ok 141 - checking that first commit is in all tags (tag)
ok 142 - checking that first commit is in all tags (relative)
ok 143 - checking that first commit is not listed in any tag with --no-contains  (hash)
ok 144 - checking that first commit is in all tags (tag)
ok 145 - checking that first commit is in all tags (relative)
ok 146 - checking that second commit only has one tag
ok 147 - inverse of the last test, with --no-contains
ok 148 - checking that third commit has no tags
ok 149 - conversely --no-contains on the third commit lists all tags
ok 150 - creating simple branch
ok 151 - checking that branch head only has one tag
ok 152 - checking that branch head with --no-contains lists all but one tag
ok 153 - merging original branch into this branch
ok 154 - checking that original branch head has one tag now
ok 155 - checking that original branch head with --no-contains lists all but one tag now
ok 156 - checking that initial commit is in all tags
ok 157 - checking that --contains can be used in non-list mode
ok 158 - checking that initial commit is in all tags with --no-contains
ok 159 - mixing incompatibles modes and options is forbidden
ok 160 - mixing incompatible modes with --contains is forbidden
ok 161 - Doing 'git tag --list-like --contains <commit> <pattern> is permitted
ok 162 - mixing incompatible modes with --with is forbidden
ok 163 - Doing 'git tag --list-like --with <commit> <pattern> is permitted
ok 164 - mixing incompatible modes with --no-contains is forbidden
ok 165 - Doing 'git tag --list-like --no-contains <commit> <pattern> is permitted
ok 166 - mixing incompatible modes with --without is forbidden
ok 167 - Doing 'git tag --list-like --without <commit> <pattern> is permitted
ok 168 - mixing incompatible modes with --merged is forbidden
ok 169 - Doing 'git tag --list-like --merged <commit> <pattern> is permitted
ok 170 - mixing incompatible modes with --no-merged is forbidden
ok 171 - Doing 'git tag --list-like --no-merged <commit> <pattern> is permitted
ok 172 - mixing incompatible modes with --points-at is forbidden
ok 173 - Doing 'git tag --list-like --points-at <commit> <pattern> is permitted
ok 174 - --points-at can be used in non-list mode
ok 175 - --points-at is a synonym for --points-at HEAD
ok 176 - --points-at finds lightweight tags
ok 177 - --points-at finds annotated tags of commits
ok 178 - --points-at finds annotated tags of tags
ok 179 - recursive tagging should give advice
ok 180 - multiple --points-at are OR-ed together
ok 181 - lexical sort
ok 182 - version sort
ok 183 - reverse version sort
ok 184 - reverse lexical sort
ok 185 - configured lexical sort
ok 186 - option override configured sort
ok 187 - --no-sort cancels config sort keys
ok 188 - --no-sort cancels command line sort keys
ok 189 - --no-sort without subsequent --sort prints expected tags
ok 190 - invalid sort parameter on command line
ok 191 - invalid sort parameter in configuratoin
ok 192 - version sort handles empty value for versionsort.{prereleaseSuffix,suffix}
ok 193 - version sort with prerelease reordering
ok 194 - reverse version sort with prerelease reordering
ok 195 - version sort with prerelease reordering and common leading character
ok 196 - version sort with prerelease reordering, multiple suffixes and common leading character
ok 197 - version sort with prerelease reordering, multiple suffixes match the same tag
ok 198 - version sort with prerelease reordering, multiple suffixes match starting at the same position
ok 199 - version sort with general suffix reordering
ok 200 - versionsort.suffix overrides versionsort.prereleaseSuffix
ok 201 - version sort with very long prerelease suffix
ok 202 - --contains and --no-contains work in a deep repo
ok 203 - --format should list tags as per format given
ok 204 - --format --omit-empty works
ok 205 - git tag -l with --format="%(rest)" must fail
ok 206 - set up color tests
ok 207 - %(color) omitted without tty
ok 208 - %(color) present with tty
ok 209 - --color overrides auto-color
ok 210 - color.ui=always overrides auto-color
ok 211 - setup --merged test tags
ok 212 - --merged can be used in non-list mode
ok 213 - --merged is compatible with --no-merged
ok 214 - --merged shows merged tags
ok 215 - --no-merged show unmerged tags
ok 216 - --no-merged can be used in non-list mode
ok 217 - ambiguous branch/tags not marked
ok 218 - --contains combined with --no-contains
ok 219 - Does --[no-]contains stop at commits? Yes!
ok 220 - If tag is created then tag message file is unlinked
ok 221 - If tag cannot be created then tag message file is not unlinked
# passed all 221 test(s)
1..221
*** t7005-editor.sh ***
ok 1 - determine default editor
ok 2 - setup
ok 3 - dumb should error out when falling back on vi
ok 4 - dumb should prefer EDITOR to VISUAL
ok 5 - Using vi
ok 6 - Using EDITOR
ok 7 - Using VISUAL
ok 8 - Using core_editor
ok 9 - Using GIT_EDITOR
ok 10 - Using vi (override)
ok 11 - Using EDITOR (override)
ok 12 - Using VISUAL (override)
ok 13 - Using core_editor (override)
ok 14 - Using GIT_EDITOR (override)
ok 15 - editor with a space
ok 16 - core.editor with a space
# passed all 16 test(s)
1..16
*** t7006-pager.sh ***
ok 1 - determine default pager
ok 2 - setup
ok 3 - some commands use a pager
not ok 4 - pager runs from subdir # TODO known breakage
ok 5 - LESS and LV envvars are set for pagination
ok 6 - LESS and LV envvars set by git-sh-setup
ok 7 - some commands do not use a pager
ok 8 - no pager when stdout is a pipe
ok 9 - no pager when stdout is a regular file
ok 10 - git --paginate rev-list uses a pager
ok 11 - no pager even with --paginate when stdout is a pipe
ok 12 - no pager with --no-pager
ok 13 - configuration can disable pager
ok 14 - configuration can enable pager (from subdir)
ok 15 - git tag -l defaults to paging
ok 16 - git tag -l respects pager.tag
ok 17 - git tag -l respects --no-pager
ok 18 - git tag with no args defaults to paging
ok 19 - git tag with no args respects pager.tag
ok 20 - git tag --contains defaults to paging
ok 21 - git tag --contains respects pager.tag
ok 22 - git tag -a defaults to not paging
ok 23 - git tag -a ignores pager.tag
ok 24 - git tag -a respects --paginate
ok 25 - git tag as alias ignores pager.tag with -a
ok 26 - git tag as alias respects pager.tag with -l
ok 27 - git branch defaults to paging
ok 28 - git branch respects pager.branch
ok 29 - git branch respects --no-pager
ok 30 - git branch --edit-description ignores pager.branch
ok 31 - git branch --set-upstream-to ignores pager.branch
ok 32 - git config ignores pager.config when setting
ok 33 - git config --edit ignores pager.config
ok 34 - git config --get ignores pager.config
ok 35 - git config --get-urlmatch defaults to paging
ok 36 - git config --get-all respects pager.config
ok 37 - git config --list defaults to paging
ok 38 - tests can detect color
ok 39 - no color when stdout is a regular file
ok 40 - color when writing to a pager
ok 41 - colors are suppressed by color.pager
ok 42 - color when writing to a file intended for a pager
ok 43 - colors are sent to pager for external commands
ok 44 - setup: some aliases
ok 45 - git log - default pager is used by default
ok 46 - git log - PAGER overrides default pager
ok 47 - git log - repository-local core.pager setting overrides PAGER
ok 48 - git log - core.pager overrides PAGER from subdirectory
ok 49 - git log - GIT_PAGER overrides core.pager
ok 50 - git -p log - default pager is used by default
ok 51 - git -p log - PAGER overrides default pager
ok 52 - git -p log - repository-local core.pager setting overrides PAGER
ok 53 - git -p log - core.pager overrides PAGER from subdirectory
ok 54 - git -p log - GIT_PAGER overrides core.pager
ok 55 - git aliasedlog - default pager is used by default
ok 56 - git aliasedlog - PAGER overrides default pager
ok 57 - git aliasedlog - repository-local core.pager setting overrides PAGER
ok 58 - git aliasedlog - core.pager overrides PAGER from subdirectory
ok 59 - git aliasedlog - GIT_PAGER overrides core.pager
ok 60 - git -p aliasedlog - default pager is used by default
ok 61 - git -p aliasedlog - PAGER overrides default pager
ok 62 - git -p aliasedlog - repository-local core.pager setting overrides PAGER
ok 63 - git -p aliasedlog - core.pager overrides PAGER from subdirectory
ok 64 - git -p aliasedlog - GIT_PAGER overrides core.pager
ok 65 - git -p true - default pager is used by default
ok 66 - git -p true - PAGER overrides default pager
ok 67 - git -p true - repository-local core.pager setting overrides PAGER
ok 68 - git -p true - core.pager overrides PAGER from subdirectory
ok 69 - git -p true - GIT_PAGER overrides core.pager
ok 70 - git -p request-pull - default pager is used by default
ok 71 - git -p request-pull - PAGER overrides default pager
ok 72 - git -p request-pull - repository-local core.pager setting overrides PAGER
ok 73 - git -p request-pull - core.pager overrides PAGER from subdirectory
ok 74 - git -p request-pull - GIT_PAGER overrides core.pager
ok 75 - git -p - default pager is used by default
ok 76 - git -p - PAGER overrides default pager
not ok 77 - git -p - repository-local core.pager setting is not used # TODO known breakage
ok 78 - git -p - GIT_PAGER overrides core.pager
ok 79 - core.pager in repo config works and retains cwd
ok 80 - core.pager is found via alias in subdirectory
not ok 81 - no pager for 'git -p nonsense' # TODO known breakage
ok 82 - git shortlog - default pager is used by default
ok 83 - git shortlog - PAGER overrides default pager
ok 84 - git shortlog - repository-local core.pager setting overrides PAGER
ok 85 - git shortlog - core.pager overrides PAGER from subdirectory
ok 86 - git shortlog - GIT_PAGER overrides core.pager
ok 87 - setup: configure shortlog not to paginate
ok 88 - no pager for 'git shortlog'
ok 89 - git shortlog - core.pager is not used from subdirectory
ok 90 - git -p shortlog - default pager is used by default
ok 91 - git -p shortlog - core.pager overrides PAGER from subdirectory
ok 92 - git -p apply </dev/null - core.pager overrides PAGER from subdirectory
ok 93 - command-specific pager
ok 94 - command-specific pager overrides core.pager
ok 95 - command-specific pager overridden by environment
ok 96 - setup external command
ok 97 - command-specific pager works for external commands
ok 98 - sub-commands of externals use their own pager
ok 99 - external command pagers override sub-commands
ok 100 - command with underscores does not complain
ok 101 - git tag with auto-columns 
ok 102 - setup trace2
ok 103 - setup large log output
ok 104 - git returns SIGPIPE on early pager exit
ok 105 - git returns SIGPIPE on early pager non-zero exit
ok 106 - git discards pager non-zero exit without SIGPIPE
ok 107 - git skips paging nonexisting command
ok 108 - git returns SIGPIPE on propagated signals from pager
ok 109 - non-existent pager doesnt cause crash
# still have 3 known breakage(s)
# passed all remaining 106 test(s)
1..109
*** t7007-show.sh ***
ok 1 - setup
ok 2 - showing a tag that point at a missing object
ok 3 - set up a bit of history
ok 4 - showing two commits
ok 5 - showing a tree
ok 6 - showing two trees
ok 7 - showing a trees is not recursive
ok 8 - showing a range walks (linear)
ok 9 - showing a range walks (Y shape, ^ first)
ok 10 - showing a range walks (Y shape, ^ last)
ok 11 - showing with -N walks
ok 12 - showing annotated tag
ok 13 - showing annotated tag plus commit
ok 14 - showing range
ok 15 - -s suppresses diff
ok 16 - --quiet suppresses diff
ok 17 - show --graph is forbidden
# passed all 17 test(s)
1..17
*** t7008-filter-branch-null-sha1.sh ***
ok 1 - setup: base commits
ok 2 - setup: a commit with a bogus null sha1 in the tree
ok 3 - setup: bring HEAD and index in sync
ok 4 - noop filter-branch complains
ok 5 - filter commands are still checked
ok 6 - removing the broken entry works
# passed all 6 test(s)
1..6
*** t7010-setup.sh ***
ok 1 - setup
ok 2 - git add (absolute)
ok 3 - git add (funny relative)
ok 4 - git rm (absolute)
ok 5 - git rm (funny relative)
ok 6 - git ls-files (absolute)
ok 7 - git ls-files (relative #1)
ok 8 - git ls-files (relative #2)
ok 9 - git ls-files (relative #3)
ok 10 - commit using absolute path names
ok 11 - log using absolute path names
ok 12 - blame using absolute path names
ok 13 - setup deeper work tree
ok 14 - add a directory outside the work tree
ok 15 - add a file outside the work tree, nasty case 1
ok 16 - add a file outside the work tree, nasty case 2
# passed all 16 test(s)
1..16
*** t7011-skip-worktree-reading.sh ***
ok 1 - setup
ok 2 - update-index
ok 3 - update-index
ok 4 - update-index --remove
ok 5 - update-index --remove
ok 6 - ls-files --deleted
ok 7 - ls-files --deleted
ok 8 - ls-files --modified
ok 9 - ls-files --modified
ok 10 - diff-index does not examine skip-worktree absent entries
ok 11 - diff-index does not examine skip-worktree dirty entries
ok 12 - diff-files does not examine skip-worktree absent entries
ok 13 - diff-files does not examine skip-worktree dirty entries
ok 14 - commit on skip-worktree absent entries
ok 15 - commit on skip-worktree dirty entries
# passed all 15 test(s)
1..15
*** t7012-skip-worktree-writing.sh ***
ok 1 - setup
ok 2 - read-tree updates worktree, absent case
ok 3 - read-tree updates worktree, dirty case
ok 4 - read-tree removes worktree, absent case
ok 5 - read-tree removes worktree, dirty case
ok 6 - index setup
ok 7 - git-rm fails if worktree is dirty
ok 8 - git-clean, absent case
ok 9 - git-clean, dirty case
ok 10 - --ignore-skip-worktree-entries leaves worktree alone
ok 11 - stash restore in sparse checkout
# passed all 11 test(s)
1..11
*** t7030-verify-tag.sh ***
ok 1 # skip create signed tags (missing GPG)
ok 2 # skip create signed tags x509  (missing GPGSM)
ok 3 # skip verify and show signatures (missing GPG)
ok 4 # skip verify and show signatures x509 (missing GPGSM)
ok 5 # skip verify and show signatures x509 with low minTrustLevel (missing GPGSM)
ok 6 # skip verify and show signatures x509 with matching minTrustLevel (missing GPGSM)
ok 7 # skip verify and show signatures x509 with high minTrustLevel (missing GPGSM)
ok 8 # skip detect fudged signature (missing GPG)
ok 9 # skip verify signatures with --raw (missing GPG)
ok 10 # skip verify signatures with --raw x509 (missing GPGSM)
ok 11 # skip verify multiple tags (missing GPG)
ok 12 # skip verify multiple tags x509 (missing GPGSM)
ok 13 # skip verifying tag with --format (missing GPG)
ok 14 # skip verifying tag with --format="%(rest)" must fail (missing GPG)
ok 15 # skip verifying a forged tag with --format should fail silently (missing GPG)
# passed all 15 test(s)
1..15
*** t7031-verify-tag-signed-ssh.sh ***
ok 1 - create signed tags ssh
ok 2 - create signed tags with keys having defined lifetimes
ok 3 - verify and show ssh signatures
ok 4 - verify-tag exits failure on expired signature key
ok 5 - verify-tag exits failure on not yet valid signature key
ok 6 - verify-tag succeeds with tag date and key validity matching
ok 7 - verify-tag failes with tag date outside of key validity
ok 8 - detect fudged ssh signature
ok 9 - verify ssh signatures with --raw
ok 10 - verify signatures with --raw ssh
ok 11 - verify multiple tags ssh
ok 12 - verifying tag with --format - ssh
ok 13 - verifying a forged tag with --format should fail silently - ssh
ok 14 - rev-list --format=%G
# passed all 14 test(s)
1..14
*** t7060-wtstatus.sh ***
ok 1 - setup
ok 2 - A/A conflict
ok 3 - Report path with conflict
ok 4 - Report new path with conflict
ok 5 - M/D conflict does not segfault
ok 6 - rename & unmerged setup
ok 7 - rename & unmerged status
ok 8 - git diff-index --cached shows 2 added + 1 unmerged
ok 9 - git diff-index --cached -M shows 2 added + 1 unmerged
ok 10 - git diff-index --cached -C shows 2 copies + 1 unmerged
ok 11 - status when conflicts with add and rm advice (deleted by them)
ok 12 - prepare for conflicts
ok 13 - status when conflicts with add and rm advice (both deleted)
ok 14 - status when conflicts with only rm advice (both deleted)
ok 15 - status --branch with detached HEAD
ok 16 - status --porcelain=v1 --branch with detached HEAD
ok 17 - status --porcelain=bogus
# passed all 17 test(s)
1..17
*** t7061-wtstatus-ignore.sh ***
ok 1 - status untracked directory with --ignored
ok 2 - same with gitignore starting with BOM
ok 3 - status untracked files --ignored with pathspec (no match)
ok 4 - status untracked files --ignored with pathspec (literal match)
ok 5 - status untracked files --ignored with pathspec (glob match)
ok 6 - status untracked directory with --ignored -u
ok 7 - status of untracked directory with --ignored works with or without prefix
ok 8 - status prefixed untracked sub-directory with --ignored -u
ok 9 - status ignored directory with --ignore
ok 10 - status ignored directory with --ignore -u
ok 11 - status empty untracked directory with --ignore
ok 12 - status empty untracked directory with --ignore -u
ok 13 - status untracked directory with ignored files with --ignore
ok 14 - status untracked directory with ignored files with --ignore -u
ok 15 - status ignored tracked directory with --ignore
ok 16 - status ignored tracked directory with --ignore -u
ok 17 - status ignored tracked directory and ignored file with --ignore
ok 18 - status ignored tracked directory and ignored file with --ignore -u
ok 19 - status ignored tracked directory and uncommitted file with --ignore
ok 20 - status ignored tracked directory and uncommitted file with --ignore -u
ok 21 - status ignored tracked directory with uncommitted file in untracked subdir with --ignore
ok 22 - status ignored tracked directory with uncommitted file in untracked subdir with --ignore -u
ok 23 - status ignored tracked directory with uncommitted file in tracked subdir with --ignore
ok 24 - status ignored tracked directory with uncommitted file in tracked subdir with --ignore -u
ok 25 - status ignores submodule in excluded directory
# passed all 25 test(s)
1..25
*** t7062-wtstatus-ignorecase.sh ***
ok 1 - status with hash collisions
# passed all 1 test(s)
1..1
*** t7063-status-untracked-cache.sh ***
ok 1 - core.untrackedCache is unset
ok 2 - setup
ok 3 - untracked cache is empty
ok 4 - status first time (empty cache)
ok 5 - untracked cache after first status
ok 6 - status second time (fully populated cache)
ok 7 - untracked cache after second status
ok 8 - untracked cache is bypassed with -uall
ok 9 - untracked cache remains after bypass
ok 10 - if -uall is configured, untracked cache gets populated by default
ok 11 - if -uall was configured, untracked cache is populated
ok 12 - if -uall is configured, untracked cache is used by default
ok 13 - if -uall is configured, untracked cache is bypassed with -unormal
ok 14 - repopulate untracked cache for -unormal
ok 15 - modify in root directory, one dir invalidation
ok 16 - verify untracked cache dump
ok 17 - new .gitignore invalidates recursively
ok 18 - verify untracked cache dump
ok 19 - new info/exclude invalidates everything
ok 20 - verify untracked cache dump
ok 21 - move two from tracked to untracked
ok 22 - status after the move
ok 23 - verify untracked cache dump
ok 24 - move two from untracked to tracked
ok 25 - status after the move
ok 26 - verify untracked cache dump
ok 27 - set up for sparse checkout testing
ok 28 - status after commit
ok 29 - untracked cache correct after commit
ok 30 - set up sparse checkout
ok 31 - create/modify files, some of which are gitignored
ok 32 - test sparse status with untracked cache
ok 33 - untracked cache correct after status
ok 34 - test sparse status again with untracked cache
ok 35 - set up for test of subdir and sparse checkouts
ok 36 - test sparse status with untracked cache and subdir
ok 37 - verify untracked cache dump (sparse/subdirs)
ok 38 - test sparse status again with untracked cache and subdir
ok 39 - move entry in subdir from untracked to cached
ok 40 - move entry in subdir from cached to untracked
ok 41 - --no-untracked-cache removes the cache
ok 42 - git status does not change anything
ok 43 - setting core.untrackedCache to true and using git status creates the cache
ok 44 - using --no-untracked-cache does not fail when core.untrackedCache is true
ok 45 - setting core.untrackedCache to false and using git status removes the cache
ok 46 - using --untracked-cache does not fail when core.untrackedCache is false
ok 47 - setting core.untrackedCache to keep
ok 48 - test ident field is working
ok 49 - untracked cache survives a checkout
ok 50 - untracked cache survives a commit
ok 51 - teardown worktree
ok 52 - setup worktree for symlink test
ok 53 - "status" after symlink replacement should be clean with UC=true
ok 54 - "status" after symlink replacement should be clean with UC=false
ok 55 - setup worktree for non-symlink test
ok 56 - "status" after file replacement should be clean with UC=true
ok 57 - "status" after file replacement should be clean with UC=false
ok 58 - empty repo (no index) and core.untrackedCache
# passed all 58 test(s)
1..58
*** t7064-wtstatus-pv2.sh ***
ok 1 - setup
ok 2 - before initial commit, nothing added, only untracked
ok 3 - before initial commit, things added
ok 4 - before initial commit, things added (-z)
ok 5 - make first commit, comfirm HEAD oid and branch
ok 6 - after first commit, create unstaged changes
ok 7 - after first commit, stash existing changes
ok 8 - after first commit but omit untracked files and branch
ok 9 - after first commit, stage existing changes
ok 10 - rename causes 2 path lines
ok 11 - rename causes 2 path lines (-z)
ok 12 - make second commit, confirm clean and new HEAD oid
ok 13 - confirm ignored files are not printed
ok 14 - ignored files are printed with --ignored
ok 15 - create and commit permanent ignore file
ok 16 - verify --intent-to-add output
ok 17 - verify AA (add-add) conflict
ok 18 - verify UU (edit-edit) conflict
ok 19 - verify upstream fields in branch header
ok 20 - verify --[no-]ahead-behind with V2 format
ok 21 - create and add submodule, submodule appears clean (A. S...)
ok 22 - untracked changes in added submodule (AM S..U)
ok 23 - staged changes in added submodule (AM S.M.)
ok 24 - staged and unstaged changes in added (AM S.M.)
ok 25 - staged and untracked changes in added submodule (AM S.MU)
ok 26 - commit within the submodule appears as new commit in super (AM SC..)
ok 27 - stage submodule in super and commit
ok 28 - make unstaged changes in existing submodule (.M S.M.)
# passed all 28 test(s)
1..28
*** t7101-reset-empty-subdirs.sh ***
ok 1 - creating initial files
ok 2 - creating second files
ok 3 - resetting tree HEAD^
ok 4 - checking initial files exist after rewind
ok 5 - checking lack of path1/path2/COPYING
ok 6 - checking lack of path1/COPYING
ok 7 - checking lack of COPYING
ok 8 - checking checking lack of path1/COPYING-TOO
ok 9 - checking lack of path1/path2
ok 10 - checking lack of path1
# passed all 10 test(s)
1..10
*** t7102-reset.sh ***
ok 1 - creating initial files and commits
ok 2 - no 'git reset --no-soft'
ok 3 - no 'git reset --no-mixed'
ok 4 - no 'git reset --no-hard'
ok 5 - no 'git reset --no-merge'
ok 6 - no 'git reset --no-keep'
ok 7 - reset --hard message
ok 8 - reset --hard message (ISO8859-1 logoutputencoding)
ok 9 - giving a non existing revision should fail
ok 10 - reset --soft with unmerged index should fail
ok 11 - giving paths with options different than --mixed should fail
ok 12 - giving unrecognized options should fail
ok 13 - trying to do reset --soft with pending merge should fail
ok 14 - trying to do reset --soft with pending checkout merge should fail
ok 15 - resetting to HEAD with no changes should succeed and do nothing
ok 16 - --soft reset only should show changes in diff --cached
ok 17 - changing files and redo the last commit should succeed
ok 18 - --hard reset should change the files and undo commits permanently
ok 19 - redoing changes adding them without commit them should succeed
ok 20 - --mixed reset to HEAD should unadd the files
ok 21 - redoing the last two commits should succeed
ok 22 - --hard reset to HEAD should clear a failed merge
ok 23 - --hard reset to ORIG_HEAD should clear a fast-forward merge
ok 24 - test --mixed <paths>
ok 25 - test resetting the index at give paths
ok 26 - resetting an unmodified path is a no-op
ok 27 - --mixed refreshes the index
ok 28 - --mixed --[no-]refresh sets refresh behavior
ok 29 - --mixed preserves skip-worktree
ok 30 - resetting specific path that is unmerged
ok 31 - disambiguation (1)
ok 32 - disambiguation (2)
ok 33 - disambiguation (3)
ok 34 - disambiguation (4)
ok 35 - reset with paths accepts tree
ok 36 - reset -N keeps removed files as intent-to-add
ok 37 - reset --mixed sets up work tree
ok 38 - reset handles --end-of-options
# passed all 38 test(s)
1..38
*** t7103-reset-bare.sh ***
ok 1 - setup non-bare
ok 2 - "hard" reset requires a worktree
ok 3 - "merge" reset requires a worktree
ok 4 - "keep" reset requires a worktree
ok 5 - "mixed" reset is ok
ok 6 - "soft" reset is ok
ok 7 - hard reset works with GIT_WORK_TREE
ok 8 - setup bare
ok 9 - "hard" reset is not allowed in bare
ok 10 - "merge" reset is not allowed in bare
ok 11 - "keep" reset is not allowed in bare
ok 12 - "mixed" reset is not allowed in bare
ok 13 - "soft" reset is allowed in bare
# passed all 13 test(s)
1..13
*** t7104-reset-hard.sh ***
ok 1 - setup
ok 2 - reset --hard should restore unmerged ones
ok 3 - reset --hard did not corrupt index or cache-tree
# passed all 3 test(s)
1..3
*** t7105-reset-patch.sh ***
ok 1 - setup
ok 2 - saying "n" does nothing
ok 3 - git reset -p HEAD
ok 4 - git reset -p @
ok 5 - git reset -p 
ok 6 - git reset -p HEAD^
ok 7 - git reset -p HEAD^^{tree}
ok 8 - git reset -p HEAD^:dir/foo (blob fails)
ok 9 - git reset -p aaaaaaaa (unknown fails)
ok 10 - git reset -p dir
ok 11 - git reset -p -- foo (inside dir)
ok 12 - git reset -p HEAD^ -- dir
ok 13 - none of this moved HEAD
# passed all 13 test(s)
1..13
*** t7106-reset-unborn-branch.sh ***
ok 1 - setup
ok 2 - reset
ok 3 - reset HEAD
ok 4 - reset $file
ok 5 - reset -p
ok 6 - reset --soft is a no-op
ok 7 - reset --hard
# passed all 7 test(s)
1..7
*** t7107-reset-pathspec-file.sh ***
ok 1 - setup
ok 2 - --pathspec-from-file from stdin
ok 3 - --pathspec-from-file from file
ok 4 - NUL delimiters
ok 5 - LF delimiters
ok 6 - no trailing delimiter
ok 7 - CRLF delimiters
ok 8 - quotes
ok 9 - quotes not compatible with --pathspec-file-nul
ok 10 - only touches what was listed
ok 11 - error conditions
# passed all 11 test(s)
1..11
*** t7110-reset-merge.sh ***
ok 1 - setup
ok 2 - reset --merge is ok with changes in file it does not touch
ok 3 - reset --merge is ok when switching back
ok 4 - reset --keep is ok with changes in file it does not touch
ok 5 - reset --keep is ok when switching back
ok 6 - reset --merge discards changes added to index (1)
ok 7 - reset --merge is ok again when switching back (1)
ok 8 - reset --keep fails with changes in index in files it touches
ok 9 - reset --merge discards changes added to index (2)
ok 10 - reset --merge is ok again when switching back (2)
ok 11 - reset --keep keeps changes it does not touch
ok 12 - reset --keep keeps changes when switching back
ok 13 - reset --merge fails with changes in file it touches
ok 14 - reset --keep fails with changes in file it touches
ok 15 - setup 3 different branches
ok 16 - "reset --merge HEAD^" is ok with pending merge
ok 17 - "reset --keep HEAD^" fails with pending merge
ok 18 - "reset --merge HEAD" is ok with pending merge
ok 19 - "reset --keep HEAD" fails with pending merge
ok 20 - --merge is ok with added/deleted merge
ok 21 - --keep fails with added/deleted merge
# passed all 21 test(s)
1..21
*** t7111-reset-table.sh ***
ok 1 - creating initial commits
ok 2 - check: A B C D --soft A B D
ok 3 - check: A B C D --mixed A D D
ok 4 - check: A B C D --hard D D D
ok 5 - check: A B C D --merge XXXXX  
ok 6 - check: A B C D --keep XXXXX  
ok 7 - check: A B C C --soft A B C
ok 8 - check: A B C C --mixed A C C
ok 9 - check: A B C C --hard C C C
ok 10 - check: A B C C --merge XXXXX  
ok 11 - check: A B C C --keep A C C
ok 12 - check: B B C D --soft B B D
ok 13 - check: B B C D --mixed B D D
ok 14 - check: B B C D --hard D D D
ok 15 - check: B B C D --merge D D D
ok 16 - check: B B C D --keep XXXXX  
ok 17 - check: B B C C --soft B B C
ok 18 - check: B B C C --mixed B C C
ok 19 - check: B B C C --hard C C C
ok 20 - check: B B C C --merge C C C
ok 21 - check: B B C C --keep B C C
ok 22 - check: B C C D --soft B C D
ok 23 - check: B C C D --mixed B D D
ok 24 - check: B C C D --hard D D D
ok 25 - check: B C C D --merge XXXXX  
ok 26 - check: B C C D --keep XXXXX  
ok 27 - check: B C C C --soft B C C
ok 28 - check: B C C C --mixed B C C
ok 29 - check: B C C C --hard C C C
ok 30 - check: B C C C --merge B C C
ok 31 - check: B C C C --keep B C C
ok 32 - setting up branches to test with unmerged entries
ok 33 - check: X U B C --soft XXXXX  
ok 34 - check: X U B C --mixed X C C
ok 35 - check: X U B C --hard C C C
ok 36 - check: X U B C --merge C C C
ok 37 - check: X U B C --keep XXXXX  
ok 38 - check: X U B B --soft XXXXX  
ok 39 - check: X U B B --mixed X B B
ok 40 - check: X U B B --hard B B B
ok 41 - check: X U B B --merge B B B
ok 42 - check: X U B B --keep XXXXX  
# passed all 42 test(s)
1..42
*** t7112-reset-submodule.sh ***
ok 1 - git reset --keep --recurse-submodules: added submodule is checked out
ok 2 - git reset --keep --recurse-submodules: added submodule is checked out in empty dir
ok 3 - git reset --keep --recurse-submodules: replace tracked file with submodule checks out submodule
ok 4 - git reset --keep --recurse-submodules: replace directory with submodule
ok 5 - git reset --keep --recurse-submodules: nested submodules are checked out
ok 6 - git reset --keep --recurse-submodules: removed submodule removes submodules working tree
ok 7 - git reset --keep --recurse-submodules: removed submodule absorbs submodules .git directory
ok 8 - git reset --keep --recurse-submodules: replace submodule with a file
not ok 9 - git reset --keep --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 10 - git reset --keep --recurse-submodules: worktrees of nested submodules are removed
ok 11 - git reset --keep --recurse-submodules: modified submodule updates submodule work tree
ok 12 - git reset --keep --recurse-submodules: updating to a missing submodule commit fails
ok 13 - git reset --keep --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 14 - git reset --keep --recurse-submodules: added submodule doesn't remove untracked file with same name
ok 15 - git reset --keep --recurse-submodules: added submodule removes an untracked ignored file
not ok 16 - git reset --keep --recurse-submodules: replace submodule with a directory # TODO known breakage
not ok 17 - git reset --keep --recurse-submodules: replace submodule containing a .git directory with a directory must absorb the git dir # TODO known breakage
ok 18 - git reset --keep --recurse-submodules: replace submodule with a file works ignores ignored files in submodule
ok 19 - git -c submodule.recurse=true reset --keep: modified submodule updates submodule work tree
ok 20 - git reset --keep --recurse-submodules: modified submodule updates submodule recursively
ok 21 - git reset --hard --recurse-submodules: added submodule is checked out
ok 22 - git reset --hard --recurse-submodules: added submodule is checked out in empty dir
ok 23 - git reset --hard --recurse-submodules: replace tracked file with submodule checks out submodule
ok 24 - git reset --hard --recurse-submodules: replace directory with submodule
ok 25 - git reset --hard --recurse-submodules: nested submodules are checked out
ok 26 - git reset --hard --recurse-submodules: removed submodule removes submodules working tree
ok 27 - git reset --hard --recurse-submodules: removed submodule absorbs submodules .git directory
ok 28 - git reset --hard --recurse-submodules: replace submodule with a file
not ok 29 - git reset --hard --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 30 - git reset --hard --recurse-submodules: worktrees of nested submodules are removed
ok 31 - git reset --hard --recurse-submodules: modified submodule updates submodule work tree
ok 32 - git reset --hard --recurse-submodules: updating to a missing submodule commit fails
ok 33 - git reset --hard --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 34 - git reset --hard --recurse-submodules: added submodule does remove untracked unignored file with same name when forced
ok 35 - git reset --hard --recurse-submodules: replace submodule with a directory
ok 36 - git reset --hard --recurse-submodules: replace submodule containing a .git directory with a directory must fail
ok 37 - git reset --hard --recurse-submodules: replace submodule with a file ignoring ignored files
ok 38 - git reset --hard --recurse-submodules: modified submodule does update submodule work tree from invalid commit
ok 39 - git reset --hard --recurse-submodules: updating submodules fixes .git links
ok 40 - git reset --hard --recurse-submodules: changed submodule worktree is reset
ok 41 - git_test_func: added submodule creates empty directory
ok 42 - git_test_func: added submodule leaves existing empty directory alone
ok 43 - git_test_func: replace tracked file with submodule creates empty directory
ok 44 - git_test_func: replace directory with submodule
ok 45 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 46 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 47 - git_test_func: replace submodule with a directory must fail
ok 48 - git_test_func: replace submodule containing a .git directory with a directory must fail
not ok 49 - git_test_func: replace submodule with a file must fail # TODO known breakage
not ok 50 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 51 - git_test_func: modified submodule does not update submodule work tree
ok 52 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 53 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 54 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 55 - git_test_func: added submodule creates empty directory
ok 56 - git_test_func: added submodule leaves existing empty directory alone
ok 57 - git_test_func: replace tracked file with submodule creates empty directory
ok 58 - git_test_func: replace directory with submodule
ok 59 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 60 - git_test_func: removed submodule leaves submodule containing a .git directory alone
ok 61 - git_test_func: replace submodule with a directory must fail
ok 62 - git_test_func: replace submodule containing a .git directory with a directory must fail
not ok 63 - git_test_func: replace submodule with a file must fail # TODO known breakage
not ok 64 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 65 - git_test_func: modified submodule does not update submodule work tree
ok 66 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 67 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 68 - git_test_func: added submodule doesn't remove untracked unignored file with same name
ok 69 - git_test_func: added submodule creates empty directory
ok 70 - git_test_func: added submodule leaves existing empty directory alone
ok 71 - git_test_func: replace tracked file with submodule creates empty directory
ok 72 - git_test_func: replace directory with submodule
ok 73 - git_test_func: removed submodule leaves submodule directory and its contents in place
ok 74 - git_test_func: removed submodule leaves submodule containing a .git directory alone
not ok 75 - git_test_func: replace submodule with a directory must fail # TODO known breakage
not ok 76 - git_test_func: replace submodule containing a .git directory with a directory must fail # TODO known breakage
not ok 77 - git_test_func: replace submodule with a file must fail # TODO known breakage
not ok 78 - git_test_func: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 79 - git_test_func: modified submodule does not update submodule work tree
ok 80 - git_test_func: modified submodule does not update submodule work tree to invalid commit
ok 81 - git_test_func: modified submodule does not update submodule work tree from invalid commit
ok 82 - git_test_func: added submodule does remove untracked unignored file with same name when forced
# still have 12 known breakage(s)
# passed all remaining 70 test(s)
1..82
*** t7113-post-index-change-hook.sh ***
ok 1 - setup
ok 2 - test status, add, commit, others trigger hook without flags set
ok 3 - test checkout and reset trigger the hook
ok 4 - test reset --mixed and update-index triggers the hook
# passed all 4 test(s)
1..4
*** t7201-co.sh ***
ok 1 - setup
ok 2 - checkout from non-existing branch
ok 3 - checkout with dirty tree without -m
ok 4 - checkout with unrelated dirty tree without -m
ok 5 - checkout -m with dirty tree
ok 6 - checkout -m with dirty tree, renamed
ok 7 - checkout -m with merge conflict
ok 8 - format of merge conflict from checkout -m
ok 9 - checkout --merge --conflict=diff3 <branch>
ok 10 - switch to another branch while carrying a deletion
ok 11 - checkout to detach HEAD (with advice declined)
ok 12 - checkout to detach HEAD
ok 13 - checkout to detach HEAD with branchname^
ok 14 - checkout to detach HEAD with :/message
ok 15 - checkout to detach HEAD with HEAD^0
ok 16 - checkout with ambiguous tag/branch names
ok 17 - checkout with ambiguous tag/branch names
ok 18 - switch branches while in subdirectory
ok 19 - checkout specific path while in subdirectory
ok 20 - checkout w/--track sets up tracking
ok 21 - checkout w/autosetupmerge=always sets up tracking
ok 22 - checkout w/--track from non-branch HEAD fails
ok 23 - checkout w/--track from tag fails
ok 24 - detach a symbolic link HEAD
ok 25 - checkout with --track fakes a sensible -b <name>
ok 26 - checkout with --track, but without -b, fails with too short tracked name
ok 27 - checkout an unmerged path should fail
ok 28 - checkout with an unmerged path can be ignored
ok 29 - checkout unmerged stage
ok 30 - checkout path with --merge from tree-ish is a no-no
ok 31 - checkout with --merge
ok 32 - checkout -m works after (mistaken) resolution
ok 33 - checkout -m works after (mistaken) resolution to remove
ok 34 - checkout with --merge, in diff3 -m style
ok 35 - checkout --conflict=merge, overriding config
ok 36 - checkout --conflict=diff3
ok 37 - checkout --conflict=diff3 --no-conflict does not merge
ok 38 - checkout --conflict=diff3 --no-merge does not merge
ok 39 - checkout --no-merge --conflict=diff3 does merge
ok 40 - checkout --merge --conflict=diff3 --no-conflict does merge
ok 41 - checkout with invalid conflict style
ok 42 - failing checkout -b should not break working tree
ok 43 - switch out of non-branch
ok 44 - custom merge driver with checkout -m
ok 45 - tracking info copied with autoSetupMerge=inherit
# passed all 45 test(s)
1..45
*** t7300-clean.sh ***
ok 1 - setup
ok 2 - git clean with skip-worktree .gitignore
ok 3 - git clean
ok 4 - git clean src/
ok 5 - git clean src/ src/
ok 6 - git clean with prefix
ok 7 - git clean with relative prefix
ok 8 - git clean with absolute path
ok 9 - git clean with out of work tree relative path
ok 10 - git clean with out of work tree absolute path
ok 11 - git clean -d with prefix and path
ok 12 - git clean symbolic link
ok 13 - git clean with wildcard
ok 14 - git clean -n
ok 15 - git clean -d
ok 16 - git clean -d src/ examples/
ok 17 - git clean -x
ok 18 - git clean -d -x
ok 19 - git clean -d -x with ignored tracked directory
ok 20 - git clean -X
ok 21 - git clean -d -X
ok 22 - git clean -d -X with ignored tracked directory
ok 23 - clean.requireForce defaults to true
ok 24 - clean.requireForce
ok 25 - clean.requireForce and -n
ok 26 - clean.requireForce and -f
ok 27 - clean.requireForce and --interactive
ok 28 - core.excludesfile
ok 29 - removal failure
ok 30 - nested git work tree
ok 31 - should clean things that almost look like git but are not
ok 32 - should not clean submodules
ok 33 - should avoid cleaning possible submodules
ok 34 - nested (empty) git should be kept
ok 35 - nested bare repositories should be cleaned
not ok 36 - nested (empty) bare repositories should be cleaned even when in .git # TODO known breakage
not ok 37 - nested (non-empty) bare repositories should be cleaned even when in .git # TODO known breakage
ok 38 - giving path in nested git work tree will NOT remove it
ok 39 - giving path to nested .git will not remove it
ok 40 - giving path to nested .git/ will NOT remove contents
ok 41 - force removal of nested git work tree
ok 42 - git clean -e
ok 43 - git clean -d with an unreadable empty directory
ok 44 - git clean -d respects pathspecs (dir is prefix of pathspec)
ok 45 - git clean -d respects pathspecs (pathspec is prefix of dir)
ok 46 - git clean -d skips untracked dirs containing ignored files
ok 47 - git clean -d skips nested repo containing ignored files
ok 48 - git clean handles being told what to clean
ok 49 - git clean handles being told what to clean, with -d
ok 50 - git clean works if a glob is passed without -d
ok 51 - git clean works if a glob is passed with -d
ok 52 # skip handle clean & core.longpaths = false nicely (missing MINGW)
ok 53 - clean untracked paths by pathspec
ok 54 - avoid traversing into ignored directories
ok 55 - traverse into directories that may have ignored entries
# still have 2 known breakage(s)
# passed all remaining 53 test(s)
1..55
*** t7301-clean-interactive.sh ***
ok 1 - setup
ok 2 - git clean -i (c: clean hotkey)
ok 3 - git clean -i (cl: clean prefix)
ok 4 - git clean -i (quit)
ok 5 - git clean -i (Ctrl+D)
ok 6 - git clean -id (filter all)
ok 7 - git clean -id (filter patterns)
ok 8 - git clean -id (filter patterns 2)
ok 9 - git clean -id (select - all)
ok 10 - git clean -id (select - none)
ok 11 - git clean -id (select - number)
ok 12 - git clean -id (select - number 2)
ok 13 - git clean -id (select - number 3)
ok 14 - git clean -id (select - filenames)
ok 15 - git clean -id (select - range)
ok 16 - git clean -id (select - range 2)
ok 17 - git clean -id (inverse select)
ok 18 - git clean -id (ask)
ok 19 - git clean -id (ask - Ctrl+D)
ok 20 - git clean -id with prefix and path (filter)
ok 21 - git clean -id with prefix and path (select by name)
ok 22 - git clean -id with prefix and path (ask)
ok 23 - git clean -i paints the header in HEADER color
# passed all 23 test(s)
1..23
*** t7400-submodule-basic.sh ***
ok 1 - setup - enable local submodules
ok 2 - submodule usage: -h
ok 3 - submodule usage: --recursive
ok 4 - submodule usage: status --
ok 5 - submodule usage: status --quiet
ok 6 - submodule usage: status --cached
ok 7 - submodule deinit works on empty repository
ok 8 - setup - initial commit
ok 9 - submodule init aborts on missing .gitmodules file
ok 10 - submodule update aborts on missing .gitmodules file
ok 11 - submodule update aborts on missing gitmodules url
ok 12 - add aborts on repository with no commits
ok 13 - status should ignore inner git repo when not added
ok 14 - setup - repository in init subdirectory
ok 15 - setup - commit with gitlink
ok 16 - setup - hide init subdirectory
ok 17 - setup - repository to add submodules to
ok 18 - submodule add
ok 19 - submodule add (absolute path)
ok 20 - setup parent and one repository
ok 21 - redirected submodule add does not show progress
ok 22 - redirected submodule add --progress does show progress
ok 23 - submodule add to .gitignored path fails
ok 24 - submodule add to .gitignored path with --force
ok 25 - submodule add to path with tracked content fails
ok 26 - submodule add to reconfigure existing submodule with --force
ok 27 - submodule add relays add --dry-run stderr
ok 28 - submodule add --branch
ok 29 - submodule add with ./ in path
ok 30 - submodule add with /././ in path
ok 31 - submodule add with // in path
ok 32 - submodule add with /.. in path
ok 33 - submodule add with ./, /.. and // in path
ok 34 - submodule add with \\ in path
ok 35 - submodule add in subdirectory
ok 36 - submodule add in subdirectory with relative path should fail
ok 37 - setup - add an example entry to .gitmodules
ok 38 - status should fail for unmapped paths
ok 39 - setup - map path in .gitmodules
ok 40 - status should only print one line
ok 41 - status from subdirectory should have the same SHA1
ok 42 - setup - fetch commit name from submodule
ok 43 - status should initially be "missing"
ok 44 - init should register submodule url in .git/config
ok 45 - status should still be "missing" after initializing
ok 46 - init should fail with unknown submodule
ok 47 - update should fail with unknown submodule
ok 48 - status should fail with unknown submodule
ok 49 - sync should fail with unknown submodule
ok 50 - update should fail when path is used by a file
ok 51 - update should fail when path is used by a nonempty directory
ok 52 - update should work when path is an empty dir
ok 53 - status should be "up-to-date" after update
ok 54 - status "up-to-date" from subdirectory
ok 55 - status "up-to-date" from subdirectory with path
ok 56 - status should be "modified" after submodule commit
ok 57 - "submodule --cached" command forms should be identical
ok 58 - the --cached sha1 should be rev1
ok 59 - git diff should report the SHA1 of the new submodule commit
ok 60 - update should checkout rev1
ok 61 - status should be "up-to-date" after update
ok 62 - checkout superproject with subproject already present
ok 63 - apply submodule diff
ok 64 - update --init
ok 65 - update --init from subdirectory
ok 66 - do not add files from a submodule
ok 67 - gracefully add/reset submodule with a trailing slash
ok 68 - ls-files gracefully handles trailing slash
ok 69 - moving to a commit without submodule does not leave empty dir
ok 70 - submodule <invalid-subcommand> fails
ok 71 - add submodules without specifying an explicit path
ok 72 - add should fail when path is used by a file
ok 73 - add should fail when path is used by an existing directory
ok 74 - use superproject as upstream when path is relative and no url is set there
ok 75 - set up for relative path tests
ok 76 - ../subrepo works with URL - ssh://hostname/repo
ok 77 - ../subrepo works with port-qualified URL - ssh://hostname:22/repo
ok 78 - ../subrepo path works with local path - //somewhere else/repo
ok 79 - ../subrepo works with file URL - file:///tmp/repo
ok 80 - ../subrepo works with helper URL- helper:://hostname/repo
ok 81 - ../subrepo works with scp-style URL - user@host:repo
ok 82 - ../subrepo works with scp-style URL - user@host:path/to/repo
ok 83 - ../subrepo works with relative local path - foo
ok 84 - ../subrepo works with relative local path - foo/bar
ok 85 - ../subrepo works with relative local path - ./foo
ok 86 - ../subrepo works with relative local path - ./foo/bar
ok 87 - ../subrepo works with relative local path - ../foo
ok 88 - ../subrepo works with relative local path - ../foo/bar
ok 89 - ../bar/a/b/c works with relative local path - ../foo/bar.git
ok 90 - moving the superproject does not break submodules
ok 91 - moving the submodule does not break the superproject
ok 92 - submodule add --name allows to replace a submodule with another at the same path
ok 93 - recursive relative submodules stay relative
ok 94 - submodule add with an existing name fails unless forced
ok 95 - set up a second submodule
ok 96 - submodule deinit works on repository without submodules
ok 97 - submodule deinit should remove the whole submodule section from .git/config
ok 98 - submodule deinit should unset core.worktree
ok 99 - submodule deinit from subdirectory
ok 100 - submodule deinit . deinits all initialized submodules
ok 101 - submodule deinit --all deinits all initialized submodules
ok 102 - submodule deinit deinits a submodule when its work tree is missing or empty
ok 103 - submodule deinit fails when the submodule contains modifications unless forced
ok 104 - submodule deinit fails when the submodule contains untracked files unless forced
ok 105 - submodule deinit fails when the submodule HEAD does not match unless forced
ok 106 - submodule deinit is silent when used on an uninitialized submodule
ok 107 - submodule deinit absorbs .git directory if .git is a directory
ok 108 - submodule with UTF-8 name
ok 109 - submodule add clone shallow submodule
ok 110 - setup superproject with submodules
ok 111 - submodule update --init with a specification
ok 112 - submodule update --init with submodule.active set
ok 113 - submodule update and setting submodule.<name>.active
ok 114 - clone active submodule without submodule url set
ok 115 - update submodules without url set in .gitconfig
ok 116 - clone --recurse-submodules with a pathspec works
ok 117 - clone with multiple --recurse-submodules options
ok 118 - clone and subsequent updates correctly auto-initialize submodules
ok 119 - init properly sets the config
ok 120 - recursive clone respects -q
ok 121 - `submodule init` and `init.templateDir`
# passed all 121 test(s)
1..121
*** t7401-submodule-summary.sh ***
Initialized empty Git repository in $(@D)/t/trash directory.t7401-submodule-summary/sm1/.git/
ok 1 - added submodule
ok 2 - added submodule (subdirectory)
ok 3 - added submodule (subdirectory only)
ok 4 - added submodule (subdirectory with explicit path)
ok 5 - modified submodule(forward)
ok 6 - modified submodule(forward), --files
ok 7 - no ignore=all setting has any effect
ok 8 - modified submodule(backward)
ok 9 - modified submodule(backward and forward)
ok 10 - --summary-limit
ok 11 - typechanged submodule(submodule->blob), --cached
ok 12 - typechanged submodule(submodule->blob), --files
ok 13 - typechanged submodule(submodule->blob)
Initialized empty Git repository in $(@D)/t/trash directory.t7401-submodule-summary/sm1/.git/
ok 14 - nonexistent commit
ok 15 - typechanged submodule(blob->submodule)
ok 16 - deleted submodule
ok 17 - create second submodule
ok 18 - multiple submodules
ok 19 - path filter
ok 20 - given commit
ok 21 - --for-status
ok 22 - fail when using --files together with --cached
ok 23 - should not fail in an empty repo
# passed all 23 test(s)
1..23
*** t7402-submodule-rebase.sh ***
ok 1 - setup
ok 2 - rebase with a dirty submodule
ok 3 - interactive rebase with a dirty submodule
ok 4 - rebase with dirty file and submodule fails
ok 5 - stash with a dirty submodule
ok 6 - rebasing submodule that should conflict
# passed all 6 test(s)
1..6
*** t7403-submodule-sync.sh ***
ok 1 - setup
ok 2 - change submodule
ok 3 - change submodule url
ok 4 - "git submodule sync" should update submodule URLs
ok 5 - "git submodule sync --recursive" should update all submodule URLs
ok 6 - reset submodule URLs
ok 7 - "git submodule sync" should update submodule URLs - subdirectory
ok 8 - "git submodule sync --recursive" should update all submodule URLs - subdirectory
ok 9 - "git submodule sync" should update known submodule URLs
ok 10 - "git submodule sync" should not vivify uninteresting submodule
ok 11 - "git submodule sync" handles origin URL of the form foo
ok 12 - "git submodule sync" handles origin URL of the form foo/bar
ok 13 - "git submodule sync --recursive" propagates changes in origin
ok 14 - "git submodule sync" handles origin URL of the form ./foo
ok 15 - "git submodule sync" handles origin URL of the form ./foo/bar
ok 16 - "git submodule sync" handles origin URL of the form ../foo
ok 17 - "git submodule sync" handles origin URL of the form ../foo/bar
ok 18 - "git submodule sync" handles origin URL of the form ../foo/bar with deeply nested submodule
# passed all 18 test(s)
1..18
*** t7406-submodule-update.sh ***
ok 1 - setup a submodule tree
ok 2 - update --remote falls back to using HEAD
ok 3 - submodule update detaching the HEAD 
ok 4 - submodule update from subdirectory
ok 5 - submodule update --init --recursive from subdirectory
ok 6 - submodule update --init from and of subdirectory
ok 7 - submodule update does not fetch already present commits
ok 8 - submodule update should fail due to local changes
ok 9 - submodule update should throw away changes with --force 
ok 10 - submodule update --force forcibly checks out submodules
ok 11 - submodule update --remote should fetch upstream changes
ok 12 - submodule update --remote should fetch upstream changes with .
ok 13 - local config should override .gitmodules branch
ok 14 - submodule update --rebase staying on main
ok 15 - submodule update --merge staying on main
ok 16 - submodule update - rebase in .git/config
ok 17 - submodule update - checkout in .git/config but --rebase given
ok 18 - submodule update - merge in .git/config
ok 19 - submodule update - checkout in .git/config but --merge given
ok 20 - submodule update - checkout in .git/config
ok 21 - submodule update - command in .git/config
ok 22 - submodule update - command in .gitmodules is rejected
ok 23 - fsck detects command in .gitmodules
ok 24 - submodule update - command in .git/config catches failure
ok 25 - submodule update - command in .git/config catches failure -- subdirectory
ok 26 - submodule update - command run for initial population of submodule
ok 27 - recursive submodule update - command in .git/config catches failure -- subdirectory
ok 28 - submodule init does not copy command into .git/config
ok 29 - submodule init picks up rebase
ok 30 - submodule init picks up merge
ok 31 - submodule update --merge  - ignores --merge  for new submodules
ok 32 - submodule update --rebase - ignores --rebase for new submodules
ok 33 - submodule update ignores update=merge config for new submodules
ok 34 - submodule update ignores update=rebase config for new submodules
ok 35 - submodule init picks up update=none
ok 36 - submodule update - update=none in .git/config
ok 37 - submodule update - update=none in .git/config but --checkout given
ok 38 - submodule update --init skips submodule with update=none
ok 39 - submodule update with pathspec warns against uninitialized ones
ok 40 - submodule update without pathspec updates only initialized ones
ok 41 - submodule update continues after checkout error
ok 42 - submodule update continues after recursive checkout error
ok 43 - submodule update exit immediately in case of merge conflict
ok 44 - submodule update exit immediately after recursive rebase error
ok 45 - add different submodules to the same path
ok 46 - submodule add places git-dir in superprojects git-dir
ok 47 - submodule update places git-dir in superprojects git-dir
ok 48 - submodule add places git-dir in superprojects git-dir recursive
ok 49 - submodule update places git-dir in superprojects git-dir recursive
ok 50 - submodule add properly re-creates deeper level submodules
ok 51 - submodule update properly revives a moved submodule
ok 52 - submodule update can handle symbolic links in pwd
ok 53 - submodule update clone shallow submodule
ok 54 - submodule update clone shallow submodule outside of depth
ok 55 - submodule update --recursive drops module name before recursing
ok 56 - submodule update can be run in parallel
ok 57 - git clone passes the parallel jobs config on to submodules
ok 58 - submodule update --quiet passes quietness to merge/rebase
ok 59 - submodule update --quiet passes quietness to fetch with a shallow clone
ok 60 - submodule update --filter requires --init
ok 61 - submodule update --filter sets partial clone settings
ok 62 - setup clean recursive superproject
ok 63 - submodule update should skip unmerged submodules
ok 64 - submodule update --recursive skip submodules with strategy=none
ok 65 - commit with staged submodule change
ok 66 - commit with staged submodule change with ignoreSubmodules dirty
ok 67 - commit with staged submodule change with ignoreSubmodules all
ok 68 # skip submodule paths must not follow symlinks (missing CASE_INSENSITIVE_FS of CASE_INSENSITIVE_FS,SYMLINKS)
# passed all 68 test(s)
1..68
*** t7407-submodule-foreach.sh ***
ok 1 - setup a submodule tree
ok 2 - test basic "submodule foreach" usage
ok 3 - test "submodule foreach" from subdirectory
ok 4 - setup nested submodules
ok 5 - use "submodule foreach" to checkout 2nd level submodule
ok 6 - usage: foreach -- --not-an-option
ok 7 - use "foreach --recursive" to checkout all submodules
ok 8 - test messages from "foreach --recursive"
ok 9 - test messages from "foreach --recursive" from subdirectory
ok 10 - test "submodule foreach --recursive" from subdirectory
ok 11 - test "foreach --quiet --recursive"
ok 12 - use "update --recursive" to checkout all submodules
ok 13 - test "status --recursive"
ok 14 - ensure "status --cached --recursive" preserves the --cached flag
ok 15 - test "status --recursive" from sub directory
ok 16 - use "git clone --recursive" to checkout all submodules
ok 17 - test "update --recursive" with a flag with spaces
ok 18 - use "update --recursive nested1" to checkout all submodules rooted in nested1
ok 19 - command passed to foreach retains notion of stdin
ok 20 - command passed to foreach --recursive retains notion of stdin
ok 21 - multi-argument command passed to foreach is not shell-evaluated twice
ok 22 - option-like arguments passed to foreach commands are not lost
ok 23 - option-like arguments passed to foreach recurse correctly
# passed all 23 test(s)
1..23
*** t7408-submodule-reference.sh ***
ok 1 - setup
ok 2 - preparing first repository
ok 3 - preparing second repository
ok 4 - preparing superproject
ok 5 - submodule add --reference uses alternates
ok 6 - submodule add --reference with --dissociate does not use alternates
ok 7 - that reference gets used with add
ok 8 - updating superproject keeps alternates
ok 9 - updating superproject with --dissociate does not keep alternates
ok 10 - submodules use alternates when cloning a superproject
ok 11 - missing submodule alternate fails clone and submodule update
ok 12 - ignoring missing submodule alternates passes clone and submodule update
ok 13 - preparing second superproject with a nested submodule plus partial clone
ok 14 - nested submodule alternate in works and is actually used
ok 15 - missing nested submodule alternate fails clone and submodule update
ok 16 - missing nested submodule alternate in --reference-if-able mode
# passed all 16 test(s)
1..16
*** t7409-submodule-detached-work-tree.sh ***
ok 1 - setup
ok 2 - submodule on detached working tree
ok 3 - submodule on detached working pointed by core.worktree
# passed all 3 test(s)
1..3
*** t7411-submodule-config.sh ***
ok 1 - setup
ok 2 - submodule config cache setup
ok 3 - configuration parsing with error
ok 4 - test parsing and lookup of submodule config by path
ok 5 - test parsing and lookup of submodule config by name
ok 6 - error in history of one submodule config lets continue, stderr message contains blob ref
ok 7 - using different treeishs works
ok 8 - error in history in fetchrecursesubmodule lets continue
ok 9 - reading submodules config from the working tree
ok 10 - unsetting submodules config from the working tree
ok 11 - writing submodules config
ok 12 - overwriting unstaged submodules config
ok 13 - writeable .gitmodules when it is in the working tree
ok 14 - writeable .gitmodules when it is nowhere in the repository
ok 15 - non-writeable .gitmodules when it is in the index but not in the working tree
ok 16 - non-writeable .gitmodules when it is in the current branch but not in the index
ok 17 - reading submodules config from the index when .gitmodules is not in the working tree
ok 18 - reading submodules config from the current branch when .gitmodules is not in the index
ok 19 - reading nested submodules config
ok 20 - reading nested submodules config when .gitmodules is not in the working tree
# passed all 20 test(s)
1..20
*** t7412-submodule-absorbgitdirs.sh ***
ok 1 - setup a real submodule
ok 2 - absorb the git dir
ok 3 - absorbing does not fail for deinitialized submodules
ok 4 - setup nested submodule
ok 5 - absorb the git dir in a nested submodule
ok 6 - re-setup nested submodule
ok 7 - absorb the git dir in a nested submodule
ok 8 - absorb the git dir outside of primary worktree
ok 9 - setup a gitlink with missing .gitmodules entry
ok 10 - absorbing the git dir fails for incomplete submodules
ok 11 - setup a submodule with multiple worktrees
ok 12 - absorbing fails for a submodule with multiple worktrees
# passed all 12 test(s)
1..12
*** t7413-submodule-is-active.sh ***
ok 1 - setup
ok 2 - is-active works with urls
ok 3 - is-active works with submodule.<name>.active config
ok 4 - is-active handles submodule.active config missing a value
ok 5 - is-active works with basic submodule.active config
ok 6 - is-active correctly works with paths that are not submodules
ok 7 - is-active works with exclusions in submodule.active config
ok 8 - is-active with submodule.active and submodule.<name>.active
ok 9 - is-active, submodule.active and submodule add
# passed all 9 test(s)
1..9
*** t7414-submodule-mistakes.sh ***
ok 1 - create embedded repository
ok 2 - git-add on embedded repository warns
ok 3 - --no-warn-embedded-repo suppresses warning
ok 4 - no warning when updating entry
ok 5 - submodule add does not warn
# passed all 5 test(s)
1..5
*** t7416-submodule-dash-url.sh ***
ok 1 - setup
ok 2 - create submodule with protected dash in url
ok 3 - clone can recurse submodule
ok 4 - fsck accepts protected dash
ok 5 - remove ./ protection from .gitmodules url
ok 6 - clone rejects unprotected dash
ok 7 - fsck rejects unprotected dash
ok 8 - trailing backslash is handled correctly
ok 9 - fsck rejects missing URL scheme
ok 10 - fsck rejects relative URL resolving to missing scheme
ok 11 - fsck rejects empty URL scheme
ok 12 - fsck rejects relative URL resolving to empty scheme
ok 13 - fsck rejects empty hostname
ok 14 - fsck rejects relative url that produced empty hostname
ok 15 - fsck permits embedded newline with unrecognized scheme
ok 16 - fsck rejects embedded newline in url
ok 17 - fsck rejects embedded newline in relative url
ok 18 - fsck rejects embedded newline in git url
# passed all 18 test(s)
1..18
*** t7417-submodule-path-url.sh ***
ok 1 - setup
ok 2 - create submodule with dash in path
ok 3 - clone rejects unprotected dash
ok 4 - fsck rejects unprotected dash
ok 5 # skip submodule paths disallows trailing spaces (missing MINGW)
# passed all 5 test(s)
1..5
*** t7418-submodule-sparse-gitmodules.sh ***
ok 1 - setup
ok 2 - sparse checkout setup which hides .gitmodules
ok 3 - reading gitmodules config file when it is not checked out
ok 4 - not writing gitmodules config file when it is not checked out
ok 5 - initialising submodule when the gitmodules config is not checked out
ok 6 - updating submodule when the gitmodules config is not checked out
ok 7 - re-updating submodule when the gitmodules config is not checked out
ok 8 - not adding submodules when the gitmodules config is not checked out
ok 9 - init submodule still works even after the previous add failed
# passed all 9 test(s)
1..9
*** t7419-submodule-set-branch.sh ***
ok 1 - setup
ok 2 - submodule config cache setup
ok 3 - ensure submodule branch is unset
ok 4 - test submodule set-branch --branch
ok 5 - test submodule set-branch --default
ok 6 - test submodule set-branch -b
ok 7 - test submodule set-branch -d
ok 8 - test submodule set-branch --branch with named submodule
ok 9 - test submodule set-branch --default with named submodule
# passed all 9 test(s)
1..9
*** t7420-submodule-set-url.sh ***
ok 1 - setup
ok 2 - submodule config cache setup
ok 3 - test submodule set-url
# passed all 3 test(s)
1..3
*** t7421-submodule-summary-add.sh ***
ok 1 - setup
ok 2 - summary test environment setup
ok 3 - submodule summary output for initialized submodule
ok 4 - submodule summary output for deinitialized submodule
ok 5 - submodule summary output for submodules with changed paths
# passed all 5 test(s)
1..5
*** t7422-submodule-output.sh ***
ok 1 - setup
ok 2 - git submodule 
ok 3 - git submodule status
ok 4 - git submodule status --recursive
ok 5 - git submodule --quiet
ok 6 - git submodule --quiet status
ok 7 - git submodule status --quiet
ok 8 - git submodule --cached
ok 9 - git submodule --cached status
ok 10 - git submodule status --cached
ok 11 - git submodule --cached --quiet
ok 12 - git submodule --cached --quiet status
ok 13 - git submodule --cached status --quiet
ok 14 - git submodule --quiet status --cached
ok 15 - git submodule status --cached --quiet
ok 16 - git submodule status --cached --recursive
ok 17 - git submodule --cached status --recursive
# passed all 17 test(s)
1..17
*** t7423-submodule-symlinks.sh ***
ok 1 - prepare
ok 2 - git submodule update must not create submodule behind symlink
ok 3 # skip git submodule update must not create submodule behind symlink on case insensitive fs (missing CASE_INSENSITIVE_FS of SYMLINKS,CASE_INSENSITIVE_FS)
ok 4 - git restore --recurse-submodules must not be confused by a symlink
ok 5 - git restore --recurse-submodules must not migrate git dir of symlinked repo
ok 6 - git checkout -f --recurse-submodules must not migrate git dir of symlinked repo when removing submodule
# passed all 6 test(s)
1..6
*** t7450-bad-git-dotfiles.sh ***
ok 1 - setup
ok 2 - check names
ok 3 - check urls
ok 4 - create innocent subrepo
ok 5 - submodule add refuses invalid names
ok 6 - add evil submodule
ok 7 - add other submodule
ok 8 - clone evil superproject
ok 9 - fsck detects evil superproject
ok 10 - transfer.fsckObjects detects evil superproject (unpack)
ok 11 - transfer.fsckObjects detects evil superproject (index)
ok 12 - create oddly ordered pack
ok 13 - transfer.fsckObjects handles odd pack (unpack)
ok 14 - transfer.fsckObjects handles odd pack (index)
ok 15 - index-pack --strict works for non-repo pack
ok 16 - set up repo with symlinked gitmodules (vanilla)
ok 17 - fsck detects symlinked gitmodules (vanilla)
ok 18 - refuse to load symlinked gitmodules into index (vanilla)
ok 19 - set up repo with symlinked gitmodules (ntfs)
ok 20 - fsck detects symlinked gitmodules (ntfs)
ok 21 - refuse to load symlinked gitmodules into index (ntfs)
ok 22 - set up repo with symlinked gitmodules (hfs)
ok 23 - fsck detects symlinked gitmodules (hfs)
ok 24 - refuse to load symlinked gitmodules into index (hfs)
ok 25 - set up repo with symlinked gitattributes (vanilla)
ok 26 - fsck detects symlinked gitattributes (vanilla)
ok 27 - set up repo with symlinked gitattributes (ntfs)
ok 28 - fsck detects symlinked gitattributes (ntfs)
ok 29 - set up repo with symlinked gitattributes (hfs)
ok 30 - fsck detects symlinked gitattributes (hfs)
ok 31 - set up repo with symlinked gitignore (vanilla)
ok 32 - fsck detects symlinked gitignore (vanilla)
ok 33 - set up repo with symlinked gitignore (ntfs)
ok 34 - fsck detects symlinked gitignore (ntfs)
ok 35 - set up repo with symlinked gitignore (hfs)
ok 36 - fsck detects symlinked gitignore (hfs)
ok 37 - set up repo with symlinked mailmap (vanilla)
ok 38 - fsck detects symlinked mailmap (vanilla)
ok 39 - set up repo with symlinked mailmap (ntfs)
ok 40 - fsck detects symlinked mailmap (ntfs)
ok 41 - set up repo with symlinked mailmap (hfs)
ok 42 - fsck detects symlinked mailmap (hfs)
ok 43 - fsck detects non-blob .gitmodules
ok 44 - fsck detects corrupt .gitmodules
ok 45 # skip prevent git~1 squatting on Windows (missing WINDOWS)
ok 46 - setup submodules with nested git dirs
ok 47 - git dirs of sibling submodules must not be nested
ok 48 - submodule git dir nesting detection must work with parallel cloning
ok 49 - checkout -f --recurse-submodules must not use a nested gitdir
# passed all 49 test(s)
1..49
*** t7500-commit-template-squash-signoff.sh ***
ok 1 - a basic commit in an empty tree should succeed
ok 2 - nonexistent template file should return error
ok 3 - nonexistent template file in config should return error
ok 4 - unedited template should not commit
ok 5 - unedited template with comments should not commit
ok 6 - a Signed-off-by line by itself should not commit
ok 7 - adding comments to a template should not commit
ok 8 - adding real content to a template should commit
ok 9 - -t option should be short for --template
ok 10 - config-specified template should commit
ok 11 - explicit commit message should override template
ok 12 - commit message from file should override template
ok 13 - commit message from template with whitespace issue
ok 14 - using alternate GIT_INDEX_FILE (1)
ok 15 - using alternate GIT_INDEX_FILE (2)
ok 16 - --signoff
ok 17 - commit message from file (1)
ok 18 - commit message from file (2)
ok 19 - commit message from stdin
ok 20 - commit -F overrides -t
ok 21 - Commit without message is allowed with --allow-empty-message
ok 22 - Commit without message is no-no without --allow-empty-message
ok 23 - Commit a message with --allow-empty-message
ok 24 - commit -C empty respects --allow-empty-message
ok 25 - commit --fixup provides correct one-line commit message
ok 26 - commit --fixup -m"something" -m"extra"
ok 27 - commit --fixup --edit
ok 28 - commit --fixup=amend: creates amend! commit
ok 29 - --fixup=amend: --only ignores staged changes
ok 30 - --fixup=reword: ignores staged changes
ok 31 - --fixup=reword: error out with -m option
ok 32 - --fixup=amend: error out with -m option
ok 33 - consecutive amend! commits remove amend! line from commit msg body
ok 34 - deny to create amend! commit if its commit msg body is empty
ok 35 - amend! commit allows empty commit msg body with --allow-empty-message
ok 36 - --fixup=reword: incompatible with --all
ok 37 - --fixup=reword: incompatible with --include
ok 38 - --fixup=reword: incompatible with --only
ok 39 - --fixup=reword: incompatible with --interactive
ok 40 - --fixup=reword: incompatible with --patch
ok 41 - --fixup=reword: give error with pathsec
ok 42 - --fixup=reword: -F give error message
ok 43 - commit --squash works with -F
ok 44 - commit --squash works with -m
ok 45 - commit --squash works with -C
ok 46 - commit --squash works with -c
ok 47 - commit --squash works with -C for same commit
ok 48 - commit --squash works with -c for same commit
ok 49 - commit --squash works with editor
ok 50 - invalid message options when using --fixup
ok 51 - new line found before status message in commit template
ok 52 - setup empty commit with unstaged rename and copy
ok 53 - check commit with unstaged rename and copy
ok 54 - commit without staging files fails and displays hints
# passed all 54 test(s)
1..54
*** t7501-commit-basic-functionality.sh ***
ok 1 - initial status
ok 2 - fail initial amend
ok 3 - setup: initial commit
ok 4 - -m and -F do not mix
ok 5 - -m and -C do not mix
ok 6 - paths and -a do not mix
ok 7 - can use paths with --interactive
ok 8 - removed files and relative paths
ok 9 - using invalid commit with -C
ok 10 - nothing to commit
ok 11 - --dry-run fails with nothing to commit
ok 12 - --short fails with nothing to commit
ok 13 - --porcelain fails with nothing to commit
ok 14 - --long fails with nothing to commit
ok 15 - fail to commit untracked file (even with --include/--only)
ok 16 - setup: non-initial commit
ok 17 - --dry-run with stuff to commit returns ok
ok 18 - --short with stuff to commit returns ok
ok 19 - --porcelain with stuff to commit returns ok
ok 20 - --long with stuff to commit returns ok
ok 21 - exclude additional staged changes when given pathspec
ok 22 - exclude additional staged changes when given pathspec
ok 23 - exclude additional staged changes when given pathspec
ok 24 - -i/--include includes staged changes
ok 25 - --include and --only do not mix
ok 26 - commit message from non-existing file
ok 27 - empty commit message
ok 28 - template "emptyness" check does not kick in with -F
ok 29 - template "emptyness" check
ok 30 - setup: commit message from file
ok 31 - amend commit
ok 32 - amend --only ignores staged contents
ok 33 - allow-empty --only ignores staged contents
ok 34 - set up editor
ok 35 - amend without launching editor
ok 36 - --amend --edit
ok 37 - --amend --edit of empty message
ok 38 - --amend to set message to empty
ok 39 - --amend to set empty message needs --allow-empty-message
ok 40 - -m --edit
ok 41 - -m and -F do not mix
ok 42 - using message from other commit
ok 43 - editing message from other commit
ok 44 - message from stdin
ok 45 - overriding author from command line
ok 46 - interactive add
ok 47 - commit --interactive doesn't change index if editor aborts
ok 48 - editor not invoked if -F is given
ok 49 - partial commit that involves removal (1)
ok 50 - partial commit that involves removal (2)
ok 51 - partial commit that involves removal (3)
ok 52 - amend commit to fix author
ok 53 - amend commit to fix date
ok 54 - amend commit to add signoff
ok 55 - amend does not add signoff if it already exists
ok 56 - commit mentions forced date in output
ok 57 - commit complains about completely bogus dates
ok 58 - commit --date allows approxidate
ok 59 - sign off (1)
ok 60 - sign off (2)
ok 61 - signoff gap
ok 62 - signoff gap 2
ok 63 - signoff respects trailer config
ok 64 - signoff not confused by ---
ok 65 - multiple -m
ok 66 - amend commit to fix author
ok 67 - git commit <file> with dirty index
ok 68 - same tree (single parent)
ok 69 - same tree (single parent) --allow-empty
ok 70 - same tree (merge and amend merge)
ok 71 - amend using the message from another commit
ok 72 - amend using the message from a commit named with tag
ok 73 - amend can copy notes
ok 74 - commit a file whose name is a dash
ok 75 - --only works on to-be-born branch
ok 76 - --dry-run with conflicts fixed from a merge
ok 77 - --dry-run --short
# passed all 77 test(s)
1..77
*** t7502-commit-porcelain.sh ***
ok 1 - output summary format
ok 2 - output summary format: root-commit
ok 3 - output summary format for commit with an empty diff
ok 4 - output summary format for merges
ok 5 - the basics
ok 6 - partial
ok 7 - partial modification in a subdirectory
ok 8 - partial removal
ok 9 - sign off
ok 10 - commit --trailer with "="
ok 11 - commit --trailer with -c and "replace" as ifexists
ok 12 - commit --trailer with -c and "add" as ifexists
ok 13 - commit --trailer with -c and "donothing" as ifexists
ok 14 - commit --trailer with -c and "addIfDifferent" as ifexists
ok 15 - commit --trailer with -c and "addIfDifferentNeighbor" as ifexists
ok 16 - commit --trailer with -c and "end" as where
ok 17 - commit --trailer with -c and "start" as where
ok 18 - commit --trailer with -c and "after" as where
ok 19 - commit --trailer with -c and "before" as where
ok 20 - commit --trailer with -c and "donothing" as ifmissing
ok 21 - commit --trailer with -c and "add" as ifmissing
ok 22 - commit --trailer with -c ack.key 
ok 23 - commit --trailer with -c and ":=#" as separators
ok 24 - commit --trailer with -c and command
ok 25 - commit --trailer not confused by --- separator
ok 26 - commit --trailer with --verbose
ok 27 - multiple -m
ok 28 - verbose
ok 29 - verbose respects diff config
ok 30 - prepare file with comment line and trailing newlines
ok 31 - cleanup commit messages (verbatim option,-t)
ok 32 - cleanup commit messages (verbatim option,-F)
ok 33 - cleanup commit messages (verbatim option,-m)
ok 34 - cleanup commit messages (whitespace option,-F)
ok 35 - cleanup commit messages (scissors option,-F,-e)
ok 36 - cleanup commit messages (scissors option,-F,-e, scissors on first line)
ok 37 - cleanup commit messages (strip option,-F)
ok 38 - cleanup commit messages (strip option,-F,-e)
ok 39 - cleanup commit messages (strip option,-F,-e): output
ok 40 - cleanup commit message (fail on invalid cleanup mode option)
ok 41 - cleanup commit message (fail on invalid cleanup mode configuration)
ok 42 - cleanup commit message (no config and no option uses default)
ok 43 - cleanup commit message (option overrides default)
ok 44 - cleanup commit message (config overrides default)
ok 45 - cleanup commit message (option overrides config)
ok 46 - cleanup commit message (default, -m)
ok 47 - cleanup commit message (whitespace option, -m)
ok 48 - cleanup commit message (whitespace config, -m)
ok 49 - message shows author when it is not equal to committer
ok 50 - message shows date when it is explicitly set
ok 51 - message does not have multiple scissors lines
ok 52 - message shows committer when it is automatic
ok 53 # skip do not fire editor when committer is bogus (missing !AUTOIDENT of !FAIL_PREREQS,!AUTOIDENT)
ok 54 - do not fire editor if -m <msg> was given
ok 55 - do not fire editor if -m "" was given
ok 56 - do not fire editor in the presence of conflicts
ok 57 - a SIGTERM should break locks
ok 58 - Hand committing of a redundant merge removes dups
ok 59 - A single-liner subject with a token plus colon is not a footer
ok 60 - commit -s places sob on third line after two empty lines
ok 61 - commit
ok 62 - commit --status
ok 63 - commit --no-status
ok 64 - commit with commit.status = yes
ok 65 - commit with commit.status = no
ok 66 - commit --status with commit.status = yes
ok 67 - commit --no-status with commit.status = yes
ok 68 - commit --status with commit.status = no
ok 69 - commit --no-status with commit.status = no
ok 70 - commit
ok 71 - commit --status
ok 72 - commit --no-status
ok 73 - commit with commit.status = yes
ok 74 - commit with commit.status = no
ok 75 - commit --status with commit.status = yes
ok 76 - commit --no-status with commit.status = yes
ok 77 - commit --status with commit.status = no
ok 78 - commit --no-status with commit.status = no
ok 79 - commit --status with custom comment character
ok 80 - switch core.commentchar
ok 81 - switch core.commentchar but out of options
# passed all 81 test(s)
1..81
*** t7503-pre-commit-and-pre-merge-commit-hooks.sh ***
ok 1 - root commit
ok 2 - setup conflicting branches
ok 3 - with no hook
ok 4 - with no hook (merge)
ok 5 - --no-verify with no hook
ok 6 - --no-verify with no hook (merge)
ok 7 - with succeeding hook
ok 8 - with succeeding hook (merge)
ok 9 - automatic merge fails; both hooks are available
ok 10 - --no-verify with succeeding hook
ok 11 - --no-verify with succeeding hook (merge)
ok 12 - with failing hook
ok 13 - --no-verify with failing hook
ok 14 - with failing hook (merge)
ok 15 - --no-verify with failing hook (merge)
ok 16 - with non-executable hook
ok 17 - --no-verify with non-executable hook
ok 18 - with non-executable hook (merge)
ok 19 - --no-verify with non-executable hook (merge)
ok 20 - with hook requiring GIT_PREFIX
ok 21 - with failing hook requiring GIT_PREFIX
ok 22 - check the author in hook
# passed all 22 test(s)
1..22
*** t7504-commit-msg-hook.sh ***
ok 1 - with no hook
ok 2 - with no hook (editor)
ok 3 - --no-verify with no hook
ok 4 - --no-verify with no hook (editor)
ok 5 - setup: commit-msg hook that always succeeds
ok 6 - with succeeding hook
ok 7 - with succeeding hook (editor)
ok 8 - --no-verify with succeeding hook
ok 9 - --no-verify with succeeding hook (editor)
ok 10 - setup: commit-msg hook that always fails
ok 11 - with failing hook
ok 12 - with failing hook (editor)
ok 13 - --no-verify with failing hook
ok 14 - -n followed by --verify with failing hook
ok 15 - --no-verify with failing hook (editor)
ok 16 - merge fails with failing hook
ok 17 - merge bypasses failing hook with --no-verify
ok 18 - setup: commit-msg hook made non-executable
ok 19 - with non-executable hook
ok 20 - with non-executable hook (editor)
ok 21 - --no-verify with non-executable hook
ok 22 - --no-verify with non-executable hook (editor)
ok 23 - setup: commit-msg hook that edits the commit message
ok 24 - hook edits commit message
ok 25 - hook edits commit message (editor)
ok 26 - hook doesn't edit commit message
ok 27 - hook doesn't edit commit message (editor)
ok 28 - hook called in git-merge picks up commit message
not ok 29 - merge --continue remembers --no-verify # TODO known breakage
ok 30 - hook is called for reword during `rebase -i`
# still have 1 known breakage(s)
# passed all remaining 29 test(s)
1..30
*** t7505-prepare-commit-msg-hook.sh ***
ok 1 - set up commits for rebasing
ok 2 - with no hook
ok 3 - setup fake editor for interactive editing
ok 4 - setup prepare-commit-msg hook
ok 5 - with hook (-m)
ok 6 - with hook (-m editor)
ok 7 - with hook (-t)
ok 8 - with hook (-F)
ok 9 - with hook (-F editor)
ok 10 - with hook (-C)
ok 11 - with hook (editor)
ok 12 - with hook (--amend)
ok 13 - with hook (-c)
ok 14 - with hook (merge)
ok 15 - with hook and editor (merge)
ok 16 - with hook (rebase -i)
ok 17 - with hook (cherry-pick)
ok 18 - with hook and editor (cherry-pick)
ok 19 - setup: commit-msg hook that always fails
ok 20 - with failing hook
ok 21 - with failing hook (--no-verify)
ok 22 - with failing hook (merge)
ok 23 - with failing hook (cherry-pick)
# passed all 23 test(s)
1..23
*** t7506-status-submodule.sh ***
ok 1 - setup
ok 2 - status clean
ok 3 - commit --dry-run -a clean
ok 4 - status with modified file in submodule
ok 5 - status with modified file in submodule (porcelain)
ok 6 - status with modified file in submodule (short)
ok 7 - status with added file in submodule
ok 8 - status with added file in submodule (porcelain)
ok 9 - status with added file in submodule (short)
ok 10 - status with untracked file in submodule
ok 11 - status -uno with untracked file in submodule
ok 12 - status with untracked file in submodule (porcelain)
ok 13 - status with untracked file in submodule (short)
ok 14 - status with added and untracked file in submodule
ok 15 - status with added and untracked file in submodule (porcelain)
ok 16 - status with modified file in modified submodule
ok 17 - status with modified file in modified submodule (porcelain)
ok 18 - status with added file in modified submodule
ok 19 - status with added file in modified submodule (porcelain)
ok 20 - status with untracked file in modified submodule
ok 21 - status with untracked file in modified submodule (porcelain)
ok 22 - status with added and untracked file in modified submodule
ok 23 - status with added and untracked file in modified submodule (porcelain)
ok 24 - setup .git file for sub
ok 25 - status with added file in modified submodule with .git file
ok 26 - status with a lot of untracked files in the submodule
ok 27 - rm submodule contents
ok 28 - status clean (empty submodule dir)
ok 29 - status -a clean (empty submodule dir)
ok 30 - status with merge conflict in .gitmodules
ok 31 - diff with merge conflict in .gitmodules
ok 32 - diff --submodule with merge conflict in .gitmodules
ok 33 - setup superproject with untracked file in nested submodule
ok 34 - status with untracked file in nested submodule (porcelain)
ok 35 - status with untracked file in nested submodule (porcelain=2)
ok 36 - status with untracked file in nested submodule (short)
ok 37 - setup superproject with modified file in nested submodule
ok 38 - status with added file in nested submodule (porcelain)
ok 39 - status with added file in nested submodule (porcelain=2)
ok 40 - status with added file in nested submodule (short)
# passed all 40 test(s)
1..40
*** t7507-commit-verbose.sh ***
ok 1 - setup
ok 2 - initial commit shows verbose diff
ok 3 - second commit
ok 4 - verbose diff is stripped out
ok 5 - verbose diff is stripped out (mnemonicprefix)
ok 6 - diff in message is retained without -v
ok 7 - diff in message is retained with -v
ok 8 - submodule log is stripped out too with -v
ok 9 - verbose diff is stripped out with set core.commentChar
ok 10 - verbose diff is stripped with multi-byte comment char
ok 11 - status does not verbose without --verbose
ok 12 - setup -v -v
ok 13 - commit.verbose=true and --verbose omitted
ok 14 - commit.verbose=1 and --verbose omitted
ok 15 - commit.verbose=false and --verbose omitted
ok 16 - commit.verbose=-2 and --verbose omitted
ok 17 - commit.verbose=-1 and --verbose omitted
ok 18 - commit.verbose=0 and --verbose omitted
ok 19 - commit.verbose=2 and --verbose omitted
ok 20 - commit.verbose=3 and --verbose omitted
ok 21 - commit.verbose=true and --verbose
ok 22 - commit.verbose=true and --no-verbose
ok 23 - commit.verbose=true and -v -v
ok 24 - commit.verbose=false and --verbose
ok 25 - commit.verbose=false and --no-verbose
ok 26 - commit.verbose=false and -v -v
ok 27 - commit.verbose=-2 and --verbose
ok 28 - commit.verbose=-2 and --no-verbose
ok 29 - commit.verbose=-2 and -v -v
ok 30 - commit.verbose=-1 and --verbose
ok 31 - commit.verbose=-1 and --no-verbose
ok 32 - commit.verbose=-1 and -v -v
ok 33 - commit.verbose=0 and --verbose
ok 34 - commit.verbose=0 and --no-verbose
ok 35 - commit.verbose=0 and -v -v
ok 36 - commit.verbose=1 and --verbose
ok 37 - commit.verbose=1 and --no-verbose
ok 38 - commit.verbose=1 and -v -v
ok 39 - commit.verbose=2 and --verbose
ok 40 - commit.verbose=2 and --no-verbose
ok 41 - commit.verbose=2 and -v -v
ok 42 - commit.verbose=3 and --verbose
ok 43 - commit.verbose=3 and --no-verbose
ok 44 - commit.verbose=3 and -v -v
ok 45 - status ignores commit.verbose=true
# passed all 45 test(s)
1..45
*** t7508-status.sh ***
ok 1 - status -h in broken repository
ok 2 - commit -h in broken repository
ok 3 - create upstream branch
ok 4 - setup
ok 5 - status (1)
ok 6 - status --column
ok 7 - status --column status.displayCommentPrefix=false
ok 8 - status with status.displayCommentPrefix=true
ok 9 - status with status.displayCommentPrefix=false
ok 10 - status -v
ok 11 - status -v -v
ok 12 - setup fake editor
ok 13 - commit ignores status.displayCommentPrefix=false in COMMIT_EDITMSG
ok 14 - status (advice.statusHints false)
ok 15 - status -s
ok 16 - status with gitignore
ok 17 - status with gitignore (nothing untracked)
ok 18 - status -s -b
ok 19 - status -s -z -b
ok 20 - setup dir3
ok 21 - status -uno
ok 22 - status (status.showUntrackedFiles no)
ok 23 - status (status.showUntrackedFiles false)
ok 24 - status (status.showUntrackedFiles 0)
ok 25 - status -uno (advice.statusHints false)
ok 26 - status -s -uno
ok 27 - status -s (status.showUntrackedFiles no)
ok 28 - status -unormal
ok 29 - status (status.showUntrackedFiles normal)
ok 30 - status (status.showUntrackedFiles true)
ok 31 - status (status.showUntrackedFiles 1)
ok 32 - status -s -unormal
ok 33 - status -s (status.showUntrackedFiles normal)
ok 34 - status -uall
ok 35 - status (status.showUntrackedFiles all)
ok 36 - teardown dir3
ok 37 - status -s -uall
ok 38 - status -s (status.showUntrackedFiles all)
ok 39 - status with relative paths
ok 40 - status -s with relative paths
ok 41 - status --porcelain ignores relative paths setting
ok 42 - setup unique colors
ok 43 - status with color.ui
ok 44 - status with color.status
ok 45 - status -s with color.ui
ok 46 - status -s with color.status
ok 47 - status -s -b with color.status
ok 48 - status --porcelain ignores color.ui
ok 49 - status --porcelain ignores color.status
ok 50 - status --porcelain respects -b
ok 51 - status without relative paths
ok 52 - status -s without relative paths
ok 53 - status -s without relative paths
ok 54 - dry-run of partial commit excluding new file in index
ok 55 - status refreshes the index
ok 56 - status shows detached HEAD properly after checking out non-local upstream branch
ok 57 - setup status submodule summary
ok 58 - status submodule summary is disabled by default
ok 59 - status --untracked-files=all does not show submodule
ok 60 - status -s submodule summary is disabled by default
ok 61 - status -s --untracked-files=all does not show submodule
ok 62 - status submodule summary
ok 63 - status submodule summary with status.displayCommentPrefix=false
ok 64 - commit with submodule summary ignores status.displayCommentPrefix
ok 65 - status -s submodule summary
ok 66 - status submodule summary (clean submodule): commit
ok 67 - status -s submodule summary (clean submodule)
ok 68 - status -z implies porcelain
ok 69 - commit --dry-run submodule summary (--amend)
ok 70 - status succeeds in a read-only repository
ok 71 - --ignore-submodules=untracked suppresses submodules with untracked content
ok 72 - .gitmodules ignore=untracked suppresses submodules with untracked content
ok 73 - .git/config ignore=untracked suppresses submodules with untracked content
ok 74 - --ignore-submodules=dirty suppresses submodules with untracked content
ok 75 - .gitmodules ignore=dirty suppresses submodules with untracked content
ok 76 - .git/config ignore=dirty suppresses submodules with untracked content
ok 77 - --ignore-submodules=dirty suppresses submodules with modified content
ok 78 - .gitmodules ignore=dirty suppresses submodules with modified content
ok 79 - .git/config ignore=dirty suppresses submodules with modified content
ok 80 - --ignore-submodules=untracked doesn't suppress submodules with modified content
ok 81 - .gitmodules ignore=untracked doesn't suppress submodules with modified content
ok 82 - .git/config ignore=untracked doesn't suppress submodules with modified content
ok 83 - --ignore-submodules=untracked doesn't suppress submodule summary
ok 84 - .gitmodules ignore=untracked doesn't suppress submodule summary
ok 85 - .git/config ignore=untracked doesn't suppress submodule summary
ok 86 - --ignore-submodules=dirty doesn't suppress submodule summary
ok 87 - .gitmodules ignore=dirty doesn't suppress submodule summary
ok 88 - .git/config ignore=dirty doesn't suppress submodule summary
ok 89 - status (core.commentchar with submodule summary)
ok 90 - status (core.commentchar with two chars with submodule summary)
ok 91 - --ignore-submodules=all suppresses submodule summary
ok 92 - .gitmodules ignore=all suppresses unstaged submodule summary
ok 93 - .git/config ignore=all suppresses unstaged submodule summary
ok 94 - setup of test environment
ok 95 - "status.short=true" same as "-s"
ok 96 - "status.short=true" weaker than "--no-short"
ok 97 - "status.short=false" same as "--no-short"
ok 98 - "status.short=false" weaker than "-s"
ok 99 - "status.branch=true" same as "-b"
ok 100 - "status.branch=true" different from "--no-branch"
ok 101 - "status.branch=true" weaker than "--no-branch"
ok 102 - "status.branch=true" weaker than "--porcelain"
ok 103 - "status.branch=false" same as "--no-branch"
ok 104 - "status.branch=false" weaker than "-b"
ok 105 - Restore default test environment
ok 106 - git commit will commit a staged but ignored submodule
ok 107 - git commit --dry-run will show a staged but ignored submodule
ok 108 - git commit -m will commit a staged but ignored submodule
ok 109 - show stash info with "--show-stash"
ok 110 - no stash info with "--show-stash --no-show-stash"
ok 111 - "status.showStash=false" weaker than "--show-stash"
ok 112 - "status.showStash=true" weaker than "--no-show-stash"
ok 113 - no additional info if no stash entries
ok 114 - "No commits yet" should be noted in status output
ok 115 - "No commits yet" should not be noted in status output
ok 116 - "Initial commit" should be noted in commit template
ok 117 - "Initial commit" should not be noted in commit template
ok 118 - --no-optional-locks prevents index update
ok 119 - racy timestamps will be fixed for clean worktree
ok 120 - racy timestamps will be fixed for dirty worktree
ok 121 - setup slow status advice
ok 122 - slow status advice when core.untrackedCache and fsmonitor are unset
ok 123 - slow status advice when core.untrackedCache true, but not fsmonitor
ok 124 - slow status advice when core.untrackedCache true, and fsmonitor
ok 125 # skip status does not re-read unchanged 4 or 8 GiB file (missing EXPENSIVE)
# passed all 125 test(s)
1..125
*** t7509-commit-authorship.sh ***
ok 1 - -C option copies authorship and message
ok 2 - -C option copies only the message with --reset-author
ok 3 - -c option copies authorship and message
ok 4 - -c option copies only the message with --reset-author
ok 5 - --amend option copies authorship
ok 6 - --amend option with empty author
ok 7 - --amend option with missing author
ok 8 - --reset-author makes the commit ours even with --amend option
ok 9 - --reset-author and --author are mutually exclusive
ok 10 - --reset-author should be rejected without -c/-C/--amend
ok 11 - commit respects CHERRY_PICK_HEAD and MERGE_MSG
ok 12 - --reset-author with CHERRY_PICK_HEAD
# passed all 12 test(s)
1..12
*** t7510-signed-commit.sh ***
ok 1 # skip create signed commits (missing GPG)
ok 2 # skip verify and show signatures (missing GPG)
ok 3 # skip verify-commit exits failure on unknown signature (missing GPG)
ok 4 # skip verify-commit exits success on untrusted signature (missing GPG)
ok 5 # skip verify-commit exits success with matching minTrustLevel (missing GPG)
ok 6 # skip verify-commit exits success with low minTrustLevel (missing GPG)
ok 7 # skip verify-commit exits failure with high minTrustLevel (missing GPG)
ok 8 # skip verify signatures with --raw (missing GPG)
ok 9 # skip proper header is used for hash algorithm (missing GPG)
ok 10 # skip show signed commit with signature (missing GPG)
ok 11 # skip detect fudged signature (missing GPG)
ok 12 # skip detect fudged signature with NUL (missing GPG)
ok 13 # skip amending already signed commit (missing GPG)
ok 14 # skip bare signature (missing GPG2)
ok 15 # skip show good signature with custom format (missing GPG)
ok 16 # skip show bad signature with custom format (missing GPG)
ok 17 # skip show untrusted signature with custom format (missing GPG)
ok 18 # skip show untrusted signature with undefined trust level (missing GPG)
ok 19 # skip show untrusted signature with ultimate trust level (missing GPG)
ok 20 # skip show unknown signature with custom format (missing GPG)
ok 21 # skip show lack of signature with custom format (missing GPG)
ok 22 # skip log.showsignature behaves like --show-signature (missing GPG)
ok 23 # skip check config gpg.format values (missing GPG)
ok 24 # skip detect fudged commit with double signature (missing GPG)
ok 25 # skip show double signature with custom format (missing GPG)
ok 26 # skip verify-commit verifies multiply signed commits (missing GPG)
ok 27 - custom `gpg.program`
# passed all 27 test(s)
1..27
*** t7511-status-index.sh ***
ok 1 - status, filename length 1
ok 2 - status, filename length 2
ok 3 - status, filename length 3
ok 4 - status, filename length 4
ok 5 - status, filename length 5
ok 6 - status, filename length 6
ok 7 - status, filename length 7
ok 8 - status, filename length 8
ok 9 - status, filename length 9
ok 10 - status, filename length 10
ok 11 - status, filename length 11
ok 12 - status, filename length 12
ok 13 - status, filename length 13
ok 14 - status, filename length 14
ok 15 - status, filename length 15
ok 16 - status, filename length 16
ok 17 - status, filename length 17
ok 18 - status, filename length 18
ok 19 - status, filename length 19
ok 20 - status, filename length 20
ok 21 - status, filename length 21
ok 22 - status, filename length 22
ok 23 - status, filename length 23
ok 24 - status, filename length 24
# passed all 24 test(s)
1..24
*** t7512-status-help.sh ***
ok 1 - prepare for conflicts
ok 2 - status when conflicts unresolved
ok 3 - status when conflicts resolved before commit
ok 4 - prepare for rebase conflicts
ok 5 - status when rebase --apply in progress before resolving conflicts
ok 6 - status when rebase --apply in progress before rebase --continue
ok 7 - prepare for rebase_i_conflicts
ok 8 - status during rebase -i when conflicts unresolved
ok 9 - status during rebase -i after resolving conflicts
ok 10 - status when rebasing -i in edit mode
ok 11 - status when splitting a commit
ok 12 - status after editing the last commit with --amend during a rebase -i
ok 13 - prepare for several edits
ok 14 - status: (continue first edit) second edit
ok 15 - status: (continue first edit) second edit and split
ok 16 - status: (continue first edit) second edit and amend
ok 17 - status: (amend first edit) second edit
ok 18 - status: (amend first edit) second edit and split
ok 19 - status: (amend first edit) second edit and amend
ok 20 - status: (split first edit) second edit
ok 21 - status: (split first edit) second edit and split
ok 22 - status: (split first edit) second edit and amend
ok 23 - prepare am_session
ok 24 - status in an am session: file already exists
ok 25 - status in an am session: file does not exist
ok 26 - status in an am session: empty patch
ok 27 - status when bisecting
ok 28 - status when bisecting while rebasing
ok 29 - status when rebase --apply conflicts with statushints disabled
ok 30 - prepare for cherry-pick conflicts
ok 31 - status when cherry-picking before resolving conflicts
ok 32 - status when cherry-picking after resolving conflicts
ok 33 - status when cherry-picking multiple commits
ok 34 - status when cherry-picking after committing conflict resolution
ok 35 - status shows cherry-pick with invalid oid
ok 36 - status does not show error if .git/sequencer is a file
ok 37 - status showing detached at and from a tag
ok 38 - status while reverting commit (conflicts)
ok 39 - status while reverting commit (conflicts resolved)
ok 40 - status after reverting commit
ok 41 - status while reverting after committing conflict resolution
ok 42 - prepare for different number of commits rebased
ok 43 - status: one command done nothing remaining
ok 44 - status: two commands done with some white lines in done file
ok 45 - status: two remaining commands with some white lines in todo file
ok 46 - status: handle not-yet-started rebase -i gracefully
# passed all 46 test(s)
1..46
*** t7513-interpret-trailers.sh ***
ok 1 - setup
ok 2 - with cmd
ok 3 - with cmd and $1
ok 4 - with cmd and $1 with sh -c
ok 5 - with cmd and $1 with shell script
ok 6 - without config
ok 7 - without config in another order
ok 8 - --trim-empty without config
ok 9 - with config option on the command line
ok 10 - with only a title in the message
ok 11 - with multiline title in the message
ok 12 - with non-trailer lines mixed with Signed-off-by
ok 13 - with non-trailer lines mixed with cherry picked from
ok 14 - with non-trailer lines mixed with a configured trailer
ok 15 - with non-trailer lines mixed with a non-configured trailer
ok 16 - with all non-configured trailers
ok 17 - with non-trailer lines only
ok 18 - line with leading whitespace is not trailer
ok 19 - multiline field treated as one trailer for 25% check
ok 20 - multiline field treated as atomic for placement
ok 21 - multiline field treated as atomic for replacement
ok 22 - multiline field treated as atomic for difference check
ok 23 - multiline field treated as atomic for neighbor check
ok 24 - with config setup
ok 25 - with config setup and ":=" as separators
ok 26 - with config setup and "%" as separators
ok 27 - with "%" as separators and a message with trailers
ok 28 - with config setup and ":=#" as separators
ok 29 - with commit basic message
ok 30 - with basic patch
ok 31 - with commit complex message as argument
ok 32 - with 2 files arguments
ok 33 - with message that has comments (#)
ok 34 - with message that has comments (;)
ok 35 - with message that has an old style conflict block
ok 36 - with commit complex message and trailer args
ok 37 - with complex patch, args and --trim-empty
ok 38 - in-place editing with basic patch
ok 39 - in-place editing with additional trailer
ok 40 - in-place editing on stdin disallowed
ok 41 - in-place editing on non-existing file
ok 42 - in-place editing doesn't clobber original file on error
ok 43 - using "where = before"
ok 44 - overriding configuration with "--where after"
ok 45 - using "--where after" with "--no-where"
ok 46 - using "--where after" with "--no-where" defaults to configuration
ok 47 - using "--no-where" defaults to harcoded default if nothing configured
ok 48 - using "where = after"
ok 49 - using "where = end"
ok 50 - using "where = start"
ok 51 - using "where = before" for a token in the middle of the message
ok 52 - using "where = before" and --trim-empty
ok 53 - the default is "ifExists = addIfDifferentNeighbor"
ok 54 - default "ifExists" is now "addIfDifferent"
ok 55 - using "ifExists = addIfDifferent" with "where = end"
ok 56 - using "ifExists = addIfDifferent" with "where = before"
ok 57 - using "ifExists = addIfDifferentNeighbor" with "where = end"
ok 58 - using "ifExists = addIfDifferentNeighbor"  with "where = after"
ok 59 - using "ifExists = addIfDifferentNeighbor" and --trim-empty
ok 60 - using "ifExists = add" with "where = end"
ok 61 - using "ifExists = add" with "where = after"
ok 62 - overriding configuration with "--if-exists replace"
ok 63 - using "--if-exists replace" with "--no-if-exists" defaults to configuration
ok 64 - using "--no-if-exists" defaults to hardcoded default if nothing configured
ok 65 - using "--no-if-exists" defaults to hardcoded default if nothing configured (no addition)
ok 66 - using "ifExists = replace"
ok 67 - using "ifExists = replace" with "where = after"
ok 68 - using "ifExists = doNothing"
ok 69 - the default is "ifMissing = add"
ok 70 - overriding configuration with "--if-missing doNothing"
ok 71 - when default "ifMissing" is "doNothing"
ok 72 - using "ifMissing = add" with "where = end"
ok 73 - using "ifMissing = add" with "where = before"
ok 74 - using "ifMissing = doNothing"
ok 75 - using "--no-if-missing" defaults to configuration
ok 76 - using "--no-if-missing" defaults to hardcoded default if nothing configured
ok 77 - default "where" is now "after"
ok 78 - with simple command
ok 79 - with command using committer information
ok 80 - with command using author information
ok 81 - setup a commit
ok 82 - cmd takes precedence over command
ok 83 - with command using $ARG
ok 84 - with failing command using $ARG
ok 85 - with empty tokens
ok 86 - with command but no key
ok 87 - with no command and no key
ok 88 - with cut line
ok 89 - only trailers
ok 90 - only-trailers omits non-trailer in middle of block
ok 91 - only input
ok 92 - unfold
ok 93 - handling of --- lines in input
ok 94 - suppress --- handling
ok 95 - suppressing --- does not disable cut-line handling
ok 96 - handling of --- lines in conjunction with cut-lines
# passed all 96 test(s)
1..96
*** t7514-commit-patch.sh ***
ok 1 - setup (initial)
ok 2 - edit hunk "commit -p -m message"
ok 3 - edit hunk "commit --dry-run -p -m message"
# passed all 3 test(s)
1..3
*** t7515-status-symlinks.sh ***
ok 1 - setup
ok 2 - symlink to a directory
ok 3 - symlink replacing a directory
# passed all 3 test(s)
1..3
*** t7516-commit-races.sh ***
ok 1 - race to create orphan commit
ok 2 - race to create non-orphan commit
# passed all 2 test(s)
1..2
*** t7517-per-repo-email.sh ***
ok 1 - setup a likely user.useConfigOnly use case
ok 2 - fails committing if clone email is not set
ok 3 - fails committing if clone email is not set, but EMAIL set
ok 4 - succeeds committing if clone email is set
ok 5 - succeeds cloning if global email is not set
ok 6 - set up rebase scenarios
ok 7 - fast-forward rebase does not care about ident
ok 8 - non-fast-forward rebase refuses to write commits
ok 9 - fast-forward rebase does not care about ident (interactive)
ok 10 - non-fast-forward rebase refuses to write commits (interactive)
ok 11 - noop interactive rebase does not care about ident
ok 12 - author.name overrides user.name
ok 13 - author.email overrides user.email
ok 14 - committer.name overrides user.name
ok 15 - committer.email overrides user.email
ok 16 - author and committer environment variables override config settings
# passed all 16 test(s)
1..16
*** t7518-ident-corner-cases.sh ***
ok 1 - empty name and missing email
ok 2 - commit rejects all-crud name
ok 3 - commit does not strip trailing dot
ok 4 - empty configured name does not auto-detect
ok 5 - empty configured name does not auto-detect for committer
# passed all 5 test(s)
1..5
*** t7519-status-fsmonitor.sh ***
ok 1 - incompatible bare repo
ok 2 # skip run fsmonitor-daemon in bare repo (missing FSMONITOR_DAEMON)
ok 3 # skip run fsmonitor-daemon in virtual repo (missing FSMONITOR_DAEMON,MINGW of MINGW,FSMONITOR_DAEMON)
ok 4 - setup
ok 5 - fsmonitor extension is off by default
ok 6 - update-index --fsmonitor" adds the fsmonitor extension
ok 7 - update-index --no-fsmonitor" removes the fsmonitor extension
ok 8 - update-index --fsmonitor-valid" sets the fsmonitor valid bit
ok 9 - update-index --no-fsmonitor-valid" clears the fsmonitor valid bit
ok 10 - all files returned by integration script get flagged as invalid
ok 11 - newly added files are marked valid
ok 12 - all unmodified files get marked valid
ok 13 - *only* files returned by the integration script get flagged as invalid
ok 14 - refresh_index() invalidates fsmonitor cache
ok 15 - setup preloadIndex to false
ok 16 - setup untracked cache to false
ok 17 - compare status with and without fsmonitor
ok 18 - status doesn't detect unreported modifications
ok 19 - setup untracked cache to true
ok 20 - compare status with and without fsmonitor
ok 21 - status doesn't detect unreported modifications
ok 22 - setup preloadIndex to true
ok 23 - setup untracked cache to false
ok 24 - compare status with and without fsmonitor
ok 25 - status doesn't detect unreported modifications
ok 26 - setup untracked cache to true
ok 27 - compare status with and without fsmonitor
ok 28 - status doesn't detect unreported modifications
ok 29 - splitting the index results in the same state
ok 30 - ignore .git changes when invalidating UNTR
ok 31 - discard_index() also discards fsmonitor info
ok 32 - status succeeds after staging/unstaging
ok 33 - status succeeds with sparse index
# passed all 33 test(s)
1..33
*** t7520-ignored-hook-warning.sh ***
ok 1 - setup
ok 2 - no warning if hook is not ignored
ok 3 - warning if hook is ignored
ok 4 - no warning if advice.ignoredHook set to false
ok 5 - no warning if unset advice.ignoredHook and hook removed
# passed all 5 test(s)
1..5
*** t7521-ignored-mode.sh ***
ok 1 - setup initial commit and ignore file
ok 2 - Verify behavior of status on directories with ignored files
ok 3 - Verify status behavior on directory with tracked & ignored files
ok 4 - Verify status behavior on directory with untracked and ignored files
ok 5 - Verify status matching ignored files on ignored directory
ok 6 - Verify status behavior on ignored directory containing tracked file
ok 7 - Verify matching ignored files with --untracked-files=normal
ok 8 - Verify matching ignored files with --untracked-files=normal
ok 9 - Verify status behavior on ignored directory containing tracked file
ok 10 - Verify behavior of status with --ignored=no
ok 11 - Verify behavior of status with --ignored=traditional and --untracked-files=all
ok 12 - Verify behavior of status with --ignored=traditional and --untracked-files=normal
# passed all 12 test(s)
1..12
*** t7524-commit-summary.sh ***
ok 1 - setup
ok 2 - commit summary ignores rewrites
# passed all 2 test(s)
1..2
*** t7525-status-rename.sh ***
ok 1 - setup
ok 2 - status no-options
ok 3 - status --no-renames
ok 4 - status.renames inherits from diff.renames false
ok 5 - status.renames inherits from diff.renames true
ok 6 - status.renames overrides diff.renames false
ok 7 - status.renames overrides from diff.renames true
ok 8 - status status.renames=false
ok 9 - status status.renames=true
ok 10 - commit honors status.renames=false
ok 11 - commit honors status.renames=true
ok 12 - status config overridden
ok 13 - status score=100%
ok 14 - status score=01%
ok 15 - copies not overridden by find-renames
# passed all 15 test(s)
1..15
*** t7526-commit-pathspec-file.sh ***
ok 1 - setup
ok 2 - --pathspec-from-file from stdin
ok 3 - --pathspec-from-file from file
ok 4 - NUL delimiters
ok 5 - LF delimiters
ok 6 - no trailing delimiter
ok 7 - CRLF delimiters
ok 8 - quotes
ok 9 - quotes not compatible with --pathspec-file-nul
ok 10 - only touches what was listed
ok 11 - error conditions
# passed all 11 test(s)
1..11
*** t7527-builtin-fsmonitor.sh ***
1..0 # SKIP fsmonitor--daemon is not supported on this platform
*** t7528-signed-commit-ssh.sh ***
ok 1 - create signed commits
ok 2 - sign commits using literal public keys with ssh-agent
ok 3 - create signed commits with keys having defined lifetimes
ok 4 - verify and show signatures
ok 5 - verify-commit exits failure on untrusted signature
ok 6 - verify-commit exits failure on expired signature key
ok 7 - verify-commit exits failure on not yet valid signature key
ok 8 - verify-commit succeeds with commit date and key validity matching
ok 9 - verify-commit exits failure with commit date outside of key validity
ok 10 - verify-commit exits success with matching minTrustLevel
ok 11 - verify-commit exits success with low minTrustLevel
ok 12 - verify-commit exits failure with high minTrustLevel
ok 13 - verify signatures with --raw
ok 14 - proper header is used for hash algorithm
ok 15 - show signed commit with signature
ok 16 - detect fudged signature
ok 17 - detect fudged signature with NUL
ok 18 - amending already signed commit
ok 19 - show good signature with custom format
ok 20 - show bad signature with custom format
ok 21 - show untrusted signature with custom format
ok 22 - show untrusted signature with undefined trust level
ok 23 - show untrusted signature with ultimate trust level
ok 24 - show lack of signature with custom format
ok 25 - log.showsignature behaves like --show-signature
ok 26 - check config gpg.format values
not ok 27 - detect fudged commit with double signature (TODO) # TODO known breakage
not ok 28 - show double signature with custom format (TODO) # TODO known breakage
not ok 29 - verify-commit verifies multiply signed commits (TODO) # TODO known breakage
# still have 3 known breakage(s)
# passed all remaining 26 test(s)
1..29
*** t7600-merge.sh ***
ok 1 - setup
ok 2 - test option parsing
ok 3 - merge -h with invalid index
ok 4 - reject non-strategy with a git-merge-foo name
ok 5 - merge c0 with c1
ok 6 - merge c0 with c1 with --ff-only
ok 7 - merge from unborn branch
ok 8 - merge c1 with c2
ok 9 - merge --squash c3 with c7
ok 10 - merge --squash --autostash conflict does not attempt to apply autostash
ok 11 - merge c3 with c7 with commit.cleanup = scissors
ok 12 - merge c3 with c7 with --squash commit.cleanup = scissors
ok 13 - merge c1 with c2 and c3
ok 14 - merges with --ff-only
ok 15 - merges with merge.ff=only
ok 16 - merge c0 with c1 (no-commit)
ok 17 - merge c1 with c2 (no-commit)
ok 18 - merge c1 with c2 and c3 (no-commit)
ok 19 - merge c0 with c1 (squash)
ok 20 - merge c0 with c1 (squash, ff-only)
ok 21 - merge c1 with c2 (squash)
ok 22 - unsuccessful merge of c1 with c2 (squash, ff-only)
ok 23 - merge c1 with c2 and c3 (squash)
ok 24 - merge c1 with c2 (no-commit in config)
ok 25 - merge c1 with c2 (log in config)
ok 26 - merge c1 with c2 (log in config gets overridden)
ok 27 - merge c1 with c2 (squash in config)
ok 28 - override config option -n with --summary
ok 29 - override config option -n with --stat
ok 30 - override config option --stat
ok 31 - merge c1 with c2 (override --no-commit)
ok 32 - merge c1 with c2 (override --squash)
ok 33 - merge c0 with c1 (no-ff)
ok 34 - merge c0 with c1 (merge.ff=false)
ok 35 - combine branch.main.mergeoptions with merge.ff
ok 36 - tolerate unknown values for merge.ff
ok 37 - combining --squash and --no-ff is refused
ok 38 - combining --squash and --commit is refused
ok 39 - option --ff-only overwrites --no-ff
ok 40 - option --no-ff overrides merge.ff=only config
ok 41 - merge c0 with c1 (ff overrides no-ff)
ok 42 - merge log message
ok 43 - merge c1 with c0, c2, c0, and c1
ok 44 - merge c1 with c0, c2, c0, and c1
ok 45 - merge c1 with c1 and c2
ok 46 - merge fast-forward in a dirty tree
ok 47 - in-index merge
ok 48 - refresh the index before merging
ok 49 - merge with --autostash
ok 50 - merge with merge.autoStash
ok 51 - fast-forward merge with --autostash
ok 52 - failed fast-forward merge with --autostash
ok 53 - octopus merge with --autostash
ok 54 - failed merge (exit 2) with --autostash
ok 55 - conflicted merge with --autostash, --abort restores stash
ok 56 - completed merge (git commit) with --no-commit and --autostash
ok 57 - completed merge (git merge --continue) with --no-commit and --autostash
ok 58 - aborted merge (merge --abort) with --no-commit and --autostash
ok 59 - aborted merge (reset --hard) with --no-commit and --autostash
ok 60 - quit merge with --no-commit and --autostash
ok 61 - merge with conflicted --autostash changes
ok 62 - merge early part of c2
ok 63 - merge --no-ff --no-commit && commit
ok 64 - amending no-ff merge commit
ok 65 - merge --no-ff --edit
ok 66 - merge annotated/signed tag w/o tracking
ok 67 - merge annotated/signed tag w/ tracking
ok 68 # skip merge --ff-only tag (missing GPG)
ok 69 # skip merge --no-edit tag should skip editor (missing GPG)
ok 70 - set up mod-256 conflict scenario
ok 71 - merge detects mod-256 conflicts (recursive)
ok 72 - merge detects mod-256 conflicts (resolve)
ok 73 - merge nothing into void
ok 74 - merge can be completed with --continue
ok 75 - killed merge can be completed with --continue
ok 76 - merge --quit
ok 77 - merge suggests matching remote refname
ok 78 - suggested names are not ambiguous
# passed all 78 test(s)
1..78
*** t7601-merge-pull-config.sh ***
ok 1 - setup
ok 2 - pull.rebase not set, ff possible
ok 3 - pull.rebase not set and pull.ff=true
ok 4 - pull.rebase not set and pull.ff=false
ok 5 - pull.rebase not set and pull.ff=only
ok 6 - pull.rebase not set and --rebase given
ok 7 - pull.rebase not set and --no-rebase given
ok 8 - pull.rebase not set and --ff given
ok 9 - pull.rebase not set and --no-ff given
ok 10 - pull.rebase not set and --ff-only given
ok 11 - pull.rebase not set (not-fast-forward)
ok 12 - pull.rebase not set and pull.ff=true (not-fast-forward)
ok 13 - pull.rebase not set and pull.ff=false (not-fast-forward)
ok 14 - pull.rebase not set and pull.ff=only (not-fast-forward)
ok 15 - pull.rebase not set and --rebase given (not-fast-forward)
ok 16 - pull.rebase not set and --no-rebase given (not-fast-forward)
ok 17 - pull.rebase not set and --ff given (not-fast-forward)
ok 18 - pull.rebase not set and --no-ff given (not-fast-forward)
ok 19 - pull.rebase not set and --ff-only given (not-fast-forward)
ok 20 - --ff-only overrides --rebase
ok 21 - --ff-only overrides --rebase even if first
ok 22 - --ff-only overrides --no-rebase
ok 23 - pull.ff=only overrides pull.rebase=true
ok 24 - pull.ff=only overrides pull.rebase=false
ok 25 - --rebase overrides --no-ff
ok 26 - --rebase overrides --ff
ok 27 - --rebase fast-forwards when possible
ok 28 - pull.rebase=true overrides pull.ff=false
ok 29 - pull.rebase=true overrides pull.ff=true
ok 30 - --ff-only takes precedence over pull.rebase=true
ok 31 - --ff-only takes precedence over pull.rebase=false
ok 32 - --no-rebase takes precedence over pull.ff=only
ok 33 - --rebase takes precedence over pull.ff=only
ok 34 - --rebase overrides pull.ff=true
ok 35 - --rebase overrides pull.ff=false
ok 36 - --rebase overrides pull.ff unset
ok 37 - --no-rebase works with --no-ff
ok 38 - --no-rebase works with --ff
ok 39 - --no-rebase does ff if pull.ff unset
ok 40 - --no-rebase heeds pull.ff=true
ok 41 - --no-rebase heeds pull.ff=false
ok 42 - pull.rebase=true and --no-ff
ok 43 - pull.rebase=true and --ff
ok 44 - pull.rebase=false and --no-ff
ok 45 - pull.rebase=false and --ff, ff possible
ok 46 - pull.rebase=false and --ff, ff not possible
ok 47 - Multiple heads warns about inability to fast forward
ok 48 - Multiple can never be fast forwarded
ok 49 - Cannot rebase with multiple heads
ok 50 - merge c1 with c2
ok 51 - fast-forward pull succeeds with "true" in pull.ff
ok 52 - pull.ff=true overrides merge.ff=false
ok 53 - fast-forward pull creates merge with "false" in pull.ff
ok 54 - pull prevents non-fast-forward with "only" in pull.ff
ok 55 - already-up-to-date pull succeeds with unspecified pull.ff
ok 56 - already-up-to-date pull succeeds with "only" in pull.ff
ok 57 - already-up-to-date pull/rebase succeeds with "only" in pull.ff
ok 58 - merge c1 with c2 (ours in pull.twohead)
ok 59 - merge c1 with c2 and c3 (recursive in pull.octopus)
ok 60 - merge c1 with c2 and c3 (recursive and octopus in pull.octopus)
ok 61 - setup conflicted merge
ok 62 - merge picks up the best result
ok 63 - merge picks up the best result (from config)
ok 64 - merge errors out on invalid strategy
ok 65 - merge errors out on invalid strategy
# passed all 65 test(s)
1..65
*** t7602-merge-octopus-many.sh ***
ok 1 - setup
ok 2 - merge c1 with c2, c3, c4, ... c29
ok 3 - merge output uses pretty names
ok 4 - merge reduces irrelevant remote heads
ok 5 - merge fast-forward output uses pretty names
# passed all 5 test(s)
1..5
*** t7603-merge-reduce-heads.sh ***
ok 1 - setup
ok 2 - merge c1 with c2, c3, c4, c5
ok 3 - pull c2, c3, c4, c5 into c1
ok 4 - setup
ok 5 - merge E and I
ok 6 - verify merge result
ok 7 - add conflicts
ok 8 - merge E2 and I2, causing a conflict and resolve it
ok 9 - verify merge result
ok 10 - fast-forward to redundant refs
ok 11 - verify merge result
ok 12 - merge up-to-date redundant refs
ok 13 - verify merge result
# passed all 13 test(s)
1..13
*** t7604-merge-custom-message.sh ***
ok 1 - setup
ok 2 - merge c2 with a custom message
ok 3 - merge --log appends to custom message
ok 4 - prepare file with comment line and trailing newlines
ok 5 - cleanup commit messages (verbatim option)
ok 6 - cleanup commit messages (whitespace option)
ok 7 - cleanup merge messages (scissors option)
ok 8 - cleanup commit messages (strip option)
# passed all 8 test(s)
1..8
*** t7605-merge-resolve.sh ***
ok 1 - setup
ok 2 - merge c1 to c2
ok 3 - merge c1 to c2, again
ok 4 - merge c2 to c3 (fails)
# passed all 4 test(s)
1..4
*** t7606-merge-custom.sh ***
ok 1 - set up custom strategy
ok 2 - setup
ok 3 - merge c2 with a custom strategy
ok 4 - trivial merge with custom strategy
# passed all 4 test(s)
1..4
*** t7607-merge-state.sh ***
ok 1 - Ensure we restore original state if no merge strategy handles it
# passed all 1 test(s)
1..1
*** t7608-merge-messages.sh ***
ok 1 - merge local branch
ok 2 - merge octopus branches
ok 3 - merge tag
ok 4 - ambiguous tag
ok 5 - remote-tracking branch
# passed all 5 test(s)
1..5
*** t7609-mergetool--lib.sh ***
ok 1 - mergetool --tool=vimdiff creates the expected layout
# passed all 1 test(s)
1..1
*** t7610-mergetool.sh ***
ok 1 - setup
ok 2 - custom mergetool
ok 3 - gui mergetool
ok 4 - gui mergetool without merge.guitool set falls back to merge.tool
ok 5 - mergetool crlf
ok 6 - mergetool in subdir
ok 7 - mergetool on file in parent dir
ok 8 - mergetool skips autoresolved
ok 9 - mergetool merges all from subdir (rerere disabled)
ok 10 - mergetool merges all from subdir (rerere enabled)
ok 11 - mergetool skips resolved paths when rerere is active
ok 12 - conflicted stash sets up rerere
ok 13 - mergetool takes partial path
ok 14 - mergetool delete/delete conflict
ok 15 - mergetool produces no errors when keepBackup is used
ok 16 - mergetool honors tempfile config for deleted files
ok 17 - mergetool keeps tempfiles when aborting delete/delete
ok 18 - deleted vs modified submodule
ok 19 - file vs modified submodule
ok 20 - submodule in subdirectory
ok 21 - directory vs modified submodule
ok 22 - file with no base
ok 23 - custom commands override built-ins
ok 24 - filenames seen by tools start with ./
ok 25 - temporary filenames are used with mergetool.writeToTemp
ok 26 - diff.orderFile configuration is honored
ok 27 - mergetool -Oorder-file is honored
ok 28 - mergetool --tool-help shows recognized tools
ok 29 - mergetool hideResolved
ok 30 - mergetool with guiDefault
# passed all 30 test(s)
1..30
*** t7611-merge-abort.sh ***
ok 1 - setup
ok 2 - fails without MERGE_HEAD (unstarted merge)
ok 3 - fails without MERGE_HEAD (unstarted merge): .git/MERGE_HEAD sanity
ok 4 - fails without MERGE_HEAD (completed merge)
ok 5 - fails without MERGE_HEAD (completed merge): .git/MERGE_HEAD sanity
ok 6 - Forget previous merge
ok 7 - Abort after --no-commit
ok 8 - Abort after conflicts
ok 9 - Clean merge with dirty index fails
ok 10 - Conflicting merge with dirty index fails
ok 11 - Reset index (but preserve worktree changes)
ok 12 - Abort clean merge with non-conflicting dirty worktree
ok 13 - Abort conflicting merge with non-conflicting dirty worktree
ok 14 - Reset worktree changes
ok 15 - Fail clean merge with conflicting dirty worktree
ok 16 - Fail conflicting merge with conflicting dirty worktree
ok 17 - Reset worktree changes
ok 18 - Fail clean merge with matching dirty worktree
ok 19 - Fail conflicting merge with matching dirty worktree
# passed all 19 test(s)
1..19
*** t7612-merge-verify-signatures.sh ***
ok 1 # skip create signed commits (missing GPG)
ok 2 # skip merge unsigned commit with verification (missing GPG)
ok 3 # skip merge unsigned commit with merge.verifySignatures=true (missing GPG)
ok 4 # skip merge commit with bad signature with verification (missing GPG)
ok 5 # skip merge commit with bad signature with merge.verifySignatures=true (missing GPG)
ok 6 # skip merge commit with untrusted signature with verification (missing GPG)
ok 7 # skip merge commit with untrusted signature with verification and high minTrustLevel (missing GPG)
ok 8 # skip merge commit with untrusted signature with verification and low minTrustLevel (missing GPG)
ok 9 # skip merge commit with untrusted signature with merge.verifySignatures=true (missing GPG)
ok 10 # skip merge commit with untrusted signature with merge.verifySignatures=true and minTrustLevel (missing GPG)
ok 11 # skip merge signed commit with verification (missing GPG)
ok 12 # skip merge signed commit with merge.verifySignatures=true (missing GPG)
ok 13 # skip merge commit with bad signature without verification (missing GPG)
ok 14 # skip merge commit with bad signature with merge.verifySignatures=false (missing GPG)
ok 15 # skip merge commit with bad signature with merge.verifySignatures=true and --no-verify-signatures (missing GPG)
ok 16 # skip merge unsigned commit into unborn branch (missing GPG)
# passed all 16 test(s)
1..16
*** t7614-merge-signoff.sh ***
ok 1 - setup
ok 2 - git merge --signoff adds a sign-off line
ok 3 - git merge does not add a sign-off line
ok 4 - git merge --no-signoff flag cancels --signoff flag
# passed all 4 test(s)
1..4
*** t7700-repack.sh ***
ok 1 - objects in packs marked .keep are not repacked
ok 2 - writing bitmaps via command-line can duplicate .keep objects
ok 3 - writing bitmaps via config can duplicate .keep objects
ok 4 - loose objects in alternate ODB are not repacked
ok 5 - --local keeps packs when alternate is objectdir 
ok 6 - --local disables writing bitmaps when connected to alternate ODB
ok 7 - packed obs in alt ODB are repacked even when local repo is packless
ok 8 - packed obs in alt ODB are repacked when local repo has packs
ok 9 - packed obs in alternate ODB kept pack are repacked
ok 10 - packed unreachable obs in alternate ODB are not loosened
ok 11 - local packed unreachable obs that exist in alternate ODB are not loosened
ok 12 - objects made unreachable by grafts only are kept
ok 13 - repack --keep-pack
ok 14 - repacking fails when missing .pack actually means missing objects
ok 15 - bitmaps are created by default in bare repos
ok 16 - incremental repack does not complain
ok 17 - bitmaps can be disabled on bare repos
ok 18 - no bitmaps created if .keep files present
ok 19 - auto-bitmaps do not complain if unavailable
ok 20 - repacking with a filter works
ok 21 - --filter fails with --write-bitmap-index
ok 22 - repacking with two filters works
ok 23 - --filter works with .keep packs
ok 24 - --filter works with --pack-kept-objects and .keep packs
ok 25 - --filter-to stores filtered out objects
ok 26 - --filter works with --max-pack-size
ok 27 - setup for --write-midx tests
ok 28 - --write-midx unchanged
ok 29 - --write-midx with a new pack
ok 30 - --write-midx with -b
ok 31 - --write-midx with -d
ok 32 - cleans up MIDX when appropriate
ok 33 - --write-midx with preferred bitmap tips
ok 34 - --write-midx -b packs non-kept objects
ok 35 - --write-midx removes stale pack-based bitmaps
ok 36 - --write-midx with --pack-kept-objects
ok 37 - --quiet disables progress
ok 38 - clean up .tmp-* packs on error
ok 39 - repack -ad cleans up old .tmp-* packs
ok 40 - setup for update-server-info
ok 41 - updates server info by default
ok 42 - -n skips updating server info
ok 43 - repack.updateServerInfo=true updates server info
ok 44 - repack.updateServerInfo=false skips updating server info
ok 45 - -n overrides repack.updateServerInfo=true
# passed all 45 test(s)
1..45
*** t7701-repack-unpack-unreachable.sh ***
ok 1 - -A with -d option leaves unreachable objects unpacked
ok 2 - -A without -d option leaves unreachable objects packed
ok 3 - unpacked objects receive timestamp of pack file
ok 4 - do not bother loosening old objects
ok 5 - gc.recentObjectsHook
ok 6 - keep packed objects found only in index
ok 7 - repack -k keeps unreachable packed objects
ok 8 - repack -k packs unreachable loose objects
# passed all 8 test(s)
1..8
*** t7702-repack-cyclic-alternate.sh ***
ok 1 - setup
ok 2 - re-packing repository with itsself as alternate
# passed all 2 test(s)
1..2
*** t7703-repack-geometric.sh ***
ok 1 - --geometric with no packs
ok 2 - --geometric with one pack
ok 3 - --geometric with an intact progression
ok 4 - --geometric with loose objects
ok 5 - --geometric with small-pack rollup
ok 6 - --geometric with small- and large-pack rollup
ok 7 - --geometric ignores kept packs
ok 8 - --geometric ignores --keep-pack packs
ok 9 - --geometric chooses largest MIDX preferred pack
ok 10 - --geometric with pack.packSizeLimit
ok 11 - --geometric --write-midx with packfiles in main and alternate ODB
ok 12 - --geometric --with-midx with no local objects
ok 13 - --geometric with same pack in main and alternate ODB
ok 14 - --geometric -l with non-intact geometric sequence across ODBs
ok 15 - --geometric -l disables writing bitmaps with non-local packfiles
# passed all 15 test(s)
1..15
*** t7704-repack-cruft.sh ***
ok 1 - --expire-to stores pruned objects (now)
ok 2 - --expire-to stores pruned objects (5.minutes.ago)
ok 3 - --max-cruft-size creates new packs when above threshold
ok 4 - --max-cruft-size combines existing packs when below threshold
ok 5 - --max-cruft-size combines smaller packs first
ok 6 - setup --max-cruft-size with freshened objects
ok 7 - --max-cruft-size with freshened objects (loose)
ok 8 - --max-cruft-size with freshened objects (packed)
ok 9 - --max-cruft-size with pruning
ok 10 - --max-cruft-size ignores non-local packs
ok 11 - reachable packs are preferred over cruft ones
# passed all 11 test(s)
1..11
*** t7800-difftool.sh ***
ok 1 - basic usage requires no repo
ok 2 - setup
ok 3 - custom commands
ok 4 - custom tool commands override built-ins
ok 5 - difftool ignores bad --tool values
ok 6 - difftool forwards arguments to diff
ok 7 - difftool without options ignores exit code
ok 8 - difftool without options forwards exit code with --trust-exit-code
ok 9 - difftool without options forwards exit code with --trust-exit-code for built-ins
ok 10 - difftool without options honors difftool.trustExitCode = true
ok 11 - difftool without options honors difftool.trustExitCode = false
ok 12 - difftool without options ignores exit code with --no-trust-exit-code
ok 13 - difftool without options stops on error with --trust-exit-code
ok 14 - difftool without options honors exit status if command not found
ok 15 - difftool --dir-diff ignores exit code
ok 16 - difftool --dir-diff forwards exit code with --trust-exit-code
ok 17 - difftool --dir-diff forwards exit code with --trust-exit-code for built-ins
ok 18 - difftool --dir-diff honors difftool.trustExitCode = true
ok 19 - difftool --dir-diff honors difftool.trustExitCode = false
ok 20 - difftool --dir-diff ignores exit code with --no-trust-exit-code
ok 21 - difftool --dir-diff stops on error with --trust-exit-code
ok 22 - difftool --dir-diff honors exit status if command not found
ok 23 - difftool honors --gui
ok 24 - difftool with guiDefault auto selects gui tool when there is DISPLAY
ok 25 - difftool with guiDefault auto selects regular tool when no DISPLAY
ok 26 - difftool with guiDefault true selects gui tool
ok 27 - difftool --no-gui trumps config guiDefault
ok 28 - difftool --gui last setting wins
ok 29 - difftool --gui works without configured diff.guitool
ok 30 - GIT_DIFF_TOOL variable
ok 31 - GIT_DIFF_TOOL overrides
ok 32 - GIT_DIFFTOOL_NO_PROMPT variable
ok 33 - GIT_DIFFTOOL_PROMPT variable
ok 34 - difftool.prompt config variable is false
ok 35 - difftool merge.prompt = false
ok 36 - difftool.prompt can overridden with -y
ok 37 - difftool.prompt can overridden with --prompt
ok 38 - difftool last flag wins
ok 39 - difftool + mergetool config variables
ok 40 - difftool.<tool>.path
ok 41 - difftool --extcmd=cat
ok 42 - difftool --extcmd cat
ok 43 - difftool -x cat
ok 44 - difftool --extcmd echo arg1
ok 45 - difftool --extcmd cat arg1
ok 46 - difftool --extcmd cat arg2
ok 47 - setup with 2 files different
ok 48 - say no to the first file
ok 49 - say no to the second file
ok 50 - ending prompt input with EOF
ok 51 - difftool --tool-help
ok 52 - setup change in subdirectory
ok 53 - difftool -d with growing paths
ok 54 - difftool -d --no-symlinks
ok 55 - difftool -d --symlinks
ok 56 - difftool --dir-diff --no-symlinks
ok 57 - difftool --dir-diff --symlinks
ok 58 - difftool --dir-diff avoids repeated slashes in TMPDIR --no-symlinks
ok 59 - difftool --dir-diff avoids repeated slashes in TMPDIR --symlinks
ok 60 - difftool --dir-diff ignores --prompt --no-symlinks
ok 61 - difftool --dir-diff ignores --prompt --symlinks
ok 62 - difftool --dir-diff branch from subdirectory --no-symlinks
ok 63 - difftool --dir-diff branch from subdirectory --symlinks
ok 64 - difftool --dir-diff v1 from subdirectory --no-symlinks
ok 65 - difftool --dir-diff v1 from subdirectory --symlinks
ok 66 - difftool --dir-diff branch from subdirectory w/ pathspec --no-symlinks
ok 67 - difftool --dir-diff branch from subdirectory w/ pathspec --symlinks
ok 68 - difftool --dir-diff v1 from subdirectory w/ pathspec --no-symlinks
ok 69 - difftool --dir-diff v1 from subdirectory w/ pathspec --symlinks
ok 70 - difftool --dir-diff from subdirectory with GIT_DIR set --no-symlinks
ok 71 - difftool --dir-diff from subdirectory with GIT_DIR set --symlinks
ok 72 - difftool --dir-diff when worktree file is missing --no-symlinks
ok 73 - difftool --dir-diff when worktree file is missing --symlinks
ok 74 - difftool --dir-diff with unmerged files --no-symlinks
ok 75 - difftool --dir-diff with unmerged files --symlinks
ok 76 - difftool --dir-diff --symlinks without unstaged changes
ok 77 - difftool --dir-diff syncs worktree with unstaged change --no-symlinks
ok 78 - difftool --dir-diff syncs worktree with unstaged change --symlinks
ok 79 - difftool --dir-diff syncs worktree without unstaged change --no-symlinks
ok 80 - difftool --dir-diff syncs worktree without unstaged change --symlinks
ok 81 - difftool --no-symlinks does not overwrite working tree file 
ok 82 - difftool --no-symlinks detects conflict 
ok 83 - difftool properly honors gitlink and core.worktree
ok 84 - difftool --dir-diff symlinked directories
ok 85 - difftool --dir-diff handles modified symlinks
ok 86 - difftool --dir-diff writes symlinks as raw text
ok 87 - add -N and difftool -d
ok 88 - difftool --cached with unmerged files
ok 89 - outside worktree
ok 90 - difftool --gui, --tool and --extcmd are mutually exclusive
ok 91 - difftool --rotate-to
ok 92 - difftool --skip-to
ok 93 - difftool --rotate/skip-to error condition
# passed all 93 test(s)
1..93
*** t7810-grep.sh ***
ok 1 - setup
ok 2 - grep should not segfault with a bad input
ok 3 - invalid expression: grep --and -e A
ok 4 - grep -w HEAD
ok 5 - grep -w HEAD (with --column)
ok 6 - grep -w HEAD (with --column, extended OR)
ok 7 - grep -w HEAD (with --column, --invert-match)
ok 8 - grep HEAD (with --column, --invert-match, extended OR)
ok 9 - grep HEAD (with --column, --invert-match, extended AND)
ok 10 - grep HEAD (with --column, double-negation)
ok 11 - grep -w HEAD (with --column, -C)
ok 12 - grep -w HEAD (with --line-number, --column)
ok 13 - grep -w HEAD (with non-extended patterns, --column)
ok 14 - grep -w HEAD
ok 15 - grep -w HEAD
ok 16 - grep -w HEAD (w)
ok 17 - grep -w HEAD (x)
ok 18 - grep -w HEAD (y-1)
ok 19 - grep -w HEAD (y-2)
ok 20 - grep -w HEAD (z)
ok 21 - grep HEAD (with --column, --only-matching)
ok 22 - grep HEAD (t-1)
ok 23 - grep HEAD (t-2)
ok 24 - grep HEAD (t-3)
ok 25 - grep -c HEAD (no /dev/null)
ok 26 - grep --max-depth -1 HEAD
ok 27 - grep --max-depth 0 HEAD
ok 28 - grep --max-depth 0 -- '*' HEAD
ok 29 - grep --max-depth 1 HEAD
ok 30 - grep --max-depth 0 -- t HEAD
ok 31 - grep --max-depth 0 -- . t HEAD
ok 32 - grep --max-depth 0 -- t . HEAD
ok 33 - grep HEAD with '-c grep.extendedRegexp=false' interpreted as BRE
ok 34 - grep HEAD with '-c grep.extendedRegexp=true' interpreted as ERE
ok 35 - grep HEAD with '-c grep.patternType=basic' interpreted as BRE
ok 36 - grep HEAD with '-c grep.patternType=extended' interpreted as ERE
ok 37 - grep HEAD with '-c grep.patternType=fixed' interpreted as FIX
ok 38 - grep HEAD with grep.patterntype=perl
ok 39 # skip grep HEAD with grep.patterntype=perl errors without PCRE (missing !PCRE of !FAIL_PREREQS,!PCRE)
ok 40 - grep HEAD with '-c grep.patternType=default -c grep.extendedRegexp=true' interpreted as ERE
ok 41 - grep HEAD with '-c grep.extendedRegexp=true -c grep.patternType=default' interpreted as ERE
ok 42 - grep HEAD with '-c grep.patternType=extended -c grep.extendedRegexp=false' interpreted as ERE
ok 43 - grep HEAD with '-c grep.patternType=basic -c grep.extendedRegexp=true' interpreted as BRE
ok 44 - grep HEAD with '-c grep.extendedRegexp=false -c grep.patternType=extended' interpreted as ERE
ok 45 - grep HEAD with '-c grep.extendedRegexp=true -c grep.patternType=basic' interpreted as BRE
ok 46 - grep HEAD with '-c grep.extendedRegexp=true -c grep.extendedRegexp=false' interpreted as BRE
ok 47 - grep HEAD with '-c grep.extendedRegexp=true -c grep.patternType=basic -c grep.extendedRegexp=false' interpreted as BRE
ok 48 - grep HEAD with '-c grep.extendedRegexp=true -c grep.patternType=extended -c grep.extendedRegexp=false' interpreted as ERE
ok 49 - grep HEAD with '-c grep.patternType=fixed -c grep.extendedRegexp=true -c grep.patternType=default' interpreted as ERE
ok 50 - grep HEAD with '-c grep.extendedRegexp=false -c grep.patternType=default -c grep.extendedRegexp=true' interpreted as ERE
ok 51 - grep HEAD with '-c grep.extendedRegexp=false -c grep.extendedRegexp=true -c grep.patternType=default' interpreted as ERE
ok 52 - grep HEAD with '-c grep.patternType=default -c grep.extendedRegexp=true -c grep.patternType=basic' interpreted as BRE
ok 53 - grep HEAD with '-c grep.patternType=extended -c grep.patternType=default' interpreted as BRE
ok 54 - grep HEAD with '-c grep.patternType=extended -c grep.patternType=default -c grep.patternType=fixed' interpreted as FIX
ok 55 - grep --count HEAD
ok 56 - grep --count -h HEAD
ok 57 - grep HEAD should quote unusual pathnames
ok 58 - grep HEAD in subdir should quote unusual relative pathnames
ok 59 - grep -z HEAD with unusual pathnames
ok 60 - grep -z HEAD in subdir with unusual relative pathnames
ok 61 - grep -w in working tree
ok 62 - grep -w in working tree (with --column)
ok 63 - grep -w in working tree (with --column, extended OR)
ok 64 - grep -w in working tree (with --column, --invert-match)
ok 65 - grep in working tree (with --column, --invert-match, extended OR)
ok 66 - grep in working tree (with --column, --invert-match, extended AND)
ok 67 - grep in working tree (with --column, double-negation)
ok 68 - grep -w in working tree (with --column, -C)
ok 69 - grep -w in working tree (with --line-number, --column)
ok 70 - grep -w in working tree (with non-extended patterns, --column)
ok 71 - grep -w in working tree
ok 72 - grep -w in working tree
ok 73 - grep -w in working tree (w)
ok 74 - grep -w in working tree (x)
ok 75 - grep -w in working tree (y-1)
ok 76 - grep -w in working tree (y-2)
ok 77 - grep -w in working tree (z)
ok 78 - grep in working tree (with --column, --only-matching)
ok 79 - grep in working tree (t-1)
ok 80 - grep in working tree (t-2)
ok 81 - grep in working tree (t-3)
ok 82 - grep -c in working tree (no /dev/null)
ok 83 - grep --max-depth -1 in working tree
ok 84 - grep --max-depth 0 in working tree
ok 85 - grep --max-depth 0 -- '*' in working tree
ok 86 - grep --max-depth 1 in working tree
ok 87 - grep --max-depth 0 -- t in working tree
ok 88 - grep --max-depth 0 -- . t in working tree
ok 89 - grep --max-depth 0 -- t . in working tree
ok 90 - grep in working tree with '-c grep.extendedRegexp=false' interpreted as BRE
ok 91 - grep in working tree with '-c grep.extendedRegexp=true' interpreted as ERE
ok 92 - grep in working tree with '-c grep.patternType=basic' interpreted as BRE
ok 93 - grep in working tree with '-c grep.patternType=extended' interpreted as ERE
ok 94 - grep in working tree with '-c grep.patternType=fixed' interpreted as FIX
ok 95 - grep in working tree with grep.patterntype=perl
ok 96 # skip grep in working tree with grep.patterntype=perl errors without PCRE (missing !PCRE of !FAIL_PREREQS,!PCRE)
ok 97 - grep in working tree with '-c grep.patternType=default -c grep.extendedRegexp=true' interpreted as ERE
ok 98 - grep in working tree with '-c grep.extendedRegexp=true -c grep.patternType=default' interpreted as ERE
ok 99 - grep in working tree with '-c grep.patternType=extended -c grep.extendedRegexp=false' interpreted as ERE
ok 100 - grep in working tree with '-c grep.patternType=basic -c grep.extendedRegexp=true' interpreted as BRE
ok 101 - grep in working tree with '-c grep.extendedRegexp=false -c grep.patternType=extended' interpreted as ERE
ok 102 - grep in working tree with '-c grep.extendedRegexp=true -c grep.patternType=basic' interpreted as BRE
ok 103 - grep in working tree with '-c grep.extendedRegexp=true -c grep.extendedRegexp=false' interpreted as BRE
ok 104 - grep in working tree with '-c grep.extendedRegexp=true -c grep.patternType=basic -c grep.extendedRegexp=false' interpreted as BRE
ok 105 - grep in working tree with '-c grep.extendedRegexp=true -c grep.patternType=extended -c grep.extendedRegexp=false' interpreted as ERE
ok 106 - grep in working tree with '-c grep.patternType=fixed -c grep.extendedRegexp=true -c grep.patternType=default' interpreted as ERE
ok 107 - grep in working tree with '-c grep.extendedRegexp=false -c grep.patternType=default -c grep.extendedRegexp=true' interpreted as ERE
ok 108 - grep in working tree with '-c grep.extendedRegexp=false -c grep.extendedRegexp=true -c grep.patternType=default' interpreted as ERE
ok 109 - grep in working tree with '-c grep.patternType=default -c grep.extendedRegexp=true -c grep.patternType=basic' interpreted as BRE
ok 110 - grep in working tree with '-c grep.patternType=extended -c grep.patternType=default' interpreted as BRE
ok 111 - grep in working tree with '-c grep.patternType=extended -c grep.patternType=default -c grep.patternType=fixed' interpreted as FIX
ok 112 - grep --count in working tree
ok 113 - grep --count -h in working tree
ok 114 - grep in working tree should quote unusual pathnames
ok 115 - grep in working tree in subdir should quote unusual relative pathnames
ok 116 - grep -z in working tree with unusual pathnames
ok 117 - grep -z in working tree in subdir with unusual relative pathnames
ok 118 - grep exactly one char in single-char multibyte file
ok 119 - grep two chars in single-char multibyte file
ok 120 - grep -l -C
ok 121 - grep -c -C
ok 122 - grep -L -C
ok 123 - grep --files-without-match --quiet
ok 124 - grep --max-count 0 (must exit with non-zero)
ok 125 - grep --max-count 3
ok 126 - grep --max-count -1 (no limit)
ok 127 - grep --max-count 1 --context 2
ok 128 - grep --max-count 1 --show-function
ok 129 - grep --max-count 2 --show-function
ok 130 - grep --max-count 1 --count
ok 131 - grep --max-count 1 (multiple files)
ok 132 - grep --max-count 1 --context 1 (multiple files)
ok 133 - grep -e A --and -e B
ok 134 - grep ( -e A --or -e B ) --and -e B
ok 135 - grep -e A --and --not -e B
ok 136 - grep should ignore GREP_OPTIONS
ok 137 - grep -f, non-existent file
ok 138 - grep -f, one pattern
ok 139 - grep -f, multiple patterns
ok 140 - grep, multiple patterns
ok 141 - grep -f, ignore empty lines
ok 142 - grep -f, ignore empty lines, read patterns from stdin
ok 143 - grep -f, use cwd relative file
ok 144 - grep -q, silently report matches
ok 145 - grep -C1 hunk mark between files
ok 146 - log grep setup
ok 147 - log grep (1)
ok 148 - log grep (2)
ok 149 - log grep (3)
ok 150 - log grep (4)
ok 151 - log grep (5)
ok 152 - log grep (6)
ok 153 - log grep (7)
ok 154 - log grep (8)
ok 155 - log grep (9)
ok 156 - log grep (9)
ok 157 - log --grep-reflog can only be used under -g
ok 158 - log with multiple --grep uses union
ok 159 - log --all-match with multiple --grep uses intersection
ok 160 - log with multiple --author uses union
ok 161 - log --all-match with multiple --author still uses union
ok 162 - log --grep --author uses intersection
ok 163 - log --grep --grep --author takes union of greps and intersects with author
ok 164 - log ---all-match -grep --author --author still takes union of authors and intersects with grep
ok 165 - log --grep --author --author takes union of authors and intersects with grep
ok 166 - log --all-match --grep --grep --author takes intersection
ok 167 - log --author does not search in timestamp
ok 168 - log --committer does not search in timestamp
ok 169 - grep with CE_VALID file
ok 170 - grep -p with userdiff
ok 171 - grep -p
ok 172 - grep -p -B5
ok 173 - grep -W
ok 174 - grep -W shows no trailing empty lines
ok 175 - grep -W with userdiff
ok 176 -  includes preceding comment
ok 177 -  includes function line
ok 178 -  includes matching line
ok 179 -  includes last line of the function
ok 180 - grep --threads=0 & -c grep.threads=0
ok 181 - grep --threads=1 & -c grep.threads=1
ok 182 - grep --threads=2 & -c grep.threads=2
ok 183 - grep --threads=3 & -c grep.threads=3
ok 184 - grep --threads=4 & -c grep.threads=4
ok 185 - grep --threads=5 & -c grep.threads=5
ok 186 - grep --threads=6 & -c grep.threads=6
ok 187 - grep --threads=7 & -c grep.threads=7
ok 188 - grep --threads=8 & -c grep.threads=8
ok 189 - grep --threads=9 & -c grep.threads=9
ok 190 - grep --threads=10 & -c grep.threads=10
ok 191 # skip grep --threads=N or pack.threads=N warns when no pthreads (missing !PTHREADS of !PTHREADS,!FAIL_PREREQS)
ok 192 - grep from a subdirectory to search wider area (1)
ok 193 - grep from a subdirectory to search wider area (2)
ok 194 - grep -Fi
ok 195 - outside of git repository
ok 196 - outside of git repository with fallbackToNoIndex
ok 197 - no repository with path outside $cwd
ok 198 - inside git repository but with --no-index
ok 199 - grep --no-index descends into repos, but not .git
ok 200 - setup double-dash tests
ok 201 - grep -- pattern
ok 202 - grep -- pattern -- pathspec
ok 203 - grep -e pattern -- path
ok 204 - grep -e -- -- path
ok 205 - dashdash disambiguates rev as rev
ok 206 - dashdash disambiguates pathspec as pathspec
ok 207 - report bogus arg without dashdash
ok 208 - report bogus rev with dashdash
ok 209 - allow non-existent path with dashdash
ok 210 - grep --no-index pattern -- path
ok 211 - grep --no-index complains of revs
ok 212 - grep --no-index prefers paths to revs
ok 213 - grep --no-index does not "diagnose" revs
ok 214 - grep --perl-regexp pattern
ok 215 # skip grep --perl-regexp pattern errors without PCRE (missing !PCRE of !FAIL_PREREQS,!PCRE)
ok 216 - grep -P pattern
ok 217 - grep -P with (*NO_JIT) doesn't error out
ok 218 # skip grep -P pattern errors without PCRE (missing !PCRE of !FAIL_PREREQS,!PCRE)
ok 219 - grep pattern with grep.extendedRegexp=true
ok 220 - grep -P pattern with grep.extendedRegexp=true
ok 221 - grep -P -v pattern
ok 222 - grep -P -i pattern
ok 223 - grep -P -w pattern
ok 224 - grep -P backreferences work (the PCRE NO_AUTO_CAPTURE flag is not set)
ok 225 - grep -G invalidpattern properly dies 
ok 226 - grep invalidpattern properly dies with grep.patternType=basic
ok 227 - grep -E invalidpattern properly dies 
ok 228 - grep invalidpattern properly dies with grep.patternType=extended
ok 229 - grep -P invalidpattern properly dies 
ok 230 - grep invalidpattern properly dies with grep.patternType=perl
ok 231 - grep -G -E -F pattern
ok 232 - grep pattern with grep.patternType=basic, =extended, =fixed
ok 233 - grep -E -F -G pattern
ok 234 - grep pattern with grep.patternType=extended, =fixed, =basic
ok 235 - grep -F -G -E pattern
ok 236 - grep pattern with grep.patternType=fixed, =basic, =extended
ok 237 - grep -G -F -P -E pattern
ok 238 - grep pattern with grep.patternType=fixed, =basic, =perl, =extended
ok 239 - grep -G -F -E -P pattern
ok 240 - grep pattern with grep.patternType=fixed, =basic, =extended, =perl
ok 241 - grep -P pattern with grep.patternType=fixed
ok 242 - grep -F pattern with grep.patternType=basic
ok 243 - grep -G pattern with grep.patternType=fixed
ok 244 - grep -E pattern with grep.patternType=fixed
ok 245 - grep --color, separator
ok 246 - grep --break
ok 247 - grep --break with context
ok 248 - grep --heading
ok 249 - mimic ack-grep --group
ok 250 - grep -E "^ "
ok 251 - grep -P "^ "
ok 252 - grep --color -e A -e B with context
ok 253 - grep --color -e A --and -e B with context
ok 254 - grep --color -e A --and --not -e B with context
ok 255 - grep --color -e A --and -e B -p with context
ok 256 - grep can find things only in the work tree
ok 257 - grep can find things only in the work tree (i-t-a)
ok 258 - grep does not search work tree with assume unchanged
ok 259 - grep can find things only in the index
ok 260 - grep does not report i-t-a with -L --cached
ok 261 - grep does not report i-t-a and assume unchanged with -L
# passed all 261 test(s)
1..261
*** t7811-grep-open.sh ***
ok 1 - determine default pager
ok 2 - setup
ok 3 - git grep -O
ok 4 - git grep -O --cached
ok 5 - git grep -O --no-index
ok 6 - setup: fake "less"
ok 7 - git grep -O jumps to line in less
ok 8 - modified file
ok 9 - copes with color settings
ok 10 - run from subdir
# passed all 10 test(s)
1..10
*** t7812-grep-icase-non-ascii.sh ***
# lib-gettext: Found 'is_IS.UTF-8' as an is_IS UTF-8 locale
# lib-gettext: Found 'is_IS.ISO8859-1' as an is_IS ISO-8859-1 locale
ok 1 - setup
ok 2 - setup REGEX_LOCALE prerequisite
ok 3 - grep literal string, no -F
ok 4 - grep pcre utf-8 icase
ok 5 - grep pcre utf-8 string with "+"
ok 6 - grep literal string, with -F
ok 7 - grep string with regex, with -F
ok 8 - pickaxe -i on non-ascii
ok 9 - PCRE v2: setup invalid UTF-8 data
ok 10 - PCRE v2: grep ASCII from invalid UTF-8 data
ok 11 - PCRE v2: grep ASCII from invalid UTF-8 data (PCRE2 bug #2642)
ok 12 - PCRE v2: grep non-ASCII from invalid UTF-8 data
ok 13 - PCRE v2: grep non-ASCII from invalid UTF-8 data (PCRE2 bug #2642)
ok 14 - PCRE v2: grep non-ASCII from invalid UTF-8 data with -i
ok 15 - PCRE v2: grep non-ASCII from invalid UTF-8 data with -i
ok 16 - PCRE v2: grep non-ASCII from invalid UTF-8 data with -i (PCRE2 bug #2642)
ok 17 - PCRE v2: grep non-literal ASCII from UTF-8
ok 18 - PCRE v2: grep avoid endless loop bug
# passed all 18 test(s)
1..18
*** t7813-grep-icase-iso.sh ***
# lib-gettext: Found 'is_IS.UTF-8' as an is_IS UTF-8 locale
# lib-gettext: Found 'is_IS.ISO8859-1' as an is_IS ISO-8859-1 locale
ok 1 - setup
ok 2 - grep pcre string
# passed all 2 test(s)
1..2
*** t7814-grep-recurse-submodules.sh ***
ok 1 - setup directory structure and submodule
ok 2 - grep correctly finds patterns in a submodule
ok 3 - grep finds patterns in a submodule via config
ok 4 - grep --no-recurse-submodules overrides config
ok 5 - grep and basic pathspecs
ok 6 - grep and nested submodules
ok 7 - grep and multiple patterns
ok 8 - grep and multiple patterns
ok 9 - basic grep tree
ok 10 - grep tree HEAD^
ok 11 - grep tree HEAD^^
ok 12 - grep tree and pathspecs
ok 13 - grep tree and pathspecs
ok 14 - grep tree and more pathspecs
ok 15 - grep tree and more pathspecs
ok 16 - grep recurse submodule colon in name
ok 17 - grep history with moved submoules
ok 18 - grep using relative path
ok 19 - grep from a subdir
ok 20 - --recurse-submodules and --untracked are incompatible
ok 21 - grep --recurse-submodules --no-index ignores --recurse-submodules
ok 22 - grep --recurse-submodules should pass the pattern type along
ok 23 - grep --recurse-submodules with submodules without .gitmodules in the working tree
ok 24 - grep --recurse-submodules without --cached considers worktree modifications
ok 25 - grep --recurse-submodules with --cached ignores worktree modifications
not ok 26 - grep --textconv: superproject .gitattributes does not affect submodules # TODO known breakage
not ok 27 - grep --textconv: superproject .gitattributes (from index) does not affect submodules # TODO known breakage
not ok 28 - grep --textconv: superproject .git/info/attributes does not affect submodules # TODO known breakage
not ok 29 - grep --textconv correctly reads submodule .gitattributes # TODO known breakage
not ok 30 - grep --textconv correctly reads submodule .gitattributes (from index) # TODO known breakage
not ok 31 - grep --textconv correctly reads submodule .git/info/attributes # TODO known breakage
not ok 32 - grep saves textconv cache in the appropriate repository # TODO known breakage
ok 33 - grep partially-cloned submodule
ok 34 - check scope of core.useReplaceRefs
# still have 7 known breakage(s)
# passed all remaining 27 test(s)
1..34
*** t7815-grep-binary.sh ***
ok 1 - setup
ok 2 - git grep ina a
ok 3 - git grep -ah ina a
ok 4 - git grep -I ina a
ok 5 - git grep -c ina a
ok 6 - git grep -l ina a
ok 7 - git grep -L bar a
ok 8 - git grep -q ina a
ok 9 - git grep -F ile a
ok 10 - git grep -Fi iLE a
ok 11 - git grep ile a
ok 12 - git grep .fi a # TODO known breakage vanished
ok 13 - grep respects binary diff attribute
ok 14 - grep --cached respects binary diff attribute
ok 15 - grep --cached respects binary diff attribute (2)
ok 16 - grep revision respects binary diff attribute
ok 17 - grep respects not-binary diff attribute
ok 18 - setup textconv filters
ok 19 - grep does not honor textconv
ok 20 - grep --textconv honors textconv
ok 21 - grep --no-textconv does not honor textconv
ok 22 - grep --textconv blob honors textconv
# 1 known breakage(s) vanished; please update test(s)
# passed all remaining 21 test(s)
1..22
*** t7816-grep-binary-pattern.sh ***
# lib-gettext: Found 'is_IS.UTF-8' as an is_IS UTF-8 locale
# lib-gettext: Found 'is_IS.ISO8859-1' as an is_IS ISO-8859-1 locale
ok 1 - setup
ok 2 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>f' a
ok 3 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>f' a
ok 4 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -F 'y<NUL>f' a
ok 5 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>x' a
ok 6 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>x' a
ok 7 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -F 'y<NUL>x' a
ok 8 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>f' a
ok 9 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>f' a
ok 10 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -Fi 'Y<NUL>f' a
ok 11 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>x' a
ok 12 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>x' a
ok 13 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -Fi 'Y<NUL>x' a
ok 14 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>f' a
ok 15 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>f' a
ok 16 - LC_ALL='is_IS.UTF-8' git grep -P -f f  'y<NUL>f' a
ok 17 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>x' a
ok 18 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>x' a
ok 19 - LC_ALL='is_IS.UTF-8' git grep -P -f f  'y<NUL>x' a
ok 20 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'æ<NUL>ð' a
ok 21 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'æ<NUL>ð' a
ok 22 - LC_ALL='is_IS.UTF-8' git grep -P -f f  'æ<NUL>ð' a
ok 23 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'e<NUL>m[*]c' a
ok 24 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'e<NUL>m[*]c' a
ok 25 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -F 'e<NUL>m[*]c' a
ok 26 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'E<NUL>M[*]C' a
ok 27 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'E<NUL>M[*]C' a
ok 28 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -Fi 'E<NUL>M[*]C' a
ok 29 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>[f]' a
ok 30 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>[f]' a
ok 31 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -F 'y<NUL>[f]' a
ok 32 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F '[y]<NUL>f' a
ok 33 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F '[y]<NUL>f' a
ok 34 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -F '[y]<NUL>f' a
ok 35 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>[F]' a
ok 36 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>[F]' a
ok 37 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -Fi 'Y<NUL>[F]' a
ok 38 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi '[Y]<NUL>F' a
ok 39 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi '[Y]<NUL>F' a
ok 40 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -Fi '[Y]<NUL>F' a
ok 41 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'æ<NUL>[ð]' a
ok 42 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'æ<NUL>[ð]' a
ok 43 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -F 'æ<NUL>[ð]' a
ok 44 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F '[æ]<NUL>ð' a
ok 45 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F '[æ]<NUL>ð' a
ok 46 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -F '[æ]<NUL>ð' a
ok 47 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[æ]<NUL>ð' a
ok 48 - LC_ALL='C' git grep -P -f f -i '[æ]<NUL>ð' a
ok 49 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i '[æ]<NUL>ð' a
ok 50 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Æ<NUL>[Ð]' a
ok 51 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Æ<NUL>[Ð]' a
ok 52 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -Fi 'Æ<NUL>[Ð]' a
ok 53 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>[Ð]' a
ok 54 - LC_ALL='C' git grep -P -f f -i 'Æ<NUL>[Ð]' a
ok 55 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i 'Æ<NUL>[Ð]' a
ok 56 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Æ]<NUL>Ð' a
ok 57 - LC_ALL='C' git grep -P -f f -i '[Æ]<NUL>Ð' a
ok 58 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i '[Æ]<NUL>Ð' a
ok 59 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Æ]<NUL>ð' a
ok 60 - LC_ALL='C' git grep -P -f f -i '[Æ]<NUL>ð' a
ok 61 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i '[Æ]<NUL>ð' a
ok 62 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>Ð' a
ok 63 - LC_ALL='C' git grep -P -f f -i 'Æ<NUL>Ð' a
ok 64 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i 'Æ<NUL>Ð' a
ok 65 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>[f]' a
ok 66 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>[f]' a
ok 67 - LC_ALL='is_IS.UTF-8' git grep -P -f f  'y<NUL>[f]' a
ok 68 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '[y]<NUL>f' a
ok 69 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '[y]<NUL>f' a
ok 70 - LC_ALL='is_IS.UTF-8' git grep -P -f f  '[y]<NUL>f' a
ok 71 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>[F]' a
ok 72 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>[F]' a
ok 73 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i 'Y<NUL>[F]' a
ok 74 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Y]<NUL>f' a
ok 75 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Y]<NUL>f' a
ok 76 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i '[Y]<NUL>f' a
ok 77 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'æ<NUL>[ð]' a
ok 78 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'æ<NUL>[ð]' a
ok 79 - LC_ALL='is_IS.UTF-8' git grep -P -f f  'æ<NUL>[ð]' a
ok 80 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '[æ]<NUL>ð' a
ok 81 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '[æ]<NUL>ð' a
ok 82 - LC_ALL='is_IS.UTF-8' git grep -P -f f  '[æ]<NUL>ð' a
ok 83 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>[Ð]' a
ok 84 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>[Ð]' a
ok 85 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i 'Æ<NUL>[Ð]' a
ok 86 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'e<NUL>m.*c<NUL>' a
ok 87 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'e<NUL>m.*c<NUL>' a
ok 88 - LC_ALL='is_IS.UTF-8' git grep -P -f f  'e<NUL>m.*c<NUL>' a
ok 89 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'E<NUL>M.*c<NUL>' a
ok 90 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'E<NUL>M.*c<NUL>' a
ok 91 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i 'E<NUL>M.*c<NUL>' a
ok 92 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'e<NUL>m[*]c' a
ok 93 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'e<NUL>m[*]c' a
ok 94 - LC_ALL='is_IS.UTF-8' git grep -P -f f  'e<NUL>m[*]c' a
ok 95 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'E<NUL>M[*]C' a
ok 96 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'E<NUL>M[*]C' a
ok 97 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i 'E<NUL>M[*]C' a
ok 98 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'NOMATCH<NUL>ð' a
ok 99 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'NOMATCH<NUL>ð' a
ok 100 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i 'NOMATCH<NUL>ð' a
ok 101 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Æ]<NUL>NOMATCH' a
ok 102 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Æ]<NUL>NOMATCH' a
ok 103 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i '[Æ]<NUL>NOMATCH' a
ok 104 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[æ]<NUL>NOMATCH' a
ok 105 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[æ]<NUL>NOMATCH' a
ok 106 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i '[æ]<NUL>NOMATCH' a
ok 107 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>[f]' a
ok 108 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>[f]' a
ok 109 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -F 'y<NUL>[f]' a
ok 110 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>[F]' a
ok 111 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>[F]' a
ok 112 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -Fi 'Y<NUL>[F]' a
ok 113 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>NOMATCH' a
ok 114 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>NOMATCH' a
ok 115 - LC_ALL='is_IS.UTF-8' git grep -P -f f  'y<NUL>NOMATCH' a
ok 116 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '<NUL>NOMATCH' a
ok 117 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '<NUL>NOMATCH' a
ok 118 - LC_ALL='is_IS.UTF-8' git grep -P -f f  '<NUL>NOMATCH' a
ok 119 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>NOMATCH' a
ok 120 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>NOMATCH' a
ok 121 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i 'Y<NUL>NOMATCH' a
ok 122 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '<NUL>NOMATCH' a
ok 123 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '<NUL>NOMATCH' a
ok 124 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i '<NUL>NOMATCH' a
ok 125 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'æ<NUL>[ð]' a
ok 126 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'æ<NUL>[ð]' a
ok 127 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -F 'æ<NUL>[ð]' a
ok 128 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Æ<NUL>[Ð]' a
ok 129 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Æ<NUL>[Ð]' a
ok 130 - error, PCRE v2 only: LC_ALL='is_IS.UTF-8' git grep -f f -Fi 'Æ<NUL>[Ð]' a
ok 131 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>[Ð]' a
ok 132 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>[Ð]' a
ok 133 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i 'Æ<NUL>[Ð]' a
ok 134 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>NÓMATCH' a
ok 135 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>NÓMATCH' a
ok 136 - LC_ALL='is_IS.UTF-8' git grep -P -f f  'y<NUL>NÓMATCH' a
ok 137 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '<NUL>NÓMATCH' a
ok 138 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '<NUL>NÓMATCH' a
ok 139 - LC_ALL='is_IS.UTF-8' git grep -P -f f  '<NUL>NÓMATCH' a
ok 140 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>NÓMATCH' a
ok 141 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>NÓMATCH' a
ok 142 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i 'Y<NUL>NÓMATCH' a
ok 143 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '<NUL>NÓMATCH' a
ok 144 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '<NUL>NÓMATCH' a
ok 145 - LC_ALL='is_IS.UTF-8' git grep -P -f f -i '<NUL>NÓMATCH' a
# passed all 145 test(s)
1..145
*** t7817-grep-sparse-checkout.sh ***
ok 1 - setup
ok 2 - working tree grep honors sparse checkout
ok 3 - grep searches unmerged file despite not matching sparsity patterns
ok 4 - grep --cached searches entries with the SKIP_WORKTREE bit
ok 5 - grep --recurse-submodules honors sparse checkout in submodule
ok 6 - grep --recurse-submodules --cached searches entries with the SKIP_WORKTREE bit
ok 7 - working tree grep does not search the index with CE_VALID and SKIP_WORKTREE
ok 8 - grep --cached searches index entries with both CE_VALID and SKIP_WORKTREE
# passed all 8 test(s)
1..8
*** t7900-maintenance.sh ***
ok 1 - help text
ok 2 - run [--auto|--quiet]
ok 3 - maintenance.auto config option
ok 4 - register uses XDG_CONFIG_HOME config if it exists
ok 5 - register does not need XDG_CONFIG_HOME config to exist
ok 6 - unregister uses XDG_CONFIG_HOME config if it exists
ok 7 - unregister does not need XDG_CONFIG_HOME config to exist
ok 8 - maintenance.<task>.enabled
ok 9 - run --task=<task>
ok 10 - core.commitGraph=false prevents write process
ok 11 - commit-graph auto condition
ok 12 - run --task=bogus
ok 13 - run --task duplicate
ok 14 - run --task=prefetch with no remotes
ok 15 - prefetch multiple remotes
ok 16 - loose-objects task
ok 17 - maintenance.loose-objects.auto
ok 18 - incremental-repack task
ok 19 # skip incremental-repack 2g limit (missing EXPENSIVE)
ok 20 - maintenance.incremental-repack.auto
ok 21 - maintenance.incremental-repack.auto (when config is unset)
ok 22 - pack-refs task
ok 23 - --auto and --schedule incompatible
ok 24 - invalid --schedule value
ok 25 - --schedule inheritance weekly -> daily -> hourly
ok 26 - maintenance.strategy inheritance
ok 27 - register and unregister
ok 28 - register with no value for maintenance.repo
ok 29 - unregister with no value for maintenance.repo
ok 30 - register and unregister with regex metacharacters
ok 31 - start --scheduler=<scheduler>
ok 32 - start from empty cron table
ok 33 - stop from existing schedule
ok 34 - start preserves existing schedule
ok 35 - magic markers are correct
ok 36 - stop preserves surrounding schedule
ok 37 - start and stop macOS maintenance
ok 38 - use launchctl list to prevent extra work
ok 39 - start and stop Windows maintenance
ok 40 - start and stop Linux/systemd maintenance
ok 41 - start and stop when several schedulers are available
ok 42 - register preserves existing strategy
ok 43 - fails when running outside of a repository
ok 44 - register and unregister bare repo
ok 45 - failed schedule prevents config change
# passed all 45 test(s)
1..45
*** t8001-annotate.sh ***
ok 1 - setup A lines
ok 2 - blame 1 author
ok 3 - blame working copy
ok 4 - blame with --contents
ok 5 - blame with --contents in a bare repo
ok 6 - blame with --contents changed
ok 7 - blame in a bare repo without starting commit
ok 8 - blame by tag objects
ok 9 - setup B lines
ok 10 - blame 2 authors
ok 11 - blame with --contents and revision
ok 12 - setup B1 lines (branch1)
ok 13 - blame 2 authors + 1 branch1 author
ok 14 - setup B2 lines (branch2)
ok 15 - blame 2 authors + 1 branch2 author
ok 16 - merge branch1 & branch2
ok 17 - blame 2 authors + 2 merged-in authors
ok 18 - blame --first-parent blames merge for branch1
ok 19 - blame ancestor
ok 20 - blame great-ancestor
ok 21 - setup evil merge
ok 22 - blame evil merge
ok 23 - blame huge graft
ok 24 - setup incomplete line
ok 25 - blame incomplete line
ok 26 - setup edits
ok 27 - blame edits
ok 28 - setup obfuscated email
ok 29 - blame obfuscated email
ok 30 - blame -L 1 (all)
ok 31 - blame -L , (all)
ok 32 - blame -L X (X to end)
ok 33 - blame -L X, (X to end)
ok 34 - blame -L ,Y (up to Y)
ok 35 - blame -L X,X
ok 36 - blame -L X,Y
ok 37 - blame -L Y,X (undocumented)
ok 38 - blame -L -X
ok 39 - blame -L 0
ok 40 - blame -L ,0
ok 41 - blame -L ,+0
ok 42 - blame -L X,+0
ok 43 - blame -L X,+1
ok 44 - blame -L X,+N
ok 45 - blame -L ,-0
ok 46 - blame -L X,-0
ok 47 - blame -L X,-1
ok 48 - blame -L X,-N
ok 49 - blame -L /RE/ (RE to end)
ok 50 - blame -L /RE/,/RE2/
ok 51 - blame -L X,/RE/
ok 52 - blame -L /RE/,Y
ok 53 - blame -L /RE/,+N
ok 54 - blame -L /RE/,-N
ok 55 - blame -L X (X == nlines)
ok 56 - blame -L X (X == nlines + 1)
ok 57 - blame -L X (X > nlines)
ok 58 - blame -L ,Y (Y == nlines)
ok 59 - blame -L ,Y (Y == nlines + 1)
ok 60 - blame -L ,Y (Y > nlines)
ok 61 - blame -L multiple (disjoint)
ok 62 - blame -L multiple (disjoint: unordered)
ok 63 - blame -L multiple (adjacent)
ok 64 - blame -L multiple (adjacent: unordered)
ok 65 - blame -L multiple (overlapping)
ok 66 - blame -L multiple (overlapping: unordered)
ok 67 - blame -L multiple (superset/subset)
ok 68 - blame -L multiple (superset/subset: unordered)
ok 69 - blame -L /RE/ (relative)
ok 70 - blame -L /RE/ (relative: no preceding range)
ok 71 - blame -L /RE/ (relative: adjacent)
ok 72 - blame -L /RE/ (relative: not found)
ok 73 - blame -L /RE/ (relative: end-of-file)
ok 74 - blame -L ^/RE/ (absolute)
ok 75 - blame -L ^/RE/ (absolute: no preceding range)
ok 76 - blame -L ^/RE/ (absolute: not found)
ok 77 - blame -L ^/RE/ (absolute: end-of-file)
ok 78 - setup -L :regex
ok 79 - blame -L :literal
ok 80 - blame -L :regex
ok 81 - blame -L :nomatch
ok 82 - blame -L :RE (relative)
ok 83 - blame -L :RE (relative: no preceding range)
ok 84 - blame -L :RE (relative: not found)
ok 85 - blame -L :RE (relative: end-of-file)
ok 86 - blame -L ^:RE (absolute)
ok 87 - blame -L ^:RE (absolute: no preceding range)
ok 88 - blame -L ^:RE (absolute: not found)
ok 89 - blame -L ^:RE (absolute: end-of-file)
ok 90 - blame -L :funcname with userdiff driver
ok 91 - setup incremental
ok 92 - blame empty
ok 93 - blame -L 0 empty
ok 94 - blame -L 1 empty
ok 95 - blame -L 2 empty
ok 96 - blame half
ok 97 - blame -L 0 half
ok 98 - blame -L 1 half
ok 99 - blame -L 2 half
ok 100 - blame -L 3 half
ok 101 - blame full
ok 102 - blame -L 0 full
ok 103 - blame -L 1 full
ok 104 - blame -L 2 full
ok 105 - blame -L 3 full
ok 106 - blame -L
ok 107 - blame -L X,+
ok 108 - blame -L X,-
ok 109 - blame -L X (non-numeric X)
ok 110 - blame -L X,Y (non-numeric Y)
ok 111 - blame -L X,+N (non-numeric N)
ok 112 - blame -L X,-N (non-numeric N)
ok 113 - blame -L ,^/RE/
ok 114 - blame progress on a full file
ok 115 - blame progress on a single range
ok 116 - blame progress on multiple ranges
ok 117 - annotate old revision
# passed all 117 test(s)
1..117
*** t8002-blame.sh ***
ok 1 - setup A lines
ok 2 - blame 1 author
ok 3 - blame working copy
ok 4 - blame with --contents
ok 5 - blame with --contents in a bare repo
ok 6 - blame with --contents changed
ok 7 - blame in a bare repo without starting commit
ok 8 - blame by tag objects
ok 9 - setup B lines
ok 10 - blame 2 authors
ok 11 - blame with --contents and revision
ok 12 - setup B1 lines (branch1)
ok 13 - blame 2 authors + 1 branch1 author
ok 14 - setup B2 lines (branch2)
ok 15 - blame 2 authors + 1 branch2 author
ok 16 - merge branch1 & branch2
ok 17 - blame 2 authors + 2 merged-in authors
ok 18 - blame --first-parent blames merge for branch1
ok 19 - blame ancestor
ok 20 - blame great-ancestor
ok 21 - setup evil merge
ok 22 - blame evil merge
ok 23 - blame huge graft
ok 24 - setup incomplete line
ok 25 - blame incomplete line
ok 26 - setup edits
ok 27 - blame edits
ok 28 - setup obfuscated email
ok 29 - blame obfuscated email
ok 30 - blame -L 1 (all)
ok 31 - blame -L , (all)
ok 32 - blame -L X (X to end)
ok 33 - blame -L X, (X to end)
ok 34 - blame -L ,Y (up to Y)
ok 35 - blame -L X,X
ok 36 - blame -L X,Y
ok 37 - blame -L Y,X (undocumented)
ok 38 - blame -L -X
ok 39 - blame -L 0
ok 40 - blame -L ,0
ok 41 - blame -L ,+0
ok 42 - blame -L X,+0
ok 43 - blame -L X,+1
ok 44 - blame -L X,+N
ok 45 - blame -L ,-0
ok 46 - blame -L X,-0
ok 47 - blame -L X,-1
ok 48 - blame -L X,-N
ok 49 - blame -L /RE/ (RE to end)
ok 50 - blame -L /RE/,/RE2/
ok 51 - blame -L X,/RE/
ok 52 - blame -L /RE/,Y
ok 53 - blame -L /RE/,+N
ok 54 - blame -L /RE/,-N
ok 55 - blame -L X (X == nlines)
ok 56 - blame -L X (X == nlines + 1)
ok 57 - blame -L X (X > nlines)
ok 58 - blame -L ,Y (Y == nlines)
ok 59 - blame -L ,Y (Y == nlines + 1)
ok 60 - blame -L ,Y (Y > nlines)
ok 61 - blame -L multiple (disjoint)
ok 62 - blame -L multiple (disjoint: unordered)
ok 63 - blame -L multiple (adjacent)
ok 64 - blame -L multiple (adjacent: unordered)
ok 65 - blame -L multiple (overlapping)
ok 66 - blame -L multiple (overlapping: unordered)
ok 67 - blame -L multiple (superset/subset)
ok 68 - blame -L multiple (superset/subset: unordered)
ok 69 - blame -L /RE/ (relative)
ok 70 - blame -L /RE/ (relative: no preceding range)
ok 71 - blame -L /RE/ (relative: adjacent)
ok 72 - blame -L /RE/ (relative: not found)
ok 73 - blame -L /RE/ (relative: end-of-file)
ok 74 - blame -L ^/RE/ (absolute)
ok 75 - blame -L ^/RE/ (absolute: no preceding range)
ok 76 - blame -L ^/RE/ (absolute: not found)
ok 77 - blame -L ^/RE/ (absolute: end-of-file)
ok 78 - setup -L :regex
ok 79 - blame -L :literal
ok 80 - blame -L :regex
ok 81 - blame -L :nomatch
ok 82 - blame -L :RE (relative)
ok 83 - blame -L :RE (relative: no preceding range)
ok 84 - blame -L :RE (relative: not found)
ok 85 - blame -L :RE (relative: end-of-file)
ok 86 - blame -L ^:RE (absolute)
ok 87 - blame -L ^:RE (absolute: no preceding range)
ok 88 - blame -L ^:RE (absolute: not found)
ok 89 - blame -L ^:RE (absolute: end-of-file)
ok 90 - blame -L :funcname with userdiff driver
ok 91 - setup incremental
ok 92 - blame empty
ok 93 - blame -L 0 empty
ok 94 - blame -L 1 empty
ok 95 - blame -L 2 empty
ok 96 - blame half
ok 97 - blame -L 0 half
ok 98 - blame -L 1 half
ok 99 - blame -L 2 half
ok 100 - blame -L 3 half
ok 101 - blame full
ok 102 - blame -L 0 full
ok 103 - blame -L 1 full
ok 104 - blame -L 2 full
ok 105 - blame -L 3 full
ok 106 - blame -L
ok 107 - blame -L X,+
ok 108 - blame -L X,-
ok 109 - blame -L X (non-numeric X)
ok 110 - blame -L X,Y (non-numeric Y)
ok 111 - blame -L X,+N (non-numeric N)
ok 112 - blame -L X,-N (non-numeric N)
ok 113 - blame -L ,^/RE/
ok 114 - blame progress on a full file
ok 115 - blame progress on a single range
ok 116 - blame progress on multiple ranges
ok 117 - setup
ok 118 - blame untracked file in empty repo
ok 119 - blame --show-email
ok 120 - setup showEmail tests
ok 121 - blame with no options and no config
ok 122 - blame with showemail options
ok 123 - blame with showEmail config false
ok 124 - blame with showEmail config true
ok 125 - set up abbrev tests
ok 126 - blame --abbrev=<n> works
ok 127 - blame -l aligns regular and boundary commits
ok 128 - blame --abbrev with full length behaves like -l
ok 129 - --no-abbrev works like --abbrev with full length
ok 130 - --exclude-promisor-objects does not BUG-crash
ok 131 - blame with uncommitted edits in partial clone does not crash
# passed all 131 test(s)
1..131
*** t8003-blame-corner-cases.sh ***
ok 1 - setup
ok 2 - straight copy without -C
ok 3 - straight move without -C
ok 4 - straight copy with -C
ok 5 - straight move with -C
ok 6 - straight copy with -C -C
ok 7 - straight move with -C -C
ok 8 - append without -C
ok 9 - append with -C
ok 10 - append with -C -C
ok 11 - append with -C -C -C
ok 12 - blame wholesale copy
ok 13 - blame wholesale copy and more
ok 14 - blame wholesale copy and more in the index
ok 15 - blame during cherry-pick with file rename conflict
ok 16 - blame path that used to be a directory
ok 17 - blame to a commit with no author name
ok 18 - blame -L with invalid start
ok 19 - blame -L with invalid end
ok 20 - blame parses <end> part of -L
ok 21 - blame -Ln,-(n+1)
ok 22 - indent of line numbers, nine lines
ok 23 - indent of line numbers, ten lines
ok 24 - setup file with CRLF newlines
ok 25 - blame file with CRLF core.autocrlf true
ok 26 - blame file with CRLF attributes text
ok 27 - blame file with CRLF core.autocrlf=true
ok 28 - setup coalesce tests
ok 29 - blame coalesce
ok 30 - blame does not coalesce non-adjacent result lines
# passed all 30 test(s)
1..30
*** t8004-blame-with-conflicts.sh ***
ok 1 - setup first case
ok 2 - blame runs on unconflicted file while other file has conflicts
ok 3 - blame does not crash with conflicted file in stages 1,3
# passed all 3 test(s)
1..3
*** t8005-blame-i18n.sh ***
ok 1 - setup the repository
ok 2 - blame respects i18n.commitencoding
ok 3 - blame respects i18n.logoutputencoding
ok 4 - blame respects --encoding=UTF-8
ok 5 - blame respects --encoding=none
# passed all 5 test(s)
1..5
*** t8006-blame-textconv.sh ***
ok 1 - setup 
ok 2 - no filter specified
ok 3 - setup textconv filters
ok 4 - blame with --no-textconv
ok 5 - basic blame on last commit
ok 6 - blame --textconv going through revisions
ok 7 - blame --textconv with local changes
ok 8 - setup +cachetextconv
ok 9 - blame --textconv works with textconvcache
ok 10 - setup -cachetextconv
ok 11 - make a new commit
ok 12 - blame from previous revision
ok 13 - blame with --no-textconv (on symlink)
ok 14 - blame --textconv (on symlink)
ok 15 - make another new commit
ok 16 - blame on last commit (-C -C, symlink)
# passed all 16 test(s)
1..16
*** t8007-cat-file-textconv.sh ***
ok 1 - setup 
ok 2 - usage: <bad rev>
ok 3 - usage: <bad rev>:<bad path>
ok 4 - usage: <rev>:<bad path>
ok 5 - usage: <rev> with no <path>
ok 6 - usage: <bad rev>:<good (in HEAD) path>
ok 7 - no filter specified
ok 8 - setup textconv filters
ok 9 - cat-file without --textconv
ok 10 - cat-file without --textconv on previous commit
ok 11 - cat-file --textconv on last commit
ok 12 - cat-file --textconv on previous commit
ok 13 - cat-file without --textconv (symlink)
ok 14 - cat-file --textconv on index (symlink)
ok 15 - cat-file --textconv on HEAD (symlink)
# passed all 15 test(s)
1..15
*** t8008-blame-formats.sh ***
ok 1 - setup
ok 2 - normal blame output
ok 3 - blame --porcelain output
ok 4 - blame --line-porcelain output
ok 5 - --porcelain detects first non-blank line as subject
# passed all 5 test(s)
1..5
*** t8009-blame-vs-topicbranches.sh ***
ok 1 - setup
ok 2 - blame --reverse --first-parent finds A1
# passed all 2 test(s)
1..2
*** t8010-cat-file-filters.sh ***
ok 1 - setup 
ok 2 - no filters with `git show`
ok 3 - no filters with cat-file
ok 4 - cat-file --filters converts to worktree version
ok 5 - cat-file --filters --path=<path> works
ok 6 - cat-file --textconv --path=<path> works
ok 7 - --path=<path> complains without --textconv/--filters
ok 8 - --textconv/--filters complain without path
ok 9 - cat-file --textconv --batch works
# passed all 9 test(s)
1..9
*** t8011-blame-split-file.sh ***
ok 1 - setup split file case
ok 2 - setup simulated porcelain
ok 3 - generate --porcelain output
ok 4 - porcelain output finds correct commits
ok 5 - porcelain output shows correct filenames
ok 6 - porcelain output shows correct previous pointer
ok 7 - generate --line-porcelain output
ok 8 - line-porcelain output finds correct commits
ok 9 - line-porcelain output shows correct filenames
ok 10 - line-porcelain output shows correct previous pointer
# passed all 10 test(s)
1..10
*** t8012-blame-colors.sh ***
ok 1 - setup A lines
ok 2 - blame 1 author
ok 3 - blame working copy
ok 4 - blame with --contents
ok 5 - blame with --contents in a bare repo
ok 6 - blame with --contents changed
ok 7 - blame in a bare repo without starting commit
ok 8 - blame by tag objects
ok 9 - setup B lines
ok 10 - blame 2 authors
ok 11 - blame with --contents and revision
ok 12 - setup B1 lines (branch1)
ok 13 - blame 2 authors + 1 branch1 author
ok 14 - setup B2 lines (branch2)
ok 15 - blame 2 authors + 1 branch2 author
ok 16 - merge branch1 & branch2
ok 17 - blame 2 authors + 2 merged-in authors
ok 18 - blame --first-parent blames merge for branch1
ok 19 - blame ancestor
ok 20 - blame great-ancestor
ok 21 - setup evil merge
ok 22 - blame evil merge
ok 23 - blame huge graft
ok 24 - setup incomplete line
ok 25 - blame incomplete line
ok 26 - setup edits
ok 27 - blame edits
ok 28 - setup obfuscated email
ok 29 - blame obfuscated email
ok 30 - blame -L 1 (all)
ok 31 - blame -L , (all)
ok 32 - blame -L X (X to end)
ok 33 - blame -L X, (X to end)
ok 34 - blame -L ,Y (up to Y)
ok 35 - blame -L X,X
ok 36 - blame -L X,Y
ok 37 - blame -L Y,X (undocumented)
ok 38 - blame -L -X
ok 39 - blame -L 0
ok 40 - blame -L ,0
ok 41 - blame -L ,+0
ok 42 - blame -L X,+0
ok 43 - blame -L X,+1
ok 44 - blame -L X,+N
ok 45 - blame -L ,-0
ok 46 - blame -L X,-0
ok 47 - blame -L X,-1
ok 48 - blame -L X,-N
ok 49 - blame -L /RE/ (RE to end)
ok 50 - blame -L /RE/,/RE2/
ok 51 - blame -L X,/RE/
ok 52 - blame -L /RE/,Y
ok 53 - blame -L /RE/,+N
ok 54 - blame -L /RE/,-N
ok 55 - blame -L X (X == nlines)
ok 56 - blame -L X (X == nlines + 1)
ok 57 - blame -L X (X > nlines)
ok 58 - blame -L ,Y (Y == nlines)
ok 59 - blame -L ,Y (Y == nlines + 1)
ok 60 - blame -L ,Y (Y > nlines)
ok 61 - blame -L multiple (disjoint)
ok 62 - blame -L multiple (disjoint: unordered)
ok 63 - blame -L multiple (adjacent)
ok 64 - blame -L multiple (adjacent: unordered)
ok 65 - blame -L multiple (overlapping)
ok 66 - blame -L multiple (overlapping: unordered)
ok 67 - blame -L multiple (superset/subset)
ok 68 - blame -L multiple (superset/subset: unordered)
ok 69 - blame -L /RE/ (relative)
ok 70 - blame -L /RE/ (relative: no preceding range)
ok 71 - blame -L /RE/ (relative: adjacent)
ok 72 - blame -L /RE/ (relative: not found)
ok 73 - blame -L /RE/ (relative: end-of-file)
ok 74 - blame -L ^/RE/ (absolute)
ok 75 - blame -L ^/RE/ (absolute: no preceding range)
ok 76 - blame -L ^/RE/ (absolute: not found)
ok 77 - blame -L ^/RE/ (absolute: end-of-file)
ok 78 - setup -L :regex
ok 79 - blame -L :literal
ok 80 - blame -L :regex
ok 81 - blame -L :nomatch
ok 82 - blame -L :RE (relative)
ok 83 - blame -L :RE (relative: no preceding range)
ok 84 - blame -L :RE (relative: not found)
ok 85 - blame -L :RE (relative: end-of-file)
ok 86 - blame -L ^:RE (absolute)
ok 87 - blame -L ^:RE (absolute: no preceding range)
ok 88 - blame -L ^:RE (absolute: not found)
ok 89 - blame -L ^:RE (absolute: end-of-file)
ok 90 - blame -L :funcname with userdiff driver
ok 91 - setup incremental
ok 92 - blame empty
ok 93 - blame -L 0 empty
ok 94 - blame -L 1 empty
ok 95 - blame -L 2 empty
ok 96 - blame half
ok 97 - blame -L 0 half
ok 98 - blame -L 1 half
ok 99 - blame -L 2 half
ok 100 - blame -L 3 half
ok 101 - blame full
ok 102 - blame -L 0 full
ok 103 - blame -L 1 full
ok 104 - blame -L 2 full
ok 105 - blame -L 3 full
ok 106 - blame -L
ok 107 - blame -L X,+
ok 108 - blame -L X,-
ok 109 - blame -L X (non-numeric X)
ok 110 - blame -L X,Y (non-numeric Y)
ok 111 - blame -L X,+N (non-numeric N)
ok 112 - blame -L X,-N (non-numeric N)
ok 113 - blame -L ,^/RE/
ok 114 - blame progress on a full file
ok 115 - blame progress on a single range
ok 116 - blame progress on multiple ranges
ok 117 - colored blame colors contiguous lines
ok 118 - color by age consistently colors old code
ok 119 - blame color by age: new code is different
# passed all 119 test(s)
1..119
*** t8013-blame-ignore-revs.sh ***
ok 1 - setup
ok 2 - validate --ignore-rev
ok 3 - validate --ignore-revs-file
ok 4 - ignore_rev_changing_lines (X)
ok 5 - ignore_rev_changing_lines (XT)
ok 6 - ignore_rev_adding_unblamable_lines
ok 7 - ignore_revs_from_files
ok 8 - ignore_revs_from_configs_and_files
ok 9 - override_ignore_revs_file
ok 10 - bad_files_and_revs
ok 11 - mark_unblamable_lines
ok 12 - mark_ignored_lines
ok 13 - mark_unblamable_lines_intermediate
ok 14 - ignored_chunk_negative_parent_size
ok 15 - ignore_merge
# passed all 15 test(s)
1..15
*** t8014-blame-ignore-fuzzy.sh ***
ok 1 - setup
ok 2 - Regression test for partially overlapping search ranges
ok 3 - Combine 3 lines into 2
ok 4 - Add curly brackets
ok 5 - Combine many lines and change case
ok 6 - Rename and combine lines
ok 7 - Same line twice
ok 8 - Enforce line order
ok 9 - Expand lines and rename variables
ok 10 - Two close matches versus one less close match
ok 11 - Piggy in the middle
ok 12 - No trailing newline
ok 13 - Reorder includes
ok 14 - Diff chunks with no suspects
ok 15 - position matching
ok 16 - preserve order
# passed all 16 test(s)
1..16
*** t9001-send-email.sh ***
ok 1 - prepare reference tree
ok 2 - Setup helper tool
ok 3 - Extract patches
ok 4 - No confirm with --suppress-cc
ok 5 - No confirm with --confirm=never
ok 6 - No confirm with sendemail.confirm=never
ok 7 - Send patches
ok 8 - setup expect
ok 9 - Verify commandline
ok 10 - Send patches with --envelope-sender
ok 11 - setup expect
ok 12 - Verify commandline
ok 13 - Send patches with --envelope-sender=auto
ok 14 - setup expect
ok 15 - Verify commandline
ok 16 - setup expect for cc trailer
ok 17 - cc trailer with various syntax
ok 18 - setup fake get_maintainer.pl script for cc trailer
ok 19 - cc trailer with get_maintainer.pl output
ok 20 - setup expect
ok 21 - self name is suppressed
ok 22 - self name with dot is suppressed
ok 23 - non-ascii self name is suppressed
ok 24 - long non-ascii self name is suppressed
ok 25 - sanitized self name is suppressed
ok 26 - Show all headers
ok 27 - Prompting works
ok 28 - implicit ident is allowed
ok 29 # skip broken implicit ident aborts send-email (missing !AUTOIDENT of PERL,!AUTOIDENT)
ok 30 - setup cmd scripts
ok 31 - tocmd works
ok 32 - cccmd works
ok 33 - headercmd works
ok 34 - --no-header-cmd works
ok 35 - multiline fields are correctly unfolded
ok 36 - malform output reported on blank lines in command output
ok 37 - reject long lines
ok 38 - no patch was sent
ok 39 - Author From: in message body
ok 40 - Author From: not in message body
ok 41 - allow long lines with --no-validate
ok 42 - short lines with auto encoding are 8bit
ok 43 - long lines with auto encoding are quoted-printable
ok 44 - carriage returns with auto encoding are quoted-printable
ok 45 - --validate passes with encoding auto
ok 46 - --validate passes with encoding quoted-printable
ok 47 - --validate passes with encoding base64
ok 48 - --validate respects relative core.hooksPath path
ok 49 - --validate respects absolute core.hooksPath path
ok 50 - --validate hook supports multiple addresses in arguments
ok 51 - --validate hook supports header argument
ok 52 - clear message-id before parsing a new message
ok 53 - --transfer-encoding=7bit produces correct header
ok 54 - --transfer-encoding=8bit produces correct header
ok 55 - --transfer-encoding=quoted-printable produces correct header
ok 56 - --transfer-encoding=base64 produces correct header
ok 57 - Invalid In-Reply-To
ok 58 - Valid In-Reply-To when prompting
ok 59 - In-Reply-To without --chain-reply-to
ok 60 - In-Reply-To with --chain-reply-to
ok 61 - setup erroring fake editor
ok 62 - fake editor dies with error
ok 63 - setup fake editor
ok 64 - --compose works
ok 65 - first message is compose text
ok 66 - second message is patch
ok 67 - setup expect
ok 68 - sendemail.cc set
ok 69 - setup expect
ok 70 - sendemail.cc unset
ok 71 - setup expect
ok 72 - sendemail.cccmd
ok 73 - setup expect
ok 74 - --suppress-cc=all
ok 75 - setup expect
ok 76 - --suppress-cc=body
ok 77 - setup expect
ok 78 - --suppress-cc=body --suppress-cc=cccmd
ok 79 - setup expect
ok 80 - --suppress-cc=sob
ok 81 - setup expect
ok 82 - --suppress-cc=bodycc
ok 83 - setup expect
ok 84 - --suppress-cc=cc
ok 85 - --confirm=always
ok 86 - --confirm=auto
ok 87 - --confirm=cc
ok 88 - --confirm=compose
ok 89 - confirm by default (due to cc)
ok 90 - confirm by default (due to --compose)
ok 91 - confirm detects EOF (inform assumes y)
ok 92 - confirm detects EOF (auto causes failure)
ok 93 - confirm does not loop forever
ok 94 - utf8 Cc is rfc2047 encoded
ok 95 - --compose adds MIME for utf8 body
ok 96 - --compose respects user mime type
ok 97 - --compose adds MIME for utf8 subject
ok 98 - utf8 author is correctly passed on
ok 99 - utf8 sender is not duplicated
ok 100 - sendemail.composeencoding works
ok 101 - --compose-encoding works
ok 102 - --compose-encoding overrides sendemail.composeencoding
ok 103 - --compose-encoding adds correct MIME for subject
ok 104 - detects ambiguous reference/file conflict
ok 105 - feed two files
ok 106 - in-reply-to but no threading
ok 107 - no in-reply-to and no threading
ok 108 - threading but no chain-reply-to
ok 109 - override in-reply-to if no threading
ok 110 - sendemail.to works
ok 111 - setup sendemail.identity
ok 112 - sendemail.identity: reads the correct identity config
ok 113 - sendemail.identity: identity overrides sendemail.identity
ok 114 - sendemail.identity: --no-identity clears previous identity
ok 115 - sendemail.identity: bool identity variable existence overrides
ok 116 - sendemail.identity: bool variable fallback
ok 117 - sendemail.identity: bool variable without a value
ok 118 - --no-to overrides sendemail.to
ok 119 - sendemail.cc works
ok 120 - --no-cc overrides sendemail.cc
ok 121 - sendemail.bcc works
ok 122 - --no-bcc overrides sendemail.bcc
ok 123 - patches To headers are used by default
ok 124 - patches To headers are appended to
ok 125 - To headers from files reset each patch
ok 126 - setup expect
ok 127 - setup expect
ok 128 - ASCII subject is not RFC2047 quoted
ok 129 - setup expect
ok 130 - asks about and fixes 8bit encodings
ok 131 - sendemail.8bitEncoding works
ok 132 - sendemail.8bitEncoding in .git/config overrides --global .gitconfig
ok 133 - --8bit-encoding overrides sendemail.8bitEncoding
ok 134 - setup expect
ok 135 - setup expect
ok 136 - --8bit-encoding also treats subject
ok 137 - setup expect
ok 138 - --transfer-encoding overrides sendemail.transferEncoding
ok 139 - sendemail.transferEncoding via config
ok 140 - sendemail.transferEncoding via cli
ok 141 - setup expect
ok 142 - 8-bit and sendemail.transferencoding=quoted-printable
ok 143 - setup expect
ok 144 - 8-bit and sendemail.transferencoding=base64
ok 145 - setup expect
ok 146 - convert from quoted-printable to base64
ok 147 - setup expect
ok 148 - setup expect
ok 149 - CRLF and sendemail.transferencoding=quoted-printable
ok 150 - setup expect
ok 151 - CRLF and sendemail.transferencoding=base64
ok 152 - refusing to send cover letter template
ok 153 - --force sends cover letter template anyway
ok 154 - to-cover adds To to all mail
ok 155 - cc-cover adds Cc to all mail
ok 156 - tocover adds To to all mail
ok 157 - cccover adds Cc to all mail
ok 158 - escaped quotes in sendemail.aliasfiletype=mutt
ok 159 - sendemail.aliasfiletype=mailrc
ok 160 - sendemail.aliasesfile=~/.mailrc
ok 161 - --dump-aliases sendmail format
ok 162 - --dump-aliases mutt format
ok 163 - --dump-aliases mailrc format
ok 164 - --dump-aliases pine format
ok 165 - --dump-aliases gnus format
ok 166 - --dump-aliases must be used alone
ok 167 - aliases and sendemail.identity
ok 168 - sendemail.aliasfiletype=sendmail
ok 169 - sendmail aliases line folding
ok 170 - sendmail aliases tolerate bogus line folding
ok 171 - sendmail aliases empty
ok 172 - alias support in To header
ok 173 - alias support in Cc header
ok 174 - tocmd works with aliases
ok 175 - cccmd works with aliases
ok 176 - --[no-]xmailer without any configuration
ok 177 - --[no-]xmailer with sendemail.xmailer=true
ok 178 - --[no-]xmailer with sendemail.xmailer
ok 179 - --[no-]xmailer with sendemail.xmailer=false
ok 180 - --[no-]xmailer with sendemail.xmailer=
ok 181 - setup expected-list
ok 182 - use email list in --cc --to and --bcc
ok 183 - aliases work with email list
ok 184 - leading and trailing whitespaces are removed
ok 185 - test using command name with --sendmail-cmd
ok 186 - test using arguments with --sendmail-cmd
ok 187 - test shell expression with --sendmail-cmd
ok 188 - set up in-reply-to/references patches
ok 189 - patch reply headers correct with --no-thread
ok 190 - cmdline in-reply-to used with --no-thread
ok 191 - invoke hook
ok 192 - --validate hook allows counting of messages
ok 193 - test that send-email works outside a repo
ok 194 - send-email relays -v 3 to format-patch
ok 195 - test that sendmail config is rejected
ok 196 - test that sendmail config rejection is specific
ok 197 - test forbidSendmailVariables behavior override
ok 198 - --compose handles lowercase headers
ok 199 - --compose handles to headers
# passed all 199 test(s)
1..199
*** t9002-column.sh ***
ok 1 - setup
ok 2 - never
ok 3 - always
ok 4 - --nl
ok 5 - 80 columns
ok 6 - COLUMNS = 1
ok 7 - width = 1
ok 8 - 20 columns
ok 9 - 20 columns, nodense
ok 10 - 20 columns, dense
ok 11 - 20 columns, padding 2
ok 12 - 20 columns, indented
ok 13 - 20 columns, row first
ok 14 - 20 columns, row first, nodense
ok 15 - 20 columns, row first, dense
ok 16 - padding must be non-negative
# passed all 16 test(s)
1..16
*** t9003-help-autocorrect.sh ***
ok 1 - setup
ok 2 - autocorrect showing candidates
ok 3 - autocorrect running commands
ok 4 - autocorrect running commands
ok 5 - autocorrect can be declined altogether
ok 6 - autocorrect works in work tree created from bare repo
# passed all 6 test(s)
1..6
*** t9004-example.sh ***
ok 1 - decorate
# passed all 1 test(s)
1..1
*** t9100-git-svn-basic.sh ***
ok 1 - git svn --version works anywhere
ok 2 - git svn help works anywhere
ok 3 - initialize git svn
ok 4 - import an SVN revision into git
ok 5 - checkout from svn
ok 6 - try a deep --rmdir with a commit
ok 7 - detect node change from file to directory #1
ok 8 - detect node change from directory to file #1
ok 9 - detect node change from file to directory #2
ok 10 - detect node change from directory to file #2
ok 11 - remove executable bit from a file
ok 12 - add executable bit back file
ok 13 - executable file becomes a symlink to file
ok 14 - new symlink is added to a file that was also just made executable
ok 15 - modify a symlink to become a file
ok 16 - commit with UTF-8 message: locale: C.UTF-8
ok 17 - test fetch functionality (svn => git) with alternate GIT_SVN_ID
ok 18 - check imported tree checksums expected tree checksums
ok 19 - exit if remote refs are ambigious
ok 20 - exit if init-ing a would clobber a URL
ok 21 - init allows us to connect to another directory in the same repo
ok 22 - dcommit $rev does not clobber current branch
ok 23 - able to dcommit to a subdirectory
ok 24 - dcommit should not fail with a touched file
ok 25 - rebase should not fail with a touched file
ok 26 - able to set-tree to a subdirectory
ok 27 - git-svn works in a bare repository
ok 28 - git-svn works in a repository with a gitdir: link
# passed all 28 test(s)
1..28
*** t9101-git-svn-props.sh ***
ok 1 - checkout working copy from svn
ok 2 - setup some commits to svn
ok 3 - initialize git svn
ok 4 - fetch revisions from svn
ok 5 - test svn:keywords ignoring
ok 6 - raw $Id$ found in kw.c
ok 7 - propset CR on crlf files
ok 8 - fetch and pull latest from svn and checkout a new wc
ok 9 - Comparing crlf
ok 10 - Comparing ne_crlf
ok 11 - Comparing lf
ok 12 - Comparing ne_lf
ok 13 - Comparing cr
ok 14 - Comparing ne_cr
ok 15 - Comparing empty_cr
ok 16 - Comparing empty_lf
ok 17 - Comparing empty
ok 18 - Comparing empty_crlf
ok 19 - Set CRLF on cr files
ok 20 - fetch and pull latest from svn
ok 21 - CRLF + $Id$
ok 22 - CRLF + $Id$ (no newline)
ok 23 - test show-ignore
ok 24 - test create-ignore
ok 25 - test propget
ok 26 - test proplist
# passed all 26 test(s)
1..26
*** t9102-git-svn-deep-rmdir.sh ***
ok 1 - initialize repo
ok 2 - mirror via git svn
ok 3 - Try a commit on rmdir
# passed all 3 test(s)
1..3
*** t9103-git-svn-tracked-directory-removed.sh ***
ok 1 - make history for tracking
ok 2 - clone repo with git
ok 3 - make sure r2 still has old file
# passed all 3 test(s)
1..3
*** t9104-git-svn-follow-parent.sh ***
ok 1 - initialize repo
ok 2 - init and fetch a moved directory
ok 3 - init and fetch from one svn-remote
ok 4 - follow deleted parent
ok 5 - follow larger parent
ok 6 - follow higher-level parent
ok 7 - follow deleted directory
ok 8 - follow-parent avoids deleting relevant info
ok 9 - track initial change if it was only made to parent
ok 10 - follow-parent is atomic
ok 11 - track multi-parent paths
ok 12 - multi-fetch continues to work
ok 13 - multi-fetch works off a 'clean' repository
# passed all 13 test(s)
1..13
*** t9105-git-svn-commit-diff.sh ***
ok 1 - initialize repo
ok 2 - test the commit-diff command
ok 3 - commit-diff to a sub-directory (with git svn config)
# passed all 3 test(s)
1..3
*** t9106-git-svn-commit-diff-clobber.sh ***
ok 1 - initialize repo
ok 2 - commit change from svn side
ok 3 - commit conflicting change from git
ok 4 - commit complementing change from git
ok 5 - dcommit fails to commit because of conflict
ok 6 - dcommit does the svn equivalent of an index merge
ok 7 - commit another change from svn side
ok 8 - multiple dcommit from git svn will not clobber svn
ok 9 - check that rebase really failed
ok 10 - resolve, continue the rebase and dcommit
# passed all 10 test(s)
1..10
*** t9107-git-svn-migrate.sh ***
ok 1 - setup old-looking metadata
ok 2 - git-svn-HEAD is a real HEAD
ok 3 - initialize old-style (v0) git svn layout
ok 4 - initialize a multi-repository repo
ok 5 - multi-fetch works on partial urls + paths
ok 6 - migrate --minimize on old inited layout
ok 7 - .rev_db auto-converted to .rev_map.UUID
# passed all 7 test(s)
1..7
*** t9108-git-svn-glob.sh ***
ok 1 - test refspec globbing
ok 2 - test left-hand-side only globbing
ok 3 - prepare test disallow multi-globs
ok 4 - test disallow multi-globs
# passed all 4 test(s)
1..4
*** t9109-git-svn-multi-glob.sh ***
ok 1 - test refspec globbing
ok 2 - test left-hand-side only globbing
ok 3 - test another branch
ok 4 - prepare test disallow multiple globs
ok 5 - test disallow multiple globs
# passed all 5 test(s)
1..5
*** t9110-git-svn-use-svm-props.sh ***
ok 1 - load svm repo
ok 2 - verify metadata for /bar
ok 3 - verify metadata for /dir/a/b/c/d/e
ok 4 - verify metadata for /dir
ok 5 - find commit based on SVN revision number
ok 6 - empty rebase
# passed all 6 test(s)
1..6
*** t9111-git-svn-use-svnsync-props.sh ***
ok 1 - load svnsync repo
ok 2 - verify metadata for /bar
ok 3 - verify metadata for /dir/a/b/c/d/e
ok 4 - verify metadata for /dir
# passed all 4 test(s)
1..4
*** t9112-git-svn-md5less-file.sh ***
ok 1 - load svn dumpfile
ok 2 - initialize git svn
ok 3 - fetch revisions from svn
# passed all 3 test(s)
1..3
*** t9113-git-svn-dcommit-new-file.sh ***
1..0 # SKIP skipping svnserve test. (set $GIT_TEST_SVNSERVE to enable)
*** t9114-git-svn-dcommit-merge.sh ***
ok 1 - setup svn repository
ok 2 - setup git mirror and merge
ok 3 - verify pre-merge ancestry
ok 4 - git svn dcommit merges
ok 5 - verify post-merge ancestry
ok 6 - verify merge commit message
# passed all 6 test(s)
1..6
*** t9115-git-svn-dcommit-funky-renames.sh ***
ok 1 - load repository with strange names
ok 2 - init and fetch repository
ok 3 - create file in existing ugly and empty dir
ok 4 - rename ugly file
ok 5 - rename pretty file
ok 6 - rename pretty file into ugly one
ok 7 - add a file with plus signs
ok 8 - clone the repository to test rebase
ok 9 - make a commit to test rebase
ok 10 - git svn rebase works inside a fresh-cloned repository
ok 11 - svn.pathnameencoding=cp932 new file on dcommit
ok 12 - svn.pathnameencoding=cp932 rename on dcommit
# passed all 12 test(s)
1..12
*** t9116-git-svn-log.sh ***
ok 1 - setup repository and import
ok 2 - run log
ok 3 - run log against a from trunk
ok 4 - test ascending revision range
ok 5 - test ascending revision range with --show-commit
ok 6 - test ascending revision range with --show-commit (sha1)
ok 7 - test descending revision range
ok 8 - test ascending revision range with unreachable revision
ok 9 - test descending revision range with unreachable revision
ok 10 - test ascending revision range with unreachable upper boundary revision and 1 commit
ok 11 - test descending revision range with unreachable upper boundary revision and 1 commit
ok 12 - test ascending revision range with unreachable lower boundary revision and 1 commit
ok 13 - test descending revision range with unreachable lower boundary revision and 1 commit
ok 14 - test ascending revision range with unreachable boundary revisions and no commits
ok 15 - test descending revision range with unreachable boundary revisions and no commits
ok 16 - test ascending revision range with unreachable boundary revisions and 1 commit
ok 17 - test descending revision range with unreachable boundary revisions and 1 commit
# passed all 17 test(s)
1..17
*** t9117-git-svn-init-clone.sh ***
ok 1 - setup svnrepo
ok 2 - basic clone
ok 3 - clone to target directory
ok 4 - clone with --stdlayout
ok 5 - clone to target directory with --stdlayout
ok 6 - init without -s/-T/-b/-t does not warn
ok 7 - clone without -s/-T/-b/-t does not warn
ok 8 - init with -s/-T/-b/-t assumes --prefix=origin/
ok 9 - clone with -s/-T/-b/-t assumes --prefix=origin/
ok 10 - init with -s/-T/-b/-t and --prefix "" still works
ok 11 - clone with -s/-T/-b/-t and --prefix "" still works
ok 12 - init with -T as a full url works
# passed all 12 test(s)
1..12
*** t9118-git-svn-funky-branch-names.sh ***
ok 1 - setup svnrepo
ok 2 - test clone with funky branch names
ok 3 - test dcommit to funky branch
ok 4 - test dcommit to scary branch
ok 5 - test dcommit to trailing_dotlock branch
# passed all 5 test(s)
1..5
*** t9119-git-svn-info.sh ***
1..0 # SKIP skipping svn-info test (SVN version: 1.14.2 not supported)
*** t9120-git-svn-clone-with-percent-escapes.sh ***
ok 1 - setup svnrepo
ok 2 - test clone with percent escapes
ok 3 - svn checkout with percent escapes
ok 4 - svn checkout with space
ok 5 - test clone trunk with percent escapes and minimize-url
ok 6 - test clone trunk with percent escapes
ok 7 - test clone --stdlayout with percent escapes
ok 8 - test clone -s with unescaped space
# passed all 8 test(s)
1..8
*** t9121-git-svn-fetch-renamed-dir.sh ***
ok 1 - load repository with renamed directory
ok 2 - init and fetch repository
# passed all 2 test(s)
1..2
*** t9122-git-svn-author.sh ***
ok 1 - setup svn repository
ok 2 - interact with it via git svn
# passed all 2 test(s)
1..2
*** t9123-git-svn-rebuild-with-rewriteroot.sh ***
ok 1 - init, fetch and checkout repository
ok 2 - remove rev_map
ok 3 - rebuild rev_map
# passed all 3 test(s)
1..3
*** t9124-git-svn-dcommit-auto-props.sh ***
ok 1 - initialize git svn
ok 2 - enable auto-props config
ok 3 - add files matching auto-props
ok 4 - disable auto-props config
ok 5 - add files matching disabled auto-props
ok 6 - check resulting svn repository
ok 7 - check renamed file
# passed all 7 test(s)
1..7
*** t9125-git-svn-multi-glob-branch-names.sh ***
ok 1 - setup svnrepo
ok 2 - test clone with multi-glob in branch names
ok 3 - test dcommit to multi-globbed branch
# passed all 3 test(s)
1..3
*** t9126-git-svn-follow-deleted-readded-directory.sh ***
1..0 # SKIP skipping svnserve test. (set $GIT_TEST_SVNSERVE to enable)
*** t9127-git-svn-partial-rebuild.sh ***
ok 1 - initialize svnrepo
ok 2 - import an early SVN revision into git
ok 3 - make full git mirror of SVN
ok 4 - fetch from git mirror and partial-rebuild
# passed all 4 test(s)
1..4
*** t9128-git-svn-cmd-branch.sh ***
ok 1 - initialize svnrepo
ok 2 - import into git
ok 3 - git svn branch tests
ok 4 - branch uses correct svn-remote
# passed all 4 test(s)
1..4
*** t9129-git-svn-i18n-commitencoding.sh ***
ok 1 - ISO8859-1 setup
ok 2 - eucJP setup
ok 3 - ISO-2022-JP setup
ok 4 - ISO8859-1 commit on git side
ok 5 - eucJP commit on git side
ok 6 - ISO-2022-JP commit on git side
ok 7 - ISO8859-1 dcommit to svn
ok 8 - eucJP dcommit to svn
ok 9 - ISO-2022-JP dcommit to svn
ok 10 - ISO-8859-1 should match UTF-8 in svn
ok 11 - eucJP should match UTF-8 in svn
ok 12 - ISO-2022-JP should match UTF-8 in svn
# passed all 12 test(s)
1..12
*** t9130-git-svn-authors-file.sh ***
ok 1 - setup svnrepo
ok 2 - start import with incomplete authors file
ok 3 - imported 2 revisions successfully
ok 4 - continues to import once authors have been added
ok 5 - authors-file against globs
ok 6 - fetch fails on ee
ok 7 - failure happened without negative side effects
ok 8 - fetch continues after authors-file is fixed
ok 9 - fresh clone with svn.authors-file in config
ok 10 - authors-file imported user without email
# passed all 10 test(s)
1..10
*** t9131-git-svn-empty-symlink.sh ***
ok 1 - load svn dumpfile
ok 2 - clone using git svn
ok 3 - enable broken symlink workaround
ok 4 - "bar" is an empty file
ok 5 - get "bar" => symlink fix from svn
ok 6 - "bar" becomes a symlink
ok 7 - clone using git svn
ok 8 - disable broken symlink workaround
ok 9 - "bar" is an empty file
ok 10 - get "bar" => symlink fix from svn
ok 11 - "bar" does not become a symlink
ok 12 - clone using git svn
ok 13 - "bar" is an empty file
ok 14 - get "bar" => symlink fix from svn
ok 15 - "bar" does not become a symlink
# passed all 15 test(s)
1..15
*** t9132-git-svn-broken-symlink.sh ***
ok 1 - load svn dumpfile
ok 2 - clone using git svn
ok 3 - "bar" is a symlink that points to "asdf"
ok 4 - get "bar" => symlink fix from svn
ok 5 - "bar" remains a proper symlink
# passed all 5 test(s)
1..5
*** t9133-git-svn-nested-git-repo.sh ***
ok 1 - setup repo with a git repo inside it
ok 2 - clone an SVN repo containing a git repo
ok 3 - SVN-side change outside of .git
ok 4 - update git svn-cloned repo
ok 5 - SVN-side change inside of .git
ok 6 - update git svn-cloned repo
ok 7 - SVN-side change in and out of .git
ok 8 - update git svn-cloned repo again
# passed all 8 test(s)
1..8
*** t9134-git-svn-ignore-paths.sh ***
ok 1 - setup test repository
ok 2 - clone an SVN repository with ignored www directory
ok 3 - init+fetch an SVN repository with ignored www directory
ok 4 - verify ignore-paths config saved by clone
ok 5 - SVN-side change outside of www
ok 6 - update git svn-cloned repo (config ignore)
ok 7 - update git svn-cloned repo (option ignore)
ok 8 - SVN-side change inside of ignored www
ok 9 - update git svn-cloned repo (config ignore)
ok 10 - update git svn-cloned repo (option ignore)
ok 11 - SVN-side change in and out of ignored www
ok 12 - update git svn-cloned repo again (config ignore)
ok 13 - update git svn-cloned repo again (option ignore)
# passed all 13 test(s)
1..13
*** t9135-git-svn-moved-branch-empty-file.sh ***
ok 1 - load svn dumpfile
ok 2 - clone using git svn
ok 3 - test that b1 exists and is empty
# passed all 3 test(s)
1..3
*** t9136-git-svn-recreated-branch-empty-file.sh ***
ok 1 - load svn dumpfile
ok 2 - clone using git svn
# passed all 2 test(s)
1..2
*** t9137-git-svn-dcommit-clobber-series.sh ***
ok 1 - initialize repo
ok 2 - (supposedly) non-conflicting change from SVN
ok 3 - some unrelated changes to git
ok 4 - change file but in unrelated area
ok 5 - attempt to dcommit with a dirty index
# passed all 5 test(s)
1..5
*** t9138-git-svn-authors-prog.sh ***
ok 1 - svn-authors setup
ok 2 - setup svnrepo
ok 3 - import authors with prog and file
ok 4 - imported 6 revisions successfully
ok 5 - authors-prog ran correctly
ok 6 - authors-file overrode authors-prog
ok 7 - authors-prog imported user without email
ok 8 - imported without authors-prog and authors-file
ok 9 - authors-prog handled special characters in username
# passed all 9 test(s)
1..9
*** t9139-git-svn-non-utf8-commitencoding.sh ***
ok 1 - ISO8859-1 setup
ok 2 - eucJP setup
ok 3 - ISO8859-1 commit on git side
ok 4 - eucJP commit on git side
ok 5 - ISO8859-1 dcommit to svn
ok 6 - eucJP dcommit to svn
# passed all 6 test(s)
1..6
*** t9140-git-svn-reset.sh ***
ok 1 - setup test repository
ok 2 - clone SVN repository with hidden directory
ok 3 - modify hidden file in SVN repo
ok 4 - fetch fails on modified hidden file
ok 5 - reset unwinds back to r1
ok 6 - refetch succeeds not ignoring any files
# passed all 6 test(s)
1..6
*** t9141-git-svn-multiple-branches.sh ***
ok 1 - setup svnrepo
ok 2 - clone multiple branch and tag paths
ok 3 - Multiple branch or tag paths require -d
ok 4 - create new branches and tags
# passed all 4 test(s)
1..4
*** t9142-git-svn-shallow-clone.sh ***
ok 1 - setup test repository
ok 2 - clone trunk with "-r HEAD"
# passed all 2 test(s)
1..2
*** t9143-git-svn-gc.sh ***
ok 1 - setup directories and test repo
ok 2 - checkout working copy from svn
ok 3 - set some properties to create an unhandled.log file
ok 4 - Setup repo
ok 5 - Fetch repo
ok 6 - make backup copy of unhandled.log
ok 7 - create leftover index
ok 8 - git svn gc runs
ok 9 - git svn index removed
ok 10 - git svn gc produces a valid gzip file
ok 11 - git svn gc does not change unhandled.log files
# passed all 11 test(s)
1..11
*** t9144-git-svn-old-rev_map.sh ***
ok 1 - setup test repository with old layout
ok 2 - old layout continues to work
# passed all 2 test(s)
1..2
*** t9145-git-svn-master-branch.sh ***
ok 1 - setup test repository
ok 2 - git svn clone --stdlayout sets up trunk as main
# passed all 2 test(s)
1..2
*** t9146-git-svn-empty-dirs.sh ***
ok 1 - initialize repo
ok 2 - clone
ok 3 - empty directories exist
ok 4 - option automkdirs set to false
ok 5 - more emptiness
ok 6 - git svn rebase creates empty directory
ok 7 - git svn mkdirs recreates empty directories
ok 8 - git svn mkdirs -r works
ok 9 - initialize trunk
ok 10 - clone trunk
ok 11 - empty directories in trunk exist
ok 12 - remove a top-level directory from svn
ok 13 - removed top-level directory does not exist
ok 14 - git svn gc-ed files work
# passed all 14 test(s)
1..14
*** t9147-git-svn-include-paths.sh ***
ok 1 - setup test repository
ok 2 - clone an SVN repository with filter to include qqq directory
ok 3 - init+fetch an SVN repository with included qqq directory
ok 4 - verify include-paths config saved by clone
ok 5 - SVN-side change outside of www
ok 6 - update git svn-cloned repo (config include)
ok 7 - update git svn-cloned repo (option include)
ok 8 - SVN-side change inside of ignored www
ok 9 - update git svn-cloned repo (config include)
ok 10 - update git svn-cloned repo (option include)
ok 11 - SVN-side change in and out of included qqq
ok 12 - update git svn-cloned repo again (config include)
ok 13 - update git svn-cloned repo again (option include)
# passed all 13 test(s)
1..13
*** t9148-git-svn-propset.sh ***
ok 1 - setup propset via import
ok 2 - initialize git svn
ok 3 - fetch revisions from svn
ok 4 - add props top level
ok 5 - add multiple props
ok 6 - add props subdir
ok 7 - add props relative
# passed all 7 test(s)
1..7
*** t9150-svk-mergetickets.sh ***
ok 1 - load svk depot
ok 2 - svk merges were represented coming in
# passed all 2 test(s)
1..2
*** t9151-svn-mergeinfo.sh ***
ok 1 - load svn dump
ok 2 - all svn merges became git merge commits
ok 3 - cherry picks did not become git merge commits
ok 4 - svn non-merge merge commits did not become git merge commits
ok 5 - commit made to merged branch is reachable from the merge
ok 6 - merging two branches in one commit is detected correctly
not ok 7 - everything got merged in the end # TODO known breakage
# still have 1 known breakage(s)
# passed all remaining 6 test(s)
1..7
*** t9152-svn-empty-dirs-after-gc.sh ***
ok 1 - initialize repo
ok 2 - clone
ok 3 - git svn gc runs
ok 4 - git svn mkdirs recreates empty directories after git svn gc
# passed all 4 test(s)
1..4
*** t9153-git-svn-rewrite-uuid.sh ***
ok 1 - load svn repo
ok 2 - verify uuid
# passed all 2 test(s)
1..2
*** t9154-git-svn-fancy-glob.sh ***
ok 1 - load svn repo
ok 2 - add red branch
ok 3 - add gre branch
ok 4 - add green branch
ok 5 - add all branches
# passed all 5 test(s)
1..5
*** t9155-git-svn-fetch-deleted-tag.sh ***
ok 1 - setup svn repo
ok 2 - fetch deleted tags from same revision with checksum error
# passed all 2 test(s)
1..2
*** t9156-git-svn-fetch-deleted-tag-2.sh ***
ok 1 - setup svn repo
ok 2 - fetch deleted tags from same revision with no checksum error
# passed all 2 test(s)
1..2
*** t9157-git-svn-fetch-merge.sh ***
ok 1 - initialize source svn repo
ok 2 - clone svn repo
ok 3 - verify merge commit
# passed all 3 test(s)
1..3
*** t9158-git-svn-mergeinfo.sh ***
ok 1 - initialize source svn repo
ok 2 - clone svn repo
ok 3 - change svn:mergeinfo
ok 4 - verify svn:mergeinfo
ok 5 - change svn:mergeinfo multiline
ok 6 - verify svn:mergeinfo multiline
# passed all 6 test(s)
1..6
*** t9159-git-svn-no-parent-mergeinfo.sh ***
ok 1 - test handling of root commits in merge ranges
# passed all 1 test(s)
1..1
*** t9160-git-svn-preserve-empty-dirs.sh ***
ok 1 - initialize source svn repo containing empty dirs
ok 2 - clone svn repo with --preserve-empty-dirs
ok 3 - directory empty from inception
ok 4 - directory empty from subsequent svn commit
ok 5 - add entry to previously empty directory
ok 6 - remove non-last entry from directory
ok 7 - clone svn repo with --placeholder-file specified
ok 8 - placeholder namespace conflict with file
ok 9 - placeholder namespace conflict with directory
ok 10 - second set of svn commits and rebase
ok 11 - flag persistence during subsqeuent rebase
ok 12 - placeholder list persistence during subsqeuent rebase
# passed all 12 test(s)
1..12
*** t9161-git-svn-mergeinfo-push.sh ***
ok 1 - load svn dump
ok 2 - propagate merge information
ok 3 - check svn:mergeinfo
ok 4 - merge another branch
ok 5 - check primary parent mergeinfo respected
ok 6 - merge existing merge
ok 7 - check both parents' mergeinfo respected
ok 8 - make further commits to branch
ok 9 - second forward merge
ok 10 - check new mergeinfo added
ok 11 - reintegration merge
ok 12 - check reintegration mergeinfo
ok 13 - dcommit a merge at the top of a stack
# passed all 13 test(s)
1..13
*** t9162-git-svn-dcommit-interactive.sh ***
ok 1 - initialize repo
ok 2 - answers: y [\n] yes
ok 3 - answers: yes yes no
ok 4 - answers: yes quit
ok 5 - answers: all
# passed all 5 test(s)
1..5
*** t9163-git-svn-reset-clears-caches.sh ***
ok 1 - initialize source svn repo
ok 2 - fetch to merge-base (a)
ok 3 - rebase looses SVN merge (m)
ok 4 - reset and fetch gets the SVN merge (m) correctly
# passed all 4 test(s)
1..4
*** t9164-git-svn-dcommit-concurrent.sh ***
ok 1 - setup svn repository
ok 2 - check if post-commit hook creates a concurrent commit
ok 3 - check if pre-commit hook fails
ok 4 - dcommit error handling
ok 5 - dcommit concurrent change in non-changed file
ok 6 - dcommit concurrent non-conflicting change
ok 7 - dcommit --no-rebase concurrent non-conflicting change
ok 8 - dcommit fails on concurrent conflicting change
# passed all 8 test(s)
1..8
*** t9165-git-svn-fetch-merge-branch-of-branch.sh ***
ok 1 - initialize source svn repo
ok 2 - clone svn repo
ok 3 - verify merge commit
# passed all 3 test(s)
1..3
*** t9166-git-svn-fetch-merge-branch-of-branch2.sh ***
ok 1 - initialize source svn repo
ok 2 - clone svn repo
ok 3 - verify merge commit
# passed all 3 test(s)
1..3
*** t9167-git-svn-cmd-branch-subproject.sh ***
ok 1 - initialize svnrepo
ok 2 - import into git
ok 3 - git svn branch tests
# passed all 3 test(s)
1..3
*** t9168-git-svn-partially-globbed-names.sh ***
ok 1 - prepare test refspec prefixed globbing
ok 2 - test refspec prefixed globbing
ok 3 - prepare test left-hand-side only prefixed globbing
ok 4 - test left-hand-side only prefixed globbing
ok 5 - prepare test prefixed globs match just prefix
ok 6 - test prefixed globs match just prefix
ok 7 - prepare test disallow prefixed multi-globs
ok 8 - test disallow prefixed multi-globs
ok 9 - prepare test globbing in the middle of the word
ok 10 - test globbing in the middle of the word
ok 11 - prepare test disallow multiple asterisks in one word
ok 12 - test disallow multiple asterisks in one word
# passed all 12 test(s)
1..12
*** t9169-git-svn-dcommit-crlf.sh ***
ok 1 - setup commit repository
# passed all 1 test(s)
1..1
*** t9200-git-cvsexportcommit.sh ***
ok 1 - New file
ok 2 - Remove two files, add two and update two
ok 3 - Fail to change binary more than one generation old
ok 4 - Remove only binary files
ok 5 - Remove only a text file
ok 6 - New file with spaces in file name
ok 7 - Update file with spaces in file name
ok 8 - File with non-ascii file name
ok 9 - Mismatching patch should fail
ok 10 - Retain execute bit
ok 11 - -w option should work with relative GIT_DIR
ok 12 - check files before directories
ok 13 - re-commit a removed filename which remains in CVS attic
ok 14 - commit a file with leading spaces in the name
ok 15 - use the same checkout for Git and CVS
# passed all 15 test(s)
1..15
*** t9210-scalar.sh ***
ok 1 - scalar shows a usage
ok 2 - scalar invoked on enlistment root
ok 3 - scalar invoked on enlistment src repo
ok 4 - scalar invoked when enlistment root and repo are the same
ok 5 - scalar repo search respects GIT_CEILING_DIRECTORIES
ok 6 - scalar enlistments need a worktree
ok 7 # skip scalar register starts fsmon daemon (missing FSMONITOR_DAEMON)
ok 8 - scalar register warns when background maintenance fails
ok 9 - scalar unregister
ok 10 - set up repository to clone
ok 11 - scalar clone
ok 12 - scalar reconfigure
ok 13 - `reconfigure -a` removes stale config entries
ok 14 - scalar delete without enlistment shows a usage
ok 15 - scalar delete with enlistment
ok 16 - scalar supports -c/-C
ok 17 - `scalar [...] <dir>` errors out when dir is missing
ok 18 - scalar diagnose
# passed all 18 test(s)
1..18
*** t9211-scalar-clone.sh ***
ok 1 - set up repository to clone
ok 2 - creates content in enlistment root
ok 3 - with spaces
ok 4 - partial clone if supported by server
ok 5 - fall back on full clone if partial unsupported
ok 6 - initializes sparse-checkout by default
ok 7 - --full-clone does not create sparse-checkout
ok 8 - --single-branch clones HEAD only
ok 9 - --no-single-branch clones all branches
ok 10 - progress with tty
ok 11 - progress without tty
ok 12 - scalar clone warns when background maintenance fails
ok 13 - `scalar clone --no-src`
# passed all 13 test(s)
1..13
*** t9300-fast-import.sh ***
ok 1 - empty stream succeeds
ok 2 - truncated stream complains
ok 3 - A: create pack from stdin
ok 4 - A: verify pack
ok 5 - A: verify commit
ok 6 - A: verify tree
ok 7 - A: verify file2
ok 8 - A: verify file3
ok 9 - A: verify file4
ok 10 - A: verify tag/series-A
ok 11 - A: verify tag/series-A-blob
ok 12 - A: verify tag deletion is successful
ok 13 - A: verify marks output
ok 14 - A: verify marks import
ok 15 - A: tag blob by sha1
ok 16 - A: verify marks import does not crash
ok 17 - A: verify pack
ok 18 - A: verify diff
ok 19 - A: export marks with large values
ok 20 - B: fail on invalid blob sha1
ok 21 - B: accept branch name "TEMP_TAG"
ok 22 - B: accept empty committer
ok 23 - B: reject invalid timezone
ok 24 - B: accept invalid timezone with raw-permissive
ok 25 - B: accept and fixup committer with no name
ok 26 - B: fail on invalid committer (1)
ok 27 - B: fail on invalid committer (2)
ok 28 - B: fail on invalid committer (3)
ok 29 - B: fail on invalid committer (4)
ok 30 - B: fail on invalid committer (5)
ok 31 - C: incremental import create pack from stdin
ok 32 - C: verify pack
ok 33 - C: validate reuse existing blob
ok 34 - C: verify commit
ok 35 - C: validate rename result
ok 36 - D: inline data in commit
ok 37 - D: verify pack
ok 38 - D: validate new files added
ok 39 - D: verify file5
ok 40 - D: verify file6
ok 41 - E: rfc2822 date, --date-format=raw
ok 42 - E: rfc2822 date, --date-format=rfc2822
ok 43 - E: verify pack
ok 44 - E: verify commit
ok 45 - F: non-fast-forward update skips
ok 46 - F: verify pack
ok 47 - F: verify other commit
ok 48 - G: non-fast-forward update forced
ok 49 - G: verify pack
ok 50 - G: branch changed, but logged
ok 51 - H: deletall, add 1
ok 52 - H: verify pack
ok 53 - H: validate old files removed, new files added
ok 54 - H: verify file
ok 55 - I: export-pack-edges
ok 56 - I: verify edge list
ok 57 - J: reset existing branch creates empty commit
ok 58 - J: branch has 1 commit, empty tree
ok 59 - J: tag must fail on empty branch
ok 60 - K: reinit branch with from
ok 61 - K: verify K^1 = branch^1
ok 62 - L: verify internal tree sorting
ok 63 - L: nested tree copy does not corrupt deltas
ok 64 - M: rename file in same subdirectory
ok 65 - M: rename file to new subdirectory
ok 66 - M: rename subdirectory to new subdirectory
ok 67 - M: rename root ("") to subdirectory
ok 68 - M: rename root () to subdirectory
ok 69 - N: copy file in same subdirectory
ok 70 - N: copy then modify subdirectory
ok 71 - N: copy dirty subdirectory
ok 72 - N: copy directory by id
ok 73 - N: read and copy directory
ok 74 - N: empty directory reads as missing
ok 75 - N: copy root ("") by tree hash
ok 76 - N: copy root ("") by path
ok 77 - N: copy root () by tree hash
ok 78 - N: copy root () by path
ok 79 - N: delete directory by copying
ok 80 - N: modify copied tree
ok 81 - N: reject foo/ syntax
ok 82 - N: reject foo/ syntax in copy source
ok 83 - N: reject foo/ syntax in rename source
ok 84 - N: reject foo/ syntax in ls argument
ok 85 - N: copy to root ("") by id and modify
ok 86 - N: extract subtree to the root ("")
ok 87 - N: modify subtree, extract it to the root (""), and modify again
ok 88 - N: copy to root () by id and modify
ok 89 - N: extract subtree to the root ()
ok 90 - N: modify subtree, extract it to the root (), and modify again
ok 91 - O: comments are all skipped
ok 92 - O: blank lines not necessary after data commands
ok 93 - O: repack before next test
ok 94 - O: blank lines not necessary after other commands
ok 95 - O: progress outputs as requested by input
ok 96 - P: superproject & submodule mix
ok 97 - P: verbatim SHA gitlinks
ok 98 - P: fail on inline gitlink
ok 99 - P: fail on blob mark in gitlink
ok 100 - Q: commit notes
ok 101 - Q: verify pack
ok 102 - Q: verify first commit
ok 103 - Q: verify second commit
ok 104 - Q: verify third commit
ok 105 - Q: verify first notes commit
ok 106 - Q: verify first notes tree
ok 107 - Q: verify first note for first commit
ok 108 - Q: verify first note for second commit
ok 109 - Q: verify first note for third commit
ok 110 - Q: verify second notes commit
ok 111 - Q: verify second notes tree
ok 112 - Q: verify second note for first commit
ok 113 - Q: verify first note for second commit
ok 114 - Q: verify first note for third commit
ok 115 - Q: verify third notes commit
ok 116 - Q: verify third notes tree
ok 117 - Q: verify third note for first commit
ok 118 - Q: verify fourth notes commit
ok 119 - Q: verify fourth notes tree
ok 120 - Q: verify second note for second commit
ok 121 - Q: deny note on empty branch
ok 122 - R: abort on unsupported feature
ok 123 - R: supported feature is accepted
ok 124 - R: abort on receiving feature after data command
ok 125 - R: import-marks features forbidden by default
ok 126 - R: only one import-marks feature allowed per stream
ok 127 - R: export-marks feature forbidden by default
ok 128 - R: export-marks feature results in a marks file being created
ok 129 - R: export-marks options can be overridden by commandline options
ok 130 - R: catch typo in marks file name
ok 131 - R: import and output marks can be the same file
ok 132 - R: --import-marks=foo --output-marks=foo to create foo fails
ok 133 - R: --import-marks-if-exists
ok 134 - R: feature import-marks-if-exists
ok 135 - R: import to output marks works without any content
ok 136 - R: import marks prefers commandline marks file over the stream
ok 137 - R: multiple --import-marks= should be honoured
ok 138 - R: feature relative-marks should be honoured
ok 139 - R: feature no-relative-marks should be honoured
ok 140 - R: feature ls supported
ok 141 - R: feature cat-blob supported
ok 142 - R: cat-blob-fd must be a nonnegative integer
ok 143 - R: print old blob
ok 144 - R: in-stream cat-blob-fd not respected
ok 145 - R: print mark for new blob
ok 146 - R: print new blob
ok 147 - R: print new blob by sha1
ok 148 - setup: big file
ok 149 - R: print two blobs to stdout
ok 150 - R: copy using cat-file
ok 151 - R: print blob mid-commit
ok 152 - R: print staged blob within commit
ok 153 - R: quiet option results in no stats being output
ok 154 - R: feature done means terminating "done" is mandatory
ok 155 - R: terminating "done" with trailing gibberish is ok
ok 156 - R: terminating "done" within commit
ok 157 - R: die on unknown option
ok 158 - R: unknown commandline options are rejected
ok 159 - R: die on invalid option argument
ok 160 - R: ignore non-git options
ok 161 - R: corrupt lines do not mess marks file
ok 162 - R: blob bigger than threshold
ok 163 - R: verify created pack
ok 164 - R: verify written objects
ok 165 - R: blob appears only once
ok 166 - S: initialize for S tests
ok 167 - S: filemodify with garbage after mark must fail
ok 168 - S: filemodify with garbage after inline must fail
ok 169 - S: filemodify with garbage after sha1 must fail
ok 170 - S: notemodify with garbage after mark dataref must fail
ok 171 - S: notemodify with garbage after inline dataref must fail
ok 172 - S: notemodify with garbage after sha1 dataref must fail
ok 173 - S: notemodify with garbage after mark commit-ish must fail
ok 174 - S: from with garbage after mark must fail
ok 175 - S: merge with garbage after mark must fail
ok 176 - S: tag with garbage after mark must fail
ok 177 - S: cat-blob with garbage after mark must fail
ok 178 - S: ls with garbage after mark must fail
ok 179 - S: ls with garbage after sha1 must fail
ok 180 - S: paths at EOL with quoted spaces must work
ok 181 - S: paths at EOL with unquoted spaces must work
ok 182 - S: paths at EOL with octal escapes must work
ok 183 - S: paths before space with quoted spaces must work
ok 184 - S: paths before space with no unquoted spaces must work
ok 185 - S: paths before space with octal escapes must work
ok 186 - S: filemodify with unclosed " in path must fail
ok 187 - S: filemodify with invalid escape in quoted path must fail
ok 188 - S: filemodify with escaped NUL in quoted path must fail
ok 189 - S: filemodify with garbage after quoted path must fail
ok 190 - S: filemodify with space after quoted path must fail
ok 191 - S: filedelete with unclosed " in path must fail
ok 192 - S: filedelete with invalid escape in quoted path must fail
ok 193 - S: filedelete with escaped NUL in quoted path must fail
ok 194 - S: filedelete with garbage after quoted path must fail
ok 195 - S: filedelete with space after quoted path must fail
ok 196 - S: filecopy with unclosed " in source must fail
ok 197 - S: filecopy with invalid escape in quoted source must fail
ok 198 - S: filecopy with escaped NUL in quoted source must fail
ok 199 - S: filecopy with missing space after quoted source must fail
ok 200 - S: filecopy with missing space after unquoted source must fail
ok 201 - S: filecopy with unclosed " in dest must fail
ok 202 - S: filecopy with invalid escape in quoted dest must fail
ok 203 - S: filecopy with escaped NUL in quoted dest must fail
ok 204 - S: filecopy with garbage after quoted dest must fail
ok 205 - S: filecopy with space after quoted dest must fail
ok 206 - S: filerename with unclosed " in source must fail
ok 207 - S: filerename with invalid escape in quoted source must fail
ok 208 - S: filerename with escaped NUL in quoted source must fail
ok 209 - S: filerename with missing space after quoted source must fail
ok 210 - S: filerename with missing space after unquoted source must fail
ok 211 - S: filerename with unclosed " in dest must fail
ok 212 - S: filerename with invalid escape in quoted dest must fail
ok 213 - S: filerename with escaped NUL in quoted dest must fail
ok 214 - S: filerename with garbage after quoted dest must fail
ok 215 - S: filerename with space after quoted dest must fail
ok 216 - S: ls (in commit) with unclosed " in path must fail
ok 217 - S: ls (in commit) with invalid escape in quoted path must fail
ok 218 - S: ls (in commit) with escaped NUL in quoted path must fail
ok 219 - S: ls (in commit) with garbage after quoted path must fail
ok 220 - S: ls (in commit) with space after quoted path must fail
ok 221 - S: ls (without dataref in commit) with unclosed " in path must fail
ok 222 - S: ls (without dataref in commit) with invalid escape in quoted path must fail
ok 223 - S: ls (without dataref in commit) with escaped NUL in quoted path must fail
ok 224 - S: ls (without dataref in commit) with garbage after quoted path must fail
ok 225 - S: ls (without dataref in commit) with space after quoted path must fail
ok 226 - T: ls root ("") tree
ok 227 - T: ls root () tree
ok 228 - T: delete branch
ok 229 - T: empty reset doesnt delete branch
ok 230 - U: initialize for U tests
ok 231 - U: filedelete file succeeds
ok 232 - U: validate file delete result
ok 233 - U: filedelete directory succeeds
ok 234 - U: validate directory delete result
ok 235 - U: filedelete root ("") succeeds
ok 236 - U: validate root ("") delete result
ok 237 - U: filedelete root () succeeds
ok 238 - U: validate root () delete result
ok 239 - V: checkpoint helper does not get stuck with extra output
ok 240 - V: checkpoint updates refs after reset
ok 241 - V: checkpoint updates refs and marks after commit
ok 242 - V: checkpoint updates refs and marks after commit (no new objects)
ok 243 - V: checkpoint updates tags after tag
ok 244 - W: get-mark & empty orphan commit with no newlines
ok 245 - W: get-mark & empty orphan commit with one newline
ok 246 - W: get-mark & empty orphan commit with ugly second newline
ok 247 - W: get-mark & empty orphan commit with erroneous third newline
ok 248 - X: handling encoding
ok 249 - Y: setup
ok 250 - Y: rewrite submodules
# passed all 250 test(s)
1..250
*** t9301-fast-import-notes.sh ***
ok 1 - set up main branch
ok 2 - add notes with simple M command
ok 3 - add notes with simple N command
ok 4 - update existing notes with N command
ok 5 - add concatenation notes with M command
ok 6 - verify that deleteall also removes notes
ok 7 - verify that later N commands override earlier M commands
ok 8 - add lots of commits and notes
ok 9 - verify that lots of notes trigger a fanout scheme
ok 10 - verify that importing a notes tree respects the fanout scheme
ok 11 - verify that non-notes are untouched by a fanout change
ok 12 - change a few existing notes
ok 13 - verify that changing notes respect existing fanout
ok 14 - remove lots of notes
ok 15 - verify that removing notes trigger fanout consolidation
ok 16 - verify that non-notes are untouched by a fanout change
ok 17 - add notes to 16 commits in each of 10 refs
# passed all 17 test(s)
1..17
*** t9302-fast-import-unpack-limit.sh ***
ok 1 - create loose objects on import
ok 2 - bigger packs are preserved
ok 3 - lookups after checkpoint works
# passed all 3 test(s)
1..3
*** t9303-fast-import-compression.sh ***
ok 1 - fast-import (packed) with -c core.compression=0
ok 2 - fast-import (packed) with -c core.compression=9
ok 3 - fast-import (packed) with -c core.compression=0 -c pack.compression=0
ok 4 - fast-import (packed) with -c core.compression=9 -c pack.compression=0
ok 5 - fast-import (packed) with -c core.compression=0 -c pack.compression=9
ok 6 - fast-import (packed) with -c core.compression=9 -c pack.compression=9
ok 7 - fast-import (packed) with -c pack.compression=0
ok 8 - fast-import (packed) with -c pack.compression=9
ok 9 - fast-import (loose) with -c core.compression=0
ok 10 - fast-import (loose) with -c core.compression=9
ok 11 - fast-import (loose) with -c core.compression=0 -c core.loosecompression=0
ok 12 - fast-import (loose) with -c core.compression=9 -c core.loosecompression=0
ok 13 - fast-import (loose) with -c core.compression=0 -c core.loosecompression=9
ok 14 - fast-import (loose) with -c core.compression=9 -c core.loosecompression=9
ok 15 - fast-import (loose) with -c core.loosecompression=0
ok 16 - fast-import (loose) with -c core.loosecompression=9
# passed all 16 test(s)
1..16
*** t9304-fast-import-marks.sh ***
ok 1 - setup dump of basic history
ok 2 - setup large marks file
ok 3 - import with large marks file
ok 4 - setup dump with submodule
ok 5 - setup submodule mapping with large id
ok 6 - import with submodule mapping
ok 7 - paths adjusted for relative subdir
ok 8 - relative marks are not affected by subdir
# passed all 8 test(s)
1..8
*** t9350-fast-export.sh ***
ok 1 - setup
ok 2 - fast-export | fast-import
ok 3 - fast-export ^muss^{commit} muss
ok 4 - fast-export --mark-tags ^muss^{commit} muss
ok 5 - fast-export main~2..main
ok 6 - fast-export --reference-excluded-parents main~2..main
ok 7 - fast-export --show-original-ids
ok 8 - fast-export --show-original-ids | git fast-import
ok 9 - reencoding iso-8859-7
ok 10 - aborting on iso-8859-7
ok 11 - preserving iso-8859-7
ok 12 - encoding preserved if reencoding fails
ok 13 - import/export-marks
ok 14 - set up faked signed tag
ok 15 - signed-tags=abort
ok 16 - signed-tags=verbatim
ok 17 - signed-tags=strip
ok 18 - signed-tags=warn-strip
ok 19 - setup submodule
ok 20 - submodule fast-export | fast-import
ok 21 - setup copies
ok 22 - fast-export -C -C | fast-import
ok 23 - fast-export | fast-import when main is tagged
ok 24 - cope with tagger-less tags
ok 25 - setup for limiting exports by PATH
ok 26 - dropping tag of filtered out object
ok 27 - rewriting tag of filtered out object
ok 28 - rewrite tag predating pathspecs to nothing
not ok 29 - no exact-ref revisions included # TODO known breakage
ok 30 - path limiting with import-marks does not lose unmodified files
ok 31 - path limiting works
ok 32 - avoid corrupt stream with non-existent mark
ok 33 - full-tree re-shows unmodified files
ok 34 - set-up a few more tags for tag export tests
ok 35 - tree_tag
ok 36 - tree_tag-obj
ok 37 - tag-obj_tag
ok 38 - tag-obj_tag-obj
ok 39 - handling tags of blobs
ok 40 - handling nested tags
ok 41 - directory becomes symlink
ok 42 - fast-export quotes pathnames
ok 43 - test bidirectionality
ok 44 - avoid uninteresting refs
ok 45 - refs are updated even if no commits need to be exported
ok 46 - use refspec
ok 47 - delete ref because entire history excluded
ok 48 - delete refspec
ok 49 - when using -C, do not declare copy when source of copy is also modified
ok 50 - merge commit gets exported with --import-marks
ok 51 - fast-export --first-parent outputs all revisions output by revision walk
ok 52 - fast-export handles --end-of-options
# still have 1 known breakage(s)
# passed all remaining 51 test(s)
1..52
*** t9351-fast-export-anonymize.sh ***
ok 1 - setup simple repo
ok 2 - export anonymized stream
ok 3 - stream omits path names
ok 4 - stream contains user-specified names
ok 5 - stream omits gitlink oids
ok 6 - stream retains other as refname
ok 7 - stream omits other refnames
ok 8 - stream omits identities
ok 9 - stream omits tag message
ok 10 - import stream to new repository
ok 11 - result has two branches
ok 12 - repo has original shape and timestamps
ok 13 - root tree has original shape
ok 14 - paths in subdir ended up in one tree
ok 15 - identical gitlinks got identical oid
ok 16 - all tags point to branch tip
ok 17 - idents are shared
# passed all 17 test(s)
1..17
*** t9400-git-cvsserver-server.sh ***
ok 1 - setup
ok 2 - basic checkout
ok 3 - pserver authentication
ok 4 - pserver authentication failure (non-anonymous user)
ok 5 - pserver authentication success (non-anonymous user with password)
ok 6 - pserver authentication (login)
ok 7 - pserver authentication failure (login/non-anonymous user)
ok 8 - req_Root failure (relative pathname)
ok 9 - req_Root failure (conflicting roots)
ok 10 - req_Root (strict paths)
ok 11 - req_Root failure (strict-paths)
ok 12 - req_Root (w/o strict-paths)
ok 13 - req_Root failure (w/o strict-paths)
ok 14 - req_Root (base-path)
ok 15 - req_Root failure (base-path)
ok 16 - req_Root (export-all)
ok 17 - req_Root failure (export-all w/o directory list)
ok 18 - req_Root (everything together)
ok 19 - gitcvs.enabled = false
ok 20 - gitcvs.ext.enabled = true
ok 21 - gitcvs.ext.enabled = false
ok 22 - gitcvs.dbname
ok 23 - gitcvs.ext.dbname
ok 24 - cvs update (create new file)
ok 25 - cvs update (update existing file)
not ok 26 - cvs update w/o -d doesn't create subdir (TODO) # TODO known breakage
ok 27 - cvs update (subdirectories)
ok 28 - cvs update (delete file)
ok 29 - cvs update (re-add deleted file)
ok 30 - cvs update (merge)
ok 31 - cvs update (conflict merge)
ok 32 - cvs update (-C)
ok 33 - cvs update (merge no-op)
ok 34 - cvs update (-p)
ok 35 - cvs update (module list supports packed refs)
ok 36 - cvs status
ok 37 - cvs status (nonrecursive)
ok 38 - cvs status (no subdirs in header)
ok 39 - cvs co -c (shows module database)
ok 40 - cvs log
ok 41 - cvs annotate
ok 42 - create remote-cvs helper
ok 43 - cvs server does not run with vanilla git-shell
ok 44 - configure git shell to run cvs server
ok 45 - cvs server can run with recommended config
# still have 1 known breakage(s)
# passed all remaining 44 test(s)
1..45
*** t9401-git-cvsserver-crlf.sh ***
ok 1 - setup
ok 2 - cvs co (default crlf)
ok 3 - cvs co (allbinary)
ok 4 - cvs co (use attributes/allbinary)
ok 5 - cvs co (use attributes)
ok 6 - adding files
ok 7 - updating
ok 8 - cvs co (use attributes/guess)
ok 9 - setup multi-line files
ok 10 - cvs co (guess)
ok 11 - cvs co another copy (guess)
ok 12 - cvs status - sticky options
ok 13 - add text (guess)
ok 14 - add bin (guess)
ok 15 - remove files (guess)
ok 16 - cvs ci (guess)
ok 17 - update subdir of other copy (guess)
ok 18 - update/merge full other copy (guess)
# passed all 18 test(s)
1..18
*** t9402-git-cvsserver-refs.sh ***
ok 1 - setup v1, b1
ok 2 - cvs co v1
ok 3 - cvs co b1
ok 4 - cvs co b1 [cvswork3]
ok 5 - edit cvswork3 and save diff
ok 6 - setup v1.2 on b1
ok 7 - cvs -f up (on b1 adir)
ok 8 - cvs up (on b1 /)
ok 9 - cvs up (on b1 /) (again; check CVS/Tag files)
ok 10 - cvs up -r v1
ok 11 - cvs up
ok 12 - cvs up (again; check CVS/Tag files)
ok 13 - setup simple b2
ok 14 - cvs co b2 [into cvswork2]
ok 15 - root dir edit [cvswork2]
ok 16 - root dir rm file [cvswork2]
ok 17 - subdir edit/add/rm files [cvswork2]
ok 18 - validate result of edits [cvswork2]
ok 19 - validate basic diffs saved during above cvswork2 edits
ok 20 - validate v1.2 diff saved during last cvswork2 edit
ok 21 - validate v1.2 v1 diff saved during last cvswork2 edit
ok 22 - cvs up [cvswork2]
ok 23 - cvs up -r b2 [back to cvswork]
ok 24 - cvs up -r b1
ok 25 - cvs up -A
ok 26 - cvs up (check CVS/Tag files)
ok 27 - cvs up -r heads/b1
ok 28 - cvs up -r heads_-s-b2 (cvsserver escape mechanism)
ok 29 - cvs up -r $(git rev-parse v1)
ok 30 - cvs diff -r v1 -u
ok 31 - cvs diff -N -r v2 -u
ok 32 - cvs diff -N -r v2 -r v1.2
ok 33 - apply early [cvswork3] diff to b3
ok 34 - check [cvswork3] diff
ok 35 - merge early [cvswork3] b3 with b1
ok 36 - cvs up dirty [cvswork3]
ok 37 - cvs commit [cvswork3]
# passed all 37 test(s)
1..37
*** t9500-gitweb-standalone-no-errors.sh ***
ok 1 - no commits: projects_list (implicit)
ok 2 - no commits: projects_index
ok 3 - no commits: .git summary (implicit)
ok 4 - no commits: .git commit (implicit HEAD)
ok 5 - no commits: .git commitdiff (implicit HEAD)
ok 6 - no commits: .git tree (implicit HEAD)
ok 7 - no commits: .git heads
ok 8 - no commits: .git tags
ok 9 - Make initial commit
ok 10 - projects_list (implicit)
ok 11 - projects_index
ok 12 - .git summary (implicit)
ok 13 - .git commit (implicit HEAD)
ok 14 - .git commitdiff (implicit HEAD, root commit)
ok 15 - .git commitdiff_plain (implicit HEAD, root commit)
ok 16 - .git commit (HEAD)
ok 17 - .git tree (implicit HEAD)
ok 18 - .git blob (file)
ok 19 - .git blob_plain (file)
ok 20 - .git commit (non-existent)
ok 21 - .git commitdiff (non-existent)
ok 22 - .git commitdiff (non-existent vs HEAD)
ok 23 - .git tree (0000000000000000000000000000000000000000)
ok 24 - .git tag (0000000000000000000000000000000000000000)
ok 25 - .git blob (non-existent)
ok 26 - .git blob_plain (non-existent)
ok 27 - commitdiff(0): root
ok 28 - commitdiff(0): file added
ok 29 - commitdiff(0): mode change
ok 30 - commitdiff(0): file renamed
ok 31 - commitdiff(0): file to symlink
ok 32 - commitdiff(0): file deleted
ok 33 - commitdiff(0): file copied / new file
ok 34 - commitdiff(0): mode change and modified
ok 35 - commitdiff(0): renamed and modified
ok 36 - commitdiff(0): renamed, mode change and modified
ok 37 - setup typechange commits
ok 38 - commitdiff(2): file renamed from foo to foo/baz
ok 39 - commitdiff(2): file renamed from foo/baz to foo
ok 40 - commitdiff(2): directory becomes file
ok 41 - commitdiff(2): file becomes directory
ok 42 - commitdiff(2): file becomes symlink
ok 43 - commitdiff(2): symlink becomes file
ok 44 - commitdiff(2): symlink becomes directory
ok 45 - commitdiff(2): directory becomes symlink
ok 46 - setup incomplete lines
ok 47 - commitdiff(1): addition of incomplete line
ok 48 - commitdiff(1): incomplete line as context line
ok 49 - commitdiff(1): change incomplete line
ok 50 - commitdiff(1): removal of incomplete line
ok 51 - Create a merge
ok 52 - commit(0): merge commit
ok 53 - commitdiff(0): merge commit
ok 54 - Prepare large commit
ok 55 - commit(1): large commit
ok 56 - commitdiff(1): large commit
ok 57 - side-by-side: addition of incomplete line
ok 58 - side-by-side: incomplete line as context line
ok 59 - side-by-side: changed incomplete line
ok 60 - side-by-side: removal of incomplete line
ok 61 - side-by-side: merge commit
ok 62 - tags: list of different types of tags
ok 63 - tag: Tag to commit object
ok 64 - tag: on lightweight tag (invalid)
ok 65 - logs: log (implicit HEAD)
ok 66 - logs: shortlog (implicit HEAD)
ok 67 - logs: history (implicit HEAD, file)
ok 68 - logs: history (implicit HEAD, non-existent file)
ok 69 - logs: history (implicit HEAD, deleted file)
ok 70 - path_info: project
ok 71 - path_info: project/branch
ok 72 - path_info: project/branch:file
ok 73 - path_info: project/branch:dir/
ok 74 - path_info: project/branch (non-existent)
ok 75 - path_info: project/branch:filename (non-existent branch)
ok 76 - path_info: project/branch:file (non-existent)
ok 77 - path_info: project/branch:dir/ (non-existent)
ok 78 - path_info: project/branch:/file
ok 79 - path_info: project/:/file (implicit HEAD)
ok 80 - path_info: project/:/ (implicit HEAD, top tree)
ok 81 - feeds: OPML
ok 82 - feed: RSS
ok 83 - feed: Atom
ok 84 - encode(commit): utf8
ok 85 - encode(commit): iso-8859-1
ok 86 - encode(log): utf-8 and iso-8859-1
ok 87 - opt: log --no-merges
ok 88 - opt: atom --no-merges
ok 89 - opt: "file" history --no-merges
ok 90 - opt: log --no-such-option (invalid option)
ok 91 - opt: tree --no-merges (invalid option for action)
ok 92 - URL: no project URLs, no base URL
ok 93 - URL: project URLs via gitweb.url
ok 94 - URL: project URLs via cloneurl file
ok 95 - config override: projects list (implicit)
ok 96 - config override: tree view, features not overridden in repo config
ok 97 - config override: tree view, features disabled in repo config
ok 98 - config override: tree view, features enabled in repo config (1)
ok 99 - setup
ok 100 - config override: tree view, features enabled in repo config (2)
ok 101 - search: preparation
ok 102 - search: commit author
ok 103 - search: commit message
ok 104 - search: grep
ok 105 - search: pickaxe
ok 106 - search: projects
ok 107 - README.html with non-ASCII characters (utf-8)
Skipping syntax highlighting tests: 'highlight' not found
ok 108 # skip syntax highlighting (no highlight, unknown syntax) (missing HIGHLIGHT)
ok 109 # skip syntax highlighting (highlighted, shell script) (missing HIGHLIGHT)
ok 110 # skip syntax highlighting (highlighter language autodetection) (missing HIGHLIGHT)
ok 111 - forks: prepare
ok 112 - forks: projects list
ok 113 - forks: forks action
ok 114 - ctags: tag cloud in projects list
ok 115 - ctags: search projects by existing tag
ok 116 - ctags: search projects by non existent tag
ok 117 - ctags: malformed tag weights
ok 118 - categories: projects list, only default category
ok 119 - unborn HEAD: "summary" page (with "heads" subview)
# passed all 119 test(s)
1..119
*** t9501-gitweb-standalone-http-status.sh ***
ok 1 - setup
ok 2 - snapshots: tgz only default format enabled
ok 3 - snapshots: all enabled in default, use default disabled value
ok 4 - snapshots: zip explicitly disabled
ok 5 - snapshots: tgz explicitly enabled
ok 6 - snapshots: good tree-ish id
ok 7 - snapshots: bad tree-ish id
ok 8 - snapshots: bad tree-ish id (tagged object)
ok 9 - snapshots: good object id
ok 10 - snapshots: bad object id
ok 11 - modification: feed last-modified
ok 12 - modification: feed if-modified-since (modified)
ok 13 - modification: feed if-modified-since (unmodified)
ok 14 - modification: snapshot last-modified
ok 15 - modification: snapshot if-modified-since (modified)
ok 16 - modification: snapshot if-modified-since (unmodified)
ok 17 - modification: tree snapshot
ok 18 - load checking: load too high (default action)
ok 19 - invalid arguments: invalid regexp (in project search)
# passed all 19 test(s)
1..19
*** t9502-gitweb-standalone-parse-output.sh ***
ok 1 - setup
ok 2 - snapshot: full sha1
ok 3 - snapshot: shortened sha1
ok 4 - snapshot: almost full sha1
ok 5 - snapshot: HEAD
ok 6 - snapshot: short branch name (main)
ok 7 - snapshot: short tag name (first)
ok 8 - snapshot: full branch name (refs/heads/main)
ok 9 - snapshot: full tag name (refs/tags/first)
ok 10 - snapshot: hierarchical branch name (xx/test)
ok 11 - forks: setup
ok 12 - forks: not skipped unless "forks" feature enabled
ok 13 - enable forks feature
ok 14 - forks: forks skipped if "forks" feature enabled
ok 15 - forks: "forks" action for forked repository
ok 16 - forks: can access forked repository
ok 17 - forks: project_index lists all projects (incl. forks)
ok 18 - xss checks
ok 19 - no http-equiv="content-type" in XHTML
ok 20 - Proper DOCTYPE with entity declarations
# passed all 20 test(s)
1..20
*** t9600-cvsimport.sh ***
1..0 # SKIP skipping cvsimport tests, cvsps not found
*** t9601-cvsimport-vendor-branch.sh ***
1..0 # SKIP skipping cvsimport tests, cvsps not found
*** t9602-cvsimport-branches-tags.sh ***
1..0 # SKIP skipping cvsimport tests, cvsps not found
*** t9603-cvsimport-patchsets.sh ***
1..0 # SKIP skipping cvsimport tests, cvsps not found
*** t9604-cvsimport-timestamps.sh ***
1..0 # SKIP skipping cvsimport tests, cvsps not found
*** t9700-perl-git.sh ***
ok 1 - set up test repository
ok 2 - set up bare repository
ok 3 - use t9700/test.pl to test Git.pm
# passed all 3 test(s)
1..3
*** t9800-git-p4-basic.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9801-git-p4-branch.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9802-git-p4-filetype.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9803-git-p4-shell-metachars.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9804-git-p4-label.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9805-git-p4-skip-submit-edit.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9806-git-p4-options.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9807-git-p4-submit.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9808-git-p4-chdir.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9809-git-p4-client-view.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9810-git-p4-rcs.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9811-git-p4-label-import.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9812-git-p4-wildcards.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9813-git-p4-preserve-users.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9814-git-p4-rename.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9815-git-p4-submit-fail.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9816-git-p4-locked.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9817-git-p4-exclude.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9818-git-p4-block.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9819-git-p4-case-folding.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9820-git-p4-editor-handling.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9821-git-p4-path-variations.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9822-git-p4-path-encoding.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9823-git-p4-mock-lfs.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9824-git-p4-git-lfs.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9825-git-p4-handle-utf16-without-bom.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9826-git-p4-keep-empty-commits.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9827-git-p4-change-filetype.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9828-git-p4-map-user.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9829-git-p4-jobs.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9830-git-p4-symlink-dir.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9831-git-p4-triggers.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9832-unshelve.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9833-errors.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9834-git-p4-file-dir-bug.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9835-git-p4-metadata-encoding-python2.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9836-git-p4-metadata-encoding-python3.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9850-shell.sh ***
ok 1 - shell allows upload-pack
ok 2 - shell forbids other commands
ok 3 - shell forbids interactive use by default
ok 4 - shell allows interactive command
ok 5 - shell complains of overlong commands
# passed all 5 test(s)
1..5
*** t9901-git-web--browse.sh ***
ok 1 - URL with an ampersand in it
ok 2 - URL with a semi-colon in it
ok 3 - URL with a hash in it
ok 4 - browser paths are properly quoted
ok 5 - browser command allows arbitrary shell code
# passed all 5 test(s)
1..5
*** t9902-completion.sh ***
ok 1 - setup for __git_find_repo_path/__gitdir tests
ok 2 - __git_find_repo_path - from command line (through $__git_dir)
ok 3 - __git_find_repo_path - .git directory in cwd
ok 4 - __git_find_repo_path - .git directory in parent
ok 5 - __git_find_repo_path - cwd is a .git directory
ok 6 - __git_find_repo_path - parent is a .git directory
ok 7 - __git_find_repo_path - $GIT_DIR set while .git directory in cwd
ok 8 - __git_find_repo_path - $GIT_DIR set while .git directory in parent
ok 9 - __git_find_repo_path - from command line while "git -C"
ok 10 - __git_find_repo_path - relative dir from command line and "git -C"
ok 11 - __git_find_repo_path - $GIT_DIR set while "git -C"
ok 12 - __git_find_repo_path - relative dir in $GIT_DIR and "git -C"
ok 13 - __git_find_repo_path - "git -C" while .git directory in cwd
ok 14 - __git_find_repo_path - "git -C" while cwd is a .git directory
ok 15 - __git_find_repo_path - "git -C" while .git directory in parent
ok 16 - __git_find_repo_path - non-existing path in "git -C"
ok 17 - __git_find_repo_path - non-existing path in $__git_dir
ok 18 - __git_find_repo_path - non-existing $GIT_DIR
ok 19 - __git_find_repo_path - gitfile in cwd
ok 20 - __git_find_repo_path - gitfile in parent
ok 21 - __git_find_repo_path - resulting path avoids symlinks
ok 22 - __git_find_repo_path - not a git repository
ok 23 - __gitdir - finds repo
ok 24 - __gitdir - returns error when cannot find repo
ok 25 - __gitdir - repo as argument
ok 26 - __gitdir - remote as argument
ok 27 - __git_dequote - plain unquoted word
ok 28 - __git_dequote - backslash escaped
ok 29 - __git_dequote - single quoted
ok 30 - __git_dequote - double quoted
ok 31 - __git_dequote - open single quote
ok 32 - __git_dequote - open double quote
ok 33 - __gitcomp_direct - puts everything into COMPREPLY as-is
ok 34 - __gitcomp - trailing space - options
ok 35 - __gitcomp - trailing space - config keys
ok 36 - __gitcomp - option parameter
ok 37 - __gitcomp - prefix
ok 38 - __gitcomp - suffix
ok 39 - __gitcomp - ignore optional negative options
ok 40 - __gitcomp - ignore/narrow optional negative options
ok 41 - __gitcomp - ignore/narrow optional negative options
ok 42 - __gitcomp - expand all negative options
ok 43 - __gitcomp - expand/narrow all negative options
ok 44 - __gitcomp - equal skip
ok 45 - __gitcomp - doesnt fail because of invalid variable name
ok 46 - __gitcomp_nl - trailing space
ok 47 - __gitcomp_nl - prefix
ok 48 - __gitcomp_nl - suffix
ok 49 - __gitcomp_nl - no suffix
ok 50 - __gitcomp_nl - doesnt fail because of invalid variable name
ok 51 - __git_remotes - list remotes from $GIT_DIR/remotes and from config file
ok 52 - __git_is_configured_remote
ok 53 - setup for ref completion
ok 54 - __git_refs - simple
ok 55 - __git_refs - full refs
ok 56 - __git_refs - repo given on the command line
ok 57 - __git_refs - remote on local file system
ok 58 - __git_refs - remote on local file system - full refs
ok 59 - __git_refs - configured remote
ok 60 - __git_refs - configured remote - full refs
ok 61 - __git_refs - configured remote - repo given on the command line
ok 62 - __git_refs - configured remote - full refs - repo given on the command line
ok 63 - __git_refs - configured remote - remote name matches a directory
ok 64 - __git_refs - URL remote
ok 65 - __git_refs - URL remote - full refs
ok 66 - __git_refs - non-existing remote
ok 67 - __git_refs - non-existing remote - full refs
ok 68 - __git_refs - non-existing URL remote
ok 69 - __git_refs - non-existing URL remote - full refs
ok 70 - __git_refs - not in a git repository
ok 71 - __git_refs - unique remote branches for git checkout DWIMery
ok 72 - __git_refs - after --opt=
ok 73 - __git_refs - after --opt= - full refs
ok 74 - __git refs - excluding refs
ok 75 - __git refs - excluding full refs
ok 76 - setup for filtering matching refs
ok 77 - __git_refs - do not filter refs unless told so
ok 78 - __git_refs - only matching refs
ok 79 - __git_refs - only matching refs - full refs
ok 80 - __git_refs - only matching refs - remote on local file system
ok 81 - __git_refs - only matching refs - configured remote
ok 82 - __git_refs - only matching refs - remote - full refs
ok 83 - __git_refs - only matching refs - checkout DWIMery
ok 84 - teardown after filtering matching refs
ok 85 - __git_refs - for-each-ref format specifiers in prefix
ok 86 - __git_complete_refs - simple
ok 87 - __git_complete_refs - matching
ok 88 - __git_complete_refs - remote
ok 89 - __git_complete_refs - track
ok 90 - __git_complete_refs - current word
ok 91 - __git_complete_refs - prefix
ok 92 - __git_complete_refs - suffix
ok 93 - __git_complete_fetch_refspecs - simple
ok 94 - __git_complete_fetch_refspecs - matching
ok 95 - __git_complete_fetch_refspecs - prefix
ok 96 - __git_complete_fetch_refspecs - fully qualified
ok 97 - __git_complete_fetch_refspecs - fully qualified & prefix
ok 98 - __git_complete_worktree_paths
ok 99 - __git_complete_worktree_paths - not a git repository
ok 100 - __git_complete_worktree_paths with -C
ok 101 - git switch - with no options, complete local branches and unique remote branch names for DWIM logic
ok 102 - git bisect - when not bisecting, complete only replay and start subcommands
ok 103 - git bisect - complete options to start subcommand
ok 104 - setup for git-bisect tests requiring a repo
ok 105 - git bisect - start subcommand arguments before double-dash are completed as revs
ok 106 - git bisect - start subcommand arguments after double-dash are not completed
ok 107 - setup for git-bisect tests requiring ongoing bisection
ok 108 - git-bisect - when bisecting all subcommands are candidates
ok 109 - git-bisect - options to terms subcommand are candidates
ok 110 - git-bisect - git-log options to visualize subcommand are candidates
ok 111 - git-bisect - view subcommand is not a candidate
ok 112 - git-bisect - existing view subcommand is recognized and enables completion of git-log options
ok 113 - git checkout - completes refs and unique remote branches for DWIM
ok 114 - git switch - with --no-guess, complete only local branches
ok 115 - git switch - with GIT_COMPLETION_CHECKOUT_NO_GUESS=1, complete only local branches
ok 116 - git switch - --guess overrides GIT_COMPLETION_CHECKOUT_NO_GUESS=1, complete local branches and unique remote names for DWIM logic
ok 117 - git switch - a later --guess overrides previous --no-guess, complete local and remote unique branches for DWIM
ok 118 - git switch - a later --no-guess overrides previous --guess, complete only local branches
ok 119 - git checkout - with GIT_COMPLETION_NO_GUESS=1 only completes refs
ok 120 - git checkout - --guess overrides GIT_COMPLETION_NO_GUESS=1, complete refs and unique remote branches for DWIM
ok 121 - git checkout - with --no-guess, only completes refs
ok 122 - git checkout - a later --guess overrides previous --no-guess, complete refs and unique remote branches for DWIM
ok 123 - git checkout - a later --no-guess overrides previous --guess, complete only refs
ok 124 - git checkout - with checkout.guess = false, only completes refs
ok 125 - git checkout - with checkout.guess = true, completes refs and unique remote branches for DWIM
ok 126 - git checkout - a later --guess overrides previous checkout.guess = false, complete refs and unique remote branches for DWIM
ok 127 - git checkout - a later --no-guess overrides previous checkout.guess = true, complete only refs
ok 128 - git switch - with --detach, complete all references
ok 129 - git checkout - with --detach, complete only references
ok 130 - setup sparse-checkout tests
ok 131 - sparse-checkout completes subcommands
ok 132 - cone mode sparse-checkout completes directory names
ok 133 - cone mode sparse-checkout completes directory names with spaces and accents
ok 134 - cone mode sparse-checkout completes directory names with tabs
ok 135 - cone mode sparse-checkout completes directory names with backslashes
ok 136 - non-cone mode sparse-checkout gives rooted paths
ok 137 - git sparse-checkout set --cone completes directory names
ok 138 - git switch - with -d, complete all references
ok 139 - git checkout - with -d, complete only references
ok 140 - git switch - with --track, complete only remote branches
ok 141 - git checkout - with --track, complete only remote branches
ok 142 - git switch - with --no-track, complete only local branch names
ok 143 - git checkout - with --no-track, complete only local references
ok 144 - git switch - with -c, complete all references
ok 145 - git switch - with -C, complete all references
ok 146 - git switch - with -c and --track, complete all references
ok 147 - git switch - with -C and --track, complete all references
ok 148 - git switch - with -c and --no-track, complete all references
ok 149 - git switch - with -C and --no-track, complete all references
ok 150 - git checkout - with -b, complete all references
ok 151 - git checkout - with -B, complete all references
ok 152 - git checkout - with -b and --track, complete all references
ok 153 - git checkout - with -B and --track, complete all references
ok 154 - git checkout - with -b and --no-track, complete all references
ok 155 - git checkout - with -B and --no-track, complete all references
ok 156 - git switch - for -c, complete local branches and unique remote branches
ok 157 - git switch - for -C, complete local branches and unique remote branches
ok 158 - git switch - for -c with --no-guess, complete local branches only
ok 159 - git switch - for -C with --no-guess, complete local branches only
ok 160 - git switch - for -c with --no-track, complete local branches only
ok 161 - git switch - for -C with --no-track, complete local branches only
ok 162 - git checkout - for -b, complete local branches and unique remote branches
ok 163 - git checkout - for -B, complete local branches and unique remote branches
ok 164 - git checkout - for -b with --no-guess, complete local branches only
ok 165 - git checkout - for -B with --no-guess, complete local branches only
ok 166 - git checkout - for -b with --no-track, complete local branches only
ok 167 - git checkout - for -B with --no-track, complete local branches only
ok 168 - git switch - with --orphan completes local branch names and unique remote branch names
ok 169 - git switch - --orphan with branch already provided completes nothing else
ok 170 - git checkout - with --orphan completes local branch names and unique remote branch names
ok 171 - git checkout - --orphan with branch already provided completes local refs for a start-point
ok 172 - git restore completes modified files
ok 173 - teardown after ref completion
ok 174 - setup for path completion tests
ok 175 - __git_complete_index_file - simple
ok 176 - __git_complete_index_file - escaped characters on cmdline
ok 177 - __git_complete_index_file - quoted characters on cmdline
ok 178 - __git_complete_index_file - UTF-8 in ls-files output
ok 179 - __git_complete_index_file - C-style escapes in ls-files output
ok 180 - __git_complete_index_file - \nnn-escaped characters in ls-files output
ok 181 - __git_complete_index_file - removing repeated quoted path components
ok 182 - teardown after path completion tests
ok 183 - __git_find_on_cmdline - single match
ok 184 - __git_find_on_cmdline - multiple matches
ok 185 - __git_find_on_cmdline - no match
ok 186 - __git_find_on_cmdline - single match with index
ok 187 - __git_find_on_cmdline - multiple matches with index
ok 188 - __git_find_on_cmdline - no match with index
ok 189 - __git_find_on_cmdline - ignores matches before command with index
ok 190 - __git_get_config_variables
ok 191 - __git_pretty_aliases
ok 192 - basic
ok 193 - double dash "git" itself
ok 194 - double dash "git checkout"
ok 195 - general options
ok 196 - general options plus command
ok 197 - git --help completion
ok 198 - completion.commands removes multiple commands
ok 199 - setup for integration tests
ok 200 - checkout completes ref names
ok 201 - checkout does not match ref names of a different case
ok 202 - checkout matches case insensitively with GIT_COMPLETION_IGNORE_CASE
ok 203 - checkout completes pseudo refs
ok 204 - checkout completes pseudo refs case insensitively with GIT_COMPLETION_IGNORE_CASE
ok 205 - git -C <path> checkout uses the right repo
ok 206 - show completes all refs
ok 207 - <ref>: completes paths
ok 208 - complete tree filename with spaces
ok 209 - complete tree filename with metacharacters
ok 210 - send-email
ok 211 - complete files
ok 212 - simple alias
ok 213 - recursive alias
ok 214 - completion uses <cmd> completion for alias: !sh -c 'git <cmd> ...'
ok 215 - completion uses <cmd> completion for alias: !f () { VAR=val git <cmd> ... }
ok 216 - completion used <cmd> completion for alias: !f() { : git <cmd> ; ... }
ok 217 - completion used <cmd> completion for alias: !f() { : <cmd> ; ... }
ok 218 - completion used <cmd> completion for alias: !f() { : <cmd>; ... }
ok 219 - completion without explicit _git_xxx function
not ok 220 - complete with tilde expansion # TODO known breakage
ok 221 - setup other remote for remote reference completion
ok 222 - __git_complete_remote_or_refspec - push -d other
not ok 223 - __git_complete_remote_or_refspec - push other -d # TODO known breakage
ok 224 - __git_complete_remote_or_refspec - push --delete other
not ok 225 - __git_complete_remote_or_refspec - push other --delete # TODO known breakage
ok 226 - git config - section
ok 227 - git config - section include, includeIf
ok 228 - git config - variable name
ok 229 - git config - variable name include
ok 230 - setup for git config submodule tests
ok 231 - git config - variable name - submodule and __git_compute_first_level_config_vars_for_section
ok 232 - git config - variable name - __git_compute_second_level_config_vars_for_section
ok 233 - git config - value
ok 234 - git -c - section
ok 235 - git -c - variable name
ok 236 - git -c - value
ok 237 - git clone --config= - section
ok 238 - git clone --config= - variable name
ok 239 - git clone --config= - value
ok 240 - git reflog show
ok 241 - options with value
ok 242 - sourcing the completion script clears cached commands
ok 243 - sourcing the completion script clears cached merge strategies
ok 244 - sourcing the completion script clears cached --options
ok 245 - option aliases are not shown by default
ok 246 - option aliases are shown with GIT_COMPLETION_SHOW_ALL
ok 247 - plumbing commands are excluded without GIT_COMPLETION_SHOW_ALL_COMMANDS
ok 248 - all commands are shown with GIT_COMPLETION_SHOW_ALL_COMMANDS (also main non-builtin)
ok 249 - __git_complete
ok 250 - __git_pseudoref_exists
# still have 3 known breakage(s)
# passed all remaining 247 test(s)
1..250
*** t9903-bash-prompt.sh ***
ok 1 - setup for prompt tests
ok 2 - prompt - branch name
ok 3 - prompt - branch name - symlink symref
ok 4 - prompt - unborn branch
ok 5 - prompt - with newline in path
ok 6 - prompt - detached head
ok 7 - prompt - describe detached head - contains
ok 8 - prompt - describe detached head - branch
ok 9 - prompt - describe detached head - describe
ok 10 - prompt - describe detached head - default
ok 11 - prompt - inside .git directory
ok 12 - prompt - deep inside .git directory
ok 13 - prompt - inside bare repository
ok 14 - prompt - interactive rebase
ok 15 - prompt - rebase merge
ok 16 - prompt - rebase am
ok 17 - prompt - merge
ok 18 - prompt - cherry-pick
ok 19 - prompt - revert
ok 20 - prompt - bisect
ok 21 - prompt - dirty status indicator - clean
ok 22 - prompt - dirty status indicator - dirty worktree
ok 23 - prompt - dirty status indicator - dirty index
ok 24 - prompt - dirty status indicator - dirty index and worktree
ok 25 - prompt - dirty status indicator - orphan branch - clean
ok 26 - prompt - dirty status indicator - orphan branch - dirty index
ok 27 - prompt - dirty status indicator - orphan branch - dirty index and worktree
ok 28 - prompt - dirty status indicator - shell variable unset with config disabled
ok 29 - prompt - dirty status indicator - shell variable unset with config enabled
ok 30 - prompt - dirty status indicator - shell variable set with config disabled
ok 31 - prompt - dirty status indicator - shell variable set with config enabled
ok 32 - prompt - dirty status indicator - not shown inside .git directory
ok 33 - prompt - stash status indicator - no stash
ok 34 - prompt - stash status indicator - stash
ok 35 - prompt - stash status indicator - not shown inside .git directory
ok 36 - prompt - untracked files status indicator - no untracked files
ok 37 - prompt - untracked files status indicator - untracked files
ok 38 - prompt - untracked files status indicator - empty untracked dir
ok 39 - prompt - untracked files status indicator - non-empty untracked dir
ok 40 - prompt - untracked files status indicator - untracked files outside cwd
ok 41 - prompt - untracked files status indicator - shell variable unset with config disabled
ok 42 - prompt - untracked files status indicator - shell variable unset with config enabled
ok 43 - prompt - untracked files status indicator - shell variable set with config disabled
ok 44 - prompt - untracked files status indicator - shell variable set with config enabled
ok 45 - prompt - untracked files status indicator - not shown inside .git directory
ok 46 - prompt - format string starting with dash
ok 47 - prompt - pc mode
ok 48 - prompt - bash color pc mode - branch name
ok 49 - prompt - bash color pc mode - detached head
ok 50 - prompt - bash color pc mode - dirty status indicator - dirty worktree
ok 51 - prompt - bash color pc mode - dirty status indicator - dirty index
ok 52 - prompt - bash color pc mode - dirty status indicator - dirty index and worktree
ok 53 - prompt - bash color pc mode - dirty status indicator - before root commit
ok 54 - prompt - bash color pc mode - inside .git directory
ok 55 - prompt - bash color pc mode - stash status indicator
ok 56 - prompt - bash color pc mode - untracked files status indicator
ok 57 - prompt - zsh color pc mode
ok 58 - prompt - hide if pwd ignored - env var unset, config disabled
ok 59 - prompt - hide if pwd ignored - env var unset, config disabled, pc mode
ok 60 - prompt - hide if pwd ignored - env var unset, config unset
ok 61 - prompt - hide if pwd ignored - env var unset, config unset, pc mode
ok 62 - prompt - hide if pwd ignored - env var set, config disabled
ok 63 - prompt - hide if pwd ignored - env var set, config disabled, pc mode
ok 64 - prompt - hide if pwd ignored - env var set, config unset
ok 65 - prompt - hide if pwd ignored - env var set, config unset, pc mode
ok 66 - prompt - hide if pwd ignored - inside gitdir
ok 67 - prompt - conflict indicator
# passed all 67 test(s)
1..67

missing prereq: !AUTOIDENT !LONG_IS_64BIT !PCRE !PTHREADS BUILTIN_TXT_CHECKOUT__WORKER BUILTIN_TXT_MERGE_OURS BUILTIN_TXT_MERGE_RECURSIVE BUILTIN_TXT_MERGE_RECURSIVE_OURS BUILTIN_TXT_MERGE_RECURSIVE_THEIRS BUILTIN_TXT_MERGE_SUBTREE BUILTIN_TXT_PICKAXE BUILTIN_TXT_SUBMODULE__HELPER BUILTIN_TXT_UPLOAD_ARCHIVE__WRITER CASE_INSENSITIVE_FS EXPENSIVE FSMONITOR_DAEMON GETCWD_IGNORES_PERMS GPG GPG2 GPGSM HIGHLIGHT JGIT LONG_REF MINGW NATIVE_CRLF RFC1991 RUNTIME_PREFIX SETFACL SYMLINKS_WINDOWS TAR_NEEDS_PAX_FALLBACK UTF8_NFD_TO_NFC WINDOWS

fixed   1
success 29439
failed  0
broken  272
total   30158
