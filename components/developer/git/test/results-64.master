*** t0000-basic.sh ***
ok 1 - verify that the running shell supports "local"
ok 2 - .git/objects should be empty after git init in an empty repo
ok 3 - .git/objects should have 3 subdirectories
ok 4 - success is reported like this
ok 5 - pretend we have a fully passing test suite
ok 6 - pretend we have a partially passing test suite
ok 7 - pretend we have a known breakage
ok 8 - pretend we have fixed a known breakage
ok 9 - pretend we have fixed one of two known breakages (run in sub test-lib)
ok 10 - pretend we have a pass, fail, and known breakage
ok 11 - pretend we have a mix of all possible results
ok 12 - test --verbose
ok 13 - test --verbose-only
ok 14 - GIT_SKIP_TESTS
ok 15 - GIT_SKIP_TESTS several tests
ok 16 - GIT_SKIP_TESTS sh pattern
ok 17 - --run basic
ok 18 - --run with a range
ok 19 - --run with two ranges
ok 20 - --run with a left open range
ok 21 - --run with a right open range
ok 22 - --run with basic negation
ok 23 - --run with two negations
ok 24 - --run a range and negation
ok 25 - --run range negation
ok 26 - --run include, exclude and include
ok 27 - --run include, exclude and include, comma separated
ok 28 - --run exclude and include
ok 29 - --run empty selectors
ok 30 - --run invalid range start
ok 31 - --run invalid range end
ok 32 - --run invalid selector
ok 33 - test runs if prerequisite is satisfied
ok 34 # skip unmet prerequisite causes test to be skipped (missing DONTHAVEIT)
ok 35 - test runs if prerequisites are satisfied
ok 36 # skip unmet prerequisites causes test to be skipped (missing DONTHAVEIT of HAVEIT,DONTHAVEIT)
ok 37 # skip unmet prerequisites causes test to be skipped (missing DONTHAVEIT of DONTHAVEIT,HAVEIT)
ok 38 - test runs if lazy prereq is satisfied
ok 39 # skip missing lazy prereqs skip tests (missing !LAZY_TRUE)
ok 40 - negative lazy prereqs checked
ok 41 # skip missing negative lazy prereqs will skip (missing LAZY_FALSE)
ok 42 - tests clean up after themselves
ok 43 - tests clean up even on failures
ok 44 - git update-index without --add should fail adding
ok 45 - git update-index with --add should succeed
ok 46 - writing tree out with git write-tree
ok 47 - validate object ID of a known tree
ok 48 - git update-index without --remove should fail removing
ok 49 - git update-index with --remove should be able to remove
ok 50 - git write-tree should be able to write an empty tree
ok 51 - validate object ID of a known tree
ok 52 - adding various types of objects with git update-index --add
ok 53 - showing stage with git ls-files --stage
ok 54 - validate git ls-files output for a known tree
ok 55 - writing tree out with git write-tree
ok 56 - validate object ID for a known tree
ok 57 - showing tree with git ls-tree
ok 58 - git ls-tree output for a known tree
ok 59 - showing tree with git ls-tree -r
ok 60 - git ls-tree -r output for a known tree
ok 61 - showing tree with git ls-tree -r -t
ok 62 - git ls-tree -r output for a known tree
ok 63 - writing partial tree out with git write-tree --prefix
ok 64 - validate object ID for a known tree
ok 65 - writing partial tree out with git write-tree --prefix
ok 66 - validate object ID for a known tree
ok 67 - put invalid objects into the index
ok 68 - writing this tree without --missing-ok
ok 69 - writing this tree with --missing-ok
ok 70 - git read-tree followed by write-tree should be idempotent
ok 71 - validate git diff-files output for a know cache/work tree state
ok 72 - git update-index --refresh should succeed
ok 73 - no diff after checkout and git update-index --refresh
ok 74 - git commit-tree records the correct tree in a commit
ok 75 - git commit-tree records the correct parent in a commit
ok 76 - git commit-tree omits duplicated parent in a commit
ok 77 - update-index D/F conflict
ok 78 - very long name in the index handled sanely
# passed all 78 test(s)
1..78
*** t0001-init.sh ***
ok 1 - plain
ok 2 - plain nested in bare
ok 3 - plain through aliased command, outside any git repo
ok 4 - plain nested through aliased command
ok 5 - plain nested in bare through aliased command
ok 6 - No extra GIT_* on alias scripts
ok 7 - plain with GIT_WORK_TREE
ok 8 - plain bare
ok 9 - plain bare with GIT_WORK_TREE
ok 10 - GIT_DIR bare
ok 11 - init --bare
ok 12 - GIT_DIR non-bare
ok 13 - GIT_DIR & GIT_WORK_TREE (1)
ok 14 - GIT_DIR & GIT_WORK_TREE (2)
ok 15 - reinit
ok 16 - init with --template
ok 17 - init with --template (blank)
ok 18 - init with init.templatedir set
ok 19 - init --bare/--shared overrides system/global config
ok 20 - init honors global core.sharedRepository
ok 21 - init allows insanely long --template
ok 22 - init creates a new directory
ok 23 - init creates a new bare directory
ok 24 - init recreates a directory
ok 25 - init recreates a new bare directory
ok 26 - init creates a new deep directory
ok 27 - init creates a new deep directory (umask vs. shared)
ok 28 - init notices EEXIST (1)
ok 29 - init notices EEXIST (2)
ok 30 - init notices EPERM
ok 31 - init creates a new bare directory with global --bare
ok 32 - init prefers command line to GIT_DIR
ok 33 - init with separate gitdir
ok 34 - init in long base path
ok 35 # skip init in long restricted base path (missing GETCWD_IGNORES_PERMS)
ok 36 - re-init on .git file
ok 37 - re-init to update git link
ok 38 - re-init to move gitdir
ok 39 - re-init to move gitdir symlink
ok 40 # skip .git hidden (missing MINGW)
ok 41 # skip bare git dir not hidden (missing MINGW)
ok 42 - remote init from does not use config from cwd
ok 43 - re-init from a linked worktree
ok 44 # skip redirect std handles (missing MINGW)
# passed all 44 test(s)
1..44
*** t0002-gitfile.sh ***
ok 1 - initial setup
ok 2 - bad setup: invalid .git file format
ok 3 - bad setup: invalid .git file path
ok 4 - final setup + check rev-parse --git-dir
ok 5 - check hash-object
ok 6 - check cat-file
ok 7 - check update-index
ok 8 - check write-tree
ok 9 - check commit-tree
ok 10 - check rev-list
ok 11 - setup_git_dir twice in subdir
ok 12 - enter_repo non-strict mode
ok 13 - enter_repo linked checkout
ok 14 - enter_repo strict mode
# passed all 14 test(s)
1..14
*** t0003-attributes.sh ***
ok 1 - open-quoted pathname
ok 2 - setup
ok 3 - command line checks
ok 4 - attribute test
ok 5 - attribute matching is case sensitive when core.ignorecase=0
ok 6 - attribute matching is case insensitive when core.ignorecase=1
ok 7 # skip additional case insensitivity tests (missing CASE_INSENSITIVE_FS)
ok 8 - unnormalized paths
ok 9 - relative paths
ok 10 - prefixes are not confused with leading directories
ok 11 - core.attributesfile
ok 12 - attribute test: read paths from stdin
ok 13 - attribute test: --all option
ok 14 - attribute test: --cached option
ok 15 - root subdir attribute test
ok 16 - negative patterns
ok 17 - patterns starting with exclamation
ok 18 - "**" test
ok 19 - "**" with no slashes test
ok 20 - using --git-dir and --work-tree
ok 21 - setup bare
ok 22 - bare repository: check that .gitattribute is ignored
ok 23 - bare repository: check that --cached honors index
ok 24 - bare repository: test info/attributes
# passed all 24 test(s)
1..24
*** t0004-unwritable.sh ***
ok 1 - setup
ok 2 - write-tree should notice unwritable repository
ok 3 - commit should notice unwritable repository
ok 4 - update-index should notice unwritable repository
ok 5 - add should notice unwritable repository
# passed all 5 test(s)
1..5
*** t0005-signals.sh ***
ok 1 - sigchain works
ok 2 - signals are propagated using shell convention
ok 3 - create blob
ok 4 - a constipated git dies with SIGPIPE
ok 5 - a constipated git dies with SIGPIPE even if parent ignores it
# passed all 5 test(s)
1..5
*** t0006-date.sh ***
ok 1 - relative date (5 seconds ago)
ok 2 - relative date (5 minutes ago)
ok 3 - relative date (5 hours ago)
ok 4 - relative date (5 days ago)
ok 5 - relative date (3 weeks ago)
ok 6 - relative date (5 months ago)
ok 7 - relative date (1 year, 2 months ago)
ok 8 - relative date (1 year, 9 months ago)
ok 9 - relative date (20 years ago)
ok 10 - relative date (12 months ago)
ok 11 - relative date (2 years ago)
ok 12 - show date (iso8601:1466000000 +0200)
ok 13 - show date (iso8601-strict:1466000000 +0200)
ok 14 - show date (rfc2822:1466000000 +0200)
ok 15 - show date (short:1466000000 +0200)
ok 16 - show date (default:1466000000 +0200)
ok 17 - show date (raw:1466000000 +0200)
ok 18 - show date (unix:1466000000 +0200)
ok 19 - show date (iso-local:1466000000 +0200)
ok 20 - show date (raw-local:1466000000 +0200)
ok 21 - show date (unix-local:1466000000 +0200)
ok 22 - show date (format:%z:1466000000 +0200)
ok 23 - show date (format-local:%z:1466000000 +0200)
ok 24 - show date (format:%Z:1466000000 +0200)
ok 25 - show date (format-local:%Z:1466000000 +0200)
ok 26 - show date (format:%%z:1466000000 +0200)
ok 27 - show date (format-local:%%z:1466000000 +0200)
ok 28 - show date (format:%Y-%m-%d %H:%M:%S:1466000000 +0200)
ok 29 - show date (format-local:%Y-%m-%d %H:%M:%S:1466000000 +0200)
ok 30 - show date (iso:5758122296 -0400)
ok 31 - show date (iso-local:5758122296 -0400)
ok 32 - parse date (2008)
ok 33 - parse date (2008-02)
ok 34 - parse date (2008-02-14)
ok 35 - parse date (2008-02-14 20:30:45)
ok 36 - parse date (2008-02-14 20:30:45 -0500)
ok 37 - parse date (2008-02-14 20:30:45 -0015)
ok 38 - parse date (2008-02-14 20:30:45 -5)
ok 39 - parse date (2008-02-14 20:30:45 -5:)
ok 40 - parse date (2008-02-14 20:30:45 -05)
ok 41 - parse date (2008-02-14 20:30:45 -:30)
ok 42 - parse date (2008-02-14 20:30:45 -05:00)
ok 43 - parse date (2008-02-14 20:30:45 TZ=EST5)
ok 44 - parse approxidate (now)
ok 45 - parse approxidate (5 seconds ago)
ok 46 - parse approxidate (5.seconds.ago)
ok 47 - parse approxidate (10.minutes.ago)
ok 48 - parse approxidate (yesterday)
ok 49 - parse approxidate (3.days.ago)
ok 50 - parse approxidate (3.weeks.ago)
ok 51 - parse approxidate (3.months.ago)
ok 52 - parse approxidate (2.years.3.months.ago)
ok 53 - parse approxidate (6am yesterday)
ok 54 - parse approxidate (6pm yesterday)
ok 55 - parse approxidate (3:00)
ok 56 - parse approxidate (15:00)
ok 57 - parse approxidate (noon today)
ok 58 - parse approxidate (noon yesterday)
ok 59 - parse approxidate (last tuesday)
ok 60 - parse approxidate (July 5th)
ok 61 - parse approxidate (06/05/2009)
ok 62 - parse approxidate (06.05.2009)
ok 63 - parse approxidate (Jun 6, 5AM)
ok 64 - parse approxidate (5AM Jun 6)
ok 65 - parse approxidate (6AM, June 7, 2009)
ok 66 - parse approxidate (2008-12-01)
ok 67 - parse approxidate (2009-12-01)
# passed all 67 test(s)
1..67
*** t0007-git-var.sh ***
ok 1 - get GIT_AUTHOR_IDENT
ok 2 - get GIT_COMMITTER_IDENT
ok 3 - requested identites are strict
ok 4 - git var -l lists variables
ok 5 - git var -l lists config
ok 6 - listing and asking for variables are exclusive
# passed all 6 test(s)
1..6
*** t0008-ignores.sh ***
ok 1 - setup
ok 2 - . corner-case
ok 3 - . corner-case with -q
ok 4 - . corner-case with --quiet
ok 5 - . corner-case with -v
ok 6 - . corner-case with -v -n
ok 7 - . corner-case with -v --non-matching
ok 8 - . corner-case with --verbose
ok 9 - . corner-case with --verbose -n
ok 10 - . corner-case with --verbose --non-matching
ok 11 - empty command line
ok 12 - empty command line with -q
ok 13 - empty command line with --quiet
ok 14 - empty command line with -v
ok 15 - empty command line with -v -n
ok 16 - empty command line with -v --non-matching
ok 17 - empty command line with --verbose
ok 18 - empty command line with --verbose -n
ok 19 - empty command line with --verbose --non-matching
ok 20 - --stdin with empty STDIN
ok 21 - --stdin with empty STDIN with -q
ok 22 - --stdin with empty STDIN with --quiet
ok 23 - --stdin with empty STDIN with -v
ok 24 - --stdin with empty STDIN with -v -n
ok 25 - --stdin with empty STDIN with -v --non-matching
ok 26 - --stdin with empty STDIN with --verbose
ok 27 - --stdin with empty STDIN with --verbose -n
ok 28 - --stdin with empty STDIN with --verbose --non-matching
ok 29 - -q with multiple args
ok 30 - --quiet with multiple args
ok 31 - -q -v
ok 32 - --quiet -v
ok 33 - -q --verbose
ok 34 - --quiet --verbose
ok 35 - --quiet with multiple args
ok 36 - erroneous use of --
ok 37 - erroneous use of -- with -q
ok 38 - erroneous use of -- with --quiet
ok 39 - erroneous use of -- with -v
ok 40 - erroneous use of -- with -v -n
ok 41 - erroneous use of -- with -v --non-matching
ok 42 - erroneous use of -- with --verbose
ok 43 - erroneous use of -- with --verbose -n
ok 44 - erroneous use of -- with --verbose --non-matching
ok 45 - --stdin with superfluous arg
ok 46 - --stdin with superfluous arg with -q
ok 47 - --stdin with superfluous arg with --quiet
ok 48 - --stdin with superfluous arg with -v
ok 49 - --stdin with superfluous arg with -v -n
ok 50 - --stdin with superfluous arg with -v --non-matching
ok 51 - --stdin with superfluous arg with --verbose
ok 52 - --stdin with superfluous arg with --verbose -n
ok 53 - --stdin with superfluous arg with --verbose --non-matching
ok 54 - --stdin -z with superfluous arg
ok 55 - --stdin -z with superfluous arg with -q
ok 56 - --stdin -z with superfluous arg with --quiet
ok 57 - --stdin -z with superfluous arg with -v
ok 58 - --stdin -z with superfluous arg with -v -n
ok 59 - --stdin -z with superfluous arg with -v --non-matching
ok 60 - --stdin -z with superfluous arg with --verbose
ok 61 - --stdin -z with superfluous arg with --verbose -n
ok 62 - --stdin -z with superfluous arg with --verbose --non-matching
ok 63 - -z without --stdin
ok 64 - -z without --stdin with -q
ok 65 - -z without --stdin with --quiet
ok 66 - -z without --stdin with -v
ok 67 - -z without --stdin with -v -n
ok 68 - -z without --stdin with -v --non-matching
ok 69 - -z without --stdin with --verbose
ok 70 - -z without --stdin with --verbose -n
ok 71 - -z without --stdin with --verbose --non-matching
ok 72 - -z without --stdin and superfluous arg
ok 73 - -z without --stdin and superfluous arg with -q
ok 74 - -z without --stdin and superfluous arg with --quiet
ok 75 - -z without --stdin and superfluous arg with -v
ok 76 - -z without --stdin and superfluous arg with -v -n
ok 77 - -z without --stdin and superfluous arg with -v --non-matching
ok 78 - -z without --stdin and superfluous arg with --verbose
ok 79 - -z without --stdin and superfluous arg with --verbose -n
ok 80 - -z without --stdin and superfluous arg with --verbose --non-matching
ok 81 - needs work tree
ok 82 - needs work tree with -q
ok 83 - needs work tree with --quiet
ok 84 - needs work tree with -v
ok 85 - needs work tree with -v -n
ok 86 - needs work tree with -v --non-matching
ok 87 - needs work tree with --verbose
ok 88 - needs work tree with --verbose -n
ok 89 - needs work tree with --verbose --non-matching
ok 90 - non-existent file at top-level not ignored
ok 91 - non-existent file at top-level not ignored with -q
ok 92 - non-existent file at top-level not ignored with --quiet
ok 93 - non-existent file at top-level not ignored with -v
ok 94 - non-existent file at top-level not ignored with -v -n
ok 95 - non-existent file at top-level not ignored with -v --non-matching
ok 96 - non-existent file at top-level not ignored with --verbose
ok 97 - non-existent file at top-level not ignored with --verbose -n
ok 98 - non-existent file at top-level not ignored with --verbose --non-matching
ok 99 - non-existent file at top-level not ignored with --no-index
ok 100 - non-existent file at top-level not ignored with --no-index -q
ok 101 - non-existent file at top-level not ignored with --no-index --quiet
ok 102 - non-existent file at top-level not ignored with --no-index -v
ok 103 - non-existent file at top-level not ignored with --no-index -v -n
ok 104 - non-existent file at top-level not ignored with --no-index -v --non-matching
ok 105 - non-existent file at top-level not ignored with --no-index --verbose
ok 106 - non-existent file at top-level not ignored with --no-index --verbose -n
ok 107 - non-existent file at top-level not ignored with --no-index --verbose --non-matching
ok 108 - non-existent file at top-level ignored
ok 109 - non-existent file at top-level ignored with -q
ok 110 - non-existent file at top-level ignored with --quiet
ok 111 - non-existent file at top-level ignored with -v
ok 112 - non-existent file at top-level ignored with -v -n
ok 113 - non-existent file at top-level ignored with -v --non-matching
ok 114 - non-existent file at top-level ignored with --verbose
ok 115 - non-existent file at top-level ignored with --verbose -n
ok 116 - non-existent file at top-level ignored with --verbose --non-matching
ok 117 - non-existent file at top-level ignored with --no-index
ok 118 - non-existent file at top-level ignored with --no-index -q
ok 119 - non-existent file at top-level ignored with --no-index --quiet
ok 120 - non-existent file at top-level ignored with --no-index -v
ok 121 - non-existent file at top-level ignored with --no-index -v -n
ok 122 - non-existent file at top-level ignored with --no-index -v --non-matching
ok 123 - non-existent file at top-level ignored with --no-index --verbose
ok 124 - non-existent file at top-level ignored with --no-index --verbose -n
ok 125 - non-existent file at top-level ignored with --no-index --verbose --non-matching
ok 126 - existing untracked file at top-level not ignored
ok 127 - existing untracked file at top-level not ignored with -q
ok 128 - existing untracked file at top-level not ignored with --quiet
ok 129 - existing untracked file at top-level not ignored with -v
ok 130 - existing untracked file at top-level not ignored with -v -n
ok 131 - existing untracked file at top-level not ignored with -v --non-matching
ok 132 - existing untracked file at top-level not ignored with --verbose
ok 133 - existing untracked file at top-level not ignored with --verbose -n
ok 134 - existing untracked file at top-level not ignored with --verbose --non-matching
ok 135 - existing untracked file at top-level not ignored with --no-index
ok 136 - existing untracked file at top-level not ignored with --no-index -q
ok 137 - existing untracked file at top-level not ignored with --no-index --quiet
ok 138 - existing untracked file at top-level not ignored with --no-index -v
ok 139 - existing untracked file at top-level not ignored with --no-index -v -n
ok 140 - existing untracked file at top-level not ignored with --no-index -v --non-matching
ok 141 - existing untracked file at top-level not ignored with --no-index --verbose
ok 142 - existing untracked file at top-level not ignored with --no-index --verbose -n
ok 143 - existing untracked file at top-level not ignored with --no-index --verbose --non-matching
ok 144 - existing tracked file at top-level not ignored
ok 145 - existing tracked file at top-level not ignored with -q
ok 146 - existing tracked file at top-level not ignored with --quiet
ok 147 - existing tracked file at top-level not ignored with -v
ok 148 - existing tracked file at top-level not ignored with -v -n
ok 149 - existing tracked file at top-level not ignored with -v --non-matching
ok 150 - existing tracked file at top-level not ignored with --verbose
ok 151 - existing tracked file at top-level not ignored with --verbose -n
ok 152 - existing tracked file at top-level not ignored with --verbose --non-matching
ok 153 - existing tracked file at top-level shown as ignored with --no-index
ok 154 - existing tracked file at top-level shown as ignored with --no-index -q
ok 155 - existing tracked file at top-level shown as ignored with --no-index --quiet
ok 156 - existing tracked file at top-level shown as ignored with --no-index -v
ok 157 - existing tracked file at top-level shown as ignored with --no-index -v -n
ok 158 - existing tracked file at top-level shown as ignored with --no-index -v --non-matching
ok 159 - existing tracked file at top-level shown as ignored with --no-index --verbose
ok 160 - existing tracked file at top-level shown as ignored with --no-index --verbose -n
ok 161 - existing tracked file at top-level shown as ignored with --no-index --verbose --non-matching
ok 162 - existing untracked file at top-level ignored
ok 163 - existing untracked file at top-level ignored with -q
ok 164 - existing untracked file at top-level ignored with --quiet
ok 165 - existing untracked file at top-level ignored with -v
ok 166 - existing untracked file at top-level ignored with -v -n
ok 167 - existing untracked file at top-level ignored with -v --non-matching
ok 168 - existing untracked file at top-level ignored with --verbose
ok 169 - existing untracked file at top-level ignored with --verbose -n
ok 170 - existing untracked file at top-level ignored with --verbose --non-matching
ok 171 - existing untracked file at top-level ignored with --no-index
ok 172 - existing untracked file at top-level ignored with --no-index -q
ok 173 - existing untracked file at top-level ignored with --no-index --quiet
ok 174 - existing untracked file at top-level ignored with --no-index -v
ok 175 - existing untracked file at top-level ignored with --no-index -v -n
ok 176 - existing untracked file at top-level ignored with --no-index -v --non-matching
ok 177 - existing untracked file at top-level ignored with --no-index --verbose
ok 178 - existing untracked file at top-level ignored with --no-index --verbose -n
ok 179 - existing untracked file at top-level ignored with --no-index --verbose --non-matching
ok 180 - mix of file types at top-level
ok 181 - mix of file types at top-level with -v
ok 182 - mix of file types at top-level with -v -n
ok 183 - mix of file types at top-level with -v --non-matching
ok 184 - mix of file types at top-level with --verbose
ok 185 - mix of file types at top-level with --verbose -n
ok 186 - mix of file types at top-level with --verbose --non-matching
ok 187 - mix of file types at top-level with --no-index
ok 188 - mix of file types at top-level with --no-index -v
ok 189 - mix of file types at top-level with --no-index -v -n
ok 190 - mix of file types at top-level with --no-index -v --non-matching
ok 191 - mix of file types at top-level with --no-index --verbose
ok 192 - mix of file types at top-level with --no-index --verbose -n
ok 193 - mix of file types at top-level with --no-index --verbose --non-matching
ok 194 - non-existent file in subdir a/ not ignored
ok 195 - non-existent file in subdir a/ not ignored with -q
ok 196 - non-existent file in subdir a/ not ignored with --quiet
ok 197 - non-existent file in subdir a/ not ignored with -v
ok 198 - non-existent file in subdir a/ not ignored with -v -n
ok 199 - non-existent file in subdir a/ not ignored with -v --non-matching
ok 200 - non-existent file in subdir a/ not ignored with --verbose
ok 201 - non-existent file in subdir a/ not ignored with --verbose -n
ok 202 - non-existent file in subdir a/ not ignored with --verbose --non-matching
ok 203 - non-existent file in subdir a/ not ignored with --no-index
ok 204 - non-existent file in subdir a/ not ignored with --no-index -q
ok 205 - non-existent file in subdir a/ not ignored with --no-index --quiet
ok 206 - non-existent file in subdir a/ not ignored with --no-index -v
ok 207 - non-existent file in subdir a/ not ignored with --no-index -v -n
ok 208 - non-existent file in subdir a/ not ignored with --no-index -v --non-matching
ok 209 - non-existent file in subdir a/ not ignored with --no-index --verbose
ok 210 - non-existent file in subdir a/ not ignored with --no-index --verbose -n
ok 211 - non-existent file in subdir a/ not ignored with --no-index --verbose --non-matching
ok 212 - non-existent file in subdir a/ ignored
ok 213 - non-existent file in subdir a/ ignored with -q
ok 214 - non-existent file in subdir a/ ignored with --quiet
ok 215 - non-existent file in subdir a/ ignored with -v
ok 216 - non-existent file in subdir a/ ignored with -v -n
ok 217 - non-existent file in subdir a/ ignored with -v --non-matching
ok 218 - non-existent file in subdir a/ ignored with --verbose
ok 219 - non-existent file in subdir a/ ignored with --verbose -n
ok 220 - non-existent file in subdir a/ ignored with --verbose --non-matching
ok 221 - non-existent file in subdir a/ ignored with --no-index
ok 222 - non-existent file in subdir a/ ignored with --no-index -q
ok 223 - non-existent file in subdir a/ ignored with --no-index --quiet
ok 224 - non-existent file in subdir a/ ignored with --no-index -v
ok 225 - non-existent file in subdir a/ ignored with --no-index -v -n
ok 226 - non-existent file in subdir a/ ignored with --no-index -v --non-matching
ok 227 - non-existent file in subdir a/ ignored with --no-index --verbose
ok 228 - non-existent file in subdir a/ ignored with --no-index --verbose -n
ok 229 - non-existent file in subdir a/ ignored with --no-index --verbose --non-matching
ok 230 - existing untracked file in subdir a/ not ignored
ok 231 - existing untracked file in subdir a/ not ignored with -q
ok 232 - existing untracked file in subdir a/ not ignored with --quiet
ok 233 - existing untracked file in subdir a/ not ignored with -v
ok 234 - existing untracked file in subdir a/ not ignored with -v -n
ok 235 - existing untracked file in subdir a/ not ignored with -v --non-matching
ok 236 - existing untracked file in subdir a/ not ignored with --verbose
ok 237 - existing untracked file in subdir a/ not ignored with --verbose -n
ok 238 - existing untracked file in subdir a/ not ignored with --verbose --non-matching
ok 239 - existing untracked file in subdir a/ not ignored with --no-index
ok 240 - existing untracked file in subdir a/ not ignored with --no-index -q
ok 241 - existing untracked file in subdir a/ not ignored with --no-index --quiet
ok 242 - existing untracked file in subdir a/ not ignored with --no-index -v
ok 243 - existing untracked file in subdir a/ not ignored with --no-index -v -n
ok 244 - existing untracked file in subdir a/ not ignored with --no-index -v --non-matching
ok 245 - existing untracked file in subdir a/ not ignored with --no-index --verbose
ok 246 - existing untracked file in subdir a/ not ignored with --no-index --verbose -n
ok 247 - existing untracked file in subdir a/ not ignored with --no-index --verbose --non-matching
ok 248 - existing tracked file in subdir a/ not ignored
ok 249 - existing tracked file in subdir a/ not ignored with -q
ok 250 - existing tracked file in subdir a/ not ignored with --quiet
ok 251 - existing tracked file in subdir a/ not ignored with -v
ok 252 - existing tracked file in subdir a/ not ignored with -v -n
ok 253 - existing tracked file in subdir a/ not ignored with -v --non-matching
ok 254 - existing tracked file in subdir a/ not ignored with --verbose
ok 255 - existing tracked file in subdir a/ not ignored with --verbose -n
ok 256 - existing tracked file in subdir a/ not ignored with --verbose --non-matching
ok 257 - existing tracked file in subdir a/ shown as ignored with --no-index
ok 258 - existing tracked file in subdir a/ shown as ignored with --no-index -q
ok 259 - existing tracked file in subdir a/ shown as ignored with --no-index --quiet
ok 260 - existing tracked file in subdir a/ shown as ignored with --no-index -v
ok 261 - existing tracked file in subdir a/ shown as ignored with --no-index -v -n
ok 262 - existing tracked file in subdir a/ shown as ignored with --no-index -v --non-matching
ok 263 - existing tracked file in subdir a/ shown as ignored with --no-index --verbose
ok 264 - existing tracked file in subdir a/ shown as ignored with --no-index --verbose -n
ok 265 - existing tracked file in subdir a/ shown as ignored with --no-index --verbose --non-matching
ok 266 - existing untracked file in subdir a/ ignored
ok 267 - existing untracked file in subdir a/ ignored with -q
ok 268 - existing untracked file in subdir a/ ignored with --quiet
ok 269 - existing untracked file in subdir a/ ignored with -v
ok 270 - existing untracked file in subdir a/ ignored with -v -n
ok 271 - existing untracked file in subdir a/ ignored with -v --non-matching
ok 272 - existing untracked file in subdir a/ ignored with --verbose
ok 273 - existing untracked file in subdir a/ ignored with --verbose -n
ok 274 - existing untracked file in subdir a/ ignored with --verbose --non-matching
ok 275 - existing untracked file in subdir a/ ignored with --no-index
ok 276 - existing untracked file in subdir a/ ignored with --no-index -q
ok 277 - existing untracked file in subdir a/ ignored with --no-index --quiet
ok 278 - existing untracked file in subdir a/ ignored with --no-index -v
ok 279 - existing untracked file in subdir a/ ignored with --no-index -v -n
ok 280 - existing untracked file in subdir a/ ignored with --no-index -v --non-matching
ok 281 - existing untracked file in subdir a/ ignored with --no-index --verbose
ok 282 - existing untracked file in subdir a/ ignored with --no-index --verbose -n
ok 283 - existing untracked file in subdir a/ ignored with --no-index --verbose --non-matching
ok 284 - mix of file types in subdir a/
ok 285 - mix of file types in subdir a/ with -v
ok 286 - mix of file types in subdir a/ with -v -n
ok 287 - mix of file types in subdir a/ with -v --non-matching
ok 288 - mix of file types in subdir a/ with --verbose
ok 289 - mix of file types in subdir a/ with --verbose -n
ok 290 - mix of file types in subdir a/ with --verbose --non-matching
ok 291 - mix of file types in subdir a/ with --no-index
ok 292 - mix of file types in subdir a/ with --no-index -v
ok 293 - mix of file types in subdir a/ with --no-index -v -n
ok 294 - mix of file types in subdir a/ with --no-index -v --non-matching
ok 295 - mix of file types in subdir a/ with --no-index --verbose
ok 296 - mix of file types in subdir a/ with --no-index --verbose -n
ok 297 - mix of file types in subdir a/ with --no-index --verbose --non-matching
ok 298 - sub-directory local ignore
ok 299 - sub-directory local ignore with --verbose
ok 300 - local ignore inside a sub-directory
ok 301 - local ignore inside a sub-directory with --verbose
ok 302 - nested include
ok 303 - nested include with -q
ok 304 - nested include with --quiet
ok 305 - nested include with -v
ok 306 - nested include with -v -n
ok 307 - nested include with -v --non-matching
ok 308 - nested include with --verbose
ok 309 - nested include with --verbose -n
ok 310 - nested include with --verbose --non-matching
ok 311 - ignored sub-directory
ok 312 - ignored sub-directory with -q
ok 313 - ignored sub-directory with --quiet
ok 314 - ignored sub-directory with -v
ok 315 - ignored sub-directory with -v -n
ok 316 - ignored sub-directory with -v --non-matching
ok 317 - ignored sub-directory with --verbose
ok 318 - ignored sub-directory with --verbose -n
ok 319 - ignored sub-directory with --verbose --non-matching
ok 320 - multiple files inside ignored sub-directory
ok 321 - multiple files inside ignored sub-directory with -v
ok 322 - cd to ignored sub-directory
ok 323 - cd to ignored sub-directory with -v
ok 324 - symlink
ok 325 - symlink with -q
ok 326 - symlink with --quiet
ok 327 - symlink with -v
ok 328 - symlink with -v -n
ok 329 - symlink with -v --non-matching
ok 330 - symlink with --verbose
ok 331 - symlink with --verbose -n
ok 332 - symlink with --verbose --non-matching
ok 333 - beyond a symlink
ok 334 - beyond a symlink with -q
ok 335 - beyond a symlink with --quiet
ok 336 - beyond a symlink with -v
ok 337 - beyond a symlink with -v -n
ok 338 - beyond a symlink with -v --non-matching
ok 339 - beyond a symlink with --verbose
ok 340 - beyond a symlink with --verbose -n
ok 341 - beyond a symlink with --verbose --non-matching
ok 342 - beyond a symlink from subdirectory
ok 343 - beyond a symlink from subdirectory with -q
ok 344 - beyond a symlink from subdirectory with --quiet
ok 345 - beyond a symlink from subdirectory with -v
ok 346 - beyond a symlink from subdirectory with -v -n
ok 347 - beyond a symlink from subdirectory with -v --non-matching
ok 348 - beyond a symlink from subdirectory with --verbose
ok 349 - beyond a symlink from subdirectory with --verbose -n
ok 350 - beyond a symlink from subdirectory with --verbose --non-matching
ok 351 - submodule
ok 352 - submodule with -q
ok 353 - submodule with --quiet
ok 354 - submodule with -v
ok 355 - submodule with -v -n
ok 356 - submodule with -v --non-matching
ok 357 - submodule with --verbose
ok 358 - submodule with --verbose -n
ok 359 - submodule with --verbose --non-matching
ok 360 - submodule from subdirectory
ok 361 - submodule from subdirectory with -q
ok 362 - submodule from subdirectory with --quiet
ok 363 - submodule from subdirectory with -v
ok 364 - submodule from subdirectory with -v -n
ok 365 - submodule from subdirectory with -v --non-matching
ok 366 - submodule from subdirectory with --verbose
ok 367 - submodule from subdirectory with --verbose -n
ok 368 - submodule from subdirectory with --verbose --non-matching
ok 369 - global ignore not yet enabled
ok 370 - global ignore
ok 371 - global ignore with -v
ok 372 - --stdin
ok 373 - --stdin -q
ok 374 - --stdin -v
ok 375 - --stdin -z
ok 376 - --stdin -z -q
ok 377 - --stdin -z -v
ok 378 - -z --stdin
ok 379 - -z --stdin -q
ok 380 - -z --stdin -v
ok 381 - --stdin from subdirectory
ok 382 - --stdin from subdirectory with -v
ok 383 - --stdin from subdirectory with -v -n
ok 384 - --stdin -z from subdirectory
ok 385 - --stdin -z from subdirectory with -v
ok 386 - -z --stdin from subdirectory
ok 387 - -z --stdin from subdirectory with -v
ok 388 - streaming support for --stdin
ok 389 - existing file and directory
ok 390 - existing directory and file
ok 391 - trailing whitespace is ignored
ok 392 - quoting allows trailing whitespace
ok 393 - correct handling of backslashes
ok 394 - info/exclude trumps core.excludesfile
# passed all 394 test(s)
1..394
*** t0009-prio-queue.sh ***
ok 1 - basic ordering
ok 2 - mixed put and get
ok 3 - notice empty queue
# passed all 3 test(s)
1..3
*** t0010-racy-git.sh ***
ok 1 - Racy GIT trial #0 part A
ok 2 - Racy GIT trial #0 part B
ok 3 - Racy GIT trial #1 part A
ok 4 - Racy GIT trial #1 part B
ok 5 - Racy GIT trial #2 part A
ok 6 - Racy GIT trial #2 part B
ok 7 - Racy GIT trial #3 part A
ok 8 - Racy GIT trial #3 part B
ok 9 - Racy GIT trial #4 part A
ok 10 - Racy GIT trial #4 part B
# passed all 10 test(s)
1..10
*** t0011-hashmap.sh ***
ok 1 - hash functions
ok 2 - put
ok 3 - put (case insensitive)
ok 4 - replace
ok 5 - replace (case insensitive)
ok 6 - get
ok 7 - get (case insensitive)
ok 8 - add
ok 9 - add (case insensitive)
ok 10 - remove
ok 11 - remove (case insensitive)
ok 12 - iterate
ok 13 - iterate (case insensitive)
ok 14 - grow / shrink
ok 15 - string interning
# passed all 15 test(s)
1..15
*** t0012-help.sh ***
ok 1 - setup
ok 2 - basic help commands
ok 3 - works for commands and guides by default
ok 4 - --exclude-guides does not work for guides
ok 5 - --help does not work for guides
ok 6 - git help
ok 7 - git help -g
ok 8 - generate builtin list
ok 9 - add can handle -h
ok 10 - am can handle -h
ok 11 - annotate can handle -h
ok 12 - apply can handle -h
ok 13 - archive can handle -h
ok 14 - bisect--helper can handle -h
ok 15 - blame can handle -h
ok 16 - branch can handle -h
ok 17 - bundle can handle -h
ok 18 - cat-file can handle -h
ok 19 - check-attr can handle -h
ok 20 - check-ignore can handle -h
ok 21 - check-mailmap can handle -h
ok 22 - check-ref-format can handle -h
ok 23 - checkout can handle -h
ok 24 - checkout-index can handle -h
ok 25 - cherry can handle -h
ok 26 - cherry-pick can handle -h
ok 27 - clean can handle -h
ok 28 - clone can handle -h
ok 29 - column can handle -h
ok 30 - commit can handle -h
ok 31 - commit-graph can handle -h
ok 32 - commit-tree can handle -h
ok 33 - config can handle -h
ok 34 - count-objects can handle -h
ok 35 - credential can handle -h
ok 36 - describe can handle -h
ok 37 - diff can handle -h
ok 38 - diff-files can handle -h
ok 39 - diff-index can handle -h
ok 40 - diff-tree can handle -h
ok 41 - difftool can handle -h
ok 42 - fast-export can handle -h
ok 43 - fetch can handle -h
ok 44 - fetch-pack can handle -h
ok 45 - fmt-merge-msg can handle -h
ok 46 - for-each-ref can handle -h
ok 47 - format-patch can handle -h
ok 48 - fsck can handle -h
ok 49 - fsck-objects can handle -h
ok 50 - gc can handle -h
ok 51 - get-tar-commit-id can handle -h
ok 52 - grep can handle -h
ok 53 - hash-object can handle -h
ok 54 - help can handle -h
ok 55 - index-pack can handle -h
ok 56 - init can handle -h
ok 57 - init-db can handle -h
ok 58 - interpret-trailers can handle -h
ok 59 - log can handle -h
ok 60 - ls-files can handle -h
ok 61 - ls-remote can handle -h
ok 62 - ls-tree can handle -h
ok 63 - mailinfo can handle -h
ok 64 - mailsplit can handle -h
ok 65 - merge can handle -h
ok 66 - merge-base can handle -h
ok 67 - merge-file can handle -h
ok 68 - merge-index can handle -h
ok 69 - merge-ours can handle -h
ok 70 - merge-recursive can handle -h
ok 71 - merge-recursive-ours can handle -h
ok 72 - merge-recursive-theirs can handle -h
ok 73 - merge-subtree can handle -h
ok 74 - merge-tree can handle -h
ok 75 - mktag can handle -h
ok 76 - mktree can handle -h
ok 77 - mv can handle -h
ok 78 - name-rev can handle -h
ok 79 - notes can handle -h
ok 80 - pack-objects can handle -h
ok 81 - pack-redundant can handle -h
ok 82 - pack-refs can handle -h
ok 83 - patch-id can handle -h
ok 84 - pickaxe can handle -h
ok 85 - prune can handle -h
ok 86 - prune-packed can handle -h
ok 87 - pull can handle -h
ok 88 - push can handle -h
ok 89 - range-diff can handle -h
ok 90 - read-tree can handle -h
ok 91 - rebase--helper can handle -h
ok 92 - receive-pack can handle -h
ok 93 - reflog can handle -h
ok 94 - remote can handle -h
ok 95 - remote-ext can handle -h
ok 96 - remote-fd can handle -h
ok 97 - repack can handle -h
ok 98 - replace can handle -h
ok 99 - rerere can handle -h
ok 100 - reset can handle -h
ok 101 - rev-list can handle -h
ok 102 - rev-parse can handle -h
ok 103 - revert can handle -h
ok 104 - rm can handle -h
ok 105 - send-pack can handle -h
ok 106 - serve can handle -h
ok 107 - shortlog can handle -h
ok 108 - show can handle -h
ok 109 - show-branch can handle -h
ok 110 - show-index can handle -h
ok 111 - show-ref can handle -h
ok 112 - stage can handle -h
ok 113 - status can handle -h
ok 114 - stripspace can handle -h
ok 115 - submodule--helper can handle -h
ok 116 - symbolic-ref can handle -h
ok 117 - tag can handle -h
ok 118 - unpack-file can handle -h
ok 119 - unpack-objects can handle -h
ok 120 - update-index can handle -h
ok 121 - update-ref can handle -h
ok 122 - update-server-info can handle -h
ok 123 - upload-archive can handle -h
ok 124 - upload-archive--writer can handle -h
ok 125 - upload-pack can handle -h
ok 126 - var can handle -h
ok 127 - verify-commit can handle -h
ok 128 - verify-pack can handle -h
ok 129 - verify-tag can handle -h
ok 130 - version can handle -h
ok 131 - whatchanged can handle -h
ok 132 - worktree can handle -h
ok 133 - write-tree can handle -h
# passed all 133 test(s)
1..133
*** t0013-sha1dc.sh ***
ok 1 - test-sha1 detects shattered pdf
# passed all 1 test(s)
1..1
*** t0019-json-writer.sh ***
ok 1 - unit test of json-writer routines
ok 2 - trivial object
ok 3 - trivial array
ok 4 - simple object
ok 5 - simple array
ok 6 - escape quoting string
ok 7 - escape quoting string 2
ok 8 - nested inline object
ok 9 - nested inline array
ok 10 - nested inline object and array
ok 11 - nested inline object and array 2
ok 12 - pretty nested inline object and array 2
ok 13 - inline object with no members
ok 14 - inline array with no members
ok 15 - larger empty example
ok 16 # skip parse JSON using Perl (missing PERLJSON)
# passed all 16 test(s)
1..16
*** t0020-crlf.sh ***
ok 1 - setup
ok 2 - safecrlf: autocrlf=input, all CRLF
ok 3 - safecrlf: autocrlf=input, mixed LF/CRLF
ok 4 - safecrlf: autocrlf=true, all LF
ok 5 - safecrlf: autocrlf=true mixed LF/CRLF
ok 6 - safecrlf: print warning only once
ok 7 - safecrlf: git diff demotes safecrlf=true to warn
ok 8 - safecrlf: no warning with safecrlf=false
ok 9 - switch off autocrlf, safecrlf, reset HEAD
ok 10 - update with autocrlf=input
ok 11 - update with autocrlf=true
ok 12 - checkout with autocrlf=true
ok 13 - checkout with autocrlf=input
ok 14 - apply patch (autocrlf=input)
ok 15 - apply patch --cached (autocrlf=input)
ok 16 - apply patch --index (autocrlf=input)
ok 17 - apply patch (autocrlf=true)
ok 18 - apply patch --cached (autocrlf=true)
ok 19 - apply patch --index (autocrlf=true)
ok 20 - .gitattributes says two is binary
ok 21 - .gitattributes says two is input
ok 22 - .gitattributes says two and three are text
ok 23 - in-tree .gitattributes (1)
ok 24 - in-tree .gitattributes (2)
ok 25 - in-tree .gitattributes (3)
ok 26 - in-tree .gitattributes (4)
ok 27 - checkout with existing .gitattributes
ok 28 - checkout when deleting .gitattributes
ok 29 - invalid .gitattributes (must not crash)
ok 30 - setting up for new autocrlf tests
ok 31 - report no change after setting autocrlf
ok 32 - files are clean after checkout
ok 33 - LF only file gets CRLF with autocrlf
ok 34 - Mixed file is still mixed with autocrlf
ok 35 - CRLF only file has CRLF with autocrlf
ok 36 - New CRLF file gets LF in repo
# passed all 36 test(s)
1..36
*** t0021-conversion.sh ***
ok 1 - setup
ok 2 - check
ok 3 - expanded_in_repo
ok 4 - filter shell-escaped filenames
ok 5 - required filter should filter data
ok 6 - required filter smudge failure
ok 7 - required filter clean failure
ok 8 - filtering large input to small output should use little memory
ok 9 - filter that does not read is fine
ok 10 # skip filter large file (missing EXPENSIVE)
ok 11 - filter: clean empty file
ok 12 - filter: smudge empty file
ok 13 - disable filter with empty override
ok 14 - diff does not reuse worktree files that need cleaning
ok 15 - required process filter should filter data
ok 16 - required process filter takes precedence
ok 17 - required process filter should be used only for "clean" operation only
ok 18 - required process filter should process multiple packets
ok 19 - required process filter with clean error should fail
ok 20 - process filter should restart after unexpected write failure
ok 21 - process filter should not be restarted if it signals an error
ok 22 - process filter abort stops processing of all further files
ok 23 - invalid process filter must fail (and not hang!)
ok 24 - delayed checkout in process filter
ok 25 - missing file in delayed checkout
ok 26 - invalid file in delayed checkout
# passed all 26 test(s)
1..26
*** t0022-crlf-rename.sh ***
ok 1 - setup
ok 2 - diff -M
# passed all 2 test(s)
1..2
*** t0023-crlf-am.sh ***
ok 1 - setup
ok 2 - am
# passed all 2 test(s)
1..2
*** t0024-crlf-archive.sh ***
ok 1 - setup
ok 2 - tar archive
ok 3 - zip archive
# passed all 3 test(s)
1..3
*** t0025-crlf-renormalize.sh ***
ok 1 - setup
ok 2 - renormalize CRLF in repo
# passed all 2 test(s)
1..2
*** t0026-eol-config.sh ***
ok 1 - setup
ok 2 - eol=lf puts LFs in normalized file
ok 3 - eol=crlf puts CRLFs in normalized file
ok 4 - autocrlf=true overrides eol=lf
ok 5 - autocrlf=true overrides unset eol
ok 6 # skip eol native is crlf (missing NATIVE_CRLF)
# passed all 6 test(s)
1..6
*** t0027-auto-crlf.sh ***
ok 1 - ls-files --eol -o Text/Binary
ok 2 - setup master
ok 3 - commit files empty attr
ok 4 - commit files attr=auto
ok 5 - commit files attr=text
ok 6 - commit files attr=-text
ok 7 - commit files attr=lf
ok 8 - commit files attr=crlf
ok 9 - commit file with mixed EOL onto LF crlf=false attr=
ok 10 - commit file with mixed EOL onto CLRF attr= aeol= crlf=false
ok 11 - commit file with mixed EOL onto CRLF_mix_LF attr= aeol= crlf=false
ok 12 - commit file with mixed EOL onto LF_mix_cr attr= aeol= crlf=false 
ok 13 - commit file with mixed EOL onto CRLF_nul attr= aeol= crlf=false
ok 14 - commit file with mixed EOL onto LF crlf=true attr=
ok 15 - commit file with mixed EOL onto CLRF attr= aeol= crlf=true
ok 16 - commit file with mixed EOL onto CRLF_mix_LF attr= aeol= crlf=true
ok 17 - commit file with mixed EOL onto LF_mix_cr attr= aeol= crlf=true 
ok 18 - commit file with mixed EOL onto CRLF_nul attr= aeol= crlf=true
ok 19 - commit file with mixed EOL onto LF crlf=input attr=
ok 20 - commit file with mixed EOL onto CLRF attr= aeol= crlf=input
ok 21 - commit file with mixed EOL onto CRLF_mix_LF attr= aeol= crlf=input
ok 22 - commit file with mixed EOL onto LF_mix_cr attr= aeol= crlf=input 
ok 23 - commit file with mixed EOL onto CRLF_nul attr= aeol= crlf=input
ok 24 - commit file with mixed EOL onto LF crlf=false attr=auto
ok 25 - commit file with mixed EOL onto CLRF attr=auto aeol= crlf=false
ok 26 - commit file with mixed EOL onto CRLF_mix_LF attr=auto aeol= crlf=false
ok 27 - commit file with mixed EOL onto LF_mix_cr attr=auto aeol= crlf=false 
ok 28 - commit file with mixed EOL onto CRLF_nul attr=auto aeol= crlf=false
ok 29 - commit file with mixed EOL onto LF crlf=true attr=auto
ok 30 - commit file with mixed EOL onto CLRF attr=auto aeol= crlf=true
ok 31 - commit file with mixed EOL onto CRLF_mix_LF attr=auto aeol= crlf=true
ok 32 - commit file with mixed EOL onto LF_mix_cr attr=auto aeol= crlf=true 
ok 33 - commit file with mixed EOL onto CRLF_nul attr=auto aeol= crlf=true
ok 34 - commit file with mixed EOL onto LF crlf=input attr=auto
ok 35 - commit file with mixed EOL onto CLRF attr=auto aeol= crlf=input
ok 36 - commit file with mixed EOL onto CRLF_mix_LF attr=auto aeol= crlf=input
ok 37 - commit file with mixed EOL onto LF_mix_cr attr=auto aeol= crlf=input 
ok 38 - commit file with mixed EOL onto CRLF_nul attr=auto aeol= crlf=input
ok 39 - commit NNO files crlf=false attr= LF
ok 40 - commit NNO files attr= aeol= crlf=false CRLF
ok 41 - commit NNO files attr= aeol= crlf=false CRLF_mix_LF
ok 42 - commit NNO files attr= aeol= crlf=false LF_mix_cr
ok 43 - commit NNO files attr= aeol= crlf=false CRLF_nul
ok 44 - commit NNO files crlf=true attr= LF
ok 45 - commit NNO files attr= aeol= crlf=true CRLF
ok 46 - commit NNO files attr= aeol= crlf=true CRLF_mix_LF
ok 47 - commit NNO files attr= aeol= crlf=true LF_mix_cr
ok 48 - commit NNO files attr= aeol= crlf=true CRLF_nul
ok 49 - commit NNO files crlf=input attr= LF
ok 50 - commit NNO files attr= aeol= crlf=input CRLF
ok 51 - commit NNO files attr= aeol= crlf=input CRLF_mix_LF
ok 52 - commit NNO files attr= aeol= crlf=input LF_mix_cr
ok 53 - commit NNO files attr= aeol= crlf=input CRLF_nul
ok 54 - commit NNO files crlf=false attr=auto LF
ok 55 - commit NNO files attr=auto aeol= crlf=false CRLF
ok 56 - commit NNO files attr=auto aeol= crlf=false CRLF_mix_LF
ok 57 - commit NNO files attr=auto aeol= crlf=false LF_mix_cr
ok 58 - commit NNO files attr=auto aeol= crlf=false CRLF_nul
ok 59 - commit NNO files crlf=true attr=auto LF
ok 60 - commit NNO files attr=auto aeol= crlf=true CRLF
ok 61 - commit NNO files attr=auto aeol= crlf=true CRLF_mix_LF
ok 62 - commit NNO files attr=auto aeol= crlf=true LF_mix_cr
ok 63 - commit NNO files attr=auto aeol= crlf=true CRLF_nul
ok 64 - commit NNO files crlf=input attr=auto LF
ok 65 - commit NNO files attr=auto aeol= crlf=input CRLF
ok 66 - commit NNO files attr=auto aeol= crlf=input CRLF_mix_LF
ok 67 - commit NNO files attr=auto aeol= crlf=input LF_mix_cr
ok 68 - commit NNO files attr=auto aeol= crlf=input CRLF_nul
ok 69 - commit NNO files crlf=true attr=-text LF
ok 70 - commit NNO files attr=-text aeol= crlf=true CRLF
ok 71 - commit NNO files attr=-text aeol= crlf=true CRLF_mix_LF
ok 72 - commit NNO files attr=-text aeol= crlf=true LF_mix_cr
ok 73 - commit NNO files attr=-text aeol= crlf=true CRLF_nul
ok 74 - commit NNO files crlf=true attr=-text LF
ok 75 - commit NNO files attr=-text aeol=lf crlf=true CRLF
ok 76 - commit NNO files attr=-text aeol=lf crlf=true CRLF_mix_LF
ok 77 - commit NNO files attr=-text aeol=lf crlf=true LF_mix_cr
ok 78 - commit NNO files attr=-text aeol=lf crlf=true CRLF_nul
ok 79 - commit NNO files crlf=true attr=-text LF
ok 80 - commit NNO files attr=-text aeol=crlf crlf=true CRLF
ok 81 - commit NNO files attr=-text aeol=crlf crlf=true CRLF_mix_LF
ok 82 - commit NNO files attr=-text aeol=crlf crlf=true LF_mix_cr
ok 83 - commit NNO files attr=-text aeol=crlf crlf=true CRLF_nul
ok 84 - commit NNO files crlf=true attr= LF
ok 85 - commit NNO files attr= aeol=lf crlf=true CRLF
ok 86 - commit NNO files attr= aeol=lf crlf=true CRLF_mix_LF
ok 87 - commit NNO files attr= aeol=lf crlf=true LF_mix_cr
ok 88 - commit NNO files attr= aeol=lf crlf=true CRLF_nul
ok 89 - commit NNO files crlf=true attr= LF
ok 90 - commit NNO files attr= aeol=crlf crlf=true CRLF
ok 91 - commit NNO files attr= aeol=crlf crlf=true CRLF_mix_LF
ok 92 - commit NNO files attr= aeol=crlf crlf=true LF_mix_cr
ok 93 - commit NNO files attr= aeol=crlf crlf=true CRLF_nul
ok 94 - commit NNO files crlf=true attr=auto LF
ok 95 - commit NNO files attr=auto aeol=lf crlf=true CRLF
ok 96 - commit NNO files attr=auto aeol=lf crlf=true CRLF_mix_LF
ok 97 - commit NNO files attr=auto aeol=lf crlf=true LF_mix_cr
ok 98 - commit NNO files attr=auto aeol=lf crlf=true CRLF_nul
ok 99 - commit NNO files crlf=true attr=auto LF
ok 100 - commit NNO files attr=auto aeol=crlf crlf=true CRLF
ok 101 - commit NNO files attr=auto aeol=crlf crlf=true CRLF_mix_LF
ok 102 - commit NNO files attr=auto aeol=crlf crlf=true LF_mix_cr
ok 103 - commit NNO files attr=auto aeol=crlf crlf=true CRLF_nul
ok 104 - commit NNO files crlf=true attr=text LF
ok 105 - commit NNO files attr=text aeol=lf crlf=true CRLF
ok 106 - commit NNO files attr=text aeol=lf crlf=true CRLF_mix_LF
ok 107 - commit NNO files attr=text aeol=lf crlf=true LF_mix_cr
ok 108 - commit NNO files attr=text aeol=lf crlf=true CRLF_nul
ok 109 - commit NNO files crlf=true attr=text LF
ok 110 - commit NNO files attr=text aeol=crlf crlf=true CRLF
ok 111 - commit NNO files attr=text aeol=crlf crlf=true CRLF_mix_LF
ok 112 - commit NNO files attr=text aeol=crlf crlf=true LF_mix_cr
ok 113 - commit NNO files attr=text aeol=crlf crlf=true CRLF_nul
ok 114 - commit NNO files crlf=false attr=-text LF
ok 115 - commit NNO files attr=-text aeol= crlf=false CRLF
ok 116 - commit NNO files attr=-text aeol= crlf=false CRLF_mix_LF
ok 117 - commit NNO files attr=-text aeol= crlf=false LF_mix_cr
ok 118 - commit NNO files attr=-text aeol= crlf=false CRLF_nul
ok 119 - commit NNO files crlf=false attr=-text LF
ok 120 - commit NNO files attr=-text aeol=lf crlf=false CRLF
ok 121 - commit NNO files attr=-text aeol=lf crlf=false CRLF_mix_LF
ok 122 - commit NNO files attr=-text aeol=lf crlf=false LF_mix_cr
ok 123 - commit NNO files attr=-text aeol=lf crlf=false CRLF_nul
ok 124 - commit NNO files crlf=false attr=-text LF
ok 125 - commit NNO files attr=-text aeol=crlf crlf=false CRLF
ok 126 - commit NNO files attr=-text aeol=crlf crlf=false CRLF_mix_LF
ok 127 - commit NNO files attr=-text aeol=crlf crlf=false LF_mix_cr
ok 128 - commit NNO files attr=-text aeol=crlf crlf=false CRLF_nul
ok 129 - commit NNO files crlf=false attr= LF
ok 130 - commit NNO files attr= aeol=lf crlf=false CRLF
ok 131 - commit NNO files attr= aeol=lf crlf=false CRLF_mix_LF
ok 132 - commit NNO files attr= aeol=lf crlf=false LF_mix_cr
ok 133 - commit NNO files attr= aeol=lf crlf=false CRLF_nul
ok 134 - commit NNO files crlf=false attr= LF
ok 135 - commit NNO files attr= aeol=crlf crlf=false CRLF
ok 136 - commit NNO files attr= aeol=crlf crlf=false CRLF_mix_LF
ok 137 - commit NNO files attr= aeol=crlf crlf=false LF_mix_cr
ok 138 - commit NNO files attr= aeol=crlf crlf=false CRLF_nul
ok 139 - commit NNO files crlf=false attr=auto LF
ok 140 - commit NNO files attr=auto aeol=lf crlf=false CRLF
ok 141 - commit NNO files attr=auto aeol=lf crlf=false CRLF_mix_LF
ok 142 - commit NNO files attr=auto aeol=lf crlf=false LF_mix_cr
ok 143 - commit NNO files attr=auto aeol=lf crlf=false CRLF_nul
ok 144 - commit NNO files crlf=false attr=auto LF
ok 145 - commit NNO files attr=auto aeol=crlf crlf=false CRLF
ok 146 - commit NNO files attr=auto aeol=crlf crlf=false CRLF_mix_LF
ok 147 - commit NNO files attr=auto aeol=crlf crlf=false LF_mix_cr
ok 148 - commit NNO files attr=auto aeol=crlf crlf=false CRLF_nul
ok 149 - commit NNO files crlf=false attr=text LF
ok 150 - commit NNO files attr=text aeol=lf crlf=false CRLF
ok 151 - commit NNO files attr=text aeol=lf crlf=false CRLF_mix_LF
ok 152 - commit NNO files attr=text aeol=lf crlf=false LF_mix_cr
ok 153 - commit NNO files attr=text aeol=lf crlf=false CRLF_nul
ok 154 - commit NNO files crlf=false attr=text LF
ok 155 - commit NNO files attr=text aeol=crlf crlf=false CRLF
ok 156 - commit NNO files attr=text aeol=crlf crlf=false CRLF_mix_LF
ok 157 - commit NNO files attr=text aeol=crlf crlf=false LF_mix_cr
ok 158 - commit NNO files attr=text aeol=crlf crlf=false CRLF_nul
ok 159 - commit NNO files crlf=input attr=-text LF
ok 160 - commit NNO files attr=-text aeol= crlf=input CRLF
ok 161 - commit NNO files attr=-text aeol= crlf=input CRLF_mix_LF
ok 162 - commit NNO files attr=-text aeol= crlf=input LF_mix_cr
ok 163 - commit NNO files attr=-text aeol= crlf=input CRLF_nul
ok 164 - commit NNO files crlf=input attr=-text LF
ok 165 - commit NNO files attr=-text aeol=lf crlf=input CRLF
ok 166 - commit NNO files attr=-text aeol=lf crlf=input CRLF_mix_LF
ok 167 - commit NNO files attr=-text aeol=lf crlf=input LF_mix_cr
ok 168 - commit NNO files attr=-text aeol=lf crlf=input CRLF_nul
ok 169 - commit NNO files crlf=input attr=-text LF
ok 170 - commit NNO files attr=-text aeol=crlf crlf=input CRLF
ok 171 - commit NNO files attr=-text aeol=crlf crlf=input CRLF_mix_LF
ok 172 - commit NNO files attr=-text aeol=crlf crlf=input LF_mix_cr
ok 173 - commit NNO files attr=-text aeol=crlf crlf=input CRLF_nul
ok 174 - commit NNO files crlf=input attr= LF
ok 175 - commit NNO files attr= aeol=lf crlf=input CRLF
ok 176 - commit NNO files attr= aeol=lf crlf=input CRLF_mix_LF
ok 177 - commit NNO files attr= aeol=lf crlf=input LF_mix_cr
ok 178 - commit NNO files attr= aeol=lf crlf=input CRLF_nul
ok 179 - commit NNO files crlf=input attr= LF
ok 180 - commit NNO files attr= aeol=crlf crlf=input CRLF
ok 181 - commit NNO files attr= aeol=crlf crlf=input CRLF_mix_LF
ok 182 - commit NNO files attr= aeol=crlf crlf=input LF_mix_cr
ok 183 - commit NNO files attr= aeol=crlf crlf=input CRLF_nul
ok 184 - commit NNO files crlf=input attr=auto LF
ok 185 - commit NNO files attr=auto aeol=lf crlf=input CRLF
ok 186 - commit NNO files attr=auto aeol=lf crlf=input CRLF_mix_LF
ok 187 - commit NNO files attr=auto aeol=lf crlf=input LF_mix_cr
ok 188 - commit NNO files attr=auto aeol=lf crlf=input CRLF_nul
ok 189 - commit NNO files crlf=input attr=auto LF
ok 190 - commit NNO files attr=auto aeol=crlf crlf=input CRLF
ok 191 - commit NNO files attr=auto aeol=crlf crlf=input CRLF_mix_LF
ok 192 - commit NNO files attr=auto aeol=crlf crlf=input LF_mix_cr
ok 193 - commit NNO files attr=auto aeol=crlf crlf=input CRLF_nul
ok 194 - commit NNO files crlf=input attr=text LF
ok 195 - commit NNO files attr=text aeol=lf crlf=input CRLF
ok 196 - commit NNO files attr=text aeol=lf crlf=input CRLF_mix_LF
ok 197 - commit NNO files attr=text aeol=lf crlf=input LF_mix_cr
ok 198 - commit NNO files attr=text aeol=lf crlf=input CRLF_nul
ok 199 - commit NNO files crlf=input attr=text LF
ok 200 - commit NNO files attr=text aeol=crlf crlf=input CRLF
ok 201 - commit NNO files attr=text aeol=crlf crlf=input CRLF_mix_LF
ok 202 - commit NNO files attr=text aeol=crlf crlf=input LF_mix_cr
ok 203 - commit NNO files attr=text aeol=crlf crlf=input CRLF_nul
ok 204 - commit NNO files crlf=false attr=text LF
ok 205 - commit NNO files attr=text aeol= crlf=false CRLF
ok 206 - commit NNO files attr=text aeol= crlf=false CRLF_mix_LF
ok 207 - commit NNO files attr=text aeol= crlf=false LF_mix_cr
ok 208 - commit NNO files attr=text aeol= crlf=false CRLF_nul
ok 209 - commit NNO files crlf=true attr=text LF
ok 210 - commit NNO files attr=text aeol= crlf=true CRLF
ok 211 - commit NNO files attr=text aeol= crlf=true CRLF_mix_LF
ok 212 - commit NNO files attr=text aeol= crlf=true LF_mix_cr
ok 213 - commit NNO files attr=text aeol= crlf=true CRLF_nul
ok 214 - commit NNO files crlf=input attr=text LF
ok 215 - commit NNO files attr=text aeol= crlf=input CRLF
ok 216 - commit NNO files attr=text aeol= crlf=input CRLF_mix_LF
ok 217 - commit NNO files attr=text aeol= crlf=input LF_mix_cr
ok 218 - commit NNO files attr=text aeol= crlf=input CRLF_nul
ok 219 - commit NNO and cleanup
ok 220 - commit empty gitattribues
ok 221 - commit text=auto
ok 222 - commit text
ok 223 - commit -text
ok 224 - compare_files LF NNO_attr__aeol__true_LF.txt
ok 225 - compare_files CRLF NNO_attr__aeol__true_CRLF.txt
ok 226 - compare_files CRLF_mix_LF NNO_attr__aeol__true_CRLF_mix_LF.txt
ok 227 - compare_files LF_mix_CR NNO_attr__aeol__true_LF_mix_CR.txt
ok 228 - compare_files CRLF_nul NNO_attr__aeol__true_CRLF_nul.txt
ok 229 - compare_files LF NNO_attr_-text_aeol__true_LF.txt
ok 230 - compare_files CRLF NNO_attr_-text_aeol__true_CRLF.txt
ok 231 - compare_files CRLF_mix_LF NNO_attr_-text_aeol__true_CRLF_mix_LF.txt
ok 232 - compare_files LF_mix_CR NNO_attr_-text_aeol__true_LF_mix_CR.txt
ok 233 - compare_files CRLF_nul NNO_attr_-text_aeol__true_CRLF_nul.txt
ok 234 - compare_files LF NNO_attr_-text_aeol_lf_true_LF.txt
ok 235 - compare_files CRLF NNO_attr_-text_aeol_lf_true_CRLF.txt
ok 236 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_lf_true_CRLF_mix_LF.txt
ok 237 - compare_files LF_mix_CR NNO_attr_-text_aeol_lf_true_LF_mix_CR.txt
ok 238 - compare_files CRLF_nul NNO_attr_-text_aeol_lf_true_CRLF_nul.txt
ok 239 - compare_files LF NNO_attr_-text_aeol_crlf_true_LF.txt
ok 240 - compare_files CRLF NNO_attr_-text_aeol_crlf_true_CRLF.txt
ok 241 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_crlf_true_CRLF_mix_LF.txt
ok 242 - compare_files LF_mix_CR NNO_attr_-text_aeol_crlf_true_LF_mix_CR.txt
ok 243 - compare_files CRLF_nul NNO_attr_-text_aeol_crlf_true_CRLF_nul.txt
ok 244 - compare_files LF NNO_attr_auto_aeol__true_LF.txt
ok 245 - compare_files CRLF NNO_attr_auto_aeol__true_CRLF.txt
ok 246 - compare_files CRLF_mix_LF NNO_attr_auto_aeol__true_CRLF_mix_LF.txt
ok 247 - compare_files LF_mix_CR NNO_attr_auto_aeol__true_LF_mix_CR.txt
ok 248 - compare_files CRLF_nul NNO_attr_auto_aeol__true_CRLF_nul.txt
ok 249 - compare_files LF NNO_attr_auto_aeol_lf_true_LF.txt
ok 250 - compare_files CRLF NNO_attr_auto_aeol_lf_true_CRLF.txt
ok 251 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_lf_true_CRLF_mix_LF.txt
ok 252 - compare_files LF_mix_CR NNO_attr_auto_aeol_lf_true_LF_mix_CR.txt
ok 253 - compare_files CRLF_nul NNO_attr_auto_aeol_lf_true_CRLF_nul.txt
ok 254 - compare_files LF NNO_attr_auto_aeol_crlf_true_LF.txt
ok 255 - compare_files CRLF NNO_attr_auto_aeol_crlf_true_CRLF.txt
ok 256 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_crlf_true_CRLF_mix_LF.txt
ok 257 - compare_files LF_mix_CR NNO_attr_auto_aeol_crlf_true_LF_mix_CR.txt
ok 258 - compare_files CRLF_nul NNO_attr_auto_aeol_crlf_true_CRLF_nul.txt
ok 259 - compare_files LF NNO_attr_text_aeol__true_LF.txt
ok 260 - compare_files LF NNO_attr_text_aeol__true_CRLF.txt
ok 261 - compare_files LF NNO_attr_text_aeol__true_CRLF_mix_LF.txt
ok 262 - compare_files LF_mix_CR NNO_attr_text_aeol__true_LF_mix_CR.txt
ok 263 - compare_files LF_nul NNO_attr_text_aeol__true_CRLF_nul.txt
ok 264 - compare_files LF NNO_attr_text_aeol_lf_true_LF.txt
ok 265 - compare_files LF NNO_attr_text_aeol_lf_true_CRLF.txt
ok 266 - compare_files LF NNO_attr_text_aeol_lf_true_CRLF_mix_LF.txt
ok 267 - compare_files LF_mix_CR NNO_attr_text_aeol_lf_true_LF_mix_CR.txt
ok 268 - compare_files LF_nul NNO_attr_text_aeol_lf_true_CRLF_nul.txt
ok 269 - compare_files LF NNO_attr_text_aeol_crlf_true_LF.txt
ok 270 - compare_files LF NNO_attr_text_aeol_crlf_true_CRLF.txt
ok 271 - compare_files LF NNO_attr_text_aeol_crlf_true_CRLF_mix_LF.txt
ok 272 - compare_files LF_mix_CR NNO_attr_text_aeol_crlf_true_LF_mix_CR.txt
ok 273 - compare_files LF_nul NNO_attr_text_aeol_crlf_true_CRLF_nul.txt
ok 274 - compare_files LF NNO_attr__aeol__false_LF.txt
ok 275 - compare_files CRLF NNO_attr__aeol__false_CRLF.txt
ok 276 - compare_files CRLF_mix_LF NNO_attr__aeol__false_CRLF_mix_LF.txt
ok 277 - compare_files LF_mix_CR NNO_attr__aeol__false_LF_mix_CR.txt
ok 278 - compare_files CRLF_nul NNO_attr__aeol__false_CRLF_nul.txt
ok 279 - compare_files LF NNO_attr_-text_aeol__false_LF.txt
ok 280 - compare_files CRLF NNO_attr_-text_aeol__false_CRLF.txt
ok 281 - compare_files CRLF_mix_LF NNO_attr_-text_aeol__false_CRLF_mix_LF.txt
ok 282 - compare_files LF_mix_CR NNO_attr_-text_aeol__false_LF_mix_CR.txt
ok 283 - compare_files CRLF_nul NNO_attr_-text_aeol__false_CRLF_nul.txt
ok 284 - compare_files LF NNO_attr_-text_aeol_lf_false_LF.txt
ok 285 - compare_files CRLF NNO_attr_-text_aeol_lf_false_CRLF.txt
ok 286 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_lf_false_CRLF_mix_LF.txt
ok 287 - compare_files LF_mix_CR NNO_attr_-text_aeol_lf_false_LF_mix_CR.txt
ok 288 - compare_files CRLF_nul NNO_attr_-text_aeol_lf_false_CRLF_nul.txt
ok 289 - compare_files LF NNO_attr_-text_aeol_crlf_false_LF.txt
ok 290 - compare_files CRLF NNO_attr_-text_aeol_crlf_false_CRLF.txt
ok 291 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_crlf_false_CRLF_mix_LF.txt
ok 292 - compare_files LF_mix_CR NNO_attr_-text_aeol_crlf_false_LF_mix_CR.txt
ok 293 - compare_files CRLF_nul NNO_attr_-text_aeol_crlf_false_CRLF_nul.txt
ok 294 - compare_files LF NNO_attr_auto_aeol__false_LF.txt
ok 295 - compare_files CRLF NNO_attr_auto_aeol__false_CRLF.txt
ok 296 - compare_files CRLF_mix_LF NNO_attr_auto_aeol__false_CRLF_mix_LF.txt
ok 297 - compare_files LF_mix_CR NNO_attr_auto_aeol__false_LF_mix_CR.txt
ok 298 - compare_files CRLF_nul NNO_attr_auto_aeol__false_CRLF_nul.txt
ok 299 - compare_files LF NNO_attr_auto_aeol_lf_false_LF.txt
ok 300 - compare_files CRLF NNO_attr_auto_aeol_lf_false_CRLF.txt
ok 301 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_lf_false_CRLF_mix_LF.txt
ok 302 - compare_files LF_mix_CR NNO_attr_auto_aeol_lf_false_LF_mix_CR.txt
ok 303 - compare_files CRLF_nul NNO_attr_auto_aeol_lf_false_CRLF_nul.txt
ok 304 - compare_files LF NNO_attr_auto_aeol_crlf_false_LF.txt
ok 305 - compare_files CRLF NNO_attr_auto_aeol_crlf_false_CRLF.txt
ok 306 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_crlf_false_CRLF_mix_LF.txt
ok 307 - compare_files LF_mix_CR NNO_attr_auto_aeol_crlf_false_LF_mix_CR.txt
ok 308 - compare_files CRLF_nul NNO_attr_auto_aeol_crlf_false_CRLF_nul.txt
ok 309 - compare_files LF NNO_attr_text_aeol__false_LF.txt
ok 310 - compare_files LF NNO_attr_text_aeol__false_CRLF.txt
ok 311 - compare_files LF NNO_attr_text_aeol__false_CRLF_mix_LF.txt
ok 312 - compare_files LF_mix_CR NNO_attr_text_aeol__false_LF_mix_CR.txt
ok 313 - compare_files LF_nul NNO_attr_text_aeol__false_CRLF_nul.txt
ok 314 - compare_files LF NNO_attr_text_aeol_lf_false_LF.txt
ok 315 - compare_files LF NNO_attr_text_aeol_lf_false_CRLF.txt
ok 316 - compare_files LF NNO_attr_text_aeol_lf_false_CRLF_mix_LF.txt
ok 317 - compare_files LF_mix_CR NNO_attr_text_aeol_lf_false_LF_mix_CR.txt
ok 318 - compare_files LF_nul NNO_attr_text_aeol_lf_false_CRLF_nul.txt
ok 319 - compare_files LF NNO_attr_text_aeol_crlf_false_LF.txt
ok 320 - compare_files LF NNO_attr_text_aeol_crlf_false_CRLF.txt
ok 321 - compare_files LF NNO_attr_text_aeol_crlf_false_CRLF_mix_LF.txt
ok 322 - compare_files LF_mix_CR NNO_attr_text_aeol_crlf_false_LF_mix_CR.txt
ok 323 - compare_files LF_nul NNO_attr_text_aeol_crlf_false_CRLF_nul.txt
ok 324 - compare_files LF NNO_attr__aeol__input_LF.txt
ok 325 - compare_files CRLF NNO_attr__aeol__input_CRLF.txt
ok 326 - compare_files CRLF_mix_LF NNO_attr__aeol__input_CRLF_mix_LF.txt
ok 327 - compare_files LF_mix_CR NNO_attr__aeol__input_LF_mix_CR.txt
ok 328 - compare_files CRLF_nul NNO_attr__aeol__input_CRLF_nul.txt
ok 329 - compare_files LF NNO_attr_-text_aeol__input_LF.txt
ok 330 - compare_files CRLF NNO_attr_-text_aeol__input_CRLF.txt
ok 331 - compare_files CRLF_mix_LF NNO_attr_-text_aeol__input_CRLF_mix_LF.txt
ok 332 - compare_files LF_mix_CR NNO_attr_-text_aeol__input_LF_mix_CR.txt
ok 333 - compare_files CRLF_nul NNO_attr_-text_aeol__input_CRLF_nul.txt
ok 334 - compare_files LF NNO_attr_-text_aeol_lf_input_LF.txt
ok 335 - compare_files CRLF NNO_attr_-text_aeol_lf_input_CRLF.txt
ok 336 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_lf_input_CRLF_mix_LF.txt
ok 337 - compare_files LF_mix_CR NNO_attr_-text_aeol_lf_input_LF_mix_CR.txt
ok 338 - compare_files CRLF_nul NNO_attr_-text_aeol_lf_input_CRLF_nul.txt
ok 339 - compare_files LF NNO_attr_-text_aeol_crlf_input_LF.txt
ok 340 - compare_files CRLF NNO_attr_-text_aeol_crlf_input_CRLF.txt
ok 341 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_crlf_input_CRLF_mix_LF.txt
ok 342 - compare_files LF_mix_CR NNO_attr_-text_aeol_crlf_input_LF_mix_CR.txt
ok 343 - compare_files CRLF_nul NNO_attr_-text_aeol_crlf_input_CRLF_nul.txt
ok 344 - compare_files LF NNO_attr_auto_aeol__input_LF.txt
ok 345 - compare_files CRLF NNO_attr_auto_aeol__input_CRLF.txt
ok 346 - compare_files CRLF_mix_LF NNO_attr_auto_aeol__input_CRLF_mix_LF.txt
ok 347 - compare_files LF_mix_CR NNO_attr_auto_aeol__input_LF_mix_CR.txt
ok 348 - compare_files CRLF_nul NNO_attr_auto_aeol__input_CRLF_nul.txt
ok 349 - compare_files LF NNO_attr_auto_aeol_lf_input_LF.txt
ok 350 - compare_files CRLF NNO_attr_auto_aeol_lf_input_CRLF.txt
ok 351 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_lf_input_CRLF_mix_LF.txt
ok 352 - compare_files LF_mix_CR NNO_attr_auto_aeol_lf_input_LF_mix_CR.txt
ok 353 - compare_files CRLF_nul NNO_attr_auto_aeol_lf_input_CRLF_nul.txt
ok 354 - compare_files LF NNO_attr_auto_aeol_crlf_input_LF.txt
ok 355 - compare_files CRLF NNO_attr_auto_aeol_crlf_input_CRLF.txt
ok 356 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_crlf_input_CRLF_mix_LF.txt
ok 357 - compare_files LF_mix_CR NNO_attr_auto_aeol_crlf_input_LF_mix_CR.txt
ok 358 - compare_files CRLF_nul NNO_attr_auto_aeol_crlf_input_CRLF_nul.txt
ok 359 - compare_files LF NNO_attr_text_aeol__input_LF.txt
ok 360 - compare_files LF NNO_attr_text_aeol__input_CRLF.txt
ok 361 - compare_files LF NNO_attr_text_aeol__input_CRLF_mix_LF.txt
ok 362 - compare_files LF_mix_CR NNO_attr_text_aeol__input_LF_mix_CR.txt
ok 363 - compare_files LF_nul NNO_attr_text_aeol__input_CRLF_nul.txt
ok 364 - compare_files LF NNO_attr_text_aeol_lf_input_LF.txt
ok 365 - compare_files LF NNO_attr_text_aeol_lf_input_CRLF.txt
ok 366 - compare_files LF NNO_attr_text_aeol_lf_input_CRLF_mix_LF.txt
ok 367 - compare_files LF_mix_CR NNO_attr_text_aeol_lf_input_LF_mix_CR.txt
ok 368 - compare_files LF_nul NNO_attr_text_aeol_lf_input_CRLF_nul.txt
ok 369 - compare_files LF NNO_attr_text_aeol_crlf_input_LF.txt
ok 370 - compare_files LF NNO_attr_text_aeol_crlf_input_CRLF.txt
ok 371 - compare_files LF NNO_attr_text_aeol_crlf_input_CRLF_mix_LF.txt
ok 372 - compare_files LF_mix_CR NNO_attr_text_aeol_crlf_input_LF_mix_CR.txt
ok 373 - compare_files LF_nul NNO_attr_text_aeol_crlf_input_CRLF_nul.txt
ok 374 - ls-files --eol attr=-text  aeol= core.autocrlf=true core.eol=lf
ok 375 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=LF
ok 376 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 377 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 378 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 379 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 380 - ls-files --eol attr=-text  aeol=lf core.autocrlf=true core.eol=lf
ok 381 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 382 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 383 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 384 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 385 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 386 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=true core.eol=lf
ok 387 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 388 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 389 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 390 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 391 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 392 - ls-files --eol attr=text  aeol=lf core.autocrlf=true core.eol=lf
ok 393 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 394 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 395 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 396 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 397 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 398 - ls-files --eol attr=text  aeol=crlf core.autocrlf=true core.eol=lf
ok 399 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 400 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 401 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 402 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 403 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 404 - ls-files --eol attr=auto  aeol=lf core.autocrlf=true core.eol=lf
ok 405 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 406 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 407 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 408 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 409 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 410 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=true core.eol=lf
ok 411 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 412 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 413 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 414 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 415 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 416 - ls-files --eol attr=-text  aeol= core.autocrlf=false core.eol=lf
ok 417 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=LF
ok 418 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 419 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 420 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 421 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 422 - ls-files --eol attr=-text  aeol=lf core.autocrlf=false core.eol=lf
ok 423 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 424 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 425 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 426 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 427 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 428 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=false core.eol=lf
ok 429 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 430 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 431 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 432 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 433 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 434 - ls-files --eol attr=text  aeol=lf core.autocrlf=false core.eol=lf
ok 435 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 436 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 437 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 438 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 439 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 440 - ls-files --eol attr=text  aeol=crlf core.autocrlf=false core.eol=lf
ok 441 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 442 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 443 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 444 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 445 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 446 - ls-files --eol attr=auto  aeol=lf core.autocrlf=false core.eol=lf
ok 447 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 448 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 449 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 450 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 451 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 452 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=false core.eol=lf
ok 453 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 454 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 455 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 456 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 457 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 458 - ls-files --eol attr=-text  aeol= core.autocrlf=input core.eol=lf
ok 459 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=LF
ok 460 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 461 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 462 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 463 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 464 - ls-files --eol attr=-text  aeol=lf core.autocrlf=input core.eol=lf
ok 465 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 466 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 467 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 468 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 469 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 470 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=input core.eol=lf
ok 471 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 472 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 473 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 474 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 475 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
ok 476 - ls-files --eol attr=text  aeol=lf core.autocrlf=input core.eol=lf
ok 477 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 478 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 479 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 480 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 481 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 482 - ls-files --eol attr=text  aeol=crlf core.autocrlf=input core.eol=lf
ok 483 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 484 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 485 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 486 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 487 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
ok 488 - ls-files --eol attr=auto  aeol=lf core.autocrlf=input core.eol=lf
ok 489 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 490 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 491 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 492 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 493 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 494 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=input core.eol=lf
ok 495 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 496 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 497 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 498 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 499 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
ok 500 - ls-files --eol attr=  aeol= core.autocrlf=false core.eol=lf
ok 501 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=LF
ok 502 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 503 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 504 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 505 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 506 - ls-files --eol attr=  aeol= core.autocrlf=true core.eol=lf
ok 507 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=LF
ok 508 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 509 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 510 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 511 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 512 - ls-files --eol attr=auto  aeol= core.autocrlf=true core.eol=lf
ok 513 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=LF
ok 514 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 515 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 516 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 517 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 518 - ls-files --eol attr=text  aeol= core.autocrlf=true core.eol=lf
ok 519 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=LF
ok 520 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 521 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 522 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 523 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 524 - ls-files --eol attr=text  aeol= core.autocrlf=input core.eol=lf
ok 525 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=LF
ok 526 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 527 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 528 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 529 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 530 - ls-files --eol attr=auto  aeol= core.autocrlf=input core.eol=lf
ok 531 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=LF
ok 532 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 533 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 534 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 535 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 536 - ls-files --eol attr=-text  aeol= core.autocrlf=true core.eol=crlf
ok 537 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=LF
ok 538 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 539 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 540 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 541 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 542 - ls-files --eol attr=-text  aeol=lf core.autocrlf=true core.eol=crlf
ok 543 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 544 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 545 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 546 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 547 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 548 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf
ok 549 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 550 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 551 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 552 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 553 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 554 - ls-files --eol attr=text  aeol=lf core.autocrlf=true core.eol=crlf
ok 555 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 556 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 557 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 558 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 559 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 560 - ls-files --eol attr=text  aeol=crlf core.autocrlf=true core.eol=crlf
ok 561 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 562 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 563 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 564 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 565 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 566 - ls-files --eol attr=auto  aeol=lf core.autocrlf=true core.eol=crlf
ok 567 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 568 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 569 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 570 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 571 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 572 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf
ok 573 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 574 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 575 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 576 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 577 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 578 - ls-files --eol attr=-text  aeol= core.autocrlf=false core.eol=crlf
ok 579 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=LF
ok 580 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 581 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 582 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 583 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 584 - ls-files --eol attr=-text  aeol=lf core.autocrlf=false core.eol=crlf
ok 585 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 586 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 587 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 588 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 589 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 590 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf
ok 591 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 592 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 593 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 594 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 595 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 596 - ls-files --eol attr=text  aeol=lf core.autocrlf=false core.eol=crlf
ok 597 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 598 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 599 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 600 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 601 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 602 - ls-files --eol attr=text  aeol=crlf core.autocrlf=false core.eol=crlf
ok 603 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 604 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 605 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 606 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 607 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 608 - ls-files --eol attr=auto  aeol=lf core.autocrlf=false core.eol=crlf
ok 609 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 610 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 611 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 612 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 613 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 614 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf
ok 615 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 616 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 617 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 618 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 619 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 620 - ls-files --eol attr=-text  aeol= core.autocrlf=input core.eol=crlf
ok 621 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=LF
ok 622 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 623 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 624 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 625 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 626 - ls-files --eol attr=-text  aeol=lf core.autocrlf=input core.eol=crlf
ok 627 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 628 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 629 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 630 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 631 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 632 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf
ok 633 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 634 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 635 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 636 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 637 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 638 - ls-files --eol attr=text  aeol=lf core.autocrlf=input core.eol=crlf
ok 639 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 640 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 641 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 642 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 643 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 644 - ls-files --eol attr=text  aeol=crlf core.autocrlf=input core.eol=crlf
ok 645 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 646 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 647 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 648 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 649 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 650 - ls-files --eol attr=auto  aeol=lf core.autocrlf=input core.eol=crlf
ok 651 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 652 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 653 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 654 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 655 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 656 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf
ok 657 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 658 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 659 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 660 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 661 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 662 - ls-files --eol attr=  aeol= core.autocrlf=false core.eol=crlf
ok 663 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=LF
ok 664 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 665 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 666 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 667 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 668 - ls-files --eol attr=  aeol= core.autocrlf=true core.eol=crlf
ok 669 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=LF
ok 670 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 671 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 672 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 673 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 674 - ls-files --eol attr=auto  aeol= core.autocrlf=true core.eol=crlf
ok 675 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=LF
ok 676 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 677 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 678 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 679 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 680 - ls-files --eol attr=text  aeol= core.autocrlf=true core.eol=crlf
ok 681 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=LF
ok 682 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 683 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 684 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 685 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 686 - ls-files --eol attr=text  aeol= core.autocrlf=input core.eol=crlf
ok 687 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=LF
ok 688 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 689 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 690 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 691 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 692 - ls-files --eol attr=auto  aeol= core.autocrlf=input core.eol=crlf
ok 693 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=LF
ok 694 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 695 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 696 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 697 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 698 - ls-files --eol attr=-text  aeol= core.autocrlf=true core.eol=native
ok 699 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=LF
ok 700 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=CRLF
ok 701 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 702 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 703 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 704 - ls-files --eol attr=-text  aeol=lf core.autocrlf=true core.eol=native
ok 705 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=LF
ok 706 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 707 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 708 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 709 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 710 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=true core.eol=native
ok 711 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 712 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 713 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 714 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 715 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 716 - ls-files --eol attr=text  aeol=lf core.autocrlf=true core.eol=native
ok 717 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=LF
ok 718 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 719 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 720 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 721 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 722 - ls-files --eol attr=text  aeol=crlf core.autocrlf=true core.eol=native
ok 723 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 724 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 725 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 726 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 727 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 728 - ls-files --eol attr=auto  aeol=lf core.autocrlf=true core.eol=native
ok 729 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=LF
ok 730 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 731 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 732 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 733 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 734 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=true core.eol=native
ok 735 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 736 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 737 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 738 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 739 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 740 - ls-files --eol attr=-text  aeol= core.autocrlf=false core.eol=native
ok 741 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=LF
ok 742 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=CRLF
ok 743 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 744 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 745 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 746 - ls-files --eol attr=-text  aeol=lf core.autocrlf=false core.eol=native
ok 747 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=LF
ok 748 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 749 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 750 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 751 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 752 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=false core.eol=native
ok 753 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 754 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 755 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 756 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 757 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 758 - ls-files --eol attr=text  aeol=lf core.autocrlf=false core.eol=native
ok 759 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=LF
ok 760 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 761 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 762 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 763 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 764 - ls-files --eol attr=text  aeol=crlf core.autocrlf=false core.eol=native
ok 765 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 766 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 767 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 768 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 769 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 770 - ls-files --eol attr=auto  aeol=lf core.autocrlf=false core.eol=native
ok 771 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=LF
ok 772 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 773 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 774 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 775 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 776 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=false core.eol=native
ok 777 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 778 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 779 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 780 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 781 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 782 - ls-files --eol attr=-text  aeol= core.autocrlf=input core.eol=native
ok 783 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=LF
ok 784 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=CRLF
ok 785 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 786 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 787 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 788 - ls-files --eol attr=-text  aeol=lf core.autocrlf=input core.eol=native
ok 789 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=LF
ok 790 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 791 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 792 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 793 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 794 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=input core.eol=native
ok 795 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 796 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 797 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 798 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 799 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 800 - ls-files --eol attr=text  aeol=lf core.autocrlf=input core.eol=native
ok 801 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=LF
ok 802 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 803 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 804 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 805 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 806 - ls-files --eol attr=text  aeol=crlf core.autocrlf=input core.eol=native
ok 807 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 808 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 809 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 810 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 811 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 812 - ls-files --eol attr=auto  aeol=lf core.autocrlf=input core.eol=native
ok 813 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=LF
ok 814 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 815 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 816 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 817 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 818 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=input core.eol=native
ok 819 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 820 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 821 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 822 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 823 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 824 - ls-files --eol attr=  aeol= core.autocrlf=false core.eol=native
ok 825 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=LF
ok 826 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=CRLF
ok 827 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 828 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 829 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 830 - ls-files --eol attr=  aeol= core.autocrlf=true core.eol=native
ok 831 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=LF
ok 832 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=CRLF
ok 833 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 834 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 835 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 836 - ls-files --eol attr=auto  aeol= core.autocrlf=true core.eol=native
ok 837 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=LF
ok 838 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=CRLF
ok 839 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 840 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 841 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 842 - ls-files --eol attr=text  aeol= core.autocrlf=true core.eol=native
ok 843 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=LF
ok 844 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=CRLF
ok 845 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 846 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 847 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 848 - ls-files --eol attr=text  aeol= core.autocrlf=input core.eol=native
ok 849 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=LF
ok 850 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=CRLF
ok 851 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 852 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 853 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 854 - ls-files --eol attr=auto  aeol= core.autocrlf=input core.eol=native
ok 855 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=LF
ok 856 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=CRLF
ok 857 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 858 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 859 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 860 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=crlf
ok 861 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=LF
ok 862 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 863 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 864 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 865 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 866 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=lf
ok 867 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=LF
ok 868 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 869 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 870 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 871 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 872 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=
ok 873 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=LF
ok 874 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=CRLF
ok 875 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 876 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=LF_mix_CR
ok 877 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=LF_nul
ok 878 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=native
ok 879 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=LF
ok 880 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=CRLF
ok 881 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 882 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 883 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 884 - ls-files --eol attr=auto  aeol= core.autocrlf=false core.eol=
ok 885 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=LF
ok 886 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=CRLF
ok 887 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 888 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=LF_mix_CR
ok 889 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=LF_nul
ok 890 - ls-files --eol attr=auto  aeol= core.autocrlf=false core.eol=native
ok 891 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=LF
ok 892 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=CRLF
ok 893 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 894 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 895 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 896 - ls-files --eol attr=-text ident aeol= core.autocrlf=true core.eol=lf
ok 897 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=LF
ok 898 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 899 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 900 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 901 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 902 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=true core.eol=lf
ok 903 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 904 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 905 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 906 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 907 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 908 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf
ok 909 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 910 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 911 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 912 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 913 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 914 - ls-files --eol attr=text ident aeol=lf core.autocrlf=true core.eol=lf
ok 915 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 916 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 917 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 918 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 919 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 920 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=true core.eol=lf
ok 921 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 922 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 923 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 924 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 925 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 926 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=true core.eol=lf
ok 927 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=LF
ok 928 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF
ok 929 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 930 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 931 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=LF_nul
ok 932 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf
ok 933 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=LF
ok 934 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF
ok 935 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 936 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 937 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul
ok 938 - ls-files --eol attr=-text ident aeol= core.autocrlf=false core.eol=lf
ok 939 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=LF
ok 940 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 941 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 942 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 943 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 944 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=false core.eol=lf
ok 945 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 946 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 947 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 948 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 949 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 950 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf
ok 951 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 952 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 953 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 954 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 955 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 956 - ls-files --eol attr=text ident aeol=lf core.autocrlf=false core.eol=lf
ok 957 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 958 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 959 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 960 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 961 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 962 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=false core.eol=lf
ok 963 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 964 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 965 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 966 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 967 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 968 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=false core.eol=lf
ok 969 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=LF
ok 970 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF
ok 971 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 972 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 973 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=LF_nul
ok 974 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf
ok 975 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=LF
ok 976 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF
ok 977 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 978 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 979 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul
ok 980 - ls-files --eol attr=-text ident aeol= core.autocrlf=input core.eol=lf
ok 981 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=LF
ok 982 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 983 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 984 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 985 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 986 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=input core.eol=lf
ok 987 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 988 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 989 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 990 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 991 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 992 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf
ok 993 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 994 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 995 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 996 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 997 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
ok 998 - ls-files --eol attr=text ident aeol=lf core.autocrlf=input core.eol=lf
ok 999 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 1000 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 1001 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 1002 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1003 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 1004 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=input core.eol=lf
ok 1005 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 1006 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 1007 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 1008 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1009 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
ok 1010 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=input core.eol=lf
ok 1011 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=LF
ok 1012 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF
ok 1013 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 1014 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1015 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=LF_nul
ok 1016 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf
ok 1017 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=LF
ok 1018 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF
ok 1019 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 1020 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1021 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul
ok 1022 - ls-files --eol attr= ident aeol= core.autocrlf=false core.eol=lf
ok 1023 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=LF
ok 1024 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 1025 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 1026 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 1027 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 1028 - ls-files --eol attr= ident aeol= core.autocrlf=true core.eol=lf
ok 1029 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=LF
ok 1030 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 1031 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1032 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1033 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 1034 - ls-files --eol attr=auto ident aeol= core.autocrlf=true core.eol=lf
ok 1035 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=LF
ok 1036 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 1037 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1038 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1039 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 1040 - ls-files --eol attr=text ident aeol= core.autocrlf=true core.eol=lf
ok 1041 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=LF
ok 1042 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=CRLF
ok 1043 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF
ok 1044 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR
ok 1045 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=LF_nul
ok 1046 - ls-files --eol attr=text ident aeol= core.autocrlf=input core.eol=lf
ok 1047 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=LF
ok 1048 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 1049 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 1050 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1051 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 1052 - ls-files --eol attr=auto ident aeol= core.autocrlf=input core.eol=lf
ok 1053 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=LF
ok 1054 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=CRLF
ok 1055 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF
ok 1056 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR
ok 1057 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=LF_nul
ok 1058 - ls-files --eol attr=-text ident aeol= core.autocrlf=true core.eol=crlf
ok 1059 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=LF
ok 1060 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 1061 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1062 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1063 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 1064 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf
ok 1065 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 1066 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 1067 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1068 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1069 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 1070 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf
ok 1071 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 1072 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 1073 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1074 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1075 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 1076 - ls-files --eol attr=text ident aeol=lf core.autocrlf=true core.eol=crlf
ok 1077 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 1078 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 1079 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1080 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1081 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 1082 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf
ok 1083 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 1084 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 1085 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1086 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1087 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 1088 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf
ok 1089 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=LF
ok 1090 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF
ok 1091 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1092 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1093 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul
ok 1094 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf
ok 1095 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF
ok 1096 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF
ok 1097 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1098 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1099 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul
ok 1100 - ls-files --eol attr=-text ident aeol= core.autocrlf=false core.eol=crlf
ok 1101 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=LF
ok 1102 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 1103 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1104 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1105 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 1106 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf
ok 1107 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 1108 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 1109 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1110 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1111 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 1112 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf
ok 1113 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 1114 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 1115 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1116 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1117 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 1118 - ls-files --eol attr=text ident aeol=lf core.autocrlf=false core.eol=crlf
ok 1119 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 1120 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 1121 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1122 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1123 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 1124 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf
ok 1125 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 1126 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 1127 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1128 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1129 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 1130 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf
ok 1131 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=LF
ok 1132 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF
ok 1133 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1134 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1135 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul
ok 1136 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf
ok 1137 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF
ok 1138 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF
ok 1139 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1140 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1141 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul
ok 1142 - ls-files --eol attr=-text ident aeol= core.autocrlf=input core.eol=crlf
ok 1143 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=LF
ok 1144 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 1145 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 1146 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 1147 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 1148 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf
ok 1149 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 1150 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 1151 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 1152 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 1153 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 1154 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf
ok 1155 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 1156 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 1157 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 1158 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 1159 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 1160 - ls-files --eol attr=text ident aeol=lf core.autocrlf=input core.eol=crlf
ok 1161 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 1162 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 1163 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 1164 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 1165 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 1166 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf
ok 1167 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 1168 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 1169 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 1170 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 1171 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 1172 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf
ok 1173 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=LF
ok 1174 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF
ok 1175 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 1176 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 1177 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul
ok 1178 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf
ok 1179 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF
ok 1180 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF
ok 1181 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 1182 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 1183 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul
ok 1184 - ls-files --eol attr= ident aeol= core.autocrlf=false core.eol=crlf
ok 1185 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=LF
ok 1186 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 1187 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1188 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1189 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 1190 - ls-files --eol attr= ident aeol= core.autocrlf=true core.eol=crlf
ok 1191 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=LF
ok 1192 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 1193 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1194 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1195 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 1196 - ls-files --eol attr=auto ident aeol= core.autocrlf=true core.eol=crlf
ok 1197 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=LF
ok 1198 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 1199 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1200 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1201 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 1202 - ls-files --eol attr=text ident aeol= core.autocrlf=true core.eol=crlf
ok 1203 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=LF
ok 1204 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF
ok 1205 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF
ok 1206 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR
ok 1207 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul
ok 1208 - ls-files --eol attr=text ident aeol= core.autocrlf=input core.eol=crlf
ok 1209 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=LF
ok 1210 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 1211 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 1212 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 1213 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 1214 - ls-files --eol attr=auto ident aeol= core.autocrlf=input core.eol=crlf
ok 1215 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=LF
ok 1216 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=CRLF
ok 1217 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF
ok 1218 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR
ok 1219 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=LF_nul
ok 1220 - ls-files --eol attr=-text ident aeol= core.autocrlf=true core.eol=native
ok 1221 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=LF
ok 1222 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=CRLF
ok 1223 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1224 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1225 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 1226 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=true core.eol=native
ok 1227 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=LF
ok 1228 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 1229 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1230 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1231 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 1232 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=true core.eol=native
ok 1233 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 1234 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 1235 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1236 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1237 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 1238 - ls-files --eol attr=text ident aeol=lf core.autocrlf=true core.eol=native
ok 1239 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=LF
ok 1240 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 1241 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1242 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1243 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 1244 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=true core.eol=native
ok 1245 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 1246 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 1247 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1248 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1249 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 1250 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=true core.eol=native
ok 1251 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=LF
ok 1252 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=CRLF
ok 1253 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1254 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1255 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=LF_nul
ok 1256 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=true core.eol=native
ok 1257 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=LF
ok 1258 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF
ok 1259 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1260 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1261 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=LF_nul
ok 1262 - ls-files --eol attr=-text ident aeol= core.autocrlf=false core.eol=native
ok 1263 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=LF
ok 1264 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=CRLF
ok 1265 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1266 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1267 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 1268 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=false core.eol=native
ok 1269 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=LF
ok 1270 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 1271 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1272 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1273 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 1274 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=false core.eol=native
ok 1275 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 1276 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 1277 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1278 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1279 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 1280 - ls-files --eol attr=text ident aeol=lf core.autocrlf=false core.eol=native
ok 1281 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=LF
ok 1282 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 1283 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1284 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1285 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 1286 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=false core.eol=native
ok 1287 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 1288 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 1289 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1290 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1291 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 1292 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=false core.eol=native
ok 1293 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=LF
ok 1294 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=CRLF
ok 1295 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1296 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1297 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=LF_nul
ok 1298 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=false core.eol=native
ok 1299 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=LF
ok 1300 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF
ok 1301 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1302 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1303 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=LF_nul
ok 1304 - ls-files --eol attr=-text ident aeol= core.autocrlf=input core.eol=native
ok 1305 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=LF
ok 1306 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=CRLF
ok 1307 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1308 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1309 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 1310 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=input core.eol=native
ok 1311 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=LF
ok 1312 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 1313 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1314 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1315 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 1316 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=input core.eol=native
ok 1317 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 1318 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 1319 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1320 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1321 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 1322 - ls-files --eol attr=text ident aeol=lf core.autocrlf=input core.eol=native
ok 1323 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=LF
ok 1324 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 1325 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1326 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1327 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 1328 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=input core.eol=native
ok 1329 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 1330 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 1331 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1332 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1333 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 1334 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=input core.eol=native
ok 1335 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=LF
ok 1336 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=CRLF
ok 1337 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1338 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1339 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=LF_nul
ok 1340 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=input core.eol=native
ok 1341 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=LF
ok 1342 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF
ok 1343 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1344 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1345 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=LF_nul
ok 1346 - ls-files --eol attr= ident aeol= core.autocrlf=false core.eol=native
ok 1347 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=LF
ok 1348 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=CRLF
ok 1349 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1350 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1351 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 1352 - ls-files --eol attr= ident aeol= core.autocrlf=true core.eol=native
ok 1353 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=LF
ok 1354 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=CRLF
ok 1355 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1356 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1357 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 1358 - ls-files --eol attr=auto ident aeol= core.autocrlf=true core.eol=native
ok 1359 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=LF
ok 1360 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=CRLF
ok 1361 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1362 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1363 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 1364 - ls-files --eol attr=text ident aeol= core.autocrlf=true core.eol=native
ok 1365 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=LF
ok 1366 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=CRLF
ok 1367 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF
ok 1368 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR
ok 1369 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=LF_nul
ok 1370 - ls-files --eol attr=text ident aeol= core.autocrlf=input core.eol=native
ok 1371 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=LF
ok 1372 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=CRLF
ok 1373 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1374 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1375 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 1376 - ls-files --eol attr=auto ident aeol= core.autocrlf=input core.eol=native
ok 1377 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=LF
ok 1378 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=CRLF
ok 1379 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF
ok 1380 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=LF_mix_CR
ok 1381 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=LF_nul
ok 1382 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=crlf
ok 1383 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=LF
ok 1384 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF
ok 1385 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF
ok 1386 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR
ok 1387 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=LF_nul
ok 1388 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=lf
ok 1389 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=LF
ok 1390 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=CRLF
ok 1391 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF
ok 1392 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR
ok 1393 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=LF_nul
ok 1394 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=
ok 1395 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=LF
ok 1396 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=CRLF
ok 1397 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 1398 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=LF_mix_CR
ok 1399 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=LF_nul
ok 1400 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=native
ok 1401 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=LF
ok 1402 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=CRLF
ok 1403 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1404 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1405 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 1406 - ls-files --eol attr=auto ident aeol= core.autocrlf=false core.eol=
ok 1407 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=LF
ok 1408 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=CRLF
ok 1409 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF
ok 1410 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=LF_mix_CR
ok 1411 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=LF_nul
ok 1412 - ls-files --eol attr=auto ident aeol= core.autocrlf=false core.eol=native
ok 1413 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=LF
ok 1414 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=CRLF
ok 1415 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF
ok 1416 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR
ok 1417 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=LF_nul
ok 1418 - ls-files --eol -d -z
# passed all 1418 test(s)
1..1418
*** t0028-working-tree-encoding.sh ***
ok 1 - setup test files
ok 2 - ensure UTF-8 is stored in Git
ok 3 - re-encode to UTF-16 on checkout
ok 4 - check $GIT_DIR/info/attributes support
ok 5 - check prohibited UTF-16 BOM
ok 6 - check required UTF-16 BOM
ok 7 - eol conversion for UTF-16 encoded files on checkout
ok 8 - check prohibited UTF-32 BOM
ok 9 - check required UTF-32 BOM
ok 10 - eol conversion for UTF-32 encoded files on checkout
ok 11 - check unsupported encodings
ok 12 - error if encoding round trip is not the same during refresh
ok 13 - error if encoding garbage is already in Git
ok 14 - check roundtrip encoding
# passed all 14 test(s)
1..14
*** t0030-stripspace.sh ***
ok 1 - long lines without spaces should be unchanged
ok 2 - lines with spaces at the beginning should be unchanged
ok 3 - lines with intermediate spaces should be unchanged
ok 4 - consecutive blank lines should be unified
ok 5 - only consecutive blank lines should be completely removed
ok 6 - consecutive blank lines at the beginning should be removed
ok 7 - consecutive blank lines at the end should be removed
ok 8 - text without newline at end should end with newline
ok 9 - text plus spaces without newline at end should end with newline
ok 10 - text plus spaces without newline at end should not show spaces
ok 11 - text plus spaces without newline should show the correct lines
ok 12 - text plus spaces at end should not show spaces
ok 13 - text plus spaces at end should be cleaned and newline must remain
ok 14 - spaces with newline at end should be replaced with empty string
ok 15 - spaces without newline at end should not show spaces
ok 16 - spaces without newline at end should be replaced with empty string
ok 17 - consecutive text lines should be unchanged
ok 18 - strip comments, too
ok 19 - strip comments with changed comment char
ok 20 - -c with single line
ok 21 - -c with single line followed by empty line
ok 22 - -c with newline only
ok 23 - --comment-lines with single line
ok 24 - -c with changed comment char
ok 25 - -c with comment char defined in .git/config
ok 26 - avoid SP-HT sequence in commented line
# passed all 26 test(s)
1..26
*** t0040-parse-options.sh ***
ok 1 - test help
ok 2 - OPT_BOOL() #1
ok 3 - OPT_BOOL() #2
ok 4 - OPT_BOOL() #3
ok 5 - OPT_BOOL() #4
ok 6 - OPT_BOOL() #5
ok 7 - OPT_BOOL() is idempotent #1
ok 8 - OPT_BOOL() is idempotent #2
ok 9 - OPT_BOOL() negation #1
ok 10 - OPT_BOOL() negation #2
ok 11 - OPT_BOOL() no negation #1
ok 12 - OPT_BOOL() no negation #2
ok 13 - OPT_BOOL() positivation
ok 14 - OPT_INT() negative
ok 15 - OPT_MAGNITUDE() simple
ok 16 - OPT_MAGNITUDE() kilo
ok 17 - OPT_MAGNITUDE() mega
ok 18 - OPT_MAGNITUDE() giga
ok 19 - OPT_MAGNITUDE() 3giga
ok 20 - short options
ok 21 - long options
ok 22 - missing required value
ok 23 - intermingled arguments
ok 24 - unambiguously abbreviated option
ok 25 - unambiguously abbreviated option with "="
ok 26 - ambiguously abbreviated option
ok 27 - non ambiguous option (after two options it abbreviates)
ok 28 - detect possible typos
ok 29 - detect possible typos
ok 30 - keep some options as arguments
ok 31 - OPT_DATE() works
ok 32 - OPT_CALLBACK() and OPT_BIT() work
ok 33 - OPT_CALLBACK() and callback errors work
ok 34 - OPT_BIT() and OPT_SET_INT() work
ok 35 - OPT_NEGBIT() and OPT_SET_INT() work
ok 36 - OPT_BIT() works
ok 37 - OPT_NEGBIT() works
ok 38 - OPT_COUNTUP() with PARSE_OPT_NODASH works
ok 39 - OPT_NUMBER_CALLBACK() works
ok 40 - negation of OPT_NONEG flags is not ambiguous
ok 41 - --list keeps list of strings
ok 42 - --no-list resets list
ok 43 - multiple quiet levels
ok 44 - multiple verbose levels
ok 45 - --no-quiet sets --quiet to 0
ok 46 - --no-quiet resets multiple -q to 0
ok 47 - --no-verbose sets verbose to 0
ok 48 - --no-verbose resets multiple verbose to 0
# passed all 48 test(s)
1..48
*** t0041-usage.sh ***
ok 1 - setup 
ok 2 - tag --contains <existent_tag>
ok 3 - tag --contains <inexistent_tag>
ok 4 - tag --no-contains <existent_tag>
ok 5 - tag --no-contains <inexistent_tag>
ok 6 - tag usage error
ok 7 - branch --contains <existent_commit>
ok 8 - branch --contains <inexistent_commit>
ok 9 - branch --no-contains <existent_commit>
ok 10 - branch --no-contains <inexistent_commit>
ok 11 - branch usage error
ok 12 - for-each-ref --contains <existent_object>
ok 13 - for-each-ref --contains <inexistent_object>
ok 14 - for-each-ref --no-contains <existent_object>
ok 15 - for-each-ref --no-contains <inexistent_object>
ok 16 - for-each-ref usage error
# passed all 16 test(s)
1..16
*** t0050-filesystem.sh ***
ok 1 - detection of case insensitive filesystem during repo init
ok 2 - detection of filesystem w/o symlink support during repo init
ok 3 - setup case tests
ok 4 - rename (case change)
ok 5 - merge (case change)
ok 6 # skip add directory (with different case) (missing CASE_INSENSITIVE_FS)
ok 7 # skip add (with different case) (missing CASE_INSENSITIVE_FS)
ok 8 - setup unicode normalization tests
ok 9 - rename (silent unicode normalization)
ok 10 - merge (silent unicode normalization)
# passed all 10 test(s)
1..10
*** t0055-beyond-symlinks.sh ***
ok 1 - setup
ok 2 - update-index --add beyond symlinks
ok 3 - add beyond symlinks
# passed all 3 test(s)
1..3
*** t0056-git-C.sh ***
ok 1 - "git -C <path>" runs git from the directory <path>
ok 2 - "git -C <path>" with an empty <path> is a no-op
ok 3 - Multiple -C options: "-C dir1 -C dir2" is equivalent to "-C dir1/dir2"
ok 4 - Effect on --git-dir option: "-C c --git-dir=a.git" is equivalent to "--git-dir c/a.git"
ok 5 - Order should not matter: "--git-dir=a.git -C c" is equivalent to "-C c --git-dir=a.git"
ok 6 - Effect on --work-tree option: "-C c/a.git --work-tree=../a"  is equivalent to "--work-tree=c/a --git-dir=c/a.git"
ok 7 - Order should not matter: "--work-tree=../a -C c/a.git" is equivalent to "-C c/a.git --work-tree=../a"
ok 8 - Effect on --git-dir and --work-tree options - "-C c --git-dir=a.git --work-tree=a" is equivalent to "--git-dir=c/a.git --work-tree=c/a"
ok 9 - Order should not matter: "-C c --git-dir=a.git --work-tree=a" is equivalent to "--git-dir=a.git -C c --work-tree=a"
ok 10 - Order should not matter: "-C c --git-dir=a.git --work-tree=a" is equivalent to "--git-dir=a.git --work-tree=a -C c"
ok 11 - Relative followed by fullpath: "-C ./here -C /there" is equivalent to "-C /there"
# passed all 11 test(s)
1..11
*** t0060-path-utils.sh ***
ok 1 - basename
ok 2 - dirname
ok 3 - normalize path:  => 
ok 4 - normalize path: . => 
ok 5 - normalize path: ./ => 
ok 6 - normalize path: ./. => 
ok 7 - normalize path: ./.. => ++failed++
ok 8 - normalize path: ../. => ++failed++
ok 9 - normalize path: ./../.// => ++failed++
ok 10 - normalize path: dir/.. => 
ok 11 - normalize path: dir/sub/../.. => 
ok 12 - normalize path: dir/sub/../../.. => ++failed++
ok 13 - normalize path: dir => dir
ok 14 - normalize path: dir// => dir/
ok 15 - normalize path: ./dir => dir
ok 16 - normalize path: dir/. => dir/
ok 17 - normalize path: dir///./ => dir/
ok 18 - normalize path: dir//sub/.. => dir/
ok 19 - normalize path: dir/sub/../ => dir/
ok 20 - normalize path: dir/sub/../. => dir/
ok 21 - normalize path: dir/s1/../s2/ => dir/s2/
ok 22 - normalize path: d1/s1///s2/..//../s3/ => d1/s3/
ok 23 - normalize path: d1/s1//../s2/../../d2 => d2
ok 24 - normalize path: d1/.../d2 => d1/.../d2
ok 25 - normalize path: d1/..././../d2 => d1/d2
ok 26 - normalize path: / => /
ok 27 - normalize path: // => /
ok 28 - normalize path: /// => /
ok 29 - normalize path: /. => /
ok 30 - normalize path: /./ => /
ok 31 - normalize path: /./.. => ++failed++
ok 32 - normalize path: /../. => ++failed++
ok 33 - normalize path: /./../.// => ++failed++
ok 34 - normalize path: /dir/.. => /
ok 35 - normalize path: /dir/sub/../.. => /
ok 36 - normalize path: /dir/sub/../../.. => ++failed++
ok 37 - normalize path: /dir => /dir
ok 38 - normalize path: /dir// => /dir/
ok 39 - normalize path: /./dir => /dir
ok 40 - normalize path: /dir/. => /dir/
ok 41 - normalize path: /dir///./ => /dir/
ok 42 - normalize path: /dir//sub/.. => /dir/
ok 43 - normalize path: /dir/sub/../ => /dir/
ok 44 - normalize path: //dir/sub/../. => /dir/
ok 45 - normalize path: /dir/s1/../s2/ => /dir/s2/
ok 46 - normalize path: /d1/s1///s2/..//../s3/ => /d1/s3/
ok 47 - normalize path: /d1/s1//../s2/../../d2 => /d2
ok 48 - normalize path: /d1/.../d2 => /d1/.../d2
ok 49 - normalize path: /d1/..././../d2 => /d1/d2
ok 50 - longest ancestor: / / => -1
ok 51 - longest ancestor: /foo / => 0
ok 52 - longest ancestor: /foo /fo => -1
ok 53 - longest ancestor: /foo /foo => -1
ok 54 - longest ancestor: /foo /bar => -1
ok 55 - longest ancestor: /foo /foo/bar => -1
ok 56 - longest ancestor: /foo /foo:/bar => -1
ok 57 - longest ancestor: /foo /:/foo:/bar => 0
ok 58 - longest ancestor: /foo /foo:/:/bar => 0
ok 59 - longest ancestor: /foo /:/bar:/foo => 0
ok 60 - longest ancestor: /foo/bar / => 0
ok 61 - longest ancestor: /foo/bar /fo => -1
ok 62 - longest ancestor: /foo/bar /foo => 4
ok 63 - longest ancestor: /foo/bar /foo/ba => -1
ok 64 - longest ancestor: /foo/bar /:/fo => 0
ok 65 - longest ancestor: /foo/bar /foo:/foo/ba => 4
ok 66 - longest ancestor: /foo/bar /bar => -1
ok 67 - longest ancestor: /foo/bar /fo => -1
ok 68 - longest ancestor: /foo/bar /foo:/bar => 4
ok 69 - longest ancestor: /foo/bar /:/foo:/bar => 4
ok 70 - longest ancestor: /foo/bar /foo:/:/bar => 4
ok 71 - longest ancestor: /foo/bar /:/bar:/fo => 0
ok 72 - longest ancestor: /foo/bar /:/bar => 0
ok 73 - longest ancestor: /foo/bar /foo => 4
ok 74 - longest ancestor: /foo/bar /foo:/bar => 4
ok 75 - longest ancestor: /foo/bar /bar => -1
ok 76 - strip_path_suffix
ok 77 - absolute path rejects the empty string
ok 78 - real path rejects the empty string
ok 79 - real path works on absolute paths 1
ok 80 - real path works on absolute paths 2
ok 81 - real path removes extra leading slashes
ok 82 - real path removes other extra slashes
ok 83 - real path works on symlinks
ok 84 - prefix_path works with absolute paths to work tree symlinks
ok 85 - prefix_path works with only absolute path to work tree
ok 86 - prefix_path rejects absolute path to dir with same beginning as work tree
ok 87 - prefix_path works with absolute path to a symlink to work tree having  same beginning as work tree
ok 88 - relative path: /foo/a/b/c/ /foo/a/b/ => c/
ok 89 - relative path: /foo/a/b/c/ /foo/a/b => c/
ok 90 - relative path: /foo/a//b//c/ ///foo/a/b// => c/
ok 91 - relative path: /foo/a/b /foo/a/b => ./
ok 92 - relative path: /foo/a/b/ /foo/a/b => ./
ok 93 - relative path: /foo/a /foo/a/b => ../
ok 94 - relative path: / /foo/a/b/ => ../../../
ok 95 - relative path: /foo/a/c /foo/a/b/ => ../c
ok 96 - relative path: /foo/a/c /foo/a/b => ../c
ok 97 - relative path: /foo/x/y /foo/a/b/ => ../../x/y
ok 98 - relative path: /foo/a/b <empty> => /foo/a/b
ok 99 - relative path: /foo/a/b <null> => /foo/a/b
ok 100 - relative path: foo/a/b/c/ foo/a/b/ => c/
ok 101 - relative path: foo/a/b/c/ foo/a/b => c/
ok 102 - relative path: foo/a/b//c foo/a//b => c
ok 103 - relative path: foo/a/b/ foo/a/b/ => ./
ok 104 - relative path: foo/a/b/ foo/a/b => ./
ok 105 - relative path: foo/a foo/a/b => ../
ok 106 - relative path: foo/x/y foo/a/b => ../../x/y
ok 107 - relative path: foo/a/c foo/a/b => ../c
ok 108 - relative path: foo/a/b /foo/x/y => foo/a/b
ok 109 - relative path: /foo/a/b foo/x/y => /foo/a/b
ok 110 # skip relative path: d:/a/b D:/a/c => ../b (missing MINGW)
ok 111 # skip relative path: C:/a/b D:/a/c => C:/a/b (missing MINGW)
ok 112 - relative path: foo/a/b <empty> => foo/a/b
ok 113 - relative path: foo/a/b <null> => foo/a/b
ok 114 - relative path: <empty> /foo/a/b => ./
ok 115 - relative path: <empty> <empty> => ./
ok 116 - relative path: <empty> <null> => ./
ok 117 - relative path: <null> <empty> => ./
ok 118 - relative path: <null> <null> => ./
ok 119 - relative path: <null> /foo/a/b => ./
ok 120 - git-path A=B info/grafts => .git/info/grafts
ok 121 - git-path GIT_GRAFT_FILE=foo info/grafts => foo
ok 122 - git-path GIT_GRAFT_FILE=foo info/////grafts => foo
ok 123 - git-path GIT_INDEX_FILE=foo index => foo
ok 124 - git-path GIT_INDEX_FILE=foo index/foo => .git/index/foo
ok 125 - git-path GIT_INDEX_FILE=foo index2 => .git/index2
ok 126 - setup fake objects directory foo
ok 127 - git-path GIT_OBJECT_DIRECTORY=foo objects => foo
ok 128 - git-path GIT_OBJECT_DIRECTORY=foo objects/foo => foo/foo
ok 129 - git-path GIT_OBJECT_DIRECTORY=foo objects2 => .git/objects2
ok 130 - setup common repository
ok 131 - git-path GIT_COMMON_DIR=bar index => .git/index
ok 132 - git-path GIT_COMMON_DIR=bar HEAD => .git/HEAD
ok 133 - git-path GIT_COMMON_DIR=bar logs/HEAD => .git/logs/HEAD
ok 134 - git-path GIT_COMMON_DIR=bar logs/refs/bisect/foo => .git/logs/refs/bisect/foo
ok 135 - git-path GIT_COMMON_DIR=bar logs/refs/bisec/foo => bar/logs/refs/bisec/foo
ok 136 - git-path GIT_COMMON_DIR=bar logs/refs/bisec => bar/logs/refs/bisec
ok 137 - git-path GIT_COMMON_DIR=bar logs/refs/bisectfoo => bar/logs/refs/bisectfoo
ok 138 - git-path GIT_COMMON_DIR=bar objects => bar/objects
ok 139 - git-path GIT_COMMON_DIR=bar objects/bar => bar/objects/bar
ok 140 - git-path GIT_COMMON_DIR=bar info/exclude => bar/info/exclude
ok 141 - git-path GIT_COMMON_DIR=bar info/grafts => bar/info/grafts
ok 142 - git-path GIT_COMMON_DIR=bar info/sparse-checkout => .git/info/sparse-checkout
ok 143 - git-path GIT_COMMON_DIR=bar info//sparse-checkout => .git/info//sparse-checkout
ok 144 - git-path GIT_COMMON_DIR=bar remotes/bar => bar/remotes/bar
ok 145 - git-path GIT_COMMON_DIR=bar branches/bar => bar/branches/bar
ok 146 - git-path GIT_COMMON_DIR=bar logs/refs/heads/master => bar/logs/refs/heads/master
ok 147 - git-path GIT_COMMON_DIR=bar refs/heads/master => bar/refs/heads/master
ok 148 - git-path GIT_COMMON_DIR=bar refs/bisect/foo => .git/refs/bisect/foo
ok 149 - git-path GIT_COMMON_DIR=bar hooks/me => bar/hooks/me
ok 150 - git-path GIT_COMMON_DIR=bar config => bar/config
ok 151 - git-path GIT_COMMON_DIR=bar packed-refs => bar/packed-refs
ok 152 - git-path GIT_COMMON_DIR=bar shallow => bar/shallow
ok 153 - test_submodule_relative_url: ../ ../foo ../submodule => ../../submodule
ok 154 - test_submodule_relative_url: ../ ../foo/bar ../submodule => ../../foo/submodule
ok 155 - test_submodule_relative_url: ../ ../foo/submodule ../submodule => ../../foo/submodule
ok 156 - test_submodule_relative_url: ../ ./foo ../submodule => ../submodule
ok 157 - test_submodule_relative_url: ../ ./foo/bar ../submodule => ../foo/submodule
ok 158 - test_submodule_relative_url: ../../../ ../foo/bar ../sub/a/b/c => ../../../../foo/sub/a/b/c
ok 159 - test_submodule_relative_url: ../ $(@D)/t/trash directory.t0060-path-utils/addtest ../repo => $(@D)/t/trash directory.t0060-path-utils/repo
ok 160 - test_submodule_relative_url: ../ foo/bar ../submodule => ../foo/submodule
ok 161 - test_submodule_relative_url: ../ foo ../submodule => ../submodule
ok 162 - test_submodule_relative_url: (null) ../foo/bar ../sub/a/b/c => ../foo/sub/a/b/c
ok 163 - test_submodule_relative_url: (null) ../foo/bar ../sub/a/b/c/ => ../foo/sub/a/b/c
ok 164 - test_submodule_relative_url: (null) ../foo/bar/ ../sub/a/b/c => ../foo/sub/a/b/c
ok 165 - test_submodule_relative_url: (null) ../foo/bar ../submodule => ../foo/submodule
ok 166 - test_submodule_relative_url: (null) ../foo/submodule ../submodule => ../foo/submodule
ok 167 - test_submodule_relative_url: (null) ../foo ../submodule => ../submodule
ok 168 - test_submodule_relative_url: (null) ./foo/bar ../submodule => foo/submodule
ok 169 - test_submodule_relative_url: (null) ./foo ../submodule => submodule
ok 170 - test_submodule_relative_url: (null) //somewhere else/repo ../subrepo => //somewhere else/subrepo
ok 171 - test_submodule_relative_url: (null) //somewhere else/repo ../../subrepo => //subrepo
ok 172 - test_submodule_relative_url: (null) //somewhere else/repo ../../../subrepo => /subrepo
ok 173 - test_submodule_relative_url: (null) //somewhere else/repo ../../../../subrepo => subrepo
ok 174 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/subsuper_update_r ../subsubsuper_update_r => $(@D)/t/trash directory.t0060-path-utils/subsubsuper_update_r
ok 175 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/super_update_r2 ../subsuper_update_r => $(@D)/t/trash directory.t0060-path-utils/subsuper_update_r
ok 176 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/. ../. => $(@D)/t/trash directory.t0060-path-utils/.
ok 177 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils ./. => $(@D)/t/trash directory.t0060-path-utils/.
ok 178 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/addtest ../repo => $(@D)/t/trash directory.t0060-path-utils/repo
ok 179 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils ./å äö => $(@D)/t/trash directory.t0060-path-utils/å äö
ok 180 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/. ../submodule => $(@D)/t/trash directory.t0060-path-utils/submodule
ok 181 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/submodule ../submodule => $(@D)/t/trash directory.t0060-path-utils/submodule
ok 182 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/home2/../remote ../bundle1 => $(@D)/t/trash directory.t0060-path-utils/home2/../bundle1
ok 183 - test_submodule_relative_url: (null) $(@D)/t/trash directory.t0060-path-utils/submodule_update_repo ./. => $(@D)/t/trash directory.t0060-path-utils/submodule_update_repo/.
ok 184 - test_submodule_relative_url: (null) file:///tmp/repo ../subrepo => file:///tmp/subrepo
ok 185 - test_submodule_relative_url: (null) foo/bar ../submodule => foo/submodule
ok 186 - test_submodule_relative_url: (null) foo ../submodule => submodule
ok 187 - test_submodule_relative_url: (null) helper:://hostname/repo ../subrepo => helper:://hostname/subrepo
ok 188 - test_submodule_relative_url: (null) helper:://hostname/repo ../../subrepo => helper:://subrepo
ok 189 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../subrepo => helper::/subrepo
ok 190 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../../subrepo => helper::subrepo
ok 191 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../../../subrepo => helper:subrepo
ok 192 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../../../../subrepo => .:subrepo
ok 193 - test_submodule_relative_url: (null) ssh://hostname/repo ../subrepo => ssh://hostname/subrepo
ok 194 - test_submodule_relative_url: (null) ssh://hostname/repo ../../subrepo => ssh://subrepo
ok 195 - test_submodule_relative_url: (null) ssh://hostname/repo ../../../subrepo => ssh:/subrepo
ok 196 - test_submodule_relative_url: (null) ssh://hostname/repo ../../../../subrepo => ssh:subrepo
ok 197 - test_submodule_relative_url: (null) ssh://hostname/repo ../../../../../subrepo => .:subrepo
ok 198 - test_submodule_relative_url: (null) ssh://hostname:22/repo ../subrepo => ssh://hostname:22/subrepo
ok 199 - test_submodule_relative_url: (null) user@host:path/to/repo ../subrepo => user@host:path/to/subrepo
ok 200 - test_submodule_relative_url: (null) user@host:repo ../subrepo => user@host:subrepo
ok 201 - test_submodule_relative_url: (null) user@host:repo ../../subrepo => .:subrepo
ok 202 - match .gitmodules
# passed all 202 test(s)
1..202
*** t0061-run-command.sh ***
ok 1 - start_command reports ENOENT
ok 2 - run_command can run a command
ok 3 - run_command can run a script without a #! line
ok 4 - run_command does not try to execute a directory
ok 5 - run_command passes over non-executable file
ok 6 - run_command reports EACCES
ok 7 - unreadable directory in PATH
ok 8 - run_command runs in parallel with more jobs available than tasks
ok 9 - run_command runs in parallel with as many jobs as tasks
ok 10 - run_command runs in parallel with more tasks than jobs available
ok 11 - run_command is asked to abort gracefully
ok 12 - run_command outputs 
ok 13 - GIT_TRACE with environment variables
# passed all 13 test(s)
1..13
*** t0062-revision-walking.sh ***
ok 1 - setup
ok 2 - revision walking can be done twice
# passed all 2 test(s)
1..2
*** t0063-string-list.sh ***
ok 1 - split foo:bar:baz at :, max -1
ok 2 - split foo:bar:baz at :, max 0
ok 3 - split foo:bar:baz at :, max 1
ok 4 - split foo:bar:baz at :, max 2
ok 5 - split foo:bar: at :, max -1
ok 6 - split  at :, max -1
ok 7 - split : at :, max -1
ok 8 - test filter_string_list
ok 9 - test remove_duplicates
# passed all 9 test(s)
1..9
*** t0064-sha1-array.sh ***
ok 1 - ordered enumeration
ok 2 - ordered enumeration with duplicate suppression
ok 3 - lookup
ok 4 - lookup non-existing entry
ok 5 - lookup with duplicates
ok 6 - lookup non-existing entry with duplicates
ok 7 - lookup with almost duplicate values
ok 8 - lookup with single duplicate value
# passed all 8 test(s)
1..8
*** t0065-strcmp-offset.sh ***
ok 1 - strcmp_offset(abc, abc)
ok 2 - strcmp_offset(abc, def)
ok 3 - strcmp_offset(abc, abz)
ok 4 - strcmp_offset(abc, abcdef)
# passed all 4 test(s)
1..4
*** t0070-fundamental.sh ***
ok 1 - character classes (isspace, isalpha etc.)
ok 2 - mktemp to nonexistent directory prints filename
ok 3 - mktemp to unwritable directory prints filename
ok 4 - git_mkstemps_mode does not fail if fd 0 is not open
ok 5 - check for a bug in the regex routines
# passed all 5 test(s)
1..5
*** t0081-line-buffer.sh ***
ok 1 - hello world
ok 2 - 0-length read, send along greeting
ok 3 - read from file descriptor
ok 4 - skip, copy null byte
ok 5 - read null byte
ok 6 - long reads are truncated
ok 7 - long copies are truncated
ok 8 - long binary reads are truncated
# passed all 8 test(s)
1..8
*** t0090-cache-tree.sh ***
ok 1 - initial commit has cache-tree
ok 2 - read-tree HEAD establishes cache-tree
ok 3 - git-add invalidates cache-tree
ok 4 - git-add in subdir invalidates cache-tree
ok 5 - git-add in subdir does not invalidate sibling cache-tree
ok 6 - update-index invalidates cache-tree
ok 7 - write-tree establishes cache-tree
ok 8 - test-tool scrap-cache-tree works
ok 9 - second commit has cache-tree
ok 10 - commit --interactive gives cache-tree on partial commit
ok 11 - commit in child dir has cache-tree
ok 12 - reset --hard gives cache-tree
ok 13 - reset --hard without index gives cache-tree
ok 14 - checkout gives cache-tree
ok 15 - checkout -b gives cache-tree
ok 16 - checkout -B gives cache-tree
ok 17 - merge --ff-only maintains cache-tree
ok 18 - merge maintains cache-tree
ok 19 - partial commit gives cache-tree
ok 20 - no phantom error when switching trees
ok 21 - switching trees does not invalidate shared index
# passed all 21 test(s)
1..21
*** t0100-previous.sh ***
ok 1 - branch -d @{-1}
ok 2 - branch -d @{-12} when there is not enough switches yet
ok 3 - merge @{-1}
ok 4 - merge @{-1}~1
ok 5 - merge @{-100} before checking out that many branches yet
ok 6 - log -g @{-1}
# passed all 6 test(s)
1..6
*** t0101-at-syntax.sh ***
ok 1 - setup
ok 2 - @{0} shows current
ok 3 - @{1} shows old
ok 4 - @{now} shows current
ok 5 - @{2001-09-17} (before the first commit) shows old
ok 6 - silly approxidates work
ok 7 - notice misspelled upstream
ok 8 - complain about total nonsense
# passed all 8 test(s)
1..8
*** t0110-urlmatch-normalization.sh ***
ok 1 - url scheme
ok 2 - url authority
ok 3 - url port checks
ok 4 - url port normalization
ok 5 - url general escapes
ok 6 - url high-bit escapes
ok 7 - url utf-8 escapes
ok 8 - url username/password escapes
ok 9 - url normalized lengths
ok 10 - url . and .. segments
ok 11 - url equivalents
# passed all 11 test(s)
1..11
*** t0200-gettext-basic.sh ***
# lib-gettext: Found 'is_IS.UTF-8' as an is_IS UTF-8 locale
# lib-gettext: Found 'is_IS.ISO8859-1' as an is_IS ISO-8859-1 locale
ok 1 - sanity: $GIT_INTERNAL_GETTEXT_SH_SCHEME is set (to gnu)
ok 2 - sanity: $TEXTDOMAIN is git
ok 3 - xgettext sanity: Perl _() strings are not extracted
ok 4 - xgettext sanity: Comment extraction with --add-comments
ok 5 - xgettext sanity: Comment extraction with --add-comments stops at statements
ok 6 - sanity: $TEXTDOMAINDIR exists without NO_GETTEXT=YesPlease
ok 7 - sanity: Icelandic locale was compiled
ok 8 - sanity: gettext("") metadata is OK
ok 9 - sanity: gettext(unknown) is passed through
ok 10 - xgettext: C extraction of _() and N_() strings
ok 11 - xgettext: C extraction with %s
ok 12 - xgettext: Shell extraction
ok 13 - xgettext: Shell extraction with $variable
ok 14 - xgettext: Perl extraction
ok 15 - xgettext: Perl extraction with %s
ok 16 - sanity: Some gettext("") data for real locale
# passed all 16 test(s)
1..16
*** t0201-gettext-fallbacks.sh ***
# lib-gettext: No is_IS UTF-8 locale available
# lib-gettext: No is_IS ISO-8859-1 locale available
ok 1 - sanity: $GIT_INTERNAL_GETTEXT_SH_SCHEME is set (to fallthrough)
ok 2 - sanity: $GIT_INTERNAL_GETTEXT_TEST_FALLBACKS is set
ok 3 - sanity: $GIT_INTERNAL_GETTEXT_SH_SCHEME" is fallthrough
ok 4 - gettext: our gettext() fallback has pass-through semantics
ok 5 - eval_gettext: our eval_gettext() fallback has pass-through semantics
ok 6 - eval_gettext: our eval_gettext() fallback can interpolate variables
ok 7 - eval_gettext: our eval_gettext() fallback can interpolate variables with spaces
ok 8 - eval_gettext: our eval_gettext() fallback can interpolate variables with spaces and quotes
# passed all 8 test(s)
1..8
*** t0202-gettext-perl.sh ***
# lib-gettext: Found 'is_IS.UTF-8' as an is_IS UTF-8 locale
# lib-gettext: Found 'is_IS.ISO8859-1' as an is_IS ISO-8859-1 locale
# run 0: Perl Git::I18N API (perl $(@D)/t/t0202/test.pl)
1..13
ok 1 - Testing Git::I18N with NO Perl gettext library
ok 2 - Git::I18N is located at $(@D)/t/../perl/build/lib/Git/I18N.pm
ok 3 - sanity: Git::I18N has 3 export(s)
ok 4 - sanity: Git::I18N exports everything by default
ok 5 - sanity: N__ has a $ prototype
ok 6 - sanity: __ has a $ prototype
ok 7 - sanity: __n has a $$$ prototype
ok 8 - Passing a string through __() in the C locale works
ok 9 - Get singular string through __n() in C locale
ok 10 - Get plural string through __n() in C locale
ok 11 - Passing a string through N__() in the C locale works
ok 12 - Without a gettext library + <C> locale <TEST: A Perl test string> turns into <TEST: A Perl test string>
ok 13 - Without a gettext library + <is> locale <TEST: A Perl test string> turns into <TEST: A Perl test string>
# test_external test Perl Git::I18N API was ok
# test_external_without_stderr test no stderr: Perl Git::I18N API was ok
*** t0203-gettext-setlocale-sanity.sh ***
# lib-gettext: Found 'is_IS.UTF-8' as an is_IS UTF-8 locale
# lib-gettext: Found 'is_IS.ISO8859-1' as an is_IS ISO-8859-1 locale
ok 1 - git show a ISO-8859-1 commit under C locale
ok 2 - git show a ISO-8859-1 commit under a UTF-8 locale
# passed all 2 test(s)
1..2
*** t0204-gettext-reencode-sanity.sh ***
# lib-gettext: Found 'is_IS.UTF-8' as an is_IS UTF-8 locale
# lib-gettext: Found 'is_IS.ISO8859-1' as an is_IS ISO-8859-1 locale
ok 1 - gettext: Emitting UTF-8 from our UTF-8 *.mo files / Icelandic
ok 2 - gettext: Emitting UTF-8 from our UTF-8 *.mo files / Runes
ok 3 - gettext: Emitting ISO-8859-1 from our UTF-8 *.mo files / Icelandic
ok 4 - gettext: impossible ISO-8859-1 output
not ok 5 - gettext: Fetching a UTF-8 msgid -> UTF-8
#	
#	    printf "TILRAUN: ‚einfaldar‘ og „tvöfaldar“ gæsalappir" >expect &&
#	    LANGUAGE=is LC_ALL="$is_IS_locale" gettext "TEST: ‘single’ and “double” quotes" >actual &&
#	    test_cmp expect actual
#	
not ok 6 - gettext: Fetching a UTF-8 msgid -> ISO-8859-1
#	
#	    LANGUAGE=is LC_ALL="$is_IS_iso_locale" gettext "TEST: ‘single’ and “double” quotes" >actual &&
#	    grep "einfaldar" actual &&
#	    grep "$(echo tvöfaldar | iconv -f UTF-8 -t ISO8859-1)" actual
#	
ok 7 - gettext.c: git init UTF-8 -> UTF-8
ok 8 - gettext.c: git init UTF-8 -> ISO-8859-1
# failed 2 among 8 test(s)
1..8
*** t0205-gettext-poison.sh ***
# lib-gettext: Found 'is_IS.UTF-8' as an is_IS UTF-8 locale
# lib-gettext: Found 'is_IS.ISO8859-1' as an is_IS ISO-8859-1 locale
ok 1 # skip sanity: $GIT_INTERNAL_GETTEXT_SH_SCHEME" is poison (missing GETTEXT_POISON)
ok 2 # skip gettext: our gettext() fallback has poison semantics (missing GETTEXT_POISON)
ok 3 # skip eval_gettext: our eval_gettext() fallback has poison semantics (missing GETTEXT_POISON)
# passed all 3 test(s)
1..3
*** t0300-credentials.sh ***
ok 1 - setup helper scripts
ok 2 - credential_fill invokes helper
ok 3 - credential_fill invokes multiple helpers
ok 4 - credential_fill stops when we get a full response
ok 5 - credential_fill continues through partial response
ok 6 - credential_fill passes along metadata
ok 7 - credential_approve calls all helpers
ok 8 - do not bother storing password-less credential
ok 9 - credential_reject calls all helpers
ok 10 - usernames can be preserved
ok 11 - usernames can be overridden
ok 12 - do not bother completing already-full credential
ok 13 - empty helper list falls back to internal getpass
ok 14 - internal getpass does not ask for known username
ok 15 - respect configured credentials
ok 16 - match configured credential
ok 17 - do not match configured credential
ok 18 - pull username from config
ok 19 - http paths can be part of context
ok 20 - helpers can abort the process
ok 21 - empty helper spec resets helper list
# passed all 21 test(s)
1..21
*** t0301-credential-cache.sh ***
ok 1 - helper (cache) has no existing data
ok 2 - helper (cache) stores password
ok 3 - helper (cache) can retrieve password
ok 4 - helper (cache) requires matching protocol
ok 5 - helper (cache) requires matching host
ok 6 - helper (cache) requires matching username
ok 7 - helper (cache) requires matching path
ok 8 - helper (cache) can forget host
ok 9 - helper (cache) can store multiple users
ok 10 - helper (cache) can forget user
ok 11 - helper (cache) remembers other user
ok 12 - helper (cache) can store empty username
ok 13 - socket defaults to ~/.cache/git/credential/socket
ok 14 - helper (cache) has no existing data
ok 15 - helper (cache) stores password
ok 16 - helper (cache) can retrieve password
ok 17 - helper (cache) requires matching protocol
ok 18 - helper (cache) requires matching host
ok 19 - helper (cache) requires matching username
ok 20 - helper (cache) requires matching path
ok 21 - helper (cache) can forget host
ok 22 - helper (cache) can store multiple users
ok 23 - helper (cache) can forget user
ok 24 - helper (cache) remembers other user
ok 25 - helper (cache) can store empty username
ok 26 - use custom XDG_CACHE_HOME if set and default sockets are not created
ok 27 - credential-cache --socket option overrides default location
ok 28 - use custom XDG_CACHE_HOME even if xdg socket exists
ok 29 - use user socket if user directory exists
ok 30 - use user socket if user directory is a symlink to a directory
ok 31 - helper (cache --timeout=1) times out
# passed all 31 test(s)
1..31
*** t0302-credential-store.sh ***
ok 1 - helper (store) has no existing data
ok 2 - helper (store) stores password
ok 3 - helper (store) can retrieve password
ok 4 - helper (store) requires matching protocol
ok 5 - helper (store) requires matching host
ok 6 - helper (store) requires matching username
ok 7 - helper (store) requires matching path
ok 8 - helper (store) can forget host
ok 9 - helper (store) can store multiple users
ok 10 - helper (store) can forget user
ok 11 - helper (store) remembers other user
ok 12 - helper (store) can store empty username
ok 13 - when xdg file does not exist, xdg file not created
ok 14 - setup xdg file
ok 15 - helper (store) has no existing data
ok 16 - helper (store) stores password
ok 17 - helper (store) can retrieve password
ok 18 - helper (store) requires matching protocol
ok 19 - helper (store) requires matching host
ok 20 - helper (store) requires matching username
ok 21 - helper (store) requires matching path
ok 22 - helper (store) can forget host
ok 23 - helper (store) can store multiple users
ok 24 - helper (store) can forget user
ok 25 - helper (store) remembers other user
ok 26 - helper (store) can store empty username
ok 27 - when xdg file exists, home file not created
ok 28 - setup custom xdg file
ok 29 - helper (store) has no existing data
ok 30 - helper (store) stores password
ok 31 - helper (store) can retrieve password
ok 32 - helper (store) requires matching protocol
ok 33 - helper (store) requires matching host
ok 34 - helper (store) requires matching username
ok 35 - helper (store) requires matching path
ok 36 - helper (store) can forget host
ok 37 - helper (store) can store multiple users
ok 38 - helper (store) can forget user
ok 39 - helper (store) remembers other user
ok 40 - helper (store) can store empty username
ok 41 - if custom xdg file exists, home and xdg files not created
ok 42 - get: use home file if both home and xdg files have matches
ok 43 - get: use xdg file if home file has no matches
ok 44 - get: use xdg file if home file is unreadable
ok 45 - store: if both xdg and home files exist, only store in home file
ok 46 - erase: erase matching credentials from both xdg and home files
# passed all 46 test(s)
1..46
*** t0303-credential-external.sh ***
1..0 # SKIP used to test external credential helpers
*** t0410-partial-clone.sh ***
ok 1 - extensions.partialclone without filter
ok 2 - missing reflog object, but promised by a commit, passes fsck
ok 3 - missing reflog object, but promised by a tag, passes fsck
ok 4 - missing reflog object alone fails fsck, even with extension set
ok 5 - missing ref object, but promised, passes fsck
ok 6 - missing object, but promised, passes fsck
ok 7 - missing CLI object, but promised, passes fsck
ok 8 - fetching of missing objects
ok 9 - rev-list stops traversal at missing and promised commit
ok 10 - rev-list stops traversal at missing and promised tree
ok 11 - rev-list stops traversal at missing and promised blob
ok 12 - rev-list stops traversal at promisor commit, tree, and blob
ok 13 - rev-list accepts missing and promised objects on command line
ok 14 - gc repacks promisor objects separately from non-promisor objects
ok 15 - gc does not repack promisor objects if there are none
ok 16 - repack -d does not irreversibly delete promisor objects
ok 17 - gc stops traversal when a missing but promised object is reached
# passed all 17 test(s)
# SKIP no web server found at '/usr/sbin/apache2'
1..17
*** t1000-read-tree-m-3way.sh ***
ok 1 - adding test file NN and Z/NN
ok 2 - adding test file ND and Z/ND
ok 3 - adding test file NM and Z/NM
ok 4 - adding test file DN and Z/DN
ok 5 - adding test file DD and Z/DD
ok 6 - adding test file DM and Z/DM
ok 7 - adding test file MN and Z/MN
ok 8 - adding test file MD and Z/MD
ok 9 - adding test file MM and Z/MM
ok 10 - adding test file SS
ok 11 - adding test file TT
ok 12 - prepare initial tree
ok 13 - change in branch A (removal)
ok 14 - change in branch A (modification)
ok 15 - change in branch A (modification)
ok 16 - change in branch A (modification)
ok 17 - change in branch A (modification)
ok 18 - change in branch A (modification)
ok 19 - change in branch A (modification)
ok 20 - change in branch A (addition)
ok 21 - change in branch A (addition)
ok 22 - change in branch A (addition)
ok 23 - change in branch A (addition)
ok 24 - change in branch A (addition)
ok 25 - change in branch A (edit)
ok 26 - change in branch A (change file to directory)
ok 27 - recording branch A tree
ok 28 - reading original tree and checking out
ok 29 - change in branch B (removal)
ok 30 - change in branch B (modification)
ok 31 - change in branch B (modification)
ok 32 - change in branch B (modification)
ok 33 - change in branch B (modification)
ok 34 - change in branch B (modification)
ok 35 - change in branch B (modification)
ok 36 - change in branch B (addition)
ok 37 - change in branch B (addition)
ok 38 - change in branch B (addition)
ok 39 - change in branch B (addition)
ok 40 - change in branch B (addition and modification)
ok 41 - change in branch B (modification)
ok 42 - change in branch B (addition of a file to conflict with directory)
ok 43 - recording branch B tree
ok 44 - keep contents of 3 trees for easy access
ok 45 - 3-way merge with git read-tree -m, empty cache
ok 46 - 3-way merge with git read-tree -m, match H
ok 47 - 1 - must not have an entry not in A.
ok 48 - 2 - must match B in !O && !A && B case.
ok 49 - 2 - matching B alone is OK in !O && !A && B case.
ok 50 - 3 - must match A in !O && A && !B case.
ok 51 - 3 - matching A alone is OK in !O && A && !B case.
ok 52 - 3 (fail) - must match A in !O && A && !B case.
ok 53 - 4 - must match and be up-to-date in !O && A && B && A!=B case.
ok 54 - 4 (fail) - must match and be up-to-date in !O && A && B && A!=B case.
ok 55 - 4 (fail) - must match and be up-to-date in !O && A && B && A!=B case.
ok 56 - 5 - must match in !O && A && B && A==B case.
ok 57 - 5 - must match in !O && A && B && A==B case.
ok 58 - 5 (fail) - must match A in !O && A && B && A==B case.
ok 59 - 6 - must not exist in O && !A && !B case
ok 60 - 7 - must not exist in O && !A && B && O!=B case
ok 61 - 8 - must not exist in O && !A && B && O==B case
ok 62 - 9 - must match and be up-to-date in O && A && !B && O!=A case
ok 63 - 9 (fail) - must match and be up-to-date in O && A && !B && O!=A case
ok 64 - 9 (fail) - must match and be up-to-date in O && A && !B && O!=A case
ok 65 - 10 - must match and be up-to-date in O && A && !B && O==A case
ok 66 - 10 (fail) - must match and be up-to-date in O && A && !B && O==A case
ok 67 - 10 (fail) - must match and be up-to-date in O && A && !B && O==A case
ok 68 - 11 - must match and be up-to-date in O && A && B && O!=A && O!=B && A!=B case
ok 69 - 11 (fail) - must match and be up-to-date in O && A && B && O!=A && O!=B && A!=B case
ok 70 - 11 (fail) - must match and be up-to-date in O && A && B && O!=A && O!=B && A!=B case
ok 71 - 12 - must match A in O && A && B && O!=A && A==B case
ok 72 - 12 - must match A in O && A && B && O!=A && A==B case
ok 73 - 12 (fail) - must match A in O && A && B && O!=A && A==B case
ok 74 - 13 - must match A in O && A && B && O!=A && O==B case
ok 75 - 13 - must match A in O && A && B && O!=A && O==B case
ok 76 - 14 - must match and be up-to-date in O && A && B && O==A && O!=B case
ok 77 - 14 - may match B in O && A && B && O==A && O!=B case
ok 78 - 14 (fail) - must match and be up-to-date in O && A && B && O==A && O!=B case
ok 79 - 14 (fail) - must match and be up-to-date in O && A && B && O==A && O!=B case
ok 80 - 15 - must match A in O && A && B && O==A && O==B case
ok 81 - 15 - must match A in O && A && B && O==A && O==B case
ok 82 - 15 (fail) - must match A in O && A && B && O==A && O==B case
ok 83 - 16 - A matches in one and B matches in another.
# passed all 83 test(s)
1..83
*** t1001-read-tree-m-2way.sh ***
ok 1 - setup
ok 2 - 1, 2, 3 - no carry forward
ok 3 - 4 - carry forward local addition.
ok 4 - 5 - carry forward local addition.
ok 5 - 6 - local addition already has the same.
ok 6 - 7 - local addition already has the same.
ok 7 - 8 - conflicting addition.
ok 8 - 9 - conflicting addition.
ok 9 - 10 - path removed.
ok 10 - 11 - dirty path removed.
ok 11 - 12 - unmatching local changes being removed.
ok 12 - 13 - unmatching local changes being removed.
ok 13 - 14 - unchanged in two heads.
ok 14 - 15 - unchanged in two heads.
ok 15 - 16 - conflicting local change.
ok 16 - 17 - conflicting local change.
ok 17 - 18 - local change already having a good result.
ok 18 - 19 - local change already having a good result, further modified.
ok 19 - 20 - no local change, use new tree.
ok 20 - 21 - no local change, dirty cache.
ok 21 - 22 - local change cache updated.
ok 22 - DF vs DF/DF case setup.
ok 23 - DF vs DF/DF case test.
ok 24 - a/b (untracked) vs a case setup.
ok 25 - a/b (untracked) vs a, plus c/d case test.
ok 26 - read-tree supports the super-prefix
ok 27 - a/b vs a, plus c/d case setup.
ok 28 - a/b vs a, plus c/d case test.
ok 29 - -m references the correct modified tree
# passed all 29 test(s)
1..29
*** t1002-read-tree-m-u-2way.sh ***
ok 1 - setup
ok 2 - 1, 2, 3 - no carry forward
ok 3 - 4 - carry forward local addition.
ok 4 - 5 - carry forward local addition.
ok 5 - 6 - local addition already has the same.
ok 6 - 7 - local addition already has the same.
ok 7 - 8 - conflicting addition.
ok 8 - 9 - conflicting addition.
ok 9 - 10 - path removed.
ok 10 - 11 - dirty path removed.
ok 11 - 12 - unmatching local changes being removed.
ok 12 - 13 - unmatching local changes being removed.
ok 13 - 14 - unchanged in two heads.
ok 14 - 15 - unchanged in two heads.
ok 15 - 16 - conflicting local change.
ok 16 - 17 - conflicting local change.
ok 17 - 18 - local change already having a good result.
ok 18 - 19 - local change already having a good result, further modified.
ok 19 - 20 - no local change, use new tree.
ok 20 - 21 - no local change, dirty cache.
ok 21 - DF vs DF/DF case setup.
ok 22 - DF vs DF/DF case test.
# passed all 22 test(s)
1..22
*** t1003-read-tree-prefix.sh ***
ok 1 - setup
ok 2 - read-tree --prefix
# passed all 2 test(s)
1..2
*** t1004-read-tree-m-u-wf.sh ***
ok 1 - two-way setup
ok 2 - two-way not clobbering
ok 3 - two-way with incorrect --exclude-per-directory (1)
ok 4 - two-way with incorrect --exclude-per-directory (2)
ok 5 - two-way clobbering a ignored file
ok 6 - three-way not complaining on an untracked path in both
ok 7 - three-way not clobbering a working tree file
ok 8 - three-way not complaining on an untracked file
ok 9 - 3-way not overwriting local changes (setup)
ok 10 - 3-way not overwriting local changes (our side)
ok 11 - 3-way not overwriting local changes (their side)
ok 12 - funny symlink in work tree
ok 13 - funny symlink in work tree, un-unlink-able
ok 14 - D/F setup
ok 15 - D/F
ok 16 - D/F resolve
ok 17 - D/F recursive
# passed all 17 test(s)
1..17
*** t1005-read-tree-reset.sh ***
ok 1 - setup
ok 2 - reset should work
ok 3 - reset should remove remnants from a failed merge
ok 4 - two-way reset should remove remnants too
ok 5 - Porcelain reset should remove remnants too
ok 6 - Porcelain checkout -f should remove remnants too
ok 7 - Porcelain checkout -f HEAD should remove remnants too
# passed all 7 test(s)
1..7
*** t1006-cat-file.sh ***
ok 1 - setup
ok 2 - blob exists
ok 3 - Type of blob is correct
ok 4 - Size of blob is correct
ok 5 - Type of blob is correct using --allow-unknown-type
ok 6 - Size of blob is correct using --allow-unknown-type
ok 7 - Content of blob is correct
ok 8 - Pretty content of blob is correct
ok 9 - --batch output of blob is correct
ok 10 - --batch-check output of blob is correct
ok 11 - custom --batch-check format
ok 12 - --batch-check with %(rest)
ok 13 - --batch without type (blob)
ok 14 - --batch without size (blob)
ok 15 - --batch-check without %(rest) considers whole line
ok 16 - tree exists
ok 17 - Type of tree is correct
ok 18 - Size of tree is correct
ok 19 - Type of tree is correct using --allow-unknown-type
ok 20 - Size of tree is correct using --allow-unknown-type
ok 21 - Pretty content of tree is correct
ok 22 - --batch-check output of tree is correct
ok 23 - custom --batch-check format
ok 24 - --batch-check with %(rest)
ok 25 - commit exists
ok 26 - Type of commit is correct
ok 27 - Size of commit is correct
ok 28 - Type of commit is correct using --allow-unknown-type
ok 29 - Size of commit is correct using --allow-unknown-type
ok 30 - Content of commit is correct
ok 31 - Pretty content of commit is correct
ok 32 - --batch output of commit is correct
ok 33 - --batch-check output of commit is correct
ok 34 - custom --batch-check format
ok 35 - --batch-check with %(rest)
ok 36 - --batch without type (commit)
ok 37 - --batch without size (commit)
ok 38 - tag exists
ok 39 - Type of tag is correct
ok 40 - Size of tag is correct
ok 41 - Type of tag is correct using --allow-unknown-type
ok 42 - Size of tag is correct using --allow-unknown-type
ok 43 - Content of tag is correct
ok 44 - Pretty content of tag is correct
ok 45 - --batch output of tag is correct
ok 46 - --batch-check output of tag is correct
ok 47 - custom --batch-check format
ok 48 - --batch-check with %(rest)
ok 49 - --batch without type (tag)
ok 50 - --batch without size (tag)
ok 51 - Reach a blob from a tag pointing to it
ok 52 - Passing -t with --batch fails
ok 53 - Passing --batch with -t fails
ok 54 - Passing -s with --batch fails
ok 55 - Passing --batch with -s fails
ok 56 - Passing -e with --batch fails
ok 57 - Passing --batch with -e fails
ok 58 - Passing -p with --batch fails
ok 59 - Passing --batch with -p fails
ok 60 - Passing <type> with --batch fails
ok 61 - Passing --batch with <type> fails
ok 62 - Passing sha1 with --batch fails
ok 63 - Passing -t with --batch-check fails
ok 64 - Passing --batch-check with -t fails
ok 65 - Passing -s with --batch-check fails
ok 66 - Passing --batch-check with -s fails
ok 67 - Passing -e with --batch-check fails
ok 68 - Passing --batch-check with -e fails
ok 69 - Passing -p with --batch-check fails
ok 70 - Passing --batch-check with -p fails
ok 71 - Passing <type> with --batch-check fails
ok 72 - Passing --batch-check with <type> fails
ok 73 - Passing sha1 with --batch-check fails
ok 74 - Passing -t with --follow-symlinks fails
ok 75 - Passing -s with --follow-symlinks fails
ok 76 - Passing -e with --follow-symlinks fails
ok 77 - Passing -p with --follow-symlinks fails
ok 78 - --batch-check for a non-existent named object
ok 79 - --batch-check for a non-existent hash
ok 80 - --batch for an existent and a non-existent hash
ok 81 - --batch-check for an empty line
ok 82 - empty --batch-check notices missing object
ok 83 - --batch with multiple sha1s gives correct format
ok 84 - --batch-check with multiple sha1s gives correct format
ok 85 - setup blobs which are likely to delta
ok 86 - confirm that neither loose blob is a delta
ok 87 - %(deltabase) reports packed delta bases
ok 88 - Type of broken object is correct
ok 89 - Size of broken object is correct
ok 90 - Type of broken object is correct when type is large
ok 91 - Size of large broken object is correct when type is large
ok 92 - prep for symlink tests
ok 93 - git cat-file --batch-check --follow-symlinks works for non-links
ok 94 - git cat-file --batch-check --follow-symlinks works for in-repo, same-dir links
ok 95 - git cat-file --batch-check --follow-symlinks works for in-repo, links to dirs
ok 96 - git cat-file --batch-check --follow-symlinks works for broken in-repo, same-dir links
ok 97 - git cat-file --batch-check --follow-symlinks works for same-dir links-to-links
ok 98 - git cat-file --batch-check --follow-symlinks works for parent-dir links
ok 99 - git cat-file --batch-check --follow-symlinks works for .. links
ok 100 - git cat-file --batch-check --follow-symlinks works for ../.. links
ok 101 - git cat-file --batch-check --follow-symlinks works for dir/ links
ok 102 - git cat-file --batch-check --follow-symlinks works for dir/subdir links
ok 103 - git cat-file --batch-check --follow-symlinks works for dir ->subdir links
ok 104 - git cat-file --batch-check --follow-symlinks works for out-of-repo symlinks
ok 105 - git cat-file --batch-check --follow-symlinks works for out-of-repo symlinks in dirs
ok 106 - git cat-file --batch-check --follow-symlinks works for out-of-repo symlinks in subdirs
ok 107 - git cat-file --batch-check --follow-symlinks works for symlinks with internal ..
ok 108 - git cat-file --batch-check --follow-symlink breaks loops
ok 109 - git cat-file --batch --follow-symlink returns correct sha and mode
ok 110 - cat-file --batch-all-objects shows all objects
ok 111 - cat-file --unordered works
# passed all 111 test(s)
1..111
*** t1007-hash-object.sh ***
ok 1 - multiple '--stdin's are rejected
ok 2 - Can't use --stdin and --stdin-paths together
ok 3 - Can't pass filenames as arguments with --stdin-paths
ok 4 - Can't use --path with --stdin-paths
ok 5 - Can't use --path with --no-filters
ok 6 - hash a file
ok 7 - blob does not exist in database
ok 8 - hash from stdin
ok 9 - blob does not exist in database
ok 10 - hash a file and write to database
ok 11 - blob exists in database
ok 12 - git hash-object --stdin file1 <file0 first operates on file0, then file1
ok 13 - set up crlf tests
ok 14 - check that appropriate filter is invoke when --path is used
ok 15 - gitattributes also work in a subdirectory
ok 16 - --path works in a subdirectory
ok 17 - check that --no-filters option works
ok 18 - check that --no-filters option works with --stdin-paths
ok 19 - hash from stdin and write to database (-w --stdin)
ok 20 - blob exists in database
ok 21 - hash from stdin and write to database (--stdin -w)
ok 22 - blob exists in database
ok 23 - hash two files with names on stdin
ok 24 - hash two files with names on stdin and write to database (-w --stdin-paths)
ok 25 - blob exists in database
ok 26 - blob exists in database
ok 27 - hash two files with names on stdin and write to database (--stdin-paths -w)
ok 28 - blob exists in database
ok 29 - blob exists in database
ok 30 - too-short tree
ok 31 - malformed mode in tree
ok 32 - empty filename in tree
ok 33 - corrupt commit
ok 34 - corrupt tag
ok 35 - hash-object complains about bogus type name
ok 36 - hash-object complains about truncated type name
ok 37 - --literally
ok 38 - --literally with extra-long type
# passed all 38 test(s)
1..38
*** t1008-read-tree-overlay.sh ***
ok 1 - setup
ok 2 - multi-read
# passed all 2 test(s)
1..2
*** t1009-read-tree-new-index.sh ***
ok 1 - setup
ok 2 - non-existent index file
ok 3 - empty index file
# passed all 3 test(s)
1..3
*** t1010-mktree.sh ***
ok 1 - setup
ok 2 - ls-tree piped to mktree (1)
ok 3 - ls-tree piped to mktree (2)
ok 4 - ls-tree output in wrong order given to mktree (1)
ok 5 - ls-tree output in wrong order given to mktree (2)
ok 6 - allow missing object with --missing
ok 7 - mktree refuses to read ls-tree -r output (1)
ok 8 - mktree refuses to read ls-tree -r output (2)
# passed all 8 test(s)
1..8
*** t1011-read-tree-sparse-checkout.sh ***
ok 1 - setup
ok 2 - read-tree without .git/info/sparse-checkout
ok 3 - read-tree with .git/info/sparse-checkout but disabled
ok 4 - read-tree --no-sparse-checkout with empty .git/info/sparse-checkout and enabled
ok 5 - read-tree with empty .git/info/sparse-checkout
ok 6 - match directories with trailing slash
ok 7 - match directories without trailing slash
ok 8 - match directories with negated patterns
ok 9 - match directories with negated patterns (2)
ok 10 - match directory pattern
ok 11 - checkout area changes
ok 12 - read-tree updates worktree, absent case
ok 13 - read-tree updates worktree, dirty case
ok 14 - read-tree removes worktree, dirty case
ok 15 - read-tree adds to worktree, absent case
ok 16 - read-tree adds to worktree, dirty case
ok 17 - index removal and worktree narrowing at the same time
ok 18 - read-tree --reset removes outside worktree
ok 19 - print errors when failed to update worktree
ok 20 - checkout without --ignore-skip-worktree-bits
ok 21 - checkout with --ignore-skip-worktree-bits
# passed all 21 test(s)
1..21
*** t1012-read-tree-df.sh ***
ok 1 - setup
ok 2 - 3-way (1)
ok 3 - 3-way (2)
ok 4 - 3-way (3)
ok 5 - 2-way (1)
# passed all 5 test(s)
1..5
*** t1013-read-tree-submodule.sh ***
ok 1 - git read-tree -u -m --recurse-submodules: added submodule is checked out
ok 2 - git read-tree -u -m --recurse-submodules: added submodule is checked out in empty dir
ok 3 - git read-tree -u -m --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 4 - git read-tree -u -m --recurse-submodules: replace tracked file with submodule checks out submodule
ok 5 - git read-tree -u -m --recurse-submodules: replace directory with submodule
ok 6 - git read-tree -u -m --recurse-submodules: removed submodule removes submodules working tree
ok 7 - git read-tree -u -m --recurse-submodules: removed submodule absorbs submodules .git directory
ok 8 - git read-tree -u -m --recurse-submodules: replace submodule with a file
not ok 9 - git read-tree -u -m --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 10 - git read-tree -u -m --recurse-submodules: modified submodule updates submodule work tree
ok 11 - git read-tree -u -m --recurse-submodules: updating to a missing submodule commit fails
ok 12 - git read-tree -u -m --recurse-submodules: added submodule doesn't remove untracked file with same name
not ok 13 - git read-tree -u -m --recurse-submodules: added submodule removes an untracked ignored file # TODO known breakage
not ok 14 - git read-tree -u -m --recurse-submodules: replace submodule with a directory # TODO known breakage
not ok 15 - git read-tree -u -m --recurse-submodules: replace submodule containing a .git directory with a directory must absorb the git dir # TODO known breakage
ok 16 - git read-tree -u -m --recurse-submodules: replace submodule with a file works ignores ignored files in submodule
ok 17 - git -c submodule.recurse=true read-tree -u -m: modified submodule updates submodule work tree
ok 18 - git read-tree -u -m --recurse-submodules: modified submodule updates submodule recursively
ok 19 - git read-tree -u --reset --recurse-submodules: added submodule is checked out
ok 20 - git read-tree -u --reset --recurse-submodules: added submodule is checked out in empty dir
ok 21 - git read-tree -u --reset --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 22 - git read-tree -u --reset --recurse-submodules: replace tracked file with submodule checks out submodule
ok 23 - git read-tree -u --reset --recurse-submodules: replace directory with submodule
ok 24 - git read-tree -u --reset --recurse-submodules: removed submodule removes submodules working tree
ok 25 - git read-tree -u --reset --recurse-submodules: removed submodule absorbs submodules .git directory
ok 26 - git read-tree -u --reset --recurse-submodules: replace submodule with a file
not ok 27 - git read-tree -u --reset --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 28 - git read-tree -u --reset --recurse-submodules: modified submodule updates submodule work tree
ok 29 - git read-tree -u --reset --recurse-submodules: updating to a missing submodule commit fails
ok 30 - git read-tree -u --reset --recurse-submodules: added submodule does remove untracked unignored file with same name when forced
ok 31 - git read-tree -u --reset --recurse-submodules: replace submodule with a directory
ok 32 - git read-tree -u --reset --recurse-submodules: replace submodule containing a .git directory with a directory must fail
ok 33 - git read-tree -u --reset --recurse-submodules: replace submodule with a file ignoring ignored files
ok 34 - git read-tree -u --reset --recurse-submodules: modified submodule does update submodule work tree from invalid commit
ok 35 - git read-tree -u --reset --recurse-submodules: updating submodules fixes .git links
ok 36 - git read-tree -u --reset --recurse-submodules: changed submodule worktree is reset
ok 37 - git read-tree -u -m: added submodule creates empty directory
ok 38 - git read-tree -u -m: added submodule leaves existing empty directory alone
ok 39 - git read-tree -u -m: replace tracked file with submodule creates empty directory
ok 40 - git read-tree -u -m: replace directory with submodule
ok 41 - git read-tree -u -m: removed submodule leaves submodule directory and its contents in place
ok 42 - git read-tree -u -m: removed submodule leaves submodule containing a .git directory alone
ok 43 - git read-tree -u -m: replace submodule with a directory must fail
ok 44 - git read-tree -u -m: replace submodule containing a .git directory with a directory must fail
not ok 45 - git read-tree -u -m: replace submodule with a file must fail # TODO known breakage
not ok 46 - git read-tree -u -m: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 47 - git read-tree -u -m: modified submodule does not update submodule work tree
ok 48 - git read-tree -u -m: modified submodule does not update submodule work tree to invalid commit
ok 49 - git read-tree -u -m: modified submodule does not update submodule work tree from invalid commit
ok 50 - git read-tree -u -m: added submodule doesn't remove untracked unignored file with same name
ok 51 - git read-tree -u --reset: added submodule creates empty directory
ok 52 - git read-tree -u --reset: added submodule leaves existing empty directory alone
ok 53 - git read-tree -u --reset: replace tracked file with submodule creates empty directory
ok 54 - git read-tree -u --reset: replace directory with submodule
ok 55 - git read-tree -u --reset: removed submodule leaves submodule directory and its contents in place
ok 56 - git read-tree -u --reset: removed submodule leaves submodule containing a .git directory alone
not ok 57 - git read-tree -u --reset: replace submodule with a directory must fail # TODO known breakage
not ok 58 - git read-tree -u --reset: replace submodule containing a .git directory with a directory must fail # TODO known breakage
not ok 59 - git read-tree -u --reset: replace submodule with a file must fail # TODO known breakage
not ok 60 - git read-tree -u --reset: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 61 - git read-tree -u --reset: modified submodule does not update submodule work tree
ok 62 - git read-tree -u --reset: modified submodule does not update submodule work tree to invalid commit
ok 63 - git read-tree -u --reset: modified submodule does not update submodule work tree from invalid commit
ok 64 - git read-tree -u --reset: added submodule does remove untracked unignored file with same name when forced
# still have 11 known breakage(s)
# passed all remaining 53 test(s)
1..64
*** t1014-read-tree-confusing.sh ***
ok 1 - create base tree
ok 2 - enable core.protectHFS for rejection tests
ok 3 - enable core.protectNTFS for rejection tests
ok 4 - reject . at end of path
ok 5 - reject . as subtree
ok 6 - reject .. at end of path
ok 7 - reject .. as subtree
ok 8 - reject .git at end of path
ok 9 - reject .git as subtree
ok 10 - reject .GIT at end of path
ok 11 - reject .GIT as subtree
ok 12 - reject {u200c}.Git at end of path
ok 13 - reject {u200c}.Git as subtree
ok 14 - reject .gI{u200c}T at end of path
ok 15 - reject .gI{u200c}T as subtree
ok 16 - reject .GiT{u200c} at end of path
ok 17 - reject .GiT{u200c} as subtree
ok 18 - reject git~1 at end of path
ok 19 - reject git~1 as subtree
ok 20 - reject .git.{space} at end of path
ok 21 - reject .git.{space} as subtree
ok 22 - reject backslashes at end of path
ok 23 - reject backslashes as subtree
ok 24 - reject backslashes2 at end of path
ok 25 - reject backslashes2 as subtree
ok 26 - utf-8 paths allowed with core.protectHFS off
# passed all 26 test(s)
1..26
*** t1015-read-index-unmerged.sh ***
ok 1 - setup modify/delete + directory/file conflict
ok 2 - read-tree --reset cleans unmerged entries
ok 3 - One reset --hard cleans unmerged entries
ok 4 - setup directory/file conflict + simple edit/edit
ok 5 - git merge --abort succeeds despite D/F conflict
ok 6 - git am --skip succeeds despite D/F conflict
# passed all 6 test(s)
1..6
*** t1020-subdirectory.sh ***
ok 1 - setup
ok 2 - update-index and ls-files
ok 3 - cat-file
ok 4 - diff-files
ok 5 - write-tree
ok 6 - checkout-index
ok 7 - read-tree
ok 8 - alias expansion
ok 9 - !alias expansion
ok 10 - GIT_PREFIX for !alias
ok 11 - GIT_PREFIX for built-ins
ok 12 - no file/rev ambiguity check inside .git
ok 13 - no file/rev ambiguity check inside a bare repo (explicit GIT_DIR)
ok 14 - no file/rev ambiguity check inside a bare repo
ok 15 - detection should not be fooled by a symlink
# passed all 15 test(s)
1..15
*** t1021-rerere-in-workdir.sh ***
ok 1 - setup
ok 2 - rerere in workdir
not ok 3 - rerere in workdir (relative) # TODO known breakage
# still have 1 known breakage(s)
# passed all remaining 2 test(s)
1..3
*** t1050-large.sh ***
ok 1 - setup
ok 2 - add with -c core.compression=0
ok 3 - add with -c core.compression=9
ok 4 - add with -c core.compression=0 -c pack.compression=0
ok 5 - add with -c core.compression=9 -c pack.compression=0
ok 6 - add with -c core.compression=0 -c pack.compression=9
ok 7 - add with -c core.compression=9 -c pack.compression=9
ok 8 - add with -c pack.compression=0
ok 9 - add with -c pack.compression=9
ok 10 - add a large file or two
ok 11 - checkout a large file
ok 12 - packsize limit
ok 13 - diff --raw
ok 14 - diff --stat
ok 15 - diff
ok 16 - diff --cached
ok 17 - hash-object
ok 18 - cat-file a large file
ok 19 - cat-file a large file from a tag
ok 20 - git-show a large file
ok 21 - index-pack
ok 22 - repack
ok 23 - pack-objects with large loose object
ok 24 - tar achiving
ok 25 - zip achiving, store only
ok 26 - zip achiving, deflate
ok 27 - fsck large blobs
# passed all 27 test(s)
1..27
*** t1051-large-conversion.sh ***
ok 1 - setup input tests
ok 2 - autocrlf=true converts on input
ok 3 - eol=crlf converts on input
ok 4 - ident converts on input
ok 5 - user-defined filters convert on input
ok 6 - setup output tests
ok 7 - autocrlf=true converts on output
ok 8 - eol=crlf converts on output
ok 9 - user-defined filters convert on output
ok 10 - ident converts on output
# passed all 10 test(s)
1..10
*** t1060-object-corruption.sh ***
ok 1 - setup corrupt repo
ok 2 - setup repo with missing object
ok 3 - setup repo with misnamed object
ok 4 - streaming a corrupt blob fails
ok 5 - getting type of a corrupt blob fails
ok 6 - read-tree -u detects bit-errors in blobs
ok 7 - read-tree -u detects missing objects
ok 8 - clone --no-local --bare detects corruption
ok 9 - clone --no-local --bare detects missing object
ok 10 - clone --no-local --bare detects misnamed object
ok 11 - clone --local detects corruption
ok 12 - error detected during checkout leaves repo intact
ok 13 - clone --local detects missing objects
not ok 14 - clone --local detects misnamed objects # TODO known breakage
ok 15 - fetch into corrupted repo with index-pack
# still have 1 known breakage(s)
# passed all remaining 14 test(s)
1..15
*** t1090-sparse-checkout-scope.sh ***
ok 1 - setup
ok 2 - create feature branch
ok 3 - perform sparse checkout of master
ok 4 - merge feature branch into sparse checkout of master
ok 5 - return to full checkout of master
# passed all 5 test(s)
1..5
*** t1100-commit-tree-options.sh ***
ok 1 - test preparation: write empty tree
ok 2 - construct commit
ok 3 - read commit
ok 4 - compare commit
ok 5 - flags and then non flags
# passed all 5 test(s)
1..5
*** t1300-config.sh ***
ok 1 - clear default config
ok 2 - initial
ok 3 - mixed case
ok 4 - similar section
ok 5 - uppercase section
ok 6 - replace with non-match
ok 7 - replace with non-match (actually matching)
ok 8 - non-match result
ok 9 - find mixed-case key by canonical name
ok 10 - find mixed-case key by non-canonical name
ok 11 - subsections are not canonicalized by git-config
ok 12 - unset with cont. lines
ok 13 - unset with cont. lines is correct
ok 14 - multiple unset
ok 15 - multiple unset is correct
ok 16 - --replace-all missing value
ok 17 - --replace-all
ok 18 - all replaced
ok 19 - really mean test
ok 20 - really really mean test
ok 21 - get value
ok 22 - unset
ok 23 - multivar
ok 24 - non-match
ok 25 - non-match value
ok 26 - multi-valued get returns final one
ok 27 - multi-valued get-all returns all
ok 28 - multivar replace
ok 29 - ambiguous unset
ok 30 - invalid unset
ok 31 - multivar unset
ok 32 - invalid key
ok 33 - correct key
ok 34 - hierarchical section
ok 35 - hierarchical section value
ok 36 - working --list
ok 37 - --list without repo produces empty output
ok 38 - --name-only --list
ok 39 - --get-regexp
ok 40 - --name-only --get-regexp
ok 41 - --add
ok 42 - get variable with no value
ok 43 - get variable with empty value
ok 44 - get-regexp variable with no value
ok 45 - get-regexp --bool variable with no value
ok 46 - get-regexp variable with empty value
ok 47 - get bool variable with no value
ok 48 - get bool variable with empty value
ok 49 - no arguments, but no crash
ok 50 - new section is partial match of another
ok 51 - new variable inserts into proper section
ok 52 - alternative --file (non-existing file should fail)
ok 53 - alternative GIT_CONFIG
ok 54 - alternative GIT_CONFIG (--file)
ok 55 - alternative GIT_CONFIG (--file=-)
ok 56 - setting a value in stdin is an error
ok 57 - editing stdin is an error
ok 58 - refer config from subdirectory
ok 59 - refer config from subdirectory via --file
ok 60 - --set in alternative file
ok 61 - rename section
ok 62 - rename succeeded
ok 63 - rename non-existing section
ok 64 - rename succeeded
ok 65 - rename another section
ok 66 - rename succeeded
ok 67 - rename a section with a var on the same line
ok 68 - rename succeeded
ok 69 - renaming empty section name is rejected
ok 70 - renaming to bogus section is rejected
ok 71 - remove section
ok 72 - section was removed properly
ok 73 - section ending
ok 74 - numbers
ok 75 - --int is at least 64 bits
ok 76 - invalid unit
ok 77 - line number is reported correctly
ok 78 - invalid stdin config
ok 79 - bool
ok 80 - invalid bool (--get)
ok 81 - invalid bool (set)
ok 82 - set --bool
ok 83 - set --int
ok 84 - get --bool-or-int
ok 85 - set --bool-or-int
ok 86 - set --path
ok 87 - get --path
ok 88 - get --path copes with unset $HOME
ok 89 - get --path barfs on boolean variable
ok 90 - get --expiry-date
ok 91 - get --type=color
ok 92 - set --type=color
ok 93 - get --type=color barfs on non-color
ok 94 - set --type=color barfs on non-color
ok 95 - quoting
ok 96 - key with newline
ok 97 - value with newline
ok 98 - value continued on next line
ok 99 - --null --list
ok 100 - --null --get-regexp
ok 101 - inner whitespace kept verbatim
ok 102 - symlinked configuration
ok 103 - nonexistent configuration
ok 104 - symlink to nonexistent configuration
ok 105 - check split_cmdline return
ok 106 - git -c "key=value" support
ok 107 - git -c can represent empty string
ok 108 - key sanity-checking
ok 109 - git -c works with aliases of builtins
ok 110 - aliases can be CamelCased
ok 111 - git -c does not split values on equals
ok 112 - git -c dies on bogus config
ok 113 - git -c complains about empty key
ok 114 - git -c complains about empty key and value
ok 115 - multiple git -c appends config
ok 116 - last one wins: two level vars
ok 117 - last one wins: three level vars
ok 118 - old-fashioned settings are case insensitive
ok 119 - setting different case sensitive subsections 
ok 120 - git -c a=VAL rejects invalid 'a'
ok 121 - git -c .a=VAL rejects invalid '.a'
ok 122 - git -c a.=VAL rejects invalid 'a.'
ok 123 - git -c a.0b=VAL rejects invalid 'a.0b'
ok 124 - git -c a.b c.=VAL rejects invalid 'a.b c.'
ok 125 - git -c a.b c.0d=VAL rejects invalid 'a.b c.0d'
ok 126 - git -c a.b=VAL works with valid 'a.b'
ok 127 - git -c a.b c.d=VAL works with valid 'a.b c.d'
ok 128 - git -c is not confused by empty environment
ok 129 - detect bogus GIT_CONFIG_PARAMETERS
ok 130 - git config --edit works
ok 131 - git config --edit respects core.editor
ok 132 - barf on syntax error
ok 133 - barf on incomplete section header
ok 134 - barf on incomplete string
ok 135 - urlmatch
ok 136 - urlmatch favors more specific URLs
ok 137 - urlmatch with wildcard
ok 138 - --unset last key removes section (except if commented)
ok 139 - --unset-all removes section if empty & uncommented
ok 140 - adding a key into an empty section reuses header
ok 141 - preserves existing permissions
ok 142 - set up --show-origin tests
ok 143 - --show-origin with --list
ok 144 - --show-origin with --list --null
ok 145 - --show-origin with single file
ok 146 - --show-origin with --get-regexp
ok 147 - --show-origin getting a single key
ok 148 - set up custom config file
ok 149 - --show-origin escape special file name characters
ok 150 - --show-origin stdin
ok 151 - --show-origin stdin with file include
ok 152 - --show-origin blob
ok 153 - --show-origin blob ref
ok 154 - --local requires a repo
ok 155 - identical modern --type specifiers are allowed
ok 156 - identical legacy --type specifiers are allowed
ok 157 - identical mixed --type specifiers are allowed
ok 158 - non-identical modern --type specifiers are not allowed
ok 159 - non-identical legacy --type specifiers are not allowed
ok 160 - non-identical mixed --type specifiers are not allowed
ok 161 - --type allows valid type specifiers
ok 162 - --no-type unsets type specifiers
ok 163 - unset type specifiers may be reset to conflicting ones
ok 164 - --type rejects unknown specifiers
ok 165 - --replace-all does not invent newlines
# passed all 165 test(s)
1..165
*** t1301-shared-repo.sh ***
ok 1 - shared = 0400 (faulty permission u-w)
ok 2 - shared=1 does not clear bits preset by umask 002
ok 3 - shared=1 does not clear bits preset by umask 022
ok 4 - shared=all
ok 5 - update-server-info honors core.sharedRepository
ok 6 - shared = 0660 (r--r-----) ro
ok 7 - shared = 0660 (rw-rw----) rw
ok 8 - shared = 0640 (r--r-----) ro
ok 9 - shared = 0640 (rw-r-----) rw
ok 10 - shared = 0600 (r--------) ro
ok 11 - shared = 0600 (rw-------) rw
ok 12 - shared = 0666 (r--r--r--) ro
ok 13 - shared = 0666 (rw-rw-rw-) rw
ok 14 - shared = 0664 (r--r--r--) ro
ok 15 - shared = 0664 (rw-rw-r--) rw
ok 16 - info/refs respects umask in unshared repo
ok 17 - git reflog expire honors core.sharedRepository
ok 18 - forced modes
ok 19 - remote init does not use config from cwd
ok 20 - re-init respects core.sharedrepository (local)
ok 21 - re-init respects core.sharedrepository (remote)
ok 22 - template can set core.sharedrepository
# passed all 22 test(s)
1..22
*** t1302-repo-version.sh ***
ok 1 - setup
ok 2 - gitdir selection on normal repos
ok 3 - gitdir selection on unsupported repo
ok 4 - gitdir not required mode
ok 5 - gitdir required mode
ok 6 - allow version=0 
ok 7 - allow version=1 
ok 8 - allow version=1 noop
ok 9 - abort version=1 no-such-extension
ok 10 - allow version=0 no-such-extension
ok 11 - precious-objects allowed
ok 12 - precious-objects blocks destructive repack
ok 13 - other repacks are OK
ok 14 - precious-objects blocks prune
ok 15 - gc runs without complaint
# passed all 15 test(s)
1..15
*** t1303-wacky-config.sh ***
ok 1 - modify same key
ok 2 - add key in same section
ok 3 - add key in different section
ok 4 - make sure git config escapes section names properly
ok 5 - do not crash on special long config line
ok 6 - get many entries
ok 7 - get many entries by regex
ok 8 - add and replace one of many entries
ok 9 - replace many entries
ok 10 - unset many entries
ok 11 - --add appends new value after existing empty value
# passed all 11 test(s)
1..11
*** t1304-default-acl.sh ***
ok 1 - checking for a working acl setup
ok 2 # skip Setup test repo (missing SETFACL)
ok 3 # skip Objects creation does not break ACLs with restrictive umask (missing SETFACL)
ok 4 # skip git gc does not break ACLs with restrictive umask (missing SETFACL)
# passed all 4 test(s)
1..4
*** t1305-config-include.sh ***
ok 1 - include file by absolute path
ok 2 - include file by relative path
ok 3 - chained relative paths
ok 4 - include paths get tilde-expansion
ok 5 - include options can still be examined
ok 6 - listing includes option and expansion
ok 7 - single file lookup does not expand includes by default
ok 8 - single file list does not expand includes by default
ok 9 - writing config file does not expand includes
ok 10 - config modification does not affect includes
ok 11 - missing include files are ignored
ok 12 - absolute includes from command line work
ok 13 - relative includes from command line fail
ok 14 - absolute includes from blobs work
ok 15 - relative includes from blobs fail
ok 16 - absolute includes from stdin work
ok 17 - relative includes from stdin line fail
ok 18 - conditional include, both unanchored
ok 19 - conditional include, $HOME expansion
ok 20 - conditional include, full pattern
ok 21 - conditional include, relative path
ok 22 - conditional include, both unanchored, icase
ok 23 - conditional include, early config reading
ok 24 - conditional include, set up symlinked $HOME
ok 25 - conditional include, $HOME expansion with symlinks
ok 26 - conditional include, relative path with symlinks
ok 27 - conditional include, gitdir matching symlink
ok 28 - conditional include, gitdir matching symlink, icase
ok 29 - include cycles are detected
# passed all 29 test(s)
1..29
*** t1306-xdg-files.sh ***
ok 1 - read config: xdg file exists and ~/.gitconfig doesn't
ok 2 - read config: xdg file exists and ~/.gitconfig exists
ok 3 - read with --get: xdg file exists and ~/.gitconfig doesn't
ok 4 - "$XDG_CONFIG_HOME overrides $HOME/.config/git
ok 5 - read with --get: xdg file exists and ~/.gitconfig exists
ok 6 - read with --list: xdg file exists and ~/.gitconfig doesn't
ok 7 - read with --list: xdg file exists and ~/.gitconfig exists
ok 8 - Setup
ok 9 - Exclusion of a file in the XDG ignore file
ok 10 - $XDG_CONFIG_HOME overrides $HOME/.config/git/ignore
ok 11 - Exclusion in both XDG and local ignore files
ok 12 - Exclusion in a non-XDG global ignore file
ok 13 - Checking XDG ignore file when HOME is unset
ok 14 - Checking attributes in the XDG attributes file
ok 15 - Checking XDG attributes when HOME is unset
ok 16 - $XDG_CONFIG_HOME overrides $HOME/.config/git/attributes
ok 17 - Checking attributes in both XDG and local attributes files
ok 18 - Checking attributes in a non-XDG global attributes file
ok 19 - write: xdg file exists and ~/.gitconfig doesn't
ok 20 - write: xdg file exists and ~/.gitconfig exists
ok 21 - write: ~/.config/git/ exists and config file doesn't
# passed all 21 test(s)
1..21
*** t1307-config-blob.sh ***
ok 1 - create config blob
ok 2 - list config blob contents
ok 3 - fetch value from blob
ok 4 - reading non-existing value from blob is an error
ok 5 - reading from blob and file is an error
ok 6 - reading from missing ref is an error
ok 7 - reading from non-blob is an error
ok 8 - setting a value in a blob is an error
ok 9 - deleting a value in a blob is an error
ok 10 - editing a blob is an error
ok 11 - parse errors in blobs are properly attributed
ok 12 - can parse blob ending with CR
ok 13 - config --blob outside of a repository is an error
# passed all 13 test(s)
1..13
*** t1308-config-set.sh ***
ok 1 - setup default config
ok 2 - get value for a simple key
ok 3 - get value for a key with value as an empty string
ok 4 - get value for a key with value as NULL
ok 5 - upper case key
ok 6 - mixed case key
ok 7 - key and value with mixed case
ok 8 - key with case sensitive subsection
ok 9 - key with case insensitive section header
ok 10 - key with case insensitive section header & variable
ok 11 - find value with misspelled key
ok 12 - find value with the highest priority
ok 13 - find integer value for a key
ok 14 - find string value for a key
ok 15 - check line error when NULL string is queried
ok 16 - find integer if value is non parse-able
ok 17 - find bool value for the entered key
ok 18 - find multiple values
ok 19 - find value from a configset
ok 20 - find value with highest priority from a configset
ok 21 - find value_list for a key from a configset
ok 22 - proper error on non-existent files
ok 23 - proper error on directory "files"
ok 24 - proper error on non-accessible files
ok 25 - proper error on error in default config files
ok 26 - proper error on error in custom config files
ok 27 - check line errors for malformed values
ok 28 - error on modifying repo config without repo
ok 29 - iteration shows correct origins
# passed all 29 test(s)
1..29
*** t1309-early-config.sh ***
ok 1 - read early config
ok 2 - in a sub-directory
ok 3 - ceiling
ok 4 - ceiling #2
ok 5 - read config file in right order
ok 6 - ignore .git/ with incompatible repository version
not ok 7 - ignore .git/ with invalid repository version # TODO known breakage
not ok 8 - ignore .git/ with invalid config # TODO known breakage
# still have 2 known breakage(s)
# passed all remaining 6 test(s)
1..8
*** t1310-config-default.sh ***
ok 1 - uses --default when entry missing
ok 2 - does not use --default when entry present
ok 3 - canonicalizes --default with appropriate type
ok 4 - dies when --default cannot be parsed
ok 5 - does not allow --default without --get
# passed all 5 test(s)
1..5
*** t1350-config-hooks-path.sh ***
ok 1 - set up a pre-commit hook in core.hooksPath
ok 2 - Check that various forms of specifying core.hooksPath work
ok 3 - git rev-parse --git-path hooks
# passed all 3 test(s)
1..3
*** t1400-update-ref.sh ***
ok 1 - setup
ok 2 - create refs/heads/master
ok 3 - create refs/heads/master with oldvalue verification
ok 4 - fail to delete refs/heads/master with stale ref
ok 5 - delete refs/heads/master
ok 6 - delete refs/heads/master without oldvalue verification
ok 7 - fail to create refs/heads/gu/fixes
ok 8 - create refs/heads/master (by HEAD)
ok 9 - create refs/heads/master (by HEAD) with oldvalue verification
ok 10 - fail to delete refs/heads/master (by HEAD) with stale ref
ok 11 - delete refs/heads/master (by HEAD)
ok 12 - deleting current branch adds message to HEAD's log
ok 13 - deleting by HEAD adds message to HEAD's log
ok 14 - update-ref does not create reflogs by default
ok 15 - update-ref creates reflogs with --create-reflog
ok 16 - creates no reflog in bare repository
ok 17 - core.logAllRefUpdates=true creates reflog in bare repository
ok 18 - core.logAllRefUpdates=true does not create reflog by default
ok 19 - core.logAllRefUpdates=always creates reflog by default
ok 20 - core.logAllRefUpdates=always creates no reflog for ORIG_HEAD
ok 21 - --no-create-reflog overrides core.logAllRefUpdates=always
ok 22 - create refs/heads/master (by HEAD)
ok 23 - pack refs
ok 24 - move refs/heads/master (by HEAD)
ok 25 - delete refs/heads/master (by HEAD) should remove both packed and loose refs/heads/master
ok 26 - delete symref without dereference
ok 27 - delete symref without dereference when the referred ref is packed
ok 28 - update-ref -d is not confused by self-reference
ok 29 - update-ref --no-deref -d can delete self-reference
ok 30 - update-ref --no-deref -d can delete reference to bad ref
ok 31 - (not) create HEAD with old sha1
ok 32 - (not) prior created .git/refs/heads/master
ok 33 - create HEAD
ok 34 - (not) change HEAD with wrong SHA1
ok 35 - (not) changed .git/refs/heads/master
ok 36 - create refs/heads/master (logged by touch)
ok 37 - update refs/heads/master (logged by touch)
ok 38 - set refs/heads/master (logged by touch)
ok 39 - empty directory removal
ok 40 - symref empty directory removal
ok 41 - verifying refs/heads/master's log (logged by touch)
ok 42 - create refs/heads/master (logged by config)
ok 43 - update refs/heads/master (logged by config)
ok 44 - set refs/heads/master (logged by config)
ok 45 - verifying refs/heads/master's log (logged by config)
ok 46 - Query "master@{May 25 2005}" (before history)
ok 47 - Query master@{2005-05-25} (before history)
ok 48 - Query "master@{May 26 2005 23:31:59}" (1 second before history)
ok 49 - Query "master@{May 26 2005 23:32:00}" (exactly history start)
ok 50 - Query "master@{May 26 2005 23:32:30}" (first non-creation change)
ok 51 - Query "master@{2005-05-26 23:33:01}" (middle of history with gap)
ok 52 - Query "master@{2005-05-26 23:38:00}" (middle of history)
ok 53 - Query "master@{2005-05-26 23:43:00}" (exact end of history)
ok 54 - Query "master@{2005-05-28}" (past end of history)
ok 55 - creating initial files
ok 56 - git commit logged updates
ok 57 - git cat-file blob master:F (expect OTHER)
ok 58 - git cat-file blob master@{2005-05-26 23:30}:F (expect TEST)
ok 59 - git cat-file blob master@{2005-05-26 23:42}:F (expect OTHER)
ok 60 - given old value for missing pseudoref, do not create
ok 61 - create pseudoref
ok 62 - overwrite pseudoref with no old value given
ok 63 - overwrite pseudoref with correct old value
ok 64 - do not overwrite pseudoref with wrong old value
ok 65 - delete pseudoref
ok 66 - do not delete pseudoref with wrong old value
ok 67 - delete pseudoref with correct old value
ok 68 - create pseudoref with old OID zero
ok 69 - do not overwrite pseudoref with old OID zero
ok 70 - stdin test setup
ok 71 - -z fails without --stdin
ok 72 - stdin works with no input
ok 73 - stdin fails on empty line
ok 74 - stdin fails on only whitespace
ok 75 - stdin fails on leading whitespace
ok 76 - stdin fails on unknown command
ok 77 - stdin fails on unbalanced quotes
ok 78 - stdin fails on invalid escape
ok 79 - stdin fails on junk after quoted argument
ok 80 - stdin fails create with no ref
ok 81 - stdin fails create with no new value
ok 82 - stdin fails create with too many arguments
ok 83 - stdin fails update with no ref
ok 84 - stdin fails update with no new value
ok 85 - stdin fails update with too many arguments
ok 86 - stdin fails delete with no ref
ok 87 - stdin fails delete with too many arguments
ok 88 - stdin fails verify with too many arguments
ok 89 - stdin fails option with unknown name
ok 90 - stdin fails with duplicate refs
ok 91 - stdin create ref works
ok 92 - stdin does not create reflogs by default
ok 93 - stdin creates reflogs with --create-reflog
ok 94 - stdin succeeds with quoted argument
ok 95 - stdin succeeds with escaped character
ok 96 - stdin update ref creates with zero old value
ok 97 - stdin update ref creates with empty old value
ok 98 - stdin create ref works with path with space to blob
ok 99 - stdin update ref fails with wrong old value
ok 100 - stdin update ref fails with bad old value
ok 101 - stdin create ref fails with bad new value
ok 102 - stdin create ref fails with zero new value
ok 103 - stdin update ref works with right old value
ok 104 - stdin delete ref fails with wrong old value
ok 105 - stdin delete ref fails with zero old value
ok 106 - stdin update symref works option no-deref
ok 107 - stdin delete symref works option no-deref
ok 108 - stdin delete ref works with right old value
ok 109 - stdin update/create/verify combination works
ok 110 - stdin verify succeeds for correct value
ok 111 - stdin verify succeeds for missing reference
ok 112 - stdin verify treats no value as missing
ok 113 - stdin verify fails for wrong value
ok 114 - stdin verify fails for mistaken null value
ok 115 - stdin verify fails for mistaken empty value
ok 116 - stdin update refs works with identity updates
ok 117 - stdin update refs fails with wrong old value
ok 118 - stdin delete refs works with packed and loose refs
ok 119 - stdin -z works on empty input
ok 120 - stdin -z fails on empty line
ok 121 - stdin -z fails on empty command
ok 122 - stdin -z fails on only whitespace
ok 123 - stdin -z fails on leading whitespace
ok 124 - stdin -z fails on unknown command
ok 125 - stdin -z fails create with no ref
ok 126 - stdin -z fails create with no new value
ok 127 - stdin -z fails create with too many arguments
ok 128 - stdin -z fails update with no ref
ok 129 - stdin -z fails update with too few args
ok 130 - stdin -z emits warning with empty new value
ok 131 - stdin -z fails update with no new value
ok 132 - stdin -z fails update with no old value
ok 133 - stdin -z fails update with too many arguments
ok 134 - stdin -z fails delete with no ref
ok 135 - stdin -z fails delete with no old value
ok 136 - stdin -z fails delete with too many arguments
ok 137 - stdin -z fails verify with too many arguments
ok 138 - stdin -z fails verify with no old value
ok 139 - stdin -z fails option with unknown name
ok 140 - stdin -z fails with duplicate refs
ok 141 - stdin -z create ref works
ok 142 - stdin -z update ref creates with zero old value
ok 143 - stdin -z update ref creates with empty old value
ok 144 - stdin -z create ref works with path with space to blob
ok 145 - stdin -z update ref fails with wrong old value
ok 146 - stdin -z update ref fails with bad old value
ok 147 - stdin -z create ref fails when ref exists
ok 148 - stdin -z create ref fails with bad new value
ok 149 - stdin -z create ref fails with empty new value
ok 150 - stdin -z update ref works with right old value
ok 151 - stdin -z delete ref fails with wrong old value
ok 152 - stdin -z delete ref fails with zero old value
ok 153 - stdin -z update symref works option no-deref
ok 154 - stdin -z delete symref works option no-deref
ok 155 - stdin -z delete ref works with right old value
ok 156 - stdin -z update/create/verify combination works
ok 157 - stdin -z verify succeeds for correct value
ok 158 - stdin -z verify succeeds for missing reference
ok 159 - stdin -z verify treats no value as missing
ok 160 - stdin -z verify fails for wrong value
ok 161 - stdin -z verify fails for mistaken null value
ok 162 - stdin -z verify fails for mistaken empty value
ok 163 - stdin -z update refs works with identity updates
ok 164 - stdin -z update refs fails with wrong old value
ok 165 - stdin -z delete refs works with packed and loose refs
ok 166 - fails with duplicate HEAD update
ok 167 - fails with duplicate ref update via symref
ok 168 - large transaction creating branches does not burst open file limit
ok 169 - large transaction deleting branches does not burst open file limit
ok 170 - handle per-worktree refs in refs/bisect
# passed all 170 test(s)
1..170
*** t1401-symbolic-ref.sh ***
ok 1 - symbolic-ref writes HEAD
ok 2 - symbolic-ref reads HEAD
ok 3 - symbolic-ref refuses non-ref for HEAD
ok 4 - symbolic-ref refuses bare sha1
ok 5 - HEAD cannot be removed
ok 6 - symbolic-ref can be deleted
ok 7 - symbolic-ref can delete dangling symref
ok 8 - symbolic-ref fails to delete missing FOO
ok 9 - symbolic-ref fails to delete real ref
ok 10 - create large ref name
ok 11 - symbolic-ref can point to large ref name
ok 12 - we can parse long symbolic ref
ok 13 - symbolic-ref reports failure in exit code
ok 14 - symbolic-ref writes reflog entry
ok 15 - symbolic-ref does not create ref d/f conflicts
ok 16 - symbolic-ref can overwrite pointer to invalid name
ok 17 - symbolic-ref can resolve d/f name (EISDIR)
ok 18 - symbolic-ref can resolve d/f name (ENOTDIR)
# passed all 18 test(s)
1..18
*** t1402-check-ref-format.sh ***
ok 1 - ref name '' is invalid
ok 2 - ref name '/' is invalid
ok 3 - ref name '/' is invalid with options --allow-onelevel
ok 4 - ref name '/' is invalid with options --normalize
ok 5 - ref name '/' is invalid with options --allow-onelevel --normalize
ok 6 - ref name 'foo/bar/baz' is valid
ok 7 - ref name 'foo/bar/baz' is valid with options --normalize
ok 8 - ref name 'refs///heads/foo' is invalid
ok 9 - ref name 'refs///heads/foo' is valid with options --normalize
ok 10 - ref name 'heads/foo/' is invalid
ok 11 - ref name '/heads/foo' is invalid
ok 12 - ref name '/heads/foo' is valid with options --normalize
ok 13 - ref name '///heads/foo' is invalid
ok 14 - ref name '///heads/foo' is valid with options --normalize
ok 15 - ref name './foo' is invalid
ok 16 - ref name './foo/bar' is invalid
ok 17 - ref name 'foo/./bar' is invalid
ok 18 - ref name 'foo/bar/.' is invalid
ok 19 - ref name '.refs/foo' is invalid
ok 20 - ref name 'refs/heads/foo.' is invalid
ok 21 - ref name 'heads/foo..bar' is invalid
ok 22 - ref name 'heads/foo?bar' is invalid
ok 23 - ref name 'foo./bar' is valid
ok 24 - ref name 'heads/foo.lock' is invalid
ok 25 - ref name 'heads///foo.lock' is invalid
ok 26 - ref name 'foo.lock/bar' is invalid
ok 27 - ref name 'foo.lock///bar' is invalid
ok 28 - ref name 'heads/foo@bar' is valid
ok 29 - ref name 'heads/v@{ation' is invalid
ok 30 - ref name 'heads/foo\bar' is invalid
ok 31 - ref name 'heads/foo	' is invalid
ok 32 - ref name 'heads/foo' is invalid
ok 33 - ref name 'heads/fuß' is valid
ok 34 - ref name 'heads/*foo/bar' is valid with options --refspec-pattern
ok 35 - ref name 'heads/foo*/bar' is valid with options --refspec-pattern
ok 36 - ref name 'heads/f*o/bar' is valid with options --refspec-pattern
ok 37 - ref name 'heads/f*o*/bar' is invalid with options --refspec-pattern
ok 38 - ref name 'heads/foo*/bar*' is invalid with options --refspec-pattern
ok 39 - ref name 'foo' is invalid
ok 40 - ref name 'foo' is valid with options --allow-onelevel
ok 41 - ref name 'foo' is invalid with options --refspec-pattern
ok 42 - ref name 'foo' is valid with options --refspec-pattern --allow-onelevel
ok 43 - ref name 'foo' is invalid with options --normalize
ok 44 - ref name 'foo' is valid with options --allow-onelevel --normalize
ok 45 - ref name 'foo/bar' is valid
ok 46 - ref name 'foo/bar' is valid with options --allow-onelevel
ok 47 - ref name 'foo/bar' is valid with options --refspec-pattern
ok 48 - ref name 'foo/bar' is valid with options --refspec-pattern --allow-onelevel
ok 49 - ref name 'foo/bar' is valid with options --normalize
ok 50 - ref name 'foo/*' is invalid
ok 51 - ref name 'foo/*' is invalid with options --allow-onelevel
ok 52 - ref name 'foo/*' is valid with options --refspec-pattern
ok 53 - ref name 'foo/*' is valid with options --refspec-pattern --allow-onelevel
ok 54 - ref name '*/foo' is invalid
ok 55 - ref name '*/foo' is invalid with options --allow-onelevel
ok 56 - ref name '*/foo' is valid with options --refspec-pattern
ok 57 - ref name '*/foo' is valid with options --refspec-pattern --allow-onelevel
ok 58 - ref name '*/foo' is invalid with options --normalize
ok 59 - ref name '*/foo' is valid with options --refspec-pattern --normalize
ok 60 - ref name 'foo/*/bar' is invalid
ok 61 - ref name 'foo/*/bar' is invalid with options --allow-onelevel
ok 62 - ref name 'foo/*/bar' is valid with options --refspec-pattern
ok 63 - ref name 'foo/*/bar' is valid with options --refspec-pattern --allow-onelevel
ok 64 - ref name '*' is invalid
ok 65 - ref name '*' is invalid with options --allow-onelevel
ok 66 - ref name '*' is invalid with options --refspec-pattern
ok 67 - ref name '*' is valid with options --refspec-pattern --allow-onelevel
ok 68 - ref name 'foo/*/*' is invalid with options --refspec-pattern
ok 69 - ref name 'foo/*/*' is invalid with options --refspec-pattern --allow-onelevel
ok 70 - ref name '*/foo/*' is invalid with options --refspec-pattern
ok 71 - ref name '*/foo/*' is invalid with options --refspec-pattern --allow-onelevel
ok 72 - ref name '*/*/foo' is invalid with options --refspec-pattern
ok 73 - ref name '*/*/foo' is invalid with options --refspec-pattern --allow-onelevel
ok 74 - ref name '/foo' is invalid
ok 75 - ref name '/foo' is invalid with options --allow-onelevel
ok 76 - ref name '/foo' is invalid with options --refspec-pattern
ok 77 - ref name '/foo' is invalid with options --refspec-pattern --allow-onelevel
ok 78 - ref name '/foo' is invalid with options --normalize
ok 79 - ref name '/foo' is valid with options --allow-onelevel --normalize
ok 80 - ref name '/foo' is invalid with options --refspec-pattern --normalize
ok 81 - ref name '/foo' is valid with options --refspec-pattern --allow-onelevel --normalize
ok 82 - check-ref-format --branch @{-1}
ok 83 - check-ref-format --branch -naster
ok 84 - check-ref-format --branch from subdir
ok 85 - check-ref-format --branch @{-1} from non-repo
ok 86 - check-ref-format --branch master from non-repo
ok 87 - ref name 'heads/foo' simplifies to 'heads/foo'
ok 88 - ref name 'refs///heads/foo' simplifies to 'refs/heads/foo'
ok 89 - ref name '/heads/foo' simplifies to 'heads/foo'
ok 90 - ref name '///heads/foo' simplifies to 'heads/foo'
ok 91 - check-ref-format --normalize rejects 'foo'
ok 92 - check-ref-format --normalize rejects '/foo'
ok 93 - check-ref-format --normalize rejects 'heads/foo/../bar'
ok 94 - check-ref-format --normalize rejects 'heads/./foo'
ok 95 - check-ref-format --normalize rejects 'heads\foo'
ok 96 - check-ref-format --normalize rejects 'heads/foo.lock'
ok 97 - check-ref-format --normalize rejects 'heads///foo.lock'
ok 98 - check-ref-format --normalize rejects 'foo.lock/bar'
ok 99 - check-ref-format --normalize rejects 'foo.lock///bar'
# passed all 99 test(s)
1..99
*** t1403-show-ref.sh ***
ok 1 - setup
ok 2 - show-ref
ok 3 - show-ref -q
ok 4 - show-ref --verify
ok 5 - show-ref --verify -q
ok 6 - show-ref -d
ok 7 - show-ref --heads, --tags, --head, pattern
ok 8 - show-ref --verify HEAD
ok 9 - show-ref --verify with dangling ref
# passed all 9 test(s)
1..9
*** t1404-update-ref-errors.sh ***
ok 1 - setup
ok 2 - existing loose ref is a simple prefix of new
ok 3 - existing packed ref is a simple prefix of new
ok 4 - existing loose ref is a deeper prefix of new
ok 5 - existing packed ref is a deeper prefix of new
ok 6 - new ref is a simple prefix of existing loose
ok 7 - new ref is a simple prefix of existing packed
ok 8 - new ref is a deeper prefix of existing loose
ok 9 - new ref is a deeper prefix of existing packed
ok 10 - one new ref is a simple prefix of another
ok 11 - empty directory should not fool rev-parse
ok 12 - empty directory should not fool for-each-ref
ok 13 - empty directory should not fool create
ok 14 - empty directory should not fool verify
ok 15 - empty directory should not fool 1-arg update
ok 16 - empty directory should not fool 2-arg update
ok 17 - empty directory should not fool 0-arg delete
ok 18 - empty directory should not fool 1-arg delete
ok 19 - D/F conflict prevents add long + delete short
ok 20 - D/F conflict prevents add short + delete long
ok 21 - D/F conflict prevents delete long + add short
ok 22 - D/F conflict prevents delete short + add long
ok 23 - D/F conflict prevents add long + delete short packed
ok 24 - D/F conflict prevents add short + delete long packed
ok 25 - D/F conflict prevents delete long packed + add short
ok 26 - D/F conflict prevents delete short packed + add long
ok 27 - D/F conflict prevents indirect add long + delete short
ok 28 - D/F conflict prevents indirect add long + indirect delete short
ok 29 - D/F conflict prevents indirect add short + indirect delete long
ok 30 - D/F conflict prevents indirect delete long + indirect add short
ok 31 - D/F conflict prevents indirect add long + delete short packed
ok 32 - D/F conflict prevents indirect add long + indirect delete short packed
ok 33 - D/F conflict prevents add long + indirect delete short packed
ok 34 - D/F conflict prevents indirect delete long packed + indirect add short
ok 35 - missing old value blocks update
ok 36 - incorrect old value blocks update
ok 37 - existing old value blocks create
ok 38 - incorrect old value blocks delete
ok 39 - missing old value blocks indirect update
ok 40 - incorrect old value blocks indirect update
ok 41 - existing old value blocks indirect create
ok 42 - incorrect old value blocks indirect delete
ok 43 - missing old value blocks indirect no-deref update
ok 44 - incorrect old value blocks indirect no-deref update
ok 45 - existing old value blocks indirect no-deref create
ok 46 - incorrect old value blocks indirect no-deref delete
ok 47 - non-empty directory blocks create
ok 48 - broken reference blocks create
ok 49 - non-empty directory blocks indirect create
ok 50 - broken reference blocks indirect create
ok 51 - no bogus intermediate values during delete
ok 52 - delete fails cleanly if packed-refs file is locked
# passed all 52 test(s)
1..52
*** t1405-main-ref-store.sh ***
ok 1 - pack_refs(PACK_REFS_ALL | PACK_REFS_PRUNE)
ok 2 - peel_ref(new-tag)
ok 3 - create_symref(FOO, refs/heads/master)
ok 4 - delete_refs(FOO, refs/tags/new-tag)
ok 5 - rename_refs(master, new-master)
ok 6 - for_each_ref(refs/heads/)
ok 7 - for_each_ref() is sorted
ok 8 - resolve_ref(new-master)
ok 9 - verify_ref(new-master)
ok 10 - for_each_reflog()
ok 11 - for_each_reflog_ent()
ok 12 - for_each_reflog_ent_reverse()
ok 13 - reflog_exists(HEAD)
ok 14 - delete_reflog(HEAD)
ok 15 - create-reflog(HEAD)
ok 16 - delete_ref(refs/heads/foo)
ok 17 - delete_ref(refs/heads/foo)
# passed all 17 test(s)
1..17
*** t1406-submodule-ref-store.sh ***
ok 1 - setup
ok 2 - pack_refs() not allowed
ok 3 - peel_ref(new-tag)
ok 4 - create_symref() not allowed
ok 5 - delete_refs() not allowed
ok 6 - rename_refs() not allowed
ok 7 - for_each_ref(refs/heads/)
ok 8 - for_each_ref() is sorted
ok 9 - resolve_ref(master)
ok 10 - verify_ref(new-master)
ok 11 - for_each_reflog()
ok 12 - for_each_reflog_ent()
ok 13 - for_each_reflog_ent_reverse()
ok 14 - reflog_exists(HEAD)
ok 15 - delete_reflog() not allowed
ok 16 - create-reflog() not allowed
# passed all 16 test(s)
1..16
*** t1407-worktree-ref-store.sh ***
ok 1 - setup
ok 2 - resolve_ref(<shared-ref>)
ok 3 - resolve_ref(<per-worktree-ref>)
ok 4 - create_symref(FOO, refs/heads/master)
ok 5 - for_each_reflog()
# passed all 5 test(s)
1..5
*** t1408-packed-refs.sh ***
ok 1 - setup
ok 2 - no error from stale entry in packed-refs
# passed all 2 test(s)
1..2
*** t1409-avoid-packing-refs.sh ***
ok 1 - setup
ok 2 - do not create packed-refs file gratuitously
ok 3 - check that marking the packed-refs file works
ok 4 - leave packed-refs untouched on update of packed
ok 5 - leave packed-refs untouched on checked update of packed
ok 6 - leave packed-refs untouched on verify of packed
ok 7 - touch packed-refs on delete of packed
ok 8 - leave packed-refs untouched on update of loose
ok 9 - leave packed-refs untouched on checked update of loose
ok 10 - leave packed-refs untouched on verify of loose
ok 11 - leave packed-refs untouched on delete of loose
# passed all 11 test(s)
1..11
*** t1410-reflog.sh ***
ok 1 - setup
ok 2 - rewind
ok 3 - corrupt and check
ok 4 - reflog expire --dry-run should not touch reflog
ok 5 - reflog expire
ok 6 - prune and fsck
ok 7 - recover and check
ok 8 - delete
ok 9 - rewind2
ok 10 - --expire=never
ok 11 - gc.reflogexpire=never
ok 12 - gc.reflogexpire=false
ok 13 - checkout should not delete log for packed ref
ok 14 - stale dirs do not cause d/f conflicts (reflogs on)
ok 15 - stale dirs do not cause d/f conflicts (reflogs off)
ok 16 - parsing reverse reflogs at BUFSIZ boundaries
ok 17 - no segfaults for reflog containing non-commit sha1s
not ok 18 - reflog with non-commit entries displays all entries # TODO known breakage
ok 19 - reflog expire operates on symref not referrent
ok 20 - continue walking past root commits
# still have 1 known breakage(s)
# passed all remaining 19 test(s)
1..20
*** t1411-reflog-show.sh ***
ok 1 - setup
ok 2 - log -g shows reflog headers
ok 3 - oneline reflog format
ok 4 - reflog default format
ok 5 - override reflog default format
ok 6 - using @{now} syntax shows reflog date (multiline)
ok 7 - using @{now} syntax shows reflog date (oneline)
ok 8 - using @{now} syntax shows reflog date (format=%gd)
ok 9 - using --date= shows reflog date (multiline)
ok 10 - using --date= shows reflog date (oneline)
ok 11 - using --date= shows reflog date (format=%gd)
ok 12 - log.date does not invoke "--date" magic (multiline)
ok 13 - log.date does not invoke "--date" magic (oneline)
ok 14 - log.date does not invoke "--date" magic (format=%gd)
ok 15 - --date magic does not override explicit @{0} syntax
ok 16 - empty reflog file
ok 17 - git log -g -p shows diffs vs. parents
ok 18 - reflog exists works
# passed all 18 test(s)
1..18
*** t1412-reflog-loop.sh ***
ok 1 - setup commits
ok 2 - setup reflog with alternating commits
ok 3 - reflog shows all entries
# passed all 3 test(s)
1..3
*** t1413-reflog-detach.sh ***
ok 1 - setup
ok 2 - baseline
ok 3 - switch to branch
ok 4 - detach to other
ok 5 - detach to self
ok 6 - attach to self
ok 7 - attach to other
# passed all 7 test(s)
1..7
*** t1414-reflog-walk.sh ***
ok 1 - set up some reflog entries
ok 2 - set up expected reflog
ok 3 - reflog walk shows expected logs
ok 4 - reflog can limit with --no-merges
ok 5 - reflog can limit with pathspecs
ok 6 - pathspec limiting handles merges
ok 7 - --parents shows true parents
ok 8 - walking multiple reflogs shows all
ok 9 - date-limiting does not interfere with other logs
ok 10 - min/max age uses entry date to limit
ok 11 - walk prefers reflog to ref tip
ok 12 - rev-list -g complains when there are no reflogs
# passed all 12 test(s)
1..12
*** t1420-lost-found.sh ***
ok 1 - setup
ok 2 - lost and found something
# passed all 2 test(s)
1..2
*** t1430-bad-ref-name.sh ***
ok 1 - setup
ok 2 - fast-import: fail on invalid branch name ".badbranchname"
ok 3 - fast-import: fail on invalid branch name "bad[branch]name"
ok 4 - git branch shows badly named ref as warning
ok 5 - branch -d can delete badly named ref
ok 6 - branch -D can delete badly named ref
ok 7 - branch -D cannot delete non-ref in .git dir
ok 8 - branch -D cannot delete ref in .git dir
ok 9 - branch -D cannot delete absolute path
ok 10 - git branch cannot create a badly named ref
ok 11 - branch -m cannot rename to a bad ref name
not ok 12 - branch -m can rename from a bad ref name # TODO known breakage
ok 13 - push cannot create a badly named ref
not ok 14 - push --mirror can delete badly named ref # TODO known breakage
ok 15 - rev-parse skips symref pointing to broken name
ok 16 - for-each-ref emits warnings for broken names
ok 17 - update-ref -d can delete broken name
ok 18 - branch -d can delete broken name
ok 19 - update-ref --no-deref -d can delete symref to broken name
ok 20 - branch -d can delete symref to broken name
ok 21 - update-ref --no-deref -d can delete dangling symref to broken name
ok 22 - branch -d can delete dangling symref to broken name
ok 23 - update-ref -d can delete broken name through symref
ok 24 - update-ref --no-deref -d can delete symref with broken name
ok 25 - branch -d can delete symref with broken name
ok 26 - update-ref --no-deref -d can delete dangling symref with broken name
ok 27 - branch -d can delete dangling symref with broken name
ok 28 - update-ref -d cannot delete non-ref in .git dir
ok 29 - update-ref -d cannot delete absolute path
ok 30 - update-ref --stdin fails create with bad ref name
ok 31 - update-ref --stdin fails update with bad ref name
ok 32 - update-ref --stdin fails delete with bad ref name
ok 33 - update-ref --stdin -z fails create with bad ref name
ok 34 - update-ref --stdin -z fails update with bad ref name
ok 35 - update-ref --stdin -z fails delete with bad ref name
ok 36 - branch rejects HEAD as a branch name
ok 37 - checkout -b rejects HEAD as a branch name
ok 38 - update-ref can operate on refs/heads/HEAD
ok 39 - branch -d can remove refs/heads/HEAD
ok 40 - branch -m can rename refs/heads/HEAD
ok 41 - branch -d can remove refs/heads/-dash
ok 42 - branch -m can rename refs/heads/-dash
# still have 2 known breakage(s)
# passed all remaining 40 test(s)
1..42
*** t1450-fsck.sh ***
ok 1 - setup
ok 2 - loose objects borrowed from alternate are not missing
ok 3 - HEAD is part of refs, valid objects appear valid
ok 4 - setup: helpers for corruption tests
ok 5 - object with bad sha1
ok 6 - branch pointing to non-commit
ok 7 - HEAD link pointing at a funny object
ok 8 - HEAD link pointing at a funny place
ok 9 - email without @ is okay
ok 10 - email with embedded > is not okay
ok 11 - missing < email delimiter is reported nicely
ok 12 - missing email is reported nicely
ok 13 - > in name is reported
ok 14 - integer overflow in timestamps is reported
ok 15 - commit with NUL in header
ok 16 - tree object with duplicate entries
ok 17 - unparseable tree object
ok 18 - tree entry with type mismatch
ok 19 - tag pointing to nonexistent
ok 20 - tag pointing to something else than its type
ok 21 - tag with incorrect tag name & missing tagger
ok 22 - tag with bad tagger
ok 23 - tag with NUL in header
ok 24 - cleaned up
ok 25 - rev-list --verify-objects
ok 26 - rev-list --verify-objects with bad sha1
ok 27 - force fsck to ignore double author
ok 28 - fsck notices blob entry pointing to null sha1
ok 29 - fsck notices submodule entry pointing to null sha1
ok 30 - fsck notices . as blob
ok 31 - fsck notices . as tree
ok 32 - fsck notices .. as blob
ok 33 - fsck notices .. as tree
ok 34 - fsck notices .git as blob
ok 35 - fsck notices .git as tree
ok 36 - fsck notices .GIT as blob
ok 37 - fsck notices .GIT as tree
ok 38 - fsck notices .gI{u200c}T as blob
ok 39 - fsck notices .gI{u200c}T as tree
ok 40 - fsck notices .Git as blob
ok 41 - fsck notices .Git as tree
ok 42 - fsck notices git~1 as blob
ok 43 - fsck notices git~1 as tree
ok 44 - fsck notices .git. as blob
ok 45 - fsck notices .git. as tree
ok 46 - fsck notices .\.GIT\foobar as blob
ok 47 - fsck notices .\.GIT\foobar as tree
ok 48 - fsck notices .git\foobar as blob
ok 49 - fsck notices .git\foobar as tree
ok 50 - fsck allows .Ňit
ok 51 - NUL in commit
ok 52 - fsck notices missing blob
ok 53 - fsck notices missing subtree
ok 54 - fsck notices missing root tree
ok 55 - fsck notices missing parent
ok 56 - fsck notices missing tagged object
ok 57 - fsck notices ref pointing to missing commit
ok 58 - fsck notices ref pointing to missing tag
ok 59 - fsck --connectivity-only
ok 60 - fsck --connectivity-only with explicit head
ok 61 - fsck --name-objects
ok 62 - alternate objects are correctly blamed
ok 63 - fsck errors in packed objects
ok 64 - fsck fails on corrupt packfile
ok 65 - fsck finds problems in duplicate loose objects
ok 66 - fsck detects trailing loose garbage (commit)
ok 67 - fsck detects trailing loose garbage (blob)
ok 68 - fsck notices dangling objects
ok 69 - fsck $name notices bogus $name
ok 70 - bogus head does not fallback to all heads
ok 71 - detect corrupt index file in fsck
# passed all 71 test(s)
1..71
*** t1500-rev-parse.sh ***
ok 1 - setup
ok 2 - toplevel: --is-bare-repository
ok 3 - toplevel: --is-inside-git-dir
ok 4 - toplevel: --is-inside-work-tree
ok 5 - toplevel: --show-prefix
ok 6 - toplevel: --git-dir
ok 7 - toplevel: --absolute-git-dir
ok 8 - .git/: --is-bare-repository
ok 9 - .git/: --is-inside-git-dir
ok 10 - .git/: --is-inside-work-tree
ok 11 - .git/: --show-prefix
ok 12 - .git/: --git-dir
ok 13 - .git/: --absolute-git-dir
ok 14 - .git/objects/: --is-bare-repository
ok 15 - .git/objects/: --is-inside-git-dir
ok 16 - .git/objects/: --is-inside-work-tree
ok 17 - .git/objects/: --show-prefix
ok 18 - .git/objects/: --git-dir
ok 19 - .git/objects/: --absolute-git-dir
ok 20 - subdirectory: --is-bare-repository
ok 21 - subdirectory: --is-inside-git-dir
ok 22 - subdirectory: --is-inside-work-tree
ok 23 - subdirectory: --show-prefix
ok 24 - subdirectory: --git-dir
ok 25 - subdirectory: --absolute-git-dir
ok 26 - core.bare = true: --is-bare-repository
ok 27 - core.bare = true: --is-inside-git-dir
ok 28 - core.bare = true: --is-inside-work-tree
ok 29 - core.bare undefined: --is-bare-repository
ok 30 - core.bare undefined: --is-inside-git-dir
ok 31 - core.bare undefined: --is-inside-work-tree
ok 32 - GIT_DIR=../.git, core.bare = false: --is-bare-repository
ok 33 - GIT_DIR=../.git, core.bare = false: --is-inside-git-dir
ok 34 - GIT_DIR=../.git, core.bare = false: --is-inside-work-tree
ok 35 - GIT_DIR=../.git, core.bare = false: --show-prefix
ok 36 - GIT_DIR=../.git, core.bare = false: --git-dir
ok 37 - GIT_DIR=../.git, core.bare = false: --absolute-git-dir
ok 38 - GIT_DIR=../.git, core.bare = true: --is-bare-repository
ok 39 - GIT_DIR=../.git, core.bare = true: --is-inside-git-dir
ok 40 - GIT_DIR=../.git, core.bare = true: --is-inside-work-tree
ok 41 - GIT_DIR=../.git, core.bare = true: --show-prefix
ok 42 - GIT_DIR=../.git, core.bare undefined: --is-bare-repository
ok 43 - GIT_DIR=../.git, core.bare undefined: --is-inside-git-dir
ok 44 - GIT_DIR=../.git, core.bare undefined: --is-inside-work-tree
ok 45 - GIT_DIR=../.git, core.bare undefined: --show-prefix
ok 46 - GIT_DIR=../repo.git, core.bare = false: --is-bare-repository
ok 47 - GIT_DIR=../repo.git, core.bare = false: --is-inside-git-dir
ok 48 - GIT_DIR=../repo.git, core.bare = false: --is-inside-work-tree
ok 49 - GIT_DIR=../repo.git, core.bare = false: --show-prefix
ok 50 - GIT_DIR=../repo.git, core.bare = false: --git-dir
ok 51 - GIT_DIR=../repo.git, core.bare = false: --absolute-git-dir
ok 52 - GIT_DIR=../repo.git, core.bare = true: --is-bare-repository
ok 53 - GIT_DIR=../repo.git, core.bare = true: --is-inside-git-dir
ok 54 - GIT_DIR=../repo.git, core.bare = true: --is-inside-work-tree
ok 55 - GIT_DIR=../repo.git, core.bare = true: --show-prefix
ok 56 - GIT_DIR=../repo.git, core.bare undefined: --is-bare-repository
ok 57 - GIT_DIR=../repo.git, core.bare undefined: --is-inside-git-dir
ok 58 - GIT_DIR=../repo.git, core.bare undefined: --is-inside-work-tree
ok 59 - GIT_DIR=../repo.git, core.bare undefined: --show-prefix
ok 60 - git-common-dir from worktree root
ok 61 - git-common-dir inside sub-dir
ok 62 - git-path from worktree root
ok 63 - git-path inside sub-dir
ok 64 - rev-parse --is-shallow-repository in shallow repo
ok 65 - rev-parse --is-shallow-repository in non-shallow repo
ok 66 - showing the superproject correctly
# passed all 66 test(s)
1..66
*** t1501-work-tree.sh ***
ok 1 - setup
ok 2 - setup: helper for testing rev-parse
ok 3 - setup: core.worktree = relative path
ok 4 - outside
ok 5 - inside work tree
ok 6 - empty prefix is actually written out
ok 7 - subdir of work tree
ok 8 - setup: core.worktree = absolute path
ok 9 - outside
ok 10 - inside work tree
ok 11 - subdir of work tree
ok 12 - setup: GIT_WORK_TREE=relative (override core.worktree)
ok 13 - outside
ok 14 - inside work tree
ok 15 - subdir of work tree
ok 16 - setup: GIT_WORK_TREE=absolute, below git dir
ok 17 - outside
ok 18 - in repo.git
ok 19 - inside work tree
ok 20 - subdir of work tree
ok 21 - find work tree from repo
ok 22 - find work tree from work tree
ok 23 - _gently() groks relative GIT_DIR & GIT_WORK_TREE
ok 24 - diff-index respects work tree under .git dir
ok 25 - diff-files respects work tree under .git dir
ok 26 - git diff respects work tree under .git dir
ok 27 - git grep
ok 28 - git commit
ok 29 - absolute pathspec should fail gracefully
ok 30 - make_relative_path handles double slashes in GIT_DIR
ok 31 - relative $GIT_WORK_TREE and git subprocesses
ok 32 - Multi-worktree setup
ok 33 - GIT_DIR set (1)
ok 34 - GIT_DIR set (2)
ok 35 - Auto discovery
ok 36 - $GIT_DIR/common overrides core.worktree
ok 37 - $GIT_WORK_TREE overrides $GIT_DIR/common
ok 38 - error out gracefully on invalid $GIT_WORK_TREE
ok 39 - refs work with relative gitdir and work tree
# passed all 39 test(s)
1..39
*** t1502-rev-parse-parseopt.sh ***
ok 1 - setup optionspec
ok 2 - setup optionspec-no-switches
ok 3 - setup optionspec-only-hidden-switches
ok 4 - test --parseopt help output
ok 5 - test --parseopt help output no switches
ok 6 - test --parseopt help output hidden switches
ok 7 - test --parseopt help-all output hidden switches
ok 8 - test --parseopt invalid switch help output
ok 9 - setup expect.1
ok 10 - test --parseopt
ok 11 - test --parseopt with mixed options and arguments
ok 12 - setup expect.2
ok 13 - test --parseopt with --
ok 14 - test --parseopt --stop-at-non-option
ok 15 - setup expect.3
ok 16 - test --parseopt --keep-dashdash
ok 17 - setup expect.4
ok 18 - test --parseopt --keep-dashdash --stop-at-non-option with --
ok 19 - setup expect.5
ok 20 - test --parseopt --keep-dashdash --stop-at-non-option without --
ok 21 - setup expect.6
ok 22 - test --parseopt --stuck-long
ok 23 - setup expect.7
ok 24 - test --parseopt --stuck-long and empty optional argument
ok 25 - setup expect.8
ok 26 - test --parseopt --stuck-long and long option with unset optional argument
ok 27 - test --parseopt --stuck-long and short option with unset optional argument
# passed all 27 test(s)
1..27
*** t1503-rev-parse-verify.sh ***
ok 1 - set up basic repo with 1 file (hello) and 4 commits
ok 2 - works with one good rev
ok 3 - fails with any bad rev or many good revs
ok 4 - fails silently when using -q
ok 5 - fails silently when using -q with deleted reflogs
ok 6 - fails silently when using -q with not enough reflogs
ok 7 - succeeds silently with -q and reflogs that do not go far back enough in time
ok 8 - no stdout output on error
ok 9 - use --default
ok 10 - master@{n} for various n
ok 11 - ref resolution not confused by broken symlinks
# passed all 11 test(s)
1..11
*** t1504-ceiling-dirs.sh ***
ok 1 - no_ceil
ok 2 - ceil_empty
ok 3 - ceil_at_parent
ok 4 - ceil_at_parent_slash
ok 5 - ceil_at_trash
ok 6 - ceil_at_trash_slash
ok 7 - ceil_at_sub
ok 8 - ceil_at_sub_slash
ok 9 - subdir_no_ceil
ok 10 - subdir_ceil_empty
ok 11 - subdir_ceil_at_trash: prefix
ok 12 - subdir_ceil_at_trash_slash: prefix
ok 13 - subdir_ceil_at_sub: prefix
ok 14 - subdir_ceil_at_sub_slash: prefix
ok 15 - subdir_ceil_at_top: prefix
ok 16 - subdir_ceil_at_top_slash: prefix
ok 17 - subdir_ceil_at_top_no_resolve
ok 18 - subdir_ceil_at_top_slash_no_resolve
ok 19 - subdir_ceil_at_subdir
ok 20 - subdir_ceil_at_subdir_slash
ok 21 - subdir_ceil_at_su
ok 22 - subdir_ceil_at_su_slash
ok 23 - subdir_ceil_at_sub_di
ok 24 - subdir_ceil_at_sub_di_slash
ok 25 - subdir_ceil_at_subdi
ok 26 - subdir_ceil_at_subdi_slash
ok 27 - second_of_two: prefix
ok 28 - first_of_two: prefix
ok 29 - second_of_three: prefix
ok 30 - git_dir_specified
ok 31 - sd_no_ceil
ok 32 - sd_ceil_empty
ok 33 - sd_ceil_at_trash: prefix
ok 34 - sd_ceil_at_trash_slash: prefix
ok 35 - sd_ceil_at_s: prefix
ok 36 - sd_ceil_at_s_slash: prefix
ok 37 - sd_ceil_at_sd
ok 38 - sd_ceil_at_sd_slash
ok 39 - sd_ceil_at_su
ok 40 - sd_ceil_at_su_slash
ok 41 - sd_ceil_at_s_di
ok 42 - sd_ceil_at_s_di_slash
ok 43 - sd_ceil_at_sdi
ok 44 - sd_ceil_at_sdi_slash
# passed all 44 test(s)
1..44
*** t1505-rev-parse-last.sh ***
ok 1 - setup
ok 2 - @{-1} works
ok 3 - @{-1}~2 works
ok 4 - @{-1}^2 works
ok 5 - @{-1}@{1} works
ok 6 - @{-2} works
ok 7 - @{-3} fails
# passed all 7 test(s)
1..7
*** t1506-rev-parse-diagnosis.sh ***
ok 1 - set up basic repo
ok 2 - correct file objects
ok 3 - correct relative file objects (0)
ok 4 - correct relative file objects (1)
ok 5 - correct relative file objects (2)
ok 6 - correct relative file objects (3)
ok 7 - correct relative file objects (4)
ok 8 - correct relative file objects (5)
ok 9 - correct relative file objects (6)
ok 10 - incorrect revision id
ok 11 - incorrect file in sha1:path
ok 12 - incorrect file in :path and :N:path
ok 13 - invalid @{n} reference
ok 14 - relative path not found
ok 15 - relative path outside worktree
ok 16 - relative path when cwd is outside worktree
ok 17 - <commit>:file correctly diagnosed after a pathname
ok 18 - dotdot is not an empty set
ok 19 - arg before dashdash must be a revision (missing)
ok 20 - arg before dashdash must be a revision (file)
ok 21 - arg before dashdash must be a revision (ambiguous)
# passed all 21 test(s)
1..21
*** t1507-rev-parse-upstream.sh ***
ok 1 - setup
ok 2 - @{upstream} resolves to correct full name
ok 3 - @{u} resolves to correct full name
ok 4 - my-side@{upstream} resolves to correct full name
ok 5 - upstream of branch with @ in middle
ok 6 - upstream of branch with @ at start
ok 7 - upstream of branch with @ at end
ok 8 - refs/heads/my-side@{upstream} does not resolve to my-side{upstream}
ok 9 - my-side@{u} resolves to correct commit
ok 10 - not-tracking@{u} fails
ok 11 - <branch>@{u}@{1} resolves correctly
ok 12 - @{u} without specifying branch fails on a detached HEAD
ok 13 - checkout -b new my-side@{u} forks from the same
ok 14 - merge my-side@{u} records the correct name
ok 15 - branch -d other@{u}
ok 16 - checkout other@{u}
ok 17 - branch@{u} works when tracking a local branch
ok 18 - branch@{u} error message when no upstream
ok 19 - @{u} error message when no upstream
ok 20 - branch@{u} error message with misspelt branch
ok 21 - @{u} error message when not on a branch
ok 22 - branch@{u} error message if upstream branch not fetched
ok 23 - pull works when tracking a local branch
ok 24 - @{u} works when tracking a local branch
ok 25 - log -g other@{u}
ok 26 - log -g other@{u}@{now}
ok 27 - @{reflog}-parsing does not look beyond colon
ok 28 - @{upstream}-parsing does not look beyond colon
# passed all 28 test(s)
1..28
*** t1508-at-combinations.sh ***
ok 1 - setup
ok 2 - HEAD = refs/heads/new-branch
ok 3 - @{1} = new-one
ok 4 - HEAD@{1} = new-one
ok 5 - @{now} = new-two
ok 6 - HEAD@{now} = new-two
ok 7 - @{-1} = refs/heads/old-branch
ok 8 - @{-1}@{0} = old-two
ok 9 - @{-1}@{1} = old-one
ok 10 - @{u} = refs/heads/upstream-branch
ok 11 - HEAD@{u} = refs/heads/upstream-branch
ok 12 - @{u}@{1} = upstream-one
ok 13 - @{-1}@{u} = refs/heads/master
ok 14 - @{-1}@{u}@{1} = master-one
ok 15 - @ = new-two
ok 16 - @@{u} = refs/heads/upstream-branch
ok 17 - @@/at-test = refs/heads/@@/at-test
ok 18 - @/at-test = refs/heads/@/at-test
ok 19 - @at-test = refs/heads/@at-test
ok 20 - @{u}@{-1} is nonsensical
ok 21 - @{0}@{0} is nonsensical
ok 22 - @{1}@{u} is nonsensical
ok 23 - HEAD@{-1} is nonsensical
ok 24 - @{-1}@{-1} is nonsensical
ok 25 - HEAD@{3} = old-two
ok 26 - @{3} is nonsensical
ok 27 - switch to old-branch
ok 28 - HEAD = refs/heads/old-branch
ok 29 - HEAD@{1} = new-two
ok 30 - @{1} = old-one
ok 31 - create path with @
ok 32 - @:normal = content
ok 33 - @:fun@ny = content
# passed all 33 test(s)
1..33
*** t1509-root-work-tree.sh ***
1..0 # SKIP Test requiring writable / skipped. Read this test if you want to run it
*** t1510-repo-setup.sh ***
ok 1 - #0: nonbare repo, no explicit configuration
ok 2 - #1: GIT_WORK_TREE without explicit GIT_DIR is accepted
ok 3 - #2: worktree defaults to cwd with explicit GIT_DIR
ok 4 - #2b: relative GIT_DIR
ok 5 - #3: setup
ok 6 - #3: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 7 - #3: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 8 - #3: explicit GIT_WORK_TREE from parent of worktree
ok 9 - #3: explicit GIT_WORK_TREE from nephew of worktree
ok 10 - #3: chdir_to_toplevel uses worktree, not git dir
ok 11 - #3: chdir_to_toplevel uses worktree (from subdir)
ok 12 - #4: core.worktree without GIT_DIR set is accepted
ok 13 - #5: core.worktree + GIT_WORK_TREE is accepted
ok 14 - #6: setting GIT_DIR brings core.worktree to life
ok 15 - #6b: GIT_DIR set, core.worktree relative
ok 16 - #6c: GIT_DIR set, core.worktree=../wt (absolute)
ok 17 - #6d: GIT_DIR set, core.worktree=../wt (relative)
ok 18 - #6e: GIT_DIR set, core.worktree=../.. (absolute)
ok 19 - #6f: GIT_DIR set, core.worktree=../.. (relative)
ok 20 - #7: setup
ok 21 - #7: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 22 - #7: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 23 - #7: explicit GIT_WORK_TREE from parent of worktree
ok 24 - #7: explicit GIT_WORK_TREE from nephew of worktree
ok 25 - #7: chdir_to_toplevel uses worktree, not git dir
ok 26 - #7: chdir_to_toplevel uses worktree (from subdir)
ok 27 - #8: gitfile, easy case
ok 28 - #9: GIT_WORK_TREE accepted with gitfile
ok 29 - #10: GIT_DIR can point to gitfile
ok 30 - #10b: relative GIT_DIR can point to gitfile
ok 31 - #11: setup
ok 32 - #11: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 33 - #11: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 34 - #11: explicit GIT_WORK_TREE from parent of worktree
ok 35 - #11: explicit GIT_WORK_TREE from nephew of worktree
ok 36 - #11: chdir_to_toplevel uses worktree, not git dir
ok 37 - #11: chdir_to_toplevel uses worktree (from subdir)
ok 38 - #12: core.worktree with gitfile is accepted
ok 39 - #13: core.worktree+GIT_WORK_TREE accepted (with gitfile)
ok 40 - #14: core.worktree with GIT_DIR pointing to gitfile
ok 41 - #14b: core.worktree is relative to actual git dir
ok 42 - #15: setup
ok 43 - #15: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 44 - #15: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 45 - #15: explicit GIT_WORK_TREE from parent of worktree
ok 46 - #15: explicit GIT_WORK_TREE from nephew of worktree
ok 47 - #15: chdir_to_toplevel uses worktree, not git dir
ok 48 - #15: chdir_to_toplevel uses worktree (from subdir)
ok 49 - #16a: implicitly bare repo (cwd inside .git dir)
ok 50 - #16b: bare .git (cwd inside .git dir)
ok 51 - #16c: bare .git has no worktree
ok 52 - #16d: bareness preserved across alias
ok 53 - #16e: bareness preserved by --bare
ok 54 - #17: GIT_WORK_TREE without explicit GIT_DIR is accepted (bare case)
ok 55 - #18: bare .git named by GIT_DIR has no worktree
ok 56 - #19: setup
ok 57 - #19: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 58 - #19: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 59 - #19: explicit GIT_WORK_TREE from parent of worktree
ok 60 - #19: explicit GIT_WORK_TREE from nephew of worktree
ok 61 - #19: chdir_to_toplevel uses worktree, not git dir
ok 62 - #19: chdir_to_toplevel uses worktree (from subdir)
ok 63 - #20a: core.worktree without GIT_DIR accepted (inside .git)
ok 64 - #20b/c: core.worktree and core.bare conflict
ok 65 - #20d: core.worktree and core.bare OK when working tree not needed
ok 66 - #21: setup, core.worktree warns before overriding core.bare
ok 67 - #21: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 68 - #21: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 69 - #21: explicit GIT_WORK_TREE from parent of worktree
ok 70 - #21: explicit GIT_WORK_TREE from nephew of worktree
ok 71 - #21: chdir_to_toplevel uses worktree, not git dir
ok 72 - #21: chdir_to_toplevel uses worktree (from subdir)
ok 73 - #22a: core.worktree = GIT_DIR = .git dir
ok 74 - #22b: core.worktree child of .git, GIT_DIR=.git
ok 75 - #22c: core.worktree = .git/.., GIT_DIR=.git
ok 76 - #22.2: core.worktree and core.bare conflict
ok 77 - #23: setup
ok 78 - #23: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 79 - #23: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 80 - #23: explicit GIT_WORK_TREE from parent of worktree
ok 81 - #23: explicit GIT_WORK_TREE from nephew of worktree
ok 82 - #23: chdir_to_toplevel uses worktree, not git dir
ok 83 - #23: chdir_to_toplevel uses worktree (from subdir)
ok 84 - #24: bare repo has no worktree (gitfile case)
ok 85 - #25: GIT_WORK_TREE accepted if GIT_DIR unset (bare gitfile case)
ok 86 - #26: bare repo has no worktree (GIT_DIR -> gitfile case)
ok 87 - #27: setup
ok 88 - #27: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 89 - #27: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 90 - #27: explicit GIT_WORK_TREE from parent of worktree
ok 91 - #27: explicit GIT_WORK_TREE from nephew of worktree
ok 92 - #27: chdir_to_toplevel uses worktree, not git dir
ok 93 - #27: chdir_to_toplevel uses worktree (from subdir)
ok 94 - #28: core.worktree and core.bare conflict (gitfile case)
ok 95 - #29: setup
ok 96 - #29: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 97 - #29: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 98 - #29: explicit GIT_WORK_TREE from parent of worktree
ok 99 - #29: explicit GIT_WORK_TREE from nephew of worktree
ok 100 - #29: chdir_to_toplevel uses worktree, not git dir
ok 101 - #29: chdir_to_toplevel uses worktree (from subdir)
ok 102 - #30: core.worktree and core.bare conflict (gitfile version)
ok 103 - #31: setup
ok 104 - #31: explicit GIT_WORK_TREE and GIT_DIR at toplevel
ok 105 - #31: explicit GIT_WORK_TREE and GIT_DIR in subdir
ok 106 - #31: explicit GIT_WORK_TREE from parent of worktree
ok 107 - #31: explicit GIT_WORK_TREE from nephew of worktree
ok 108 - #31: chdir_to_toplevel uses worktree, not git dir
ok 109 - #31: chdir_to_toplevel uses worktree (from subdir)
# passed all 109 test(s)
1..109
*** t1511-rev-parse-caret.sh ***
ok 1 - setup
ok 2 - ref^{non-existent}
ok 3 - ref^{}
ok 4 - ref^{commit}
ok 5 - ref^{tree}
ok 6 - ref^{tag}
ok 7 - ref^{/.}
ok 8 - ref^{/non-existent}
ok 9 - ref^{/Initial}
ok 10 - ref^{/!Exp}
ok 11 - ref^{/!}
ok 12 - ref^{/!!Exp}
ok 13 - ref^{/!-}
ok 14 - ref^{/!-.}
ok 15 - ref^{/!-non-existent}
ok 16 - ref^{/!-Changed}
ok 17 - ref^{/!-!Exp}
# passed all 17 test(s)
1..17
*** t1512-rev-parse-disambiguation.sh ***
ok 1 - blob and tree
ok 2 - warn ambiguity when no candidate matches type hint
ok 3 - disambiguate tree-ish
ok 4 - disambiguate blob
ok 5 - disambiguate tree
ok 6 - first commit
ok 7 - disambiguate commit-ish
ok 8 - disambiguate commit
ok 9 - log name1..name2 takes only commit-ishes on both ends
ok 10 - rev-parse name1..name2 takes only commit-ishes on both ends
ok 11 - git log takes only commit-ish
ok 12 - git reset takes only commit-ish
ok 13 - first tag
not ok 14 - two semi-ambiguous commit-ish # TODO known breakage
not ok 15 - three semi-ambiguous tree-ish # TODO known breakage
ok 16 - parse describe name
ok 17 - more history
not ok 18 - parse describe name taking advantage of generation # TODO known breakage
ok 19 - parse describe name not ignoring ambiguity
ok 20 - ambiguous commit-ish
ok 21 - ambiguous tags peel to treeish
ok 22 - rev-parse --disambiguate
ok 23 - rev-parse --disambiguate drops duplicates
ok 24 - ambiguous 40-hex ref
ok 25 - ambiguous short sha1 ref
ok 26 - ambiguity errors are not repeated (raw)
ok 27 - ambiguity errors are not repeated (treeish)
ok 28 - ambiguity errors are not repeated (peel)
ok 29 - ambiguity hints
ok 30 - ambiguity hints respect type
ok 31 - failed type-selector still shows hint
ok 32 - core.disambiguate config can prefer types
ok 33 - core.disambiguate does not override context
ok 34 - ambiguous commits are printed by type first, then hash order
# still have 3 known breakage(s)
# passed all remaining 31 test(s)
1..34
*** t1513-rev-parse-prefix.sh ***
ok 1 - setup
ok 2 - empty prefix -- file
ok 3 - valid prefix -- file
ok 4 - valid prefix -- ../file
ok 5 - empty prefix HEAD:./path
ok 6 - valid prefix HEAD:./path
ok 7 - valid prefix HEAD:../path
ok 8 - prefix ignored with HEAD:top
ok 9 - disambiguate path with valid prefix
ok 10 - file and refs with prefix
ok 11 - two-levels deep
# passed all 11 test(s)
1..11
*** t1514-rev-parse-push.sh ***
ok 1 - setup
ok 2 - @{push} with default=nothing
ok 3 - @{push} with default=simple
ok 4 - triangular @{push} fails with default=simple
ok 5 - @{push} with default=current
ok 6 - @{push} with default=matching
ok 7 - @{push} with pushremote defined
ok 8 - @{push} with push refspecs
ok 9 - resolving @{push} fails with a detached HEAD
# passed all 9 test(s)
1..9
*** t1515-rev-parse-outside-repo.sh ***
ok 1 - set up non-repo directory
ok 2 - rev-parse --sq-quote
ok 3 - rev-parse --local-env-vars
ok 4 - rev-parse --resolve-git-dir
# passed all 4 test(s)
1..4
*** t1600-index.sh ***
ok 1 - setup
ok 2 - bogus GIT_INDEX_VERSION issues warning
ok 3 - out of bounds GIT_INDEX_VERSION issues warning
ok 4 - no warning with bogus GIT_INDEX_VERSION and existing index
ok 5 - out of bounds index.version issues warning
ok 6 - GIT_INDEX_VERSION takes precedence over config
# passed all 6 test(s)
1..6
*** t1601-index-bogus.sh ***
ok 1 - create tree with null sha1
ok 2 - read-tree refuses to read null sha1
ok 3 - GIT_ALLOW_NULL_SHA1 overrides refusal
ok 4 - git write-tree refuses to write null sha1
# passed all 4 test(s)
1..4
*** t1700-split-index.sh ***
ok 1 - enable split index
ok 2 - add one file
ok 3 - disable split index
ok 4 - enable split index again, "one" now belongs to base index"
ok 5 - modify original file, base index untouched
ok 6 - add another file, which stays index
ok 7 - remove file not in base index
ok 8 - remove file in base index
ok 9 - add original file back
ok 10 - add new file
ok 11 - unify index, two files remain
ok 12 - rev-parse --shared-index-path
ok 13 - set core.splitIndex config variable to true
ok 14 - set core.splitIndex config variable to false
ok 15 - set core.splitIndex config variable to true
ok 16 - check behavior with splitIndex.maxPercentChange unset
ok 17 - check splitIndex.maxPercentChange set to 0
ok 18 - shared index files expire after 2 weeks by default
ok 19 - check splitIndex.sharedIndexExpire set to 16 days
ok 20 - check splitIndex.sharedIndexExpire set to "never" and "now"
ok 21 - split index respects core.sharedrepository 0666
ok 22 - split index respects core.sharedrepository 0642
ok 23 - graceful handling when splitting index is not allowed
ok 24 - writing split index with null sha1 does not write cache tree
# passed all 24 test(s)
1..24
*** t2000-checkout-cache-clash.sh ***
ok 1 - git update-index --add various paths.
ok 2 - git checkout-index without -f should fail on conflicting work tree.
ok 3 - git checkout-index with -f should succeed.
ok 4 - git checkout-index conflicting paths.
ok 5 - checkout-index -f twice with --prefix
# passed all 5 test(s)
1..5
*** t2001-checkout-cache-clash.sh ***
ok 1 - git update-index --add path0/file0
ok 2 - writing tree out with git write-tree
ok 3 - git update-index --add path1/file1
ok 4 - writing tree out with git write-tree
ok 5 - read previously written tree and checkout.
ok 6 - add a symlink
ok 7 - writing tree out with git write-tree
ok 8 - read previously written tree and checkout.
ok 9 - checking out conflicting path with -f
# passed all 9 test(s)
1..9
*** t2002-checkout-cache-u.sh ***
ok 1 - preparation
ok 2 - without -u, git checkout-index smudges stat information.
ok 3 - with -u, git checkout-index picks up stat information from new files.
# passed all 3 test(s)
1..3
*** t2003-checkout-cache-mkdir.sh ***
ok 1 - setup
ok 2 - have symlink in place where dir is expected.
ok 3 - use --prefix=path2/
ok 4 - use --prefix=tmp-
ok 5 - use --prefix=tmp- but with a conflicting file and dir
ok 6 - use --prefix=tmp/orary/ where tmp is a symlink
ok 7 - use --prefix=tmp/orary- where tmp is a symlink
ok 8 - use --prefix=tmp- where tmp-path1 is a symlink
ok 9 - apply filter from working tree .gitattributes with --prefix
ok 10 - apply CRLF filter from working tree .gitattributes with --prefix
# passed all 10 test(s)
1..10
*** t2004-checkout-cache-temp.sh ***
ok 1 - setup
ok 2 - checkout one stage 0 to temporary file
ok 3 - checkout all stage 0 to temporary files
ok 4 - setup 3-way merge
ok 5 - checkout one stage 2 to temporary file
ok 6 - checkout all stage 2 to temporary files
ok 7 - checkout all stages/one file to nothing
ok 8 - checkout all stages/one file to temporary files
ok 9 - checkout some stages/one file to temporary files
ok 10 - checkout all stages/all files to temporary files
ok 11 - -- path0: no entry
ok 12 - -- path1: all 3 stages
ok 13 - -- path2: no stage 1, have stage 2 and 3
ok 14 - -- path3: no stage 2, have stage 1 and 3
ok 15 - -- path4: no stage 3, have stage 1 and 3
ok 16 - -- asubdir/path5: no stage 2 and 3 have stage 1
ok 17 - checkout --temp within subdir
ok 18 - checkout --temp symlink
ok 19 - emit well-formed relative path
# passed all 19 test(s)
1..19
*** t2005-checkout-index-symlinks.sh ***
ok 1 - preparation
ok 2 - the checked-out symlink must be a file
ok 3 - the file must be the blob we added during the setup
# passed all 3 test(s)
1..3
*** t2006-checkout-index-basic.sh ***
ok 1 - checkout-index --gobbledegook
ok 2 - checkout-index -h in broken repository
# passed all 2 test(s)
1..2
*** t2007-checkout-symlink.sh ***
ok 1 - setup
ok 2 - switch from symlink to dir
ok 3 - Remove temporary directories & switch to master
ok 4 - switch from dir to symlink
# passed all 4 test(s)
1..4
*** t2008-checkout-subdir.sh ***
ok 1 - setup
ok 2 - remove and restore with relative path
ok 3 - checkout with empty prefix
ok 4 - checkout with simple prefix
ok 5 - checkout with complex relative path
ok 6 - relative path outside tree should fail
ok 7 - incorrect relative path to file should fail (1)
ok 8 - incorrect relative path should fail (2)
ok 9 - incorrect relative path should fail (3)
# passed all 9 test(s)
1..9
*** t2009-checkout-statinfo.sh ***
ok 1 - setup
ok 2 - branch switching
ok 3 - path checkout
# passed all 3 test(s)
1..3
*** t2010-checkout-ambiguous.sh ***
ok 1 - setup
ok 2 - reference must be a tree
ok 3 - branch switching
ok 4 - checkout world from the index
ok 5 - non ambiguous call
ok 6 - allow the most common case
ok 7 - check ambiguity
ok 8 - check ambiguity in subdir
ok 9 - disambiguate checking out from a tree-ish
ok 10 - accurate error message with more than one ref
# passed all 10 test(s)
1..10
*** t2011-checkout-invalid-head.sh ***
ok 1 - setup
ok 2 - checkout should not start branch from a tree
ok 3 - checkout master from invalid HEAD
ok 4 - checkout notices failure to lock HEAD
ok 5 - create ref directory/file conflict scenario
ok 6 - checkout away from d/f HEAD (unpacked, to branch)
ok 7 - checkout away from d/f HEAD (unpacked, to detached)
ok 8 - pack refs
ok 9 - checkout away from d/f HEAD (packed, to branch)
ok 10 - checkout away from d/f HEAD (packed, to detached)
# passed all 10 test(s)
1..10
*** t2012-checkout-last.sh ***
ok 1 - setup
ok 2 - "checkout -" does not work initially
ok 3 - first branch switch
ok 4 - "checkout -" switches back
ok 5 - "checkout -" switches forth
ok 6 - detach HEAD
ok 7 - "checkout -" attaches again
ok 8 - "checkout -" detaches again
ok 9 - more switches
ok 10 - switch to the last
ok 11 - switch to second from the last
ok 12 - switch to third from the last
ok 13 - switch to fourth from the last
ok 14 - switch to twelfth from the last
ok 15 - merge base test setup
ok 16 - another...master
ok 17 - ...master
ok 18 - master...
ok 19 - "checkout -" works after a rebase A
ok 20 - "checkout -" works after a rebase A B
ok 21 - "checkout -" works after a rebase -i A
ok 22 - "checkout -" works after a rebase -i A B
# passed all 22 test(s)
1..22
*** t2013-checkout-submodule.sh ***
ok 1 - setup
ok 2 - "reset <submodule>" updates the index
ok 3 - "checkout <submodule>" updates the index only
ok 4 - "checkout <submodule>" honors diff.ignoreSubmodules
ok 5 - "checkout <submodule>" honors submodule.*.ignore from .gitmodules
ok 6 - "checkout <submodule>" honors submodule.*.ignore from .git/config
ok 7 - git checkout --recurse-submodules: added submodule is checked out
ok 8 - git checkout --recurse-submodules: added submodule is checked out in empty dir
ok 9 - git checkout --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 10 - git checkout --recurse-submodules: replace tracked file with submodule checks out submodule
ok 11 - git checkout --recurse-submodules: replace directory with submodule
ok 12 - git checkout --recurse-submodules: removed submodule removes submodules working tree
ok 13 - git checkout --recurse-submodules: removed submodule absorbs submodules .git directory
ok 14 - git checkout --recurse-submodules: replace submodule with a file
not ok 15 - git checkout --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 16 - git checkout --recurse-submodules: modified submodule updates submodule work tree
ok 17 - git checkout --recurse-submodules: updating to a missing submodule commit fails
ok 18 - git checkout --recurse-submodules: added submodule doesn't remove untracked file with same name
ok 19 - git checkout --recurse-submodules: added submodule removes an untracked ignored file
not ok 20 - git checkout --recurse-submodules: replace submodule with a directory # TODO known breakage
not ok 21 - git checkout --recurse-submodules: replace submodule containing a .git directory with a directory must absorb the git dir # TODO known breakage
ok 22 - git checkout --recurse-submodules: replace submodule with a file works ignores ignored files in submodule
ok 23 - git -c submodule.recurse=true checkout: modified submodule updates submodule work tree
ok 24 - git checkout --recurse-submodules: modified submodule updates submodule recursively
ok 25 - git checkout -f --recurse-submodules: added submodule is checked out
ok 26 - git checkout -f --recurse-submodules: added submodule is checked out in empty dir
ok 27 - git checkout -f --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 28 - git checkout -f --recurse-submodules: replace tracked file with submodule checks out submodule
ok 29 - git checkout -f --recurse-submodules: replace directory with submodule
ok 30 - git checkout -f --recurse-submodules: removed submodule removes submodules working tree
ok 31 - git checkout -f --recurse-submodules: removed submodule absorbs submodules .git directory
ok 32 - git checkout -f --recurse-submodules: replace submodule with a file
not ok 33 - git checkout -f --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 34 - git checkout -f --recurse-submodules: modified submodule updates submodule work tree
ok 35 - git checkout -f --recurse-submodules: updating to a missing submodule commit fails
ok 36 - git checkout -f --recurse-submodules: added submodule does remove untracked unignored file with same name when forced
ok 37 - git checkout -f --recurse-submodules: replace submodule with a directory
ok 38 - git checkout -f --recurse-submodules: replace submodule containing a .git directory with a directory must fail
ok 39 - git checkout -f --recurse-submodules: replace submodule with a file ignoring ignored files
ok 40 - git checkout -f --recurse-submodules: modified submodule does update submodule work tree from invalid commit
ok 41 - git checkout -f --recurse-submodules: updating submodules fixes .git links
ok 42 - git checkout -f --recurse-submodules: changed submodule worktree is reset
ok 43 - git checkout: added submodule creates empty directory
ok 44 - git checkout: added submodule leaves existing empty directory alone
ok 45 - git checkout: replace tracked file with submodule creates empty directory
ok 46 - git checkout: replace directory with submodule
ok 47 - git checkout: removed submodule leaves submodule directory and its contents in place
ok 48 - git checkout: removed submodule leaves submodule containing a .git directory alone
ok 49 - git checkout: replace submodule with a directory must fail
ok 50 - git checkout: replace submodule containing a .git directory with a directory must fail
not ok 51 - git checkout: replace submodule with a file must fail # TODO known breakage
not ok 52 - git checkout: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 53 - git checkout: modified submodule does not update submodule work tree
ok 54 - git checkout: modified submodule does not update submodule work tree to invalid commit
ok 55 - git checkout: modified submodule does not update submodule work tree from invalid commit
ok 56 - git checkout: added submodule doesn't remove untracked unignored file with same name
ok 57 - git checkout -f: added submodule creates empty directory
ok 58 - git checkout -f: added submodule leaves existing empty directory alone
ok 59 - git checkout -f: replace tracked file with submodule creates empty directory
ok 60 - git checkout -f: replace directory with submodule
ok 61 - git checkout -f: removed submodule leaves submodule directory and its contents in place
ok 62 - git checkout -f: removed submodule leaves submodule containing a .git directory alone
not ok 63 - git checkout -f: replace submodule with a directory must fail # TODO known breakage
not ok 64 - git checkout -f: replace submodule containing a .git directory with a directory must fail # TODO known breakage
not ok 65 - git checkout -f: replace submodule with a file must fail # TODO known breakage
not ok 66 - git checkout -f: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 67 - git checkout -f: modified submodule does not update submodule work tree
ok 68 - git checkout -f: modified submodule does not update submodule work tree to invalid commit
ok 69 - git checkout -f: modified submodule does not update submodule work tree from invalid commit
ok 70 - git checkout -f: added submodule does remove untracked unignored file with same name when forced
# still have 10 known breakage(s)
# passed all remaining 60 test(s)
1..70
*** t2014-switch.sh ***
ok 1 - setup
ok 2 - check all changes are staged
ok 3 - second commit
ok 4 - check
# passed all 4 test(s)
1..4
*** t2015-checkout-unborn.sh ***
ok 1 - setup
ok 2 - checkout from unborn preserves untracked files
ok 3 - checkout from unborn preserves index contents
ok 4 - checkout from unborn merges identical index contents
ok 5 - checking out another branch from unborn state
ok 6 - checking out in a newly created repo
# passed all 6 test(s)
1..6
*** t2016-checkout-patch.sh ***
ok 1 - setup
ok 2 - saying "n" does nothing
ok 3 - git checkout -p
ok 4 - git checkout -p with staged changes
ok 5 - git checkout -p HEAD with NO staged changes: abort
ok 6 - git checkout -p HEAD with NO staged changes: apply
ok 7 - git checkout -p HEAD with change already staged
ok 8 - git checkout -p HEAD^
ok 9 - git checkout -p handles deletion
ok 10 - path limiting works: dir
ok 11 - path limiting works: -- dir
ok 12 - path limiting works: HEAD^ -- dir
ok 13 - path limiting works: foo inside dir
ok 14 - none of this moved HEAD
# passed all 14 test(s)
1..14
*** t2017-checkout-orphan.sh ***
ok 1 - Setup
ok 2 - --orphan creates a new orphan branch from HEAD
ok 3 - --orphan creates a new orphan branch from <start_point>
ok 4 - --orphan must be rejected with -b
ok 5 - --orphan must be rejected with -t
ok 6 - --orphan ignores branch.autosetupmerge
ok 7 - --orphan makes reflog by default
ok 8 - --orphan does not make reflog when core.logAllRefUpdates = false
ok 9 - --orphan with -l makes reflog when core.logAllRefUpdates = false
ok 10 - giving up --orphan not committed when -l and core.logAllRefUpdates = false deletes reflog
ok 11 - --orphan is rejected with an existing name
ok 12 - --orphan refuses to switch if a merge is needed
ok 13 - cannot --detach on an unborn branch
# passed all 13 test(s)
1..13
*** t2018-checkout-branch.sh ***
ok 1 - setup
ok 2 - checkout -b to a new branch, set to HEAD
ok 3 - checkout -b to a new branch, set to an explicit ref
ok 4 - checkout -b to a new branch with unmergeable changes fails
ok 5 - checkout -f -b to a new branch with unmergeable changes discards changes
ok 6 - checkout -b to a new branch preserves mergeable changes
ok 7 - checkout -f -b to a new branch with mergeable changes discards changes
ok 8 - checkout -b to an existing branch fails
ok 9 - checkout -b to @{-1} fails with the right branch name
ok 10 - checkout -B to an existing branch resets branch to HEAD
ok 11 - checkout -B to an existing branch from detached HEAD resets branch to HEAD
ok 12 - checkout -B to an existing branch with an explicit ref resets branch to that ref
ok 13 - checkout -B to an existing branch with unmergeable changes fails
ok 14 - checkout -f -B to an existing branch with unmergeable changes discards changes
ok 15 - checkout -B to an existing branch preserves mergeable changes
ok 16 - checkout -f -B to an existing branch with mergeable changes discards changes
ok 17 - checkout -b <describe>
ok 18 - checkout -B to the current branch works
# passed all 18 test(s)
1..18
*** t2019-checkout-ambiguous-ref.sh ***
ok 1 - setup ambiguous refs
ok 2 - checkout ambiguous ref succeeds
ok 3 - checkout produces ambiguity warning
ok 4 - checkout chooses branch over tag
ok 5 - checkout reports switch to branch
ok 6 - checkout vague ref succeeds
ok 7 - checkout produces ambiguity warning
ok 8 - checkout chooses branch over tag
ok 9 - checkout reports switch to branch
# passed all 9 test(s)
1..9
*** t2020-checkout-detach.sh ***
ok 1 - setup
ok 2 - checkout branch does not detach
ok 3 - checkout tag detaches
ok 4 - checkout branch by full name detaches
ok 5 - checkout non-ref detaches
ok 6 - checkout ref^0 detaches
ok 7 - checkout --detach detaches
ok 8 - checkout --detach without branch name
ok 9 - checkout --detach errors out for non-commit
ok 10 - checkout --detach errors out for extra argument
ok 11 - checkout --detached and -b are incompatible
ok 12 - checkout --detach moves HEAD
ok 13 - checkout warns on orphan commits
ok 14 - checkout warns on orphan commits: output
ok 15 - checkout warns orphaning 1 of 2 commits
ok 16 - checkout warns orphaning 1 of 2 commits: output
ok 17 - checkout does not warn leaving ref tip
ok 18 - checkout does not warn leaving ref tip
ok 19 - checkout does not warn leaving reachable commit
ok 20 - checkout does not warn leaving reachable commit
ok 21 - tracking count is accurate after orphan check
ok 22 - no advice given for explicit detached head state
ok 23 - describe_detached_head prints no SHA-1 ellipsis when not asked to
ok 24 - describe_detached_head does print SHA-1 ellipsis when asked to
# passed all 24 test(s)
1..24
*** t2021-checkout-overwrite.sh ***
ok 1 - setup
ok 2 - create a commit where dir a/b changed to file
ok 3 - checkout commit with dir must not remove untracked a/b
ok 4 - create a commit where dir a/b changed to symlink
ok 5 - checkout commit with dir must not remove untracked a/b
ok 6 - the symlink remained
# passed all 6 test(s)
1..6
*** t2022-checkout-paths.sh ***
ok 1 - setup
ok 2 - checking out paths out of a tree does not clobber unrelated paths
ok 3 - do not touch unmerged entries matching $path but not in $tree
ok 4 - do not touch files that are already up-to-date
# passed all 4 test(s)
1..4
*** t2023-checkout-m.sh ***
ok 1 - setup
ok 2 - git merge master
ok 3 - -m restores 2-way conflicted+resolved file
ok 4 - -m restores 3-way conflicted+resolved file
# passed all 4 test(s)
1..4
*** t2024-checkout-dwim.sh ***
ok 1 - setup
ok 2 - checkout of non-existing branch fails
ok 3 - checkout of branch from multiple remotes fails #1
ok 4 - checkout of branch from multiple remotes fails with advice
ok 5 - checkout -p with multiple remotes does not print advice
ok 6 - checkout of branch from multiple remotes succeeds with checkout.defaultRemote #1
ok 7 - checkout of branch from a single remote succeeds #1
ok 8 - checkout of branch from a single remote succeeds #2
ok 9 - --no-guess suppresses branch auto-vivification
ok 10 - setup more remotes with unconventional refspecs
ok 11 - checkout of branch from multiple remotes fails #2
ok 12 - checkout of branch from multiple remotes fails #3
ok 13 - checkout of branch from a single remote succeeds #3
ok 14 - checkout of branch from a single remote succeeds #4
ok 15 - checkout of branch with a file having the same name fails
ok 16 - checkout of branch with a file in subdir having the same name fails
ok 17 - checkout <branch> -- succeeds, even if a file with the same name exists
ok 18 - loosely defined local base branch is reported correctly
# passed all 18 test(s)
1..18
*** t2025-worktree-add.sh ***
ok 1 - setup
ok 2 - "add" an existing worktree
ok 3 - "add" an existing empty worktree
ok 4 - "add" using shorthand - fails when no previous branch
ok 5 - "add" using - shorthand
ok 6 - "add" refuses to checkout locked branch
ok 7 - checking out paths not complaining about linked checkouts
ok 8 - "add" worktree
ok 9 - "add" worktree with lock
ok 10 - "add" worktree from a subdir
ok 11 - "add" from a linked checkout
ok 12 - "add" worktree creating new branch
ok 13 - die the same branch is already checked out
ok 14 - die the same branch is already checked out (symlink)
ok 15 - not die the same branch is already checked out
ok 16 - not die on re-checking out current branch
ok 17 - "add" from a bare repo
ok 18 - checkout from a bare repo without "add"
ok 19 - "add" default branch of a bare repo
ok 20 - checkout with grafts
ok 21 - "add" from relative HEAD
ok 22 - "add -b" with <branch> omitted
ok 23 - "add --detach" with <branch> omitted
ok 24 - "add" with <branch> omitted
ok 25 - "add" checks out existing branch of dwimd name
ok 26 - "add <path>" dwim fails with checked out branch
ok 27 - "add --force" with existing dwimd name doesnt die
ok 28 - "add" no auto-vivify with --detach and <branch> omitted
ok 29 - "add" -b/-B mutually exclusive
ok 30 - "add" -b/--detach mutually exclusive
ok 31 - "add" -B/--detach mutually exclusive
ok 32 - "add -B" fails if the branch is checked out
ok 33 - add -B
ok 34 - add --quiet
ok 35 - local clone from linked checkout
ok 36 - local clone --shared from linked checkout
ok 37 - "add" worktree with --no-checkout
ok 38 - "add" worktree with --checkout
ok 39 - put a worktree under rebase
ok 40 - add a worktree, checking out a rebased branch
ok 41 - checking out a rebased branch from another worktree
ok 42 - not allow to delete a branch under rebase
ok 43 - rename a branch under rebase not allowed
ok 44 - check out from current worktree branch ok
ok 45 - checkout a branch under bisect
ok 46 - rename a branch under bisect not allowed
ok 47 - --track sets up tracking
ok 48 - --no-track avoids setting up tracking
ok 49 - "add" <path> <non-existent-branch> fails
ok 50 - "add" <path> <branch> dwims
ok 51 - "add" <path> <branch> dwims with checkout.defaultRemote
ok 52 - git worktree add does not match remote
ok 53 - git worktree add --guess-remote sets up tracking
ok 54 - git worktree add with worktree.guessRemote sets up tracking
ok 55 - git worktree --no-guess-remote option overrides config
ok 56 - "add" invokes post-checkout hook (branch)
ok 57 - "add" invokes post-checkout hook (detached)
ok 58 - "add --no-checkout" suppresses post-checkout hook
ok 59 - "add" in other worktree invokes post-checkout hook
ok 60 - "add" in bare repo invokes post-checkout hook
# passed all 60 test(s)
1..60
*** t2026-worktree-prune.sh ***
ok 1 - initialize
ok 2 - worktree prune on normal repo
ok 3 - prune files inside $GIT_DIR/worktrees
ok 4 - prune directories without gitdir
ok 5 - prune directories with unreadable gitdir
ok 6 - prune directories with invalid gitdir
ok 7 - prune directories with gitdir pointing to nowhere
ok 8 - not prune locked checkout
ok 9 - not prune recent checkouts
ok 10 - not prune proper checkouts
# passed all 10 test(s)
1..10
*** t2027-worktree-list.sh ***
ok 1 - setup
ok 2 - rev-parse --git-common-dir on main worktree
ok 3 - rev-parse --git-path objects linked worktree
ok 4 - "list" all worktrees from main
ok 5 - "list" all worktrees from linked
ok 6 - "list" all worktrees --porcelain
ok 7 - bare repo setup
ok 8 - "list" all worktrees from bare main
ok 9 - "list" all worktrees --porcelain from bare main
ok 10 - "list" all worktrees from linked with a bare main
ok 11 - bare repo cleanup
ok 12 - broken main worktree still at the top
ok 13 - linked worktrees are sorted
# passed all 13 test(s)
1..13
*** t2028-worktree-move.sh ***
ok 1 - setup
ok 2 - lock main worktree
ok 3 - lock linked worktree
ok 4 - lock linked worktree from another worktree
ok 5 - lock worktree twice
ok 6 - lock worktree twice (from the locked worktree)
ok 7 - unlock main worktree
ok 8 - unlock linked worktree
ok 9 - unlock worktree twice
ok 10 - move non-worktree
ok 11 - move locked worktree
ok 12 - move worktree
ok 13 - move main worktree
ok 14 - move worktree to another dir
ok 15 - remove main worktree
ok 16 - remove locked worktree
ok 17 - remove worktree with dirty tracked file
ok 18 - remove worktree with untracked file
ok 19 - force remove worktree with untracked file
ok 20 - remove missing worktree
ok 21 - NOT remove missing-but-locked worktree
# passed all 21 test(s)
1..21
*** t2030-unresolve-info.sh ***
ok 1 - setup
ok 2 - add records switch clears
ok 3 - rm records reset clears
ok 4 - plumbing clears
ok 5 - add records checkout -m undoes
ok 6 - unmerge with plumbing
ok 7 - rerere and rerere forget
ok 8 - rerere and rerere forget (subdirectory)
ok 9 - rerere forget (binary)
ok 10 - rerere forget (add-add conflict)
# passed all 10 test(s)
1..10
*** t2050-git-dir-relative.sh ***
ok 1 - Setting up post-commit hook
ok 2 - post-commit hook used ordinarily
ok 3 - post-commit-hook created and used from top dir
ok 4 - post-commit-hook from sub dir
# passed all 4 test(s)
1..4
*** t2100-update-cache-badpath.sh ***
ok 1 - git update-index --add to add various paths.
ok 2 - git update-index to add conflicting path path0/file0 should fail.
ok 3 - git update-index to add conflicting path path1/file1 should fail.
ok 4 - git update-index to add conflicting path path2 should fail.
ok 5 - git update-index to add conflicting path path3 should fail.
# passed all 5 test(s)
1..5
*** t2101-update-index-reupdate.sh ***
ok 1 - update-index --add
ok 2 - update-index --again
ok 3 - update-index --remove --again
ok 4 - first commit
ok 5 - update-index again
ok 6 - update-index --update from subdir
ok 7 - update-index --update with pathspec
# passed all 7 test(s)
1..7
*** t2102-update-index-symlinks.sh ***
ok 1 - preparation
ok 2 - modify the symbolic link
ok 3 - the index entry must still be a symbolic link
# passed all 3 test(s)
1..3
*** t2103-update-index-ignore-missing.sh ***
ok 1 - basics
ok 2 - --ignore-missing --refresh
ok 3 - --unmerged --refresh
ok 4 - --ignore-submodules --refresh (1)
ok 5 - --ignore-submodules --refresh (2)
# passed all 5 test(s)
1..5
*** t2104-update-index-skip-worktree.sh ***
ok 1 - setup
ok 2 - index is at version 2
ok 3 - update-index --skip-worktree
ok 4 - index is at version 3 after having some skip-worktree entries
ok 5 - ls-files -t
ok 6 - update-index --no-skip-worktree
ok 7 - index version is back to 2 when there is no skip-worktree entry
# passed all 7 test(s)
1..7
*** t2105-update-index-gitfile.sh ***
ok 1 - submodule with absolute .git file
ok 2 - add gitlink to absolute .git file
ok 3 - submodule with relative .git file
ok 4 - add gitlink to relative .git file
# passed all 4 test(s)
1..4
*** t2106-update-index-assume-unchanged.sh ***
ok 1 - setup
ok 2 - do not switch branches with dirty file
# passed all 2 test(s)
1..2
*** t2107-update-index-basic.sh ***
ok 1 - update-index --nonsense fails
ok 2 - update-index --nonsense dumps usage
ok 3 - update-index -h with corrupt index
ok 4 - --cacheinfo complains of missing arguments
ok 5 - --cacheinfo does not accept blob null sha1
ok 6 - --cacheinfo does not accept gitlink null sha1
ok 7 - --cacheinfo mode,sha1,path (new syntax)
ok 8 - .lock files cleaned up
ok 9 - --chmod=+x and chmod=-x in the same argument list
# passed all 9 test(s)
1..9
*** t2200-add-update.sh ***
ok 1 - setup
ok 2 - update
ok 3 - update noticed a removal
ok 4 - update touched correct path
ok 5 - update did not touch other tracked files
ok 6 - update did not touch untracked files
ok 7 - cache tree has not been corrupted
ok 8 - update from a subdirectory
ok 9 - change gets noticed
ok 10 - non-qualified update in subdir updates from the root
ok 11 - replace a file with a symlink
ok 12 - add everything changed
ok 13 - touch and then add -u
ok 14 - touch and then add explicitly
ok 15 - add -n -u should not add but just report
ok 16 - add -u resolves unmerged paths
ok 17 - "add -u non-existent" should fail
# passed all 17 test(s)
1..17
*** t2201-add-update-typechange.sh ***
ok 1 - setup
ok 2 - modify
ok 3 - diff-files
ok 4 - diff-index
ok 5 - add -u
ok 6 - commit -a
# passed all 6 test(s)
1..6
*** t2202-add-addremove.sh ***
ok 1 - setup
ok 2 - git add --all
ok 3 - Just "git add" is a no-op
# passed all 3 test(s)
1..3
*** t2203-add-intent.sh ***
ok 1 - intent to add
ok 2 - git status
ok 3 - git status with porcelain v2
ok 4 - check result of "add -N"
ok 5 - intent to add is just an ordinary empty blob
ok 6 - intent to add does not clobber existing paths
ok 7 - i-t-a entry is simply ignored
ok 8 - can commit with an unrelated i-t-a entry in index
ok 9 - can "commit -a" with an i-t-a entry
ok 10 - cache-tree invalidates i-t-a paths
ok 11 - cache-tree does not ignore dir that has i-t-a entries
ok 12 - cache-tree does skip dir that becomes empty
ok 13 - commit: ita entries ignored in empty initial commit check
ok 14 - commit: ita entries ignored in empty commit check
ok 15 - rename detection finds the right names
ok 16 - double rename detection in status
ok 17 - diff-files/diff-cached shows ita as new/not-new files
ok 18 - "diff HEAD" includes ita as new files
ok 19 - apply --intent-to-add
# passed all 19 test(s)
1..19
*** t2204-add-ignored.sh ***
ok 1 - setup
ok 2 - no complaints for unignored file
ok 3 - no complaints for unignored dir/file
ok 4 - no complaints for unignored dir
ok 5 - no complaints for unignored d*
ok 6 - complaints for ignored ign
ok 7 - complaints for ignored ign output
ok 8 - complaints for ignored ign with unignored file
ok 9 - complaints for ignored ign with unignored file output
ok 10 - complaints for ignored dir/ign
ok 11 - complaints for ignored dir/ign output
ok 12 - complaints for ignored dir/ign with unignored file
ok 13 - complaints for ignored dir/ign with unignored file output
ok 14 - complaints for ignored dir/sub
ok 15 - complaints for ignored dir/sub output
ok 16 - complaints for ignored dir/sub with unignored file
ok 17 - complaints for ignored dir/sub with unignored file output
ok 18 - complaints for ignored dir/sub/ign
ok 19 - complaints for ignored dir/sub/ign output
ok 20 - complaints for ignored dir/sub/ign with unignored file
ok 21 - complaints for ignored dir/sub/ign with unignored file output
ok 22 - complaints for ignored sub/file
ok 23 - complaints for ignored sub/file output
ok 24 - complaints for ignored sub/file with unignored file
ok 25 - complaints for ignored sub/file with unignored file output
ok 26 - complaints for ignored sub
ok 27 - complaints for ignored sub output
ok 28 - complaints for ignored sub with unignored file
ok 29 - complaints for ignored sub with unignored file output
ok 30 - complaints for ignored sub/file
ok 31 - complaints for ignored sub/file output
ok 32 - complaints for ignored sub/file with unignored file
ok 33 - complaints for ignored sub/file with unignored file output
ok 34 - complaints for ignored sub/ign
ok 35 - complaints for ignored sub/ign output
ok 36 - complaints for ignored sub/ign with unignored file
ok 37 - complaints for ignored sub/ign with unignored file output
ok 38 - complaints for ignored sub in dir
ok 39 - complaints for ignored sub in dir output
ok 40 - complaints for ignored sub/file in dir
ok 41 - complaints for ignored sub/file in dir output
ok 42 - complaints for ignored sub/ign in dir
ok 43 - complaints for ignored sub/ign in dir output
ok 44 - complaints for ignored ign in sub
ok 45 - complaints for ignored ign in sub output
ok 46 - complaints for ignored file in sub
ok 47 - complaints for ignored file in sub output
# passed all 47 test(s)
1..47
*** t2300-cd-to-toplevel.sh ***
ok 1 - at physical root
ok 2 - at physical subdir
ok 3 - at symbolic root
ok 4 - at symbolic subdir
ok 5 - at internal symbolic subdir
# passed all 5 test(s)
1..5
*** t3000-ls-files-others.sh ***
ok 1 - setup 
ok 2 - setup: expected output
ok 3 - ls-files --others
ok 4 - ls-files --others --directory
ok 5 - --no-empty-directory hides empty directory
ok 6 - ls-files --others handles non-submodule .git
ok 7 - ls-files --others with symlinked submodule
# passed all 7 test(s)
1..7
*** t3001-ls-files-others-exclude.sh ***
ok 1 - git ls-files --others with various exclude options.
ok 2 - git ls-files --others with \r\n line endings.
ok 3 - setup skip-worktree gitignore
ok 4 - git ls-files --others with various exclude options.
ok 5 - restore gitignore
ok 6 - git status honors core.excludesfile
ok 7 - trailing slash in exclude allows directory match(1)
ok 8 - trailing slash in exclude allows directory match (2)
ok 9 - trailing slash in exclude forces directory match (1)
ok 10 - trailing slash in exclude forces directory match (2)
ok 11 - negated exclude matches can override previous ones
ok 12 - excluded directory overrides content patterns
ok 13 - negated directory doesn't affect content patterns
ok 14 - subdirectory ignore (setup)
ok 15 - subdirectory ignore (toplevel)
ok 16 - subdirectory ignore (l1/l2)
ok 17 - subdirectory ignore (l1)
ok 18 - show/hide empty ignored directory (setup)
ok 19 - show empty ignored directory with --directory
ok 20 - hide empty ignored directory with --no-empty-directory
ok 21 - show/hide empty ignored sub-directory (setup)
ok 22 - show empty ignored sub-directory with --directory
ok 23 - hide empty ignored sub-directory with --no-empty-directory
ok 24 - pattern matches prefix completely
ok 25 - ls-files with "**" patterns
ok 26 - ls-files with "**" patterns and no slashes
# passed all 26 test(s)
1..26
*** t3002-ls-files-dashpath.sh ***
ok 1 - setup
ok 2 - git ls-files without path restriction.
ok 3 - git ls-files with path restriction.
ok 4 - git ls-files with path restriction with --.
ok 5 - git ls-files with path restriction with -- --.
ok 6 - git ls-files with no path restriction.
# passed all 6 test(s)
1..6
*** t3003-ls-files-exclude.sh ***
ok 1 - create repo with file
ok 2 - ls-files output contains file (cached)
ok 3 - ls-files output contains file (modified)
ok 4 - add file to gitignore
ok 5 - ls-files output contains file (cached)
ok 6 - ls-files output contains file (modified)
ok 7 - ls-files -i lists only tracked-but-ignored files
# passed all 7 test(s)
1..7
*** t3004-ls-files-basic.sh ***
ok 1 - ls-files in empty repository
ok 2 - ls-files with nonexistent path
ok 3 - ls-files with nonsense option
ok 4 - ls-files -h in corrupt repository
ok 5 - ls-files with absolute paths to symlinks
# passed all 5 test(s)
1..5
*** t3005-ls-files-relative.sh ***
ok 1 - prepare
ok 2 - ls-files with mixed levels
ok 3 - ls-files -c
ok 4 - ls-files -o
# passed all 4 test(s)
1..4
*** t3006-ls-files-long.sh ***
ok 1 - setup
ok 2 - overly-long path by itself is not a problem
ok 3 - overly-long path does not replace another by mistake
# passed all 3 test(s)
1..3
*** t3007-ls-files-recurse-submodules.sh ***
ok 1 - setup directory structure and submodules
ok 2 - ls-files correctly outputs files in submodule
ok 3 - ls-files correctly outputs files in submodule with -z
ok 4 - ls-files does not output files not added to a repo
ok 5 - ls-files recurses more than 1 level
ok 6 - ls-files works with GIT_DIR
ok 7 - --recurse-submodules and pathspecs setup
ok 8 - inactive submodule
ok 9 - --recurse-submodules and pathspecs
ok 10 - --recurse-submodules and pathspecs
ok 11 - --recurse-submodules and pathspecs
ok 12 - --recurse-submodules and pathspecs
ok 13 - --recurse-submodules and pathspecs
ok 14 - --recurse-submodules and relative paths
ok 15 - --recurse-submodules does not support --error-unmatch
ok 16 - --recurse-submodules and --deleted are incompatible
ok 17 - --recurse-submodules and --modified are incompatible
ok 18 - --recurse-submodules and --others are incompatible
ok 19 - --recurse-submodules and --stage are incompatible
ok 20 - --recurse-submodules and --killed are incompatible
ok 21 - --recurse-submodules and --unmerged are incompatible
# passed all 21 test(s)
1..21
*** t3008-ls-files-lazy-init-name-hash.sh ***
ok 1 - no buffer overflow in lazy_init_name_hash
# passed all 1 test(s)
1..1
*** t3010-ls-files-killed-modified.sh ***
ok 1 - git update-index --add to add various paths.
ok 2 - git ls-files -k to show killed files.
ok 3 - git ls-files -k output (w/o icase)
ok 4 - git ls-files -k output (w/ icase)
ok 5 - git ls-files -m to show modified files.
ok 6 - validate git ls-files -m output.
# passed all 6 test(s)
1..6
*** t3020-ls-files-error-unmatch.sh ***
ok 1 - setup
ok 2 - git ls-files --error-unmatch should fail with unmatched path.
ok 3 - git ls-files --error-unmatch should succeed with matched paths.
# passed all 3 test(s)
1..3
*** t3030-merge-recursive.sh ***
ok 1 - setup 1
ok 2 - setup 2
ok 3 - setup 3
ok 4 - setup 4
ok 5 - setup 5
ok 6 - setup 6
ok 7 - setup 7
ok 8 - setup 8
ok 9 - setup 9
ok 10 - merge-recursive simple
ok 11 - merge-recursive result
ok 12 - fail if the index has unresolved entries
ok 13 - merge-recursive remove conflict
ok 14 - merge-recursive remove conflict
ok 15 - merge-recursive d/f simple
ok 16 - merge-recursive result
ok 17 - merge-recursive d/f conflict
ok 18 - merge-recursive d/f conflict result
ok 19 - merge-recursive d/f conflict the other way
ok 20 - merge-recursive d/f conflict result the other way
ok 21 - merge-recursive d/f conflict
ok 22 - merge-recursive d/f conflict result
ok 23 - merge-recursive d/f conflict
ok 24 - merge-recursive d/f conflict result
ok 25 - reset and 3-way merge
ok 26 - reset and bind merge
ok 27 - merge-recursive w/ empty work tree - ours has rename
ok 28 - merge-recursive w/ empty work tree - theirs has rename
ok 29 - merge removes empty directories
ok 30 - merge-recursive simple w/submodule
ok 31 - merge-recursive simple w/submodule result
ok 32 - merge-recursive copy vs. rename
not ok 33 - merge-recursive rename vs. rename/symlink # TODO known breakage
ok 34 - merging with triple rename across D/F conflict
ok 35 - merge-recursive remembers the names of all base trees
ok 36 - merge-recursive internal merge resolves to the sameness
# still have 1 known breakage(s)
# passed all remaining 35 test(s)
1..36
*** t3031-merge-criscross.sh ***
ok 1 - setup repo with criss-cross history
ok 2 - recursive merge between F and G does not cause segfault
# passed all 2 test(s)
1..2
*** t3032-merge-recursive-space-options.sh ***
ok 1 - setup
ok 2 - naive merge fails
ok 3 - --ignore-space-change makes merge succeed
ok 4 - naive cherry-pick fails
ok 5 - -Xignore-space-change makes cherry-pick succeed
ok 6 - --ignore-space-change: our w/s-only change wins
ok 7 - --ignore-space-change: their real change wins over w/s
ok 8 - --ignore-space-change: does not ignore new spaces
ok 9 - --ignore-all-space drops their new spaces
ok 10 - --ignore-all-space keeps our new spaces
ok 11 - --ignore-space-at-eol
# passed all 11 test(s)
1..11
*** t3033-merge-toplevel.sh ***
ok 1 - setup
ok 2 - merge an octopus into void
ok 3 - merge an octopus, fast-forward (ff)
ok 4 - merge octopus, non-fast-forward (ff)
ok 5 - merge octopus, fast-forward (does not ff)
ok 6 - merge octopus, non-fast-forward
ok 7 - merge FETCH_HEAD octopus into void
ok 8 - merge FETCH_HEAD octopus fast-forward (ff)
ok 9 - merge FETCH_HEAD octopus non-fast-forward (ff)
ok 10 - merge FETCH_HEAD octopus fast-forward (does not ff)
ok 11 - merge FETCH_HEAD octopus non-fast-forward
ok 12 - refuse two-project merge by default
ok 13 - two-project merge with --allow-unrelated-histories
# passed all 13 test(s)
1..13
*** t3034-merge-recursive-rename-options.sh ***
ok 1 - setup repo
ok 2 - setup thresholds
ok 3 - assumption for tests: rename detection with diff
ok 4 - default similarity threshold is 50%
ok 5 - low rename threshold
ok 6 - medium rename threshold
ok 7 - high rename threshold
ok 8 - exact renames only
ok 9 - rename threshold is truncated
ok 10 - disabled rename detection
ok 11 - last wins in --find-renames=<m> --find-renames=<n>
ok 12 - --find-renames resets threshold
ok 13 - last wins in --no-renames --find-renames
ok 14 - last wins in --find-renames --no-renames
ok 15 - assumption for further tests: trivial merge succeeds
ok 16 - --find-renames rejects negative argument
ok 17 - --find-renames rejects non-numbers
ok 18 - rename-threshold=<n> is a synonym for find-renames=<n>
ok 19 - last wins in --no-renames --rename-threshold=<n>
ok 20 - last wins in --rename-threshold=<n> --no-renames
ok 21 - --rename-threshold=<n> rejects negative argument
ok 22 - --rename-threshold=<n> rejects non-numbers
ok 23 - last wins in --rename-threshold=<m> --find-renames=<n>
ok 24 - last wins in --find-renames=<m> --rename-threshold=<n>
ok 25 - merge.renames disables rename detection
ok 26 - merge.renames defaults to diff.renames
ok 27 - merge.renames overrides diff.renames
# passed all 27 test(s)
1..27
*** t3035-merge-sparse.sh ***
ok 1 - setup
ok 2 - reset --hard works after the conflict
ok 3 - is reset properly
ok 4 - setup: conflict back
ok 5 - Merge abort works after the conflict
ok 6 - is aborted properly
# passed all 6 test(s)
1..6
*** t3040-subprojects-basic.sh ***
ok 1 - setup: create superproject
ok 2 - setup: create subprojects
ok 3 - check if fsck ignores the subprojects
ok 4 - check if commit in a subproject detected
ok 5 - check if a changed subproject HEAD can be committed
ok 6 - check if diff-index works for subproject elements
ok 7 - check if diff-tree works for subproject elements
ok 8 - check if git diff works for subproject elements
ok 9 - check if clone works
ok 10 - removing and adding subproject
ok 11 - checkout in superproject
# passed all 11 test(s)
1..11
*** t3050-subprojects-fetch.sh ***
ok 1 - setup
ok 2 - clone
ok 3 - advance
ok 4 - fetch
# passed all 4 test(s)
1..4
*** t3060-ls-files-with-tree.sh ***
ok 1 - setup
ok 2 - git -ls-files --with-tree should succeed from subdir
ok 3 - git -ls-files --with-tree should add entries from named tree.
# passed all 3 test(s)
1..3
*** t3070-wildmatch.sh ***
ok 1 - cleanup after previous file test
ok 2 - setup match file test for foo
ok 3 - wildmatch: match 'foo' 'foo'
ok 4 - wildmatch (via ls-files): match 'foo' 'foo'
ok 5 - iwildmatch: match 'foo' 'foo'
ok 6 - iwildmatch (via ls-files): match 'foo' 'foo'
ok 7 - pathmatch: match 'foo' 'foo'
ok 8 - pathmatch (via ls-files): match 'foo' 'foo'
ok 9 - ipathmatch: match 'foo' 'foo'
ok 10 - ipathmatch (via ls-files): match 'foo' 'foo'
ok 11 - cleanup after previous file test
ok 12 - setup match file test for foo
ok 13 - wildmatch: no match 'foo' 'bar'
ok 14 - wildmatch (via ls-files): no match 'bar' 'foo'
ok 15 - iwildmatch: no match 'foo' 'bar'
ok 16 - iwildmatch (via ls-files): no match 'bar' 'foo'
ok 17 - pathmatch: no match 'foo' 'bar'
ok 18 - pathmatch (via ls-files): no match 'bar' 'foo'
ok 19 - ipathmatch: no match 'foo' 'bar'
ok 20 - ipathmatch (via ls-files): no match 'bar' 'foo'
ok 21 - cleanup after previous file test
ok 22 - setup match file test for 
ok 23 - wildmatch: match '' ''
not ok 24 - wildmatch (via ls-files): match skip '' '' # TODO known breakage
ok 25 - iwildmatch: match '' ''
not ok 26 - iwildmatch (via ls-files): match skip '' '' # TODO known breakage
ok 27 - pathmatch: match '' ''
not ok 28 - pathmatch (via ls-files): match skip '' '' # TODO known breakage
ok 29 - ipathmatch: match '' ''
not ok 30 - ipathmatch (via ls-files): match skip '' '' # TODO known breakage
ok 31 - cleanup after previous file test
ok 32 - setup match file test for foo
ok 33 - wildmatch: match 'foo' '???'
ok 34 - wildmatch (via ls-files): match '???' 'foo'
ok 35 - iwildmatch: match 'foo' '???'
ok 36 - iwildmatch (via ls-files): match '???' 'foo'
ok 37 - pathmatch: match 'foo' '???'
ok 38 - pathmatch (via ls-files): match '???' 'foo'
ok 39 - ipathmatch: match 'foo' '???'
ok 40 - ipathmatch (via ls-files): match '???' 'foo'
ok 41 - cleanup after previous file test
ok 42 - setup match file test for foo
ok 43 - wildmatch: no match 'foo' '??'
ok 44 - wildmatch (via ls-files): no match '??' 'foo'
ok 45 - iwildmatch: no match 'foo' '??'
ok 46 - iwildmatch (via ls-files): no match '??' 'foo'
ok 47 - pathmatch: no match 'foo' '??'
ok 48 - pathmatch (via ls-files): no match '??' 'foo'
ok 49 - ipathmatch: no match 'foo' '??'
ok 50 - ipathmatch (via ls-files): no match '??' 'foo'
ok 51 - cleanup after previous file test
ok 52 - setup match file test for foo
ok 53 - wildmatch: match 'foo' '*'
ok 54 - wildmatch (via ls-files): match '*' 'foo'
ok 55 - iwildmatch: match 'foo' '*'
ok 56 - iwildmatch (via ls-files): match '*' 'foo'
ok 57 - pathmatch: match 'foo' '*'
ok 58 - pathmatch (via ls-files): match '*' 'foo'
ok 59 - ipathmatch: match 'foo' '*'
ok 60 - ipathmatch (via ls-files): match '*' 'foo'
ok 61 - cleanup after previous file test
ok 62 - setup match file test for foo
ok 63 - wildmatch: match 'foo' 'f*'
ok 64 - wildmatch (via ls-files): match 'f*' 'foo'
ok 65 - iwildmatch: match 'foo' 'f*'
ok 66 - iwildmatch (via ls-files): match 'f*' 'foo'
ok 67 - pathmatch: match 'foo' 'f*'
ok 68 - pathmatch (via ls-files): match 'f*' 'foo'
ok 69 - ipathmatch: match 'foo' 'f*'
ok 70 - ipathmatch (via ls-files): match 'f*' 'foo'
ok 71 - cleanup after previous file test
ok 72 - setup match file test for foo
ok 73 - wildmatch: no match 'foo' '*f'
ok 74 - wildmatch (via ls-files): no match '*f' 'foo'
ok 75 - iwildmatch: no match 'foo' '*f'
ok 76 - iwildmatch (via ls-files): no match '*f' 'foo'
ok 77 - pathmatch: no match 'foo' '*f'
ok 78 - pathmatch (via ls-files): no match '*f' 'foo'
ok 79 - ipathmatch: no match 'foo' '*f'
ok 80 - ipathmatch (via ls-files): no match '*f' 'foo'
ok 81 - cleanup after previous file test
ok 82 - setup match file test for foo
ok 83 - wildmatch: match 'foo' '*foo*'
ok 84 - wildmatch (via ls-files): match '*foo*' 'foo'
ok 85 - iwildmatch: match 'foo' '*foo*'
ok 86 - iwildmatch (via ls-files): match '*foo*' 'foo'
ok 87 - pathmatch: match 'foo' '*foo*'
ok 88 - pathmatch (via ls-files): match '*foo*' 'foo'
ok 89 - ipathmatch: match 'foo' '*foo*'
ok 90 - ipathmatch (via ls-files): match '*foo*' 'foo'
ok 91 - cleanup after previous file test
ok 92 - setup match file test for foobar
ok 93 - wildmatch: match 'foobar' '*ob*a*r*'
ok 94 - wildmatch (via ls-files): match '*ob*a*r*' 'foobar'
ok 95 - iwildmatch: match 'foobar' '*ob*a*r*'
ok 96 - iwildmatch (via ls-files): match '*ob*a*r*' 'foobar'
ok 97 - pathmatch: match 'foobar' '*ob*a*r*'
ok 98 - pathmatch (via ls-files): match '*ob*a*r*' 'foobar'
ok 99 - ipathmatch: match 'foobar' '*ob*a*r*'
ok 100 - ipathmatch (via ls-files): match '*ob*a*r*' 'foobar'
ok 101 - cleanup after previous file test
ok 102 - setup match file test for aaaaaaabababab
ok 103 - wildmatch: match 'aaaaaaabababab' '*ab'
ok 104 - wildmatch (via ls-files): match '*ab' 'aaaaaaabababab'
ok 105 - iwildmatch: match 'aaaaaaabababab' '*ab'
ok 106 - iwildmatch (via ls-files): match '*ab' 'aaaaaaabababab'
ok 107 - pathmatch: match 'aaaaaaabababab' '*ab'
ok 108 - pathmatch (via ls-files): match '*ab' 'aaaaaaabababab'
ok 109 - ipathmatch: match 'aaaaaaabababab' '*ab'
ok 110 - ipathmatch (via ls-files): match '*ab' 'aaaaaaabababab'
ok 111 - cleanup after previous file test
ok 112 - setup match file test for foo*
ok 113 - wildmatch: match 'foo*' 'foo\*'
ok 114 - wildmatch (via ls-files): match 'foo\*' 'foo*'
ok 115 - iwildmatch: match 'foo*' 'foo\*'
ok 116 - iwildmatch (via ls-files): match 'foo\*' 'foo*'
ok 117 - pathmatch: match 'foo*' 'foo\*'
ok 118 - pathmatch (via ls-files): match 'foo\*' 'foo*'
ok 119 - ipathmatch: match 'foo*' 'foo\*'
ok 120 - ipathmatch (via ls-files): match 'foo\*' 'foo*'
ok 121 - cleanup after previous file test
ok 122 - setup match file test for foobar
ok 123 - wildmatch: no match 'foobar' 'foo\*bar'
ok 124 - wildmatch (via ls-files): no match 'foo\*bar' 'foobar'
ok 125 - iwildmatch: no match 'foobar' 'foo\*bar'
ok 126 - iwildmatch (via ls-files): no match 'foo\*bar' 'foobar'
ok 127 - pathmatch: no match 'foobar' 'foo\*bar'
ok 128 - pathmatch (via ls-files): no match 'foo\*bar' 'foobar'
ok 129 - ipathmatch: no match 'foobar' 'foo\*bar'
ok 130 - ipathmatch (via ls-files): no match 'foo\*bar' 'foobar'
ok 131 - cleanup after previous file test
ok 132 - setup match file test for f\oo
ok 133 - wildmatch: match 'f\oo' 'f\\oo'
ok 134 - wildmatch (via ls-files): match 'f\\oo' 'f\oo'
ok 135 - iwildmatch: match 'f\oo' 'f\\oo'
ok 136 - iwildmatch (via ls-files): match 'f\\oo' 'f\oo'
ok 137 - pathmatch: match 'f\oo' 'f\\oo'
ok 138 - pathmatch (via ls-files): match 'f\\oo' 'f\oo'
ok 139 - ipathmatch: match 'f\oo' 'f\\oo'
ok 140 - ipathmatch (via ls-files): match 'f\\oo' 'f\oo'
ok 141 - cleanup after previous file test
ok 142 - setup match file test for ball
ok 143 - wildmatch: match 'ball' '*[al]?'
ok 144 - wildmatch (via ls-files): match '*[al]?' 'ball'
ok 145 - iwildmatch: match 'ball' '*[al]?'
ok 146 - iwildmatch (via ls-files): match '*[al]?' 'ball'
ok 147 - pathmatch: match 'ball' '*[al]?'
ok 148 - pathmatch (via ls-files): match '*[al]?' 'ball'
ok 149 - ipathmatch: match 'ball' '*[al]?'
ok 150 - ipathmatch (via ls-files): match '*[al]?' 'ball'
ok 151 - cleanup after previous file test
ok 152 - setup match file test for ten
ok 153 - wildmatch: no match 'ten' '[ten]'
ok 154 - wildmatch (via ls-files): no match '[ten]' 'ten'
ok 155 - iwildmatch: no match 'ten' '[ten]'
ok 156 - iwildmatch (via ls-files): no match '[ten]' 'ten'
ok 157 - pathmatch: no match 'ten' '[ten]'
ok 158 - pathmatch (via ls-files): no match '[ten]' 'ten'
ok 159 - ipathmatch: no match 'ten' '[ten]'
ok 160 - ipathmatch (via ls-files): no match '[ten]' 'ten'
ok 161 - cleanup after previous file test
ok 162 - setup match file test for ten
ok 163 - wildmatch: no match 'ten' '**[!te]'
ok 164 - wildmatch (via ls-files): no match '**[!te]' 'ten'
ok 165 - iwildmatch: no match 'ten' '**[!te]'
ok 166 - iwildmatch (via ls-files): no match '**[!te]' 'ten'
ok 167 - pathmatch: match 'ten' '**[!te]'
ok 168 - pathmatch (via ls-files): match '**[!te]' 'ten'
ok 169 - ipathmatch: match 'ten' '**[!te]'
ok 170 - ipathmatch (via ls-files): match '**[!te]' 'ten'
ok 171 - cleanup after previous file test
ok 172 - setup match file test for ten
ok 173 - wildmatch: no match 'ten' '**[!ten]'
ok 174 - wildmatch (via ls-files): no match '**[!ten]' 'ten'
ok 175 - iwildmatch: no match 'ten' '**[!ten]'
ok 176 - iwildmatch (via ls-files): no match '**[!ten]' 'ten'
ok 177 - pathmatch: no match 'ten' '**[!ten]'
ok 178 - pathmatch (via ls-files): no match '**[!ten]' 'ten'
ok 179 - ipathmatch: no match 'ten' '**[!ten]'
ok 180 - ipathmatch (via ls-files): no match '**[!ten]' 'ten'
ok 181 - cleanup after previous file test
ok 182 - setup match file test for ten
ok 183 - wildmatch: match 'ten' 't[a-g]n'
ok 184 - wildmatch (via ls-files): match 't[a-g]n' 'ten'
ok 185 - iwildmatch: match 'ten' 't[a-g]n'
ok 186 - iwildmatch (via ls-files): match 't[a-g]n' 'ten'
ok 187 - pathmatch: match 'ten' 't[a-g]n'
ok 188 - pathmatch (via ls-files): match 't[a-g]n' 'ten'
ok 189 - ipathmatch: match 'ten' 't[a-g]n'
ok 190 - ipathmatch (via ls-files): match 't[a-g]n' 'ten'
ok 191 - cleanup after previous file test
ok 192 - setup match file test for ten
ok 193 - wildmatch: no match 'ten' 't[!a-g]n'
ok 194 - wildmatch (via ls-files): no match 't[!a-g]n' 'ten'
ok 195 - iwildmatch: no match 'ten' 't[!a-g]n'
ok 196 - iwildmatch (via ls-files): no match 't[!a-g]n' 'ten'
ok 197 - pathmatch: no match 'ten' 't[!a-g]n'
ok 198 - pathmatch (via ls-files): no match 't[!a-g]n' 'ten'
ok 199 - ipathmatch: no match 'ten' 't[!a-g]n'
ok 200 - ipathmatch (via ls-files): no match 't[!a-g]n' 'ten'
ok 201 - cleanup after previous file test
ok 202 - setup match file test for ton
ok 203 - wildmatch: match 'ton' 't[!a-g]n'
ok 204 - wildmatch (via ls-files): match 't[!a-g]n' 'ton'
ok 205 - iwildmatch: match 'ton' 't[!a-g]n'
ok 206 - iwildmatch (via ls-files): match 't[!a-g]n' 'ton'
ok 207 - pathmatch: match 'ton' 't[!a-g]n'
ok 208 - pathmatch (via ls-files): match 't[!a-g]n' 'ton'
ok 209 - ipathmatch: match 'ton' 't[!a-g]n'
ok 210 - ipathmatch (via ls-files): match 't[!a-g]n' 'ton'
ok 211 - cleanup after previous file test
ok 212 - setup match file test for ton
ok 213 - wildmatch: match 'ton' 't[^a-g]n'
ok 214 - wildmatch (via ls-files): match 't[^a-g]n' 'ton'
ok 215 - iwildmatch: match 'ton' 't[^a-g]n'
ok 216 - iwildmatch (via ls-files): match 't[^a-g]n' 'ton'
ok 217 - pathmatch: match 'ton' 't[^a-g]n'
ok 218 - pathmatch (via ls-files): match 't[^a-g]n' 'ton'
ok 219 - ipathmatch: match 'ton' 't[^a-g]n'
ok 220 - ipathmatch (via ls-files): match 't[^a-g]n' 'ton'
ok 221 - cleanup after previous file test
ok 222 - setup match file test for a]b
ok 223 - wildmatch: match 'a]b' 'a[]]b'
ok 224 - wildmatch (via ls-files): match 'a[]]b' 'a]b'
ok 225 - iwildmatch: match 'a]b' 'a[]]b'
ok 226 - iwildmatch (via ls-files): match 'a[]]b' 'a]b'
ok 227 - pathmatch: match 'a]b' 'a[]]b'
ok 228 - pathmatch (via ls-files): match 'a[]]b' 'a]b'
ok 229 - ipathmatch: match 'a]b' 'a[]]b'
ok 230 - ipathmatch (via ls-files): match 'a[]]b' 'a]b'
ok 231 - cleanup after previous file test
ok 232 - setup match file test for a-b
ok 233 - wildmatch: match 'a-b' 'a[]-]b'
ok 234 - wildmatch (via ls-files): match 'a[]-]b' 'a-b'
ok 235 - iwildmatch: match 'a-b' 'a[]-]b'
ok 236 - iwildmatch (via ls-files): match 'a[]-]b' 'a-b'
ok 237 - pathmatch: match 'a-b' 'a[]-]b'
ok 238 - pathmatch (via ls-files): match 'a[]-]b' 'a-b'
ok 239 - ipathmatch: match 'a-b' 'a[]-]b'
ok 240 - ipathmatch (via ls-files): match 'a[]-]b' 'a-b'
ok 241 - cleanup after previous file test
ok 242 - setup match file test for a]b
ok 243 - wildmatch: match 'a]b' 'a[]-]b'
ok 244 - wildmatch (via ls-files): match 'a[]-]b' 'a]b'
ok 245 - iwildmatch: match 'a]b' 'a[]-]b'
ok 246 - iwildmatch (via ls-files): match 'a[]-]b' 'a]b'
ok 247 - pathmatch: match 'a]b' 'a[]-]b'
ok 248 - pathmatch (via ls-files): match 'a[]-]b' 'a]b'
ok 249 - ipathmatch: match 'a]b' 'a[]-]b'
ok 250 - ipathmatch (via ls-files): match 'a[]-]b' 'a]b'
ok 251 - cleanup after previous file test
ok 252 - setup match file test for aab
ok 253 - wildmatch: no match 'aab' 'a[]-]b'
ok 254 - wildmatch (via ls-files): no match 'a[]-]b' 'aab'
ok 255 - iwildmatch: no match 'aab' 'a[]-]b'
ok 256 - iwildmatch (via ls-files): no match 'a[]-]b' 'aab'
ok 257 - pathmatch: no match 'aab' 'a[]-]b'
ok 258 - pathmatch (via ls-files): no match 'a[]-]b' 'aab'
ok 259 - ipathmatch: no match 'aab' 'a[]-]b'
ok 260 - ipathmatch (via ls-files): no match 'a[]-]b' 'aab'
ok 261 - cleanup after previous file test
ok 262 - setup match file test for aab
ok 263 - wildmatch: match 'aab' 'a[]a-]b'
ok 264 - wildmatch (via ls-files): match 'a[]a-]b' 'aab'
ok 265 - iwildmatch: match 'aab' 'a[]a-]b'
ok 266 - iwildmatch (via ls-files): match 'a[]a-]b' 'aab'
ok 267 - pathmatch: match 'aab' 'a[]a-]b'
ok 268 - pathmatch (via ls-files): match 'a[]a-]b' 'aab'
ok 269 - ipathmatch: match 'aab' 'a[]a-]b'
ok 270 - ipathmatch (via ls-files): match 'a[]a-]b' 'aab'
ok 271 - cleanup after previous file test
ok 272 - setup match file test for ]
ok 273 - wildmatch: match ']' ']'
ok 274 - wildmatch (via ls-files): match ']' ']'
ok 275 - iwildmatch: match ']' ']'
ok 276 - iwildmatch (via ls-files): match ']' ']'
ok 277 - pathmatch: match ']' ']'
ok 278 - pathmatch (via ls-files): match ']' ']'
ok 279 - ipathmatch: match ']' ']'
ok 280 - ipathmatch (via ls-files): match ']' ']'
ok 281 - cleanup after previous file test
ok 282 - setup match file test for foo/baz/bar
ok 283 - wildmatch: no match 'foo/baz/bar' 'foo*bar'
ok 284 - wildmatch (via ls-files): no match 'foo*bar' 'foo/baz/bar'
ok 285 - iwildmatch: no match 'foo/baz/bar' 'foo*bar'
ok 286 - iwildmatch (via ls-files): no match 'foo*bar' 'foo/baz/bar'
ok 287 - pathmatch: match 'foo/baz/bar' 'foo*bar'
ok 288 - pathmatch (via ls-files): match 'foo*bar' 'foo/baz/bar'
ok 289 - ipathmatch: match 'foo/baz/bar' 'foo*bar'
ok 290 - ipathmatch (via ls-files): match 'foo*bar' 'foo/baz/bar'
ok 291 - cleanup after previous file test
ok 292 - setup match file test for foo/baz/bar
ok 293 - wildmatch: no match 'foo/baz/bar' 'foo**bar'
ok 294 - wildmatch (via ls-files): no match 'foo**bar' 'foo/baz/bar'
ok 295 - iwildmatch: no match 'foo/baz/bar' 'foo**bar'
ok 296 - iwildmatch (via ls-files): no match 'foo**bar' 'foo/baz/bar'
ok 297 - pathmatch: match 'foo/baz/bar' 'foo**bar'
ok 298 - pathmatch (via ls-files): match 'foo**bar' 'foo/baz/bar'
ok 299 - ipathmatch: match 'foo/baz/bar' 'foo**bar'
ok 300 - ipathmatch (via ls-files): match 'foo**bar' 'foo/baz/bar'
ok 301 - cleanup after previous file test
ok 302 - setup match file test for foobazbar
ok 303 - wildmatch: no match 'foobazbar' 'foo**bar'
ok 304 - wildmatch (via ls-files): no match 'foo**bar' 'foobazbar'
ok 305 - iwildmatch: no match 'foobazbar' 'foo**bar'
ok 306 - iwildmatch (via ls-files): no match 'foo**bar' 'foobazbar'
ok 307 - pathmatch: match 'foobazbar' 'foo**bar'
ok 308 - pathmatch (via ls-files): match 'foo**bar' 'foobazbar'
ok 309 - ipathmatch: match 'foobazbar' 'foo**bar'
ok 310 - ipathmatch (via ls-files): match 'foo**bar' 'foobazbar'
ok 311 - cleanup after previous file test
ok 312 - setup match file test for foo/baz/bar
ok 313 - wildmatch: match 'foo/baz/bar' 'foo/**/bar'
ok 314 - wildmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'
ok 315 - iwildmatch: match 'foo/baz/bar' 'foo/**/bar'
ok 316 - iwildmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'
ok 317 - pathmatch: match 'foo/baz/bar' 'foo/**/bar'
ok 318 - pathmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'
ok 319 - ipathmatch: match 'foo/baz/bar' 'foo/**/bar'
ok 320 - ipathmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'
ok 321 - cleanup after previous file test
ok 322 - setup match file test for foo/baz/bar
ok 323 - wildmatch: match 'foo/baz/bar' 'foo/**/**/bar'
ok 324 - wildmatch (via ls-files): match 'foo/**/**/bar' 'foo/baz/bar'
ok 325 - iwildmatch: match 'foo/baz/bar' 'foo/**/**/bar'
ok 326 - iwildmatch (via ls-files): match 'foo/**/**/bar' 'foo/baz/bar'
ok 327 - pathmatch: no match 'foo/baz/bar' 'foo/**/**/bar'
ok 328 - pathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/baz/bar'
ok 329 - ipathmatch: no match 'foo/baz/bar' 'foo/**/**/bar'
ok 330 - ipathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/baz/bar'
ok 331 - cleanup after previous file test
ok 332 - setup match file test for foo/b/a/z/bar
ok 333 - wildmatch: match 'foo/b/a/z/bar' 'foo/**/bar'
ok 334 - wildmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'
ok 335 - iwildmatch: match 'foo/b/a/z/bar' 'foo/**/bar'
ok 336 - iwildmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'
ok 337 - pathmatch: match 'foo/b/a/z/bar' 'foo/**/bar'
ok 338 - pathmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'
ok 339 - ipathmatch: match 'foo/b/a/z/bar' 'foo/**/bar'
ok 340 - ipathmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'
ok 341 - cleanup after previous file test
ok 342 - setup match file test for foo/b/a/z/bar
ok 343 - wildmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'
ok 344 - wildmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'
ok 345 - iwildmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'
ok 346 - iwildmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'
ok 347 - pathmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'
ok 348 - pathmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'
ok 349 - ipathmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'
ok 350 - ipathmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'
ok 351 - cleanup after previous file test
ok 352 - setup match file test for foo/bar
ok 353 - wildmatch: match 'foo/bar' 'foo/**/bar'
ok 354 - wildmatch (via ls-files): match 'foo/**/bar' 'foo/bar'
ok 355 - iwildmatch: match 'foo/bar' 'foo/**/bar'
ok 356 - iwildmatch (via ls-files): match 'foo/**/bar' 'foo/bar'
ok 357 - pathmatch: no match 'foo/bar' 'foo/**/bar'
ok 358 - pathmatch (via ls-files): no match 'foo/**/bar' 'foo/bar'
ok 359 - ipathmatch: no match 'foo/bar' 'foo/**/bar'
ok 360 - ipathmatch (via ls-files): no match 'foo/**/bar' 'foo/bar'
ok 361 - cleanup after previous file test
ok 362 - setup match file test for foo/bar
ok 363 - wildmatch: match 'foo/bar' 'foo/**/**/bar'
ok 364 - wildmatch (via ls-files): match 'foo/**/**/bar' 'foo/bar'
ok 365 - iwildmatch: match 'foo/bar' 'foo/**/**/bar'
ok 366 - iwildmatch (via ls-files): match 'foo/**/**/bar' 'foo/bar'
ok 367 - pathmatch: no match 'foo/bar' 'foo/**/**/bar'
ok 368 - pathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/bar'
ok 369 - ipathmatch: no match 'foo/bar' 'foo/**/**/bar'
ok 370 - ipathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/bar'
ok 371 - cleanup after previous file test
ok 372 - setup match file test for foo/bar
ok 373 - wildmatch: no match 'foo/bar' 'foo?bar'
ok 374 - wildmatch (via ls-files): no match 'foo?bar' 'foo/bar'
ok 375 - iwildmatch: no match 'foo/bar' 'foo?bar'
ok 376 - iwildmatch (via ls-files): no match 'foo?bar' 'foo/bar'
ok 377 - pathmatch: match 'foo/bar' 'foo?bar'
ok 378 - pathmatch (via ls-files): match 'foo?bar' 'foo/bar'
ok 379 - ipathmatch: match 'foo/bar' 'foo?bar'
ok 380 - ipathmatch (via ls-files): match 'foo?bar' 'foo/bar'
ok 381 - cleanup after previous file test
ok 382 - setup match file test for foo/bar
ok 383 - wildmatch: no match 'foo/bar' 'foo[/]bar'
ok 384 - wildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'
ok 385 - iwildmatch: no match 'foo/bar' 'foo[/]bar'
ok 386 - iwildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'
ok 387 - pathmatch: match 'foo/bar' 'foo[/]bar'
ok 388 - pathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'
ok 389 - ipathmatch: match 'foo/bar' 'foo[/]bar'
ok 390 - ipathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'
ok 391 - cleanup after previous file test
ok 392 - setup match file test for foo/bar
ok 393 - wildmatch: no match 'foo/bar' 'foo[^a-z]bar'
ok 394 - wildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'
ok 395 - iwildmatch: no match 'foo/bar' 'foo[^a-z]bar'
ok 396 - iwildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'
ok 397 - pathmatch: match 'foo/bar' 'foo[^a-z]bar'
ok 398 - pathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'
ok 399 - ipathmatch: match 'foo/bar' 'foo[^a-z]bar'
ok 400 - ipathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'
ok 401 - cleanup after previous file test
ok 402 - setup match file test for foo/bar
ok 403 - wildmatch: no match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 404 - wildmatch (via ls-files): no match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'
ok 405 - iwildmatch: no match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 406 - iwildmatch (via ls-files): no match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'
ok 407 - pathmatch: match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 408 - pathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'
ok 409 - ipathmatch: match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 410 - ipathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'
ok 411 - cleanup after previous file test
ok 412 - setup match file test for foo-bar
ok 413 - wildmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 414 - wildmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'
ok 415 - iwildmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 416 - iwildmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'
ok 417 - pathmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 418 - pathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'
ok 419 - ipathmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'
ok 420 - ipathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'
ok 421 - cleanup after previous file test
ok 422 - setup match file test for foo
ok 423 - wildmatch: match 'foo' '**/foo'
ok 424 - wildmatch (via ls-files): match '**/foo' 'foo'
ok 425 - iwildmatch: match 'foo' '**/foo'
ok 426 - iwildmatch (via ls-files): match '**/foo' 'foo'
ok 427 - pathmatch: no match 'foo' '**/foo'
ok 428 - pathmatch (via ls-files): no match '**/foo' 'foo'
ok 429 - ipathmatch: no match 'foo' '**/foo'
ok 430 - ipathmatch (via ls-files): no match '**/foo' 'foo'
ok 431 - cleanup after previous file test
ok 432 - setup match file test for XXX/foo
ok 433 - wildmatch: match 'XXX/foo' '**/foo'
ok 434 - wildmatch (via ls-files): match '**/foo' 'XXX/foo'
ok 435 - iwildmatch: match 'XXX/foo' '**/foo'
ok 436 - iwildmatch (via ls-files): match '**/foo' 'XXX/foo'
ok 437 - pathmatch: match 'XXX/foo' '**/foo'
ok 438 - pathmatch (via ls-files): match '**/foo' 'XXX/foo'
ok 439 - ipathmatch: match 'XXX/foo' '**/foo'
ok 440 - ipathmatch (via ls-files): match '**/foo' 'XXX/foo'
ok 441 - cleanup after previous file test
ok 442 - setup match file test for bar/baz/foo
ok 443 - wildmatch: match 'bar/baz/foo' '**/foo'
ok 444 - wildmatch (via ls-files): match '**/foo' 'bar/baz/foo'
ok 445 - iwildmatch: match 'bar/baz/foo' '**/foo'
ok 446 - iwildmatch (via ls-files): match '**/foo' 'bar/baz/foo'
ok 447 - pathmatch: match 'bar/baz/foo' '**/foo'
ok 448 - pathmatch (via ls-files): match '**/foo' 'bar/baz/foo'
ok 449 - ipathmatch: match 'bar/baz/foo' '**/foo'
ok 450 - ipathmatch (via ls-files): match '**/foo' 'bar/baz/foo'
ok 451 - cleanup after previous file test
ok 452 - setup match file test for bar/baz/foo
ok 453 - wildmatch: no match 'bar/baz/foo' '*/foo'
ok 454 - wildmatch (via ls-files): no match '*/foo' 'bar/baz/foo'
ok 455 - iwildmatch: no match 'bar/baz/foo' '*/foo'
ok 456 - iwildmatch (via ls-files): no match '*/foo' 'bar/baz/foo'
ok 457 - pathmatch: match 'bar/baz/foo' '*/foo'
ok 458 - pathmatch (via ls-files): match '*/foo' 'bar/baz/foo'
ok 459 - ipathmatch: match 'bar/baz/foo' '*/foo'
ok 460 - ipathmatch (via ls-files): match '*/foo' 'bar/baz/foo'
ok 461 - cleanup after previous file test
ok 462 - setup match file test for foo/bar/baz
ok 463 - wildmatch: no match 'foo/bar/baz' '**/bar*'
ok 464 - wildmatch (via ls-files): no match '**/bar*' 'foo/bar/baz'
ok 465 - iwildmatch: no match 'foo/bar/baz' '**/bar*'
ok 466 - iwildmatch (via ls-files): no match '**/bar*' 'foo/bar/baz'
ok 467 - pathmatch: match 'foo/bar/baz' '**/bar*'
ok 468 - pathmatch (via ls-files): match '**/bar*' 'foo/bar/baz'
ok 469 - ipathmatch: match 'foo/bar/baz' '**/bar*'
ok 470 - ipathmatch (via ls-files): match '**/bar*' 'foo/bar/baz'
ok 471 - cleanup after previous file test
ok 472 - setup match file test for deep/foo/bar/baz
ok 473 - wildmatch: match 'deep/foo/bar/baz' '**/bar/*'
ok 474 - wildmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'
ok 475 - iwildmatch: match 'deep/foo/bar/baz' '**/bar/*'
ok 476 - iwildmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'
ok 477 - pathmatch: match 'deep/foo/bar/baz' '**/bar/*'
ok 478 - pathmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'
ok 479 - ipathmatch: match 'deep/foo/bar/baz' '**/bar/*'
ok 480 - ipathmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'
ok 481 - cleanup after previous file test
ok 482 - setup match file test for deep/foo/bar/baz/
ok 483 - wildmatch: no match 'deep/foo/bar/baz/' '**/bar/*'
not ok 484 - wildmatch (via ls-files): no match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage
ok 485 - iwildmatch: no match 'deep/foo/bar/baz/' '**/bar/*'
not ok 486 - iwildmatch (via ls-files): no match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage
ok 487 - pathmatch: match 'deep/foo/bar/baz/' '**/bar/*'
not ok 488 - pathmatch (via ls-files): match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage
ok 489 - ipathmatch: match 'deep/foo/bar/baz/' '**/bar/*'
not ok 490 - ipathmatch (via ls-files): match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage
ok 491 - cleanup after previous file test
ok 492 - setup match file test for deep/foo/bar/baz/
ok 493 - wildmatch: match 'deep/foo/bar/baz/' '**/bar/**'
not ok 494 - wildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage
ok 495 - iwildmatch: match 'deep/foo/bar/baz/' '**/bar/**'
not ok 496 - iwildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage
ok 497 - pathmatch: match 'deep/foo/bar/baz/' '**/bar/**'
not ok 498 - pathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage
ok 499 - ipathmatch: match 'deep/foo/bar/baz/' '**/bar/**'
not ok 500 - ipathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage
ok 501 - cleanup after previous file test
ok 502 - setup match file test for deep/foo/bar
ok 503 - wildmatch: no match 'deep/foo/bar' '**/bar/*'
ok 504 - wildmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'
ok 505 - iwildmatch: no match 'deep/foo/bar' '**/bar/*'
ok 506 - iwildmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'
ok 507 - pathmatch: no match 'deep/foo/bar' '**/bar/*'
ok 508 - pathmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'
ok 509 - ipathmatch: no match 'deep/foo/bar' '**/bar/*'
ok 510 - ipathmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'
ok 511 - cleanup after previous file test
ok 512 - setup match file test for deep/foo/bar/
ok 513 - wildmatch: match 'deep/foo/bar/' '**/bar/**'
not ok 514 - wildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage
ok 515 - iwildmatch: match 'deep/foo/bar/' '**/bar/**'
not ok 516 - iwildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage
ok 517 - pathmatch: match 'deep/foo/bar/' '**/bar/**'
not ok 518 - pathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage
ok 519 - ipathmatch: match 'deep/foo/bar/' '**/bar/**'
not ok 520 - ipathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage
ok 521 - cleanup after previous file test
ok 522 - setup match file test for foo/bar/baz
ok 523 - wildmatch: no match 'foo/bar/baz' '**/bar**'
ok 524 - wildmatch (via ls-files): no match '**/bar**' 'foo/bar/baz'
ok 525 - iwildmatch: no match 'foo/bar/baz' '**/bar**'
ok 526 - iwildmatch (via ls-files): no match '**/bar**' 'foo/bar/baz'
ok 527 - pathmatch: match 'foo/bar/baz' '**/bar**'
ok 528 - pathmatch (via ls-files): match '**/bar**' 'foo/bar/baz'
ok 529 - ipathmatch: match 'foo/bar/baz' '**/bar**'
ok 530 - ipathmatch (via ls-files): match '**/bar**' 'foo/bar/baz'
ok 531 - cleanup after previous file test
ok 532 - setup match file test for foo/bar/baz/x
ok 533 - wildmatch: match 'foo/bar/baz/x' '*/bar/**'
ok 534 - wildmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'
ok 535 - iwildmatch: match 'foo/bar/baz/x' '*/bar/**'
ok 536 - iwildmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'
ok 537 - pathmatch: match 'foo/bar/baz/x' '*/bar/**'
ok 538 - pathmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'
ok 539 - ipathmatch: match 'foo/bar/baz/x' '*/bar/**'
ok 540 - ipathmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'
ok 541 - cleanup after previous file test
ok 542 - setup match file test for deep/foo/bar/baz/x
ok 543 - wildmatch: no match 'deep/foo/bar/baz/x' '*/bar/**'
ok 544 - wildmatch (via ls-files): no match '*/bar/**' 'deep/foo/bar/baz/x'
ok 545 - iwildmatch: no match 'deep/foo/bar/baz/x' '*/bar/**'
ok 546 - iwildmatch (via ls-files): no match '*/bar/**' 'deep/foo/bar/baz/x'
ok 547 - pathmatch: match 'deep/foo/bar/baz/x' '*/bar/**'
ok 548 - pathmatch (via ls-files): match '*/bar/**' 'deep/foo/bar/baz/x'
ok 549 - ipathmatch: match 'deep/foo/bar/baz/x' '*/bar/**'
ok 550 - ipathmatch (via ls-files): match '*/bar/**' 'deep/foo/bar/baz/x'
ok 551 - cleanup after previous file test
ok 552 - setup match file test for deep/foo/bar/baz/x
ok 553 - wildmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'
ok 554 - wildmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'
ok 555 - iwildmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'
ok 556 - iwildmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'
ok 557 - pathmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'
ok 558 - pathmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'
ok 559 - ipathmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'
ok 560 - ipathmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'
ok 561 - cleanup after previous file test
ok 562 - setup match file test for acrt
ok 563 - wildmatch: no match 'acrt' 'a[c-c]st'
ok 564 - wildmatch (via ls-files): no match 'a[c-c]st' 'acrt'
ok 565 - iwildmatch: no match 'acrt' 'a[c-c]st'
ok 566 - iwildmatch (via ls-files): no match 'a[c-c]st' 'acrt'
ok 567 - pathmatch: no match 'acrt' 'a[c-c]st'
ok 568 - pathmatch (via ls-files): no match 'a[c-c]st' 'acrt'
ok 569 - ipathmatch: no match 'acrt' 'a[c-c]st'
ok 570 - ipathmatch (via ls-files): no match 'a[c-c]st' 'acrt'
ok 571 - cleanup after previous file test
ok 572 - setup match file test for acrt
ok 573 - wildmatch: match 'acrt' 'a[c-c]rt'
ok 574 - wildmatch (via ls-files): match 'a[c-c]rt' 'acrt'
ok 575 - iwildmatch: match 'acrt' 'a[c-c]rt'
ok 576 - iwildmatch (via ls-files): match 'a[c-c]rt' 'acrt'
ok 577 - pathmatch: match 'acrt' 'a[c-c]rt'
ok 578 - pathmatch (via ls-files): match 'a[c-c]rt' 'acrt'
ok 579 - ipathmatch: match 'acrt' 'a[c-c]rt'
ok 580 - ipathmatch (via ls-files): match 'a[c-c]rt' 'acrt'
ok 581 - cleanup after previous file test
ok 582 - setup match file test for ]
ok 583 - wildmatch: no match ']' '[!]-]'
ok 584 - wildmatch (via ls-files): no match '[!]-]' ']'
ok 585 - iwildmatch: no match ']' '[!]-]'
ok 586 - iwildmatch (via ls-files): no match '[!]-]' ']'
ok 587 - pathmatch: no match ']' '[!]-]'
ok 588 - pathmatch (via ls-files): no match '[!]-]' ']'
ok 589 - ipathmatch: no match ']' '[!]-]'
ok 590 - ipathmatch (via ls-files): no match '[!]-]' ']'
ok 591 - cleanup after previous file test
ok 592 - setup match file test for a
ok 593 - wildmatch: match 'a' '[!]-]'
ok 594 - wildmatch (via ls-files): match '[!]-]' 'a'
ok 595 - iwildmatch: match 'a' '[!]-]'
ok 596 - iwildmatch (via ls-files): match '[!]-]' 'a'
ok 597 - pathmatch: match 'a' '[!]-]'
ok 598 - pathmatch (via ls-files): match '[!]-]' 'a'
ok 599 - ipathmatch: match 'a' '[!]-]'
ok 600 - ipathmatch (via ls-files): match '[!]-]' 'a'
ok 601 - cleanup after previous file test
ok 602 - setup match file test for 
ok 603 - wildmatch: no match '' '\'
not ok 604 - wildmatch (via ls-files): no match skip '\' '' # TODO known breakage
ok 605 - iwildmatch: no match '' '\'
not ok 606 - iwildmatch (via ls-files): no match skip '\' '' # TODO known breakage
ok 607 - pathmatch: no match '' '\'
not ok 608 - pathmatch (via ls-files): no match skip '\' '' # TODO known breakage
ok 609 - ipathmatch: no match '' '\'
not ok 610 - ipathmatch (via ls-files): no match skip '\' '' # TODO known breakage
ok 611 - cleanup after previous file test
ok 612 - setup match file test for \
ok 613 - wildmatch: no match '\' '\'
ok 614 - wildmatch (via ls-files): match '\' '\'
ok 615 - iwildmatch: no match '\' '\'
ok 616 - iwildmatch (via ls-files): match '\' '\'
ok 617 - pathmatch: no match '\' '\'
ok 618 - pathmatch (via ls-files): match '\' '\'
ok 619 - ipathmatch: no match '\' '\'
ok 620 - ipathmatch (via ls-files): match '\' '\'
ok 621 - cleanup after previous file test
ok 622 - setup match file test for XXX/\
ok 623 - wildmatch: no match 'XXX/\' '*/\'
ok 624 - wildmatch (via ls-files): no match '*/\' 'XXX/\'
ok 625 - iwildmatch: no match 'XXX/\' '*/\'
ok 626 - iwildmatch (via ls-files): no match '*/\' 'XXX/\'
ok 627 - pathmatch: no match 'XXX/\' '*/\'
ok 628 - pathmatch (via ls-files): no match '*/\' 'XXX/\'
ok 629 - ipathmatch: no match 'XXX/\' '*/\'
ok 630 - ipathmatch (via ls-files): no match '*/\' 'XXX/\'
ok 631 - cleanup after previous file test
ok 632 - setup match file test for XXX/\
ok 633 - wildmatch: match 'XXX/\' '*/\\'
ok 634 - wildmatch (via ls-files): match '*/\\' 'XXX/\'
ok 635 - iwildmatch: match 'XXX/\' '*/\\'
ok 636 - iwildmatch (via ls-files): match '*/\\' 'XXX/\'
ok 637 - pathmatch: match 'XXX/\' '*/\\'
ok 638 - pathmatch (via ls-files): match '*/\\' 'XXX/\'
ok 639 - ipathmatch: match 'XXX/\' '*/\\'
ok 640 - ipathmatch (via ls-files): match '*/\\' 'XXX/\'
ok 641 - cleanup after previous file test
ok 642 - setup match file test for foo
ok 643 - wildmatch: match 'foo' 'foo'
ok 644 - wildmatch (via ls-files): match 'foo' 'foo'
ok 645 - iwildmatch: match 'foo' 'foo'
ok 646 - iwildmatch (via ls-files): match 'foo' 'foo'
ok 647 - pathmatch: match 'foo' 'foo'
ok 648 - pathmatch (via ls-files): match 'foo' 'foo'
ok 649 - ipathmatch: match 'foo' 'foo'
ok 650 - ipathmatch (via ls-files): match 'foo' 'foo'
ok 651 - cleanup after previous file test
ok 652 - setup match file test for @foo
ok 653 - wildmatch: match '@foo' '@foo'
ok 654 - wildmatch (via ls-files): match '@foo' '@foo'
ok 655 - iwildmatch: match '@foo' '@foo'
ok 656 - iwildmatch (via ls-files): match '@foo' '@foo'
ok 657 - pathmatch: match '@foo' '@foo'
ok 658 - pathmatch (via ls-files): match '@foo' '@foo'
ok 659 - ipathmatch: match '@foo' '@foo'
ok 660 - ipathmatch (via ls-files): match '@foo' '@foo'
ok 661 - cleanup after previous file test
ok 662 - setup match file test for foo
ok 663 - wildmatch: no match 'foo' '@foo'
ok 664 - wildmatch (via ls-files): no match '@foo' 'foo'
ok 665 - iwildmatch: no match 'foo' '@foo'
ok 666 - iwildmatch (via ls-files): no match '@foo' 'foo'
ok 667 - pathmatch: no match 'foo' '@foo'
ok 668 - pathmatch (via ls-files): no match '@foo' 'foo'
ok 669 - ipathmatch: no match 'foo' '@foo'
ok 670 - ipathmatch (via ls-files): no match '@foo' 'foo'
ok 671 - cleanup after previous file test
ok 672 - setup match file test for [ab]
ok 673 - wildmatch: match '[ab]' '\[ab]'
ok 674 - wildmatch (via ls-files): match '\[ab]' '[ab]'
ok 675 - iwildmatch: match '[ab]' '\[ab]'
ok 676 - iwildmatch (via ls-files): match '\[ab]' '[ab]'
ok 677 - pathmatch: match '[ab]' '\[ab]'
ok 678 - pathmatch (via ls-files): match '\[ab]' '[ab]'
ok 679 - ipathmatch: match '[ab]' '\[ab]'
ok 680 - ipathmatch (via ls-files): match '\[ab]' '[ab]'
ok 681 - cleanup after previous file test
ok 682 - setup match file test for [ab]
ok 683 - wildmatch: match '[ab]' '[[]ab]'
ok 684 - wildmatch (via ls-files): match '[[]ab]' '[ab]'
ok 685 - iwildmatch: match '[ab]' '[[]ab]'
ok 686 - iwildmatch (via ls-files): match '[[]ab]' '[ab]'
ok 687 - pathmatch: match '[ab]' '[[]ab]'
ok 688 - pathmatch (via ls-files): match '[[]ab]' '[ab]'
ok 689 - ipathmatch: match '[ab]' '[[]ab]'
ok 690 - ipathmatch (via ls-files): match '[[]ab]' '[ab]'
ok 691 - cleanup after previous file test
ok 692 - setup match file test for [ab]
ok 693 - wildmatch: match '[ab]' '[[:]ab]'
ok 694 - wildmatch (via ls-files): match '[[:]ab]' '[ab]'
ok 695 - iwildmatch: match '[ab]' '[[:]ab]'
ok 696 - iwildmatch (via ls-files): match '[[:]ab]' '[ab]'
ok 697 - pathmatch: match '[ab]' '[[:]ab]'
ok 698 - pathmatch (via ls-files): match '[[:]ab]' '[ab]'
ok 699 - ipathmatch: match '[ab]' '[[:]ab]'
ok 700 - ipathmatch (via ls-files): match '[[:]ab]' '[ab]'
ok 701 - cleanup after previous file test
ok 702 - setup match file test for [ab]
ok 703 - wildmatch: no match '[ab]' '[[::]ab]'
ok 704 - wildmatch (via ls-files): no match '[[::]ab]' '[ab]'
ok 705 - iwildmatch: no match '[ab]' '[[::]ab]'
ok 706 - iwildmatch (via ls-files): no match '[[::]ab]' '[ab]'
ok 707 - pathmatch: no match '[ab]' '[[::]ab]'
ok 708 - pathmatch (via ls-files): no match '[[::]ab]' '[ab]'
ok 709 - ipathmatch: no match '[ab]' '[[::]ab]'
ok 710 - ipathmatch (via ls-files): no match '[[::]ab]' '[ab]'
ok 711 - cleanup after previous file test
ok 712 - setup match file test for [ab]
ok 713 - wildmatch: match '[ab]' '[[:digit]ab]'
ok 714 - wildmatch (via ls-files): match '[[:digit]ab]' '[ab]'
ok 715 - iwildmatch: match '[ab]' '[[:digit]ab]'
ok 716 - iwildmatch (via ls-files): match '[[:digit]ab]' '[ab]'
ok 717 - pathmatch: match '[ab]' '[[:digit]ab]'
ok 718 - pathmatch (via ls-files): match '[[:digit]ab]' '[ab]'
ok 719 - ipathmatch: match '[ab]' '[[:digit]ab]'
ok 720 - ipathmatch (via ls-files): match '[[:digit]ab]' '[ab]'
ok 721 - cleanup after previous file test
ok 722 - setup match file test for [ab]
ok 723 - wildmatch: match '[ab]' '[\[:]ab]'
ok 724 - wildmatch (via ls-files): match '[\[:]ab]' '[ab]'
ok 725 - iwildmatch: match '[ab]' '[\[:]ab]'
ok 726 - iwildmatch (via ls-files): match '[\[:]ab]' '[ab]'
ok 727 - pathmatch: match '[ab]' '[\[:]ab]'
ok 728 - pathmatch (via ls-files): match '[\[:]ab]' '[ab]'
ok 729 - ipathmatch: match '[ab]' '[\[:]ab]'
ok 730 - ipathmatch (via ls-files): match '[\[:]ab]' '[ab]'
ok 731 - cleanup after previous file test
ok 732 - setup match file test for ?a?b
ok 733 - wildmatch: match '?a?b' '\??\?b'
ok 734 - wildmatch (via ls-files): match '\??\?b' '?a?b'
ok 735 - iwildmatch: match '?a?b' '\??\?b'
ok 736 - iwildmatch (via ls-files): match '\??\?b' '?a?b'
ok 737 - pathmatch: match '?a?b' '\??\?b'
ok 738 - pathmatch (via ls-files): match '\??\?b' '?a?b'
ok 739 - ipathmatch: match '?a?b' '\??\?b'
ok 740 - ipathmatch (via ls-files): match '\??\?b' '?a?b'
ok 741 - cleanup after previous file test
ok 742 - setup match file test for abc
ok 743 - wildmatch: match 'abc' '\a\b\c'
ok 744 - wildmatch (via ls-files): match '\a\b\c' 'abc'
ok 745 - iwildmatch: match 'abc' '\a\b\c'
ok 746 - iwildmatch (via ls-files): match '\a\b\c' 'abc'
ok 747 - pathmatch: match 'abc' '\a\b\c'
ok 748 - pathmatch (via ls-files): match '\a\b\c' 'abc'
ok 749 - ipathmatch: match 'abc' '\a\b\c'
ok 750 - ipathmatch (via ls-files): match '\a\b\c' 'abc'
ok 751 - cleanup after previous file test
ok 752 - setup match file test for foo
ok 753 - wildmatch: no match 'foo' ''
ok 754 - wildmatch (via ls-files): match dies on '' 'foo'
ok 755 - iwildmatch: no match 'foo' ''
ok 756 - iwildmatch (via ls-files): match dies on '' 'foo'
ok 757 - pathmatch: no match 'foo' ''
ok 758 - pathmatch (via ls-files): match dies on '' 'foo'
ok 759 - ipathmatch: no match 'foo' ''
ok 760 - ipathmatch (via ls-files): match dies on '' 'foo'
ok 761 - cleanup after previous file test
ok 762 - setup match file test for foo/bar/baz/to
ok 763 - wildmatch: match 'foo/bar/baz/to' '**/t[o]'
ok 764 - wildmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'
ok 765 - iwildmatch: match 'foo/bar/baz/to' '**/t[o]'
ok 766 - iwildmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'
ok 767 - pathmatch: match 'foo/bar/baz/to' '**/t[o]'
ok 768 - pathmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'
ok 769 - ipathmatch: match 'foo/bar/baz/to' '**/t[o]'
ok 770 - ipathmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'
ok 771 - cleanup after previous file test
ok 772 - setup match file test for a1B
ok 773 - wildmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'
ok 774 - wildmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'
ok 775 - iwildmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'
ok 776 - iwildmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'
ok 777 - pathmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'
ok 778 - pathmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'
ok 779 - ipathmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'
ok 780 - ipathmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'
ok 781 - cleanup after previous file test
ok 782 - setup match file test for a
ok 783 - wildmatch: no match 'a' '[[:digit:][:upper:][:space:]]'
ok 784 - wildmatch (via ls-files): no match '[[:digit:][:upper:][:space:]]' 'a'
ok 785 - iwildmatch: match 'a' '[[:digit:][:upper:][:space:]]'
ok 786 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'a'
ok 787 - pathmatch: no match 'a' '[[:digit:][:upper:][:space:]]'
ok 788 - pathmatch (via ls-files): no match '[[:digit:][:upper:][:space:]]' 'a'
ok 789 - ipathmatch: match 'a' '[[:digit:][:upper:][:space:]]'
ok 790 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'a'
ok 791 - cleanup after previous file test
ok 792 - setup match file test for A
ok 793 - wildmatch: match 'A' '[[:digit:][:upper:][:space:]]'
ok 794 - wildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'
ok 795 - iwildmatch: match 'A' '[[:digit:][:upper:][:space:]]'
ok 796 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'
ok 797 - pathmatch: match 'A' '[[:digit:][:upper:][:space:]]'
ok 798 - pathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'
ok 799 - ipathmatch: match 'A' '[[:digit:][:upper:][:space:]]'
ok 800 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'
ok 801 - cleanup after previous file test
ok 802 - setup match file test for 1
ok 803 - wildmatch: match '1' '[[:digit:][:upper:][:space:]]'
ok 804 - wildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'
ok 805 - iwildmatch: match '1' '[[:digit:][:upper:][:space:]]'
ok 806 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'
ok 807 - pathmatch: match '1' '[[:digit:][:upper:][:space:]]'
ok 808 - pathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'
ok 809 - ipathmatch: match '1' '[[:digit:][:upper:][:space:]]'
ok 810 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'
ok 811 - cleanup after previous file test
ok 812 - setup match file test for 1
ok 813 - wildmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'
ok 814 - wildmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'
ok 815 - iwildmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'
ok 816 - iwildmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'
ok 817 - pathmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'
ok 818 - pathmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'
ok 819 - ipathmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'
ok 820 - ipathmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'
ok 821 - cleanup after previous file test
ok 822 - setup match file test for  
ok 823 - wildmatch: match ' ' '[[:digit:][:upper:][:space:]]'
ok 824 - wildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '
ok 825 - iwildmatch: match ' ' '[[:digit:][:upper:][:space:]]'
ok 826 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '
ok 827 - pathmatch: match ' ' '[[:digit:][:upper:][:space:]]'
ok 828 - pathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '
ok 829 - ipathmatch: match ' ' '[[:digit:][:upper:][:space:]]'
ok 830 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '
ok 831 - cleanup after previous file test
ok 832 - setup match file test for .
ok 833 - wildmatch: no match '.' '[[:digit:][:upper:][:space:]]'
not ok 834 - wildmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage
ok 835 - iwildmatch: no match '.' '[[:digit:][:upper:][:space:]]'
not ok 836 - iwildmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage
ok 837 - pathmatch: no match '.' '[[:digit:][:upper:][:space:]]'
not ok 838 - pathmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage
ok 839 - ipathmatch: no match '.' '[[:digit:][:upper:][:space:]]'
not ok 840 - ipathmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage
ok 841 - cleanup after previous file test
ok 842 - setup match file test for .
ok 843 - wildmatch: match '.' '[[:digit:][:punct:][:space:]]'
not ok 844 - wildmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage
ok 845 - iwildmatch: match '.' '[[:digit:][:punct:][:space:]]'
not ok 846 - iwildmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage
ok 847 - pathmatch: match '.' '[[:digit:][:punct:][:space:]]'
not ok 848 - pathmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage
ok 849 - ipathmatch: match '.' '[[:digit:][:punct:][:space:]]'
not ok 850 - ipathmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage
ok 851 - cleanup after previous file test
ok 852 - setup match file test for 5
ok 853 - wildmatch: match '5' '[[:xdigit:]]'
ok 854 - wildmatch (via ls-files): match '[[:xdigit:]]' '5'
ok 855 - iwildmatch: match '5' '[[:xdigit:]]'
ok 856 - iwildmatch (via ls-files): match '[[:xdigit:]]' '5'
ok 857 - pathmatch: match '5' '[[:xdigit:]]'
ok 858 - pathmatch (via ls-files): match '[[:xdigit:]]' '5'
ok 859 - ipathmatch: match '5' '[[:xdigit:]]'
ok 860 - ipathmatch (via ls-files): match '[[:xdigit:]]' '5'
ok 861 - cleanup after previous file test
ok 862 - setup match file test for f
ok 863 - wildmatch: match 'f' '[[:xdigit:]]'
ok 864 - wildmatch (via ls-files): match '[[:xdigit:]]' 'f'
ok 865 - iwildmatch: match 'f' '[[:xdigit:]]'
ok 866 - iwildmatch (via ls-files): match '[[:xdigit:]]' 'f'
ok 867 - pathmatch: match 'f' '[[:xdigit:]]'
ok 868 - pathmatch (via ls-files): match '[[:xdigit:]]' 'f'
ok 869 - ipathmatch: match 'f' '[[:xdigit:]]'
ok 870 - ipathmatch (via ls-files): match '[[:xdigit:]]' 'f'
ok 871 - cleanup after previous file test
ok 872 - setup match file test for D
ok 873 - wildmatch: match 'D' '[[:xdigit:]]'
ok 874 - wildmatch (via ls-files): match '[[:xdigit:]]' 'D'
ok 875 - iwildmatch: match 'D' '[[:xdigit:]]'
ok 876 - iwildmatch (via ls-files): match '[[:xdigit:]]' 'D'
ok 877 - pathmatch: match 'D' '[[:xdigit:]]'
ok 878 - pathmatch (via ls-files): match '[[:xdigit:]]' 'D'
ok 879 - ipathmatch: match 'D' '[[:xdigit:]]'
ok 880 - ipathmatch (via ls-files): match '[[:xdigit:]]' 'D'
ok 881 - cleanup after previous file test
ok 882 - setup match file test for _
ok 883 - wildmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'
ok 884 - wildmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'
ok 885 - iwildmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'
ok 886 - iwildmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'
ok 887 - pathmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'
ok 888 - pathmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'
ok 889 - ipathmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'
ok 890 - ipathmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'
ok 891 - cleanup after previous file test
ok 892 - setup match file test for .
ok 893 - wildmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'
not ok 894 - wildmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage
ok 895 - iwildmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'
not ok 896 - iwildmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage
ok 897 - pathmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'
not ok 898 - pathmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage
ok 899 - ipathmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'
not ok 900 - ipathmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage
ok 901 - cleanup after previous file test
ok 902 - setup match file test for 5
ok 903 - wildmatch: match '5' '[a-c[:digit:]x-z]'
ok 904 - wildmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'
ok 905 - iwildmatch: match '5' '[a-c[:digit:]x-z]'
ok 906 - iwildmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'
ok 907 - pathmatch: match '5' '[a-c[:digit:]x-z]'
ok 908 - pathmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'
ok 909 - ipathmatch: match '5' '[a-c[:digit:]x-z]'
ok 910 - ipathmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'
ok 911 - cleanup after previous file test
ok 912 - setup match file test for b
ok 913 - wildmatch: match 'b' '[a-c[:digit:]x-z]'
ok 914 - wildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'
ok 915 - iwildmatch: match 'b' '[a-c[:digit:]x-z]'
ok 916 - iwildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'
ok 917 - pathmatch: match 'b' '[a-c[:digit:]x-z]'
ok 918 - pathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'
ok 919 - ipathmatch: match 'b' '[a-c[:digit:]x-z]'
ok 920 - ipathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'
ok 921 - cleanup after previous file test
ok 922 - setup match file test for y
ok 923 - wildmatch: match 'y' '[a-c[:digit:]x-z]'
ok 924 - wildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'
ok 925 - iwildmatch: match 'y' '[a-c[:digit:]x-z]'
ok 926 - iwildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'
ok 927 - pathmatch: match 'y' '[a-c[:digit:]x-z]'
ok 928 - pathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'
ok 929 - ipathmatch: match 'y' '[a-c[:digit:]x-z]'
ok 930 - ipathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'
ok 931 - cleanup after previous file test
ok 932 - setup match file test for q
ok 933 - wildmatch: no match 'q' '[a-c[:digit:]x-z]'
ok 934 - wildmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'
ok 935 - iwildmatch: no match 'q' '[a-c[:digit:]x-z]'
ok 936 - iwildmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'
ok 937 - pathmatch: no match 'q' '[a-c[:digit:]x-z]'
ok 938 - pathmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'
ok 939 - ipathmatch: no match 'q' '[a-c[:digit:]x-z]'
ok 940 - ipathmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'
ok 941 - cleanup after previous file test
ok 942 - setup match file test for ]
ok 943 - wildmatch: match ']' '[\\-^]'
ok 944 - wildmatch (via ls-files): match '[\\-^]' ']'
ok 945 - iwildmatch: match ']' '[\\-^]'
ok 946 - iwildmatch (via ls-files): match '[\\-^]' ']'
ok 947 - pathmatch: match ']' '[\\-^]'
ok 948 - pathmatch (via ls-files): match '[\\-^]' ']'
ok 949 - ipathmatch: match ']' '[\\-^]'
ok 950 - ipathmatch (via ls-files): match '[\\-^]' ']'
ok 951 - cleanup after previous file test
ok 952 - setup match file test for [
ok 953 - wildmatch: no match '[' '[\\-^]'
ok 954 - wildmatch (via ls-files): no match '[\\-^]' '['
ok 955 - iwildmatch: no match '[' '[\\-^]'
ok 956 - iwildmatch (via ls-files): no match '[\\-^]' '['
ok 957 - pathmatch: no match '[' '[\\-^]'
ok 958 - pathmatch (via ls-files): no match '[\\-^]' '['
ok 959 - ipathmatch: no match '[' '[\\-^]'
ok 960 - ipathmatch (via ls-files): no match '[\\-^]' '['
ok 961 - cleanup after previous file test
ok 962 - setup match file test for -
ok 963 - wildmatch: match '-' '[\-_]'
ok 964 - wildmatch (via ls-files): match '[\-_]' '-'
ok 965 - iwildmatch: match '-' '[\-_]'
ok 966 - iwildmatch (via ls-files): match '[\-_]' '-'
ok 967 - pathmatch: match '-' '[\-_]'
ok 968 - pathmatch (via ls-files): match '[\-_]' '-'
ok 969 - ipathmatch: match '-' '[\-_]'
ok 970 - ipathmatch (via ls-files): match '[\-_]' '-'
ok 971 - cleanup after previous file test
ok 972 - setup match file test for ]
ok 973 - wildmatch: match ']' '[\]]'
ok 974 - wildmatch (via ls-files): match '[\]]' ']'
ok 975 - iwildmatch: match ']' '[\]]'
ok 976 - iwildmatch (via ls-files): match '[\]]' ']'
ok 977 - pathmatch: match ']' '[\]]'
ok 978 - pathmatch (via ls-files): match '[\]]' ']'
ok 979 - ipathmatch: match ']' '[\]]'
ok 980 - ipathmatch (via ls-files): match '[\]]' ']'
ok 981 - cleanup after previous file test
ok 982 - setup match file test for \]
ok 983 - wildmatch: no match '\]' '[\]]'
ok 984 - wildmatch (via ls-files): no match '[\]]' '\]'
ok 985 - iwildmatch: no match '\]' '[\]]'
ok 986 - iwildmatch (via ls-files): no match '[\]]' '\]'
ok 987 - pathmatch: no match '\]' '[\]]'
ok 988 - pathmatch (via ls-files): no match '[\]]' '\]'
ok 989 - ipathmatch: no match '\]' '[\]]'
ok 990 - ipathmatch (via ls-files): no match '[\]]' '\]'
ok 991 - cleanup after previous file test
ok 992 - setup match file test for \
ok 993 - wildmatch: no match '\' '[\]]'
ok 994 - wildmatch (via ls-files): no match '[\]]' '\'
ok 995 - iwildmatch: no match '\' '[\]]'
ok 996 - iwildmatch (via ls-files): no match '[\]]' '\'
ok 997 - pathmatch: no match '\' '[\]]'
ok 998 - pathmatch (via ls-files): no match '[\]]' '\'
ok 999 - ipathmatch: no match '\' '[\]]'
ok 1000 - ipathmatch (via ls-files): no match '[\]]' '\'
ok 1001 - cleanup after previous file test
ok 1002 - setup match file test for ab
ok 1003 - wildmatch: no match 'ab' 'a[]b'
ok 1004 - wildmatch (via ls-files): no match 'a[]b' 'ab'
ok 1005 - iwildmatch: no match 'ab' 'a[]b'
ok 1006 - iwildmatch (via ls-files): no match 'a[]b' 'ab'
ok 1007 - pathmatch: no match 'ab' 'a[]b'
ok 1008 - pathmatch (via ls-files): no match 'a[]b' 'ab'
ok 1009 - ipathmatch: no match 'ab' 'a[]b'
ok 1010 - ipathmatch (via ls-files): no match 'a[]b' 'ab'
ok 1011 - cleanup after previous file test
ok 1012 - setup match file test for a[]b
ok 1013 - wildmatch: no match 'a[]b' 'a[]b'
ok 1014 - wildmatch (via ls-files): match 'a[]b' 'a[]b'
ok 1015 - iwildmatch: no match 'a[]b' 'a[]b'
ok 1016 - iwildmatch (via ls-files): match 'a[]b' 'a[]b'
ok 1017 - pathmatch: no match 'a[]b' 'a[]b'
ok 1018 - pathmatch (via ls-files): match 'a[]b' 'a[]b'
ok 1019 - ipathmatch: no match 'a[]b' 'a[]b'
ok 1020 - ipathmatch (via ls-files): match 'a[]b' 'a[]b'
ok 1021 - cleanup after previous file test
ok 1022 - setup match file test for ab[
ok 1023 - wildmatch: no match 'ab[' 'ab['
ok 1024 - wildmatch (via ls-files): match 'ab[' 'ab['
ok 1025 - iwildmatch: no match 'ab[' 'ab['
ok 1026 - iwildmatch (via ls-files): match 'ab[' 'ab['
ok 1027 - pathmatch: no match 'ab[' 'ab['
ok 1028 - pathmatch (via ls-files): match 'ab[' 'ab['
ok 1029 - ipathmatch: no match 'ab[' 'ab['
ok 1030 - ipathmatch (via ls-files): match 'ab[' 'ab['
ok 1031 - cleanup after previous file test
ok 1032 - setup match file test for ab
ok 1033 - wildmatch: no match 'ab' '[!'
ok 1034 - wildmatch (via ls-files): no match '[!' 'ab'
ok 1035 - iwildmatch: no match 'ab' '[!'
ok 1036 - iwildmatch (via ls-files): no match '[!' 'ab'
ok 1037 - pathmatch: no match 'ab' '[!'
ok 1038 - pathmatch (via ls-files): no match '[!' 'ab'
ok 1039 - ipathmatch: no match 'ab' '[!'
ok 1040 - ipathmatch (via ls-files): no match '[!' 'ab'
ok 1041 - cleanup after previous file test
ok 1042 - setup match file test for ab
ok 1043 - wildmatch: no match 'ab' '[-'
ok 1044 - wildmatch (via ls-files): no match '[-' 'ab'
ok 1045 - iwildmatch: no match 'ab' '[-'
ok 1046 - iwildmatch (via ls-files): no match '[-' 'ab'
ok 1047 - pathmatch: no match 'ab' '[-'
ok 1048 - pathmatch (via ls-files): no match '[-' 'ab'
ok 1049 - ipathmatch: no match 'ab' '[-'
ok 1050 - ipathmatch (via ls-files): no match '[-' 'ab'
ok 1051 - cleanup after previous file test
ok 1052 - setup match file test for -
ok 1053 - wildmatch: match '-' '[-]'
ok 1054 - wildmatch (via ls-files): match '[-]' '-'
ok 1055 - iwildmatch: match '-' '[-]'
ok 1056 - iwildmatch (via ls-files): match '[-]' '-'
ok 1057 - pathmatch: match '-' '[-]'
ok 1058 - pathmatch (via ls-files): match '[-]' '-'
ok 1059 - ipathmatch: match '-' '[-]'
ok 1060 - ipathmatch (via ls-files): match '[-]' '-'
ok 1061 - cleanup after previous file test
ok 1062 - setup match file test for -
ok 1063 - wildmatch: no match '-' '[a-'
ok 1064 - wildmatch (via ls-files): no match '[a-' '-'
ok 1065 - iwildmatch: no match '-' '[a-'
ok 1066 - iwildmatch (via ls-files): no match '[a-' '-'
ok 1067 - pathmatch: no match '-' '[a-'
ok 1068 - pathmatch (via ls-files): no match '[a-' '-'
ok 1069 - ipathmatch: no match '-' '[a-'
ok 1070 - ipathmatch (via ls-files): no match '[a-' '-'
ok 1071 - cleanup after previous file test
ok 1072 - setup match file test for -
ok 1073 - wildmatch: no match '-' '[!a-'
ok 1074 - wildmatch (via ls-files): no match '[!a-' '-'
ok 1075 - iwildmatch: no match '-' '[!a-'
ok 1076 - iwildmatch (via ls-files): no match '[!a-' '-'
ok 1077 - pathmatch: no match '-' '[!a-'
ok 1078 - pathmatch (via ls-files): no match '[!a-' '-'
ok 1079 - ipathmatch: no match '-' '[!a-'
ok 1080 - ipathmatch (via ls-files): no match '[!a-' '-'
ok 1081 - cleanup after previous file test
ok 1082 - setup match file test for -
ok 1083 - wildmatch: match '-' '[--A]'
ok 1084 - wildmatch (via ls-files): match '[--A]' '-'
ok 1085 - iwildmatch: match '-' '[--A]'
ok 1086 - iwildmatch (via ls-files): match '[--A]' '-'
ok 1087 - pathmatch: match '-' '[--A]'
ok 1088 - pathmatch (via ls-files): match '[--A]' '-'
ok 1089 - ipathmatch: match '-' '[--A]'
ok 1090 - ipathmatch (via ls-files): match '[--A]' '-'
ok 1091 - cleanup after previous file test
ok 1092 - setup match file test for 5
ok 1093 - wildmatch: match '5' '[--A]'
ok 1094 - wildmatch (via ls-files): match '[--A]' '5'
ok 1095 - iwildmatch: match '5' '[--A]'
ok 1096 - iwildmatch (via ls-files): match '[--A]' '5'
ok 1097 - pathmatch: match '5' '[--A]'
ok 1098 - pathmatch (via ls-files): match '[--A]' '5'
ok 1099 - ipathmatch: match '5' '[--A]'
ok 1100 - ipathmatch (via ls-files): match '[--A]' '5'
ok 1101 - cleanup after previous file test
ok 1102 - setup match file test for  
ok 1103 - wildmatch: match ' ' '[ --]'
ok 1104 - wildmatch (via ls-files): match '[ --]' ' '
ok 1105 - iwildmatch: match ' ' '[ --]'
ok 1106 - iwildmatch (via ls-files): match '[ --]' ' '
ok 1107 - pathmatch: match ' ' '[ --]'
ok 1108 - pathmatch (via ls-files): match '[ --]' ' '
ok 1109 - ipathmatch: match ' ' '[ --]'
ok 1110 - ipathmatch (via ls-files): match '[ --]' ' '
ok 1111 - cleanup after previous file test
ok 1112 - setup match file test for $
ok 1113 - wildmatch: match '$' '[ --]'
ok 1114 - wildmatch (via ls-files): match '[ --]' '$'
ok 1115 - iwildmatch: match '$' '[ --]'
ok 1116 - iwildmatch (via ls-files): match '[ --]' '$'
ok 1117 - pathmatch: match '$' '[ --]'
ok 1118 - pathmatch (via ls-files): match '[ --]' '$'
ok 1119 - ipathmatch: match '$' '[ --]'
ok 1120 - ipathmatch (via ls-files): match '[ --]' '$'
ok 1121 - cleanup after previous file test
ok 1122 - setup match file test for -
ok 1123 - wildmatch: match '-' '[ --]'
ok 1124 - wildmatch (via ls-files): match '[ --]' '-'
ok 1125 - iwildmatch: match '-' '[ --]'
ok 1126 - iwildmatch (via ls-files): match '[ --]' '-'
ok 1127 - pathmatch: match '-' '[ --]'
ok 1128 - pathmatch (via ls-files): match '[ --]' '-'
ok 1129 - ipathmatch: match '-' '[ --]'
ok 1130 - ipathmatch (via ls-files): match '[ --]' '-'
ok 1131 - cleanup after previous file test
ok 1132 - setup match file test for 0
ok 1133 - wildmatch: no match '0' '[ --]'
ok 1134 - wildmatch (via ls-files): no match '[ --]' '0'
ok 1135 - iwildmatch: no match '0' '[ --]'
ok 1136 - iwildmatch (via ls-files): no match '[ --]' '0'
ok 1137 - pathmatch: no match '0' '[ --]'
ok 1138 - pathmatch (via ls-files): no match '[ --]' '0'
ok 1139 - ipathmatch: no match '0' '[ --]'
ok 1140 - ipathmatch (via ls-files): no match '[ --]' '0'
ok 1141 - cleanup after previous file test
ok 1142 - setup match file test for -
ok 1143 - wildmatch: match '-' '[---]'
ok 1144 - wildmatch (via ls-files): match '[---]' '-'
ok 1145 - iwildmatch: match '-' '[---]'
ok 1146 - iwildmatch (via ls-files): match '[---]' '-'
ok 1147 - pathmatch: match '-' '[---]'
ok 1148 - pathmatch (via ls-files): match '[---]' '-'
ok 1149 - ipathmatch: match '-' '[---]'
ok 1150 - ipathmatch (via ls-files): match '[---]' '-'
ok 1151 - cleanup after previous file test
ok 1152 - setup match file test for -
ok 1153 - wildmatch: match '-' '[------]'
ok 1154 - wildmatch (via ls-files): match '[------]' '-'
ok 1155 - iwildmatch: match '-' '[------]'
ok 1156 - iwildmatch (via ls-files): match '[------]' '-'
ok 1157 - pathmatch: match '-' '[------]'
ok 1158 - pathmatch (via ls-files): match '[------]' '-'
ok 1159 - ipathmatch: match '-' '[------]'
ok 1160 - ipathmatch (via ls-files): match '[------]' '-'
ok 1161 - cleanup after previous file test
ok 1162 - setup match file test for j
ok 1163 - wildmatch: no match 'j' '[a-e-n]'
ok 1164 - wildmatch (via ls-files): no match '[a-e-n]' 'j'
ok 1165 - iwildmatch: no match 'j' '[a-e-n]'
ok 1166 - iwildmatch (via ls-files): no match '[a-e-n]' 'j'
ok 1167 - pathmatch: no match 'j' '[a-e-n]'
ok 1168 - pathmatch (via ls-files): no match '[a-e-n]' 'j'
ok 1169 - ipathmatch: no match 'j' '[a-e-n]'
ok 1170 - ipathmatch (via ls-files): no match '[a-e-n]' 'j'
ok 1171 - cleanup after previous file test
ok 1172 - setup match file test for -
ok 1173 - wildmatch: match '-' '[a-e-n]'
ok 1174 - wildmatch (via ls-files): match '[a-e-n]' '-'
ok 1175 - iwildmatch: match '-' '[a-e-n]'
ok 1176 - iwildmatch (via ls-files): match '[a-e-n]' '-'
ok 1177 - pathmatch: match '-' '[a-e-n]'
ok 1178 - pathmatch (via ls-files): match '[a-e-n]' '-'
ok 1179 - ipathmatch: match '-' '[a-e-n]'
ok 1180 - ipathmatch (via ls-files): match '[a-e-n]' '-'
ok 1181 - cleanup after previous file test
ok 1182 - setup match file test for a
ok 1183 - wildmatch: match 'a' '[!------]'
ok 1184 - wildmatch (via ls-files): match '[!------]' 'a'
ok 1185 - iwildmatch: match 'a' '[!------]'
ok 1186 - iwildmatch (via ls-files): match '[!------]' 'a'
ok 1187 - pathmatch: match 'a' '[!------]'
ok 1188 - pathmatch (via ls-files): match '[!------]' 'a'
ok 1189 - ipathmatch: match 'a' '[!------]'
ok 1190 - ipathmatch (via ls-files): match '[!------]' 'a'
ok 1191 - cleanup after previous file test
ok 1192 - setup match file test for [
ok 1193 - wildmatch: no match '[' '[]-a]'
ok 1194 - wildmatch (via ls-files): no match '[]-a]' '['
ok 1195 - iwildmatch: no match '[' '[]-a]'
ok 1196 - iwildmatch (via ls-files): no match '[]-a]' '['
ok 1197 - pathmatch: no match '[' '[]-a]'
ok 1198 - pathmatch (via ls-files): no match '[]-a]' '['
ok 1199 - ipathmatch: no match '[' '[]-a]'
ok 1200 - ipathmatch (via ls-files): no match '[]-a]' '['
ok 1201 - cleanup after previous file test
ok 1202 - setup match file test for ^
ok 1203 - wildmatch: match '^' '[]-a]'
ok 1204 - wildmatch (via ls-files): match '[]-a]' '^'
ok 1205 - iwildmatch: match '^' '[]-a]'
ok 1206 - iwildmatch (via ls-files): match '[]-a]' '^'
ok 1207 - pathmatch: match '^' '[]-a]'
ok 1208 - pathmatch (via ls-files): match '[]-a]' '^'
ok 1209 - ipathmatch: match '^' '[]-a]'
ok 1210 - ipathmatch (via ls-files): match '[]-a]' '^'
ok 1211 - cleanup after previous file test
ok 1212 - setup match file test for ^
ok 1213 - wildmatch: no match '^' '[!]-a]'
ok 1214 - wildmatch (via ls-files): no match '[!]-a]' '^'
ok 1215 - iwildmatch: no match '^' '[!]-a]'
ok 1216 - iwildmatch (via ls-files): no match '[!]-a]' '^'
ok 1217 - pathmatch: no match '^' '[!]-a]'
ok 1218 - pathmatch (via ls-files): no match '[!]-a]' '^'
ok 1219 - ipathmatch: no match '^' '[!]-a]'
ok 1220 - ipathmatch (via ls-files): no match '[!]-a]' '^'
ok 1221 - cleanup after previous file test
ok 1222 - setup match file test for [
ok 1223 - wildmatch: match '[' '[!]-a]'
ok 1224 - wildmatch (via ls-files): match '[!]-a]' '['
ok 1225 - iwildmatch: match '[' '[!]-a]'
ok 1226 - iwildmatch (via ls-files): match '[!]-a]' '['
ok 1227 - pathmatch: match '[' '[!]-a]'
ok 1228 - pathmatch (via ls-files): match '[!]-a]' '['
ok 1229 - ipathmatch: match '[' '[!]-a]'
ok 1230 - ipathmatch (via ls-files): match '[!]-a]' '['
ok 1231 - cleanup after previous file test
ok 1232 - setup match file test for ^
ok 1233 - wildmatch: match '^' '[a^bc]'
ok 1234 - wildmatch (via ls-files): match '[a^bc]' '^'
ok 1235 - iwildmatch: match '^' '[a^bc]'
ok 1236 - iwildmatch (via ls-files): match '[a^bc]' '^'
ok 1237 - pathmatch: match '^' '[a^bc]'
ok 1238 - pathmatch (via ls-files): match '[a^bc]' '^'
ok 1239 - ipathmatch: match '^' '[a^bc]'
ok 1240 - ipathmatch (via ls-files): match '[a^bc]' '^'
ok 1241 - cleanup after previous file test
ok 1242 - setup match file test for -b]
ok 1243 - wildmatch: match '-b]' '[a-]b]'
ok 1244 - wildmatch (via ls-files): match '[a-]b]' '-b]'
ok 1245 - iwildmatch: match '-b]' '[a-]b]'
ok 1246 - iwildmatch (via ls-files): match '[a-]b]' '-b]'
ok 1247 - pathmatch: match '-b]' '[a-]b]'
ok 1248 - pathmatch (via ls-files): match '[a-]b]' '-b]'
ok 1249 - ipathmatch: match '-b]' '[a-]b]'
ok 1250 - ipathmatch (via ls-files): match '[a-]b]' '-b]'
ok 1251 - cleanup after previous file test
ok 1252 - setup match file test for \
ok 1253 - wildmatch: no match '\' '[\]'
ok 1254 - wildmatch (via ls-files): no match '[\]' '\'
ok 1255 - iwildmatch: no match '\' '[\]'
ok 1256 - iwildmatch (via ls-files): no match '[\]' '\'
ok 1257 - pathmatch: no match '\' '[\]'
ok 1258 - pathmatch (via ls-files): no match '[\]' '\'
ok 1259 - ipathmatch: no match '\' '[\]'
ok 1260 - ipathmatch (via ls-files): no match '[\]' '\'
ok 1261 - cleanup after previous file test
ok 1262 - setup match file test for \
ok 1263 - wildmatch: match '\' '[\\]'
ok 1264 - wildmatch (via ls-files): match '[\\]' '\'
ok 1265 - iwildmatch: match '\' '[\\]'
ok 1266 - iwildmatch (via ls-files): match '[\\]' '\'
ok 1267 - pathmatch: match '\' '[\\]'
ok 1268 - pathmatch (via ls-files): match '[\\]' '\'
ok 1269 - ipathmatch: match '\' '[\\]'
ok 1270 - ipathmatch (via ls-files): match '[\\]' '\'
ok 1271 - cleanup after previous file test
ok 1272 - setup match file test for \
ok 1273 - wildmatch: no match '\' '[!\\]'
ok 1274 - wildmatch (via ls-files): no match '[!\\]' '\'
ok 1275 - iwildmatch: no match '\' '[!\\]'
ok 1276 - iwildmatch (via ls-files): no match '[!\\]' '\'
ok 1277 - pathmatch: no match '\' '[!\\]'
ok 1278 - pathmatch (via ls-files): no match '[!\\]' '\'
ok 1279 - ipathmatch: no match '\' '[!\\]'
ok 1280 - ipathmatch (via ls-files): no match '[!\\]' '\'
ok 1281 - cleanup after previous file test
ok 1282 - setup match file test for G
ok 1283 - wildmatch: match 'G' '[A-\\]'
ok 1284 - wildmatch (via ls-files): match '[A-\\]' 'G'
ok 1285 - iwildmatch: match 'G' '[A-\\]'
ok 1286 - iwildmatch (via ls-files): match '[A-\\]' 'G'
ok 1287 - pathmatch: match 'G' '[A-\\]'
ok 1288 - pathmatch (via ls-files): match '[A-\\]' 'G'
ok 1289 - ipathmatch: match 'G' '[A-\\]'
ok 1290 - ipathmatch (via ls-files): match '[A-\\]' 'G'
ok 1291 - cleanup after previous file test
ok 1292 - setup match file test for aaabbb
ok 1293 - wildmatch: no match 'aaabbb' 'b*a'
ok 1294 - wildmatch (via ls-files): no match 'b*a' 'aaabbb'
ok 1295 - iwildmatch: no match 'aaabbb' 'b*a'
ok 1296 - iwildmatch (via ls-files): no match 'b*a' 'aaabbb'
ok 1297 - pathmatch: no match 'aaabbb' 'b*a'
ok 1298 - pathmatch (via ls-files): no match 'b*a' 'aaabbb'
ok 1299 - ipathmatch: no match 'aaabbb' 'b*a'
ok 1300 - ipathmatch (via ls-files): no match 'b*a' 'aaabbb'
ok 1301 - cleanup after previous file test
ok 1302 - setup match file test for aabcaa
ok 1303 - wildmatch: no match 'aabcaa' '*ba*'
ok 1304 - wildmatch (via ls-files): no match '*ba*' 'aabcaa'
ok 1305 - iwildmatch: no match 'aabcaa' '*ba*'
ok 1306 - iwildmatch (via ls-files): no match '*ba*' 'aabcaa'
ok 1307 - pathmatch: no match 'aabcaa' '*ba*'
ok 1308 - pathmatch (via ls-files): no match '*ba*' 'aabcaa'
ok 1309 - ipathmatch: no match 'aabcaa' '*ba*'
ok 1310 - ipathmatch (via ls-files): no match '*ba*' 'aabcaa'
ok 1311 - cleanup after previous file test
ok 1312 - setup match file test for ,
ok 1313 - wildmatch: match ',' '[,]'
ok 1314 - wildmatch (via ls-files): match '[,]' ','
ok 1315 - iwildmatch: match ',' '[,]'
ok 1316 - iwildmatch (via ls-files): match '[,]' ','
ok 1317 - pathmatch: match ',' '[,]'
ok 1318 - pathmatch (via ls-files): match '[,]' ','
ok 1319 - ipathmatch: match ',' '[,]'
ok 1320 - ipathmatch (via ls-files): match '[,]' ','
ok 1321 - cleanup after previous file test
ok 1322 - setup match file test for ,
ok 1323 - wildmatch: match ',' '[\\,]'
ok 1324 - wildmatch (via ls-files): match '[\\,]' ','
ok 1325 - iwildmatch: match ',' '[\\,]'
ok 1326 - iwildmatch (via ls-files): match '[\\,]' ','
ok 1327 - pathmatch: match ',' '[\\,]'
ok 1328 - pathmatch (via ls-files): match '[\\,]' ','
ok 1329 - ipathmatch: match ',' '[\\,]'
ok 1330 - ipathmatch (via ls-files): match '[\\,]' ','
ok 1331 - cleanup after previous file test
ok 1332 - setup match file test for \
ok 1333 - wildmatch: match '\' '[\\,]'
ok 1334 - wildmatch (via ls-files): match '[\\,]' '\'
ok 1335 - iwildmatch: match '\' '[\\,]'
ok 1336 - iwildmatch (via ls-files): match '[\\,]' '\'
ok 1337 - pathmatch: match '\' '[\\,]'
ok 1338 - pathmatch (via ls-files): match '[\\,]' '\'
ok 1339 - ipathmatch: match '\' '[\\,]'
ok 1340 - ipathmatch (via ls-files): match '[\\,]' '\'
ok 1341 - cleanup after previous file test
ok 1342 - setup match file test for -
ok 1343 - wildmatch: match '-' '[,-.]'
ok 1344 - wildmatch (via ls-files): match '[,-.]' '-'
ok 1345 - iwildmatch: match '-' '[,-.]'
ok 1346 - iwildmatch (via ls-files): match '[,-.]' '-'
ok 1347 - pathmatch: match '-' '[,-.]'
ok 1348 - pathmatch (via ls-files): match '[,-.]' '-'
ok 1349 - ipathmatch: match '-' '[,-.]'
ok 1350 - ipathmatch (via ls-files): match '[,-.]' '-'
ok 1351 - cleanup after previous file test
ok 1352 - setup match file test for +
ok 1353 - wildmatch: no match '+' '[,-.]'
ok 1354 - wildmatch (via ls-files): no match '[,-.]' '+'
ok 1355 - iwildmatch: no match '+' '[,-.]'
ok 1356 - iwildmatch (via ls-files): no match '[,-.]' '+'
ok 1357 - pathmatch: no match '+' '[,-.]'
ok 1358 - pathmatch (via ls-files): no match '[,-.]' '+'
ok 1359 - ipathmatch: no match '+' '[,-.]'
ok 1360 - ipathmatch (via ls-files): no match '[,-.]' '+'
ok 1361 - cleanup after previous file test
ok 1362 - setup match file test for -.]
ok 1363 - wildmatch: no match '-.]' '[,-.]'
ok 1364 - wildmatch (via ls-files): no match '[,-.]' '-.]'
ok 1365 - iwildmatch: no match '-.]' '[,-.]'
ok 1366 - iwildmatch (via ls-files): no match '[,-.]' '-.]'
ok 1367 - pathmatch: no match '-.]' '[,-.]'
ok 1368 - pathmatch (via ls-files): no match '[,-.]' '-.]'
ok 1369 - ipathmatch: no match '-.]' '[,-.]'
ok 1370 - ipathmatch (via ls-files): no match '[,-.]' '-.]'
ok 1371 - cleanup after previous file test
ok 1372 - setup match file test for 2
ok 1373 - wildmatch: match '2' '[\1-\3]'
ok 1374 - wildmatch (via ls-files): match '[\1-\3]' '2'
ok 1375 - iwildmatch: match '2' '[\1-\3]'
ok 1376 - iwildmatch (via ls-files): match '[\1-\3]' '2'
ok 1377 - pathmatch: match '2' '[\1-\3]'
ok 1378 - pathmatch (via ls-files): match '[\1-\3]' '2'
ok 1379 - ipathmatch: match '2' '[\1-\3]'
ok 1380 - ipathmatch (via ls-files): match '[\1-\3]' '2'
ok 1381 - cleanup after previous file test
ok 1382 - setup match file test for 3
ok 1383 - wildmatch: match '3' '[\1-\3]'
ok 1384 - wildmatch (via ls-files): match '[\1-\3]' '3'
ok 1385 - iwildmatch: match '3' '[\1-\3]'
ok 1386 - iwildmatch (via ls-files): match '[\1-\3]' '3'
ok 1387 - pathmatch: match '3' '[\1-\3]'
ok 1388 - pathmatch (via ls-files): match '[\1-\3]' '3'
ok 1389 - ipathmatch: match '3' '[\1-\3]'
ok 1390 - ipathmatch (via ls-files): match '[\1-\3]' '3'
ok 1391 - cleanup after previous file test
ok 1392 - setup match file test for 4
ok 1393 - wildmatch: no match '4' '[\1-\3]'
ok 1394 - wildmatch (via ls-files): no match '[\1-\3]' '4'
ok 1395 - iwildmatch: no match '4' '[\1-\3]'
ok 1396 - iwildmatch (via ls-files): no match '[\1-\3]' '4'
ok 1397 - pathmatch: no match '4' '[\1-\3]'
ok 1398 - pathmatch (via ls-files): no match '[\1-\3]' '4'
ok 1399 - ipathmatch: no match '4' '[\1-\3]'
ok 1400 - ipathmatch (via ls-files): no match '[\1-\3]' '4'
ok 1401 - cleanup after previous file test
ok 1402 - setup match file test for \
ok 1403 - wildmatch: match '\' '[[-\]]'
ok 1404 - wildmatch (via ls-files): match '[[-\]]' '\'
ok 1405 - iwildmatch: match '\' '[[-\]]'
ok 1406 - iwildmatch (via ls-files): match '[[-\]]' '\'
ok 1407 - pathmatch: match '\' '[[-\]]'
ok 1408 - pathmatch (via ls-files): match '[[-\]]' '\'
ok 1409 - ipathmatch: match '\' '[[-\]]'
ok 1410 - ipathmatch (via ls-files): match '[[-\]]' '\'
ok 1411 - cleanup after previous file test
ok 1412 - setup match file test for [
ok 1413 - wildmatch: match '[' '[[-\]]'
ok 1414 - wildmatch (via ls-files): match '[[-\]]' '['
ok 1415 - iwildmatch: match '[' '[[-\]]'
ok 1416 - iwildmatch (via ls-files): match '[[-\]]' '['
ok 1417 - pathmatch: match '[' '[[-\]]'
ok 1418 - pathmatch (via ls-files): match '[[-\]]' '['
ok 1419 - ipathmatch: match '[' '[[-\]]'
ok 1420 - ipathmatch (via ls-files): match '[[-\]]' '['
ok 1421 - cleanup after previous file test
ok 1422 - setup match file test for ]
ok 1423 - wildmatch: match ']' '[[-\]]'
ok 1424 - wildmatch (via ls-files): match '[[-\]]' ']'
ok 1425 - iwildmatch: match ']' '[[-\]]'
ok 1426 - iwildmatch (via ls-files): match '[[-\]]' ']'
ok 1427 - pathmatch: match ']' '[[-\]]'
ok 1428 - pathmatch (via ls-files): match '[[-\]]' ']'
ok 1429 - ipathmatch: match ']' '[[-\]]'
ok 1430 - ipathmatch (via ls-files): match '[[-\]]' ']'
ok 1431 - cleanup after previous file test
ok 1432 - setup match file test for -
ok 1433 - wildmatch: no match '-' '[[-\]]'
ok 1434 - wildmatch (via ls-files): no match '[[-\]]' '-'
ok 1435 - iwildmatch: no match '-' '[[-\]]'
ok 1436 - iwildmatch (via ls-files): no match '[[-\]]' '-'
ok 1437 - pathmatch: no match '-' '[[-\]]'
ok 1438 - pathmatch (via ls-files): no match '[[-\]]' '-'
ok 1439 - ipathmatch: no match '-' '[[-\]]'
ok 1440 - ipathmatch (via ls-files): no match '[[-\]]' '-'
ok 1441 - cleanup after previous file test
ok 1442 - setup match file test for -adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1
ok 1443 - wildmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1444 - wildmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'
ok 1445 - iwildmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1446 - iwildmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'
ok 1447 - pathmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1448 - pathmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'
ok 1449 - ipathmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1450 - ipathmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'
ok 1451 - cleanup after previous file test
ok 1452 - setup match file test for -adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1
ok 1453 - wildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1454 - wildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'
ok 1455 - iwildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1456 - iwildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'
ok 1457 - pathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1458 - pathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'
ok 1459 - ipathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1460 - ipathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'
ok 1461 - cleanup after previous file test
ok 1462 - setup match file test for -adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1
ok 1463 - wildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1464 - wildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'
ok 1465 - iwildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1466 - iwildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'
ok 1467 - pathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1468 - pathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'
ok 1469 - ipathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'
ok 1470 - ipathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'
ok 1471 - cleanup after previous file test
ok 1472 - setup match file test for XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1
ok 1473 - wildmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1474 - wildmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage
ok 1475 - iwildmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1476 - iwildmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage
ok 1477 - pathmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1478 - pathmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage
ok 1479 - ipathmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1480 - ipathmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage
ok 1481 - cleanup after previous file test
ok 1482 - setup match file test for XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1
ok 1483 - wildmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1484 - wildmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage
ok 1485 - iwildmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1486 - iwildmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage
ok 1487 - pathmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1488 - pathmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage
ok 1489 - ipathmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'
not ok 1490 - ipathmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage
ok 1491 - cleanup after previous file test
ok 1492 - setup match file test for abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt
ok 1493 - wildmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'
ok 1494 - wildmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'
ok 1495 - iwildmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'
ok 1496 - iwildmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'
ok 1497 - pathmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'
ok 1498 - pathmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'
ok 1499 - ipathmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'
ok 1500 - ipathmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'
ok 1501 - cleanup after previous file test
ok 1502 - setup match file test for abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz
ok 1503 - wildmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'
ok 1504 - wildmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'
ok 1505 - iwildmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'
ok 1506 - iwildmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'
ok 1507 - pathmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'
ok 1508 - pathmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'
ok 1509 - ipathmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'
ok 1510 - ipathmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'
ok 1511 - cleanup after previous file test
ok 1512 - setup match file test for foo
ok 1513 - wildmatch: no match 'foo' '*/*/*'
ok 1514 - wildmatch (via ls-files): no match '*/*/*' 'foo'
ok 1515 - iwildmatch: no match 'foo' '*/*/*'
ok 1516 - iwildmatch (via ls-files): no match '*/*/*' 'foo'
ok 1517 - pathmatch: no match 'foo' '*/*/*'
ok 1518 - pathmatch (via ls-files): no match '*/*/*' 'foo'
ok 1519 - ipathmatch: no match 'foo' '*/*/*'
ok 1520 - ipathmatch (via ls-files): no match '*/*/*' 'foo'
ok 1521 - cleanup after previous file test
ok 1522 - setup match file test for foo/bar
ok 1523 - wildmatch: no match 'foo/bar' '*/*/*'
ok 1524 - wildmatch (via ls-files): no match '*/*/*' 'foo/bar'
ok 1525 - iwildmatch: no match 'foo/bar' '*/*/*'
ok 1526 - iwildmatch (via ls-files): no match '*/*/*' 'foo/bar'
ok 1527 - pathmatch: no match 'foo/bar' '*/*/*'
ok 1528 - pathmatch (via ls-files): no match '*/*/*' 'foo/bar'
ok 1529 - ipathmatch: no match 'foo/bar' '*/*/*'
ok 1530 - ipathmatch (via ls-files): no match '*/*/*' 'foo/bar'
ok 1531 - cleanup after previous file test
ok 1532 - setup match file test for foo/bba/arr
ok 1533 - wildmatch: match 'foo/bba/arr' '*/*/*'
ok 1534 - wildmatch (via ls-files): match '*/*/*' 'foo/bba/arr'
ok 1535 - iwildmatch: match 'foo/bba/arr' '*/*/*'
ok 1536 - iwildmatch (via ls-files): match '*/*/*' 'foo/bba/arr'
ok 1537 - pathmatch: match 'foo/bba/arr' '*/*/*'
ok 1538 - pathmatch (via ls-files): match '*/*/*' 'foo/bba/arr'
ok 1539 - ipathmatch: match 'foo/bba/arr' '*/*/*'
ok 1540 - ipathmatch (via ls-files): match '*/*/*' 'foo/bba/arr'
ok 1541 - cleanup after previous file test
ok 1542 - setup match file test for foo/bb/aa/rr
ok 1543 - wildmatch: no match 'foo/bb/aa/rr' '*/*/*'
ok 1544 - wildmatch (via ls-files): no match '*/*/*' 'foo/bb/aa/rr'
ok 1545 - iwildmatch: no match 'foo/bb/aa/rr' '*/*/*'
ok 1546 - iwildmatch (via ls-files): no match '*/*/*' 'foo/bb/aa/rr'
ok 1547 - pathmatch: match 'foo/bb/aa/rr' '*/*/*'
ok 1548 - pathmatch (via ls-files): match '*/*/*' 'foo/bb/aa/rr'
ok 1549 - ipathmatch: match 'foo/bb/aa/rr' '*/*/*'
ok 1550 - ipathmatch (via ls-files): match '*/*/*' 'foo/bb/aa/rr'
ok 1551 - cleanup after previous file test
ok 1552 - setup match file test for foo/bb/aa/rr
ok 1553 - wildmatch: match 'foo/bb/aa/rr' '**/**/**'
ok 1554 - wildmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'
ok 1555 - iwildmatch: match 'foo/bb/aa/rr' '**/**/**'
ok 1556 - iwildmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'
ok 1557 - pathmatch: match 'foo/bb/aa/rr' '**/**/**'
ok 1558 - pathmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'
ok 1559 - ipathmatch: match 'foo/bb/aa/rr' '**/**/**'
ok 1560 - ipathmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'
ok 1561 - cleanup after previous file test
ok 1562 - setup match file test for abcXdefXghi
ok 1563 - wildmatch: match 'abcXdefXghi' '*X*i'
ok 1564 - wildmatch (via ls-files): match '*X*i' 'abcXdefXghi'
ok 1565 - iwildmatch: match 'abcXdefXghi' '*X*i'
ok 1566 - iwildmatch (via ls-files): match '*X*i' 'abcXdefXghi'
ok 1567 - pathmatch: match 'abcXdefXghi' '*X*i'
ok 1568 - pathmatch (via ls-files): match '*X*i' 'abcXdefXghi'
ok 1569 - ipathmatch: match 'abcXdefXghi' '*X*i'
ok 1570 - ipathmatch (via ls-files): match '*X*i' 'abcXdefXghi'
ok 1571 - cleanup after previous file test
ok 1572 - setup match file test for ab/cXd/efXg/hi
ok 1573 - wildmatch: no match 'ab/cXd/efXg/hi' '*X*i'
ok 1574 - wildmatch (via ls-files): no match '*X*i' 'ab/cXd/efXg/hi'
ok 1575 - iwildmatch: no match 'ab/cXd/efXg/hi' '*X*i'
ok 1576 - iwildmatch (via ls-files): no match '*X*i' 'ab/cXd/efXg/hi'
ok 1577 - pathmatch: match 'ab/cXd/efXg/hi' '*X*i'
ok 1578 - pathmatch (via ls-files): match '*X*i' 'ab/cXd/efXg/hi'
ok 1579 - ipathmatch: match 'ab/cXd/efXg/hi' '*X*i'
ok 1580 - ipathmatch (via ls-files): match '*X*i' 'ab/cXd/efXg/hi'
ok 1581 - cleanup after previous file test
ok 1582 - setup match file test for ab/cXd/efXg/hi
ok 1583 - wildmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'
ok 1584 - wildmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'
ok 1585 - iwildmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'
ok 1586 - iwildmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'
ok 1587 - pathmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'
ok 1588 - pathmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'
ok 1589 - ipathmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'
ok 1590 - ipathmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'
ok 1591 - cleanup after previous file test
ok 1592 - setup match file test for ab/cXd/efXg/hi
ok 1593 - wildmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'
ok 1594 - wildmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'
ok 1595 - iwildmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'
ok 1596 - iwildmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'
ok 1597 - pathmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'
ok 1598 - pathmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'
ok 1599 - ipathmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'
ok 1600 - ipathmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'
ok 1601 - cleanup after previous file test
ok 1602 - setup match file test for foo
ok 1603 - wildmatch: no match 'foo' 'fo'
ok 1604 - wildmatch (via ls-files): no match 'fo' 'foo'
ok 1605 - iwildmatch: no match 'foo' 'fo'
ok 1606 - iwildmatch (via ls-files): no match 'fo' 'foo'
ok 1607 - pathmatch: no match 'foo' 'fo'
ok 1608 - pathmatch (via ls-files): no match 'fo' 'foo'
ok 1609 - ipathmatch: no match 'foo' 'fo'
ok 1610 - ipathmatch (via ls-files): no match 'fo' 'foo'
ok 1611 - cleanup after previous file test
ok 1612 - setup match file test for foo/bar
ok 1613 - wildmatch: match 'foo/bar' 'foo/bar'
ok 1614 - wildmatch (via ls-files): match 'foo/bar' 'foo/bar'
ok 1615 - iwildmatch: match 'foo/bar' 'foo/bar'
ok 1616 - iwildmatch (via ls-files): match 'foo/bar' 'foo/bar'
ok 1617 - pathmatch: match 'foo/bar' 'foo/bar'
ok 1618 - pathmatch (via ls-files): match 'foo/bar' 'foo/bar'
ok 1619 - ipathmatch: match 'foo/bar' 'foo/bar'
ok 1620 - ipathmatch (via ls-files): match 'foo/bar' 'foo/bar'
ok 1621 - cleanup after previous file test
ok 1622 - setup match file test for foo/bar
ok 1623 - wildmatch: match 'foo/bar' 'foo/*'
ok 1624 - wildmatch (via ls-files): match 'foo/*' 'foo/bar'
ok 1625 - iwildmatch: match 'foo/bar' 'foo/*'
ok 1626 - iwildmatch (via ls-files): match 'foo/*' 'foo/bar'
ok 1627 - pathmatch: match 'foo/bar' 'foo/*'
ok 1628 - pathmatch (via ls-files): match 'foo/*' 'foo/bar'
ok 1629 - ipathmatch: match 'foo/bar' 'foo/*'
ok 1630 - ipathmatch (via ls-files): match 'foo/*' 'foo/bar'
ok 1631 - cleanup after previous file test
ok 1632 - setup match file test for foo/bba/arr
ok 1633 - wildmatch: no match 'foo/bba/arr' 'foo/*'
ok 1634 - wildmatch (via ls-files): no match 'foo/*' 'foo/bba/arr'
ok 1635 - iwildmatch: no match 'foo/bba/arr' 'foo/*'
ok 1636 - iwildmatch (via ls-files): no match 'foo/*' 'foo/bba/arr'
ok 1637 - pathmatch: match 'foo/bba/arr' 'foo/*'
ok 1638 - pathmatch (via ls-files): match 'foo/*' 'foo/bba/arr'
ok 1639 - ipathmatch: match 'foo/bba/arr' 'foo/*'
ok 1640 - ipathmatch (via ls-files): match 'foo/*' 'foo/bba/arr'
ok 1641 - cleanup after previous file test
ok 1642 - setup match file test for foo/bba/arr
ok 1643 - wildmatch: match 'foo/bba/arr' 'foo/**'
ok 1644 - wildmatch (via ls-files): match 'foo/**' 'foo/bba/arr'
ok 1645 - iwildmatch: match 'foo/bba/arr' 'foo/**'
ok 1646 - iwildmatch (via ls-files): match 'foo/**' 'foo/bba/arr'
ok 1647 - pathmatch: match 'foo/bba/arr' 'foo/**'
ok 1648 - pathmatch (via ls-files): match 'foo/**' 'foo/bba/arr'
ok 1649 - ipathmatch: match 'foo/bba/arr' 'foo/**'
ok 1650 - ipathmatch (via ls-files): match 'foo/**' 'foo/bba/arr'
ok 1651 - cleanup after previous file test
ok 1652 - setup match file test for foo/bba/arr
ok 1653 - wildmatch: no match 'foo/bba/arr' 'foo*'
ok 1654 - wildmatch (via ls-files): no match 'foo*' 'foo/bba/arr'
ok 1655 - iwildmatch: no match 'foo/bba/arr' 'foo*'
ok 1656 - iwildmatch (via ls-files): no match 'foo*' 'foo/bba/arr'
ok 1657 - pathmatch: match 'foo/bba/arr' 'foo*'
ok 1658 - pathmatch (via ls-files): match 'foo*' 'foo/bba/arr'
ok 1659 - ipathmatch: match 'foo/bba/arr' 'foo*'
ok 1660 - ipathmatch (via ls-files): match 'foo*' 'foo/bba/arr'
ok 1661 - cleanup after previous file test
ok 1662 - setup match file test for foo/bba/arr
ok 1663 - wildmatch: no match 'foo/bba/arr' 'foo**'
ok 1664 - wildmatch (via ls-files): match 'foo**' 'foo/bba/arr'
ok 1665 - iwildmatch: no match 'foo/bba/arr' 'foo**'
ok 1666 - iwildmatch (via ls-files): match 'foo**' 'foo/bba/arr'
ok 1667 - pathmatch: match 'foo/bba/arr' 'foo**'
ok 1668 - pathmatch (via ls-files): match 'foo**' 'foo/bba/arr'
ok 1669 - ipathmatch: match 'foo/bba/arr' 'foo**'
ok 1670 - ipathmatch (via ls-files): match 'foo**' 'foo/bba/arr'
ok 1671 - cleanup after previous file test
ok 1672 - setup match file test for foo/bba/arr
ok 1673 - wildmatch: no match 'foo/bba/arr' 'foo/*arr'
ok 1674 - wildmatch (via ls-files): no match 'foo/*arr' 'foo/bba/arr'
ok 1675 - iwildmatch: no match 'foo/bba/arr' 'foo/*arr'
ok 1676 - iwildmatch (via ls-files): no match 'foo/*arr' 'foo/bba/arr'
ok 1677 - pathmatch: match 'foo/bba/arr' 'foo/*arr'
ok 1678 - pathmatch (via ls-files): match 'foo/*arr' 'foo/bba/arr'
ok 1679 - ipathmatch: match 'foo/bba/arr' 'foo/*arr'
ok 1680 - ipathmatch (via ls-files): match 'foo/*arr' 'foo/bba/arr'
ok 1681 - cleanup after previous file test
ok 1682 - setup match file test for foo/bba/arr
ok 1683 - wildmatch: no match 'foo/bba/arr' 'foo/**arr'
ok 1684 - wildmatch (via ls-files): no match 'foo/**arr' 'foo/bba/arr'
ok 1685 - iwildmatch: no match 'foo/bba/arr' 'foo/**arr'
ok 1686 - iwildmatch (via ls-files): no match 'foo/**arr' 'foo/bba/arr'
ok 1687 - pathmatch: match 'foo/bba/arr' 'foo/**arr'
ok 1688 - pathmatch (via ls-files): match 'foo/**arr' 'foo/bba/arr'
ok 1689 - ipathmatch: match 'foo/bba/arr' 'foo/**arr'
ok 1690 - ipathmatch (via ls-files): match 'foo/**arr' 'foo/bba/arr'
ok 1691 - cleanup after previous file test
ok 1692 - setup match file test for foo/bba/arr
ok 1693 - wildmatch: no match 'foo/bba/arr' 'foo/*z'
ok 1694 - wildmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'
ok 1695 - iwildmatch: no match 'foo/bba/arr' 'foo/*z'
ok 1696 - iwildmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'
ok 1697 - pathmatch: no match 'foo/bba/arr' 'foo/*z'
ok 1698 - pathmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'
ok 1699 - ipathmatch: no match 'foo/bba/arr' 'foo/*z'
ok 1700 - ipathmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'
ok 1701 - cleanup after previous file test
ok 1702 - setup match file test for foo/bba/arr
ok 1703 - wildmatch: no match 'foo/bba/arr' 'foo/**z'
ok 1704 - wildmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'
ok 1705 - iwildmatch: no match 'foo/bba/arr' 'foo/**z'
ok 1706 - iwildmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'
ok 1707 - pathmatch: no match 'foo/bba/arr' 'foo/**z'
ok 1708 - pathmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'
ok 1709 - ipathmatch: no match 'foo/bba/arr' 'foo/**z'
ok 1710 - ipathmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'
ok 1711 - cleanup after previous file test
ok 1712 - setup match file test for foo/bar
ok 1713 - wildmatch: no match 'foo/bar' 'foo?bar'
ok 1714 - wildmatch (via ls-files): no match 'foo?bar' 'foo/bar'
ok 1715 - iwildmatch: no match 'foo/bar' 'foo?bar'
ok 1716 - iwildmatch (via ls-files): no match 'foo?bar' 'foo/bar'
ok 1717 - pathmatch: match 'foo/bar' 'foo?bar'
ok 1718 - pathmatch (via ls-files): match 'foo?bar' 'foo/bar'
ok 1719 - ipathmatch: match 'foo/bar' 'foo?bar'
ok 1720 - ipathmatch (via ls-files): match 'foo?bar' 'foo/bar'
ok 1721 - cleanup after previous file test
ok 1722 - setup match file test for foo/bar
ok 1723 - wildmatch: no match 'foo/bar' 'foo[/]bar'
ok 1724 - wildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'
ok 1725 - iwildmatch: no match 'foo/bar' 'foo[/]bar'
ok 1726 - iwildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'
ok 1727 - pathmatch: match 'foo/bar' 'foo[/]bar'
ok 1728 - pathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'
ok 1729 - ipathmatch: match 'foo/bar' 'foo[/]bar'
ok 1730 - ipathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'
ok 1731 - cleanup after previous file test
ok 1732 - setup match file test for foo/bar
ok 1733 - wildmatch: no match 'foo/bar' 'foo[^a-z]bar'
ok 1734 - wildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'
ok 1735 - iwildmatch: no match 'foo/bar' 'foo[^a-z]bar'
ok 1736 - iwildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'
ok 1737 - pathmatch: match 'foo/bar' 'foo[^a-z]bar'
ok 1738 - pathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'
ok 1739 - ipathmatch: match 'foo/bar' 'foo[^a-z]bar'
ok 1740 - ipathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'
ok 1741 - cleanup after previous file test
ok 1742 - setup match file test for ab/cXd/efXg/hi
ok 1743 - wildmatch: no match 'ab/cXd/efXg/hi' '*Xg*i'
ok 1744 - wildmatch (via ls-files): no match '*Xg*i' 'ab/cXd/efXg/hi'
ok 1745 - iwildmatch: no match 'ab/cXd/efXg/hi' '*Xg*i'
ok 1746 - iwildmatch (via ls-files): no match '*Xg*i' 'ab/cXd/efXg/hi'
ok 1747 - pathmatch: match 'ab/cXd/efXg/hi' '*Xg*i'
ok 1748 - pathmatch (via ls-files): match '*Xg*i' 'ab/cXd/efXg/hi'
ok 1749 - ipathmatch: match 'ab/cXd/efXg/hi' '*Xg*i'
ok 1750 - ipathmatch (via ls-files): match '*Xg*i' 'ab/cXd/efXg/hi'
ok 1751 - cleanup after previous file test
ok 1752 - setup match file test for a
ok 1753 - wildmatch: no match 'a' '[A-Z]'
ok 1754 - wildmatch (via ls-files): no match '[A-Z]' 'a'
ok 1755 - iwildmatch: match 'a' '[A-Z]'
ok 1756 - iwildmatch (via ls-files): match '[A-Z]' 'a'
ok 1757 - pathmatch: no match 'a' '[A-Z]'
ok 1758 - pathmatch (via ls-files): no match '[A-Z]' 'a'
ok 1759 - ipathmatch: match 'a' '[A-Z]'
ok 1760 - ipathmatch (via ls-files): match '[A-Z]' 'a'
ok 1761 - cleanup after previous file test
ok 1762 - setup match file test for A
ok 1763 - wildmatch: match 'A' '[A-Z]'
ok 1764 - wildmatch (via ls-files): match '[A-Z]' 'A'
ok 1765 - iwildmatch: match 'A' '[A-Z]'
ok 1766 - iwildmatch (via ls-files): match '[A-Z]' 'A'
ok 1767 - pathmatch: match 'A' '[A-Z]'
ok 1768 - pathmatch (via ls-files): match '[A-Z]' 'A'
ok 1769 - ipathmatch: match 'A' '[A-Z]'
ok 1770 - ipathmatch (via ls-files): match '[A-Z]' 'A'
ok 1771 - cleanup after previous file test
ok 1772 - setup match file test for A
ok 1773 - wildmatch: no match 'A' '[a-z]'
ok 1774 - wildmatch (via ls-files): no match '[a-z]' 'A'
ok 1775 - iwildmatch: match 'A' '[a-z]'
ok 1776 - iwildmatch (via ls-files): match '[a-z]' 'A'
ok 1777 - pathmatch: no match 'A' '[a-z]'
ok 1778 - pathmatch (via ls-files): no match '[a-z]' 'A'
ok 1779 - ipathmatch: match 'A' '[a-z]'
ok 1780 - ipathmatch (via ls-files): match '[a-z]' 'A'
ok 1781 - cleanup after previous file test
ok 1782 - setup match file test for a
ok 1783 - wildmatch: match 'a' '[a-z]'
ok 1784 - wildmatch (via ls-files): match '[a-z]' 'a'
ok 1785 - iwildmatch: match 'a' '[a-z]'
ok 1786 - iwildmatch (via ls-files): match '[a-z]' 'a'
ok 1787 - pathmatch: match 'a' '[a-z]'
ok 1788 - pathmatch (via ls-files): match '[a-z]' 'a'
ok 1789 - ipathmatch: match 'a' '[a-z]'
ok 1790 - ipathmatch (via ls-files): match '[a-z]' 'a'
ok 1791 - cleanup after previous file test
ok 1792 - setup match file test for a
ok 1793 - wildmatch: no match 'a' '[[:upper:]]'
ok 1794 - wildmatch (via ls-files): no match '[[:upper:]]' 'a'
ok 1795 - iwildmatch: match 'a' '[[:upper:]]'
ok 1796 - iwildmatch (via ls-files): match '[[:upper:]]' 'a'
ok 1797 - pathmatch: no match 'a' '[[:upper:]]'
ok 1798 - pathmatch (via ls-files): no match '[[:upper:]]' 'a'
ok 1799 - ipathmatch: match 'a' '[[:upper:]]'
ok 1800 - ipathmatch (via ls-files): match '[[:upper:]]' 'a'
ok 1801 - cleanup after previous file test
ok 1802 - setup match file test for A
ok 1803 - wildmatch: match 'A' '[[:upper:]]'
ok 1804 - wildmatch (via ls-files): match '[[:upper:]]' 'A'
ok 1805 - iwildmatch: match 'A' '[[:upper:]]'
ok 1806 - iwildmatch (via ls-files): match '[[:upper:]]' 'A'
ok 1807 - pathmatch: match 'A' '[[:upper:]]'
ok 1808 - pathmatch (via ls-files): match '[[:upper:]]' 'A'
ok 1809 - ipathmatch: match 'A' '[[:upper:]]'
ok 1810 - ipathmatch (via ls-files): match '[[:upper:]]' 'A'
ok 1811 - cleanup after previous file test
ok 1812 - setup match file test for A
ok 1813 - wildmatch: no match 'A' '[[:lower:]]'
ok 1814 - wildmatch (via ls-files): no match '[[:lower:]]' 'A'
ok 1815 - iwildmatch: match 'A' '[[:lower:]]'
ok 1816 - iwildmatch (via ls-files): match '[[:lower:]]' 'A'
ok 1817 - pathmatch: no match 'A' '[[:lower:]]'
ok 1818 - pathmatch (via ls-files): no match '[[:lower:]]' 'A'
ok 1819 - ipathmatch: match 'A' '[[:lower:]]'
ok 1820 - ipathmatch (via ls-files): match '[[:lower:]]' 'A'
ok 1821 - cleanup after previous file test
ok 1822 - setup match file test for a
ok 1823 - wildmatch: match 'a' '[[:lower:]]'
ok 1824 - wildmatch (via ls-files): match '[[:lower:]]' 'a'
ok 1825 - iwildmatch: match 'a' '[[:lower:]]'
ok 1826 - iwildmatch (via ls-files): match '[[:lower:]]' 'a'
ok 1827 - pathmatch: match 'a' '[[:lower:]]'
ok 1828 - pathmatch (via ls-files): match '[[:lower:]]' 'a'
ok 1829 - ipathmatch: match 'a' '[[:lower:]]'
ok 1830 - ipathmatch (via ls-files): match '[[:lower:]]' 'a'
ok 1831 - cleanup after previous file test
ok 1832 - setup match file test for A
ok 1833 - wildmatch: no match 'A' '[B-Za]'
ok 1834 - wildmatch (via ls-files): no match '[B-Za]' 'A'
ok 1835 - iwildmatch: match 'A' '[B-Za]'
ok 1836 - iwildmatch (via ls-files): match '[B-Za]' 'A'
ok 1837 - pathmatch: no match 'A' '[B-Za]'
ok 1838 - pathmatch (via ls-files): no match '[B-Za]' 'A'
ok 1839 - ipathmatch: match 'A' '[B-Za]'
ok 1840 - ipathmatch (via ls-files): match '[B-Za]' 'A'
ok 1841 - cleanup after previous file test
ok 1842 - setup match file test for a
ok 1843 - wildmatch: match 'a' '[B-Za]'
ok 1844 - wildmatch (via ls-files): match '[B-Za]' 'a'
ok 1845 - iwildmatch: match 'a' '[B-Za]'
ok 1846 - iwildmatch (via ls-files): match '[B-Za]' 'a'
ok 1847 - pathmatch: match 'a' '[B-Za]'
ok 1848 - pathmatch (via ls-files): match '[B-Za]' 'a'
ok 1849 - ipathmatch: match 'a' '[B-Za]'
ok 1850 - ipathmatch (via ls-files): match '[B-Za]' 'a'
ok 1851 - cleanup after previous file test
ok 1852 - setup match file test for A
ok 1853 - wildmatch: no match 'A' '[B-a]'
ok 1854 - wildmatch (via ls-files): no match '[B-a]' 'A'
ok 1855 - iwildmatch: match 'A' '[B-a]'
ok 1856 - iwildmatch (via ls-files): match '[B-a]' 'A'
ok 1857 - pathmatch: no match 'A' '[B-a]'
ok 1858 - pathmatch (via ls-files): no match '[B-a]' 'A'
ok 1859 - ipathmatch: match 'A' '[B-a]'
ok 1860 - ipathmatch (via ls-files): match '[B-a]' 'A'
ok 1861 - cleanup after previous file test
ok 1862 - setup match file test for a
ok 1863 - wildmatch: match 'a' '[B-a]'
ok 1864 - wildmatch (via ls-files): match '[B-a]' 'a'
ok 1865 - iwildmatch: match 'a' '[B-a]'
ok 1866 - iwildmatch (via ls-files): match '[B-a]' 'a'
ok 1867 - pathmatch: match 'a' '[B-a]'
ok 1868 - pathmatch (via ls-files): match '[B-a]' 'a'
ok 1869 - ipathmatch: match 'a' '[B-a]'
ok 1870 - ipathmatch (via ls-files): match '[B-a]' 'a'
ok 1871 - cleanup after previous file test
ok 1872 - setup match file test for z
ok 1873 - wildmatch: no match 'z' '[Z-y]'
ok 1874 - wildmatch (via ls-files): no match '[Z-y]' 'z'
ok 1875 - iwildmatch: match 'z' '[Z-y]'
ok 1876 - iwildmatch (via ls-files): match '[Z-y]' 'z'
ok 1877 - pathmatch: no match 'z' '[Z-y]'
ok 1878 - pathmatch (via ls-files): no match '[Z-y]' 'z'
ok 1879 - ipathmatch: match 'z' '[Z-y]'
ok 1880 - ipathmatch (via ls-files): match '[Z-y]' 'z'
ok 1881 - cleanup after previous file test
ok 1882 - setup match file test for Z
ok 1883 - wildmatch: match 'Z' '[Z-y]'
ok 1884 - wildmatch (via ls-files): match '[Z-y]' 'Z'
ok 1885 - iwildmatch: match 'Z' '[Z-y]'
ok 1886 - iwildmatch (via ls-files): match '[Z-y]' 'Z'
ok 1887 - pathmatch: match 'Z' '[Z-y]'
ok 1888 - pathmatch (via ls-files): match '[Z-y]' 'Z'
ok 1889 - ipathmatch: match 'Z' '[Z-y]'
ok 1890 - ipathmatch (via ls-files): match '[Z-y]' 'Z'
# still have 40 known breakage(s)
# passed all remaining 1850 test(s)
1..1890
*** t3100-ls-tree-restrict.sh ***
ok 1 - setup
ok 2 - ls-tree plain
ok 3 - ls-tree recursive
ok 4 - ls-tree recursive with -t
ok 5 - ls-tree recursive with -d
ok 6 - ls-tree filtered with path
ok 7 - ls-tree filtered with path1 path0
ok 8 - ls-tree filtered with path0/
ok 9 - ls-tree filtered with path2
ok 10 - ls-tree filtered with path2/
ok 11 - ls-tree filtered with path2/baz
ok 12 - ls-tree filtered with path2/bak
ok 13 - ls-tree -t filtered with path2/bak
ok 14 - ls-tree with one path a prefix of the other
# passed all 14 test(s)
1..14
*** t3101-ls-tree-dirname.sh ***
ok 1 - setup
ok 2 - ls-tree plain
ok 3 - ls-tree recursive
ok 4 - ls-tree filter 1.txt
ok 5 - ls-tree filter path1/b/c/1.txt
ok 6 - ls-tree filter all 1.txt files
ok 7 - ls-tree filter directories
ok 8 - ls-tree filter odd names
ok 9 - ls-tree filter missing files and extra slashes
ok 10 - ls-tree filter is leading path match
ok 11 - ls-tree --full-name
ok 12 - ls-tree --full-tree
ok 13 - ls-tree --full-tree -r
ok 14 - ls-tree --abbrev=5
ok 15 - ls-tree --name-only
ok 16 - ls-tree --name-only -r
# passed all 16 test(s)
1..16
*** t3102-ls-tree-wildcards.sh ***
ok 1 - setup
ok 2 - ls-tree a[a] matches literally
ok 3 - ls-tree outside prefix
not ok 4 - ls-tree does not yet support negated pathspec # TODO known breakage
# still have 1 known breakage(s)
# passed all remaining 3 test(s)
1..4
*** t3103-ls-tree-misc.sh ***
ok 1 - setup
ok 2 - ls-tree fails with non-zero exit code on broken tree
# passed all 2 test(s)
1..2
*** t3200-branch.sh ***
ok 1 - prepare a trivial repository
ok 2 - git branch --help should not have created a bogus branch
ok 3 - branch -h in broken repository
ok 4 - git branch abc should create a branch
ok 5 - git branch a/b/c should create a branch
ok 6 - git branch HEAD should fail
ok 7 - git branch --create-reflog d/e/f should create a branch and a log
ok 8 - git branch -d d/e/f should delete a branch and a log
ok 9 - git branch j/k should work after branch j has been deleted
ok 10 - git branch l should work after branch l/m has been deleted
ok 11 - git branch -m dumps usage
ok 12 - git branch -m m broken_symref should work
ok 13 - git branch -m m m/m should work
ok 14 - git branch -m n/n n should work
ok 15 - git branch -m bbb should rename checked out branch
ok 16 - renaming checked out branch works with d/f conflict
ok 17 - git branch -m o/o o should fail when o/p exists
ok 18 - git branch -m o/q o/p should fail when o/p exists
ok 19 - git branch -M o/q o/p should work when o/p exists
ok 20 - git branch -m -f o/q o/p should work when o/p exists
ok 21 - git branch -m q r/q should fail when r exists
ok 22 - git branch -M foo bar should fail when bar is checked out
ok 23 - git branch -M baz bam should succeed when baz is checked out
ok 24 - git branch -M baz bam should add entries to .git/logs/HEAD
ok 25 - git branch -M should leave orphaned HEAD alone
ok 26 - resulting reflog can be shown by log -g
ok 27 - git branch -M baz bam should succeed when baz is checked out as linked working tree
ok 28 - git branch -M baz bam should succeed within a worktree in which baz is checked out
ok 29 - git branch -M master should work when master is checked out
ok 30 - git branch -M master master should work when master is checked out
ok 31 - git branch -M master2 master2 should work when master is checked out
ok 32 - git branch -v -d t should work
ok 33 - git branch -v -m t s should work
ok 34 - git branch -m -d t s should fail
ok 35 - git branch --list -d t should fail
ok 36 - git branch --list -v with --abbrev
ok 37 - git branch --column
ok 38 - git branch --column with an extremely long branch name
ok 39 - git branch with column.*
ok 40 - git branch --column -v should fail
ok 41 - git branch -v with column.ui ignored
ok 42 - git branch -m q q2 without config should succeed
ok 43 - git branch -m s/s s should work when s/t is deleted
ok 44 - config information was renamed, too
ok 45 - git branch -m correctly renames multiple config sections
ok 46 - git branch -c dumps usage
ok 47 - git branch --copy dumps usage
ok 48 - git branch -c d e should work
ok 49 - git branch --copy is a synonym for -c
ok 50 - git branch -c ee ef should copy ee to create branch ef
ok 51 - git branch -c f/f g/g should work
ok 52 - git branch -c m2 m2 should work
ok 53 - git branch -c zz zz/zz should fail
ok 54 - git branch -c b/b b should fail
ok 55 - git branch -C o/q o/p should work when o/p exists
ok 56 - git branch -c -f o/q o/p should work when o/p exists
ok 57 - git branch -c qq rr/qq should fail when rr exists
ok 58 - git branch -C b1 b2 should fail when b2 is checked out
ok 59 - git branch -C c1 c2 should succeed when c1 is checked out
ok 60 - git branch -C c1 c2 should never touch HEAD
ok 61 - git branch -C master should work when master is checked out
ok 62 - git branch -C master master should work when master is checked out
ok 63 - git branch -C master5 master5 should work when master is checked out
ok 64 - git branch -C ab cd should overwrite existing config for cd
ok 65 - git branch -c correctly copies multiple config sections
ok 66 - deleting a symref
ok 67 - deleting a dangling symref
ok 68 - deleting a self-referential symref
ok 69 - renaming a symref is not allowed
ok 70 - git branch -m u v should fail when the reflog for u is a symlink
ok 71 - test tracking setup via --track
ok 72 - test tracking setup (non-wildcard, matching)
ok 73 - tracking setup fails on non-matching refspec
ok 74 - test tracking setup via config
ok 75 - test overriding tracking setup via --no-track
ok 76 - no tracking without .fetch entries
ok 77 - test tracking setup via --track but deeper
ok 78 - test deleting branch deletes branch config
ok 79 - test deleting branch without config
ok 80 - deleting currently checked out branch fails
ok 81 - test --track without .fetch entries
ok 82 - branch from non-branch HEAD w/autosetupmerge=always
ok 83 - branch from non-branch HEAD w/--track causes failure
ok 84 - branch from tag w/--track causes failure
ok 85 - --set-upstream-to fails on multiple branches
ok 86 - --set-upstream-to fails on detached HEAD
ok 87 - --set-upstream-to fails on a missing dst branch
ok 88 - --set-upstream-to fails on a missing src branch
ok 89 - --set-upstream-to fails on a non-ref
ok 90 - --set-upstream-to fails on locked config
ok 91 - use --set-upstream-to modify HEAD
ok 92 - use --set-upstream-to modify a particular branch
ok 93 - --unset-upstream should fail if given a non-existent branch
ok 94 - --unset-upstream should fail if config is locked
ok 95 - test --unset-upstream on HEAD
ok 96 - --unset-upstream should fail on multiple branches
ok 97 - --unset-upstream should fail on detached HEAD
ok 98 - test --unset-upstream on a particular branch
ok 99 - disabled option --set-upstream fails
ok 100 - --set-upstream-to notices an error to set branch as own upstream
ok 101 - git checkout -b g/h/i -l should create a branch and a log
ok 102 - checkout -b makes reflog by default
ok 103 - checkout -b does not make reflog when core.logAllRefUpdates = false
ok 104 - checkout -b with -l makes reflog when core.logAllRefUpdates = false
ok 105 - avoid ambiguous track
ok 106 - autosetuprebase local on a tracked local branch
ok 107 - autosetuprebase always on a tracked local branch
ok 108 - autosetuprebase remote on a tracked local branch
ok 109 - autosetuprebase never on a tracked local branch
ok 110 - autosetuprebase local on a tracked remote branch
ok 111 - autosetuprebase never on a tracked remote branch
ok 112 - autosetuprebase remote on a tracked remote branch
ok 113 - autosetuprebase always on a tracked remote branch
ok 114 - autosetuprebase unconfigured on a tracked remote branch
ok 115 - autosetuprebase unconfigured on a tracked local branch
ok 116 - autosetuprebase unconfigured on untracked local branch
ok 117 - autosetuprebase unconfigured on untracked remote branch
ok 118 - autosetuprebase never on an untracked local branch
ok 119 - autosetuprebase local on an untracked local branch
ok 120 - autosetuprebase remote on an untracked local branch
ok 121 - autosetuprebase always on an untracked local branch
ok 122 - autosetuprebase never on an untracked remote branch
ok 123 - autosetuprebase local on an untracked remote branch
ok 124 - autosetuprebase remote on an untracked remote branch
ok 125 - autosetuprebase always on an untracked remote branch
ok 126 - autosetuprebase always on detached HEAD
ok 127 - detect misconfigured autosetuprebase (bad value)
ok 128 - detect misconfigured autosetuprebase (no value)
ok 129 - attempt to delete a branch without base and unmerged to HEAD
ok 130 - attempt to delete a branch merged to its base
ok 131 - attempt to delete a branch merged to its base
ok 132 - use --edit-description
ok 133 - detect typo in branch name when using --edit-description
ok 134 - refuse --edit-description on unborn branch for now
ok 135 - --merged catches invalid object names
ok 136 - --merged is incompatible with --no-merged
ok 137 - --list during rebase
ok 138 - --list during rebase from detached HEAD
ok 139 - tracking with unexpected .fetch refspec
ok 140 - configured committerdate sort
ok 141 - option override configured sort
ok 142 - invalid sort parameter in configuration
# passed all 142 test(s)
1..142
*** t3201-branch-contains.sh ***
ok 1 - setup
ok 2 - branch --contains=master
ok 3 - branch --contains master
ok 4 - branch --no-contains=master
ok 5 - branch --no-contains master
ok 6 - branch --contains=side
ok 7 - branch --no-contains=side
ok 8 - branch --contains with pattern implies --list
ok 9 - branch --no-contains with pattern implies --list
ok 10 - side: branch --merged
ok 11 - branch --merged with pattern implies --list
ok 12 - side: branch --no-merged
ok 13 - master: branch --merged
ok 14 - master: branch --no-merged
ok 15 - branch --no-merged with pattern implies --list
ok 16 - implicit --list conflicts with modification options
ok 17 - Assert that --contains only works on commits, not trees & blobs
ok 18 - branch --merged with --verbose
ok 19 - branch --contains combined with --no-contains
# passed all 19 test(s)
1..19
*** t3202-show-branch-octopus.sh ***
ok 1 - setup
ok 2 - show-branch with more than 8 branches
ok 3 - show-branch with showbranch.default
# passed all 3 test(s)
1..3
*** t3203-branch-output.sh ***
ok 1 - make commits
ok 2 - make branches
ok 3 - make remote branches
ok 4 - git branch shows local branches
ok 5 - git branch --list shows local branches
ok 6 - git branch --list pattern shows matching local branches
ok 7 - git branch -r shows remote branches
ok 8 - git branch -a shows local and remote branches
ok 9 - git branch -v shows branch summaries
ok 10 - git branch --list -v pattern shows branch summaries
ok 11 - git branch --ignore-case --list -v pattern shows branch summaries
ok 12 - git branch -v pattern does not show branch summaries
ok 13 - git branch shows detached HEAD properly
ok 14 - git branch shows detached HEAD properly after checkout --detach
ok 15 - git branch shows detached HEAD properly after moving
ok 16 - git branch shows detached HEAD properly from tag
ok 17 - git branch shows detached HEAD properly after moving from tag
ok 18 - git branch `--sort` option
ok 19 - git branch --points-at option
ok 20 - ambiguous branch/tag not marked
ok 21 - local-branch symrefs shortened properly
ok 22 - sort branches, ignore case
ok 23 - git branch --format option
ok 24 - set up color tests
ok 25 - %(color) omitted without tty
ok 26 # skip %(color) present with tty (missing TTY)
ok 27 - --color overrides auto-color
# passed all 27 test(s)
1..27
*** t3204-branch-name-interpretation.sh ***
ok 1 - set up repo
ok 2 - update branch via @{-1}
ok 3 - update branch via local @{upstream}
ok 4 - disallow updating branch via remote @{upstream}
ok 5 - create branch with pseudo-qualified name
ok 6 - delete branch via @{-1}
ok 7 - delete branch via local @{upstream}
ok 8 - delete branch via remote @{upstream}
ok 9 - delete @{upstream} expansion matches -r option
ok 10 - disallow deleting remote branch via @{-1}
ok 11 - create branch named "@"
ok 12 - delete branch named "@"
ok 13 - checkout does not treat remote @{upstream} as a branch
# passed all 13 test(s)
1..13
*** t3205-branch-color.sh ***
ok 1 - set up some sample branches
ok 2 - set up some color config
ok 3 - regular output shows colors
ok 4 - verbose output shows colors
# passed all 4 test(s)
1..4
*** t3206-range-diff.sh ***
ok 1 - setup
ok 2 - simple A..B A..C (unmodified)
ok 3 - simple B...C (unmodified)
ok 4 - simple A B C (unmodified)
ok 5 - trivial reordering
ok 6 - removed a commit
ok 7 - added a commit
ok 8 - new base, A B C
ok 9 - new base, B...C
ok 10 - changed commit
ok 11 - changed message
# passed all 11 test(s)
1..11
*** t3210-pack-refs.sh ***
ok 1 - enable reflogs
ok 2 - prepare a trivial repository
ok 3 - see if git show-ref works as expected
ok 4 - see if a branch still exists when packed
ok 5 - git branch c/d should barf if branch c exists
ok 6 - see if a branch still exists after git pack-refs --prune
ok 7 - see if git pack-refs --prune remove ref files
ok 8 - see if git pack-refs --prune removes empty dirs
ok 9 - git branch g should work when git branch g/h has been deleted
ok 10 - git branch i/j/k should barf if branch i exists
ok 11 - test git branch k after branch k/l/m and k/lm have been deleted
ok 12 - test git branch n after some branch deletion and pruning
ok 13 - see if up-to-date packed refs are preserved
ok 14 - pack, prune and repack
ok 15 - explicit pack-refs with dangling packed reference
ok 16 - delete ref with dangling packed version
ok 17 - delete ref while another dangling packed ref
ok 18 - pack ref directly below refs/
ok 19 - do not pack ref in refs/bisect
ok 20 - disable reflogs
ok 21 - create packed foo/bar/baz branch
ok 22 - notice d/f conflict with existing directory
ok 23 - existing directory reports concrete ref
ok 24 - notice d/f conflict with existing ref
ok 25 - reject packed-refs with unterminated line
ok 26 - reject packed-refs containing junk
ok 27 - reject packed-refs with a short SHA-1
ok 28 - timeout if packed-refs.lock exists
ok 29 - retry acquiring packed-refs.lock
ok 30 - pack symlinked packed-refs
# passed all 30 test(s)
1..30
*** t3211-peel-ref.sh ***
ok 1 - create annotated tag in refs/tags
ok 2 - create annotated tag outside of refs/tags
ok 3 - set up expected show-ref output
ok 4 - refs are peeled outside of refs/tags (loose)
ok 5 - refs are peeled outside of refs/tags (packed)
ok 6 - create old-style pack-refs without fully-peeled
ok 7 - refs are peeled outside of refs/tags (old packed)
ok 8 - peeled refs survive deletion of packed ref
# passed all 8 test(s)
1..8
*** t3300-funny-names.sh ***
ok 1 - setup
ok 2 - setup: populate index and tree
ok 3 - ls-files prints space in filename verbatim
ok 4 - setup: add funny filename
ok 5 - ls-files quotes funny filename
ok 6 - ls-files -z does not quote funny filename
ok 7 - ls-tree quotes funny filename
ok 8 - diff-index --name-status quotes funny filename
ok 9 - diff-tree --name-status quotes funny filename
ok 10 - diff-index -z does not quote funny filename
ok 11 - diff-tree -z does not quote funny filename
ok 12 - diff-tree --find-copies-harder quotes funny filename
ok 13 - setup: remove unfunny index entry
ok 14 - diff-tree -M quotes funny filename
ok 15 - diff-index -M -p quotes funny filename
ok 16 - setup: mode change
ok 17 - diff-index -M -p with mode change quotes funny filename
ok 18 - diffstat for rename quotes funny filename
ok 19 - numstat for rename quotes funny filename
ok 20 - numstat without -M quotes funny filename
ok 21 - numstat for non-git rename diff quotes funny filename
# passed all 21 test(s)
1..21
*** t3301-notes.sh ***
ok 1 - cannot annotate non-existing HEAD
ok 2 - setup
ok 3 - need valid notes ref
ok 4 - refusing to add notes in refs/heads/
ok 5 - refusing to edit notes in refs/remotes/
ok 6 - handle empty notes gracefully
ok 7 - show non-existent notes entry with %N
ok 8 - create notes
ok 9 - show notes entry with %N
ok 10 - create reflog entry
ok 11 - edit existing notes
ok 12 - show notes from treeish
ok 13 - cannot edit notes from non-ref
ok 14 - cannot "git notes add -m" where notes already exists
ok 15 - can overwrite existing note with "git notes add -f -m"
ok 16 - add w/no options on existing note morphs into edit
ok 17 - can overwrite existing note with "git notes add -f"
ok 18 - show notes
ok 19 - show multi-line notes
ok 20 - show -F notes
ok 21 - Re-adding -F notes without -f fails
ok 22 - git log --pretty=raw does not show notes
ok 23 - git log --show-notes
ok 24 - git log --no-notes
ok 25 - git format-patch does not show notes
ok 26 - git format-patch --show-notes does show notes
ok 27 - git show  does show notes
ok 28 - git show --pretty does not show notes
ok 29 - git show --pretty=raw does not show notes
ok 30 - git show --pretty=short does not show notes
ok 31 - git show --pretty=medium does not show notes
ok 32 - git show --pretty=full does not show notes
ok 33 - git show --pretty=fuller does not show notes
ok 34 - git show --pretty=format:%s does not show notes
ok 35 - git show --oneline does not show notes
ok 36 - setup alternate notes ref
ok 37 - git log --notes shows default notes
ok 38 - git log --notes=X shows only X
ok 39 - git log --notes --notes=X shows both
ok 40 - git log --no-notes resets default state
ok 41 - git log --no-notes resets ref list
ok 42 - show -m notes
ok 43 - remove note with add -f -F /dev/null
ok 44 - do not create empty note with -m ""
ok 45 - create note with combination of -m and -F
ok 46 - remove note with "git notes remove"
ok 47 - removing non-existing note should not create new commit
ok 48 - removing more than one
ok 49 - removing is atomic
ok 50 - removing with --ignore-missing
ok 51 - removing with --ignore-missing but bogus ref
ok 52 - remove reads from --stdin
ok 53 - remove --stdin is also atomic
ok 54 - removing with --stdin --ignore-missing
ok 55 - list notes with "git notes list"
ok 56 - list notes with "git notes"
ok 57 - list specific note with "git notes list <object>"
ok 58 - listing non-existing notes fails
ok 59 - append to existing note with "git notes append"
ok 60 - "git notes list" does not expand to "git notes list HEAD"
ok 61 - appending empty string does not change existing note
ok 62 - git notes append == add when there is no existing note
ok 63 - appending empty string to non-existing note does not create note
ok 64 - create other note on a different notes ref (setup)
ok 65 - Do not show note on other ref by default
ok 66 - Do show note when ref is given in GIT_NOTES_REF
ok 67 - Do show note when ref is given in core.notesRef config
ok 68 - Do not show note when core.notesRef is overridden
ok 69 - Show all notes when notes.displayRef=refs/notes/*
ok 70 - core.notesRef is implicitly in notes.displayRef
ok 71 - notes.displayRef can be given more than once
ok 72 - notes.displayRef respects order
ok 73 - GIT_NOTES_DISPLAY_REF works
ok 74 - GIT_NOTES_DISPLAY_REF overrides config
ok 75 - --show-notes=* adds to GIT_NOTES_DISPLAY_REF
ok 76 - --no-standard-notes
ok 77 - --standard-notes
ok 78 - --show-notes=ref accumulates
ok 79 - Allow notes on non-commits (trees, blobs, tags)
ok 80 - create note from other note with "git notes add -C"
ok 81 - create note from non-existing note with "git notes add -C" fails
ok 82 - create note from non-blob with "git notes add -C" fails
ok 83 - create note from blob with "git notes add -C" reuses blob id
ok 84 - create note from other note with "git notes add -c"
ok 85 - create note from non-existing note with "git notes add -c" fails
ok 86 - append to note from other note with "git notes append -C"
ok 87 - create note from other note with "git notes append -c"
ok 88 - append to note from other note with "git notes append -c"
ok 89 - copy note with "git notes copy"
ok 90 - prevent overwrite with "git notes copy"
ok 91 - allow overwrite with "git notes copy -f"
ok 92 - cannot copy note from object without notes
ok 93 - git notes copy --stdin
ok 94 - git notes copy --for-rewrite (unconfigured)
ok 95 - git notes copy --for-rewrite (enabled)
ok 96 - git notes copy --for-rewrite (disabled)
ok 97 - git notes copy --for-rewrite (overwrite)
ok 98 - git notes copy --for-rewrite (ignore)
ok 99 - git notes copy --for-rewrite (append)
ok 100 - git notes copy --for-rewrite (append two to one)
ok 101 - git notes copy --for-rewrite (append empty)
ok 102 - GIT_NOTES_REWRITE_MODE works
ok 103 - GIT_NOTES_REWRITE_REF works
ok 104 - GIT_NOTES_REWRITE_REF overrides config
ok 105 - git notes copy diagnoses too many or too few parameters
ok 106 - git notes get-ref expands refs/heads/master to refs/notes/refs/heads/master
ok 107 - git notes get-ref (no overrides)
ok 108 - git notes get-ref (core.notesRef)
ok 109 - git notes get-ref (GIT_NOTES_REF)
ok 110 - git notes get-ref (--ref)
ok 111 - setup testing of empty notes
ok 112 - 'git notes add' removes empty note
ok 113 - 'git notes add --allow-empty' stores empty note
ok 114 - 'git notes add -F /dev/null' removes empty note
ok 115 - 'git notes add -F /dev/null --allow-empty' stores empty note
ok 116 - 'git notes add -m ""' removes empty note
ok 117 - 'git notes add -m "" --allow-empty' stores empty note
ok 118 - 'git notes add -c "$empty_blob"' removes empty note
ok 119 - 'git notes add -c "$empty_blob" --allow-empty' stores empty note
ok 120 - 'git notes add -C "$empty_blob"' removes empty note
ok 121 - 'git notes add -C "$empty_blob" --allow-empty' stores empty note
ok 122 - 'git notes append' removes empty note
ok 123 - 'git notes append --allow-empty' stores empty note
ok 124 - 'git notes append -F /dev/null' removes empty note
ok 125 - 'git notes append -F /dev/null --allow-empty' stores empty note
ok 126 - 'git notes append -m ""' removes empty note
ok 127 - 'git notes append -m "" --allow-empty' stores empty note
ok 128 - 'git notes append -c "$empty_blob"' removes empty note
ok 129 - 'git notes append -c "$empty_blob" --allow-empty' stores empty note
ok 130 - 'git notes append -C "$empty_blob"' removes empty note
ok 131 - 'git notes append -C "$empty_blob" --allow-empty' stores empty note
ok 132 - 'git notes edit' removes empty note
ok 133 - 'git notes edit --allow-empty' stores empty note
ok 134 - empty notes are displayed by git log
# passed all 134 test(s)
1..134
*** t3302-notes-index-expensive.sh ***
ok 1 - setup 10
ok 2 - notes work
ok 3 - notes timing with /usr/bin/time
ok 4 # skip setup 100 (missing EXPENSIVE)
ok 5 # skip notes work (missing EXPENSIVE)
ok 6 # skip notes timing with /usr/bin/time (missing EXPENSIVE of USR_BIN_TIME,EXPENSIVE)
ok 7 # skip setup 1000 (missing EXPENSIVE)
ok 8 # skip notes work (missing EXPENSIVE)
ok 9 # skip notes timing with /usr/bin/time (missing EXPENSIVE of USR_BIN_TIME,EXPENSIVE)
ok 10 # skip setup 10000 (missing EXPENSIVE)
ok 11 # skip notes work (missing EXPENSIVE)
ok 12 # skip notes timing with /usr/bin/time (missing EXPENSIVE of USR_BIN_TIME,EXPENSIVE)
# passed all 12 test(s)
1..12
*** t3303-notes-subtrees.sh ***
ok 1 - setup: create 100 commits
ok 2 - test notes in 2/38-fanout
ok 3 - verify notes in 2/38-fanout
ok 4 - test notes in 2/2/36-fanout
ok 5 - verify notes in 2/2/36-fanout
ok 6 - test notes in 2/2/2/34-fanout
ok 7 - verify notes in 2/2/2/34-fanout
ok 8 - test same notes in no fanout and 2/38-fanout
ok 9 - verify same notes in no fanout and 2/38-fanout
ok 10 - test same notes in no fanout and 2/2/36-fanout
ok 11 - verify same notes in no fanout and 2/2/36-fanout
ok 12 - test same notes in 2/38-fanout and 2/2/36-fanout
ok 13 - verify same notes in 2/38-fanout and 2/2/36-fanout
ok 14 - test same notes in 2/2/2/34-fanout and 2/2/36-fanout
ok 15 - verify same notes in 2/2/2/34-fanout and 2/2/36-fanout
ok 16 - test notes in no fanout concatenated with 2/38-fanout
ok 17 - verify notes in no fanout concatenated with 2/38-fanout
ok 18 - test notes in no fanout concatenated with 2/2/36-fanout
ok 19 - verify notes in no fanout concatenated with 2/2/36-fanout
ok 20 - test notes in 2/38-fanout concatenated with 2/2/36-fanout
ok 21 - verify notes in 2/38-fanout concatenated with 2/2/36-fanout
ok 22 - test notes in 2/2/36-fanout concatenated with 2/2/2/34-fanout
ok 23 - verify notes in 2/2/36-fanout concatenated with 2/2/2/34-fanout
# passed all 23 test(s)
1..23
*** t3304-notes-mixed.sh ***
ok 1 - setup: create a couple of commits
ok 2 - create a notes tree with both notes and non-notes
ok 3 - verify contents of notes
ok 4 - verify contents of non-notes
ok 5 - git-notes preserves non-notes
ok 6 - verify contents of non-notes after git-notes
# passed all 6 test(s)
1..6
*** t3305-notes-fanout.sh ***
ok 1 - creating many notes with git-notes
ok 2 - many notes created correctly with git-notes
ok 3 - many notes created with git-notes triggers fanout
ok 4 - deleting most notes with git-notes
ok 5 - most notes deleted correctly with git-notes
ok 6 - deleting most notes triggers fanout consolidation
# passed all 6 test(s)
1..6
*** t3306-notes-prune.sh ***
ok 1 - setup: create a few commits with notes
ok 2 - verify commits and notes
ok 3 - remove some commits
ok 4 - verify that commits are gone
ok 5 - verify that notes are still present
ok 6 - prune -n does not remove notes
ok 7 - prune -n lists prunable notes
ok 8 - prune notes
ok 9 - verify that notes are gone
ok 10 - remove some commits
ok 11 - prune -v notes
ok 12 - verify that notes are gone
# passed all 12 test(s)
1..12
*** t3307-notes-man.sh ***
ok 1 - setup
ok 2 - example 1: notes to add an Acked-by line
ok 3 - example 2: binary notes
# passed all 3 test(s)
1..3
*** t3308-notes-merge.sh ***
ok 1 - setup
ok 2 - verify initial notes (x)
ok 3 - fail to merge empty notes ref into empty notes ref (z => y)
ok 4 - fail to merge into various non-notes refs
ok 5 - merge non-notes ref into empty notes ref (remote-notes/origin/x => v)
ok 6 - merge notes into empty notes ref (x => y)
ok 7 - merge empty notes ref (z => y)
ok 8 - change notes on other notes ref (y)
ok 9 - merge previous notes commit (y^ => y) => No-op
ok 10 - verify changed notes on other notes ref (y)
ok 11 - verify unchanged notes on original notes ref (x)
ok 12 - merge original notes (x) into changed notes (y) => No-op
ok 13 - merge changed (y) into original (x) => Fast-forward
ok 14 - merge empty notes ref (z => y)
ok 15 - change notes on other notes ref (y)
ok 16 - change notes on notes ref (x)
ok 17 - merge y into x => Non-conflicting 3-way merge
ok 18 - create notes on new, separate notes ref (w)
ok 19 - merge w into x => Non-conflicting history-less merge
# passed all 19 test(s)
1..19
*** t3309-notes-merge-auto-resolve.sh ***
ok 1 - setup commits
ok 2 - setup merge base (x)
ok 3 - verify state of merge base (x)
ok 4 - setup local branch (y)
ok 5 - verify state of local branch (y)
ok 6 - setup remote branch (z)
ok 7 - verify state of remote branch (z)
ok 8 - merge z into y with invalid strategy => Fail/No changes
ok 9 - merge z into y with invalid configuration option => Fail/No changes
ok 10 - merge z into y with "ours" strategy => Non-conflicting 3-way merge
ok 11 - reset to pre-merge state (y)
ok 12 - merge z into y with "ours" configuration option => Non-conflicting 3-way merge
ok 13 - reset to pre-merge state (y)
ok 14 - merge z into y with "ours" per-ref configuration option => Non-conflicting 3-way merge
ok 15 - reset to pre-merge state (y)
ok 16 - merge z into y with "theirs" strategy => Non-conflicting 3-way merge
ok 17 - reset to pre-merge state (y)
ok 18 - merge z into y with "theirs" strategy overriding configuration option "ours" => Non-conflicting 3-way merge
ok 19 - reset to pre-merge state (y)
ok 20 - merge z into y with "union" strategy => Non-conflicting 3-way merge
ok 21 - reset to pre-merge state (y)
ok 22 - merge z into y with "union" strategy overriding per-ref configuration => Non-conflicting 3-way merge
ok 23 - reset to pre-merge state (y)
ok 24 - merge z into y with "union" per-ref overriding general configuration => Non-conflicting 3-way merge
ok 25 - reset to pre-merge state (y)
ok 26 - merge z into y with "manual" per-ref only checks specific ref configuration => Conflicting 3-way merge
ok 27 - merge y into z with "union" strategy => Non-conflicting 3-way merge
ok 28 - reset to pre-merge state (z)
ok 29 - merge y into z with "cat_sort_uniq" strategy => Non-conflicting 3-way merge
ok 30 - reset to pre-merge state (z)
ok 31 - merge y into z with "cat_sort_uniq" strategy configuration option => Non-conflicting 3-way merge
# passed all 31 test(s)
1..31
*** t3310-notes-merge-manual-resolve.sh ***
ok 1 - setup commits
ok 2 - setup merge base (x)
ok 3 - setup local branch (y)
ok 4 - setup remote branch (z)
ok 5 - merge z into m (== y) with default ("manual") resolver => Conflicting 3-way merge
ok 6 - change notes in z
ok 7 - cannot do merge w/conflicts when previous merge is unfinished
ok 8 - setup unrelated notes ref (w)
ok 9 - can do merge without conflicts even if previous merge is unfinished (x => w)
ok 10 - do not allow mixing --commit and --abort
ok 11 - do not allow mixing --commit and --strategy
ok 12 - do not allow mixing --abort and --strategy
ok 13 - finalize conflicting merge (z => m)
ok 14 - redo merge of z into m (== y) with default ("manual") resolver => Conflicting 3-way merge
ok 15 - abort notes merge
ok 16 - redo merge of z into m (== y) with default ("manual") resolver => Conflicting 3-way merge
ok 17 - add + remove notes in finalized merge (z => m)
ok 18 - redo merge of z into m (== y) with default ("manual") resolver => Conflicting 3-way merge
ok 19 - reset notes ref m to somewhere else (w)
ok 20 - fail to finalize conflicting merge if underlying ref has moved in the meantime (m != NOTES_MERGE_PARTIAL^1)
ok 21 - resolve situation by aborting the notes merge
ok 22 - switch cwd before committing notes merge
# passed all 22 test(s)
1..22
*** t3311-notes-merge-fanout.sh ***
ok 1 - setup a few initial commits with notes (notes ref: x)
ok 2 - sanity check (x)
ok 3 - Add a few hundred commits w/notes to trigger fanout (x -> y)
ok 4 - notes tree has fanout (y)
ok 5 - No-op merge (already included) (x => y)
ok 6 - Fast-forward merge (y => x)
ok 7 - change some of the initial 5 notes (x -> z)
ok 8 - notes tree has no fanout (z)
ok 9 - successful merge without conflicts (y => z)
ok 10 - notes tree still has fanout after merge (m)
ok 11 - introduce conflicting changes (y -> w)
ok 12 - successful merge using "ours" strategy (z => w)
ok 13 - notes tree still has fanout after merge (m)
ok 14 - successful merge using "theirs" strategy (z => w)
ok 15 - notes tree still has fanout after merge (m)
ok 16 - successful merge using "union" strategy (z => w)
ok 17 - notes tree still has fanout after merge (m)
ok 18 - successful merge using "cat_sort_uniq" strategy (z => w)
ok 19 - notes tree still has fanout after merge (m)
ok 20 - fails to merge using "manual" strategy (z => w)
ok 21 - notes tree still has fanout after merge (m)
ok 22 - verify conflict entries (with no fanout)
ok 23 - resolve and finalize merge (z => w)
ok 24 - notes tree still has fanout after merge (m)
# passed all 24 test(s)
1..24
*** t3320-notes-merge-worktrees.sh ***
ok 1 - setup commit
ok 2 - setup notes ref (x)
ok 3 - setup local branch (y)
ok 4 - setup remote branch (z)
ok 5 - modify notes ref ourselves (x)
ok 6 - create some new worktrees
ok 7 - merge z into y fails and sets NOTES_MERGE_REF
ok 8 - merge z into y while mid-merge in another workdir fails
ok 9 - merge z into x while mid-merge on y succeeds
# passed all 9 test(s)
1..9
*** t3400-rebase.sh ***
ok 1 - prepare repository with topic branches
ok 2 - rebase on dirty worktree
ok 3 - rebase on dirty cache
ok 4 - rebase against master
ok 5 - rebase, with <onto> and <upstream> specified as :/quuxery
ok 6 - the rebase operation should not have destroyed author information
ok 7 - the rebase operation should not have destroyed author information (2)
ok 8 - HEAD was detached during rebase
ok 9 - rebase from ambiguous branch name
ok 10 - rebase off of the previous branch using "-"
ok 11 - rebase a single mode change
ok 12 - rebase is not broken by diff.renames
ok 13 - setup: recover
ok 14 - Show verbose error when HEAD could not be detached
ok 15 - fail when upstream arg is missing and not on branch
ok 16 - fail when upstream arg is missing and not configured
ok 17 - default to common base in @{upstream}s reflog if no upstream arg
ok 18 - cherry-picked commits and fork-point work together
ok 19 - rebase -q is quiet
ok 20 - Rebase a commit that sprinkles CRs in
ok 21 - rebase can copy notes
ok 22 - rebase -m can copy notes
ok 23 - rebase commit with an ancient timestamp
ok 24 - rebase with "From " line in commit message
ok 25 - rebase--am.sh and --show-current-patch
ok 26 - rebase--merge.sh and --show-current-patch
# passed all 26 test(s)
1..26
*** t3401-rebase-and-am-rename.sh ***
ok 1 - setup testcase where directory rename should be detected
ok 2 - rebase --interactive: directory rename detected
not ok 3 - rebase (am): directory rename detected # TODO known breakage
ok 4 - rebase --merge: directory rename detected
not ok 5 - am: directory rename detected # TODO known breakage
ok 6 - setup testcase where directory rename should NOT be detected
ok 7 - rebase --interactive: NO directory rename
ok 8 - rebase (am): NO directory rename
ok 9 - rebase --merge: NO directory rename
ok 10 - am: NO directory rename
# still have 2 known breakage(s)
# passed all remaining 8 test(s)
1..10
*** t3402-rebase-merge.sh ***
ok 1 - setup
ok 2 - reference merge
ok 3 - rebase
ok 4 - test-rebase@{1} is pre rebase
ok 5 - merge and rebase should match
ok 6 - rebase the other way
ok 7 - rebase -Xtheirs
ok 8 - rebase -Xtheirs from orphan
ok 9 - merge and rebase should match
ok 10 - picking rebase
ok 11 - rebase -s funny -Xopt
ok 12 - rebase --skip works with two conflicts in a row
# passed all 12 test(s)
1..12
*** t3403-rebase-skip.sh ***
ok 1 - setup
ok 2 - rebase with git am -3 (default)
ok 3 - rebase --skip can not be used with other options
ok 4 - rebase --skip with am -3
ok 5 - rebase moves back to skip-reference
ok 6 - checkout skip-merge
ok 7 - rebase with --merge
ok 8 - rebase --skip with --merge
ok 9 - merge and reference trees equal
ok 10 - moved back to branch correctly
# passed all 10 test(s)
1..10
*** t3404-rebase-interactive.sh ***
ok 1 - setup
ok 2 - rebase --keep-empty
ok 3 - rebase -i with the exec command
ok 4 - rebase -i with the exec command runs from tree root
ok 5 - rebase -i with exec allows git commands in subdirs
ok 6 - rebase -i sets work tree properly
ok 7 - rebase -i with the exec command checks tree cleanness
ok 8 - rebase -i with exec of inexistent command
ok 9 - no changes are a nop
ok 10 - test the [branch] option
ok 11 - test --onto <branch>
ok 12 - rebase on top of a non-conflicting commit
ok 13 - reflog for the branch shows state before rebase
ok 14 - reflog for the branch shows correct finish message
ok 15 - exchange two commits
ok 16 - stop on conflicting pick
ok 17 - show conflicted patch
ok 18 - abort
ok 19 - abort with error when new base cannot be checked out
ok 20 - retain authorship
ok 21 - retain authorship w/ conflicts
ok 22 - squash
ok 23 - retain authorship when squashing
ok 24 - -p handles "no changes" gracefully
not ok 25 - exchange two commits with -p # TODO known breakage
ok 26 - preserve merges with -p
ok 27 - edit ancestor with -p
ok 28 - --continue tries to commit
ok 29 - verbose flag is heeded, even after --continue
ok 30 - multi-squash only fires up editor once
ok 31 - multi-fixup does not fire up editor
ok 32 - commit message used after conflict
ok 33 - commit message retained after conflict
ok 34 - squash and fixup generate correct log messages
ok 35 - squash ignores comments
ok 36 - squash ignores blank lines
ok 37 - squash works as expected
ok 38 - interrupted squash works as expected
ok 39 - interrupted squash works as expected (case 2)
ok 40 - --continue tries to commit, even for "edit"
ok 41 - aborted --continue does not squash commits after "edit"
ok 42 - auto-amend only edited commits after "edit"
ok 43 - clean error after failed "exec"
ok 44 - rebase a detached HEAD
ok 45 - rebase a commit violating pre-commit
ok 46 - rebase with a file named HEAD in worktree
ok 47 - do "noop" when there is nothing to cherry-pick
ok 48 - submodule rebase setup
ok 49 - submodule rebase -i
ok 50 - submodule conflict setup
ok 51 - rebase -i continue with only submodule staged
ok 52 - rebase -i continue with unstaged submodule
ok 53 - avoid unnecessary reset
ok 54 - reword
ok 55 - rebase -i can copy notes
ok 56 - rebase -i can copy notes over a fixup
ok 57 - rebase while detaching HEAD
ok 58 - always cherry-pick with --no-ff
ok 59 - set up commits with funny messages
ok 60 - rebase-i history with funny messages
ok 61 - prepare for rebase -i --exec
ok 62 - running "git rebase -i --exec git show HEAD"
ok 63 - running "git rebase --exec git show HEAD -i"
ok 64 - running "git rebase -ix git show HEAD"
ok 65 - rebase -ix with several <CMD>
ok 66 - rebase -ix with several instances of --exec
ok 67 - rebase -ix with --autosquash
ok 68 - rebase --exec works without -i 
ok 69 - rebase -i --exec without <CMD>
ok 70 - rebase -i --root re-order and drop commits
ok 71 - rebase -i --root retain root commit author and message
ok 72 - rebase -i --root temporary sentinel commit
ok 73 - rebase -i --root fixup root commit
ok 74 - rebase -i --root reword root commit
ok 75 - rebase -i --root when root has untracked file confilct
ok 76 - rebase -i --root reword root when root has untracked file conflict
ok 77 - rebase --edit-todo does not work on non-interactive rebase
ok 78 - rebase --edit-todo can be used to modify todo
ok 79 - rebase -i produces readable reflog
ok 80 - rebase -i respects core.commentchar
ok 81 - rebase -i respects core.commentchar=auto
ok 82 - rebase -i, with <onto> and <upstream> specified as :/quuxery
ok 83 - rebase -i with --strategy and -X
ok 84 - interrupted rebase -i with --strategy and -X
ok 85 - rebase -i error on commits with \ in message
ok 86 - short SHA-1 setup
ok 87 - short SHA-1 collide
ok 88 - respect core.abbrev
ok 89 - todo count
ok 90 - rebase -i commits that overwrite untracked files (pick)
ok 91 - rebase -i commits that overwrite untracked files (squash)
ok 92 - rebase -i commits that overwrite untracked files (no ff)
ok 93 - rebase --continue removes CHERRY_PICK_HEAD
ok 94 - drop
ok 95 - rebase -i respects rebase.missingCommitsCheck = ignore
ok 96 - rebase -i respects rebase.missingCommitsCheck = warn
ok 97 - rebase -i respects rebase.missingCommitsCheck = error
ok 98 - respects rebase.abbreviateCommands with fixup, squash and exec
ok 99 - static check of bad command
ok 100 - tabs and spaces are accepted in the todolist
ok 101 - static check of bad SHA-1
ok 102 - editor saves as CR/LF
ok 103 - rebase -i --gpg-sign=<key-id>
ok 104 - rebase -i --gpg-sign=<key-id> overrides commit.gpgSign
ok 105 - valid author header after --root swap
ok 106 - valid author header when author contains single quote
# still have 1 known breakage(s)
# passed all remaining 105 test(s)
1..106
*** t3405-rebase-malformed.sh ***
ok 1 - setup
ok 2 - rebase commit with multi-line subject
ok 3 - rebase commit with diff in message
ok 4 - rebase -m commit with empty message
ok 5 - rebase -i commit with empty message
# passed all 5 test(s)
1..5
*** t3406-rebase-message.sh ***
ok 1 - setup
ok 2 - rebase -m
ok 3 - rebase against master twice
ok 4 - rebase against master twice with --force
ok 5 - rebase against master twice from another branch
ok 6 - rebase fast-forward to master
ok 7 - rebase --stat
ok 8 - rebase w/config rebase.stat
ok 9 - rebase -n overrides config rebase.stat config
ok 10 - rebase --onto outputs the invalid ref
# passed all 10 test(s)
1..10
*** t3407-rebase-abort.sh ***
ok 1 - setup
ok 2 - rebase --abort
ok 3 - rebase --abort after --skip
ok 4 - rebase --abort after --continue
ok 5 - rebase --abort does not update reflog
ok 6 - rebase --abort can not be used with other options
ok 7 - rebase --merge --abort
ok 8 - rebase --merge --abort after --skip
ok 9 - rebase --merge --abort after --continue
ok 10 - rebase --merge --abort does not update reflog
ok 11 - rebase --abort can not be used with other options
ok 12 - rebase --quit
ok 13 - rebase --merge --quit
# passed all 13 test(s)
1..13
*** t3408-rebase-multi-line.sh ***
ok 1 - setup
ok 2 - rebase
ok 3 - rebasep
# passed all 3 test(s)
1..3
*** t3409-rebase-preserve-merges.sh ***
ok 1 - setup for merge-preserving rebase
ok 2 - --continue works after a conflict
ok 3 - rebase -p preserves no-ff merges
ok 4 - rebase -p ignores merge.log config
# passed all 4 test(s)
1..4
*** t3410-rebase-preserve-dropped-merges.sh ***
ok 1 - setup
ok 2 - skip same-resolution merges with -p
ok 3 - keep different-resolution merges with -p
# passed all 3 test(s)
1..3
*** t3411-rebase-preserve-around-merges.sh ***
ok 1 - setup
ok 2 - squash F1 into D1
ok 3 - rebase two levels of merge
# passed all 3 test(s)
1..3
*** t3412-rebase-root.sh ***
ok 1 - prepare repository
ok 2 - rebase --root fails with too many args
ok 3 - setup pre-rebase hook
ok 4 - rebase --root --onto <newbase>
ok 5 - pre-rebase got correct input (1)
ok 6 - rebase --root --onto <newbase> <branch>
ok 7 - pre-rebase got correct input (2)
ok 8 - rebase -i --root --onto <newbase>
ok 9 - pre-rebase got correct input (3)
ok 10 - rebase -i --root --onto <newbase> <branch>
ok 11 - pre-rebase got correct input (4)
ok 12 - rebase -i -p with linear history
ok 13 - pre-rebase got correct input (5)
ok 14 - set up merge history
ok 15 - rebase -i -p with merge
ok 16 - set up second root and merge
ok 17 - rebase -i -p with two roots
ok 18 - setup pre-rebase hook that fails
ok 19 - pre-rebase hook stops rebase
ok 20 - pre-rebase hook stops rebase -i
ok 21 - remove pre-rebase hook
ok 22 - set up a conflict
ok 23 - rebase --root with conflict (first part)
ok 24 - fix the conflict
ok 25 - rebase --root with conflict (second part)
ok 26 - rebase -i --root with conflict (first part)
ok 27 - fix the conflict
ok 28 - rebase -i --root with conflict (second part)
ok 29 - rebase -i -p --root with conflict (first part)
ok 30 - fix the conflict
ok 31 - rebase -i -p --root with conflict (second part)
# passed all 31 test(s)
1..31
*** t3413-rebase-hook.sh ***
ok 1 - setup
ok 2 - rebase
ok 3 - rebase -i
ok 4 - setup pre-rebase hook
ok 5 - pre-rebase hook gets correct input (1)
ok 6 - pre-rebase hook gets correct input (2)
ok 7 - pre-rebase hook gets correct input (3)
ok 8 - pre-rebase hook gets correct input (4)
ok 9 - pre-rebase hook gets correct input (5)
ok 10 - pre-rebase hook gets correct input (6)
ok 11 - setup pre-rebase hook that fails
ok 12 - pre-rebase hook stops rebase (1)
ok 13 - pre-rebase hook stops rebase (2)
ok 14 - rebase --no-verify overrides pre-rebase (1)
ok 15 - rebase --no-verify overrides pre-rebase (2)
# passed all 15 test(s)
1..15
*** t3414-rebase-preserve-onto.sh ***
ok 1 - setup
ok 2 - rebase from B1 onto H1
ok 3 - rebase from E1 onto H1
ok 4 - rebase from C1 onto H1
# passed all 4 test(s)
1..4
*** t3415-rebase-autosquash.sh ***
ok 1 - setup
ok 2 - auto fixup (option)
ok 3 - auto fixup (config)
ok 4 - auto squash (option)
ok 5 - auto squash (config)
ok 6 - misspelled auto squash
ok 7 - auto squash that matches 2 commits
ok 8 - auto squash that matches a commit after the squash
ok 9 - auto squash that matches a sha1
ok 10 - auto squash that matches longer sha1
ok 11 - use commit --fixup
ok 12 - use commit --squash
ok 13 - fixup! fixup!
ok 14 - fixup! squash!
ok 15 - squash! squash!
ok 16 - squash! fixup!
ok 17 - autosquash with custom inst format
ok 18 - autosquash with empty custom instructionFormat
ok 19 - autosquash with multiple empty patches
ok 20 - extra spaces after fixup!
ok 21 - wrapped original subject
# passed all 21 test(s)
1..21
*** t3416-rebase-onto-threedots.sh ***
ok 1 - setup
ok 2 - rebase --onto master...topic
ok 3 - rebase --onto master...
ok 4 - rebase --onto master...side
ok 5 - rebase -i --onto master...topic
ok 6 - rebase -i --onto master...
ok 7 - rebase -i --onto master...side
# passed all 7 test(s)
1..7
*** t3417-rebase-whitespace-fix.sh ***
ok 1 - blank line at end of file; extend at end of file
ok 2 - two blanks line at end of file; extend at end of file
ok 3 - same, but do not remove trailing spaces
ok 4 - at beginning of file
# passed all 4 test(s)
1..4
*** t3418-rebase-continue.sh ***
ok 1 - setup
ok 2 - interactive rebase --continue works with touched file
ok 3 - non-interactive rebase --continue works with touched file
ok 4 - rebase --continue can not be used with other options
ok 5 - rebase --continue remembers merge strategy and options
ok 6 - rebase -i --continue handles merge strategy and options
ok 7 - rebase passes merge strategy options correctly
ok 8 - --skip after failed fixup cleans commit message
ok 9 - setup rerere database
ok 10 - rebase  --continue remembers --rerere-autoupdate
ok 11 - rebase  --continue honors rerere.autoUpdate
ok 12 - rebase  --continue remembers --no-rerere-autoupdate
ok 13 - rebase -m --continue remembers --rerere-autoupdate
ok 14 - rebase -m --continue honors rerere.autoUpdate
ok 15 - rebase -m --continue remembers --no-rerere-autoupdate
ok 16 - rebase -i --continue remembers --rerere-autoupdate
ok 17 - rebase -i --continue honors rerere.autoUpdate
ok 18 - rebase -i --continue remembers --no-rerere-autoupdate
ok 19 - rebase --preserve-merges --continue remembers --rerere-autoupdate
ok 20 - rebase --preserve-merges --continue honors rerere.autoUpdate
ok 21 - rebase --preserve-merges --continue remembers --no-rerere-autoupdate
# passed all 21 test(s)
1..21
*** t3419-rebase-patch-id.sh ***
ok 1 - setup
ok 2 - setup: 500 lines
ok 3 - setup attributes
ok 4 - detect upstream patch
ok 5 - do not drop patch
ok 6 # skip setup: 50000 lines (missing EXPENSIVE)
ok 7 # skip setup attributes (missing EXPENSIVE)
ok 8 # skip detect upstream patch (missing EXPENSIVE)
ok 9 # skip do not drop patch (missing EXPENSIVE)
# passed all 9 test(s)
1..9
*** t3420-rebase-autostash.sh ***
ok 1 - setup
ok 2 - rebase: fast-forward rebase
ok 3 - rebase: noop rebase
ok 4 - rebase: dirty worktree, --no-autostash
ok 5 - rebase: dirty worktree, non-conflicting rebase
ok 6 - rebase --autostash: check output
ok 7 - rebase: dirty index, non-conflicting rebase
ok 8 - rebase: conflicting rebase
ok 9 - rebase: --continue
ok 10 - rebase: --skip
ok 11 - rebase: --abort
ok 12 - rebase: non-conflicting rebase, conflicting stash
ok 13 - rebase: check output with conflicting stash
ok 14 - rebase --merge: dirty worktree, --no-autostash
ok 15 - rebase --merge: dirty worktree, non-conflicting rebase
ok 16 - rebase --merge --autostash: check output
ok 17 - rebase --merge: dirty index, non-conflicting rebase
ok 18 - rebase --merge: conflicting rebase
ok 19 - rebase --merge: --continue
ok 20 - rebase --merge: --skip
ok 21 - rebase --merge: --abort
ok 22 - rebase --merge: non-conflicting rebase, conflicting stash
ok 23 - rebase --merge: check output with conflicting stash
ok 24 - rebase --interactive: dirty worktree, --no-autostash
ok 25 - rebase --interactive: dirty worktree, non-conflicting rebase
ok 26 - rebase --interactive --autostash: check output
ok 27 - rebase --interactive: dirty index, non-conflicting rebase
ok 28 - rebase --interactive: conflicting rebase
ok 29 - rebase --interactive: --continue
ok 30 - rebase --interactive: --skip
ok 31 - rebase --interactive: --abort
ok 32 - rebase --interactive: non-conflicting rebase, conflicting stash
ok 33 - rebase --interactive: check output with conflicting stash
ok 34 - abort rebase -i with --autostash
ok 35 - restore autostash on editor failure
ok 36 - autostash is saved on editor failure with conflict
# passed all 36 test(s)
1..36
*** t3421-rebase-topology-linear.sh ***
ok 1 - setup
ok 2 - simple rebase 
ok 3 - simple rebase -m
ok 4 - simple rebase -i
ok 5 - simple rebase -p
ok 6 - rebase  is no-op if upstream is an ancestor
ok 7 - rebase -m is no-op if upstream is an ancestor
ok 8 - rebase -i is no-op if upstream is an ancestor
ok 9 - rebase -p is no-op if upstream is an ancestor
ok 10 - rebase  -f rewrites even if upstream is an ancestor
ok 11 - rebase -m -f rewrites even if upstream is an ancestor
ok 12 - rebase -i -f rewrites even if upstream is an ancestor
not ok 13 - rebase -p -f rewrites even if upstream is an ancestor # TODO known breakage
ok 14 - rebase  fast-forwards from ancestor of upstream
ok 15 - rebase -m fast-forwards from ancestor of upstream
ok 16 - rebase -i fast-forwards from ancestor of upstream
ok 17 - rebase -p fast-forwards from ancestor of upstream
ok 18 - setup of linear history for range selection tests
ok 19 - rebase  drops patches in upstream
not ok 20 - rebase -m drops patches in upstream # TODO known breakage
ok 21 - rebase -i drops patches in upstream
ok 22 - rebase -p drops patches in upstream
ok 23 - rebase  can drop last patch if in upstream
not ok 24 - rebase -m can drop last patch if in upstream # TODO known breakage
ok 25 - rebase -i can drop last patch if in upstream
ok 26 - rebase -p can drop last patch if in upstream
ok 27 - rebase  --onto drops patches in upstream
not ok 28 - rebase -m --onto drops patches in upstream # TODO known breakage
ok 29 - rebase -i --onto drops patches in upstream
ok 30 - rebase -p --onto drops patches in upstream
ok 31 - rebase  --onto does not drop patches in onto
ok 32 - rebase -m --onto does not drop patches in onto
ok 33 - rebase -i --onto does not drop patches in onto
ok 34 - rebase -p --onto does not drop patches in onto
ok 35 - setup of linear history for empty commit tests
ok 36 - rebase  drops empty commit
ok 37 - rebase -m drops empty commit
ok 38 - rebase -i drops empty commit
ok 39 - rebase -p drops empty commit
ok 40 - rebase  --keep-empty
ok 41 - rebase -m --keep-empty
ok 42 - rebase -i --keep-empty
not ok 43 - rebase -p --keep-empty # TODO known breakage
ok 44 - rebase  --keep-empty keeps empty even if already in upstream
ok 45 - rebase -m --keep-empty keeps empty even if already in upstream
ok 46 - rebase -i --keep-empty keeps empty even if already in upstream
not ok 47 - rebase -p --keep-empty keeps empty even if already in upstream # TODO known breakage
ok 48 - rebase --rebase-merges --keep-empty keeps empty even if already in upstream
ok 49 - setup of linear history for test involving root
ok 50 - rebase  --onto --root
ok 51 - rebase -m --onto --root
ok 52 - rebase -i --onto --root
ok 53 - rebase -p --onto --root
ok 54 - rebase  without --onto --root with disjoint history
ok 55 - rebase -m without --onto --root with disjoint history
ok 56 - rebase -i without --onto --root with disjoint history
not ok 57 - rebase -p without --onto --root with disjoint history # TODO known breakage
ok 58 - rebase  --onto --root drops patch in onto
not ok 59 - rebase -m --onto --root drops patch in onto # TODO known breakage
ok 60 - rebase -i --onto --root drops patch in onto
ok 61 - rebase -p --onto --root drops patch in onto
ok 62 - rebase  --onto --root with merge-base does not go to root
ok 63 - rebase -m --onto --root with merge-base does not go to root
ok 64 - rebase -i --onto --root with merge-base does not go to root
not ok 65 - rebase -p --onto --root with merge-base does not go to root # TODO known breakage
ok 66 - rebase  without --onto --root with disjoint history drops patch in onto
not ok 67 - rebase -m without --onto --root with disjoint history drops patch in onto # TODO known breakage
ok 68 - rebase -i without --onto --root with disjoint history drops patch in onto
not ok 69 - rebase -p without --onto --root with disjoint history drops patch in onto # TODO known breakage
ok 70 - rebase  --root on linear history is a no-op
ok 71 - rebase -m --root on linear history is a no-op
ok 72 - rebase -i --root on linear history is a no-op
not ok 73 - rebase -p --root on linear history is a no-op # TODO known breakage
ok 74 - rebase  -f --root on linear history causes re-write
ok 75 - rebase -m -f --root on linear history causes re-write
ok 76 - rebase -i -f --root on linear history causes re-write
ok 77 - rebase -p -f --root on linear history causes re-write
# still have 12 known breakage(s)
# passed all remaining 65 test(s)
1..77
*** t3422-rebase-incompatible-options.sh ***
ok 1 - setup
ok 2 - --whitespace=fix incompatible with --merge
ok 3 - --whitespace=fix incompatible with --strategy=ours
ok 4 - --whitespace=fix incompatible with --strategy-option=ours
ok 5 - --whitespace=fix incompatible with --interactive
ok 6 - --whitespace=fix incompatible with --exec
ok 7 - --ignore-whitespace incompatible with --merge
ok 8 - --ignore-whitespace incompatible with --strategy=ours
ok 9 - --ignore-whitespace incompatible with --strategy-option=ours
ok 10 - --ignore-whitespace incompatible with --interactive
ok 11 - --ignore-whitespace incompatible with --exec
ok 12 - --committer-date-is-author-date incompatible with --merge
ok 13 - --committer-date-is-author-date incompatible with --strategy=ours
ok 14 - --committer-date-is-author-date incompatible with --strategy-option=ours
ok 15 - --committer-date-is-author-date incompatible with --interactive
ok 16 - --committer-date-is-author-date incompatible with --exec
ok 17 - -C4 incompatible with --merge
ok 18 - -C4 incompatible with --strategy=ours
ok 19 - -C4 incompatible with --strategy-option=ours
ok 20 - -C4 incompatible with --interactive
ok 21 - -C4 incompatible with --exec
ok 22 - --preserve-merges incompatible with --signoff
ok 23 - --preserve-merges incompatible with --rebase-merges
ok 24 - --rebase-merges incompatible with --strategy
ok 25 - --rebase-merges incompatible with --strategy-option
# passed all 25 test(s)
1..25
*** t3423-rebase-reword.sh ***
ok 1 - setup
ok 2 - reword without issues functions as intended
ok 3 - reword after a conflict preserves commit
# passed all 3 test(s)
1..3
*** t3425-rebase-topology-merges.sh ***
ok 1 - setup of non-linear-history
ok 2 - rebase  after merge from upstream
ok 3 - rebase -m after merge from upstream
ok 4 - rebase -i after merge from upstream
ok 5 - rebase  of non-linear history is linearized in place
ok 6 - rebase -m of non-linear history is linearized in place
ok 7 - rebase -i of non-linear history is linearized in place
ok 8 - rebase  of non-linear history is linearized upstream
ok 9 - rebase -m of non-linear history is linearized upstream
ok 10 - rebase -i of non-linear history is linearized upstream
ok 11 - rebase  of non-linear history with merges after upstream merge is linearized
ok 12 - rebase -m of non-linear history with merges after upstream merge is linearized
ok 13 - rebase -i of non-linear history with merges after upstream merge is linearized
ok 14 - rebase -p is no-op in non-linear history
ok 15 - rebase -p is no-op when base inside second parent
not ok 16 - rebase -p --root on non-linear history is a no-op # TODO known breakage
ok 17 - rebase -p re-creates merge from side branch
ok 18 - rebase -p re-creates internal merge
ok 19 - rebase -p can re-create two branches on onto
ok 20 - setup of non-linear-history for patch-equivalence tests
ok 21 - rebase -p re-creates history around dropped commit matching upstream
ok 22 - rebase -p --onto in merged history drops patches in upstream
ok 23 - rebase -p --onto in merged history does not drop patches in onto
ok 24 - setup of non-linear-history for dropping whole side
not ok 25 - rebase -p drops merge commit when entire first-parent side is dropped # TODO known breakage
ok 26 - rebase -p drops merge commit when entire second-parent side is dropped
ok 27 - setup of non-linear-history for empty commits
ok 28 - rebase -p re-creates empty internal merge commit
ok 29 - rebase -p re-creates empty merge commit
# still have 2 known breakage(s)
# passed all remaining 27 test(s)
1..29
*** t3426-rebase-submodule.sh ***
ok 1 - git_rebase: added submodule creates empty directory
ok 2 - git_rebase: added submodule leaves existing empty directory alone
ok 3 - git_rebase: replace tracked file with submodule creates empty directory
ok 4 - git_rebase: replace directory with submodule
ok 5 - git_rebase: removed submodule leaves submodule directory and its contents in place
ok 6 - git_rebase: removed submodule leaves submodule containing a .git directory alone
ok 7 - git_rebase: replace submodule with a directory must fail
ok 8 - git_rebase: replace submodule containing a .git directory with a directory must fail
not ok 9 - git_rebase: replace submodule with a file must fail # TODO known breakage
not ok 10 - git_rebase: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - git_rebase: modified submodule does not update submodule work tree
ok 12 - git_rebase: modified submodule does not update submodule work tree to invalid commit
ok 13 - git_rebase: modified submodule does not update submodule work tree from invalid commit
ok 14 - git_rebase: added submodule doesn't remove untracked unignored file with same name
ok 15 - git_rebase_interactive: added submodule creates empty directory
ok 16 - git_rebase_interactive: added submodule leaves existing empty directory alone
ok 17 - git_rebase_interactive: replace tracked file with submodule creates empty directory
ok 18 - git_rebase_interactive: replace directory with submodule
ok 19 - git_rebase_interactive: removed submodule leaves submodule directory and its contents in place
ok 20 - git_rebase_interactive: removed submodule leaves submodule containing a .git directory alone
ok 21 - git_rebase_interactive: replace submodule with a directory must fail
ok 22 - git_rebase_interactive: replace submodule containing a .git directory with a directory must fail
not ok 23 - git_rebase_interactive: replace submodule with a file must fail # TODO known breakage
not ok 24 - git_rebase_interactive: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 25 - git_rebase_interactive: modified submodule does not update submodule work tree
ok 26 - git_rebase_interactive: modified submodule does not update submodule work tree to invalid commit
ok 27 - git_rebase_interactive: modified submodule does not update submodule work tree from invalid commit
ok 28 - git_rebase_interactive: added submodule doesn't remove untracked unignored file with same name
ok 29 - rebase interactive ignores modified submodules
# still have 4 known breakage(s)
# passed all remaining 25 test(s)
1..29
*** t3427-rebase-subtree.sh ***
ok 1 - setup
not ok 2 - Rebase -Xsubtree --preserve-merges --onto commit 4 # TODO known breakage
not ok 3 - Rebase -Xsubtree --preserve-merges --onto commit 5 # TODO known breakage
not ok 4 - Rebase -Xsubtree --keep-empty --preserve-merges --onto commit 4 # TODO known breakage
not ok 5 - Rebase -Xsubtree --keep-empty --preserve-merges --onto commit 5 # TODO known breakage
not ok 6 - Rebase -Xsubtree --keep-empty --preserve-merges --onto empty commit # TODO known breakage
not ok 7 - Rebase -Xsubtree --onto commit 4 # TODO known breakage
not ok 8 - Rebase -Xsubtree --onto commit 5 # TODO known breakage
not ok 9 - Rebase -Xsubtree --onto empty commit # TODO known breakage
# still have 8 known breakage(s)
# passed all remaining 1 test(s)
1..9
*** t3428-rebase-signoff.sh ***
ok 1 - rebase --signoff adds a sign-off line
ok 2 - rebase --no-signoff does not add a sign-off line
ok 3 - rebase --exec --signoff adds a sign-off line
ok 4 - rebase --root --signoff adds a sign-off line
ok 5 - rebase -i --signoff fails
ok 6 - rebase -m --signoff fails
# passed all 6 test(s)
1..6
*** t3429-rebase-edit-todo.sh ***
ok 1 - rebase exec modifies rebase-todo
# passed all 1 test(s)
1..1
*** t3430-rebase-merges.sh ***
ok 1 - setup
ok 2 - create completely different structure
ok 3 - generate correct todo list
ok 4 - `reset` refuses to overwrite untracked files
ok 5 - failed `merge -C` writes patch (may be rescheduled, too)
ok 6 - failed `merge <branch>` does not crash
ok 7 - with a branch tip that was cherry-picked already
ok 8 - do not rebase cousins unless asked for
ok 9 - refs/rewritten/* is worktree-local
ok 10 - post-rewrite hook and fixups work for merges
ok 11 - refuse to merge ancestors of HEAD
ok 12 - root commits
ok 13 - a "merge" into a root commit is a fast-forward
ok 14 - A root commit can be a cousin, treat it that way
ok 15 - labels that are object IDs are rewritten
ok 16 - octopus merges
ok 17 - with --autosquash and --exec
# passed all 17 test(s)
1..17
*** t3500-cherry.sh ***
ok 1 - prepare repository with topic branch, and check cherry finds the 2 patches from there
ok 2 - check that cherry with limit returns only the top patch
ok 3 - cherry-pick one of the 2 patches, and check cherry recognized one and only one as new
# passed all 3 test(s)
1..3
*** t3501-revert-cherry-pick.sh ***
ok 1 - setup
ok 2 - cherry-pick --nonsense
ok 3 - revert --nonsense
ok 4 - cherry-pick after renaming branch
ok 5 - revert after renaming branch
ok 6 - cherry-pick on stat-dirty working tree
ok 7 - revert forbidden on dirty working tree
ok 8 - cherry-pick on unborn branch
ok 9 - cherry-pick "-" to pick from previous branch
ok 10 - cherry-pick "-" is meaningless without checkout
ok 11 - cherry-pick "-" works with arguments
ok 12 - cherry-pick works with dirty renamed file
# passed all 12 test(s)
1..12
*** t3502-cherry-pick-merge.sh ***
ok 1 - setup
ok 2 - cherry-pick -m complains of bogus numbers
ok 3 - cherry-pick a non-merge with -m should fail
ok 4 - cherry pick a merge without -m should fail
ok 5 - cherry pick a merge (1)
ok 6 - cherry pick a merge (2)
ok 7 - cherry pick a merge relative to nonexistent parent should fail
ok 8 - revert a non-merge with -m should fail
ok 9 - revert a merge without -m should fail
ok 10 - revert a merge (1)
ok 11 - revert a merge (2)
ok 12 - revert a merge relative to nonexistent parent should fail
# passed all 12 test(s)
1..12
*** t3503-cherry-pick-root.sh ***
ok 1 - setup
ok 2 - cherry-pick a root commit
ok 3 - revert a root commit
ok 4 - cherry-pick a root commit with an external strategy
ok 5 - revert a root commit with an external strategy
ok 6 - cherry-pick two root commits
# passed all 6 test(s)
1..6
*** t3504-cherry-pick-rerere.sh ***
ok 1 - setup
ok 2 - conflicting merge
ok 3 - fixup
ok 4 - cherry-pick conflict with --rerere-autoupdate
ok 5 - cherry-pick conflict repsects rerere.autoUpdate
ok 6 - cherry-pick conflict with --no-rerere-autoupdate
ok 7 - cherry-pick --continue rejects --rerere-autoupdate
ok 8 - cherry-pick --rerere-autoupdate more than once
ok 9 - cherry-pick conflict without rerere
# passed all 9 test(s)
1..9
*** t3505-cherry-pick-empty.sh ***
ok 1 - setup
ok 2 - cherry-pick an empty commit
ok 3 - index lockfile was removed
ok 4 - cherry-pick a commit with an empty message
ok 5 - index lockfile was removed
ok 6 - cherry-pick a commit with an empty message with --allow-empty-message
ok 7 - cherry pick an empty non-ff commit without --allow-empty
ok 8 - cherry pick an empty non-ff commit with --allow-empty
ok 9 - cherry pick with --keep-redundant-commits
ok 10 - cherry-pick a commit that becomes no-op (prep)
ok 11 - cherry-pick a no-op without --keep-redundant
ok 12 - cherry-pick a no-op with --keep-redundant
# passed all 12 test(s)
1..12
*** t3506-cherry-pick-ff.sh ***
ok 1 - setup
ok 2 - cherry-pick using --ff fast forwards
ok 3 - cherry-pick not using --ff does not fast forwards
ok 4 - merge setup
ok 5 - cherry-pick a non-merge with --ff and -m should fail
ok 6 - cherry pick a merge with --ff but without -m should fail
ok 7 - cherry pick with --ff a merge (1)
ok 8 - cherry pick with --ff a merge (2)
ok 9 - cherry pick a merge relative to nonexistent parent with --ff should fail
ok 10 - cherry pick a root commit with --ff
ok 11 - cherry-pick --ff on unborn branch
# passed all 11 test(s)
1..11
*** t3507-cherry-pick-conflict.sh ***
ok 1 - setup
ok 2 - failed cherry-pick does not advance HEAD
ok 3 - advice from failed cherry-pick
ok 4 - advice from failed cherry-pick --no-commit
ok 5 - failed cherry-pick sets CHERRY_PICK_HEAD
ok 6 - successful cherry-pick does not set CHERRY_PICK_HEAD
ok 7 - cherry-pick --no-commit does not set CHERRY_PICK_HEAD
ok 8 - cherry-pick w/dirty tree does not set CHERRY_PICK_HEAD
ok 9 - cherry-pick --strategy=resolve w/dirty tree does not set CHERRY_PICK_HEAD
ok 10 - GIT_CHERRY_PICK_HELP suppresses CHERRY_PICK_HEAD
ok 11 - git reset clears CHERRY_PICK_HEAD
ok 12 - failed commit does not clear CHERRY_PICK_HEAD
ok 13 - cancelled commit does not clear CHERRY_PICK_HEAD
ok 14 - successful commit clears CHERRY_PICK_HEAD
ok 15 - failed cherry-pick produces dirty index
ok 16 - failed cherry-pick registers participants in index
ok 17 - failed cherry-pick describes conflict in work tree
ok 18 - diff3 -m style
ok 19 - revert also handles conflicts sanely
ok 20 - failed revert sets REVERT_HEAD
ok 21 - successful revert does not set REVERT_HEAD
ok 22 - revert --no-commit sets REVERT_HEAD
ok 23 - revert w/dirty tree does not set REVERT_HEAD
ok 24 - GIT_CHERRY_PICK_HELP does not suppress REVERT_HEAD
ok 25 - git reset clears REVERT_HEAD
ok 26 - failed commit does not clear REVERT_HEAD
ok 27 - revert conflict, diff3 -m style
ok 28 - failed cherry-pick does not forget -s
ok 29 - commit after failed cherry-pick does not add duplicated -s
ok 30 - commit after failed cherry-pick adds -s at the right place
ok 31 - commit --amend -s places the sign-off at the right place
ok 32 - cherry-pick preserves sparse-checkout
# passed all 32 test(s)
1..32
*** t3508-cherry-pick-many-commits.sh ***
ok 1 - setup
ok 2 - cherry-pick first..fourth works
ok 3 - cherry-pick three one two works
ok 4 - cherry-pick three one two: fails
ok 5 - output to keep user entertained during multi-pick
ok 6 - cherry-pick --strategy resolve first..fourth works
ok 7 - output during multi-pick indicates merge strategy
ok 8 - cherry-pick --ff first..fourth works
ok 9 - cherry-pick -n first..fourth works
ok 10 - revert first..fourth works
ok 11 - revert ^first fourth works
ok 12 - revert fourth fourth~1 fourth~2 works
ok 13 - cherry-pick -3 fourth works
ok 14 - cherry-pick --stdin works
# passed all 14 test(s)
1..14
*** t3509-cherry-pick-merge-df.sh ***
ok 1 - Initialize repository
ok 2 - Setup rename across paths each below D/F conflicts
ok 3 - Cherry-pick succeeds with rename across D/F conflicts
ok 4 - Setup rename with file on one side matching directory name on other
ok 5 - Cherry-pick succeeds with was_a_dir/file -> was_a_dir (resolve)
ok 6 - Cherry-pick succeeds with was_a_dir/file -> was_a_dir (recursive)
ok 7 - Setup rename with file on one side matching different dirname on other
ok 8 - Cherry-pick with rename to different D/F conflict succeeds (resolve)
ok 9 - Cherry-pick with rename to different D/F conflict succeeds (recursive)
# passed all 9 test(s)
1..9
*** t3510-cherry-pick-sequence.sh ***
ok 1 - setup
ok 2 - cherry-pick persists data on failure
ok 3 - cherry-pick mid-cherry-pick-sequence
ok 4 - cherry-pick persists opts correctly
ok 5 - cherry-pick cleans up sequencer state upon success
ok 6 - --quit does not complain when no cherry-pick is in progress
ok 7 - --abort requires cherry-pick in progress
ok 8 - --quit cleans up sequencer state
ok 9 - --quit keeps HEAD and conflicted index intact
ok 10 - --abort to cancel multiple cherry-pick
ok 11 - --abort to cancel single cherry-pick
ok 12 - --abort does not unsafely change HEAD
ok 13 - cherry-pick --abort to cancel multiple revert
ok 14 - revert --abort works, too
ok 15 - --abort to cancel single revert
ok 16 - --abort keeps unrelated change, easy case
ok 17 - --abort refuses to clobber unrelated change, harder case
ok 18 - cherry-pick still writes sequencer state when one commit is left
ok 19 - --abort after last commit in sequence
ok 20 - cherry-pick does not implicitly stomp an existing operation
ok 21 - --continue complains when no cherry-pick is in progress
ok 22 - --continue complains when there are unresolved conflicts
ok 23 - --continue of single cherry-pick
ok 24 - --continue of single revert
ok 25 - --continue after resolving conflicts
ok 26 - --continue after resolving conflicts and committing
ok 27 - --continue asks for help after resolving patch to nil
ok 28 - follow advice and skip nil patch
ok 29 - --continue respects opts
ok 30 - --continue of single-pick respects -x
ok 31 - --continue respects -x in first commit in multi-pick
not ok 32 - --signoff is automatically propagated to resolved conflict # TODO known breakage
not ok 33 - --signoff dropped for implicit commit of resolution, multi-pick case # TODO known breakage
not ok 34 - sign-off needs to be reaffirmed after conflict resolution, single-pick case # TODO known breakage
ok 35 - malformed instruction sheet 1
ok 36 - malformed instruction sheet 2
ok 37 - empty commit set (no commits to walk)
ok 38 - empty commit set (culled during walk)
ok 39 - malformed instruction sheet 3
ok 40 - instruction sheet, fat-fingers version
ok 41 - commit descriptions in insn sheet are optional
# still have 3 known breakage(s)
# passed all remaining 38 test(s)
1..41
*** t3511-cherry-pick-x.sh ***
ok 1 - setup
ok 2 - cherry-pick -x inserts blank line after one line subject
ok 3 - cherry-pick -s inserts blank line after one line subject
ok 4 - cherry-pick -s inserts blank line after non-conforming footer
ok 5 - cherry-pick -s recognizes trailer config
ok 6 - cherry-pick -x inserts blank line when conforming footer not found
ok 7 - cherry-pick -s inserts blank line when conforming footer not found
ok 8 - cherry-pick -x -s inserts blank line when conforming footer not found
ok 9 - cherry-pick -s adds sob when last sob doesnt match committer
ok 10 - cherry-pick -x -s adds sob when last sob doesnt match committer
ok 11 - cherry-pick -s refrains from adding duplicate trailing sob
ok 12 - cherry-pick -x -s adds sob even when trailing sob exists for committer
ok 13 - cherry-pick -x handles commits with no NL at end of message
ok 14 - cherry-pick -x handles commits with no footer and no NL at end of message
ok 15 - cherry-pick -s handles commits with no NL at end of message
ok 16 - cherry-pick -s handles commits with no footer and no NL at end of message
ok 17 - cherry-pick -x treats "(cherry picked from..." line as part of footer
ok 18 - cherry-pick -s treats "(cherry picked from..." line as part of footer
ok 19 - cherry-pick -x -s treats "(cherry picked from..." line as part of footer
ok 20 - cherry-pick preserves commit message
# passed all 20 test(s)
1..20
*** t3512-cherry-pick-submodule.sh ***
ok 1 - git cherry-pick: added submodule creates empty directory
ok 2 - git cherry-pick: added submodule leaves existing empty directory alone
ok 3 - git cherry-pick: replace tracked file with submodule creates empty directory
not ok 4 - git cherry-pick: replace directory with submodule # TODO known breakage
ok 5 - git cherry-pick: removed submodule leaves submodule directory and its contents in place
ok 6 - git cherry-pick: removed submodule leaves submodule containing a .git directory alone
not ok 7 - git cherry-pick: replace submodule with a directory must fail # TODO known breakage
not ok 8 - git cherry-pick: replace submodule containing a .git directory with a directory must fail # TODO known breakage
not ok 9 - git cherry-pick: replace submodule with a file must fail # TODO known breakage
not ok 10 - git cherry-pick: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - git cherry-pick: modified submodule does not update submodule work tree
ok 12 - git cherry-pick: modified submodule does not update submodule work tree to invalid commit
ok 13 - git cherry-pick: modified submodule does not update submodule work tree from invalid commit
ok 14 - git cherry-pick: added submodule doesn't remove untracked unignored file with same name
ok 15 - unrelated submodule/file conflict is ignored
# still have 5 known breakage(s)
# passed all remaining 10 test(s)
1..15
*** t3513-revert-submodule.sh ***
ok 1 - git_revert: added submodule creates empty directory
ok 2 - git_revert: added submodule leaves existing empty directory alone
ok 3 - git_revert: replace tracked file with submodule creates empty directory
not ok 4 - git_revert: replace directory with submodule # TODO known breakage
ok 5 - git_revert: removed submodule leaves submodule directory and its contents in place
ok 6 - git_revert: removed submodule leaves submodule containing a .git directory alone
ok 7 - git_revert: replace submodule with a directory must fail
ok 8 - git_revert: replace submodule containing a .git directory with a directory must fail
not ok 9 - git_revert: replace submodule with a file must fail # TODO known breakage
not ok 10 - git_revert: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - git_revert: modified submodule does not update submodule work tree
ok 12 - git_revert: modified submodule does not update submodule work tree to invalid commit
ok 13 - git_revert: modified submodule does not update submodule work tree from invalid commit
ok 14 - git_revert: added submodule doesn't remove untracked unignored file with same name
# still have 3 known breakage(s)
# passed all remaining 11 test(s)
1..14
*** t3600-rm.sh ***
ok 1 - Initialize test directory
ok 2 - add files with funny names
ok 3 - Pre-check that foo exists and is in index before git rm foo
ok 4 - Test that git rm foo succeeds
ok 5 - Test that git rm --cached foo succeeds if the index matches the file
ok 6 - Test that git rm --cached foo succeeds if the index matches the file
ok 7 - Test that git rm --cached foo fails if the index matches neither the file nor HEAD
ok 8 - Test that git rm --cached -f foo works in case where --cached only did not
ok 9 - Post-check that foo exists but is not in index after git rm foo
ok 10 - Pre-check that bar exists and is in index before "git rm bar"
ok 11 - Test that "git rm bar" succeeds
ok 12 - Post-check that bar does not exist and is not in index after "git rm -f bar"
ok 13 - Test that "git rm -- -q" succeeds (remove a file that looks like an option)
ok 14 - Test that "git rm -f" succeeds with embedded space, tab, or newline characters.
ok 15 - Test that "git rm -f" fails if its rm fails
ok 16 - When the rm in "git rm -f" fails, it should not remove the file from the index
ok 17 - Remove nonexistent file with --ignore-unmatch
ok 18 - "rm" command printed
ok 19 - "rm" command suppressed with --quiet
ok 20 - Re-add foo and baz
ok 21 - Modify foo -- rm should refuse
ok 22 - Modified foo -- rm -f should work
ok 23 - Re-add foo and baz for HEAD tests
ok 24 - foo is different in index from HEAD -- rm should refuse
ok 25 - but with -f it should work.
ok 26 - refuse to remove cached empty file with modifications
ok 27 - remove intent-to-add file without --force
ok 28 - Recursive test setup
ok 29 - Recursive without -r fails
ok 30 - Recursive with -r but dirty
ok 31 - Recursive with -r -f
ok 32 - Remove nonexistent file returns nonzero exit status
ok 33 - Call "rm" from outside the work tree
ok 34 - refresh index before checking if it is up-to-date
ok 35 - choking "git rm" should not let it die with cruft
ok 36 - rm removes subdirectories recursively
ok 37 - rm removes empty submodules from work tree
ok 38 - rm removes removed submodule from index and .gitmodules
ok 39 - rm removes work tree of unmodified submodules
ok 40 - rm removes a submodule with a trailing /
ok 41 - rm fails when given a file with a trailing /
ok 42 - rm succeeds when given a directory with a trailing /
ok 43 - rm of a populated submodule with different HEAD fails unless forced
ok 44 - rm --cached leaves work tree of populated submodules and .gitmodules alone
ok 45 - rm --dry-run does not touch the submodule or .gitmodules
ok 46 - rm does not complain when no .gitmodules file is found
ok 47 - rm will error out on a modified .gitmodules file unless staged
ok 48 - rm issues a warning when section is not found in .gitmodules
ok 49 - rm of a populated submodule with modifications fails unless forced
ok 50 - rm of a populated submodule with untracked files fails unless forced
ok 51 - setup submodule conflict
ok 52 - rm removes work tree of unmodified conflicted submodule
ok 53 - rm of a conflicted populated submodule with different HEAD fails unless forced
ok 54 - rm of a conflicted populated submodule with modifications fails unless forced
ok 55 - rm of a conflicted populated submodule with untracked files fails unless forced
ok 56 - rm of a conflicted populated submodule with a .git directory fails even when forced
ok 57 - rm of a conflicted unpopulated submodule succeeds
ok 58 - rm of a populated submodule with a .git directory migrates git dir
ok 59 - setup subsubmodule
ok 60 - rm recursively removes work tree of unmodified submodules
ok 61 - rm of a populated nested submodule with different nested HEAD fails unless forced
ok 62 - rm of a populated nested submodule with nested modifications fails unless forced
ok 63 - rm of a populated nested submodule with nested untracked files fails unless forced
ok 64 - rm absorbs submodule's nested .git directory
ok 65 - checking out a commit after submodule removal needs manual updates
ok 66 - rm of d/f when d has become a non-directory
ok 67 - rm of d/f when d has become a dangling symlink
ok 68 - rm of file when it has become a directory
ok 69 - rm across a symlinked leading path (no index)
not ok 70 - rm across a symlinked leading path (w/ index) # TODO known breakage
ok 71 - setup for testing rm messages
ok 72 - rm files with different staged content
ok 73 - rm files with different staged content without hints
ok 74 - rm file with local modification
ok 75 - rm file with local modification without hints
ok 76 - rm file with changes in the index
ok 77 - rm file with changes in the index without hints
ok 78 - rm files with two different errors
ok 79 - rm empty string should fail
# still have 1 known breakage(s)
# passed all remaining 78 test(s)
1..79
*** t3700-add.sh ***
ok 1 - Test of git add
ok 2 - Post-check that foo is in the index
ok 3 - Test that "git add -- -q" works
ok 4 - git add: Test that executable bit is not used if core.filemode=0
ok 5 - git add: filemode=0 should not get confused by symlink
ok 6 - git update-index --add: Test that executable bit is not used...
ok 7 - git add: filemode=0 should not get confused by symlink
ok 8 - git update-index --add: Test that executable bit is not used...
ok 9 - .gitignore test setup
ok 10 - .gitignore is honored
ok 11 - error out when attempting to add ignored ones without -f
ok 12 - error out when attempting to add ignored ones without -f
ok 13 - error out when attempting to add ignored ones but add others
ok 14 - add ignored ones with -f
ok 15 - add ignored ones with -f
ok 16 - add ignored ones with -f
ok 17 - .gitignore with subdirectory
ok 18 - check correct prefix detection
ok 19 - git add with filemode=0, symlinks=0, and unmerged entries
ok 20 - git add with filemode=0, symlinks=0 prefers stage 2 over stage 1
ok 21 - git add --refresh
ok 22 - git add --refresh with pathspec
ok 23 - git add should fail atomically upon an unreadable file
ok 24 - git add --ignore-errors
ok 25 - git add (add.ignore-errors)
ok 26 - git add (add.ignore-errors = false)
ok 27 - --no-ignore-errors overrides config
ok 28 - git add 'fo\[ou\]bar' ignores foobar
ok 29 - git add to resolve conflicts on otherwise ignored path
ok 30 - "add non-existent" should fail
ok 31 - git add -A on empty repo does not error out
ok 32 - "git add ." in empty repo
ok 33 - git add --dry-run of existing changed file
ok 34 - git add --dry-run of non-existing file
ok 35 - git add --dry-run of an existing file output
ok 36 - git add --dry-run --ignore-missing of non-existing file
ok 37 - git add --dry-run --ignore-missing of non-existing file output
ok 38 - git add empty string should fail
ok 39 - git add --chmod=[+-]x stages correctly
ok 40 - git add --chmod=+x with symlinks
ok 41 - git add --chmod=[+-]x changes index with already added file
ok 42 - git add --chmod=[+-]x does not change the working tree
ok 43 - no file status change if no pathspec is given
ok 44 - no file status change if no pathspec is given in subdir
ok 45 - all statuses changed in folder if . is given
# passed all 45 test(s)
1..45
*** t3701-add-interactive.sh ***
ok 1 - setup (initial)
ok 2 - status works (initial)
ok 3 - setup expected
ok 4 - diff works (initial)
ok 5 - revert works (initial)
ok 6 - setup (commit)
ok 7 - status works (commit)
ok 8 - setup expected
ok 9 - diff works (commit)
ok 10 - revert works (commit)
ok 11 - setup expected
ok 12 - dummy edit works
ok 13 - setup patch
ok 14 - setup fake editor
ok 15 - bad edit rejected
ok 16 - setup patch
ok 17 - garbage edit rejected
ok 18 - setup patch
ok 19 - setup expected
ok 20 - real edit works
ok 21 - setup file
ok 22 - setup patch
ok 23 - setup expected
ok 24 - edit can strip spaces from empty context lines
ok 25 - skip files similarly as commit -a
ok 26 - patch does not affect mode
ok 27 - stage mode but not hunk
ok 28 - stage mode and hunk
ok 29 - setup again
ok 30 - setup patch
ok 31 - setup expected
ok 32 - add first line works
ok 33 - setup expected
ok 34 - deleting a non-empty file
ok 35 - setup expected
ok 36 - deleting an empty file
ok 37 - split hunk setup
ok 38 - split hunk "add -p (edit)"
not ok 39 - split hunk "add -p (no, yes, edit)" # TODO known breakage
ok 40 - patch mode ignores unmerged entries
ok 41 # skip diffs can be colorized (missing TTY)
ok 42 # skip diffFilter filters diff (missing TTY)
ok 43 # skip detect bogus diffFilter output (missing TTY)
ok 44 - patch-mode via -i prompts for files
ok 45 - add -p handles globs
ok 46 - add -p handles relative paths
ok 47 - add -p does not expand argument lists
ok 48 - hunk-editing handles custom comment char
ok 49 - add -p works even with color.ui=always
ok 50 - setup different kinds of dirty submodules
ok 51 - status ignores dirty submodules (except HEAD)
ok 52 - set up pathological context
ok 53 - add -p works with pathological context lines
ok 54 - add -p patch editing works with pathological context lines
# still have 1 known breakage(s)
# passed all remaining 53 test(s)
1..54
*** t3702-add-edit.sh ***
ok 1 - setup
ok 2 - add -e
ok 3 - add -e notices editor failure
# passed all 3 test(s)
1..3
*** t3703-add-magic-pathspec.sh ***
ok 1 - setup
ok 2 - add :/
ok 3 - add :/anothersub
ok 4 - add :/non-existent
ok 5 - a file with the same (long) magic name exists
ok 6 - a file with the same (short) magic name exists
# passed all 6 test(s)
1..6
*** t3800-mktag.sh ***
ok 1 - setup
ok 2 - Tag object length check
ok 3 - "object" line label check
ok 4 - "object" line SHA1 check
ok 5 - "type" line label check
ok 6 - "type" line eol check
ok 7 - "tag" line label check #1
ok 8 - "tag" line label check #2
ok 9 - "type" line type-name length check
ok 10 - verify object (SHA1/type) check
ok 11 - verify tag-name check
ok 12 - "tagger" line label check #1
ok 13 - "tagger" line label check #2
ok 14 - disallow missing tag author name
ok 15 - disallow malformed tagger
ok 16 - allow empty tag email
ok 17 - disallow spaces in tag email
ok 18 - disallow missing tag timestamp
ok 19 - detect invalid tag timestamp1
ok 20 - detect invalid tag timestamp2
ok 21 - detect invalid tag timezone1
ok 22 - detect invalid tag timezone2
ok 23 - detect invalid tag timezone3
ok 24 - detect invalid header entry
ok 25 - create valid tag
ok 26 - check mytag
# passed all 26 test(s)
1..26
*** t3900-i18n-commit.sh ***
ok 1 - setup
ok 2 - no encoding header for base case
ok 3 - UTF-16 refused because of NULs
ok 4 - UTF-8 invalid characters refused
ok 5 - UTF-8 overlong sequences rejected
ok 6 - UTF-8 non-characters refused
ok 7 - UTF-8 non-characters refused
ok 8 - ISO8859-1 setup
ok 9 - eucJP setup
ok 10 - ISO-2022-JP setup
ok 11 - check encoding header for ISO8859-1
ok 12 - check encoding header for eucJP
ok 13 - check encoding header for ISO-2022-JP
ok 14 - config to remove customization
ok 15 - ISO8859-1 should be shown in UTF-8 now
ok 16 - eucJP should be shown in UTF-8 now
ok 17 - ISO-2022-JP should be shown in UTF-8 now
ok 18 - config to add customization
ok 19 - ISO8859-1 should be shown in itself now
ok 20 - eucJP should be shown in itself now
ok 21 - ISO-2022-JP should be shown in itself now
ok 22 - config to tweak customization
ok 23 - ISO8859-1 should be shown in UTF-8 now
ok 24 - eucJP should be shown in UTF-8 now
ok 25 - ISO-2022-JP should be shown in UTF-8 now
ok 26 - eucJP should be shown in eucJP now
ok 27 - ISO-2022-JP should be shown in eucJP now
ok 28 - eucJP should be shown in ISO-2022-JP now
ok 29 - ISO-2022-JP should be shown in ISO-2022-JP now
ok 30 - No conversion with ISO8859-1
ok 31 - No conversion with eucJP
ok 32 - No conversion with ISO-2022-JP
ok 33 - commit --fixup with eucJP encoding
not ok 34 - commit --squash with ISO-2022-JP encoding
#	
#			git config i18n.commitencoding $H &&
#			git checkout -b $H-$flag C0 &&
#			echo $H >>F &&
#			git commit -a -F "$TEST_DIRECTORY"/t3900/$H.txt &&
#			test_tick &&
#			echo intermediate stuff >>G &&
#			git add G &&
#			git commit -a -m "intermediate commit" &&
#			test_tick &&
#			echo $H $flag >>F &&
#			git commit -a --$flag HEAD~1 &&
#			E=$(git cat-file commit ISO-2022-JP-squash |
#				sed -ne "s/^encoding //p") &&
#			test "z$E" = "z$H" &&
#			git config --unset-all i18n.commitencoding &&
#			git rebase --autosquash -i HEAD^^^ &&
#			git log --oneline >actual &&
#			test_line_count = 3 actual
#		
# failed 1 among 34 test(s)
1..34
*** t3901-i18n-patch.sh ***
ok 1 - setup
ok 2 - format-patch output (ISO-8859-1)
ok 3 - format-patch output (UTF-8)
ok 4 - rebase (U/U)
ok 5 - rebase (U/L)
ok 6 - rebase (L/L)
ok 7 - rebase (L/U)
ok 8 - cherry-pick(U/U)
ok 9 - cherry-pick(L/L)
ok 10 - cherry-pick(U/L)
ok 11 - cherry-pick(L/U)
ok 12 - rebase --merge (U/U)
ok 13 - rebase --merge (U/L)
ok 14 - rebase --merge (L/L)
ok 15 - rebase --merge (L/U)
ok 16 - am (U/U)
ok 17 - am (L/L)
ok 18 - am (U/L)
ok 19 - am --no-utf8 (U/L)
ok 20 - am (L/U)
# passed all 20 test(s)
1..20
*** t3902-quoted.sh ***
ok 1 - setup
ok 2 - setup expected files
ok 3 - check fully quoted output from ls-files
ok 4 - check fully quoted output from diff-files
ok 5 - check fully quoted output from diff-index
ok 6 - check fully quoted output from diff-tree
ok 7 - check fully quoted output from ls-tree
ok 8 - setting core.quotepath
ok 9 - check fully quoted output from ls-files
ok 10 - check fully quoted output from diff-files
ok 11 - check fully quoted output from diff-index
ok 12 - check fully quoted output from diff-tree
ok 13 - check fully quoted output from ls-tree
# passed all 13 test(s)
1..13
*** t3903-stash.sh ***
ok 1 - stash some dirty working directory
ok 2 - parents of stash
ok 3 - applying bogus stash does nothing
ok 4 - apply does not need clean working directory
ok 5 - apply does not clobber working directory changes
ok 6 - apply stashed changes
ok 7 - apply stashed changes (including index)
ok 8 - unstashing in a subdirectory
ok 9 - stash drop complains of extra options
ok 10 - drop top stash
ok 11 - drop middle stash
ok 12 - drop middle stash by index
ok 13 - stash pop
ok 14 - stash branch
ok 15 - apply -q is quiet
ok 16 - save -q is quiet
ok 17 - pop -q is quiet
ok 18 - pop -q --index works and is quiet
ok 19 - drop -q is quiet
ok 20 - stash -k
ok 21 - stash --no-keep-index
ok 22 - stash --invalid-option
ok 23 - stash an added file
ok 24 - stash rm then recreate
ok 25 - stash rm and ignore
ok 26 - stash rm and ignore (stage .gitignore)
ok 27 - stash file to symlink
ok 28 - stash file to symlink (stage rm)
ok 29 - stash file to symlink (full stage)
ok 30 - stash symlink to file
ok 31 - this must have re-created the symlink
ok 32 - unstash must re-create the file
ok 33 - stash symlink to file (stage rm)
ok 34 - this must have re-created the symlink
ok 35 - unstash must re-create the file
ok 36 - stash symlink to file (full stage)
ok 37 - this must have re-created the symlink
ok 38 - unstash must re-create the file
not ok 39 - stash directory to file # TODO known breakage
not ok 40 - stash file to directory # TODO known breakage
ok 41 - stash create - no changes
ok 42 - stash branch - no stashes on stack, stash-like argument
ok 43 - stash branch - stashes on stack, stash-like argument
ok 44 - stash show format defaults to --stat
ok 45 - stash show - stashes on stack, stash-like argument
ok 46 - stash show -p - stashes on stack, stash-like argument
ok 47 - stash show - no stashes on stack, stash-like argument
ok 48 - stash show -p - no stashes on stack, stash-like argument
ok 49 - stash drop - fail early if specified stash is not a stash reference
ok 50 - stash pop - fail early if specified stash is not a stash reference
ok 51 - ref with non-existent reflog
ok 52 - invalid ref of the form stash@{n}, n >= N
ok 53 - invalid ref of the form "n", n >= N
ok 54 - stash branch should not drop the stash if the branch exists
ok 55 - stash branch should not drop the stash if the apply fails
ok 56 - stash apply shows status same as git status (relative to current directory)
ok 57 - stash where working directory contains "HEAD" file
ok 58 - store called with invalid commit
ok 59 - store updates stash ref and reflog
ok 60 - handle stash specification with spaces
ok 61 - setup stash with index and worktree changes
ok 62 - stash list implies --first-parent -m
ok 63 - stash list --cc shows combined diff
ok 64 - stash is not confused by partial renames
ok 65 - push -m shows right message
ok 66 - push -m also works without space
ok 67 - store -m foo shows right message
ok 68 - store -mfoo shows right message
ok 69 - store --message=foo shows right message
ok 70 - store --message foo shows right message
ok 71 - push -mfoo uses right message
ok 72 - push --message foo is synonym for -mfoo
ok 73 - push --message=foo is synonym for -mfoo
ok 74 - push -m shows right message
ok 75 - create stores correct message
ok 76 - create with multiple arguments for the message
ok 77 - create in a detached state
ok 78 - stash -- <pathspec> stashes and restores the file
ok 79 - stash -- <pathspec> stashes in subdirectory
ok 80 - stash with multiple pathspec arguments
ok 81 - stash with file including $IFS character
ok 82 - stash with pathspec matching multiple paths
ok 83 - stash push -p with pathspec shows no changes only once
ok 84 - stash push with pathspec shows no changes when there are none
ok 85 - stash push with pathspec not in the repository errors out
ok 86 - untracked files are left in place when -u is not given
ok 87 - stash without verb with pathspec
ok 88 - stash -k -- <pathspec> leaves unstaged files intact
ok 89 - stash -- <subdir> leaves untracked files in subdir intact
ok 90 - stash -- <subdir> works with binary files
# still have 2 known breakage(s)
# passed all remaining 88 test(s)
1..90
*** t3904-stash-patch.sh ***
ok 1 - setup
ok 2 - saying "n" does nothing
ok 3 - git stash -p
ok 4 - git stash -p --no-keep-index
ok 5 - git stash --no-keep-index -p
ok 6 - stash -p --no-keep-index -- <pathspec> does not unstage other files
ok 7 - none of this moved HEAD
not ok 8 - stash -p with split hunk # TODO known breakage
# still have 1 known breakage(s)
# passed all remaining 7 test(s)
1..8
*** t3905-stash-include-untracked.sh ***
ok 1 - stash save --include-untracked some dirty working directory
ok 2 - stash save --include-untracked cleaned the untracked files
ok 3 - stash save --include-untracked stashed the untracked files
ok 4 - stash save --patch --include-untracked fails
ok 5 - stash save --patch --all fails
ok 6 - stash pop after save --include-untracked leaves files untracked again
ok 7 - stash save -u dirty index
ok 8 - stash save --include-untracked dirty index got stashed
ok 9 - stash save --include-untracked -q is quiet
ok 10 - stash save --include-untracked removed files
ok 11 - stash save --include-untracked removed files got stashed
ok 12 - stash save --include-untracked respects .gitignore
ok 13 - stash save -u can stash with only untracked files different
ok 14 - stash save --all does not respect .gitignore
ok 15 - stash save --all is stash poppable
ok 16 - stash push --include-untracked with pathspec
ok 17 - stash push with $IFS character
ok 18 - stash previously ignored file
ok 19 - stash -u -- <untracked> doesnt print error
ok 20 - stash -u -- <untracked> leaves rest of working tree in place
ok 21 - stash -u -- <tracked> <untracked> clears changes in both
ok 22 - stash --all -- <ignored> stashes ignored file
ok 23 - stash --all -- <tracked> <ignored> clears changes in both
ok 24 - stash -u -- <ignored> leaves ignored file alone
ok 25 - stash -u -- <non-existant> shows no changes when there are none
# passed all 25 test(s)
1..25
*** t3906-stash-submodule.sh ***
not ok 1 - git_stash: added submodule creates empty directory # TODO known breakage
not ok 2 - git_stash: added submodule leaves existing empty directory alone # TODO known breakage
not ok 3 - git_stash: replace tracked file with submodule creates empty directory # TODO known breakage
not ok 4 - git_stash: replace directory with submodule # TODO known breakage
not ok 5 - git_stash: removed submodule leaves submodule directory and its contents in place # TODO known breakage
not ok 6 - git_stash: removed submodule leaves submodule containing a .git directory alone # TODO known breakage
ok 7 - git_stash: replace submodule with a directory must fail
ok 8 - git_stash: replace submodule containing a .git directory with a directory must fail
not ok 9 - git_stash: replace submodule with a file must fail # TODO known breakage
not ok 10 - git_stash: replace submodule containing a .git directory with a file must fail # TODO known breakage
not ok 11 - git_stash: modified submodule does not update submodule work tree # TODO known breakage
not ok 12 - git_stash: modified submodule does not update submodule work tree to invalid commit # TODO known breakage
not ok 13 - git_stash: modified submodule does not update submodule work tree from invalid commit # TODO known breakage
ok 14 - git_stash: added submodule doesn't remove untracked unignored file with same name
# still have 11 known breakage(s)
# passed all remaining 3 test(s)
1..14
*** t3910-mac-os-precompose.sh ***
1..0 # SKIP filesystem does not corrupt utf-8
*** t4000-diff-format.sh ***
ok 1 - update-index --add two files with and without +x.
ok 2 - git diff-files -p after editing work tree.
ok 3 - validate git diff-files -p output.
ok 4 - git diff-files -s after editing work tree
ok 5 - git diff-files --no-patch as synonym for -s
ok 6 - git diff-files --no-patch --patch shows the patch
ok 7 - git diff-files --no-patch --patch-with-raw shows the patch and raw data
ok 8 - git diff-files --patch --no-patch does not show the patch
# passed all 8 test(s)
1..8
*** t4001-diff-rename.sh ***
ok 1 - setup
ok 2 - update-index --add a file.
ok 3 - write that tree.
ok 4 - renamed and edited the file.
ok 5 - git diff-index -p -M after rename and editing.
ok 6 - validate the output.
ok 7 - test diff.renames=true
ok 8 - test diff.renames=false
ok 9 - test diff.renames unset
ok 10 - favour same basenames over different ones
ok 11 - test diff.renames=true for git status
ok 12 - test diff.renames=false for git status
ok 13 - favour same basenames even with minor differences
ok 14 - two files with same basename and same content
ok 15 - setup for many rename source candidates
ok 16 - rename pretty print with nothing in common
ok 17 - rename pretty print with common prefix
ok 18 - rename pretty print with common suffix
ok 19 - rename pretty print with common prefix and suffix
ok 20 - rename pretty print common prefix and suffix overlap
ok 21 - diff-tree -l0 defaults to a big rename limit, not zero
# passed all 21 test(s)
1..21
*** t4002-diff-basic.sh ***
ok 1 - adding test file NN and Z/NN
ok 2 - adding test file ND and Z/ND
ok 3 - adding test file NM and Z/NM
ok 4 - adding test file DN and Z/DN
ok 5 - adding test file DD and Z/DD
ok 6 - adding test file DM and Z/DM
ok 7 - adding test file MN and Z/MN
ok 8 - adding test file MD and Z/MD
ok 9 - adding test file MM and Z/MM
ok 10 - adding test file SS
ok 11 - adding test file TT
ok 12 - prepare initial tree
ok 13 - change in branch A (removal)
ok 14 - change in branch A (modification)
ok 15 - change in branch A (modification)
ok 16 - change in branch A (modification)
ok 17 - change in branch A (modification)
ok 18 - change in branch A (modification)
ok 19 - change in branch A (modification)
ok 20 - change in branch A (addition)
ok 21 - change in branch A (addition)
ok 22 - change in branch A (addition)
ok 23 - change in branch A (addition)
ok 24 - change in branch A (addition)
ok 25 - change in branch A (edit)
ok 26 - change in branch A (change file to directory)
ok 27 - recording branch A tree
ok 28 - reading original tree and checking out
ok 29 - change in branch B (removal)
ok 30 - change in branch B (modification)
ok 31 - change in branch B (modification)
ok 32 - change in branch B (modification)
ok 33 - change in branch B (modification)
ok 34 - change in branch B (modification)
ok 35 - change in branch B (modification)
ok 36 - change in branch B (addition)
ok 37 - change in branch B (addition)
ok 38 - change in branch B (addition)
ok 39 - change in branch B (addition)
ok 40 - change in branch B (addition and modification)
ok 41 - change in branch B (modification)
ok 42 - change in branch B (addition of a file to conflict with directory)
ok 43 - recording branch B tree
ok 44 - keep contents of 3 trees for easy access
ok 45 - diff-tree of known trees.
ok 46 - diff-tree of known trees.
ok 47 - diff-tree of known trees.
ok 48 - diff-tree of known trees.
ok 49 - diff-tree of known trees.
ok 50 - diff-tree of known trees.
ok 51 - diff-tree --stdin of known trees.
ok 52 - diff-tree --stdin of known trees.
ok 53 - diff-cache O with A in cache
ok 54 - diff-cache O with B in cache
ok 55 - diff-cache A with B in cache
ok 56 - diff-files with O in cache and A checked out
ok 57 - diff-files with O in cache and B checked out
ok 58 - diff-files with A in cache and B checked out
ok 59 - diff-tree O A == diff-tree -R A O
ok 60 - diff-tree -r O A == diff-tree -r -R A O
ok 61 - diff-tree B A == diff-tree -R A B
ok 62 - diff-tree -r B A == diff-tree -r -R A B
ok 63 - diff can read from stdin
# passed all 63 test(s)
1..63
*** t4003-diff-rename-1.sh ***
ok 1 - prepare reference tree
ok 2 - prepare work tree
ok 3 - validate output from rename/copy detection (#1)
ok 4 - prepare work tree again
ok 5 - validate output from rename/copy detection (#2)
ok 6 - prepare work tree once again
ok 7 - validate output from rename/copy detection (#3)
# passed all 7 test(s)
1..7
*** t4004-diff-rename-symlink.sh ***
ok 1 - prepare reference tree
ok 2 - prepare work tree
ok 3 - setup diff output
ok 4 - validate diff output
# passed all 4 test(s)
1..4
*** t4005-diff-rename-2.sh ***
ok 1 - setup reference tree
ok 2 - validate output from rename/copy detection (#1)
ok 3 - validate output from rename/copy detection (#2)
ok 4 - validate output from rename/copy detection (#3)
# passed all 4 test(s)
1..4
*** t4006-diff-mode.sh ***
ok 1 - setup
ok 2 - chmod
ok 3 - prepare binary file
# passed all 3 test(s)
1..3
*** t4007-rename-3.sh ***
ok 1 - prepare reference tree
ok 2 - prepare work tree
ok 3 - copy detection
ok 4 - copy detection, cached
ok 5 - copy, limited to a subtree
ok 6 - tweak work tree
ok 7 - rename detection
ok 8 - rename, limited to a subtree
# passed all 8 test(s)
1..8
*** t4008-diff-break-rewrite.sh ***
ok 1 - setup
ok 2 - change file1 with copy-edit of file0 and remove file0
ok 3 - run diff with -B (#1)
ok 4 - run diff with -B and -M (#2)
ok 5 - swap file0 and file1
ok 6 - run diff with -B (#3)
ok 7 - run diff with -B and -M (#4)
ok 8 - make file0 into something completely different
ok 9 - run diff with -B (#5)
ok 10 - run diff with -B -M (#6)
ok 11 - run diff with -M (#7)
ok 12 - file1 edited to look like file0 and file0 rename-edited to file2
ok 13 - run diff with -B (#8)
ok 14 - run diff with -B -C (#9)
# passed all 14 test(s)
1..14
*** t4009-diff-rename-4.sh ***
ok 1 - prepare reference tree
ok 2 - prepare work tree
ok 3 - validate output from rename/copy detection (#1)
ok 4 - prepare work tree again
ok 5 - validate output from rename/copy detection (#2)
ok 6 - prepare work tree once again
ok 7 - validate output from rename/copy detection (#3)
# passed all 7 test(s)
1..7
*** t4010-diff-pathspec.sh ***
ok 1 - setup
ok 2 - limit to path should show nothing
ok 3 - limit to path1 should show path1/file1
ok 4 - limit to path1/ should show path1/file1
ok 5 - "*file1" should show path1/file1
ok 6 - limit to file0 should show file0
ok 7 - limit to file0/ should emit nothing.
ok 8 - diff-tree pathspec
ok 9 - diff-tree with wildcard shows dir also matches
ok 10 - diff-tree -r with wildcard
ok 11 - diff-tree with wildcard shows dir also matches
ok 12 - diff-tree -r with wildcard from beginning
ok 13 - diff-tree -r with wildcard
ok 14 - setup submodules
ok 15 - diff-tree ignores trailing slash on submodule path
ok 16 - diff multiple wildcard pathspecs
ok 17 - diff-cache ignores trailing slash on submodule path
# passed all 17 test(s)
1..17
*** t4011-diff-symlink.sh ***
ok 1 - diff new symlink and file
ok 2 - diff unchanged symlink and file
ok 3 - diff removed symlink and file
ok 4 - diff identical, but newly created symlink and file
ok 5 - diff different symlink and file
ok 6 - diff symlinks with non-existing targets
ok 7 - setup symlinks with attributes
ok 8 - symlinks do not respect userdiff config by path
# passed all 8 test(s)
1..8
*** t4012-diff-binary.sh ***
ok 1 - prepare repository
ok 2 - apply --stat output for binary file change
ok 3 - diff --shortstat output for binary file change
ok 4 - diff --shortstat output for binary file change only
ok 5 - apply --numstat notices binary file change
ok 6 - apply --numstat understands diff --binary format
ok 7 - apply detecting corrupt patch correctly
ok 8 - apply detecting corrupt patch correctly
ok 9 - initial commit
ok 10 - diff-index with --binary
ok 11 - apply binary patch
ok 12 - diff --no-index with binary creation
ok 13 - diff --stat with binary files and big change count
# passed all 13 test(s)
1..13
*** t4013-diff-various.sh ***
ok 1 - setup
ok 2 - git diff-tree initial # magic is (not used)
ok 3 - git diff-tree -r initial # magic is (not used)
ok 4 - git diff-tree -r --abbrev initial # magic is (not used)
ok 5 - git diff-tree -r --abbrev=4 initial # magic is (not used)
ok 6 - git diff-tree --root initial # magic is (not used)
ok 7 - git diff-tree --root --abbrev initial # magic is (not used)
ok 8 - git diff-tree --root --abbrev initial # magic is noellipses
ok 9 - git diff-tree --root -r initial # magic is (not used)
ok 10 - git diff-tree --root -r --abbrev initial # magic is (not used)
ok 11 - git diff-tree --root -r --abbrev initial # magic is noellipses
ok 12 - git diff-tree --root -r --abbrev=4 initial # magic is (not used)
ok 13 - git diff-tree --root -r --abbrev=4 initial # magic is noellipses
ok 14 - git diff-tree -p initial # magic is (not used)
ok 15 - git diff-tree --root -p initial # magic is (not used)
ok 16 - git diff-tree --patch-with-stat initial # magic is (not used)
ok 17 - git diff-tree --root --patch-with-stat initial # magic is (not used)
ok 18 - git diff-tree --patch-with-raw initial # magic is (not used)
ok 19 - git diff-tree --root --patch-with-raw initial # magic is (not used)
ok 20 - git diff-tree --pretty initial # magic is (not used)
ok 21 - git diff-tree --pretty --root initial # magic is (not used)
ok 22 - git diff-tree --pretty -p initial # magic is (not used)
ok 23 - git diff-tree --pretty --stat initial # magic is (not used)
ok 24 - git diff-tree --pretty --summary initial # magic is (not used)
ok 25 - git diff-tree --pretty --stat --summary initial # magic is (not used)
ok 26 - git diff-tree --pretty --root -p initial # magic is (not used)
ok 27 - git diff-tree --pretty --root --stat initial # magic is (not used)
ok 28 - git diff-tree --pretty --root --summary initial # magic is (not used)
ok 29 - git diff-tree --pretty --root --summary -r initial # magic is (not used)
ok 30 - git diff-tree --pretty --root --stat --summary initial # magic is (not used)
ok 31 - git diff-tree --pretty --patch-with-stat initial # magic is (not used)
ok 32 - git diff-tree --pretty --root --patch-with-stat initial # magic is (not used)
ok 33 - git diff-tree --pretty --patch-with-raw initial # magic is (not used)
ok 34 - git diff-tree --pretty --root --patch-with-raw initial # magic is (not used)
ok 35 - git diff-tree --pretty=oneline initial # magic is (not used)
ok 36 - git diff-tree --pretty=oneline --root initial # magic is (not used)
ok 37 - git diff-tree --pretty=oneline -p initial # magic is (not used)
ok 38 - git diff-tree --pretty=oneline --root -p initial # magic is (not used)
ok 39 - git diff-tree --pretty=oneline --patch-with-stat initial # magic is (not used)
ok 40 - git diff-tree --pretty=oneline --root --patch-with-stat initial # magic is (not used)
ok 41 - git diff-tree --pretty=oneline --patch-with-raw initial # magic is (not used)
ok 42 - git diff-tree --pretty=oneline --root --patch-with-raw initial # magic is (not used)
ok 43 - git diff-tree --pretty side # magic is (not used)
ok 44 - git diff-tree --pretty -p side # magic is (not used)
ok 45 - git diff-tree --pretty --patch-with-stat side # magic is (not used)
ok 46 - git diff-tree initial mode # magic is (not used)
ok 47 - git diff-tree --stat initial mode # magic is (not used)
ok 48 - git diff-tree --summary initial mode # magic is (not used)
ok 49 - git diff-tree master # magic is (not used)
ok 50 - git diff-tree -p master # magic is (not used)
ok 51 - git diff-tree -p -m master # magic is (not used)
ok 52 - git diff-tree -c master # magic is (not used)
ok 53 - git diff-tree -c --abbrev master # magic is (not used)
ok 54 - git diff-tree -c --abbrev master # magic is noellipses
ok 55 - git diff-tree --cc master # magic is (not used)
ok 56 - git diff-tree -c --stat master # magic is (not used)
ok 57 - git diff-tree --cc --stat master # magic is (not used)
ok 58 - git diff-tree -c --stat --summary master # magic is (not used)
ok 59 - git diff-tree --cc --stat --summary master # magic is (not used)
ok 60 - git diff-tree -c --stat --summary side # magic is (not used)
ok 61 - git diff-tree --cc --stat --summary side # magic is (not used)
ok 62 - git diff-tree --cc --patch-with-stat master # magic is (not used)
ok 63 - git diff-tree --cc --patch-with-stat --summary master # magic is (not used)
ok 64 - git diff-tree --cc --patch-with-stat --summary side # magic is (not used)
ok 65 - git log master # magic is (not used)
ok 66 - git log -p master # magic is (not used)
ok 67 - git log --root master # magic is (not used)
ok 68 - git log --root -p master # magic is (not used)
ok 69 - git log --patch-with-stat master # magic is (not used)
ok 70 - git log --root --patch-with-stat master # magic is (not used)
ok 71 - git log --root --patch-with-stat --summary master # magic is (not used)
ok 72 - git log --root -c --patch-with-stat --summary master # magic is (not used)
ok 73 - git log --root --cc --patch-with-stat --summary master # magic is (not used)
ok 74 - git log -p --first-parent master # magic is (not used)
ok 75 - git log -m -p --first-parent master # magic is (not used)
ok 76 - git log -m -p master # magic is (not used)
ok 77 - git log -SF master # magic is (not used)
ok 78 - git log -S F master # magic is (not used)
ok 79 - git log -SF -p master # magic is (not used)
ok 80 - git log -SF master --max-count=0 # magic is (not used)
ok 81 - git log -SF master --max-count=1 # magic is (not used)
ok 82 - git log -SF master --max-count=2 # magic is (not used)
ok 83 - git log -GF master # magic is (not used)
ok 84 - git log -GF -p master # magic is (not used)
ok 85 - git log -GF -p --pickaxe-all master # magic is (not used)
ok 86 - git log --decorate --all # magic is (not used)
ok 87 - git log --decorate=full --all # magic is (not used)
ok 88 - git rev-list --parents HEAD # magic is (not used)
ok 89 - git rev-list --children HEAD # magic is (not used)
ok 90 - git whatchanged master # magic is (not used)
ok 91 - git whatchanged master # magic is noellipses
ok 92 - git whatchanged -p master # magic is (not used)
ok 93 - git whatchanged --root master # magic is (not used)
ok 94 - git whatchanged --root master # magic is noellipses
ok 95 - git whatchanged --root -p master # magic is (not used)
ok 96 - git whatchanged --patch-with-stat master # magic is (not used)
ok 97 - git whatchanged --root --patch-with-stat master # magic is (not used)
ok 98 - git whatchanged --root --patch-with-stat --summary master # magic is (not used)
ok 99 - git whatchanged --root -c --patch-with-stat --summary master # magic is (not used)
ok 100 - git whatchanged --root --cc --patch-with-stat --summary master # magic is (not used)
ok 101 - git whatchanged -SF master # magic is (not used)
ok 102 - git whatchanged -SF master # magic is noellipses
ok 103 - git whatchanged -SF -p master # magic is (not used)
ok 104 - git log --patch-with-stat master -- dir/ # magic is (not used)
ok 105 - git whatchanged --patch-with-stat master -- dir/ # magic is (not used)
ok 106 - git log --patch-with-stat --summary master -- dir/ # magic is (not used)
ok 107 - git whatchanged --patch-with-stat --summary master -- dir/ # magic is (not used)
ok 108 - git show initial # magic is (not used)
ok 109 - git show --root initial # magic is (not used)
ok 110 - git show side # magic is (not used)
ok 111 - git show master # magic is (not used)
ok 112 - git show -c master # magic is (not used)
ok 113 - git show -m master # magic is (not used)
ok 114 - git show --first-parent master # magic is (not used)
ok 115 - git show --stat side # magic is (not used)
ok 116 - git show --stat --summary side # magic is (not used)
ok 117 - git show --patch-with-stat side # magic is (not used)
ok 118 - git show --patch-with-raw side # magic is (not used)
ok 119 - git show --patch-with-raw side # magic is noellipses
ok 120 - git show --patch-with-stat --summary side # magic is (not used)
ok 121 - git format-patch --stdout initial..side # magic is (not used)
ok 122 - git format-patch --stdout initial..master^ # magic is (not used)
ok 123 - git format-patch --stdout initial..master # magic is (not used)
ok 124 - git format-patch --stdout --no-numbered initial..master # magic is (not used)
ok 125 - git format-patch --stdout --numbered initial..master # magic is (not used)
ok 126 - git format-patch --attach --stdout initial..side # magic is (not used)
ok 127 - git format-patch --attach --stdout --suffix=.diff initial..side # magic is (not used)
ok 128 - git format-patch --attach --stdout initial..master^ # magic is (not used)
ok 129 - git format-patch --attach --stdout initial..master # magic is (not used)
ok 130 - git format-patch --inline --stdout initial..side # magic is (not used)
ok 131 - git format-patch --inline --stdout initial..master^ # magic is (not used)
ok 132 - git format-patch --inline --stdout --numbered-files initial..master # magic is (not used)
ok 133 - git format-patch --inline --stdout initial..master # magic is (not used)
ok 134 - git format-patch --inline --stdout --subject-prefix=TESTCASE initial..master # magic is (not used)
ok 135 - git config format.subjectprefix DIFFERENT_PREFIX # magic is (not used)
ok 136 - git format-patch --inline --stdout initial..master^^ # magic is (not used)
ok 137 - git format-patch --stdout --cover-letter -n initial..master^ # magic is (not used)
ok 138 - git diff --abbrev initial..side # magic is (not used)
ok 139 - git diff -r initial..side # magic is (not used)
ok 140 - git diff --stat initial..side # magic is (not used)
ok 141 - git diff -r --stat initial..side # magic is (not used)
ok 142 - git diff initial..side # magic is (not used)
ok 143 - git diff --patch-with-stat initial..side # magic is (not used)
ok 144 - git diff --patch-with-raw initial..side # magic is (not used)
ok 145 - git diff --patch-with-raw initial..side # magic is noellipses
ok 146 - git diff --patch-with-stat -r initial..side # magic is (not used)
ok 147 - git diff --patch-with-raw -r initial..side # magic is (not used)
ok 148 - git diff --patch-with-raw -r initial..side # magic is noellipses
ok 149 - git diff --name-status dir2 dir # magic is (not used)
ok 150 - git diff --no-index --name-status dir2 dir # magic is (not used)
ok 151 - git diff --no-index --name-status -- dir2 dir # magic is (not used)
ok 152 - git diff --no-index dir dir3 # magic is (not used)
ok 153 - git diff master master^ side # magic is (not used)
ok 154 - git diff --line-prefix=abc master master^ side # magic is (not used)
ok 155 - git diff --dirstat master~1 master~2 # magic is (not used)
ok 156 - git diff --dirstat initial rearrange # magic is (not used)
ok 157 - git diff --dirstat-by-file initial rearrange # magic is (not used)
ok 158 - git diff --raw initial # magic is (not used)
ok 159 - git diff --raw initial # magic is noellipses
ok 160 - git diff --raw --abbrev=4 initial # magic is (not used)
ok 161 - git diff --raw --abbrev=4 initial # magic is noellipses
ok 162 - git diff --raw --no-abbrev initial # magic is (not used)
ok 163 - git diff --no-index --raw dir2 dir # magic is (not used)
ok 164 - git diff --no-index --raw dir2 dir # magic is noellipses
ok 165 - git diff --no-index --raw --abbrev=4 dir2 dir # magic is (not used)
ok 166 - git diff --no-index --raw --abbrev=4 dir2 dir # magic is noellipses
ok 167 - git diff --no-index --raw --no-abbrev dir2 dir # magic is (not used)
ok 168 - git diff-tree --pretty --root --stat --compact-summary initial # magic is (not used)
ok 169 - git diff-tree --pretty -R --root --stat --compact-summary initial # magic is (not used)
ok 170 - git diff-tree --stat --compact-summary initial mode # magic is (not used)
ok 171 - git diff-tree -R --stat --compact-summary initial mode # magic is (not used)
ok 172 - log -S requires an argument
ok 173 - diff --cached on unborn branch
ok 174 - diff --cached -- file on unborn branch
ok 175 - diff --line-prefix with spaces
ok 176 - diff-tree --stdin with log formatting
# passed all 176 test(s)
1..176
*** t4014-format-patch.sh ***
ok 1 - setup
ok 2 - format-patch --ignore-if-in-upstream
ok 3 - format-patch --ignore-if-in-upstream
ok 4 - format-patch --ignore-if-in-upstream handles tags
ok 5 - format-patch doesn't consider merge commits
ok 6 - format-patch result applies
ok 7 - format-patch --ignore-if-in-upstream result applies
ok 8 - commit did not screw up the log message
ok 9 - format-patch did not screw up the log message
ok 10 - replay did not screw up the log message
ok 11 - extra headers
ok 12 - extra headers without newlines
ok 13 - extra headers with multiple To:s
ok 14 - additional command line cc (ascii)
not ok 15 - additional command line cc (rfc822) # TODO known breakage
ok 16 - command line headers
ok 17 - configuration headers and command line headers
ok 18 - command line To: header (ascii)
not ok 19 - command line To: header (rfc822) # TODO known breakage
not ok 20 - command line To: header (rfc2047) # TODO known breakage
ok 21 - configuration To: header (ascii)
not ok 22 - configuration To: header (rfc822) # TODO known breakage
not ok 23 - configuration To: header (rfc2047) # TODO known breakage
ok 24 - format.from=false
ok 25 - format.from=true
ok 26 - format.from with address
ok 27 - --no-from overrides format.from
ok 28 - --from overrides format.from
ok 29 - --no-to overrides config.to
ok 30 - --no-to and --to replaces config.to
ok 31 - --no-cc overrides config.cc
ok 32 - --no-add-header overrides config.headers
ok 33 - multiple files
ok 34 - reroll count
ok 35 - reroll count (-v)
ok 36 - no threading
ok 37 - thread
ok 38 - thread in-reply-to
ok 39 - thread cover-letter
ok 40 - thread cover-letter in-reply-to
ok 41 - thread explicit shallow
ok 42 - thread deep
ok 43 - thread deep in-reply-to
ok 44 - thread deep cover-letter
ok 45 - thread deep cover-letter in-reply-to
ok 46 - thread via config
ok 47 - thread deep via config
ok 48 - thread config + override
ok 49 - thread config + --no-thread
ok 50 - excessive subject
ok 51 - cover-letter inherits diff options
ok 52 - shortlog of cover-letter wraps overly-long onelines
ok 53 - format-patch respects -U
ok 54 - format-patch -p suppresses stat
ok 55 - format-patch from a subdirectory (1)
ok 56 - format-patch from a subdirectory (2)
ok 57 - format-patch from a subdirectory (3)
ok 58 - format-patch --in-reply-to
ok 59 - format-patch --signoff
ok 60 - format-patch --notes --signoff
ok 61 - options no longer allowed for format-patch
ok 62 - format-patch --numstat should produce a patch
ok 63 - format-patch -- <path>
ok 64 - format-patch --ignore-if-in-upstream HEAD
ok 65 - format-patch default signature
ok 66 - format-patch --signature
ok 67 - format-patch with format.signature config
ok 68 - format-patch --signature overrides format.signature
ok 69 - format-patch --no-signature ignores format.signature
ok 70 - format-patch --signature --cover-letter
ok 71 - format.signature="" suppresses signatures
ok 72 - format-patch --no-signature suppresses signatures
ok 73 - format-patch --signature="" suppresses signatures
ok 74 - prepare mail-signature input
ok 75 - --signature-file=file works
ok 76 - format.signaturefile works
ok 77 - --no-signature suppresses format.signaturefile 
ok 78 - --signature-file overrides format.signaturefile
ok 79 - --signature overrides format.signaturefile
ok 80 # skip format-patch --stdout paginates (missing TTY)
ok 81 # skip format-patch --stdout pagination can be disabled (missing TTY)
ok 82 - format-patch handles multi-line subjects
ok 83 - format-patch handles multi-line encoded subjects
ok 84 - format-patch wraps extremely long subject (ascii)
ok 85 - format-patch wraps extremely long subject (rfc2047)
ok 86 - format-patch quotes dot in from-headers
ok 87 - format-patch quotes double-quote in from-headers
ok 88 - format-patch uses rfc2047-encoded from-headers when necessary
ok 89 - rfc2047-encoded from-headers leave no rfc822 specials
ok 90 - format-patch wraps moderately long from-header (ascii)
ok 91 - format-patch wraps extremely long from-header (ascii)
ok 92 - format-patch wraps extremely long from-header (rfc822)
ok 93 - format-patch wraps extremely long from-header (rfc2047)
ok 94 - subject lines do not have 822 atom-quoting
ok 95 - subject prefixes have space prepended
ok 96 - empty subject prefix does not have extra space
ok 97 - --rfc
ok 98 - --from=ident notices bogus ident
ok 99 - --from=ident replaces author
ok 100 - --from uses committer ident
ok 101 - --from omits redundant in-body header
ok 102 - in-body headers trigger content encoding
ok 103 - signoff: commit with no body
ok 104 - signoff: commit with only subject
ok 105 - signoff: commit with only subject that does not end with NL
ok 106 - signoff: no existing signoffs
ok 107 - signoff: no existing signoffs and no trailing NL
ok 108 - signoff: some random signoff
ok 109 - signoff: misc conforming footer elements
ok 110 - signoff: some random signoff-alike
ok 111 - signoff: not really a signoff
ok 112 - signoff: not really a signoff (2)
ok 113 - signoff: valid S-o-b paragraph in the middle
ok 114 - signoff: the same signoff at the end
ok 115 - signoff: the same signoff at the end, no trailing NL
ok 116 - signoff: the same signoff NOT at the end
ok 117 - signoff: tolerate garbage in conforming footer
ok 118 - signoff: respect trailer config
ok 119 - signoff: footer begins with non-signoff without @ sign
ok 120 - format patch ignores color.ui
ok 121 - cover letter using branch description (1)
ok 122 - cover letter using branch description (2)
ok 123 - cover letter using branch description (3)
ok 124 - cover letter using branch description (4)
ok 125 - cover letter using branch description (5)
ok 126 - cover letter using branch description (6)
ok 127 - cover letter with nothing
ok 128 - cover letter auto
ok 129 - cover letter auto user override
ok 130 - format-patch --zero-commit
ok 131 - From line has expected format
ok 132 - format-patch format.outputDirectory option
ok 133 - format-patch -o overrides format.outputDirectory
ok 134 - format-patch --base
ok 135 - format-patch --base errors out when base commit is in revision list
ok 136 - format-patch --base errors out when base commit is not ancestor of revision list
ok 137 - format-patch --base=auto
ok 138 - format-patch errors out when history involves criss-cross
ok 139 - format-patch format.useAutoBaseoption
ok 140 - format-patch --base overrides format.useAutoBase
ok 141 - format-patch --base with --attach
ok 142 - format-patch --attach cover-letter only is non-multipart
ok 143 - format-patch --pretty=mboxrd
# still have 5 known breakage(s)
# passed all remaining 138 test(s)
1..143
*** t4015-diff-whitespace.sh ***
ok 1 - Ray Lehtiniemi's example
ok 2 - another test, without options
ok 3 - ignore-blank-lines: only new lines
ok 4 - ignore-blank-lines: only new lines with space
ok 5 - ignore-blank-lines: after change
ok 6 - ignore-blank-lines: before change
ok 7 - ignore-blank-lines: between changes
ok 8 - ignore-blank-lines: between changes (with interhunkctx)
ok 9 - ignore-blank-lines: scattered spaces
ok 10 - ignore-blank-lines: spaces coalesce
ok 11 - ignore-blank-lines: mix changes and blank lines
ok 12 - check mixed spaces and tabs in indent
ok 13 - check mixed tabs and spaces in indent
ok 14 - check with no whitespace errors
ok 15 - check with trailing whitespace
ok 16 - check with space before tab in indent
ok 17 - --check and --exit-code are not exclusive
ok 18 - --check and --quiet are not exclusive
ok 19 - check staged with no whitespace errors
ok 20 - check staged with trailing whitespace
ok 21 - check staged with space before tab in indent
ok 22 - check with no whitespace errors (diff-index)
ok 23 - check with trailing whitespace (diff-index)
ok 24 - check with space before tab in indent (diff-index)
ok 25 - check staged with no whitespace errors (diff-index)
ok 26 - check staged with trailing whitespace (diff-index)
ok 27 - check staged with space before tab in indent (diff-index)
ok 28 - check with no whitespace errors (diff-tree)
ok 29 - check with trailing whitespace (diff-tree)
ok 30 - check with space before tab in indent (diff-tree)
ok 31 - check with ignored trailing whitespace attr (diff-tree)
ok 32 - check trailing whitespace (trailing-space: off)
ok 33 - check trailing whitespace (trailing-space: on)
ok 34 - check space before tab in indent (space-before-tab: off)
ok 35 - check space before tab in indent (space-before-tab: on)
ok 36 - check spaces as indentation (indent-with-non-tab: off)
ok 37 - check spaces as indentation (indent-with-non-tab: on)
ok 38 - ditto, but tabwidth=9
ok 39 - check tabs and spaces as indentation (indent-with-non-tab: on)
ok 40 - ditto, but tabwidth=10
ok 41 - ditto, but tabwidth=20
ok 42 - check tabs as indentation (tab-in-indent: off)
ok 43 - check tabs as indentation (tab-in-indent: on)
ok 44 - check tabs and spaces as indentation (tab-in-indent: on)
ok 45 - ditto, but tabwidth=1 (must be irrelevant)
ok 46 - check tab-in-indent and indent-with-non-tab conflict
ok 47 - check tab-in-indent excluded from wildcard whitespace attribute
ok 48 - line numbers in --check output are correct
ok 49 - checkdiff detects new trailing blank lines (1)
ok 50 - checkdiff detects new trailing blank lines (2)
ok 51 - checkdiff allows new blank lines
ok 52 - whitespace-only changes not reported
ok 53 - whitespace-only changes reported across renames
ok 54 - rename empty
ok 55 - combined diff with autocrlf conversion
ok 56 - setup diff colors
ok 57 - diff that introduces a line with only tabs
ok 58 - diff that introduces and removes ws breakages
ok 59 - ws-error-highlight test setup
ok 60 - test --ws-error-highlight option
ok 61 - test diff.wsErrorHighlight config
ok 62 - option overrides diff.wsErrorHighlight
ok 63 - detect moved code, complete file
ok 64 - detect malicious moved code, inside file
ok 65 - plain moved code, inside file
ok 66 - detect blocks of moved code
ok 67 - detect permutations inside moved code -- dimmed-zebra
ok 68 - cmd option assumes configured colored-moved
ok 69 - no effect from --color-moved with --word-diff
ok 70 - set up whitespace tests
ok 71 - move detection ignoring whitespace 
ok 72 - move detection ignoring whitespace changes
ok 73 - move detection ignoring whitespace at eol
ok 74 - clean up whitespace-test colors
ok 75 - --color-moved block at end of diff output respects MIN_ALNUM_COUNT
ok 76 - --color-moved respects MIN_ALNUM_COUNT
ok 77 - --color-moved treats adjacent blocks as separate for MIN_ALNUM_COUNT
ok 78 - move detection with submodules
ok 79 - only move detection ignores white spaces
ok 80 - compare whitespace delta across moved blocks
ok 81 - compare whitespace delta incompatible with other space options
# passed all 81 test(s)
1..81
*** t4016-diff-quote.sh ***
ok 1 - setup
ok 2 - setup expected files
ok 3 - git diff --summary -M HEAD
ok 4 - git diff --numstat -M HEAD
ok 5 - git diff --stat -M HEAD
# passed all 5 test(s)
1..5
*** t4017-diff-retval.sh ***
ok 1 - setup
ok 2 - git diff --quiet -w  HEAD^^ HEAD^
ok 3 - git diff --quiet HEAD^^ HEAD^
ok 4 - git diff --quiet -w  HEAD^ HEAD
ok 5 - git diff-tree HEAD^ HEAD
ok 6 - git diff-tree HEAD^ HEAD -- a
ok 7 - git diff-tree HEAD^ HEAD -- b
ok 8 - echo HEAD | git diff-tree --stdin
ok 9 - git diff-tree HEAD HEAD
ok 10 - git diff-files
ok 11 - git diff-index --cached HEAD
ok 12 - git diff-index --cached HEAD^
ok 13 - git diff-index --cached HEAD^
ok 14 - git diff-tree -Stext HEAD^ HEAD -- b
ok 15 - git diff-tree -Snot-found HEAD^ HEAD -- b
ok 16 - git diff-files
ok 17 - git diff-index --cached HEAD
ok 18 - --check --exit-code returns 0 for no difference
ok 19 - --check --exit-code returns 1 for a clean difference
ok 20 - --check --exit-code returns 3 for a dirty difference
ok 21 - --check with --no-pager returns 2 for dirty difference
ok 22 - check should test not just the last line
ok 23 - check detects leftover conflict markers
ok 24 - check honors conflict marker length
# passed all 24 test(s)
1..24
*** t4018-diff-funcname.sh ***
ok 1 - setup
ok 2 - builtin ada pattern compiles
ok 3 - builtin ada wordRegex pattern compiles
ok 4 - builtin bibtex pattern compiles
ok 5 - builtin bibtex wordRegex pattern compiles
ok 6 - builtin cpp pattern compiles
ok 7 - builtin cpp wordRegex pattern compiles
ok 8 - builtin csharp pattern compiles
ok 9 - builtin csharp wordRegex pattern compiles
ok 10 - builtin css pattern compiles
ok 11 - builtin css wordRegex pattern compiles
ok 12 - builtin fortran pattern compiles
ok 13 - builtin fortran wordRegex pattern compiles
ok 14 - builtin fountain pattern compiles
ok 15 - builtin fountain wordRegex pattern compiles
ok 16 - builtin golang pattern compiles
ok 17 - builtin golang wordRegex pattern compiles
ok 18 - builtin html pattern compiles
ok 19 - builtin html wordRegex pattern compiles
ok 20 - builtin java pattern compiles
ok 21 - builtin java wordRegex pattern compiles
ok 22 - builtin matlab pattern compiles
ok 23 - builtin matlab wordRegex pattern compiles
ok 24 - builtin objc pattern compiles
ok 25 - builtin objc wordRegex pattern compiles
ok 26 - builtin pascal pattern compiles
ok 27 - builtin pascal wordRegex pattern compiles
ok 28 - builtin perl pattern compiles
ok 29 - builtin perl wordRegex pattern compiles
ok 30 - builtin php pattern compiles
ok 31 - builtin php wordRegex pattern compiles
ok 32 - builtin python pattern compiles
ok 33 - builtin python wordRegex pattern compiles
ok 34 - builtin ruby pattern compiles
ok 35 - builtin ruby wordRegex pattern compiles
ok 36 - builtin tex pattern compiles
ok 37 - builtin tex wordRegex pattern compiles
ok 38 - builtin custom1 pattern compiles
ok 39 - builtin custom1 wordRegex pattern compiles
ok 40 - builtin custom2 pattern compiles
ok 41 - builtin custom2 wordRegex pattern compiles
ok 42 - builtin custom3 pattern compiles
ok 43 - builtin custom3 wordRegex pattern compiles
ok 44 - last regexp must not be negated
error: bug in the test script: broken &&-chain or run-away HERE-DOC: 
	for i in $diffpatterns
	do
		echo "$i-* diff=$i"
	done > .gitattributes &&

	# add all test files to the index
	(
		( cd "$TEST_DIRECTORY"/t4018 && printf "%s\n" * ) | while read f
		do
			cat "$TEST_DIRECTORY"/t4018/$f > $f
			git add -v $f
		done
	) &&

	# place modified files in the worktree
	for i in $(git ls-files)
	do
		sed -e "s/ChangeMe/IWasChanged/" <"$TEST_DIRECTORY/t4018/$i" >"$i" || return 1
	done

*** t4019-diff-wserror.sh ***
ok 1 - setup
ok 2 - default
ok 3 - default (attribute)
ok 4 - default, tabwidth=10 (attribute)
ok 5 - no check (attribute)
ok 6 - no check, tabwidth=10 (attribute), must be irrelevant
ok 7 - without -trail
ok 8 - without -trail (attribute)
ok 9 - without -space
ok 10 - without -space (attribute)
ok 11 - with indent-non-tab only
ok 12 - with indent-non-tab only (attribute)
ok 13 - with indent-non-tab only, tabwidth=10
ok 14 - with indent-non-tab only, tabwidth=10 (attribute)
ok 15 - with cr-at-eol
ok 16 - with cr-at-eol (attribute)
ok 17 - trailing empty lines (1)
ok 18 - trailing empty lines (2)
ok 19 - checkdiff shows correct line number for trailing blank lines
ok 20 - do not color trailing cr in context
ok 21 - color new trailing blank lines
# passed all 21 test(s)
1..21
*** t4020-diff-external.sh ***
ok 1 - setup
ok 2 - GIT_EXTERNAL_DIFF environment
ok 3 - GIT_EXTERNAL_DIFF environment should apply only to diff
ok 4 - GIT_EXTERNAL_DIFF environment and --no-ext-diff
ok 5 - typechange diff
ok 6 - diff.external
ok 7 - diff.external should apply only to diff
ok 8 - diff.external and --no-ext-diff
ok 9 - diff attribute
ok 10 - diff attribute should apply only to diff
ok 11 - diff attribute and --no-ext-diff
ok 12 - diff attribute
ok 13 - diff attribute should apply only to diff
ok 14 - diff attribute and --no-ext-diff
ok 15 - GIT_EXTERNAL_DIFF trumps diff.external
ok 16 - attributes trump GIT_EXTERNAL_DIFF and diff.external
ok 17 - no diff with -diff
ok 18 - force diff with "diff"
ok 19 - GIT_EXTERNAL_DIFF with more than one changed files
ok 20 - GIT_EXTERNAL_DIFF path counter/total
ok 21 - GIT_EXTERNAL_DIFF generates pretty paths
ok 22 - external diff with autocrlf = true
ok 23 - diff --cached
ok 24 - clean up crlf leftovers
ok 25 - submodule diff
# passed all 25 test(s)
1..25
*** t4021-format-patch-numbered.sh ***
ok 1 - setup
ok 2 - single patch defaults to no numbers
ok 3 - multiple patch defaults to numbered
ok 4 - Use --numbered
ok 5 - format.numbered = true
ok 6 - format.numbered && single patch
ok 7 - format.numbered && --no-numbered
ok 8 - format.numbered && --keep-subject
ok 9 - format.numbered = auto
ok 10 - format.numbered = auto && single patch
ok 11 - format.numbered = auto && --no-numbered
ok 12 - --start-number && --numbered
ok 13 - single patch with cover-letter defaults to numbers
ok 14 - Use --no-numbered and --cover-letter single patch
# passed all 14 test(s)
1..14
*** t4022-diff-rewrite.sh ***
ok 1 - setup
ok 2 - detect rewrite
ok 3 - show deletion diff without -D
ok 4 - suppress deletion diff with -D
ok 5 - show deletion diff with -B
ok 6 - suppress deletion diff with -B -D
ok 7 - prepare a file that ends with an incomplete line
ok 8 - rewrite the middle 90% of sequence file and terminate with newline
ok 9 - confirm that sequence file is considered a rewrite
ok 10 - no newline at eof is on its own line without -B
ok 11 - no newline at eof is on its own line with -B
# passed all 11 test(s)
1..11
*** t4023-diff-rename-typechange.sh ***
ok 1 - setup
ok 2 - cross renames to be detected for regular files
ok 3 - cross renames to be detected for typechange
ok 4 - moves and renames
# passed all 4 test(s)
1..4
*** t4024-diff-optimize-common.sh ***
ok 1 - setup
ok 2 - diff -U0
# passed all 2 test(s)
1..2
*** t4025-hunk-header.sh ***
ok 1 - setup
ok 2 - hunk header truncation with an overly long line
# passed all 2 test(s)
1..2
*** t4026-color.sh ***
ok 1 - reset
ok 2 - empty color is empty
ok 3 - attribute before color name
ok 4 - color name before attribute
ok 5 - attr fg bg
ok 6 - fg attr bg
ok 7 - fg bg attr
ok 8 - fg bg attr...
ok 9 - attr negation
ok 10 - "no-" variant of negation
ok 11 - long color specification
ok 12 - absurdly long color specification
ok 13 - 0-7 are aliases for basic ANSI color names
ok 14 - 256 colors
ok 15 - 24-bit colors
ok 16 - "normal" yields no color at all"
ok 17 - -1 is a synonym for "normal"
ok 18 - color too small
ok 19 - color too big
ok 20 - extra character after color number
ok 21 - extra character after color name
ok 22 - extra character after attribute
ok 23 - unknown color slots are ignored (diff)
ok 24 - unknown color slots are ignored (branch)
ok 25 - unknown color slots are ignored (status)
# passed all 25 test(s)
1..25
*** t4027-diff-submodule.sh ***
ok 1 - setup
ok 2 - git diff --raw HEAD
ok 3 - git diff-index --raw HEAD
ok 4 - git diff-files --raw
ok 5 - git diff HEAD
ok 6 - git diff HEAD with dirty submodule (work tree)
ok 7 - git diff HEAD with dirty submodule (index)
ok 8 - git diff HEAD with dirty submodule (untracked)
ok 9 - git diff HEAD with dirty submodule (work tree, refs match)
ok 10 - git diff HEAD with dirty submodule (work tree, refs match) [.gitmodules]
ok 11 - git diff HEAD with dirty submodule (index, refs match)
ok 12 - git diff HEAD with dirty submodule (untracked, refs match)
ok 13 - git diff HEAD with dirty submodule (untracked, refs match) [.gitmodules]
ok 14 - git diff between submodule commits
ok 15 - git diff between submodule commits [.gitmodules]
ok 16 - git diff (empty submodule dir)
ok 17 - conflicted submodule setup
ok 18 - combined (empty submodule)
ok 19 - combined (with submodule)
# passed all 19 test(s)
1..19
*** t4028-format-patch-mime-headers.sh ***
ok 1 - create commit with utf-8 body
ok 2 - patch has mime headers
ok 3 - patch has mime and extra headers
# passed all 3 test(s)
1..3
*** t4029-diff-trailing-space.sh ***
ok 1 - diff honors config option, diff.suppressBlankEmpty
# passed all 1 test(s)
1..1
*** t4030-diff-textconv.sh ***
ok 1 - setup binary file with history
ok 2 - file is considered binary by porcelain
ok 3 - file is considered binary by plumbing
ok 4 - setup textconv filters
ok 5 - diff produces text
ok 6 - show commit produces text
ok 7 - diff-tree produces binary
ok 8 - log produces text
ok 9 - format-patch produces binary
ok 10 - status -v produces text
ok 11 - show blob produces binary
ok 12 - show --textconv blob produces text
ok 13 - show --no-textconv blob produces binary
ok 14 - grep-diff (-G) operates on textconv data (add)
ok 15 - grep-diff (-G) operates on textconv data (modification)
ok 16 - pickaxe (-S) operates on textconv data (add)
ok 17 - pickaxe (-S) operates on textconv data (modification)
ok 18 - diffstat does not run textconv
ok 19 - textconv does not act on symlinks
# passed all 19 test(s)
1..19
*** t4031-diff-rewrite-binary.sh ***
ok 1 - create binary file with changes
ok 2 - vanilla diff is binary
ok 3 - rewrite diff is binary
ok 4 - rewrite diff can show binary patch
ok 5 - rewrite diff --numstat shows binary changes
ok 6 - diff --stat counts binary rewrite as 0 lines
ok 7 - setup textconv
ok 8 - rewrite diff respects textconv
# passed all 8 test(s)
1..8
*** t4032-diff-inter-hunk-context.sh ***
ok 1 - diff -U0, 1 common line: count hunks (2)
ok 2 - diff -U0, 1 common line: check output
ok 3 - diff -U0 --inter-hunk-context=0, 1 common line: count hunks (2)
ok 4 - diff -U0 --inter-hunk-context=0, 1 common line: check output
ok 5 - diff -U0 --inter-hunk-context=1, 1 common line: count hunks (1)
ok 6 - diff -U0 --inter-hunk-context=1, 1 common line: check output
ok 7 - diff -U0 --inter-hunk-context=2, 1 common line: count hunks (1)
ok 8 - diff -U0 --inter-hunk-context=2, 1 common line: check output
ok 9 - diff -U1, 1 common line: count hunks (1)
ok 10 - diff -U0, 2 common lines: count hunks (2)
ok 11 - diff -U0 --inter-hunk-context=0, 2 common lines: count hunks (2)
ok 12 - diff -U0 --inter-hunk-context=1, 2 common lines: count hunks (2)
ok 13 - diff -U0 --inter-hunk-context=2, 2 common lines: count hunks (1)
ok 14 - diff -U1, 2 common lines: count hunks (1)
ok 15 - diff -U1, 3 common lines: count hunks (2)
ok 16 - diff -U1 --inter-hunk-context=0, 3 common lines: count hunks (2)
ok 17 - diff -U1 --inter-hunk-context=1, 3 common lines: count hunks (1)
ok 18 - diff -U1 --inter-hunk-context=2, 3 common lines: count hunks (1)
ok 19 - diff -U3, 9 common lines: count hunks (2)
ok 20 - diff -U3 --inter-hunk-context=2, 9 common lines: count hunks (2)
ok 21 - diff -U3 --inter-hunk-context=3, 9 common lines: count hunks (1)
ok 22 - (diff.interHunkContext=0) diff -U0, 1 common line: count hunks (2)
ok 23 - (diff.interHunkContext=0) diff -U0, 1 common line: check output
ok 24 - (diff.interHunkContext=1) diff -U0, 1 common line: count hunks (1)
ok 25 - (diff.interHunkContext=1) diff -U0, 1 common line: check output
ok 26 - (diff.interHunkContext=2) diff -U0, 1 common line: count hunks (1)
ok 27 - (diff.interHunkContext=2) diff -U0, 1 common line: check output
ok 28 - (diff.interHunkContext=3) diff -U3, 9 common lines: count hunks (1)
ok 29 - (diff.interHunkContext=0) diff -U0, 2 common lines: count hunks (2)
ok 30 - (diff.interHunkContext=1) diff -U0, 2 common lines: count hunks (2)
ok 31 - (diff.interHunkContext=2) diff -U0, 2 common lines: count hunks (1)
ok 32 - (diff.interHunkContext=0) diff -U1, 3 common lines: count hunks (2)
ok 33 - (diff.interHunkContext=1) diff -U1, 3 common lines: count hunks (1)
ok 34 - (diff.interHunkContext=2) diff -U1, 3 common lines: count hunks (1)
ok 35 - (diff.interHunkContext=2) diff -U3, 9 common lines: count hunks (2)
ok 36 - (diff.interHunkContext=3) diff -U3, 9 common lines: count hunks (1)
ok 37 - diff.interHunkContext invalid
# passed all 37 test(s)
1..37
*** t4033-diff-patience.sh ***
ok 1 - --ignore-space-at-eol with a single appended character
ok 2 - patience diff
ok 3 - patience diff output is valid
ok 4 - completely different files
# passed all 4 test(s)
1..4
*** t4034-diff-words.sh ***
ok 1 - setup
ok 2 - set up pre and post with runs of whitespace
ok 3 - word diff with runs of whitespace
ok 4 - --word-diff=porcelain
ok 5 - --word-diff=plain
ok 6 - --word-diff=plain --color
ok 7 - word diff without context
ok 8 - word diff with a regular expression
ok 9 - set up a diff driver
ok 10 - option overrides .gitattributes
ok 11 - use regex supplied by driver
ok 12 - set up diff.wordRegex option
ok 13 - command-line overrides config
ok 14 - command-line overrides config: --word-diff-regex
ok 15 - .gitattributes override config
ok 16 - setup: remove diff driver regex
ok 17 - use configured regex
ok 18 - test parsing words for newline
ok 19 - test when words are only removed at the end
ok 20 - --word-diff=none
ok 21 - unset default driver
ok 22 - diff driver 'ada'
ok 23 - diff driver 'bibtex'
ok 24 - diff driver 'cpp'
ok 25 - diff driver 'csharp'
ok 26 - diff driver 'css'
ok 27 - diff driver 'fortran'
ok 28 - diff driver 'html'
ok 29 - diff driver 'java'
ok 30 - diff driver 'matlab'
ok 31 - diff driver 'objc'
ok 32 - diff driver 'pascal'
ok 33 - diff driver 'perl'
ok 34 - diff driver 'php'
ok 35 - diff driver 'python'
ok 36 - diff driver 'ruby'
ok 37 - diff driver 'tex'
ok 38 - word-diff with diff.sbe
ok 39 - word-diff with no newline at EOF
ok 40 - setup history with two files
ok 41 - wordRegex for the first file does not apply to the second
# passed all 41 test(s)
1..41
*** t4035-diff-quiet.sh ***
ok 1 - setup
ok 2 - git diff-tree HEAD^ HEAD
ok 3 - git diff-tree HEAD^ HEAD -- a
ok 4 - git diff-tree HEAD^ HEAD -- b
ok 5 - echo HEAD | git diff-tree --stdin
ok 6 - git diff-tree HEAD HEAD
ok 7 - git diff-files
ok 8 - git diff-index --cached HEAD
ok 9 - git diff-index --cached HEAD^
ok 10 - git diff-index --cached HEAD^
ok 11 - git diff-tree -Stext HEAD^ HEAD -- b
ok 12 - git diff-tree -Snot-found HEAD^ HEAD -- b
ok 13 - git diff-files
ok 14 - git diff-index --cached HEAD
ok 15 - git diff, one file outside repo
ok 16 - git diff, both files outside repo
ok 17 - git diff --ignore-space-at-eol, one file outside repo
ok 18 - git diff --ignore-space-at-eol, both files outside repo
ok 19 - git diff --ignore-all-space, one file outside repo
ok 20 - git diff --ignore-all-space, both files outside repo
ok 21 - git diff --quiet ignores stat-change only entries
ok 22 - git diff --quiet on a path that need conversion
# passed all 22 test(s)
1..22
*** t4036-format-patch-signer-mime.sh ***
ok 1 - setup
ok 2 - format normally
ok 3 - format with signoff without funny signer name
ok 4 - format with non ASCII signer name
ok 5 - attach and signoff do not duplicate mime headers
# passed all 5 test(s)
1..5
*** t4037-diff-r-t-dirs.sh ***
ok 1 - setup
ok 2 - verify
# passed all 2 test(s)
1..2
*** t4038-diff-combined.sh ***
ok 1 - setup
ok 2 - check combined output (1)
ok 3 - check combined output (2)
ok 4 - diagnose truncated file
ok 5 - setup for --cc --raw
ok 6 - check --cc --raw with four trees
ok 7 - check --cc --raw with forty trees
ok 8 - setup combined ignore spaces
ok 9 - check combined output (no ignore space)
ok 10 - check combined output (ignore space at eol)
ok 11 - check combined output (ignore space change)
ok 12 - check combined output (ignore all spaces)
ok 13 - combine diff coalesce simple
ok 14 - combine diff coalesce tricky
not ok 15 - combine diff coalesce three parents # TODO known breakage
ok 16 - combine diff missing delete bug
ok 17 - combine diff gets tree sorting right
# still have 1 known breakage(s)
# passed all remaining 16 test(s)
1..17
*** t4039-diff-assume-unchanged.sh ***
ok 1 - setup
ok 2 - diff-index does not examine assume-unchanged entries
ok 3 - diff-files does not examine assume-unchanged entries
ok 4 - find-copies-harder is not confused by mode bits
# passed all 4 test(s)
1..4
*** t4040-whitespace-status.sh ***
ok 1 - setup
ok 2 - diff-tree --exit-code
ok 3 - diff-tree -b --exit-code
ok 4 - diff-index --cached --exit-code
ok 5 - diff-index -b -p --cached --exit-code
ok 6 - diff-index --exit-code
ok 7 - diff-index -b -p --exit-code
ok 8 - diff-files --exit-code
ok 9 - diff-files -b -p --exit-code
ok 10 - diff-files --diff-filter --quiet
ok 11 - diff-tree --diff-filter --quiet
# passed all 11 test(s)
1..11
*** t4041-diff-submodule-option.sh ***
ok 1 - added submodule
ok 2 - added submodule, set diff.submodule
ok 3 - --submodule=short overrides diff.submodule
ok 4 - diff.submodule does not affect plumbing
ok 5 - modified submodule(forward)
ok 6 - modified submodule(forward)
ok 7 - modified submodule(forward) --submodule
ok 8 - modified submodule(forward) --submodule=short
ok 9 - modified submodule(backward)
ok 10 - modified submodule(backward and forward)
ok 11 - typechanged submodule(submodule->blob), --cached
ok 12 - typechanged submodule(submodule->blob)
ok 13 - typechanged submodule(submodule->blob)
ok 14 - nonexistent commit
ok 15 - typechanged submodule(blob->submodule)
ok 16 - submodule is up to date
ok 17 - submodule contains untracked content
ok 18 - submodule contains untracked content (untracked ignored)
ok 19 - submodule contains untracked content (dirty ignored)
ok 20 - submodule contains untracked content (all ignored)
ok 21 - submodule contains untracked and modifed content
ok 22 - submodule contains untracked and modifed content (untracked ignored)
ok 23 - submodule contains untracked and modifed content (dirty ignored)
ok 24 - submodule contains untracked and modifed content (all ignored)
ok 25 - submodule contains modifed content
ok 26 - submodule is modified
ok 27 - modified submodule contains untracked content
ok 28 - modified submodule contains untracked content (untracked ignored)
ok 29 - modified submodule contains untracked content (dirty ignored)
ok 30 - modified submodule contains untracked content (all ignored)
ok 31 - modified submodule contains untracked and modifed content
ok 32 - modified submodule contains untracked and modifed content (untracked ignored)
ok 33 - modified submodule contains untracked and modifed content (dirty ignored)
ok 34 - modified submodule contains untracked and modifed content (all ignored)
ok 35 - modified submodule contains modifed content
ok 36 - deleted submodule
ok 37 - create second submodule
ok 38 - multiple submodules
ok 39 - path filter
ok 40 - given commit
ok 41 - given commit --submodule
ok 42 - given commit --submodule=short
ok 43 - setup .git file for sm2
ok 44 - diff --submodule with .git file
ok 45 - diff --submodule with objects referenced by alternates
# passed all 45 test(s)
1..45
*** t4042-diff-textconv-caching.sh ***
ok 1 - setup
ok 2 - first textconv works
ok 3 - cached textconv produces same output
ok 4 - cached textconv does not run helper
ok 5 - changing textconv invalidates cache
ok 6 - switching diff driver produces correct results
ok 7 - log notes cache and still use cache for -p
# passed all 7 test(s)
1..7
*** t4043-diff-rename-binary.sh ***
ok 1 - prepare repository
ok 2 - move the files into a "sub" directory
ok 3 - git show -C -C report renames
# passed all 3 test(s)
1..3
*** t4044-diff-index-unique-abbrev.sh ***
ok 1 - setup
ok 2 - diff does not produce ambiguous index line
# passed all 2 test(s)
1..2
*** t4045-diff-relative.sh ***
ok 1 - setup
ok 2 - -p --relative=subdir/
ok 3 - -p --relative=subdir
ok 4 - -p --relative
ok 5 - -p --relative=sub
ok 6 - --numstat --relative=subdir/
ok 7 - --numstat --relative=subdir
ok 8 - --numstat --relative
ok 9 - --numstat --relative=sub
ok 10 - --stat --relative=subdir/
ok 11 - --stat --relative=subdir
ok 12 - --stat --relative
ok 13 - --stat --relative=sub
ok 14 - --raw --relative=subdir/
ok 15 - --raw --relative=subdir
ok 16 - --raw --relative
ok 17 - --raw --relative=sub
# passed all 17 test(s)
1..17
*** t4046-diff-unmerged.sh ***
ok 1 - setup
ok 2 - diff-files -0
ok 3 - diff-files -1
ok 4 - diff-files -2
ok 5 - diff-files -3
# passed all 5 test(s)
1..5
*** t4047-diff-dirstat.sh ***
ok 1 - setup
ok 2 - sanity check setup (--numstat)
ok 3 - various ways to misspell --dirstat
ok 4 - vanilla --dirstat
ok 5 - vanilla -X
ok 6 - explicit defaults: --dirstat=changes,noncumulative,3
ok 7 - explicit defaults: -Xchanges,noncumulative,3
ok 8 - later options override earlier options:
ok 9 - non-defaults in config overridden by explicit defaults on command line
ok 10 - --dirstat=0
ok 11 - -X0
ok 12 - diff.dirstat=0
ok 13 - --dirstat=0 --cumulative
ok 14 - --dirstat=0,cumulative
ok 15 - -X0,cumulative
ok 16 - diff.dirstat=0,cumulative
ok 17 - diff.dirstat=0 & --dirstat=cumulative
ok 18 - --dirstat-by-file
ok 19 - --dirstat=files
ok 20 - diff.dirstat=files
ok 21 - --dirstat-by-file=10
ok 22 - --dirstat=files,10
ok 23 - diff.dirstat=10,files
ok 24 - --dirstat-by-file --cumulative
ok 25 - --dirstat=files,cumulative
ok 26 - diff.dirstat=cumulative,files
ok 27 - --dirstat=files,cumulative,10
ok 28 - diff.dirstat=10,cumulative,files
ok 29 - --dirstat=files,cumulative,16.7
ok 30 - diff.dirstat=16.7,cumulative,files
ok 31 - diff.dirstat=16.70,cumulative,files
ok 32 - --dirstat=files,cumulative,27.2
ok 33 - --dirstat=files,cumulative,27.09
ok 34 - --dirstat=lines
ok 35 - diff.dirstat=lines
ok 36 - --dirstat=lines,0
ok 37 - diff.dirstat=0,lines
ok 38 - --dirstat=future_param,lines,0 should fail loudly
ok 39 - --dirstat=dummy1,cumulative,2dummy should report both unrecognized parameters
ok 40 - diff.dirstat=future_param,0,lines should warn, but still work
ok 41 - --shortstat --dirstat should output only one dirstat
# passed all 41 test(s)
1..41
*** t4048-diff-combined-binary.sh ***
ok 1 - setup binary merge conflict
ok 2 - diff -m indicates binary-ness
ok 3 - diff -c indicates binary-ness
ok 4 - diff --cc indicates binary-ness
ok 5 - setup non-binary with binary attribute
ok 6 - diff -m respects binary attribute
ok 7 - diff -c respects binary attribute
ok 8 - diff --cc respects binary attribute
ok 9 - setup textconv attribute
ok 10 - diff -m respects textconv attribute
ok 11 - diff -c respects textconv attribute
ok 12 - diff --cc respects textconv attribute
ok 13 - diff-tree plumbing does not respect textconv
ok 14 - diff --cc respects textconv on worktree file
# passed all 14 test(s)
1..14
*** t4049-diff-stat-count.sh ***
ok 1 - setup
ok 2 - mode-only change show as a 0-line change
ok 3 - binary changes do not count in lines
ok 4 - exclude unmerged entries from total file count
# passed all 4 test(s)
1..4
*** t4050-diff-histogram.sh ***
ok 1 - histogram diff
ok 2 - histogram diff output is valid
ok 3 - completely different files
# passed all 3 test(s)
1..3
*** t4051-diff-function-context.sh ***
ok 1 - setup
ok 2 - changed function
ok 3 -  diff applies
ok 4 -  context includes comment
ok 5 -  context includes begin
ok 6 -  context includes end
ok 7 -  context does not include other functions
ok 8 -  context does not include preceding empty lines
ok 9 -  context does not include trailing empty lines
ok 10 - changed includes
ok 11 -  diff applies
ok 12 -  context includes begin
ok 13 -  context includes end
ok 14 -  context does not include other functions
ok 15 -  context does not include trailing empty lines
ok 16 - appended function
ok 17 -  diff applies
ok 18 -  context includes begin
ok 19 -  context includes end
ok 20 -  context does not include other functions
ok 21 - appended function part
ok 22 -  diff applies
ok 23 -  context includes begin
ok 24 -  context includes end
ok 25 -  context does not include other functions
ok 26 -  context does not include preceding empty lines
ok 27 - change with long common tail and no context
ok 28 -  diff applies
ok 29 -  context includes begin
ok 30 -  context includes end
ok 31 -  context does not include other functions
ok 32 -  context does not include preceding empty lines
ok 33 - changed function plus appended function
ok 34 -  diff applies
ok 35 -  context includes begin
ok 36 -  context includes end
ok 37 -  context does not include other functions
ok 38 - changed two consecutive functions
ok 39 -  diff applies
ok 40 -  context includes begin
ok 41 -  context includes end
ok 42 -  overlapping hunks are merged
# passed all 42 test(s)
1..42
*** t4052-stat-output.sh ***
ok 1 - preparation
ok 2 - format-patch: small change with long name gives more space to the name
ok 3 - diff: small change with long name gives more space to the name
ok 4 - show: small change with long name gives more space to the name
ok 5 - log: small change with long name gives more space to the name
ok 6 - format-patch --stat=width: a long name is given more room when the bar is short
ok 7 - format-patch --stat-width=width with long name
ok 8 - format-patch --stat=...,name-width with long name
ok 9 - format-patch --stat-name-width with long name
ok 10 - diff --stat=width: a long name is given more room when the bar is short
ok 11 - diff --stat-width=width with long name
ok 12 - diff --stat=...,name-width with long name
ok 13 - diff --stat-name-width with long name
ok 14 - show --stat=width: a long name is given more room when the bar is short
ok 15 - show --stat-width=width with long name
ok 16 - show --stat=...,name-width with long name
ok 17 - show --stat-name-width with long name
ok 18 - log --stat=width: a long name is given more room when the bar is short
ok 19 - log --stat-width=width with long name
ok 20 - log --stat=...,name-width with long name
ok 21 - log --stat-name-width with long name
ok 22 - preparation for big change tests
ok 23 - format-patch ignores COLUMNS (big change)
ok 24 - format-patch --graph ignores COLUMNS (big change)
ok 25 - diff respects COLUMNS (big change)
ok 26 - show respects COLUMNS (big change)
ok 27 - log respects COLUMNS (big change)
ok 28 - log --graph respects COLUMNS (big change)
ok 29 - format-patch ignores not enough COLUMNS (big change)
ok 30 - format-patch --graph ignores not enough COLUMNS (big change)
ok 31 - diff respects not enough COLUMNS (big change)
ok 32 - show respects not enough COLUMNS (big change)
ok 33 - log respects not enough COLUMNS (big change)
ok 34 - log --graph respects not enough COLUMNS (big change)
ok 35 - format-patch ignores statGraphWidth config
ok 36 - format-patch --graph ignores statGraphWidth config
ok 37 - diff respects statGraphWidth config
ok 38 - show respects statGraphWidth config
ok 39 - log respects statGraphWidth config
ok 40 - log --graph respects statGraphWidth config
ok 41 - format-patch --stat=width with big change
ok 42 - format-patch --stat-width=width with big change
ok 43 - format-patch --stat-graph-width with big change
ok 44 - format-patch --stat-width=width --graph with big change
ok 45 - format-patch --stat-graph-width --graph with big change
ok 46 - diff --stat=width with big change
ok 47 - diff --stat-width=width with big change
ok 48 - diff --stat-graph-width with big change
ok 49 - show --stat=width with big change
ok 50 - show --stat-width=width with big change
ok 51 - show --stat-graph-width with big change
ok 52 - log --stat=width with big change
ok 53 - log --stat-width=width with big change
ok 54 - log --stat-graph-width with big change
ok 55 - log --stat-width=width --graph with big change
ok 56 - log --stat-graph-width --graph with big change
ok 57 - preparation for long filename tests
ok 58 - format-patch --stat=width with big change is more balanced
ok 59 - format-patch --stat=width --graph with big change is balanced
ok 60 - diff --stat=width with big change is more balanced
ok 61 - show --stat=width with big change is more balanced
ok 62 - log --stat=width with big change is more balanced
ok 63 - log --stat=width --graph with big change is balanced
ok 64 - format-patch ignores COLUMNS (long filename)
ok 65 - format-patch --graph ignores COLUMNS (long filename)
ok 66 - diff respects COLUMNS (long filename)
ok 67 - show respects COLUMNS (long filename)
ok 68 - log respects COLUMNS (long filename)
ok 69 - log --graph respects COLUMNS (long filename)
ok 70 - format-patch ignores prefix greater than COLUMNS (big change)
ok 71 - format-patch --graph ignores prefix greater than COLUMNS (big change)
ok 72 - diff respects prefix greater than COLUMNS (big change)
ok 73 - show respects prefix greater than COLUMNS (big change)
ok 74 - log respects prefix greater than COLUMNS (big change)
ok 75 - log --graph respects prefix greater than COLUMNS (big change)
ok 76 - merge --stat respects COLUMNS (big change)
ok 77 - merge --stat respects COLUMNS (long filename)
# passed all 77 test(s)
1..77
*** t4053-diff-no-index.sh ***
ok 1 - setup
ok 2 - git diff --no-index directories
ok 3 - git diff --no-index relative path outside repo
ok 4 - git diff --no-index with broken index
ok 5 - git diff outside repo with broken index
ok 6 - git diff --no-index executed outside repo gives correct error message
ok 7 - diff D F and diff F D
ok 8 - turning a file into a directory
ok 9 - diff from repo subdir shows real paths (explicit)
ok 10 - diff from repo subdir shows real paths (implicit)
ok 11 - diff --no-index from repo subdir respects config (explicit)
ok 12 - diff --no-index from repo subdir respects config (implicit)
# passed all 12 test(s)
1..12
*** t4054-diff-bogus-tree.sh ***
ok 1 - create bogus tree
ok 2 - create tree with matching file
ok 3 - raw diff shows null sha1 (addition)
ok 4 - raw diff shows null sha1 (removal)
ok 5 - raw diff shows null sha1 (modification)
ok 6 - raw diff shows null sha1 (other direction)
ok 7 - raw diff shows null sha1 (reverse)
ok 8 - raw diff shows null sha1 (index)
ok 9 - patch fails due to bogus sha1 (addition)
ok 10 - patch fails due to bogus sha1 (removal)
ok 11 - patch fails due to bogus sha1 (modification)
ok 12 - patch fails due to bogus sha1 (other direction)
ok 13 - patch fails due to bogus sha1 (reverse)
ok 14 - patch fails due to bogus sha1 (index)
# passed all 14 test(s)
1..14
*** t4055-diff-context.sh ***
ok 1 - setup
ok 2 - the default number of context lines is 3
ok 3 - diff.context honored by "log"
ok 4 - The -U option overrides diff.context
ok 5 - diff.context honored by "diff"
ok 6 - plumbing not affected
ok 7 - non-integer config parsing
ok 8 - negative integer config parsing
ok 9 - -U0 is valid, so is diff.context=0
# passed all 9 test(s)
1..9
*** t4056-diff-order.sh ***
ok 1 - setup
ok 2 - no order (=tree object order)
ok 3 - missing orderfile
ok 4 - unreadable orderfile
ok 5 - orderfile using option from subdir with --output
ok 6 - orderfile using option (1)
ok 7 - orderfile is fifo (1)
ok 8 - orderfile using config (1)
ok 9 - cancelling configured orderfile (1)
ok 10 - orderfile using option (2)
ok 11 - orderfile is fifo (2)
ok 12 - orderfile using config (2)
ok 13 - cancelling configured orderfile (2)
ok 14 - setup for testing combine-diff order
ok 15 - combine-diff: no order (=tree object order)
ok 16 - combine-diff: orderfile using option (1)
ok 17 - combine-diff: orderfile using option (2)
# passed all 17 test(s)
1..17
*** t4057-diff-combined-paths.sh ***
ok 1 - trivial merge - combine-diff empty
ok 2 - only one trully conflicting path
ok 3 - merge introduces new file
ok 4 - merge removed a file
# passed all 4 test(s)
1..4
*** t4058-diff-duplicates.sh ***
ok 1 - create trees with duplicate entries
ok 2 - diff-tree between trees
ok 3 - diff-tree with renames
# passed all 3 test(s)
1..3
*** t4059-diff-submodule-not-initialized.sh ***
ok 1 - setup - submodules
ok 2 - setup - git submodule add
ok 3 - submodule directory removed
ok 4 - setup - submodule multiple commits
ok 5 - submodule removed multiple commits
ok 6 - submodule not initialized in new clone
ok 7 - setup submodule moved
ok 8 - submodule moved then removed
# passed all 8 test(s)
1..8
*** t4060-diff-submodule-option-diff-format.sh ***
ok 1 - setup repository
ok 2 - added submodule
ok 3 - added submodule, set diff.submodule
ok 4 - --submodule=short overrides diff.submodule
ok 5 - diff.submodule does not affect plumbing
ok 6 - modified submodule(forward)
ok 7 - modified submodule(forward)
ok 8 - modified submodule(forward) --submodule
ok 9 - modified submodule(forward) --submodule=short
ok 10 - modified submodule(backward)
ok 11 - modified submodule(backward and forward)
ok 12 - typechanged submodule(submodule->blob), --cached
ok 13 - typechanged submodule(submodule->blob)
ok 14 - typechanged submodule(submodule->blob)
ok 15 - nonexistent commit
ok 16 - typechanged submodule(blob->submodule)
ok 17 - submodule is up to date
ok 18 - submodule contains untracked content
ok 19 - submodule contains untracked content (untracked ignored)
ok 20 - submodule contains untracked content (dirty ignored)
ok 21 - submodule contains untracked content (all ignored)
ok 22 - submodule contains untracked and modified content
ok 23 - submodule contains untracked and modified content (untracked ignored)
ok 24 - submodule contains untracked and modified content (dirty ignored)
ok 25 - submodule contains untracked and modified content (all ignored)
ok 26 - submodule contains modified content
ok 27 - submodule is modified
ok 28 - modified submodule contains untracked content
ok 29 - modified submodule contains untracked content (untracked ignored)
ok 30 - modified submodule contains untracked content (dirty ignored)
ok 31 - modified submodule contains untracked content (all ignored)
ok 32 - modified submodule contains untracked and modified content
ok 33 - modified submodule contains untracked and modified content (untracked ignored)
ok 34 - modified submodule contains untracked and modified content (dirty ignored)
ok 35 - modified submodule contains untracked and modified content (all ignored)
ok 36 - modified submodule contains modified content
ok 37 - deleted submodule
ok 38 - create second submodule
ok 39 - multiple submodules
ok 40 - path filter
ok 41 - given commit
ok 42 - setup .git file for sm2
ok 43 - diff --submodule=diff with .git file
ok 44 - setup nested submodule
ok 45 - move nested submodule HEAD
ok 46 - diff --submodule=diff with moved nested submodule HEAD
ok 47 - diff --submodule=diff recurses into nested submodules
# passed all 47 test(s)
1..47
*** t4061-diff-indent.sh ***
ok 1 - prepare
ok 2 - diff: ugly spaces
ok 3 - diff: --no-indent-heuristic overrides config
ok 4 - diff: nice spaces with --indent-heuristic
ok 5 - diff: nice spaces with diff.indentHeuristic=true
ok 6 - diff: --indent-heuristic with --patience
ok 7 - diff: --indent-heuristic with --histogram
ok 8 - diff: ugly functions
ok 9 - diff: nice functions with --indent-heuristic
ok 10 - blame: nice spaces with --indent-heuristic
ok 11 - blame: nice spaces with diff.indentHeuristic=true
ok 12 - blame: ugly spaces with --no-indent-heuristic
ok 13 - blame: ugly spaces with diff.indentHeuristic=false
ok 14 - blame: --no-indent-heuristic overrides config
ok 15 - blame: --indent-heuristic overrides config
ok 16 - diff-tree: nice spaces with --indent-heuristic
ok 17 - diff-tree: nice spaces with diff.indentHeuristic=true
ok 18 - diff-tree: ugly spaces with --no-indent-heuristic
ok 19 - diff-tree: ugly spaces with diff.indentHeuristic=false
ok 20 - diff-tree: --indent-heuristic overrides config
ok 21 - diff-tree: --no-indent-heuristic overrides config
ok 22 - diff-index: nice spaces with --indent-heuristic
ok 23 - diff-index: nice spaces with diff.indentHeuristic=true
ok 24 - diff-index: ugly spaces with --no-indent-heuristic
ok 25 - diff-index: ugly spaces with diff.indentHeuristic=false
ok 26 - diff-index: --indent-heuristic overrides config
ok 27 - diff-index: --no-indent-heuristic overrides config
ok 28 - diff-files: nice spaces with --indent-heuristic
ok 29 - diff-files: nice spaces with diff.indentHeuristic=true
ok 30 - diff-files: ugly spaces with --no-indent-heuristic
ok 31 - diff-files: ugly spaces with diff.indentHeuristic=false
ok 32 - diff-files: --indent-heuristic overrides config
ok 33 - diff-files: --no-indent-heuristic overrides config
# passed all 33 test(s)
1..33
*** t4062-diff-pickaxe.sh ***
ok 1 - setup
ok 2 - -G matches
ok 3 - -S --pickaxe-regex
# passed all 3 test(s)
1..3
*** t4063-diff-blobs.sh ***
ok 1 - create some blobs
ok 2 - diff by sha1
ok 3 - index of sha1 diff
ok 4 - sha1 diff uses arguments as paths
ok 5 - sha1 diff has no mode change
ok 6 - diff by tree:path (run)
ok 7 - index of tree:path diff
ok 8 - tree:path diff uses filenames as paths
ok 9 - tree:path diff shows mode change
ok 10 - diff by ranged tree:path
ok 11 - index of ranged tree:path diff
ok 12 - ranged tree:path diff uses filenames as paths
ok 13 - ranged tree:path diff shows mode change
ok 14 - diff blob against file
ok 15 - index of blob-file diff
ok 16 - blob-file diff uses filename as paths
ok 17 - blob-file diff shows mode change
ok 18 - blob-file diff prefers filename to sha1
# passed all 18 test(s)
1..18
*** t4064-diff-oidfind.sh ***
ok 1 - setup 
ok 2 - find the greeting blob
ok 3 - setup a tree
ok 4 - find a tree
ok 5 - setup a submodule
ok 6 - find a submodule
# passed all 6 test(s)
1..6
*** t4065-diff-anchored.sh ***
ok 1 - --anchored
ok 2 - --anchored multiple
ok 3 - --anchored with nonexistent line has no effect
ok 4 - --anchored with non-unique line has no effect
ok 5 - diff still produced with impossible multiple --anchored
ok 6 - later algorithm arguments override earlier ones
ok 7 - --anchored works with other commands like "git show"
# passed all 7 test(s)
1..7
*** t4100-apply-stat.sh ***
ok 1 - rename
ok 2 - rename with recount
ok 3 - copy
ok 4 - copy with recount
ok 5 - rewrite
ok 6 - rewrite with recount
ok 7 - mode
ok 8 - mode with recount
ok 9 - non git (1)
ok 10 - non git (1) with recount
ok 11 - non git (2)
ok 12 - non git (2) with recount
ok 13 - non git (3)
ok 14 - non git (3) with recount
ok 15 - incomplete (1)
ok 16 - incomplete (1) with recount
ok 17 - incomplete (2)
ok 18 - incomplete (2) with recount
# passed all 18 test(s)
1..18
*** t4101-apply-nonl.sh ***
ok 1 - apply diff between 0 and 1
ok 2 - apply diff between 0 and 2
ok 3 - apply diff between 0 and 3
ok 4 - apply diff between 1 and 0
ok 5 - apply diff between 1 and 2
ok 6 - apply diff between 1 and 3
ok 7 - apply diff between 2 and 0
ok 8 - apply diff between 2 and 1
ok 9 - apply diff between 2 and 3
ok 10 - apply diff between 3 and 0
ok 11 - apply diff between 3 and 1
ok 12 - apply diff between 3 and 2
# passed all 12 test(s)
1..12
*** t4102-apply-rename.sh ***
ok 1 - setup
ok 2 - apply
ok 3 - validate
ok 4 - apply reverse
ok 5 - apply copy
# passed all 5 test(s)
1..5
*** t4103-apply-binary.sh ***
ok 1 - setup
ok 2 - stat binary diff -- should not fail.
ok 3 - stat binary -p0 diff -- should not fail.
ok 4 - stat binary diff (copy) -- should not fail.
ok 5 - check binary diff -- should fail.
ok 6 - check binary diff (copy) -- should fail.
ok 7 - check incomplete binary diff with replacement -- should fail.
ok 8 - check incomplete binary diff with replacement (copy) -- should fail.
ok 9 - check binary diff with replacement.
ok 10 - check binary diff with replacement (copy).
ok 11 - apply binary diff -- should fail.
ok 12 - apply binary diff -- should fail.
ok 13 - apply binary diff (copy) -- should fail.
ok 14 - apply binary diff (copy) -- should fail.
ok 15 - apply binary diff with full-index
ok 16 - apply binary diff with full-index (copy)
ok 17 - apply full-index binary diff in new repo
ok 18 - apply binary diff without replacement.
ok 19 - apply binary diff without replacement (copy).
ok 20 - apply binary diff.
ok 21 - apply binary diff (copy).
ok 22 - apply binary -p0 diff
# passed all 22 test(s)
1..22
*** t4104-apply-boundary.sh ***
ok 1 - setup
ok 2 - apply add-a-patch with context
ok 3 - apply add-z-patch with context
ok 4 - apply insert-a-patch with context
ok 5 - apply mod-a-patch with context
ok 6 - apply mod-z-patch with context
ok 7 - apply del-a-patch with context
ok 8 - apply del-z-patch with context
ok 9 - apply add-a-patch without context
ok 10 - apply add-z-patch without context
ok 11 - apply insert-a-patch without context
ok 12 - apply mod-a-patch without context
ok 13 - apply mod-z-patch without context
ok 14 - apply del-a-patch without context
ok 15 - apply del-z-patch without context
ok 16 - apply non-git add-a-patch without context
ok 17 - apply non-git add-z-patch without context
ok 18 - apply non-git insert-a-patch without context
ok 19 - apply non-git mod-a-patch without context
ok 20 - apply non-git mod-z-patch without context
ok 21 - apply non-git del-a-patch without context
ok 22 - apply non-git del-z-patch without context
ok 23 - two lines
ok 24 - apply patch with 3 context lines matching at end
# passed all 24 test(s)
1..24
*** t4105-apply-fuzz.sh ***
ok 1 - setup
ok 2 - unmodified patch
ok 3 - minus offset
ok 4 - plus offset
ok 5 - big offset
ok 6 - fuzz with no offset
ok 7 - fuzz with minus offset
ok 8 - fuzz with plus offset
ok 9 - fuzz with big offset
# passed all 9 test(s)
1..9
*** t4106-apply-stdin.sh ***
ok 1 - setup
ok 2 - git apply --numstat - < patch
ok 3 - git apply --numstat - < patch patch
# passed all 3 test(s)
1..3
*** t4107-apply-ignore-whitespace.sh ***
ok 1 - file creation
ok 2 - patch2 fails (retab)
ok 3 - patch2 applies with --ignore-whitespace
ok 4 - patch2 reverse applies with --ignore-space-change
ok 5 - patch2 applies (apply.ignorewhitespace = change)
ok 6 - patch3 fails (missing string at EOL)
ok 7 - patch4 fails (missing EOL at EOF)
ok 8 - patch5 fails (leading whitespace differences matter)
ok 9 - re-create file (with --ignore-whitespace)
ok 10 - patch5 fails (--no-ignore-whitespace)
ok 11 - apply --ignore-space-change --inaccurate-eof
# passed all 11 test(s)
1..11
*** t4108-apply-threeway.sh ***
ok 1 - setup
ok 2 - apply without --3way
ok 3 - apply with --3way
ok 4 - apply with --3way with rerere enabled
ok 5 - apply -3 with add/add conflict setup
ok 6 - apply -3 with add/add conflict
ok 7 - apply -3 with add/add conflict (dirty working tree)
# passed all 7 test(s)
1..7
*** t4109-apply-multifrag.sh ***
ok 1 - git apply (1)
ok 2 - git apply (2)
ok 3 - git apply (3)
# passed all 3 test(s)
1..3
*** t4110-apply-scan.sh ***
ok 1 - git apply scan
# passed all 1 test(s)
1..1
*** t4111-apply-subdir.sh ***
ok 1 - setup
ok 2 - setup: subdir
ok 3 - apply from subdir of toplevel
ok 4 - apply --cached from subdir of toplevel
ok 5 - apply --index from subdir of toplevel
ok 6 - apply half-broken patch from subdir of toplevel
ok 7 - apply from .git dir
ok 8 - apply from subdir of .git dir
ok 9 - apply --cached from .git dir
ok 10 - apply --cached from subdir of .git dir
# passed all 10 test(s)
1..10
*** t4112-apply-renames.sh ***
ok 1 - check rename/copy patch
ok 2 - apply rename/copy patch
# passed all 2 test(s)
1..2
*** t4113-apply-ending.sh ***
ok 1 - setup
ok 2 - apply at the end
ok 3 - apply at the beginning
# passed all 3 test(s)
1..3
*** t4114-apply-typechange.sh ***
ok 1 - setup repository and commits
ok 2 - file renamed from foo to foo/baz
ok 3 - file renamed from foo/baz to foo
ok 4 - directory becomes file
ok 5 - file becomes directory
ok 6 - file becomes symlink
ok 7 - symlink becomes file
ok 8 - binary file becomes symlink
ok 9 - symlink becomes binary file
ok 10 - symlink becomes directory
ok 11 - directory becomes symlink
# passed all 11 test(s)
1..11
*** t4115-apply-symlink.sh ***
ok 1 - setup
ok 2 - apply symlink patch
ok 3 - apply --index symlink patch
# passed all 3 test(s)
1..3
*** t4116-apply-reverse.sh ***
ok 1 - setup
ok 2 - apply in forward
ok 3 - apply in reverse
ok 4 - setup separate repository lacking postimage
ok 5 - apply in forward without postimage
ok 6 - apply in reverse without postimage
ok 7 - reversing a whitespace introduction
# passed all 7 test(s)
1..7
*** t4117-apply-reject.sh ***
ok 1 - setup
ok 2 - apply --reject is incompatible with --3way
ok 3 - apply without --reject should fail
ok 4 - apply without --reject should fail
ok 5 - apply with --reject should fail but update the file
ok 6 - apply with --reject should fail but update the file
ok 7 - the same test with --verbose
ok 8 - apply cleanly with --verbose
# passed all 8 test(s)
1..8
*** t4118-apply-empty-context.sh ***
ok 1 - setup
ok 2 - apply --numstat
ok 3 - apply --apply
# passed all 3 test(s)
1..3
*** t4119-apply-config.sh ***
ok 1 - setup
ok 2 - apply --whitespace=strip
ok 3 - apply --whitespace=strip from config
ok 4 - apply --whitespace=strip in subdir
ok 5 - apply --whitespace=strip from config in subdir
ok 6 - same in subdir but with traditional patch input
ok 7 - same but with traditional patch input of depth 1
ok 8 - same but with traditional patch input of depth 2
ok 9 - same but with traditional patch input of depth 1
ok 10 - same but with traditional patch input of depth 2
ok 11 - in subdir with traditional patch input
# passed all 11 test(s)
1..11
*** t4120-apply-popt.sh ***
ok 1 - setup
ok 2 - apply git diff with -p2
ok 3 - apply with too large -p
ok 4 - apply (-p2) traditional diff with funny filenames
ok 5 - apply with too large -p and fancy filename
ok 6 - apply (-p2) diff, mode change only
ok 7 - file mode was changed
ok 8 - apply (-p2) diff, rename
# passed all 8 test(s)
1..8
*** t4121-apply-diffs.sh ***
ok 1 - setup
ok 2 - check if contextually independent diffs for the same file apply
# passed all 2 test(s)
1..2
*** t4122-apply-symlink-inside.sh ***
ok 1 - setup
ok 2 - apply
ok 3 - check result
ok 4 - do not read from beyond symbolic link
ok 5 - do not follow symbolic link (setup)
ok 6 - do not follow symbolic link (same input)
ok 7 - do not follow symbolic link (existing)
# passed all 7 test(s)
1..7
*** t4123-apply-shrink.sh ***
ok 1 - setup
ok 2 - apply should fail gracefully
# passed all 2 test(s)
1..2
*** t4124-apply-ws-rule.sh ***
ok 1 - setup
ok 2 - whitespace=nowarn, default rule
ok 3 - whitespace=warn, default rule
ok 4 - whitespace=error-all, default rule
ok 5 - whitespace=error-all, no rule
ok 6 - whitespace=error-all, no rule (attribute)
ok 7 - spaces inserted by tab-in-indent
ok 8 - rule=-trailing,-space,-indent,-tab
ok 9 - rule=-trailing,-space,-indent,-tab,tabwidth=16
ok 10 - rule=-trailing,-space,-indent,-tab (attributes)
ok 11 - rule=-trailing,-space,-indent,-tab,tabwidth=16 (attributes)
ok 12 - rule=-trailing,-space,-indent,tab
ok 13 - rule=-trailing,-space,-indent,tab,tabwidth=16
ok 14 - rule=-trailing,-space,-indent,tab (attributes)
ok 15 - rule=-trailing,-space,-indent,tab,tabwidth=16 (attributes)
ok 16 - rule=-trailing,-space,indent,-tab
ok 17 - rule=-trailing,-space,indent,-tab,tabwidth=16
ok 18 - rule=-trailing,-space,indent,-tab (attributes)
ok 19 - rule=-trailing,-space,indent,-tab,tabwidth=16 (attributes)
ok 20 - rule=-trailing,space,-indent,-tab
ok 21 - rule=-trailing,space,-indent,-tab,tabwidth=16
ok 22 - rule=-trailing,space,-indent,-tab (attributes)
ok 23 - rule=-trailing,space,-indent,-tab,tabwidth=16 (attributes)
ok 24 - rule=-trailing,space,-indent,tab
ok 25 - rule=-trailing,space,-indent,tab,tabwidth=16
ok 26 - rule=-trailing,space,-indent,tab (attributes)
ok 27 - rule=-trailing,space,-indent,tab,tabwidth=16 (attributes)
ok 28 - rule=-trailing,space,indent,-tab
ok 29 - rule=-trailing,space,indent,-tab,tabwidth=16
ok 30 - rule=-trailing,space,indent,-tab (attributes)
ok 31 - rule=-trailing,space,indent,-tab,tabwidth=16 (attributes)
ok 32 - rule=trailing,-space,-indent,-tab
ok 33 - rule=trailing,-space,-indent,-tab,tabwidth=16
ok 34 - rule=trailing,-space,-indent,-tab (attributes)
ok 35 - rule=trailing,-space,-indent,-tab,tabwidth=16 (attributes)
ok 36 - rule=trailing,-space,-indent,tab
ok 37 - rule=trailing,-space,-indent,tab,tabwidth=16
ok 38 - rule=trailing,-space,-indent,tab (attributes)
ok 39 - rule=trailing,-space,-indent,tab,tabwidth=16 (attributes)
ok 40 - rule=trailing,-space,indent,-tab
ok 41 - rule=trailing,-space,indent,-tab,tabwidth=16
ok 42 - rule=trailing,-space,indent,-tab (attributes)
ok 43 - rule=trailing,-space,indent,-tab,tabwidth=16 (attributes)
ok 44 - rule=trailing,space,-indent,-tab
ok 45 - rule=trailing,space,-indent,-tab,tabwidth=16
ok 46 - rule=trailing,space,-indent,-tab (attributes)
ok 47 - rule=trailing,space,-indent,-tab,tabwidth=16 (attributes)
ok 48 - rule=trailing,space,-indent,tab
ok 49 - rule=trailing,space,-indent,tab,tabwidth=16
ok 50 - rule=trailing,space,-indent,tab (attributes)
ok 51 - rule=trailing,space,-indent,tab,tabwidth=16 (attributes)
ok 52 - rule=trailing,space,indent,-tab
ok 53 - rule=trailing,space,indent,-tab,tabwidth=16
ok 54 - rule=trailing,space,indent,-tab (attributes)
ok 55 - rule=trailing,space,indent,-tab,tabwidth=16 (attributes)
ok 56 - trailing whitespace & no newline at the end of file
ok 57 - blank at EOF with --whitespace=fix (1)
ok 58 - blank at EOF with --whitespace=fix (2)
ok 59 - blank at EOF with --whitespace=fix (3)
ok 60 - blank at end of hunk, not at EOF with --whitespace=fix
ok 61 - blank at EOF with --whitespace=warn
ok 62 - blank at EOF with --whitespace=error
ok 63 - blank but not empty at EOF
ok 64 - applying beyond EOF requires one non-blank context line
ok 65 - tons of blanks at EOF should not apply
ok 66 - missing blank line at end with --whitespace=fix
ok 67 - two missing blank lines at end with --whitespace=fix
ok 68 - missing blank line at end, insert before end, --whitespace=fix
ok 69 - shrink file with tons of missing blanks at end of file
ok 70 - missing blanks at EOF must only match blank lines
ok 71 - missing blank line should match context line with spaces
ok 72 - same, but with the --ignore-space-option
ok 73 - same, but with CR-LF line endings && cr-at-eol set
ok 74 - CR-LF line endings && add line && text=auto
ok 75 - CR-LF line endings && change line && text=auto
ok 76 - LF in repo, CRLF in worktree && change line && text=auto
ok 77 - whitespace=fix to expand
ok 78 - whitespace check skipped for excluded paths
# passed all 78 test(s)
1..78
*** t4125-apply-ws-fuzz.sh ***
ok 1 - setup
ok 2 - nofix
ok 3 - withfix (forward)
ok 4 - withfix (backward)
# passed all 4 test(s)
1..4
*** t4126-apply-empty.sh ***
ok 1 - setup
ok 2 - apply empty
ok 3 - apply --index empty
ok 4 - apply create
ok 5 - apply --index create
# passed all 5 test(s)
1..5
*** t4127-apply-same-fn.sh ***
ok 1 - setup
ok 2 - apply same filename with independent changes
ok 3 - apply same filename with overlapping changes
ok 4 - apply same new filename after rename
ok 5 - apply same old filename after rename -- should fail.
ok 6 - apply A->B (rename), C->A (rename), A->A -- should pass.
# passed all 6 test(s)
1..6
*** t4128-apply-root.sh ***
ok 1 - setup
ok 2 - apply --directory -p (1)
ok 3 - apply --directory -p (2) 
ok 4 - apply --directory (new file)
ok 5 - apply --directory -p (new file)
ok 6 - apply --directory (delete file)
ok 7 - apply --directory (quoted filename)
# passed all 7 test(s)
1..7
*** t4129-apply-samemode.sh ***
ok 1 - setup
ok 2 - same mode (no index)
ok 3 - same mode (with index)
ok 4 - same mode (index only)
ok 5 - mode update (no index)
ok 6 - mode update (with index)
ok 7 - mode update (index only)
ok 8 - empty mode is rejected
ok 9 - bogus mode is rejected
# passed all 9 test(s)
1..9
*** t4130-apply-criss-cross-rename.sh ***
ok 1 - setup
ok 2 - criss-cross rename
ok 3 - diff -M -B
ok 4 - apply
ok 5 - criss-cross rename
ok 6 - diff -M -B
ok 7 - apply
# passed all 7 test(s)
1..7
*** t4131-apply-fake-ancestor.sh ***
ok 1 - setup
ok 2 - apply --build-fake-ancestor
ok 3 - apply --build-fake-ancestor in a subdirectory
# passed all 3 test(s)
1..3
*** t4132-apply-removal.sh ***
ok 1 - setup
ok 2 - test addEast.patch
ok 3 - test addGMT.patch
ok 4 - test addWest.patch
ok 5 - test createEast.patch
ok 6 - test createGMT.patch
ok 7 - test createWest.patch
ok 8 - test emptyEast.patch
ok 9 - test emptyGMT.patch
ok 10 - test emptyWest.patch
ok 11 - test removeEast.patch
ok 12 - test removeGMT.patch
ok 13 - test removeWest.patch
ok 14 - test removeWest2.patch
# passed all 14 test(s)
1..14
*** t4133-apply-filenames.sh ***
ok 1 - setup
ok 2 - apply diff with inconsistent filenames in headers
ok 3 - apply diff with new filename missing from headers
ok 4 - apply diff with old filename missing from headers
# passed all 4 test(s)
1..4
*** t4134-apply-submodule.sh ***
ok 1 - setup
ok 2 - removing a submodule also removes all leading subdirectories
# passed all 2 test(s)
1..2
*** t4135-apply-weird-filenames.sh ***
ok 1 - setup
ok 2 - plain, git-style file creation patch
ok 3 - plain, traditional patch
ok 4 - plain, traditional file creation patch
ok 5 - with spaces, git-style file creation patch
ok 6 - with spaces, traditional patch
ok 7 - with spaces, traditional file creation patch
ok 8 - with tab, git-style file creation patch
ok 9 - with tab, traditional patch
ok 10 - with tab, traditional file creation patch
ok 11 - with backslash, git-style file creation patch
ok 12 - with backslash, traditional patch
ok 13 - with backslash, traditional file creation patch
ok 14 - with quote, git-style file creation patch
not ok 15 - with quote, traditional patch # TODO known breakage
ok 16 - with quote, traditional file creation patch
ok 17 - whitespace-damaged traditional patch
ok 18 - traditional patch with colon in timezone
ok 19 - traditional, whitespace-damaged, colon in timezone
ok 20 - apply handles a diff generated by Subversion
# still have 1 known breakage(s)
# passed all remaining 19 test(s)
1..20
*** t4136-apply-check.sh ***
ok 1 - setup
ok 2 - apply --check exits non-zero with unrecognized input
ok 3 - apply exits non-zero with no-op patch
ok 4 - invalid combination: create and copy
ok 5 - invalid combination: create and rename
# passed all 5 test(s)
1..5
*** t4137-apply-submodule.sh ***
ok 1 - apply_index: added submodule creates empty directory
ok 2 - apply_index: added submodule leaves existing empty directory alone
ok 3 - apply_index: replace tracked file with submodule creates empty directory
ok 4 - apply_index: replace directory with submodule
ok 5 - apply_index: removed submodule leaves submodule directory and its contents in place
ok 6 - apply_index: removed submodule leaves submodule containing a .git directory alone
ok 7 - apply_index: replace submodule with a directory must fail
ok 8 - apply_index: replace submodule containing a .git directory with a directory must fail
not ok 9 - apply_index: replace submodule with a file must fail # TODO known breakage
not ok 10 - apply_index: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - apply_index: modified submodule does not update submodule work tree
ok 12 - apply_index: modified submodule does not update submodule work tree to invalid commit
ok 13 - apply_index: modified submodule does not update submodule work tree from invalid commit
ok 14 - apply_index: added submodule doesn't remove untracked unignored file with same name
ok 15 - apply_3way: added submodule creates empty directory
ok 16 - apply_3way: added submodule leaves existing empty directory alone
ok 17 - apply_3way: replace tracked file with submodule creates empty directory
ok 18 - apply_3way: replace directory with submodule
ok 19 - apply_3way: removed submodule leaves submodule directory and its contents in place
ok 20 - apply_3way: removed submodule leaves submodule containing a .git directory alone
ok 21 - apply_3way: replace submodule with a directory must fail
ok 22 - apply_3way: replace submodule containing a .git directory with a directory must fail
not ok 23 - apply_3way: replace submodule with a file must fail # TODO known breakage
not ok 24 - apply_3way: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 25 - apply_3way: modified submodule does not update submodule work tree
ok 26 - apply_3way: modified submodule does not update submodule work tree to invalid commit
ok 27 - apply_3way: modified submodule does not update submodule work tree from invalid commit
ok 28 - apply_3way: added submodule doesn't remove untracked unignored file with same name
# still have 4 known breakage(s)
# passed all remaining 24 test(s)
1..28
*** t4138-apply-ws-expansion.sh ***
ok 1 - setup
ok 2 - apply with ws expansion (t=$t)
ok 3 - apply with ws expansion (t=$t)
ok 4 - apply with ws expansion (t=$t)
ok 5 - apply with ws expansion (t=$t)
# passed all 5 test(s)
1..5
*** t4139-apply-escape.sh ***
ok 1 - bump git repo one level down
ok 2 - cannot create file containing ..
ok 3 - can create file containing .. with --unsafe-paths
ok 4 - cannot create file containing .. (index)
ok 5 - cannot create file containing .. with --unsafe-paths (index)
ok 6 - cannot delete file containing ..
ok 7 - can delete file containing .. with --unsafe-paths
ok 8 - cannot delete file containing .. (index)
ok 9 - symlink escape via ..
ok 10 - symlink escape via .. (index)
ok 11 - symlink escape via absolute path
ok 12 - symlink escape via absolute path (index)
# passed all 12 test(s)
1..12
*** t4150-am.sh ***
ok 1 - setup: messages
ok 2 - setup
ok 3 - am applies patch correctly
ok 4 - am fails if index is dirty
ok 5 - am applies patch e-mail not in a mbox
ok 6 - am applies patch e-mail not in a mbox with CRLF
ok 7 - am applies patch e-mail with preceding whitespace
ok 8 - am applies stgit patch
ok 9 - am --patch-format=stgit applies stgit patch
ok 10 - am applies stgit series
ok 11 - am applies hg patch
ok 12 - am --patch-format=hg applies hg patch
ok 13 - am with applypatch-msg hook
ok 14 - am with failing applypatch-msg hook
ok 15 - am with pre-applypatch hook
ok 16 - am with failing pre-applypatch hook
ok 17 - am with post-applypatch hook
ok 18 - am with failing post-applypatch hook
ok 19 - am --scissors cuts the message at the scissors line
ok 20 - am --no-scissors overrides mailinfo.scissors
ok 21 - setup: new author and committer
ok 22 - am changes committer and keeps author
ok 23 - am --signoff adds Signed-off-by: line
ok 24 - am stays in branch
ok 25 - am --signoff does not add Signed-off-by: line if already there
ok 26 - am --signoff adds Signed-off-by: if another author is preset
ok 27 - am --signoff duplicates Signed-off-by: if it is not the last one
ok 28 - am without --keep removes Re: and [PATCH] stuff
ok 29 - am --keep really keeps the subject
ok 30 - am --keep-non-patch really keeps the non-patch part
ok 31 - setup am -3
ok 32 - am -3 falls back to 3-way merge
ok 33 - am -3 -p0 can read --no-prefix patch
ok 34 - am with config am.threeWay falls back to 3-way merge
ok 35 - am with config am.threeWay overridden by --no-3way
ok 36 - am can rename a file
ok 37 - am -3 can rename a file
ok 38 - am -3 can rename a file after falling back to 3-way merge
ok 39 - am -3 -q is quiet
ok 40 - am pauses on conflict
ok 41 - am --show-current-patch
ok 42 - am --skip works
ok 43 - am --abort removes a stray directory
ok 44 - am refuses patches when paused
ok 45 - am --resolved works
ok 46 - am --resolved fails if index has no changes
ok 47 - am --resolved fails if index has unmerged entries
ok 48 - am takes patches from a Pine mailbox
ok 49 - am fails on mail without patch
ok 50 - am fails on empty patch
ok 51 - am works from stdin in subdirectory
ok 52 - am works from file (relative path given) in subdirectory
ok 53 - am works from file (absolute path given) in subdirectory
ok 54 - am --committer-date-is-author-date
ok 55 - am without --committer-date-is-author-date
ok 56 - am --ignore-date
ok 57 - am into an unborn branch
ok 58 - am newline in subject
ok 59 - am -q is quiet
ok 60 - am empty-file does not infloop
ok 61 - am --message-id really adds the message id
ok 62 - am.messageid really adds the message id
ok 63 - am --message-id -s signs off after the message id
ok 64 - am -3 works with rerere
ok 65 - am -s unexpected trailer block
ok 66 - am --patch-format=mboxrd handles mboxrd
ok 67 - am works with multi-line in-body headers
ok 68 - am --quit keeps HEAD where it is
# passed all 68 test(s)
1..68
*** t4151-am-abort.sh ***
ok 1 - setup
ok 2 - am stops at a patch that does not apply
ok 3 - am --skip continue after failed am
ok 4 - am --abort goes back after failed am
ok 5 - am -3 stops at a patch that does not apply
ok 6 - am -3 --skip continue after failed am -3
ok 7 - am --abort goes back after failed am -3
ok 8 - am -3 --skip removes otherfile-4
ok 9 - am -3 --abort removes otherfile-4
ok 10 - am --abort will keep the local commits intact
ok 11 - am --abort will keep dirty index intact
ok 12 - am -3 stops on conflict on unborn branch
ok 13 - am -3 --skip clears index on unborn branch
ok 14 - am -3 --abort removes otherfile-4 on unborn branch
ok 15 - am -3 --abort on unborn branch removes applied commits
ok 16 - am --abort on unborn branch will keep local commits intact
ok 17 - am --skip leaves index stat info alone
ok 18 - am --abort leaves index stat info alone
# passed all 18 test(s)
1..18
*** t4152-am-subjects.sh ***
ok 1 - setup baseline commit
ok 2 - create patches with short subject
ok 3 - create patches with long subject
ok 4 - create patches with multiline subject
ok 5 - short subject preserved (format-patch | am)
ok 6 - short subject preserved (format-patch -k | am)
ok 7 - short subject preserved (format-patch -k | am -k)
ok 8 - long subject preserved (format-patch | am)
ok 9 - long subject preserved (format-patch -k | am)
ok 10 - long subject preserved (format-patch -k | am -k)
ok 11 - multiline subject unwrapped (format-patch | am)
ok 12 - multiline subject unwrapped (format-patch -k | am)
ok 13 - multiline subject preserved (format-patch -k | am -k)
# passed all 13 test(s)
1..13
*** t4153-am-resume-override-opts.sh ***
ok 1 - setup
ok 2 # skip --3way overrides --no-3way (missing TTY)
ok 3 - --no-quiet overrides --quiet
ok 4 - --signoff overrides --no-signoff
ok 5 # skip --reject overrides --no-reject (missing TTY)
# passed all 5 test(s)
1..5
*** t4200-rerere.sh ***
ok 1 - setup
ok 2 - nothing recorded without rerere
ok 3 - activate rerere, old style (conflicting merge)
ok 4 - rerere.enabled works, too
ok 5 - set up rr-cache
ok 6 - rr-cache looks sane
ok 7 - rerere diff
ok 8 - rerere status
ok 9 - first postimage wins
ok 10 - rerere updates postimage timestamp
ok 11 - rerere clear
ok 12 - leftover directory
ok 13 - missing preimage
ok 14 - set up for garbage collection tests
ok 15 - gc preserves young or recently used records
ok 16 - old records rest in peace
ok 17 - rerere gc with custom expiry (5, 0)
ok 18 - rerere gc with custom expiry (5.days.ago, now)
ok 19 - setup: file2 added differently in two branches
ok 20 - resolution was recorded properly
ok 21 - rerere.autoupdate
ok 22 - merge --rerere-autoupdate
ok 23 - merge --no-rerere-autoupdate
ok 24 - set up an unresolved merge
ok 25 - explicit rerere
ok 26 - explicit rerere with autoupdate
ok 27 - explicit rerere --rerere-autoupdate overrides
ok 28 - rerere --no-no-rerere-autoupdate
ok 29 - rerere -h
ok 30 - multiple identical conflicts
# passed all 30 test(s)
1..30
*** t4201-shortlog.sh ***
ok 1 - setup
ok 2 - default output format
ok 3 - pretty format
ok 4 - --abbrev
ok 5 - output from user-defined format is re-wrapped
ok 6 - shortlog wrapping
ok 7 - shortlog from non-git directory
ok 8 - shortlog can read --format=raw output
ok 9 - shortlog from non-git directory refuses extra arguments
ok 10 - shortlog should add newline when input line matches wraplen
ok 11 - shortlog encoding
ok 12 - shortlog with revision pseudo options
ok 13 - shortlog with --output=<file>
ok 14 - shortlog --committer (internal)
ok 15 - shortlog --committer (external)
# passed all 15 test(s)
1..15
*** t4202-log.sh ***
ok 1 - setup
ok 2 - pretty
ok 3 - pretty (tformat)
ok 4 - pretty (shortcut)
ok 5 - format
ok 6 - format %w(11,1,2)
ok 7 - format %w(,1,2)
ok 8 - oneline
ok 9 - diff-filter=A
ok 10 - diff-filter=M
ok 11 - diff-filter=D
ok 12 - diff-filter=R
ok 13 - diff-filter=C
ok 14 - git log --follow
ok 15 - git config log.follow works like --follow
ok 16 - git config log.follow does not die with multiple paths
ok 17 - git config log.follow does not die with no paths
ok 18 - git config log.follow is overridden by --no-follow
ok 19 - git log --no-walk <commits> sorts by commit time
ok 20 - git log --no-walk=sorted <commits> sorts by commit time
ok 21 - git log --line-prefix="=== " --no-walk <commits> sorts by commit time
ok 22 - git log --no-walk=unsorted <commits> leaves list of commits as given
ok 23 - git show <commits> leaves list of commits as given
ok 24 - setup case sensitivity tests
ok 25 - log --grep
ok 26 - log --invert-grep --grep
ok 27 - log --invert-grep --grep -i
ok 28 - log --grep option parsing
ok 29 - log -i --grep
ok 30 - log --grep -i
ok 31 - log -F -E --grep=<ere> uses ere
ok 32 - log -F -E --perl-regexp --grep=<pcre> uses PCRE
ok 33 - log with grep.patternType configuration
ok 34 - log with grep.patternType configuration and command line
ok 35 - log with various grep.patternType configurations & command-lines
ok 36 - simple log --graph
ok 37 - simple log --graph --line-prefix="123 "
ok 38 - set up merge history
ok 39 - log --graph with merge
ok 40 - log --graph --line-prefix="| | | " with merge
ok 41 - log --graph with merge with log.graphColors
ok 42 - log --raw --graph -m with merge
ok 43 - diff-tree --graph
ok 44 - log --graph with full output
ok 45 - set up more tangled history
ok 46 - log --graph with merge
ok 47 - log.decorate configuration
ok 48 - decorate-refs with glob
ok 49 - decorate-refs without globs
ok 50 - multiple decorate-refs
ok 51 - decorate-refs-exclude with glob
ok 52 - decorate-refs-exclude without globs
ok 53 - multiple decorate-refs-exclude
ok 54 - decorate-refs and decorate-refs-exclude
ok 55 - log.decorate config parsing
ok 56 # skip log output on a TTY (missing TTY)
ok 57 - reflog is expected format
ok 58 - whatchanged is expected format
ok 59 - log.abbrevCommit configuration
ok 60 - show added path under "--follow -M"
ok 61 - git log -c --follow
ok 62 - log --graph with diff and stats
ok 63 - log --line-prefix="*** " --graph with diff and stats
ok 64 - log --graph with --name-status
ok 65 - log --graph with --name-only
ok 66 - dotdot is a parent directory
ok 67 # skip setup signed branch (missing GPG)
ok 68 # skip setup signed branch x509 (missing GPGSM)
ok 69 # skip log --graph --show-signature (missing GPG)
ok 70 # skip log --graph --show-signature x509 (missing GPGSM)
ok 71 # skip log --graph --show-signature for merged tag (missing GPG)
ok 72 # skip log --graph --show-signature for merged tag x509 (missing GPGSM)
ok 73 # skip --no-show-signature overrides --show-signature (missing GPG)
ok 74 # skip log.showsignature=true behaves like --show-signature (missing GPG)
ok 75 # skip --no-show-signature overrides log.showsignature=true (missing GPG)
ok 76 # skip --show-signature overrides log.showsignature=false (missing GPG)
ok 77 - log --graph --no-walk is forbidden
ok 78 - log diagnoses bogus HEAD
ok 79 - log does not default to HEAD when rev input is given
ok 80 - set up --source tests
ok 81 - log --source paints branch names
ok 82 - log --source paints tag names
ok 83 - log --source paints symmetric ranges
# passed all 83 test(s)
1..83
*** t4203-mailmap.sh ***
ok 1 - setup
ok 2 - check-mailmap no arguments
ok 3 - check-mailmap arguments
ok 4 - check-mailmap --stdin
ok 5 - check-mailmap --stdin arguments
ok 6 - check-mailmap bogus contact
ok 7 - No mailmap
ok 8 - default .mailmap
ok 9 - mailmap.file set
ok 10 - mailmap.file override
ok 11 - mailmap.file non-existent
ok 12 - name entry after email entry
ok 13 - name entry after email entry, case-insensitive
ok 14 - No mailmap files, but configured
ok 15 - setup mailmap blob tests
ok 16 - mailmap.blob set
ok 17 - mailmap.blob overrides .mailmap
ok 18 - mailmap.file overrides mailmap.blob
ok 19 - mailmap.blob can be missing
ok 20 - mailmap.blob defaults to off in non-bare repo
ok 21 - mailmap.blob defaults to HEAD:.mailmap in bare repo
ok 22 - mailmap.blob can handle blobs without trailing newline
ok 23 - cleanup after mailmap.blob tests
ok 24 - single-character name
ok 25 - preserve canonical email case
ok 26 - Shortlog output (complex mapping)
ok 27 - Log output (complex mapping)
ok 28 - Log output with --use-mailmap
ok 29 - Log output with log.mailmap
ok 30 - Grep author with --use-mailmap
ok 31 - Grep author with log.mailmap
ok 32 - Only grep replaced author with --use-mailmap
ok 33 - Blame output (complex mapping)
ok 34 - commit --author honors mailmap
# passed all 34 test(s)
1..34
*** t4204-patch-id.sh ***
ok 1 - setup
ok 2 - patch-id output is well-formed
ok 3 - patch-id detects equality
ok 4 - patch-id detects inequality
ok 5 - patch-id supports git-format-patch output
ok 6 - whitespace is irrelevant in footer
ok 7 - file order is irrelevant with --stable
ok 8 - file order is relevant with --unstable
ok 9 - default is unstable
ok 10 - patchid.stable = true is stable
ok 11 - patchid.stable = false is unstable
ok 12 - --unstable overrides patchid.stable = true
ok 13 - --stable overrides patchid.stable = false
ok 14 - patch-id supports git-format-patch MIME output
ok 15 - patch-id respects config from subdir
ok 16 - patch-id handles no-nl-at-eof markers
# passed all 16 test(s)
1..16
*** t4205-log-pretty-formats.sh ***
ok 1 - set up basic repos
ok 2 - alias builtin format
ok 3 - alias masking builtin format
ok 4 - alias user-defined format
ok 5 - alias user-defined tformat with %s (ISO8859-1 encoding)
ok 6 - alias user-defined tformat with %s (utf-8 encoding)
ok 7 - alias user-defined tformat
ok 8 - alias non-existent format
ok 9 - alias of an alias
ok 10 - alias masking an alias
ok 11 - alias loop
ok 12 - NUL separation
ok 13 - NUL termination
ok 14 - NUL separation with --stat
not ok 15 - NUL termination with --stat # TODO known breakage
ok 16 - setup more commits
ok 17 - left alignment formatting
ok 18 - left alignment formatting. i18n.logOutputEncoding
ok 19 - left alignment formatting at the nth column
ok 20 - left alignment formatting at the nth column
ok 21 - left alignment formatting at the nth column. i18n.logOutputEncoding
ok 22 - left alignment formatting with no padding
ok 23 - left alignment formatting with no padding. i18n.logOutputEncoding
ok 24 - left alignment formatting with trunc
ok 25 - left alignment formatting with trunc. i18n.logOutputEncoding
ok 26 - left alignment formatting with ltrunc
ok 27 - left alignment formatting with ltrunc. i18n.logOutputEncoding
ok 28 - left alignment formatting with mtrunc
ok 29 - left alignment formatting with mtrunc. i18n.logOutputEncoding
ok 30 - right alignment formatting
ok 31 - right alignment formatting. i18n.logOutputEncoding
ok 32 - right alignment formatting at the nth column
ok 33 - right alignment formatting at the nth column
ok 34 - right alignment formatting at the nth column. i18n.logOutputEncoding
ok 35 - right alignment formatting at the nth column with --graph. i18n.logOutputEncoding
ok 36 - right alignment formatting with no padding
ok 37 - right alignment formatting with no padding and with --graph
ok 38 - right alignment formatting with no padding. i18n.logOutputEncoding
ok 39 - center alignment formatting
ok 40 - center alignment formatting. i18n.logOutputEncoding
ok 41 - center alignment formatting at the nth column
ok 42 - center alignment formatting at the nth column
ok 43 - center alignment formatting at the nth column. i18n.logOutputEncoding
ok 44 - center alignment formatting with no padding
ok 45 - center alignment formatting with no padding. i18n.logOutputEncoding
ok 46 - left/right alignment formatting with stealing
ok 47 - left/right alignment formatting with stealing. i18n.logOutputEncoding
ok 48 - strbuf_utf8_replace() not producing NUL
ok 49 - ISO and ISO-strict date formats display the same values
ok 50 - set up log decoration tests
ok 51 - log decoration properly follows tag chain
ok 52 - clean log decoration
ok 53 - set up trailer tests
ok 54 - pretty format %(trailers) shows trailers
ok 55 - %(trailers:only) shows only "key: value" trailers
ok 56 - %(trailers:unfold) unfolds trailers
ok 57 - :only and :unfold work together
# still have 1 known breakage(s)
# passed all remaining 56 test(s)
1..57
*** t4206-log-follow-harder-copies.sh ***
ok 1 - add a file path0 and commit.
ok 2 - Change path0.
ok 3 - copy path0 to path1.
ok 4 - find the copy path0 -> path1 harder
ok 5 - validate the output.
# passed all 5 test(s)
1..5
*** t4207-log-decoration-colors.sh ***
ok 1 - setup
ok 2 - Commit Decorations Colored Correctly
# passed all 2 test(s)
1..2
*** t4208-log-magic-pathspec.sh ***
ok 1 - setup
ok 2 - "git log :/" should not be ambiguous
ok 3 - "git log :/a" should be ambiguous (applied both rev and worktree)
ok 4 - "git log :/a -- " should not be ambiguous
ok 5 - "git log :/detached -- " should find a commit only in HEAD
ok 6 - "git log :/detached -- " should not find an orphaned commit
ok 7 - "git log :/detached -- " should find HEAD only of own worktree
ok 8 - "git log -- :/a" should not be ambiguous
ok 9 - "git log :/in" should not be ambiguous
ok 10 - "git log :" should be ambiguous
ok 11 - git log -- :
ok 12 - git log HEAD -- :/
ok 13 - "git log :^sub" is not ambiguous
ok 14 - "git log :^does-not-exist" does not match anything
ok 15 - "git log :!" behaves the same as :^
ok 16 - "git log :(exclude)sub" is not ambiguous
ok 17 - "git log :(exclude)sub --" must resolve as an object
ok 18 - "git log :(unknown-magic) complains of bogus magic
ok 19 - command line pathspec parsing for "git log"
ok 20 - tree_entry_interesting does not match past submodule boundaries
# passed all 20 test(s)
1..20
*** t4209-log-pickaxe.sh ***
ok 1 - setup
ok 2 - log --grep (match)
ok 3 - log --grep (nomatch)
ok 4 - log --grep --regexp-ignore-case (match)
ok 5 - log --grep -i (match)
ok 6 - log --grep --regexp-ignore-case (nomatch)
ok 7 - log --grep -i (nomatch)
ok 8 - log --author (match)
ok 9 - log --author (nomatch)
ok 10 - log --author --regexp-ignore-case (match)
ok 11 - log --author -i (match)
ok 12 - log --author --regexp-ignore-case (nomatch)
ok 13 - log --author -i (nomatch)
ok 14 - log -G (nomatch)
ok 15 - log -G (match)
ok 16 - log -G --regexp-ignore-case (nomatch)
ok 17 - log -G -i (nomatch)
ok 18 - log -G --regexp-ignore-case (match)
ok 19 - log -G -i (match)
ok 20 - log -G --textconv (missing textconv tool)
ok 21 - log -G --no-textconv (missing textconv tool)
ok 22 - log -S (nomatch)
ok 23 - log -S (match)
ok 24 - log -S --regexp-ignore-case (match)
ok 25 - log -S -i (match)
ok 26 - log -S --regexp-ignore-case (nomatch)
ok 27 - log -S -i (nomatch)
ok 28 - log -S --pickaxe-regex (nomatch)
ok 29 - log -S --pickaxe-regex (match)
ok 30 - log -S --pickaxe-regex --regexp-ignore-case (match)
ok 31 - log -S --pickaxe-regex -i (match)
ok 32 - log -S --pickaxe-regex --regexp-ignore-case (nomatch)
ok 33 - log -S --pickaxe-regex -i (nomatch)
ok 34 - log -S --textconv (missing textconv tool)
ok 35 - log -S --no-textconv (missing textconv tool)
# passed all 35 test(s)
1..35
*** t4210-log-i18n.sh ***
ok 1 - create commits in different encodings
ok 2 - log --grep searches in log output encoding (utf8)
ok 3 - log --grep searches in log output encoding (latin1)
ok 4 - log --grep does not find non-reencoded values (utf8)
ok 5 - log --grep does not find non-reencoded values (latin1)
# passed all 5 test(s)
1..5
*** t4211-line-log.sh ***
ok 1 - setup (import history)
ok 2 - -L 4,12:a.c simple
ok 3 - -L 4,+9:a.c simple
ok 4 - -L '/long f/,/^}/:a.c' simple
ok 5 - -L :f:a.c simple
ok 6 - -L '/main/,/^}/:a.c' simple
ok 7 - -L :main:a.c simple
ok 8 - -L 1,+4:a.c simple
ok 9 - -L 20:a.c simple
ok 10 - -L '/long f/',/^}/:a.c -L /main/,/^}/:a.c simple
ok 11 - -L 24,+1:a.c simple
ok 12 - -M -L '/long f/,/^}/:b.c' move-support
ok 13 - -M -L ':f:b.c' parallel-change
ok 14 - -L 4,12:a.c -L :main:a.c simple
ok 15 - -L 4,18:a.c -L ^:main:a.c simple
ok 16 - -L :main:a.c -L 4,18:a.c simple
ok 17 - -L 4:a.c -L 8,12:a.c simple
ok 18 - -L 8,12:a.c -L 4:a.c simple
ok 19 - invalid args: -L
ok 20 - invalid args: -L b.c
ok 21 - invalid args: -L 1:
ok 22 - invalid args: -L 1:nonexistent
ok 23 - invalid args: -L 1:simple
ok 24 - invalid args: -L '/foo:b.c'
ok 25 - invalid args: -L 1000:b.c
ok 26 - invalid args: -L :b.c
ok 27 - invalid args: -L :foo:b.c
ok 28 - -L X (X == nlines)
ok 29 - -L X (X == nlines + 1)
ok 30 - -L X (X == nlines + 2)
ok 31 - -L ,Y (Y == nlines)
ok 32 - -L ,Y (Y == nlines + 1)
ok 33 - -L ,Y (Y == nlines + 2)
ok 34 - -L with --first-parent and a merge
ok 35 - -L with --output
ok 36 - range_set_union
# passed all 36 test(s)
1..36
*** t4212-log-corrupt.sh ***
ok 1 - setup
ok 2 - fsck notices broken commit
ok 3 - git log with broken author email
ok 4 - git log --format with broken author email
ok 5 - unparsable dates produce sentinel value
ok 6 - unparsable dates produce sentinel value (%ad)
ok 7 - date parser recognizes integer overflow
ok 8 - date parser recognizes time_t overflow
ok 9 - absurdly far-in-future date
# passed all 9 test(s)
1..9
*** t4213-log-tabexpand.sh ***
ok 1 - setup
ok 2 - expand/no-expand
ok 3 - expand/no-expand for --pretty
ok 4 - expand/no-expand for --pretty=short
ok 5 - expand/no-expand for --pretty=medium
ok 6 - expand/no-expand for --pretty=full
ok 7 - expand/no-expand for --pretty=fuller
ok 8 - expand/no-expand for --pretty=raw
ok 9 - expand/no-expand for --pretty=email
# passed all 9 test(s)
1..9
*** t4252-am-options.sh ***
ok 1 - setup
ok 2 - interrupted am --whitespace=fix
ok 3 - interrupted am -C1
ok 4 - interrupted am -p2
ok 5 - interrupted am -C1 -p2
ok 6 - interrupted am --directory="frotz nitfol"
ok 7 - apply to a funny path
ok 8 - am --reject
# passed all 8 test(s)
1..8
*** t4253-am-keep-cr-dos.sh ***
ok 1 - setup repository with dos files
ok 2 - am with dos files without --keep-cr
ok 3 - am with dos files with --keep-cr
ok 4 - am with dos files config am.keepcr
ok 5 - am with dos files config am.keepcr overridden by --no-keep-cr
ok 6 - am with dos files with --keep-cr continue
ok 7 - am with unix files config am.keepcr overridden by --no-keep-cr
# passed all 7 test(s)
1..7
*** t4254-am-corrupt.sh ***
ok 1 - setup
ok 2 - try to apply corrupted patch
ok 3 - compare diagnostic; ensure file is still here
# passed all 3 test(s)
1..3
*** t4255-am-submodule.sh ***
ok 1 - am: added submodule creates empty directory
ok 2 - am: added submodule leaves existing empty directory alone
ok 3 - am: replace tracked file with submodule creates empty directory
ok 4 - am: replace directory with submodule
ok 5 - am: removed submodule leaves submodule directory and its contents in place
ok 6 - am: removed submodule leaves submodule containing a .git directory alone
ok 7 - am: replace submodule with a directory must fail
ok 8 - am: replace submodule containing a .git directory with a directory must fail
not ok 9 - am: replace submodule with a file must fail # TODO known breakage
not ok 10 - am: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - am: modified submodule does not update submodule work tree
ok 12 - am: modified submodule does not update submodule work tree to invalid commit
ok 13 - am: modified submodule does not update submodule work tree from invalid commit
ok 14 - am: added submodule doesn't remove untracked unignored file with same name
ok 15 - am_3way: added submodule creates empty directory
ok 16 - am_3way: added submodule leaves existing empty directory alone
ok 17 - am_3way: replace tracked file with submodule creates empty directory
ok 18 - am_3way: replace directory with submodule
ok 19 - am_3way: removed submodule leaves submodule directory and its contents in place
ok 20 - am_3way: removed submodule leaves submodule containing a .git directory alone
not ok 21 - am_3way: replace submodule with a directory must fail # TODO known breakage
not ok 22 - am_3way: replace submodule containing a .git directory with a directory must fail # TODO known breakage
not ok 23 - am_3way: replace submodule with a file must fail # TODO known breakage
not ok 24 - am_3way: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 25 - am_3way: modified submodule does not update submodule work tree
ok 26 - am_3way: modified submodule does not update submodule work tree to invalid commit
ok 27 - am_3way: modified submodule does not update submodule work tree from invalid commit
ok 28 - am_3way: added submodule doesn't remove untracked unignored file with same name
ok 29 - setup diff.submodule
ok 30 - diff.submodule unset
ok 31 - diff.submodule unset with extra file
ok 32 - diff.submodule=log
ok 33 - diff.submodule=log with extra file
# still have 6 known breakage(s)
# passed all remaining 27 test(s)
1..33
*** t4300-merge-tree.sh ***
ok 1 - setup
ok 2 - file add A, !B
ok 3 - file add !A, B
ok 4 - file add A, B (same)
ok 5 - file add A, B (different)
ok 6 - file change A, !B
ok 7 - file change !A, B
ok 8 - file change A, B (same)
ok 9 - file change A, B (different)
ok 10 - file change A, B (mixed)
ok 11 - file remove A, !B
ok 12 - file remove !A, B
ok 13 - file remove A, B (same)
ok 14 - file change A, remove B
ok 15 - file remove A, change B
ok 16 - tree add A, B (same)
ok 17 - tree add A, B (different)
ok 18 - tree unchanged A, removed B
ok 19 - turn file to tree
ok 20 - turn tree to file
# passed all 20 test(s)
1..20
*** t5000-tar-tree.sh ***
ok 1 - populate workdir
ok 2 - add ignored file
ok 3 - add files to repository
ok 4 - setup export-subst
ok 5 - create bare clone
ok 6 - remove ignored file
ok 7 - git archive
ok 8 -  extract tar archive
ok 9 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)
ok 10 -  validate filenames
ok 11 -  validate file contents
ok 12 - git archive --prefix=prefix/
ok 13 -  extract tar archive
ok 14 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)
ok 15 -  validate filenames
ok 16 -  validate file contents
ok 17 - git-archive --prefix=olde-
ok 18 -  extract tar archive
ok 19 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)
ok 20 -  validate filenames
ok 21 -  validate file contents
ok 22 - git archive on large files
ok 23 - git archive in a bare repo
ok 24 - git archive vs. the same in a bare repo
ok 25 - git archive with --output
ok 26 - git archive --remote
ok 27 - git archive --remote with configured remote
ok 28 - validate file modification time
ok 29 - git get-tar-commit-id
ok 30 - git archive with --output, override inferred format
ok 31 - git archive --list outside of a git repo
ok 32 - git archive --remote outside of a git repo
ok 33 - clients cannot access unreachable commits
ok 34 - upload-archive can allow unreachable commits
ok 35 - setup tar filters
ok 36 - archive --list mentions user filter
ok 37 - archive --list shows only enabled remote filters
ok 38 - invoke tar filter by format
ok 39 - invoke tar filter by extension
ok 40 - default output format remains tar
ok 41 - extension matching requires dot
ok 42 - only enabled filters are available remotely
ok 43 - git archive --format=tgz
ok 44 - git archive --format=tar.gz
ok 45 - infer tgz from .tgz filename
ok 46 - infer tgz from .tar.gz filename
ok 47 - extract tgz file
ok 48 - remote tar.gz is allowed by default
ok 49 - remote tar.gz can be disabled
ok 50 - archive and :(glob)
ok 51 - catch non-matching pathspec
ok 52 - set up repository with huge blob
ok 53 - generate tar with huge size
ok 54 - system tar can read our huge size
ok 55 - set up repository with far-future commit
ok 56 - generate tar with future mtime
ok 57 - system tar can read our future mtime
# passed all 57 test(s)
1..57
*** t5001-archive-attr.sh ***
ok 1 - setup
ok 2 - git archive
ok 3 -  archive/ignored does not exist
ok 4 -  archive/ignored-by-tree does not exist
ok 5 -  archive/ignored-by-tree.d does not exist
ok 6 -  archive/ignored-by-tree.d/file does not exist
ok 7 -  archive/ignored-by-worktree exists
ok 8 -  archive/excluded-by-pathspec.d exists
ok 9 -  archive/excluded-by-pathspec.d/file exists
ok 10 - git archive with pathspec
ok 11 -  archive-pathspec/ignored does not exist
ok 12 -  archive-pathspec/ignored-by-tree does not exist
ok 13 -  archive-pathspec/ignored-by-tree.d does not exist
ok 14 -  archive-pathspec/ignored-by-tree.d/file does not exist
ok 15 -  archive-pathspec/ignored-by-worktree exists
ok 16 -  archive-pathspec/excluded-by-pathspec.d does not exist
ok 17 -  archive-pathspec/excluded-by-pathspec.d/file does not exist
ok 18 - git archive with wildcard pathspec
ok 19 -  archive-pathspec-wildcard/ignored does not exist
ok 20 -  archive-pathspec-wildcard/ignored-by-tree does not exist
ok 21 -  archive-pathspec-wildcard/ignored-by-tree.d does not exist
ok 22 -  archive-pathspec-wildcard/ignored-by-tree.d/file does not exist
ok 23 -  archive-pathspec-wildcard/ignored-by-worktree exists
ok 24 -  archive-pathspec-wildcard/excluded-by-pathspec.d does not exist
ok 25 -  archive-pathspec-wildcard/excluded-by-pathspec.d/file does not exist
ok 26 - git archive with worktree attributes
ok 27 -  worktree/ignored does not exist
ok 28 -  worktree/ignored-by-tree exists
ok 29 -  worktree/ignored-by-worktree does not exist
ok 30 - git archive --worktree-attributes option
ok 31 -  worktree2/ignored does not exist
ok 32 -  worktree2/ignored-by-tree exists
ok 33 -  worktree2/ignored-by-worktree does not exist
ok 34 - git archive vs. bare
ok 35 - git archive with worktree attributes, bare
ok 36 -  bare-worktree/ignored does not exist
ok 37 -  bare-worktree/ignored-by-tree exists
ok 38 -  bare-worktree/ignored-by-worktree exists
ok 39 - export-subst
# passed all 39 test(s)
1..39
*** t5002-archive-attr-pattern.sh ***
ok 1 - setup
ok 2 - git archive
ok 3 -  archive/ignored does not exist
ok 4 -  archive/not-ignored-dir/ignored does not exist
ok 5 -  archive/not-ignored-dir/ignored-only-if-dir exists
ok 6 -  archive/not-ignored-dir/ exists
ok 7 -  archive/ignored-only-if-dir/ does not exist
ok 8 -  archive/ignored-ony-if-dir/ignored-by-ignored-dir does not exist
ok 9 -  archive/ignored-without-slash/ does not exist
ok 10 -  archive/ignored-without-slash/foo does not exist
ok 11 -  archive/wildcard-without-slash/ does not exist
ok 12 -  archive/wildcard-without-slash/foo does not exist
ok 13 -  archive/deep/and/slashless/ does not exist
ok 14 -  archive/deep/and/slashless/foo does not exist
ok 15 -  archive/deep/with/wildcard/ does not exist
ok 16 -  archive/deep/with/wildcard/foo does not exist
ok 17 -  archive/one-level-lower/ does not exist
ok 18 -  archive/one-level-lower/two-levels-lower/ignored-only-if-dir/ does not exist
ok 19 -  archive/one-level-lower/two-levels-lower/ignored-ony-if-dir/ignored-by-ignored-dir does not exist
# passed all 19 test(s)
1..19
*** t5003-archive-zip.sh ***
ok 1 - populate workdir
ok 2 - add symlink
ok 3 - prepare file list
ok 4 - add ignored file
ok 5 - add files to repository
ok 6 - setup export-subst and diff attributes
ok 7 - create bare clone
ok 8 - remove ignored file
ok 9 - git archive --format=zip
ok 10 -  extract ZIP archive
ok 11 -  validate filenames
ok 12 -  validate file contents
ok 13 -  extract ZIP archive with EOL conversion
ok 14 -  validate that text files are converted
ok 15 -  validate that binary files are unchanged
ok 16 -  validate that diff files are converted
ok 17 -  validate that -diff files are unchanged
ok 18 -  validate that custom diff is unchanged 
ok 19 - git archive --format=zip in a bare repo
ok 20 - git archive --format=zip vs. the same in a bare repo
ok 21 - git archive --format=zip with --output
ok 22 - git archive with --output, inferring format
ok 23 - git archive --format=zip with prefix
ok 24 -  extract ZIP archive
ok 25 -  validate filenames
ok 26 -  validate file contents
ok 27 -  extract ZIP archive with EOL conversion
ok 28 -  validate that text files are converted
ok 29 -  validate that binary files are unchanged
ok 30 -  validate that diff files are converted
ok 31 -  validate that -diff files are unchanged
ok 32 -  validate that custom diff is unchanged 
ok 33 - git archive -0 --format=zip on large files
ok 34 -  extract ZIP archive
ok 35 -  validate filenames
ok 36 -  validate file contents
ok 37 -  extract ZIP archive with EOL conversion
ok 38 -  validate that text files are converted
ok 39 -  validate that binary files are unchanged
ok 40 -  validate that diff files are converted
ok 41 -  validate that -diff files are unchanged
ok 42 -  validate that custom diff is unchanged 
ok 43 - git archive --format=zip on large files
ok 44 -  extract ZIP archive
ok 45 -  validate filenames
ok 46 -  validate file contents
ok 47 -  extract ZIP archive with EOL conversion
ok 48 -  validate that text files are converted
ok 49 -  validate that binary files are unchanged
ok 50 -  validate that diff files are converted
ok 51 -  validate that -diff files are unchanged
ok 52 -  validate that custom diff is unchanged 
# passed all 52 test(s)
1..52
*** t5004-archive-corner-cases.sh ***
ok 1 - create commit with empty tree
ok 2 - tar archive of commit with empty tree
ok 3 - tar archive of empty tree is empty
ok 4 - tar archive of empty tree with prefix
ok 5 - zip archive of empty tree is empty
ok 6 - zip archive of empty tree with prefix
ok 7 - archive complains about pathspec on empty tree
ok 8 - create a commit with an empty subtree
ok 9 - archive empty subtree with no pathspec
ok 10 - archive empty subtree by direct pathspec
ok 11 - zip archive with many entries
ok 12 # skip zip archive bigger than 4GB (missing EXPENSIVE of EXPENSIVE,UNZIP,UNZIP_ZIP64_SUPPORT)
ok 13 # skip zip archive with files bigger than 4GB (missing EXPENSIVE of EXPENSIVE,LONG_IS_64BIT,UNZIP,UNZIP_ZIP64_SUPPORT,ZIPINFO)
# passed all 13 test(s)
1..13
*** t5100-mailinfo.sh ***
ok 1 - split sample box
ok 2 - mailinfo 0001
ok 3 - mailinfo 0002
ok 4 - mailinfo 0003
ok 5 - mailinfo 0004
ok 6 - mailinfo 0005
ok 7 - mailinfo 0006
ok 8 - mailinfo 0007
ok 9 - mailinfo 0008
ok 10 - mailinfo 0009
ok 11 - mailinfo 0010
ok 12 - mailinfo 0011
ok 13 - mailinfo 0012
ok 14 - mailinfo 0013
ok 15 - mailinfo 0014
ok 16 - mailinfo 0015
ok 17 - mailinfo 0016
ok 18 - mailinfo 0017
ok 19 - mailinfo 0018
ok 20 - split box with rfc2047 samples
ok 21 - mailinfo rfc2047/0001
ok 22 - mailinfo rfc2047/0002
ok 23 - mailinfo rfc2047/0003
ok 24 - mailinfo rfc2047/0004
ok 25 - mailinfo rfc2047/0005
ok 26 - mailinfo rfc2047/0006
ok 27 - mailinfo rfc2047/0007
ok 28 - mailinfo rfc2047/0008
ok 29 - mailinfo rfc2047/0009
ok 30 - mailinfo rfc2047/0010
ok 31 - mailinfo rfc2047/0011
ok 32 - respect NULs
ok 33 - Preserve NULs out of MIME encoded message
ok 34 - mailinfo on from header without name works
ok 35 - mailinfo finds headers after embedded From line
ok 36 - mailinfo on message with quoted >From
ok 37 - mailinfo unescapes with --mboxrd
ok 38 - mailinfo handles rfc2822 quoted-string
ok 39 - mailinfo handles rfc2822 comment
ok 40 - mailinfo with mailinfo.scissors config
ok 41 - mailinfo no options
ok 42 - mailinfo -k
ok 43 - mailinfo -b no [PATCH]
ok 44 - mailinfo -b leading [PATCH]
ok 45 - mailinfo -b double [PATCH]
not ok 46 - mailinfo -b trailing [PATCH] # TODO known breakage
not ok 47 - mailinfo -b separated double [PATCH] # TODO known breakage
# still have 2 known breakage(s)
# passed all remaining 45 test(s)
1..47
*** t5150-request-pull.sh ***
ok 1 - setup
ok 2 - setup: two scripts for reading pull requests
ok 3 - pull request when forgot to push
ok 4 - pull request after push
ok 5 - request asks HEAD to be pulled
ok 6 - pull request format
ok 7 - request-pull ignores OPTIONS_KEEPDASHDASH poison
# passed all 7 test(s)
1..7
*** t5300-pack-object.sh ***
ok 1 - setup
ok 2 - pack without delta
ok 3 - pack-objects with bogus arguments
ok 4 - unpack without delta
ok 5 - check unpack without delta
ok 6 - pack with REF_DELTA
ok 7 - unpack with REF_DELTA
ok 8 - check unpack with REF_DELTA
ok 9 - pack with OFS_DELTA
ok 10 - unpack with OFS_DELTA
ok 11 - check unpack with OFS_DELTA
ok 12 - compare delta flavors
ok 13 - use packed objects
ok 14 - use packed deltified (REF_DELTA) objects
ok 15 - use packed deltified (OFS_DELTA) objects
ok 16 - survive missing objects/pack directory
ok 17 - verify pack
ok 18 - verify pack -v
ok 19 - verify-pack catches mismatched .idx and .pack files
ok 20 - verify-pack catches a corrupted pack signature
ok 21 - verify-pack catches a corrupted pack version
ok 22 - verify-pack catches a corrupted type/size of the 1st packed object data
ok 23 - verify-pack catches a corrupted sum of the index file itself
ok 24 - build pack index for an existing pack
ok 25 - unpacking with --strict
ok 26 - index-pack with --strict
ok 27 - honor pack.packSizeLimit
ok 28 - verify resulting packs
ok 29 - tolerate packsizelimit smaller than biggest object
ok 30 - verify resulting packs
ok 31 - set up pack for non-repo tests
ok 32 - index-pack --stdin complains of non-repo
ok 33 - index-pack <pack> works in non-repo
ok 34 - index-pack --strict <pack> works in non-repo
ok 35 # skip index-pack --threads=N or pack.threads=N warns when no pthreads (missing !PTHREADS of !PTHREADS,C_LOCALE_OUTPUT)
ok 36 # skip pack-objects --threads=N or pack.threads=N warns when no pthreads (missing !PTHREADS of !PTHREADS,C_LOCALE_OUTPUT)
ok 37 - pack-objects in too-many-packs mode
ok 38 - fake a SHA1 hash collision
ok 39 - make sure index-pack detects the SHA1 collision
ok 40 - make sure index-pack detects the SHA1 collision (large blobs)
# passed all 40 test(s)
1..40
*** t5301-sliding-window.sh ***
ok 1 - setup
ok 2 - verify-pack -v, defaults
ok 3 - verify-pack -v, packedGitWindowSize == 1 page
ok 4 - verify-pack -v, packedGit{WindowSize,Limit} == 1 page
ok 5 - repack -a -d, packedGit{WindowSize,Limit} == 1 page
ok 6 - verify-pack -v, defaults
# passed all 6 test(s)
1..6
*** t5302-pack-index.sh ***
ok 1 - setup
ok 2 - pack-objects with index version 1
ok 3 - pack-objects with index version 2
ok 4 - both packs should be identical
ok 5 - index v1 and index v2 should be different
ok 6 - index-pack with index version 1
ok 7 - index-pack with index version 2
ok 8 - index-pack results should match pack-objects ones
ok 9 - index-pack --verify on index version 1
ok 10 - index-pack --verify on index version 2
ok 11 - pack-objects --index-version=2, is not accepted
ok 12 - index v2: force some 64-bit offsets with pack-objects
ok 13 - index v2: verify a pack with some 64-bit offsets
ok 14 - 64-bit offsets: should be different from previous index v2 results
ok 15 - index v2: force some 64-bit offsets with index-pack
ok 16 - 64-bit offsets: index-pack result should match pack-objects one
ok 17 - index-pack --verify on 64-bit offset v2 (cheat)
ok 18 - index-pack --verify on 64-bit offset v2
ok 19 - [index v1] 1) stream pack to repository
ok 20 - [index v1] 2) create a stealth corruption in a delta base reference
ok 21 - [index v1] 3) corrupted delta happily returned wrong data
ok 22 - [index v1] 4) confirm that the pack is actually corrupted
ok 23 - [index v1] 5) pack-objects happily reuses corrupted data
ok 24 - [index v1] 6) newly created pack is BAD !
ok 25 - [index v2] 1) stream pack to repository
ok 26 - [index v2] 2) create a stealth corruption in a delta base reference
ok 27 - [index v2] 3) corrupted delta happily returned wrong data
ok 28 - [index v2] 4) confirm that the pack is actually corrupted
ok 29 - [index v2] 5) pack-objects refuses to reuse corrupted data
ok 30 - [index v2] 6) verify-pack detects CRC mismatch
ok 31 - running index-pack in the object store
ok 32 - index-pack --strict warns upon missing tagger in tag
ok 33 - index-pack --fsck-objects also warns upon missing tagger in tag
# passed all 33 test(s)
1..33
*** t5303-pack-corruption-resilience.sh ***
ok 1 - initial setup validation
ok 2 - create corruption in header of first object
ok 3 - ... but having a loose copy allows for full recovery
ok 4 - ... and loose copy of first delta allows for partial recovery
ok 5 - create corruption in data of first object
ok 6 - ... but having a loose copy allows for full recovery
ok 7 - ... and loose copy of second object allows for partial recovery
ok 8 - create corruption in header of first delta
ok 9 - ... but having a loose copy allows for full recovery
ok 10 - ... and then a repack "clears" the corruption
ok 11 - create corruption in data of first delta
ok 12 - ... but having a loose copy allows for full recovery
ok 13 - ... and then a repack "clears" the corruption
ok 14 - corruption in delta base reference of first delta (OBJ_REF_DELTA)
ok 15 - ... but having a loose copy allows for full recovery
ok 16 - ... and then a repack "clears" the corruption
ok 17 - corruption #0 in delta base reference of first delta (OBJ_OFS_DELTA)
ok 18 - ... but having a loose copy allows for full recovery
ok 19 - ... and then a repack "clears" the corruption
ok 20 - corruption #1 in delta base reference of first delta (OBJ_OFS_DELTA)
ok 21 - ... but having a loose copy allows for full recovery
ok 22 - ... and then a repack "clears" the corruption
ok 23 - ... and a redundant pack allows for full recovery too
ok 24 - corruption of delta base reference pointing to wrong object
ok 25 - ... but having a loose copy allows for full recovery
ok 26 - ... and then a repack "clears" the corruption
ok 27 - corrupting header to have too small output buffer fails unpack
# passed all 27 test(s)
1..27
*** t5304-prune.sh ***
ok 1 - setup
ok 2 - prune stale packs
ok 3 - prune --expire
ok 4 - gc: implicit prune --expire
ok 5 - gc: refuse to start with invalid gc.pruneExpire
ok 6 - gc: start with ok gc.pruneExpire
ok 7 - prune: prune nonsense parameters
ok 8 - prune: prune unreachable heads
ok 9 - prune: do not prune detached HEAD with no reflog
ok 10 - prune: prune former HEAD after checking out branch
ok 11 - prune: do not prune heads listed as an argument
ok 12 - gc --no-prune
ok 13 - gc respects gc.pruneExpire
ok 14 - gc --prune=<date>
ok 15 - gc --prune=never
ok 16 - gc respects gc.pruneExpire=never
ok 17 - prune --expire=never
ok 18 - gc: prune old objects after local clone
ok 19 - garbage report in count-objects -v
ok 20 - clean pack garbage with gc
ok 21 - prune .git/shallow
ok 22 - prune: handle alternate object database
ok 23 - prune: handle index in multiple worktrees
ok 24 - prune: handle HEAD in multiple worktrees
ok 25 - prune: handle HEAD reflog in multiple worktrees
ok 26 - prune: handle expire option correctly
# passed all 26 test(s)
1..26
*** t5305-include-tag.sh ***
ok 1 - setup
ok 2 - pack without --include-tag
ok 3 - unpack objects
ok 4 - check unpacked result (have commit, no tag)
ok 5 - pack with --include-tag
ok 6 - unpack objects
ok 7 - check unpacked result (have commit, have tag)
ok 8 - create hidden inner tag
ok 9 - pack explicit outer tag
ok 10 - unpack objects
ok 11 - check unpacked result (have all objects)
ok 12 - pack implied outer tag
ok 13 - unpack objects
ok 14 - check unpacked result (have all objects)
ok 15 - single-branch clone can transfer tag
# passed all 15 test(s)
1..15
*** t5306-pack-nobase.sh ***
ok 1 - setup base
ok 2 - setup patch_clone
ok 3 - indirectly clone patch_clone
ok 4 - clone of patch_clone is incomplete
# passed all 4 test(s)
1..4
*** t5307-pack-missing-commit.sh ***
ok 1 - setup
ok 2 - check corruption
ok 3 - rev-list notices corruption (1)
ok 4 - rev-list notices corruption (2)
ok 5 - pack-objects notices corruption
# passed all 5 test(s)
1..5
*** t5308-pack-detect-duplicates.sh ***
ok 1 - pack with no duplicates
ok 2 - index-pack will allow duplicate objects by default
ok 3 - create batch-check test vectors
ok 4 - lookup in duplicated pack
ok 5 - index-pack can reject packs with duplicates
# passed all 5 test(s)
1..5
*** t5309-pack-delta-cycles.sh ***
ok 1 - index-pack works with a single delta (A->B)
ok 2 - index-pack works with a single delta (B->A)
ok 3 - index-pack detects missing base objects
ok 4 - index-pack detects REF_DELTA cycles
not ok 5 - failover to an object in another pack # TODO known breakage
not ok 6 - failover to a duplicate object in the same pack # TODO known breakage
# still have 2 known breakage(s)
# passed all remaining 4 test(s)
1..6
*** t5310-pack-bitmaps.sh ***
ok 1 - setup repo with moderate-sized history
ok 2 - full repack creates bitmaps
ok 3 - rev-list --test-bitmap verifies bitmaps
ok 4 - counting commits via bitmap (full bitmap)
ok 5 - counting partial commits via bitmap (full bitmap)
ok 6 - counting commits with limit (full bitmap)
ok 7 - counting non-linear history (full bitmap)
ok 8 - counting commits with limiting (full bitmap)
ok 9 - enumerate --objects (full bitmap)
ok 10 - bitmap --objects handles non-commit objects (full bitmap)
ok 11 - clone from bitmapped repository
ok 12 - setup further non-bitmapped commits
ok 13 - counting commits via bitmap (partial bitmap)
ok 14 - counting partial commits via bitmap (partial bitmap)
ok 15 - counting commits with limit (partial bitmap)
ok 16 - counting non-linear history (partial bitmap)
ok 17 - counting commits with limiting (partial bitmap)
ok 18 - enumerate --objects (partial bitmap)
ok 19 - bitmap --objects handles non-commit objects (partial bitmap)
ok 20 - fetch (partial bitmap)
ok 21 - incremental repack fails when bitmaps are requested
ok 22 - incremental repack can disable bitmaps
ok 23 - pack-objects respects --local (non-local loose)
ok 24 - pack-objects respects --honor-pack-keep (local non-bitmapped pack)
ok 25 - pack-objects respects --local (non-local pack)
ok 26 - pack-objects respects --honor-pack-keep (local bitmapped pack)
ok 27 - pack-objects respects --local (non-local bitmapped pack)
ok 28 - pack-objects to file can use bitmap
ok 29 - full repack, reusing previous bitmaps
ok 30 - fetch (full bitmap)
ok 31 - create objects for missing-HAVE tests
ok 32 - pack-objects respects --incremental
ok 33 - pack with missing blob
ok 34 - pack with missing tree
ok 35 - pack with missing parent
ok 36 # skip we can read jgit bitmaps (missing JGIT)
ok 37 # skip jgit can read our bitmaps (missing JGIT)
ok 38 - splitting packs does not generate bogus bitmaps
ok 39 - set up reusable pack
ok 40 - pack reuse respects --honor-pack-keep
ok 41 - pack reuse respects --local
ok 42 - pack reuse respects --incremental
ok 43 - truncated bitmap fails gracefully
# passed all 43 test(s)
1..43
*** t5311-pack-bitmaps-shallow.sh ***
ok 1 - setup shallow repo
ok 2 - turn on bitmaps in the parent
ok 3 - shallow fetch from bitmapped repo
# passed all 3 test(s)
1..3
*** t5312-prune-corruption.sh ***
ok 1 - disable reflogs
ok 2 - create history reachable only from a bogus-named ref
ok 3 - pruning does not drop bogus object
ok 4 - put bogus object into pack
ok 5 - destructive repack keeps packed object
ok 6 - clean up bogus ref
ok 7 - create history with missing tip commit
ok 8 - pruning with a corrupted tip does not drop history
ok 9 - pack-refs does not silently delete broken loose ref
ok 10 - create packed-refs file with broken ref
ok 11 - pack-refs does not silently delete broken packed ref
ok 12 - pack-refs does not drop broken refs during deletion
# passed all 12 test(s)
1..12
*** t5313-pack-bounds-checks.sh ***
ok 1 - set up base packfile and variables
ok 2 - pack/index object count mismatch
ok 3 - matched bogus object count
ok 4 - bogus object offset (v1)
ok 5 - bogus object offset (v2, no msb)
ok 6 - bogus offset into v2 extended table
ok 7 - bogus offset inside v2 extended table
ok 8 - bogus OFS_DELTA in packfile
# passed all 8 test(s)
1..8
*** t5314-pack-cycle-detection.sh ***
ok 1 - setup
ok 2 - repack
# passed all 2 test(s)
1..2
*** t5315-pack-objects-compression.sh ***
ok 1 - setup
ok 2 - pack-objects with -c core.compression=0
ok 3 - pack-objects with -c core.compression=9
ok 4 - pack-objects with -c core.compression=0 -c pack.compression=0
ok 5 - pack-objects with -c core.compression=9 -c pack.compression=0
ok 6 - pack-objects with -c core.compression=0 -c pack.compression=9
ok 7 - pack-objects with -c core.compression=9 -c pack.compression=9
ok 8 - pack-objects with -c pack.compression=0
ok 9 - pack-objects with -c pack.compression=9
# passed all 9 test(s)
1..9
*** t5316-pack-delta-depth.sh ***
ok 1 - create series of packs
ok 2 - packing produces a long delta
ok 3 - --depth limits depth
# passed all 3 test(s)
1..3
*** t5317-pack-objects-filter-objects.sh ***
ok 1 - setup r1
ok 2 - verify blob count in normal packfile
ok 3 - verify blob:none packfile has no blobs
ok 4 - verify normal and blob:none packfiles have same commits/trees
ok 5 - setup r2
ok 6 - verify blob count in normal packfile
ok 7 - verify blob:limit=500 omits all blobs
ok 8 - verify blob:limit=1000
ok 9 - verify blob:limit=1001
ok 10 - verify blob:limit=10001
ok 11 - verify blob:limit=1k
ok 12 - verify explicitly specifying oversized blob in input
ok 13 - verify blob:limit=1m
ok 14 - verify normal and blob:limit packfiles have same commits/trees
ok 15 - setup r3
ok 16 - verify blob count in normal packfile
ok 17 - verify sparse:path=pattern1
ok 18 - verify normal and sparse:path=pattern1 packfiles have same commits/trees
ok 19 - verify sparse:path=pattern2
ok 20 - verify normal and sparse:path=pattern2 packfiles have same commits/trees
ok 21 - setup r4
ok 22 - verify blob count in normal packfile
ok 23 - verify sparse:oid=OID
ok 24 - verify sparse:oid=oid-ish
ok 25 - setup r1 - delete loose blobs
ok 26 - verify pack-objects fails w/ missing objects
ok 27 - verify pack-objects fails w/ --missing=error
ok 28 - verify pack-objects w/ --missing=allow-any
# passed all 28 test(s)
1..28
*** t5318-commit-graph.sh ***
ok 1 - setup full repo
ok 2 - verify graph with no graph file
ok 3 - write graph with no packs
ok 4 - create commits and repack
ok 5 - check normal git operations: no graph
ok 6 - write graph
ok 7 - check normal git operations: graph exists
ok 8 - Add more commits
ok 9 - write graph with merges
ok 10 - check normal git operations: merge 1 vs 2
ok 11 - check normal git operations: merge 1 vs 3
ok 12 - check normal git operations: merge 2 vs 3
ok 13 - Add one more commit
ok 14 - check normal git operations: mixed mode, commit 8 vs merge 1
ok 15 - check normal git operations: mixed mode, commit 8 vs merge 2
ok 16 - write graph with new commit
ok 17 - check normal git operations: full graph, commit 8 vs merge 1
ok 18 - check normal git operations: full graph, commit 8 vs merge 2
ok 19 - write graph with nothing new
ok 20 - check normal git operations: cleared graph, commit 8 vs merge 1
ok 21 - check normal git operations: cleared graph, commit 8 vs merge 2
ok 22 - build graph from latest pack with closure
ok 23 - check normal git operations: graph from pack, commit 8 vs merge 1
ok 24 - check normal git operations: graph from pack, commit 8 vs merge 2
ok 25 - build graph from commits with closure
ok 26 - check normal git operations: graph from commits, commit 8 vs merge 1
ok 27 - check normal git operations: graph from commits, commit 8 vs merge 2
ok 28 - build graph from commits with append
ok 29 - check normal git operations: append graph, commit 8 vs merge 1
ok 30 - check normal git operations: append graph, commit 8 vs merge 2
ok 31 - build graph using --reachable
ok 32 - check normal git operations: append graph, commit 8 vs merge 1
ok 33 - check normal git operations: append graph, commit 8 vs merge 2
ok 34 - setup bare repo
ok 35 - check normal git operations: bare repo, commit 8 vs merge 1
ok 36 - check normal git operations: bare repo, commit 8 vs merge 2
ok 37 - write graph in bare repo
ok 38 - check normal git operations: bare repo with graph, commit 8 vs merge 1
ok 39 - check normal git operations: bare repo with graph, commit 8 vs merge 2
ok 40 - perform fast-forward merge in full repo
ok 41 - check that gc computes commit-graph
ok 42 - git commit-graph verify
ok 43 - detect bad signature
ok 44 - detect bad version
ok 45 - detect bad hash version
ok 46 - detect low chunk count
ok 47 - detect missing OID fanout chunk
ok 48 - detect missing OID lookup chunk
ok 49 - detect missing commit data chunk
ok 50 - detect incorrect fanout
ok 51 - detect incorrect fanout final value
ok 52 - detect incorrect OID order
ok 53 - detect OID not in object database
ok 54 - detect incorrect tree OID
ok 55 - detect incorrect parent int-id
ok 56 - detect extra parent int-id
ok 57 - detect wrong parent
ok 58 - detect incorrect generation number
ok 59 - detect incorrect generation number
ok 60 - detect incorrect commit date
ok 61 - detect incorrect parent for octopus merge
ok 62 - detect invalid checksum hash
ok 63 - git fsck (checks commit-graph)
ok 64 - setup non-the_repository tests
ok 65 - parse_commit_in_graph works for non-the_repository
ok 66 - get_commit_tree_in_graph works for non-the_repository
# passed all 66 test(s)
1..66
*** t5400-send-pack.sh ***
ok 1 - setup
ok 2 - pack the source repository
ok 3 - pack the destination repository
ok 4 - refuse pushing rewound head without --force
ok 5 - push can be used to delete a ref
ok 6 - refuse deleting push with denyDeletes
ok 7 - cannot override denyDeletes with git -c send-pack
ok 8 - override denyDeletes with git -c receive-pack
ok 9 - denyNonFastforwards trumps --force
ok 10 - send-pack --all sends all branches
ok 11 - push --all excludes remote-tracking hierarchy
ok 12 - receive-pack runs auto-gc in remote repo
ok 13 - pushing explicit refspecs respects forcing
ok 14 - pushing wildcard refspecs respects forcing
ok 15 - deny pushing to delete current branch
ok 16 - receive-pack de-dupes .have lines
# passed all 16 test(s)
1..16
*** t5401-update-hooks.sh ***
ok 1 - setup
ok 2 - push
ok 3 - updated as expected
ok 4 - hooks ran
ok 5 - pre-receive hook input
ok 6 - update hook arguments
ok 7 - post-receive hook input
ok 8 - post-update hook arguments
ok 9 - all hook stdin is /dev/null
ok 10 - all *-receive hook args are empty
ok 11 - send-pack produced no output
ok 12 - send-pack stderr contains hook messages
ok 13 - pre-receive hook that forgets to read its input
# passed all 13 test(s)
1..13
*** t5402-post-merge-hook.sh ***
ok 1 - setup
ok 2 - post-merge does not run for up-to-date 
ok 3 - post-merge runs as expected 
ok 4 - post-merge from normal merge receives the right argument 
ok 5 - post-merge from squash merge runs as expected 
ok 6 - post-merge from squash merge receives the right argument 
# passed all 6 test(s)
1..6
*** t5403-post-checkout-hook.sh ***
ok 1 - setup
ok 2 - post-checkout runs as expected 
ok 3 - post-checkout receives the right arguments with HEAD unchanged 
ok 4 - post-checkout runs as expected 
ok 5 - post-checkout args are correct with git checkout -b 
ok 6 - post-checkout receives the right args with HEAD changed 
ok 7 - post-checkout receives the right args when not switching branches 
ok 8 - post-checkout hook is triggered by clone
# passed all 8 test(s)
1..8
*** t5404-tracking-branches.sh ***
ok 1 - setup
ok 2 - prepare pushable branches
ok 3 - mixed-success push returns error
ok 4 - check tracking branches updated correctly after push
ok 5 - check tracking branches not updated for failed refs
ok 6 - deleted branches have their tracking branches removed
ok 7 - already deleted tracking branches ignored
# passed all 7 test(s)
1..7
*** t5405-send-pack-rewind.sh ***
ok 1 - setup
ok 2 - non forced push should die not segfault
ok 3 - forced push should succeed
# passed all 3 test(s)
1..3
*** t5406-remote-rejects.sh ***
ok 1 - setup
ok 2 - push reports error
ok 3 - individual ref reports error
# passed all 3 test(s)
1..3
*** t5407-post-rewrite-hook.sh ***
ok 1 - setup
ok 2 - git commit --amend
ok 3 - git commit --amend --no-post-rewrite
ok 4 - git rebase
ok 5 - git rebase --skip
ok 6 - git rebase --skip the last one
ok 7 - git rebase -m
ok 8 - git rebase -m --skip
ok 9 - git rebase -i (unchanged)
ok 10 - git rebase -i (skip)
ok 11 - git rebase -i (squash)
ok 12 - git rebase -i (fixup without conflict)
ok 13 - git rebase -i (double edit)
ok 14 - git rebase -i (exec)
# passed all 14 test(s)
1..14
*** t5408-send-pack-stdin.sh ***
ok 1 - setup refs
ok 2 - refs on cmdline
ok 3 - refs over stdin
ok 4 - stdin lines are full refspecs
ok 5 - stdin mixed with cmdline
ok 6 - cmdline refs written in order
ok 7 - --stdin refs come after cmdline
ok 8 - refspecs and --mirror do not mix (cmdline)
ok 9 - refspecs and --mirror do not mix (stdin)
# passed all 9 test(s)
1..9
*** t5409-colorize-remote-messages.sh ***
ok 1 - setup
ok 2 - keywords
ok 3 - whole words at line start
ok 4 - short line
ok 5 - case-insensitive
ok 6 - leading space
ok 7 - spaces only
ok 8 - no coloring for redirected output
ok 9 - push with customized color
ok 10 - error in customized color
ok 11 - fallback to color.ui
# passed all 11 test(s)
1..11
*** t5500-fetch-pack.sh ***
ok 1 - setup
ok 2 - 1st pull
ok 3 - post 1st pull setup
ok 4 - 2nd pull
ok 5 - 3rd pull
ok 6 - single branch clone
ok 7 - single branch object count
ok 8 - single given branch clone
ok 9 - clone shallow depth 1
ok 10 - clone shallow depth 1 with fsck
ok 11 - clone shallow
ok 12 - clone shallow depth count
ok 13 - clone shallow object count
ok 14 - clone shallow object count (part 2)
ok 15 - fsck in shallow repo
ok 16 - simple fetch in shallow repo
ok 17 - no changes expected
ok 18 - fetch same depth in shallow repo
ok 19 - no changes expected
ok 20 - add two more
ok 21 - pull in shallow repo
ok 22 - clone shallow object count
ok 23 - add two more (part 2)
ok 24 - deepening pull in shallow repo
ok 25 - clone shallow object count
ok 26 - deepening fetch in shallow repo
ok 27 - clone shallow object count
ok 28 - pull in shallow repo with missing merge base
ok 29 - additional simple shallow deepenings
ok 30 - clone shallow depth count
ok 31 - clone shallow object count
ok 32 - fetch --no-shallow on full repo
ok 33 - fetch --depth --no-shallow
ok 34 - turn shallow to complete repository
ok 35 - clone shallow without --no-single-branch
ok 36 - clone shallow object count
ok 37 - clone shallow with --branch
ok 38 - clone shallow object count
ok 39 - clone shallow with detached HEAD
ok 40 - shallow clone pulling tags
ok 41 - shallow cloning single tag
ok 42 - clone shallow with packed refs
ok 43 - fetch in shallow repo unreachable shallow objects
ok 44 - fetch creating new shallow root
ok 45 - setup tests for the --stdin parameter
ok 46 - fetch refs from cmdline
ok 47 - fetch refs from stdin
ok 48 - fetch mixed refs from cmdline and stdin
ok 49 - test duplicate refs from stdin
ok 50 - set up tests of missing reference
ok 51 - test lonely missing ref
ok 52 - test missing ref after existing
ok 53 - test missing ref before existing
ok 54 - test --all, --depth, and explicit head
ok 55 - test --all, --depth, and explicit tag
ok 56 - test --all with tag to non-tip
ok 57 - test --all wrt tag to non-commits
ok 58 - shallow fetch with tags does not break the repository
ok 59 - fetch-pack can fetch a raw sha1
ok 60 - fetch-pack can fetch a raw sha1 that is advertised as a ref
ok 61 - fetch-pack can fetch a raw sha1 overlapping a named ref
ok 62 - fetch-pack cannot fetch a raw sha1 that is not advertised as a ref
ok 63 - fetch-pack --diag-url ssh+git://host/repo
ok 64 - fetch-pack --diag-url ssh+git://host/~repo
ok 65 - fetch-pack --diag-url ssh+git://host:/repo
ok 66 - fetch-pack --diag-url ssh+git://host:/~repo
ok 67 - fetch-pack --diag-url ssh+git://user@host/repo
ok 68 - fetch-pack --diag-url ssh+git://user@host/~repo
ok 69 - fetch-pack --diag-url ssh+git://user@host:/repo
ok 70 - fetch-pack --diag-url ssh+git://user@host:/~repo
ok 71 - fetch-pack --diag-url ssh+git://user@[::1]/repo
ok 72 - fetch-pack --diag-url ssh+git://user@[::1]/~repo
ok 73 - fetch-pack --diag-url ssh+git://user@[::1]:/repo
ok 74 - fetch-pack --diag-url ssh+git://user@[::1]:/~repo
ok 75 - fetch-pack --diag-url ssh+git://user@::1/repo
ok 76 - fetch-pack --diag-url ssh+git://user@::1/~repo
ok 77 - fetch-pack --diag-url ssh+git://user@::1:/repo
ok 78 - fetch-pack --diag-url ssh+git://user@::1:/~repo
ok 79 - fetch-pack --diag-url ssh+git://host:22/repo
ok 80 - fetch-pack --diag-url ssh+git://User@host:22/repo
ok 81 - fetch-pack --diag-url ssh+git://User@[::1]:22/repo
ok 82 - fetch-pack --diag-url git+ssh://host/repo
ok 83 - fetch-pack --diag-url git+ssh://host/~repo
ok 84 - fetch-pack --diag-url git+ssh://host:/repo
ok 85 - fetch-pack --diag-url git+ssh://host:/~repo
ok 86 - fetch-pack --diag-url git+ssh://user@host/repo
ok 87 - fetch-pack --diag-url git+ssh://user@host/~repo
ok 88 - fetch-pack --diag-url git+ssh://user@host:/repo
ok 89 - fetch-pack --diag-url git+ssh://user@host:/~repo
ok 90 - fetch-pack --diag-url git+ssh://user@[::1]/repo
ok 91 - fetch-pack --diag-url git+ssh://user@[::1]/~repo
ok 92 - fetch-pack --diag-url git+ssh://user@[::1]:/repo
ok 93 - fetch-pack --diag-url git+ssh://user@[::1]:/~repo
ok 94 - fetch-pack --diag-url git+ssh://user@::1/repo
ok 95 - fetch-pack --diag-url git+ssh://user@::1/~repo
ok 96 - fetch-pack --diag-url git+ssh://user@::1:/repo
ok 97 - fetch-pack --diag-url git+ssh://user@::1:/~repo
ok 98 - fetch-pack --diag-url git+ssh://host:22/repo
ok 99 - fetch-pack --diag-url git+ssh://User@host:22/repo
ok 100 - fetch-pack --diag-url git+ssh://User@[::1]:22/repo
ok 101 - fetch-pack --diag-url git://host/repo
ok 102 - fetch-pack --diag-url git://host/~repo
ok 103 - fetch-pack --diag-url git://host:/repo
ok 104 - fetch-pack --diag-url git://host:/~repo
ok 105 - fetch-pack --diag-url git://user@host/repo
ok 106 - fetch-pack --diag-url git://user@host/~repo
ok 107 - fetch-pack --diag-url git://user@host:/repo
ok 108 - fetch-pack --diag-url git://user@host:/~repo
ok 109 - fetch-pack --diag-url git://user@[::1]/repo
ok 110 - fetch-pack --diag-url git://user@[::1]/~repo
ok 111 - fetch-pack --diag-url git://user@[::1]:/repo
ok 112 - fetch-pack --diag-url git://user@[::1]:/~repo
ok 113 - fetch-pack --diag-url git://user@::1/repo
ok 114 - fetch-pack --diag-url git://user@::1/~repo
ok 115 - fetch-pack --diag-url git://user@::1:/repo
ok 116 - fetch-pack --diag-url git://user@::1:/~repo
ok 117 - fetch-pack --diag-url git://host:22/repo
ok 118 - fetch-pack --diag-url git://User@host:22/repo
ok 119 - fetch-pack --diag-url git://User@[::1]:22/repo
ok 120 - fetch-pack --diag-url ssh://host/repo
ok 121 - fetch-pack --diag-url ssh://host/~repo
ok 122 - fetch-pack --diag-url ssh://host:/repo
ok 123 - fetch-pack --diag-url ssh://host:/~repo
ok 124 - fetch-pack --diag-url ssh://user@host/repo
ok 125 - fetch-pack --diag-url ssh://user@host/~repo
ok 126 - fetch-pack --diag-url ssh://user@host:/repo
ok 127 - fetch-pack --diag-url ssh://user@host:/~repo
ok 128 - fetch-pack --diag-url ssh://user@[::1]/repo
ok 129 - fetch-pack --diag-url ssh://user@[::1]/~repo
ok 130 - fetch-pack --diag-url ssh://user@[::1]:/repo
ok 131 - fetch-pack --diag-url ssh://user@[::1]:/~repo
ok 132 - fetch-pack --diag-url ssh://user@::1/repo
ok 133 - fetch-pack --diag-url ssh://user@::1/~repo
ok 134 - fetch-pack --diag-url ssh://user@::1:/repo
ok 135 - fetch-pack --diag-url ssh://user@::1:/~repo
ok 136 - fetch-pack --diag-url ssh://host:22/repo
ok 137 - fetch-pack --diag-url ssh://User@host:22/repo
ok 138 - fetch-pack --diag-url ssh://User@[::1]:22/repo
ok 139 - fetch-pack --diag-url file://User@[::1]/repo
ok 140 - fetch-pack --diag-url file://User@[::1]/~repo
ok 141 - fetch-pack --diag-url ./nohost:repo
ok 142 - fetch-pack --diag-url ./file:nohost/~repo
ok 143 - fetch-pack --diag-url ./nohost:12:repo
ok 144 - fetch-pack --diag-url ./file:nohost:12/~repo
ok 145 - fetch-pack --diag-url ./[::1]:repo
ok 146 - fetch-pack --diag-url ./file:[::1]/~repo
ok 147 - fetch-pack --diag-url ./[::1]:23:repo
ok 148 - fetch-pack --diag-url ./file:[::1]:23/~repo
ok 149 - fetch-pack --diag-url ./[:repo
ok 150 - fetch-pack --diag-url ./file:[/~repo
ok 151 - fetch-pack --diag-url ./[:aa:repo
ok 152 - fetch-pack --diag-url ./file:[:aa/~repo
ok 153 - fetch-pack --diag-url host:repo
ok 154 - fetch-pack --diag-url host:/~repo
ok 155 - fetch-pack --diag-url [::1]:repo
ok 156 - fetch-pack --diag-url [::1]:/~repo
ok 157 - fetch-pack --diag-url ssh+git://host/re:po
ok 158 - fetch-pack --diag-url ssh+git://host/~re:po
ok 159 - fetch-pack --diag-url ssh+git://host:/re:po
ok 160 - fetch-pack --diag-url ssh+git://host:/~re:po
ok 161 - fetch-pack --diag-url ssh+git://user@host/re:po
ok 162 - fetch-pack --diag-url ssh+git://user@host/~re:po
ok 163 - fetch-pack --diag-url ssh+git://user@host:/re:po
ok 164 - fetch-pack --diag-url ssh+git://user@host:/~re:po
ok 165 - fetch-pack --diag-url ssh+git://user@[::1]/re:po
ok 166 - fetch-pack --diag-url ssh+git://user@[::1]/~re:po
ok 167 - fetch-pack --diag-url ssh+git://user@[::1]:/re:po
ok 168 - fetch-pack --diag-url ssh+git://user@[::1]:/~re:po
ok 169 - fetch-pack --diag-url ssh+git://user@::1/re:po
ok 170 - fetch-pack --diag-url ssh+git://user@::1/~re:po
ok 171 - fetch-pack --diag-url ssh+git://user@::1:/re:po
ok 172 - fetch-pack --diag-url ssh+git://user@::1:/~re:po
ok 173 - fetch-pack --diag-url ssh+git://host:22/re:po
ok 174 - fetch-pack --diag-url ssh+git://User@host:22/re:po
ok 175 - fetch-pack --diag-url ssh+git://User@[::1]:22/re:po
ok 176 - fetch-pack --diag-url git+ssh://host/re:po
ok 177 - fetch-pack --diag-url git+ssh://host/~re:po
ok 178 - fetch-pack --diag-url git+ssh://host:/re:po
ok 179 - fetch-pack --diag-url git+ssh://host:/~re:po
ok 180 - fetch-pack --diag-url git+ssh://user@host/re:po
ok 181 - fetch-pack --diag-url git+ssh://user@host/~re:po
ok 182 - fetch-pack --diag-url git+ssh://user@host:/re:po
ok 183 - fetch-pack --diag-url git+ssh://user@host:/~re:po
ok 184 - fetch-pack --diag-url git+ssh://user@[::1]/re:po
ok 185 - fetch-pack --diag-url git+ssh://user@[::1]/~re:po
ok 186 - fetch-pack --diag-url git+ssh://user@[::1]:/re:po
ok 187 - fetch-pack --diag-url git+ssh://user@[::1]:/~re:po
ok 188 - fetch-pack --diag-url git+ssh://user@::1/re:po
ok 189 - fetch-pack --diag-url git+ssh://user@::1/~re:po
ok 190 - fetch-pack --diag-url git+ssh://user@::1:/re:po
ok 191 - fetch-pack --diag-url git+ssh://user@::1:/~re:po
ok 192 - fetch-pack --diag-url git+ssh://host:22/re:po
ok 193 - fetch-pack --diag-url git+ssh://User@host:22/re:po
ok 194 - fetch-pack --diag-url git+ssh://User@[::1]:22/re:po
ok 195 - fetch-pack --diag-url git://host/re:po
ok 196 - fetch-pack --diag-url git://host/~re:po
ok 197 - fetch-pack --diag-url git://host:/re:po
ok 198 - fetch-pack --diag-url git://host:/~re:po
ok 199 - fetch-pack --diag-url git://user@host/re:po
ok 200 - fetch-pack --diag-url git://user@host/~re:po
ok 201 - fetch-pack --diag-url git://user@host:/re:po
ok 202 - fetch-pack --diag-url git://user@host:/~re:po
ok 203 - fetch-pack --diag-url git://user@[::1]/re:po
ok 204 - fetch-pack --diag-url git://user@[::1]/~re:po
ok 205 - fetch-pack --diag-url git://user@[::1]:/re:po
ok 206 - fetch-pack --diag-url git://user@[::1]:/~re:po
ok 207 - fetch-pack --diag-url git://user@::1/re:po
ok 208 - fetch-pack --diag-url git://user@::1/~re:po
ok 209 - fetch-pack --diag-url git://user@::1:/re:po
ok 210 - fetch-pack --diag-url git://user@::1:/~re:po
ok 211 - fetch-pack --diag-url git://host:22/re:po
ok 212 - fetch-pack --diag-url git://User@host:22/re:po
ok 213 - fetch-pack --diag-url git://User@[::1]:22/re:po
ok 214 - fetch-pack --diag-url ssh://host/re:po
ok 215 - fetch-pack --diag-url ssh://host/~re:po
ok 216 - fetch-pack --diag-url ssh://host:/re:po
ok 217 - fetch-pack --diag-url ssh://host:/~re:po
ok 218 - fetch-pack --diag-url ssh://user@host/re:po
ok 219 - fetch-pack --diag-url ssh://user@host/~re:po
ok 220 - fetch-pack --diag-url ssh://user@host:/re:po
ok 221 - fetch-pack --diag-url ssh://user@host:/~re:po
ok 222 - fetch-pack --diag-url ssh://user@[::1]/re:po
ok 223 - fetch-pack --diag-url ssh://user@[::1]/~re:po
ok 224 - fetch-pack --diag-url ssh://user@[::1]:/re:po
ok 225 - fetch-pack --diag-url ssh://user@[::1]:/~re:po
ok 226 - fetch-pack --diag-url ssh://user@::1/re:po
ok 227 - fetch-pack --diag-url ssh://user@::1/~re:po
ok 228 - fetch-pack --diag-url ssh://user@::1:/re:po
ok 229 - fetch-pack --diag-url ssh://user@::1:/~re:po
ok 230 - fetch-pack --diag-url ssh://host:22/re:po
ok 231 - fetch-pack --diag-url ssh://User@host:22/re:po
ok 232 - fetch-pack --diag-url ssh://User@[::1]:22/re:po
ok 233 - fetch-pack --diag-url file://User@[::1]/re:po
ok 234 - fetch-pack --diag-url file://User@[::1]/~re:po
ok 235 - fetch-pack --diag-url ./nohost:re:po
ok 236 - fetch-pack --diag-url ./file:nohost/~re:po
ok 237 - fetch-pack --diag-url ./nohost:12:re:po
ok 238 - fetch-pack --diag-url ./file:nohost:12/~re:po
ok 239 - fetch-pack --diag-url ./[::1]:re:po
ok 240 - fetch-pack --diag-url ./file:[::1]/~re:po
ok 241 - fetch-pack --diag-url ./[::1]:23:re:po
ok 242 - fetch-pack --diag-url ./file:[::1]:23/~re:po
ok 243 - fetch-pack --diag-url ./[:re:po
ok 244 - fetch-pack --diag-url ./file:[/~re:po
ok 245 - fetch-pack --diag-url ./[:aa:re:po
ok 246 - fetch-pack --diag-url ./file:[:aa/~re:po
ok 247 - fetch-pack --diag-url host:re:po
ok 248 - fetch-pack --diag-url host:/~re:po
ok 249 - fetch-pack --diag-url [::1]:re:po
ok 250 - fetch-pack --diag-url [::1]:/~re:po
ok 251 - fetch-pack --diag-url ssh+git://host/re/po
ok 252 - fetch-pack --diag-url ssh+git://host/~re/po
ok 253 - fetch-pack --diag-url ssh+git://host:/re/po
ok 254 - fetch-pack --diag-url ssh+git://host:/~re/po
ok 255 - fetch-pack --diag-url ssh+git://user@host/re/po
ok 256 - fetch-pack --diag-url ssh+git://user@host/~re/po
ok 257 - fetch-pack --diag-url ssh+git://user@host:/re/po
ok 258 - fetch-pack --diag-url ssh+git://user@host:/~re/po
ok 259 - fetch-pack --diag-url ssh+git://user@[::1]/re/po
ok 260 - fetch-pack --diag-url ssh+git://user@[::1]/~re/po
ok 261 - fetch-pack --diag-url ssh+git://user@[::1]:/re/po
ok 262 - fetch-pack --diag-url ssh+git://user@[::1]:/~re/po
ok 263 - fetch-pack --diag-url ssh+git://user@::1/re/po
ok 264 - fetch-pack --diag-url ssh+git://user@::1/~re/po
ok 265 - fetch-pack --diag-url ssh+git://user@::1:/re/po
ok 266 - fetch-pack --diag-url ssh+git://user@::1:/~re/po
ok 267 - fetch-pack --diag-url ssh+git://host:22/re/po
ok 268 - fetch-pack --diag-url ssh+git://User@host:22/re/po
ok 269 - fetch-pack --diag-url ssh+git://User@[::1]:22/re/po
ok 270 - fetch-pack --diag-url git+ssh://host/re/po
ok 271 - fetch-pack --diag-url git+ssh://host/~re/po
ok 272 - fetch-pack --diag-url git+ssh://host:/re/po
ok 273 - fetch-pack --diag-url git+ssh://host:/~re/po
ok 274 - fetch-pack --diag-url git+ssh://user@host/re/po
ok 275 - fetch-pack --diag-url git+ssh://user@host/~re/po
ok 276 - fetch-pack --diag-url git+ssh://user@host:/re/po
ok 277 - fetch-pack --diag-url git+ssh://user@host:/~re/po
ok 278 - fetch-pack --diag-url git+ssh://user@[::1]/re/po
ok 279 - fetch-pack --diag-url git+ssh://user@[::1]/~re/po
ok 280 - fetch-pack --diag-url git+ssh://user@[::1]:/re/po
ok 281 - fetch-pack --diag-url git+ssh://user@[::1]:/~re/po
ok 282 - fetch-pack --diag-url git+ssh://user@::1/re/po
ok 283 - fetch-pack --diag-url git+ssh://user@::1/~re/po
ok 284 - fetch-pack --diag-url git+ssh://user@::1:/re/po
ok 285 - fetch-pack --diag-url git+ssh://user@::1:/~re/po
ok 286 - fetch-pack --diag-url git+ssh://host:22/re/po
ok 287 - fetch-pack --diag-url git+ssh://User@host:22/re/po
ok 288 - fetch-pack --diag-url git+ssh://User@[::1]:22/re/po
ok 289 - fetch-pack --diag-url git://host/re/po
ok 290 - fetch-pack --diag-url git://host/~re/po
ok 291 - fetch-pack --diag-url git://host:/re/po
ok 292 - fetch-pack --diag-url git://host:/~re/po
ok 293 - fetch-pack --diag-url git://user@host/re/po
ok 294 - fetch-pack --diag-url git://user@host/~re/po
ok 295 - fetch-pack --diag-url git://user@host:/re/po
ok 296 - fetch-pack --diag-url git://user@host:/~re/po
ok 297 - fetch-pack --diag-url git://user@[::1]/re/po
ok 298 - fetch-pack --diag-url git://user@[::1]/~re/po
ok 299 - fetch-pack --diag-url git://user@[::1]:/re/po
ok 300 - fetch-pack --diag-url git://user@[::1]:/~re/po
ok 301 - fetch-pack --diag-url git://user@::1/re/po
ok 302 - fetch-pack --diag-url git://user@::1/~re/po
ok 303 - fetch-pack --diag-url git://user@::1:/re/po
ok 304 - fetch-pack --diag-url git://user@::1:/~re/po
ok 305 - fetch-pack --diag-url git://host:22/re/po
ok 306 - fetch-pack --diag-url git://User@host:22/re/po
ok 307 - fetch-pack --diag-url git://User@[::1]:22/re/po
ok 308 - fetch-pack --diag-url ssh://host/re/po
ok 309 - fetch-pack --diag-url ssh://host/~re/po
ok 310 - fetch-pack --diag-url ssh://host:/re/po
ok 311 - fetch-pack --diag-url ssh://host:/~re/po
ok 312 - fetch-pack --diag-url ssh://user@host/re/po
ok 313 - fetch-pack --diag-url ssh://user@host/~re/po
ok 314 - fetch-pack --diag-url ssh://user@host:/re/po
ok 315 - fetch-pack --diag-url ssh://user@host:/~re/po
ok 316 - fetch-pack --diag-url ssh://user@[::1]/re/po
ok 317 - fetch-pack --diag-url ssh://user@[::1]/~re/po
ok 318 - fetch-pack --diag-url ssh://user@[::1]:/re/po
ok 319 - fetch-pack --diag-url ssh://user@[::1]:/~re/po
ok 320 - fetch-pack --diag-url ssh://user@::1/re/po
ok 321 - fetch-pack --diag-url ssh://user@::1/~re/po
ok 322 - fetch-pack --diag-url ssh://user@::1:/re/po
ok 323 - fetch-pack --diag-url ssh://user@::1:/~re/po
ok 324 - fetch-pack --diag-url ssh://host:22/re/po
ok 325 - fetch-pack --diag-url ssh://User@host:22/re/po
ok 326 - fetch-pack --diag-url ssh://User@[::1]:22/re/po
ok 327 - fetch-pack --diag-url file://User@[::1]/re/po
ok 328 - fetch-pack --diag-url file://User@[::1]/~re/po
ok 329 - fetch-pack --diag-url ./nohost:re/po
ok 330 - fetch-pack --diag-url ./file:nohost/~re/po
ok 331 - fetch-pack --diag-url ./nohost:12:re/po
ok 332 - fetch-pack --diag-url ./file:nohost:12/~re/po
ok 333 - fetch-pack --diag-url ./[::1]:re/po
ok 334 - fetch-pack --diag-url ./file:[::1]/~re/po
ok 335 - fetch-pack --diag-url ./[::1]:23:re/po
ok 336 - fetch-pack --diag-url ./file:[::1]:23/~re/po
ok 337 - fetch-pack --diag-url ./[:re/po
ok 338 - fetch-pack --diag-url ./file:[/~re/po
ok 339 - fetch-pack --diag-url ./[:aa:re/po
ok 340 - fetch-pack --diag-url ./file:[:aa/~re/po
ok 341 - fetch-pack --diag-url host:re/po
ok 342 - fetch-pack --diag-url host:/~re/po
ok 343 - fetch-pack --diag-url [::1]:re/po
ok 344 - fetch-pack --diag-url [::1]:/~re/po
ok 345 # skip fetch-pack --diag-url file://c:/repo (missing MINGW)
ok 346 # skip fetch-pack --diag-url c:repo (missing MINGW)
ok 347 - clone shallow since ...
ok 348 - fetch shallow since ...
ok 349 - clone shallow since selects no commits
ok 350 - shallow clone exclude tag two
ok 351 - fetch exclude tag one
ok 352 - fetching deepen
ok 353 - use ref advertisement to prune "have" lines sent
ok 354 - filtering by size
ok 355 - filtering by size has no effect if support for it is not advertised
ok 356 - fetch with --filter=blob:limit=0
# passed all 356 test(s)
# SKIP no web server found at '/usr/sbin/apache2'
1..356
*** t5501-fetch-push-alternates.sh ***
ok 1 - setup
ok 2 - pushing into a repository with the same alternate
ok 3 - fetching from a repository with the same alternate
# passed all 3 test(s)
1..3
*** t5502-quickfetch.sh ***
ok 1 - setup
ok 2 - clone without alternate
ok 3 - further commits in the original
ok 4 - copy commit and tree but not blob by hand
ok 5 - quickfetch should not leave a corrupted repository
ok 6 - quickfetch should not copy from alternate
ok 7 - quickfetch should handle ~1000 refs (on Windows)
# passed all 7 test(s)
1..7
*** t5503-tagfollow.sh ***
ok 1 - setup
ok 2 - setup expect
ok 3 - fetch A (new commit : 1 connection)
ok 4 - create tag T on A, create C on branch cat
ok 5 - setup expect
ok 6 - fetch C, T (new branch, tag : 1 connection)
ok 7 - create commits O, B, tag S on B
ok 8 - setup expect
ok 9 - fetch B, S (commit and tag : 1 connection)
ok 10 - setup expect
ok 11 - new clone fetch master and tags
# passed all 11 test(s)
1..11
*** t5504-fetch-receive-strict.sh ***
ok 1 - setup and inject "corrupt or missing" object
ok 2 - fetch without strict
ok 3 - fetch with !fetch.fsckobjects
ok 4 - fetch with fetch.fsckobjects
ok 5 - fetch with transfer.fsckobjects
ok 6 - push without strict
ok 7 - push with !receive.fsckobjects
ok 8 - push with receive.fsckobjects
ok 9 - push with transfer.fsckobjects
ok 10 - repair the "corrupt or missing" object
ok 11 - fsck with invalid or bogus skipList input
ok 12 - push with receive.fsck.skipList
ok 13 - fetch with fetch.fsck.skipList
ok 14 - fsck.<unknownmsg-id> dies
ok 15 - push with receive.fsck.missingEmail=warn
ok 16 - fetch with fetch.fsck.missingEmail=warn
ok 17 - receive.fsck.unterminatedHeader=warn triggers error
ok 18 - fetch.fsck.unterminatedHeader=warn triggers error
# passed all 18 test(s)
1..18
*** t5505-remote.sh ***
ok 1 - setup
ok 2 - add remote whose URL agrees with url.<...>.insteadOf
ok 3 - remote information for the origin
ok 4 - add another remote
ok 5 - check remote-tracking
ok 6 - remote forces tracking branches
ok 7 - remove remote
ok 8 - remove remote
ok 9 - remove remote protects local branches
ok 10 - remove errors out early when deleting non-existent branch
ok 11 - remove remote with a branch without configured merge
ok 12 - rename errors out early when deleting non-existent branch
ok 13 - add existing foreign_vcs remote
ok 14 - add existing foreign_vcs remote
ok 15 - show
ok 16 - show -n
ok 17 - prune
ok 18 - set-head --delete
ok 19 - set-head --auto
ok 20 - set-head --auto has no problem w/multiple HEADs
ok 21 - set-head explicit
ok 22 - prune --dry-run
ok 23 - add --mirror && prune
ok 24 - add --mirror=fetch
ok 25 - fetch mirrors act as mirrors during fetch
ok 26 - fetch mirrors can prune
ok 27 - fetch mirrors do not act as mirrors during push
ok 28 - add fetch mirror with specific branches
ok 29 - fetch mirror respects specific branches
ok 30 - add --mirror=push
ok 31 - push mirrors act as mirrors during push
ok 32 - push mirrors do not act as mirrors during fetch
ok 33 - push mirrors do not allow you to specify refs
ok 34 - add alt && prune
ok 35 - add with reachable tags (default)
ok 36 - add --tags
ok 37 - add --no-tags
ok 38 - reject --no-no-tags
ok 39 - update
ok 40 - update with arguments
ok 41 - update --prune
ok 42 - update default
ok 43 - update default (overridden, with funny whitespace)
ok 44 - update (with remotes.default defined)
ok 45 - "remote show" does not show symbolic refs
ok 46 - reject adding remote with an invalid name
ok 47 - rename a remote
ok 48 - rename does not update a non-default fetch refspec
ok 49 - rename a remote with name part of fetch spec
ok 50 - rename a remote with name prefix of other remote
ok 51 - rename succeeds with existing remote.<target>.prune
ok 52 - migrate a remote from named file in $GIT_DIR/remotes
ok 53 - migrate a remote from named file in $GIT_DIR/branches
ok 54 - migrate a remote from named file in $GIT_DIR/branches (2)
ok 55 - remote prune to cause a dangling symref
ok 56 - show empty remote
ok 57 - remote set-branches requires a remote
ok 58 - remote set-branches
ok 59 - remote set-branches with --mirror
ok 60 - new remote
ok 61 - get-url on new remote
ok 62 - remote set-url with locked config
ok 63 - remote set-url bar
ok 64 - remote set-url baz bar
ok 65 - remote set-url zot bar
ok 66 - remote set-url --push zot baz
ok 67 - remote set-url --push zot
ok 68 - get-url with different urls
ok 69 - remote set-url --push qux zot
ok 70 - remote set-url --push foo qu+x
ok 71 - remote set-url --push --add aaa
ok 72 - get-url on multi push remote
ok 73 - remote set-url --push bar aaa
ok 74 - remote set-url --push --delete bar
ok 75 - remote set-url --push --delete foo
ok 76 - remote set-url --add bbb
ok 77 - get-url on multi fetch remote
ok 78 - remote set-url --delete .*
ok 79 - remote set-url --delete bbb
ok 80 - remote set-url --delete baz
ok 81 - remote set-url --add ccc
ok 82 - remote set-url --delete baz
ok 83 - extra args: setup
ok 84 - extra args: add nick url
ok 85 - extra args: rename origin newname
ok 86 - extra args: remove origin
ok 87 - extra args: set-head origin master
ok 88 - extra args: get-url origin newurl
ok 89 - extra args: set-url origin newurl oldurl
ok 90 - add remote matching the "insteadOf" URL
# passed all 90 test(s)
1..90
*** t5506-remote-groups.sh ***
ok 1 - setup
ok 2 - no group updates all
ok 3 - nonexistent group produces error
ok 4 - updating group updates all members (remote update)
ok 5 - updating group updates all members (fetch)
ok 6 - updating group does not update non-members (remote update)
ok 7 - updating group does not update non-members (fetch)
ok 8 - updating remote name updates that remote
# passed all 8 test(s)
1..8
*** t5507-remote-environment.sh ***
ok 1 - set up "remote" push situation
ok 2 - set up fake ssh
ok 3 - confirm default push fails
ok 4 - config does not travel over same-machine push
ok 5 - config does not travel over ssh push
# passed all 5 test(s)
1..5
*** t5509-fetch-push-namespaces.sh ***
ok 1 - setup
ok 2 - pushing into a repository using a ref namespace
ok 3 - pulling from a repository using a ref namespace
ok 4 - mirroring a repository using a ref namespace
ok 5 - hide namespaced refs with transfer.hideRefs
ok 6 - check that transfer.hideRefs does not match unstripped refs
ok 7 - hide full refs with transfer.hideRefs
ok 8 - try to update a hidden ref
ok 9 - try to update a ref that is not hidden
ok 10 - try to update a hidden full ref
# passed all 10 test(s)
1..10
*** t5510-fetch.sh ***
ok 1 - setup
ok 2 - clone and setup child repos
ok 3 - fetch test
ok 4 - fetch test for-merge
ok 5 - fetch --prune on its own works as expected
ok 6 - fetch --prune with a branch name keeps branches
ok 7 - fetch --prune with a namespace keeps other namespaces
ok 8 - fetch --prune handles overlapping refspecs
ok 9 - fetch --prune --tags prunes branches but not tags
ok 10 - fetch --prune --tags with branch does not prune other things
ok 11 - fetch --prune --tags with refspec prunes based on refspec
ok 12 - fetch tags when there is no tags
ok 13 - fetch following tags
ok 14 - fetch uses remote ref names to describe new refs
ok 15 - fetch must not resolve short tag name
ok 16 - fetch can now resolve short remote name
ok 17 - create bundle 1
ok 18 - header of bundle looks right
ok 19 - create bundle 2
ok 20 - unbundle 1
ok 21 - bundle 1 has only 3 files 
ok 22 - unbundle 2
ok 23 - bundle does not prerequisite objects
ok 24 - bundle should be able to create a full history
ok 25 - fetch with a non-applying branch.<name>.merge
ok 26 - fetch from GIT URL with a non-applying branch.<name>.merge [1]
ok 27 - fetch from GIT URL with a non-applying branch.<name>.merge [2]
ok 28 - fetch from GIT URL with a non-applying branch.<name>.merge [3]
ok 29 - quoting of a strangely named repo
ok 30 - bundle should record HEAD correctly
ok 31 - mark initial state of origin/master
ok 32 - explicit fetch should update tracking
ok 33 - explicit pull should update tracking
ok 34 - explicit --refmap is allowed only with command-line refspec
ok 35 - explicit --refmap option overrides remote.*.fetch
ok 36 - explicitly empty --refmap option disables remote.*.fetch
ok 37 - configured fetch updates tracking
ok 38 - non-matching refspecs do not confuse tracking update
ok 39 - pushing nonexistent branch by mistake should not segv
ok 40 - auto tag following fetches minimum
ok 41 - refuse to fetch into the current branch
ok 42 - fetch into the current branch with --update-head-ok
ok 43 - fetch --dry-run
ok 44 - should be able to fetch with duplicate refspecs
ok 45 - LHS of refspec follows ref disambiguation rules
ok 46 - setup cmdline_setup variable for subsequent test
ok 47 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 48 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 49 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 50 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 51 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 52 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 53 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 54 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 55 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 56 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 57 - name prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 58 - link prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 59 - name prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 60 - link prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 61 - name prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 62 - link prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 63 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 64 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 65 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 66 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 67 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 68 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 69 - name prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 70 - link prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 71 - name prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 72 - link prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 73 - name prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 74 - link prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 75 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 76 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 77 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 78 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 79 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 80 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 81 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 82 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 83 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 84 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 85 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 86 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept
ok 87 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 88 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 89 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 90 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 91 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 92 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 93 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 94 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 95 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 96 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 97 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 98 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 99 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 100 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 101 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 102 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 103 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 104 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept
ok 105 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 106 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept
ok 107 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 108 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept
ok 109 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 110 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned
ok 111 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 112 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned
ok 113 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune-tags; branch:kept tag:kept
ok 114 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune-tags; branch:kept tag:kept
ok 115 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:kept tag:kept
ok 116 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:kept tag:kept
ok 117 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true; branch:kept tag:kept
ok 118 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true; branch:kept tag:kept
ok 119 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags; branch:pruned tag:pruned
ok 120 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags; branch:pruned tag:pruned
ok 121 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned
ok 122 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned
ok 123 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true; branch:pruned tag:pruned
ok 124 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true; branch:pruned tag:pruned
ok 125 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned
ok 126 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned
ok 127 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=false remote.origin.pruneTags=true; branch:pruned tag:pruned
ok 128 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=false remote.origin.pruneTags=true; branch:pruned tag:pruned
ok 129 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=true remote.origin.pruneTags=false; branch:kept tag:kept
ok 130 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=true remote.origin.pruneTags=false; branch:kept tag:kept
ok 131 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 132 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 133 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 134 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 135 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 136 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept
ok 137 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune-tags; branch:kept tag:kept
ok 138 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune-tags; branch:kept tag:kept
ok 139 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:pruned tag:pruned
ok 140 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:kept tag:pruned
ok 141 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin; branch:pruned tag:pruned
ok 142 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin; branch:kept tag:pruned
ok 143 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin; branch:pruned tag:pruned
ok 144 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin; branch:kept tag:pruned
ok 145 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin; branch:pruned tag:pruned
ok 146 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin; branch:kept tag:pruned
ok 147 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:pruned tag:pruned
ok 148 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:kept tag:pruned
ok 149 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:pruned tag:pruned
ok 150 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:kept tag:pruned
ok 151 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true origin; branch:pruned tag:pruned
ok 152 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true origin; branch:kept tag:pruned
ok 153 - remove remote.origin.fetch "one"
ok 154 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:kept tag:pruned
ok 155 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:kept tag:pruned
ok 156 - all boundary commits are excluded
ok 157 - fetch --prune prints the remotes url
ok 158 - branchname D/F conflict resolved by --prune
ok 159 - fetching a one-level ref works
ok 160 - fetching with auto-gc does not lock up
ok 161 - fetch aligned output
ok 162 - fetch compact output
ok 163 - --negotiation-tip limits "have" lines sent
ok 164 - --negotiation-tip understands globs
ok 165 - --negotiation-tip understands abbreviated SHA-1
# passed all 165 test(s)
# SKIP no web server found at '/usr/sbin/apache2'
1..165
*** t5511-refspec.sh ***
ok 1 - push  (invalid)
ok 2 - push :
ok 3 - push :: (invalid)
ok 4 - push +:
ok 5 - fetch 
ok 6 - fetch :
ok 7 - fetch :: (invalid)
ok 8 - push refs/heads/*:refs/remotes/frotz/*
ok 9 - push refs/heads/*:refs/remotes/frotz (invalid)
ok 10 - push refs/heads:refs/remotes/frotz/* (invalid)
ok 11 - push refs/heads/master:refs/remotes/frotz/xyzzy
ok 12 - fetch refs/heads/*:refs/remotes/frotz/*
ok 13 - fetch refs/heads/*:refs/remotes/frotz (invalid)
ok 14 - fetch refs/heads:refs/remotes/frotz/* (invalid)
ok 15 - fetch refs/heads/master:refs/remotes/frotz/xyzzy
ok 16 - fetch refs/heads/master::refs/remotes/frotz/xyzzy (invalid)
ok 17 - fetch refs/heads/maste :refs/remotes/frotz/xyzzy (invalid)
ok 18 - push master~1:refs/remotes/frotz/backup
ok 19 - fetch master~1:refs/remotes/frotz/backup (invalid)
ok 20 - push HEAD~4:refs/remotes/frotz/new
ok 21 - fetch HEAD~4:refs/remotes/frotz/new (invalid)
ok 22 - push HEAD
ok 23 - fetch HEAD
ok 24 - push refs/heads/ nitfol (invalid)
ok 25 - fetch refs/heads/ nitfol (invalid)
ok 26 - push HEAD: (invalid)
ok 27 - fetch HEAD:
ok 28 - push refs/heads/ nitfol: (invalid)
ok 29 - fetch refs/heads/ nitfol: (invalid)
ok 30 - push :refs/remotes/frotz/deleteme
ok 31 - fetch :refs/remotes/frotz/HEAD-to-me
ok 32 - push :refs/remotes/frotz/delete me (invalid)
ok 33 - fetch :refs/remotes/frotz/HEAD to me (invalid)
ok 34 - fetch refs/heads/*/for-linus:refs/remotes/mine/*-blah
ok 35 - push refs/heads/*/for-linus:refs/remotes/mine/*-blah
ok 36 - fetch refs/heads*/for-linus:refs/remotes/mine/*
ok 37 - push refs/heads*/for-linus:refs/remotes/mine/*
ok 38 - fetch refs/heads/*/*/for-linus:refs/remotes/mine/* (invalid)
ok 39 - push refs/heads/*/*/for-linus:refs/remotes/mine/* (invalid)
ok 40 - fetch refs/heads/*g*/for-linus:refs/remotes/mine/* (invalid)
ok 41 - push refs/heads/*g*/for-linus:refs/remotes/mine/* (invalid)
ok 42 - fetch refs/heads/*/for-linus:refs/remotes/mine/*
ok 43 - push refs/heads/*/for-linus:refs/remotes/mine/*
ok 44 - fetch refs/heads/Ä
ok 45 - fetch refs/heads/	tab (invalid)
# passed all 45 test(s)
1..45
*** t5512-ls-remote.sh ***
ok 1 - setup
ok 2 - ls-remote --tags .git
ok 3 - ls-remote .git
ok 4 - ls-remote --tags self
ok 5 - ls-remote self
ok 6 - ls-remote --sort="version:refname" --tags self
ok 7 - ls-remote --sort="-version:refname" --tags self
ok 8 - ls-remote --sort="-refname" --tags self
ok 9 - dies when no remote specified and no default remotes found
ok 10 - use "origin" when no remote specified
ok 11 - suppress "From <url>" with -q
ok 12 - use branch.<name>.remote if possible
ok 13 - confuses pattern as remote when no remote specified
ok 14 - die with non-2 for wrong repository even with --exit-code
ok 15 - Report success even when nothing matches
ok 16 - Report no-match with --exit-code
ok 17 - Report match with --exit-code
ok 18 - set up some extra tags for ref hiding
ok 19 - Hide some refs with transfer.hiderefs
ok 20 - Override hiding of transfer.hiderefs
ok 21 - Hide some refs with uploadpack.hiderefs
ok 22 - Override hiding of uploadpack.hiderefs
ok 23 - overrides work between mixed transfer/upload-pack hideRefs
ok 24 - ls-remote --symref
ok 25 - ls-remote with filtered symref (refname)
not ok 26 - ls-remote with filtered symref (--heads) # TODO known breakage
ok 27 - ls-remote --symref omits filtered-out matches
ok 28 # skip indicate no refs in standards-compliant empty remote (missing JGIT of PIPE,JGIT,GIT_DAEMON)
ok 29 - ls-remote works outside repository
# still have 1 known breakage(s)
# passed all remaining 28 test(s)
1..29
*** t5513-fetch-track.sh ***
ok 1 - setup
ok 2 - fetch
# passed all 2 test(s)
1..2
*** t5514-fetch-multiple.sh ***
ok 1 - setup
ok 2 - git fetch --all
ok 3 - git fetch --all should continue if a remote has errors
ok 4 - git fetch --all does not allow non-option arguments
ok 5 - git fetch --multiple (but only one remote)
ok 6 - git fetch --multiple (two remotes)
ok 7 - git fetch --multiple (bad remote names)
ok 8 - git fetch --all (skipFetchAll)
ok 9 - git fetch --multiple (ignoring skipFetchAll)
ok 10 - git fetch --all --no-tags
ok 11 - git fetch --all --tags
# passed all 11 test(s)
1..11
*** t5515-fetch-merge-logic.sh ***
ok 1 - setup
ok 2 - br-config-explicit
ok 3 - br-config-explicit config-explicit
ok 4 - br-config-explicit-merge
ok 5 - br-config-explicit-merge config-explicit
ok 6 - br-config-explicit-octopus
ok 7 - br-config-explicit-octopus config-explicit
ok 8 - br-config-glob
ok 9 - br-config-glob config-glob
ok 10 - br-config-glob-merge
ok 11 - br-config-glob-merge config-glob
ok 12 - br-config-glob-octopus
ok 13 - br-config-glob-octopus config-glob
ok 14 - br-remote-explicit
ok 15 - br-remote-explicit remote-explicit
ok 16 - br-remote-explicit-merge
ok 17 - br-remote-explicit-merge remote-explicit
ok 18 - br-remote-explicit-octopus
ok 19 - br-remote-explicit-octopus remote-explicit
ok 20 - br-remote-glob
ok 21 - br-remote-glob remote-glob
ok 22 - br-remote-glob-merge
ok 23 - br-remote-glob-merge remote-glob
ok 24 - br-remote-glob-octopus
ok 25 - br-remote-glob-octopus remote-glob
ok 26 - br-branches-default
ok 27 - br-branches-default branches-default
ok 28 - br-branches-default-merge
ok 29 - br-branches-default-merge branches-default
ok 30 - br-branches-default-octopus
ok 31 - br-branches-default-octopus branches-default
ok 32 - br-branches-one
ok 33 - br-branches-one branches-one
ok 34 - br-branches-one-merge
ok 35 - br-branches-one-merge branches-one
ok 36 - br-branches-one-octopus
ok 37 - br-branches-one-octopus branches-one
ok 38 - master
ok 39 - master config-explicit
ok 40 - master config-glob
ok 41 - master remote-explicit
ok 42 - master remote-glob
ok 43 - master branches-default
ok 44 - master branches-one
ok 45 - br-unconfig
ok 46 - br-unconfig config-explicit
ok 47 - br-unconfig config-glob
ok 48 - br-unconfig remote-explicit
ok 49 - br-unconfig remote-glob
ok 50 - br-unconfig branches-default
ok 51 - br-unconfig branches-one
ok 52 - master ../.git
ok 53 - master ../.git one
ok 54 - master ../.git one two
ok 55 - master --tags ../.git
ok 56 - master ../.git tag tag-one tag tag-three
ok 57 - master ../.git tag tag-one-tree tag tag-three-file
ok 58 - master ../.git one tag tag-one tag tag-three-file
ok 59 - br-unconfig ../.git
ok 60 - br-unconfig ../.git one
ok 61 - br-unconfig ../.git one two
ok 62 - br-unconfig --tags ../.git
ok 63 - br-unconfig ../.git tag tag-one tag tag-three
ok 64 - br-unconfig ../.git tag tag-one-tree tag tag-three-file
ok 65 - br-unconfig ../.git one tag tag-one tag tag-three-file
# passed all 65 test(s)
1..65
*** t5516-fetch-push.sh ***
ok 1 - setup
ok 2 - fetch without wildcard
ok 3 - fetch with wildcard
ok 4 - fetch with insteadOf
ok 5 - fetch with pushInsteadOf (should not rewrite)
ok 6 - push without wildcard
ok 7 - push with wildcard
ok 8 - push with insteadOf
ok 9 - push with pushInsteadOf
ok 10 - push with pushInsteadOf and explicit pushurl (pushInsteadOf should not rewrite)
ok 11 - push with matching heads
ok 12 - push with matching heads on the command line
ok 13 - failed (non-fast-forward) push with matching heads
ok 14 - push --force with matching heads
ok 15 - push with matching heads and forced update
ok 16 - push with no ambiguity (1)
ok 17 - push with no ambiguity (2)
ok 18 - push with colon-less refspec, no ambiguity
ok 19 - push with weak ambiguity (1)
ok 20 - push with weak ambiguity (2)
ok 21 - push with ambiguity
ok 22 - push with colon-less refspec (1)
ok 23 - push with colon-less refspec (2)
ok 24 - push with colon-less refspec (3)
ok 25 - push with colon-less refspec (4)
ok 26 - push head with non-existent, incomplete dest
ok 27 - push tag with non-existent, incomplete dest
ok 28 - push sha1 with non-existent, incomplete dest
ok 29 - push ref expression with non-existent, incomplete dest
ok 30 - push with HEAD
ok 31 - push with HEAD nonexisting at remote
ok 32 - push with +HEAD
ok 33 - push HEAD with non-existent, incomplete dest
ok 34 - push with config remote.*.push = HEAD
ok 35 - push with remote.pushdefault
ok 36 - push with config remote.*.pushurl
ok 37 - push with config branch.*.pushremote
ok 38 - branch.*.pushremote config order is irrelevant
ok 39 - push with dry-run
ok 40 - push updates local refs
ok 41 - push updates up-to-date local refs
ok 42 - push preserves up-to-date packed refs
ok 43 - push does not update local refs on failure
ok 44 - allow deleting an invalid remote ref
ok 45 - pushing valid refs triggers post-receive and post-update hooks
ok 46 - deleting dangling ref triggers hooks with correct args
ok 47 - deletion of a non-existent ref is not fed to post-receive and post-update hooks
ok 48 - deletion of a non-existent ref alone does trigger post-receive and post-update hooks
ok 49 - mixed ref updates, deletes, invalid deletes trigger hooks with correct input
ok 50 - allow deleting a ref using --delete
ok 51 - allow deleting a tag using --delete
ok 52 - push --delete without args aborts
ok 53 - push --delete refuses src:dest refspecs
ok 54 - warn on push to HEAD of non-bare repository
ok 55 - deny push to HEAD of non-bare repository
ok 56 - allow push to HEAD of bare repository (bare)
ok 57 - allow push to HEAD of non-bare repository (config)
ok 58 - fetch with branches
ok 59 - fetch with branches containing #
ok 60 - push with branches
ok 61 - push with branches containing #
ok 62 - push into aliased refs (consistent)
ok 63 - push into aliased refs (inconsistent)
ok 64 - force pushing required to update lightweight tag
ok 65 - force pushing required to update lightweight tag
ok 66 - push --porcelain
ok 67 - push --porcelain bad url
ok 68 - push --porcelain rejected
ok 69 - push --porcelain --dry-run rejected
ok 70 - push --prune
ok 71 - push --prune refspec
ok 72 - push to update a ref hidden by transfer.hiderefs
ok 73 - push to update a ref hidden by receive.hiderefs
ok 74 - fetch exact SHA1
ok 75 - fetch exact SHA1 in protocol v2
ok 76 - shallow fetch reachable SHA1 (but not a ref), allowtipsha1inwant=true
ok 77 - deny fetch unreachable SHA1, allowtipsha1inwant=true
ok 78 - shallow fetch reachable SHA1 (but not a ref), allowtipsha1inwant=false
ok 79 - deny fetch unreachable SHA1, allowtipsha1inwant=false
ok 80 - fetch follows tags by default
ok 81 - pushing a specific ref applies remote.$name.push as refmap
ok 82 - with no remote.$name.push, it is not used as refmap
ok 83 - with no remote.$name.push, upstream mapping is used
ok 84 - push does not follow tags by default
ok 85 - push --follow-tag only pushes relevant tags
ok 86 - push --no-thin must produce non-thin pack
ok 87 - pushing a tag pushes the tagged object
ok 88 - push into bare respects core.logallrefupdates
ok 89 - fetch into bare respects core.logallrefupdates
ok 90 - receive.denyCurrentBranch = updateInstead
ok 91 - updateInstead with push-to-checkout hook
# passed all 91 test(s)
1..91
*** t5517-push-mirror.sh ***
ok 1 - push mirror creates new branches
ok 2 - push mirror updates existing branches
ok 3 - push mirror force updates existing branches
ok 4 - push mirror removes branches
ok 5 - push mirror adds, updates and removes branches together
ok 6 - push mirror creates new tags
ok 7 - push mirror updates existing tags
ok 8 - push mirror force updates existing tags
ok 9 - push mirror removes tags
ok 10 - push mirror adds, updates and removes tags together
ok 11 - remote.foo.mirror adds and removes branches
ok 12 - remote.foo.mirror=no has no effect
# passed all 12 test(s)
1..12
*** t5518-fetch-exit-status.sh ***
ok 1 - setup
ok 2 - non-fast-forward fetch
ok 3 - forced update
# passed all 3 test(s)
1..3
*** t5519-push-alternates.sh ***
ok 1 - setup
ok 2 - alice works and pushes
ok 3 - bob fetches from alice, works and pushes
ok 4 - clean-up in case the previous failed
ok 5 - alice works and pushes again
ok 6 - bob works and pushes
ok 7 - alice works and pushes yet again
ok 8 - bob works and pushes again
# passed all 8 test(s)
1..8
*** t5520-pull.sh ***
ok 1 - setup
ok 2 - pulling into void
ok 3 - pulling into void using master:master
ok 4 - pulling into void does not overwrite untracked files
ok 5 - pulling into void does not overwrite staged files
ok 6 - pulling into void does not remove new staged files
ok 7 - pulling into void must not create an octopus
ok 8 - test . as a remote
ok 9 - the default remote . should not break explicit pull
ok 10 - fail if wildcard spec does not match any refs
ok 11 - fail if no branches specified with non-default remote
ok 12 - fail if not on a branch
ok 13 - fail if no configuration for current branch
ok 14 - pull --all: fail if no configuration for current branch
ok 15 - fail if upstream branch does not exist
ok 16 - fail if the index has unresolved entries
ok 17 - fast-forwards working tree if branch head is updated
ok 18 - fast-forward fails with conflicting work tree
ok 19 - --rebase
ok 20 - --rebase fast forward
ok 21 - --rebase --autostash fast forward
ok 22 - --rebase with conflicts shows advice
ok 23 - failed --rebase shows advice
ok 24 - --rebase fails with multiple branches
ok 25 - pull --rebase succeeds with dirty working directory and rebase.autostash set
ok 26 - pull --rebase --autostash & rebase.autostash=true
ok 27 - pull --rebase --autostash & rebase.autostash=false
ok 28 - pull --rebase --autostash & rebase.autostash unset
ok 29 - pull --rebase --no-autostash & rebase.autostash=true
ok 30 - pull --rebase --no-autostash & rebase.autostash=false
ok 31 - pull --rebase --no-autostash & rebase.autostash unset
ok 32 - pull --autostash (without --rebase) is illegal
ok 33 - pull --no-autostash (without --rebase) is illegal
ok 34 - pull.rebase
ok 35 - pull --autostash & pull.rebase=true
ok 36 - pull --no-autostash & pull.rebase=true
ok 37 - branch.to-rebase.rebase
ok 38 - branch.to-rebase.rebase should override pull.rebase
ok 39 - pull --rebase warns on --verify-signatures
ok 40 - pull --rebase does not warn on --no-verify-signatures
ok 41 - preserve merge setup
ok 42 - pull.rebase=false create a new merge commit
ok 43 - pull.rebase=true flattens keep-merge
ok 44 - pull.rebase=1 is treated as true and flattens keep-merge
ok 45 - pull.rebase=preserve rebases and merges keep-merge
ok 46 - pull.rebase=interactive
ok 47 - pull --rebase=i
ok 48 - pull.rebase=invalid fails
ok 49 - --rebase=false create a new merge commit
ok 50 - --rebase=true rebases and flattens keep-merge
ok 51 - --rebase=preserve rebases and merges keep-merge
ok 52 - --rebase=invalid fails
ok 53 - --rebase overrides pull.rebase=preserve and flattens keep-merge
ok 54 - --rebase with rebased upstream
ok 55 - --rebase -f with rebased upstream
ok 56 - --rebase with rebased default upstream
ok 57 - rebased upstream + fetch + pull --rebase
ok 58 - pull --rebase dies early with dirty working directory
ok 59 - pull --rebase works on branch yet to be born
ok 60 - pull --rebase fails on unborn branch with staged changes
ok 61 - pull --rebase fails on corrupt HEAD
ok 62 - setup for detecting upstreamed changes
ok 63 - git pull --rebase detects upstreamed changes
ok 64 - setup for avoiding reapplying old patches
ok 65 - git pull --rebase does not reapply old patches
ok 66 - git pull --rebase against local branch
# passed all 66 test(s)
1..66
*** t5521-pull-options.sh ***
ok 1 - setup
ok 2 - git pull -q
ok 3 - git pull -q --rebase
ok 4 - git pull
ok 5 - git pull --rebase
ok 6 - git pull -v
ok 7 - git pull -v --rebase
ok 8 - git pull -v -q
ok 9 - git pull -q -v
ok 10 - git pull --force
ok 11 - git pull --all
ok 12 - git pull --dry-run
ok 13 - git pull --all --dry-run
ok 14 - git pull --allow-unrelated-histories
ok 15 - git pull does not add a sign-off line
ok 16 - git pull --no-signoff does not add sign-off line
ok 17 - git pull --signoff add a sign-off line
ok 18 - git pull --no-signoff flag cancels --signoff flag
# passed all 18 test(s)
1..18
*** t5522-pull-symlink.sh ***
ok 1 - setup
ok 2 - pulling from real subdir
ok 3 - pulling from symlinked subdir
ok 4 - pushing from symlinked subdir
# passed all 4 test(s)
1..4
*** t5523-push-upstream.sh ***
ok 1 - setup bare parent
ok 2 - setup local commit
ok 3 - push -u master:master
ok 4 - push -u master:other
ok 5 - push -u --dry-run master:otherX
ok 6 - push -u master2:master2
ok 7 - push -u master2:other2
ok 8 - push -u :master2
ok 9 - push -u --all
ok 10 - push -u HEAD
ok 11 # skip progress messages go to tty (missing TTY)
ok 12 - progress messages do not go to non-tty
ok 13 - progress messages go to non-tty (forced)
ok 14 # skip push -q suppresses progress (missing TTY)
ok 15 # skip push --no-progress suppresses progress (missing TTY)
ok 16 # skip quiet push (missing TTY)
# passed all 16 test(s)
1..16
*** t5524-pull-msg.sh ***
ok 1 - setup
ok 2 - pull
ok 3 - --log=1 limits shortlog length
# passed all 3 test(s)
1..3
*** t5525-fetch-tagopt.sh ***
ok 1 - setup
ok 2 - fetch with tagopt=--no-tags does not get tag
ok 3 - fetch --tags with tagopt=--no-tags gets tag
ok 4 - fetch --no-tags with tagopt=--tags does not get tag
ok 5 - fetch with tagopt=--tags gets tag
# passed all 5 test(s)
1..5
*** t5526-fetch-submodules.sh ***
ok 1 - setup
ok 2 - fetch --recurse-submodules recurses into submodules
ok 3 - submodule.recurse option triggers recursive fetch
ok 4 - fetch --recurse-submodules -j2 has the same output behaviour
ok 5 - fetch alone only fetches superproject
ok 6 - fetch --no-recurse-submodules only fetches superproject
ok 7 - using fetchRecurseSubmodules=true in .gitmodules recurses into submodules
ok 8 - --no-recurse-submodules overrides .gitmodules config
ok 9 - using fetchRecurseSubmodules=false in .git/config overrides setting in .gitmodules
ok 10 - --recurse-submodules overrides fetchRecurseSubmodules setting from .git/config
ok 11 - --quiet propagates to submodules
ok 12 - --quiet propagates to parallel submodules
ok 13 - --dry-run propagates to submodules
ok 14 - Without --dry-run propagates to submodules
ok 15 - recurseSubmodules=true propagates into submodules
ok 16 - --recurse-submodules overrides config in submodule
ok 17 - --no-recurse-submodules overrides config setting
ok 18 - Recursion doesn't happen when no new commits are fetched in the superproject
ok 19 - Recursion stops when no new submodule commits are fetched
ok 20 - Recursion doesn't happen when new superproject commits don't change any submodules
ok 21 - Recursion picks up config in submodule
ok 22 - Recursion picks up all submodules when necessary
ok 23 - '--recurse-submodules=on-demand' doesn't recurse when no new commits are fetched in the superproject (and ignores config)
ok 24 - '--recurse-submodules=on-demand' recurses as deep as necessary (and ignores config)
ok 25 - '--recurse-submodules=on-demand' stops when no new submodule commits are found in the superproject (and ignores config)
ok 26 - 'fetch.recurseSubmodules=on-demand' overrides global config
ok 27 - 'submodule.<sub>.fetchRecurseSubmodules=on-demand' overrides fetch.recurseSubmodules
ok 28 - don't fetch submodule when newly recorded commits are already present
ok 29 - 'fetch.recurseSubmodules=on-demand' works also without .gitmodules entry
ok 30 - fetching submodules respects parallel settings
ok 31 - fetching submodule into a broken repository
ok 32 - fetch new commits when submodule got renamed
# passed all 32 test(s)
1..32
*** t5527-fetch-odd-refs.sh ***
ok 1 - setup repo with odd suffix ref
ok 2 - suffix ref is ignored during fetch
ok 3 - try to create repo with absurdly long refname
ok 4 # skip fetch handles extremely long refname (missing LONG_REF)
ok 5 # skip push handles extremely long refname (missing LONG_REF)
# passed all 5 test(s)
1..5
*** t5528-push-default.sh ***
ok 1 - setup bare remotes
ok 2 - "upstream" pushes to configured upstream
ok 3 - "upstream" does not push on unconfigured remote
ok 4 - "upstream" does not push on unconfigured branch
ok 5 - "upstream" does not push when remotes do not match
ok 6 - push from/to new branch with upstream, matching and simple
ok 7 - push ambiguously named branch with upstream, matching and simple
ok 8 - push from/to new branch with current creates remote branch
ok 9 - push to existing branch, with no upstream configured
ok 10 - push to existing branch, upstream configured with same name
ok 11 - push to existing branch, upstream configured with different name
ok 12 - push.default = current success in central workflows
ok 13 - push.default = upstream success in central workflows
ok 14 - push.default = simple failure in central workflows
ok 15 - push.default = matching success in central workflows
ok 16 - push.default = current success in triangular workflows
ok 17 - push.default = upstream failure in triangular workflows
ok 18 - push.default = simple success in triangular workflows
ok 19 - push.default = matching success in triangular workflows
ok 20 - default behavior allows "simple" push
ok 21 - default behavior rejects non-simple push
ok 22 - default triangular behavior acts like "current"
# passed all 22 test(s)
1..22
*** t5529-push-errors.sh ***
ok 1 - setup commits
ok 2 - setup remote
ok 3 - setup fake receive-pack
ok 4 - detect missing branches early
ok 5 - detect missing sha1 expressions early
ok 6 - detect ambiguous refs early
# passed all 6 test(s)
1..6
*** t5530-upload-pack-error.sh ***
ok 1 - setup and corrupt repository
ok 2 - fsck fails
ok 3 - upload-pack fails due to error in pack-objects packing
ok 4 - corrupt repo differently
ok 5 - fsck fails
ok 6 - upload-pack fails due to error in rev-list
ok 7 - upload-pack error message when bad ref requested
ok 8 - upload-pack fails due to error in pack-objects enumeration
ok 9 - create empty repository
ok 10 - fetch fails
# passed all 10 test(s)
1..10
*** t5531-deep-submodule-push.sh ***
ok 1 - setup
ok 2 - push works with recorded gitlink
ok 3 - push if submodule has no remote
ok 4 - push fails if submodule commit not on remote
ok 5 - push succeeds after commit was pushed to remote
ok 6 - push succeeds if submodule commit not on remote but using on-demand on command line
ok 7 - push succeeds if submodule commit not on remote but using on-demand from config
ok 8 - push succeeds if submodule commit not on remote but using auto-on-demand via submodule.recurse config
ok 9 - push recurse-submodules on command line overrides config
ok 10 - push recurse-submodules last one wins on command line
ok 11 - push succeeds if submodule commit not on remote using on-demand from cmdline overriding config
ok 12 - push succeeds if submodule commit disabling recursion from cmdline overriding config
ok 13 - push succeeds if submodule commit disabling recursion from cmdline (alternative form) overriding config
ok 14 - submodule entry pointing at a tag is error
ok 15 - push fails if recurse submodules option passed as yes
ok 16 - push fails when commit on multiple branches if one branch has no remote
ok 17 - push succeeds if submodule has no remote and is on the first superproject commit
ok 18 - push unpushed submodules when not needed
ok 19 - push unpushed submodules when not needed 2
ok 20 - push unpushed submodules recursively
ok 21 - push unpushable submodule recursively fails
ok 22 - push --dry-run does not recursively update submodules
ok 23 - push --dry-run does not recursively update submodules
ok 24 - push only unpushed submodules recursively
ok 25 - push propagating the remotes name to a submodule
ok 26 - push propagating refspec to a submodule
ok 27 - push propagating HEAD refspec to a submodule
# passed all 27 test(s)
1..27
*** t5532-fetch-proxy.sh ***
ok 1 - setup remote repo
ok 2 - setup proxy script
ok 3 - setup local repo
ok 4 - fetch through proxy works
ok 5 - funny hostnames are rejected before running proxy
# passed all 5 test(s)
1..5
*** t5533-push-cas.sh ***
ok 1 - setup
ok 2 - push to update (protected)
ok 3 - push to update (protected, forced)
ok 4 - push to update (protected, tracking)
ok 5 - push to update (protected, tracking, forced)
ok 6 - push to update (allowed)
ok 7 - push to update (allowed, tracking)
ok 8 - push to update (allowed even though no-ff)
ok 9 - push to delete (protected)
ok 10 - push to delete (protected, forced)
ok 11 - push to delete (allowed)
ok 12 - cover everything with default force-with-lease (protected)
ok 13 - cover everything with default force-with-lease (allowed)
ok 14 - new branch covered by force-with-lease
ok 15 - new branch covered by force-with-lease (explicit)
ok 16 - new branch already exists
ok 17 - background updates of REMOTE can be mitigated with a non-updated REMOTE-push
# passed all 17 test(s)
1..17
*** t5534-push-signed.sh ***
ok 1 - setup
ok 2 - unsigned push does not send push certificate
ok 3 - talking with a receiver without push certificate support
ok 4 - push --signed fails with a receiver without push certificate support
ok 5 - push --signed=1 is accepted
ok 6 # skip no certificate for a signed push with no update (missing GPG)
ok 7 # skip signed push sends push certificate (missing GPG)
ok 8 # skip inconsistent push options in signed push not allowed (missing GPG)
ok 9 # skip fail without key and heed user.signingkey (missing GPG)
ok 10 # skip fail without key and heed user.signingkey x509 (missing GPGSM)
# passed all 10 test(s)
1..10
*** t5535-fetch-push-symref.sh ***
ok 1 - setup
ok 2 - push
ok 3 - fetch
# passed all 3 test(s)
1..3
*** t5536-fetch-conflicts.sh ***
ok 1 - setup
ok 2 - fetch with no conflict
ok 3 - fetch conflict: config vs. config
ok 4 - fetch duplicate: config vs. config
ok 5 - fetch conflict: arg overrides config
ok 6 - fetch conflict: arg vs. arg
ok 7 - fetch conflict: criss-cross args
# passed all 7 test(s)
1..7
*** t5537-fetch-shallow.sh ***
ok 1 - setup
ok 2 - setup shallow clone
ok 3 - clone from shallow clone
ok 4 - fetch from shallow clone
ok 5 - fetch --depth from shallow clone
ok 6 - fetch --unshallow from shallow clone
ok 7 - fetch something upstream has but hidden by clients shallow boundaries
ok 8 - fetch that requires changes in .git/shallow is filtered
ok 9 - fetch --update-shallow
ok 10 - shallow fetch from a read-only repo
# passed all 10 test(s)
# SKIP no web server found at '/usr/sbin/apache2'
1..10
*** t5538-push-shallow.sh ***
ok 1 - setup
ok 2 - push from shallow clone
ok 3 - push from shallow clone, with grafted roots
ok 4 - add new shallow root with receive.updateshallow on
ok 5 - push from shallow to shallow
ok 6 - push from full to shallow
# passed all 6 test(s)
1..6
*** t5539-fetch-http-shallow.sh ***
1..0 # SKIP no web server found at '/usr/sbin/apache2'
*** t5540-http-push-webdav.sh ***
1..0 # SKIP no web server found at '/usr/sbin/apache2'
*** t5541-http-push-smart.sh ***
1..0 # SKIP no web server found at '/usr/sbin/apache2'
*** t5542-push-http-shallow.sh ***
1..0 # SKIP no web server found at '/usr/sbin/apache2'
*** t5543-atomic-push.sh ***
ok 1 - atomic push works for a single branch
ok 2 - atomic push works for two branches
ok 3 - atomic push works in combination with --mirror
ok 4 - atomic push works in combination with --force
ok 5 - atomic push fails if one branch fails
ok 6 - atomic push fails if one tag fails remotely
ok 7 - atomic push obeys update hook preventing a branch to be pushed
ok 8 - atomic push is not advertised if configured
# passed all 8 test(s)
1..8
*** t5544-pack-objects-hook.sh ***
ok 1 - create some history to fetch
ok 2 - create debugging hook script
ok 3 - hook runs via global config
ok 4 - hook outputs are sane
ok 5 - hook runs from -c config
ok 6 - hook does not run from repo config
# passed all 6 test(s)
1..6
*** t5545-push-options.sh ***
ok 1 - one push option works for a single branch
ok 2 - push option denied by remote
ok 3 - two push options work
ok 4 - push options and submodules
ok 5 - default push option
ok 6 - two default push options
ok 7 - push option from command line overrides from-config push option
ok 8 - empty value of push.pushOption in config clears the list
ok 9 - invalid push option in config
ok 10 - push options keep quoted characters intact (direct)
# passed all 10 test(s)
# SKIP no web server found at '/usr/sbin/apache2'
1..10
*** t5546-receive-limits.sh ***
ok 1 - create known-size (1024 bytes) commit
ok 2 - prepare destination repository
ok 3 - set unpacklimit to 1
ok 4 - setting receive.maxInputSize to 512 rejects push
ok 5 - bumping limit to 4k allows push
ok 6 - prepare destination repository (again)
ok 7 - lifting the limit allows push
ok 8 - prepare destination repository
ok 9 - set unpacklimit to 10000
ok 10 - setting receive.maxInputSize to 512 rejects push
ok 11 - bumping limit to 4k allows push
ok 12 - prepare destination repository (again)
ok 13 - lifting the limit allows push
# passed all 13 test(s)
1..13
*** t5547-push-quarantine.sh ***
ok 1 - create picky dest repo
ok 2 - accepted objects work
ok 3 - rejected objects are not installed
ok 4 - rejected objects are removed
ok 5 - push to repo path with path separator (colon)
ok 6 - updating a ref from quarantine is forbidden
# passed all 6 test(s)
1..6
*** t5550-http-fetch-dumb.sh ***
1..0 # SKIP no web server found at '/usr/sbin/apache2'
*** t5551-http-fetch-smart.sh ***
1..0 # SKIP no web server found at '/usr/sbin/apache2'
*** t5552-skipping-fetch-negotiator.sh ***
ok 1 - commits with no parents are sent regardless of skip distance
ok 2 - unknown fetch.negotiationAlgorithm values error out
ok 3 - when two skips collide, favor the larger one
ok 4 - use ref advertisement to filter out commits
ok 5 - handle clock skew
ok 6 - do not send "have" with ancestors of commits that server ACKed
# passed all 6 test(s)
1..6
*** t5560-http-backend-noserver.sh ***
ok 1 - setup repository
ok 2 - direct refs/heads/master not found
ok 3 - static file is ok
ok 4 - no export by default
ok 5 - export if git-daemon-export-ok
ok 6 - static file if http.getanyfile true is ok
ok 7 - static file if http.getanyfile false fails
ok 8 - http.uploadpack default enabled
ok 9 - http.uploadpack true
ok 10 - http.uploadpack false
ok 11 - http.receivepack default disabled
ok 12 - http.receivepack true
ok 13 - http.receivepack false
ok 14 - http-backend blocks bad PATH_INFO
# passed all 14 test(s)
1..14
*** t5561-http-backend.sh ***
1..0 # SKIP no web server found at '/usr/sbin/apache2'
*** t5562-http-backend-content-length.sh ***
ok 1 - setup
ok 2 - setup, compression related
ok 3 - fetch plain
ok 4 - fetch plain truncated
ok 5 - fetch plain empty
ok 6 - fetch gzipped
ok 7 - fetch gzipped truncated
ok 8 - fetch gzipped empty
ok 9 - push plain
ok 10 - push plain truncated
ok 11 - push plain empty
ok 12 - push gzipped
ok 13 - push gzipped truncated
ok 14 - push gzipped empty
ok 15 - CONTENT_LENGTH overflow ssite_t
ok 16 - empty CONTENT_LENGTH
# passed all 16 test(s)
1..16
*** t5570-git-daemon.sh ***
ok 1 - setup repository
ok 2 - create git-accessible bare repository
ok 3 - clone git repository
ok 4 - fetch changes via git protocol
ok 5 - no-op fetch -v stderr is as expected
ok 6 - no-op fetch without "-v" is quiet
ok 7 - remote detects correct HEAD
ok 8 - prepare pack objects
ok 9 - fetch notices corrupt pack
ok 10 - fetch notices corrupt idx
ok 11 - clone non-existent
ok 12 - push disabled
ok 13 - read access denied
ok 14 - not exported
ok 15 - clone non-existent
ok 16 - push disabled
ok 17 - read access denied
ok 18 - not exported
ok 19 - access repo via interpolated hostname
ok 20 - hostname cannot break out of directory
ok 21 - daemon log records all attributes
ok 22 - hostname interpolation works after LF-stripping
# passed all 22 test(s)
1..22
*** t5571-pre-push-hook.sh ***
ok 1 - setup
ok 2 - push with failing hook
ok 3 - --no-verify bypasses hook
ok 4 - push with hook
ok 5 - add a branch
ok 6 - push to default
ok 7 - push non-branches
ok 8 - push delete
ok 9 - push to URL
ok 10 - set up many-ref tests
ok 11 - sigpipe does not cause pre-push hook failure
# passed all 11 test(s)
1..11
*** t5572-pull-submodule.sh ***
ok 1 - git_pull: added submodule creates empty directory
ok 2 - git_pull: added submodule leaves existing empty directory alone
ok 3 - git_pull: replace tracked file with submodule creates empty directory
ok 4 - git_pull: replace directory with submodule
ok 5 - git_pull: removed submodule leaves submodule directory and its contents in place
ok 6 - git_pull: removed submodule leaves submodule containing a .git directory alone
ok 7 - git_pull: replace submodule with a directory must fail
ok 8 - git_pull: replace submodule containing a .git directory with a directory must fail
not ok 9 - git_pull: replace submodule with a file must fail # TODO known breakage
not ok 10 - git_pull: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - git_pull: modified submodule does not update submodule work tree
ok 12 - git_pull: modified submodule does not update submodule work tree to invalid commit
ok 13 - git_pull: modified submodule does not update submodule work tree from invalid commit
ok 14 - git_pull: added submodule doesn't remove untracked unignored file with same name
ok 15 - git_pull_ff: added submodule creates empty directory
ok 16 - git_pull_ff: added submodule leaves existing empty directory alone
ok 17 - git_pull_ff: replace tracked file with submodule creates empty directory
ok 18 - git_pull_ff: replace directory with submodule
ok 19 - git_pull_ff: removed submodule leaves submodule directory and its contents in place
ok 20 - git_pull_ff: removed submodule leaves submodule containing a .git directory alone
ok 21 - git_pull_ff: replace submodule with a directory must fail
ok 22 - git_pull_ff: replace submodule containing a .git directory with a directory must fail
not ok 23 - git_pull_ff: replace submodule with a file must fail # TODO known breakage
not ok 24 - git_pull_ff: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 25 - git_pull_ff: modified submodule does not update submodule work tree
ok 26 - git_pull_ff: modified submodule does not update submodule work tree to invalid commit
ok 27 - git_pull_ff: modified submodule does not update submodule work tree from invalid commit
ok 28 - git_pull_ff: added submodule doesn't remove untracked unignored file with same name
ok 29 - git_pull_ff_only: added submodule creates empty directory
ok 30 - git_pull_ff_only: added submodule leaves existing empty directory alone
ok 31 - git_pull_ff_only: replace tracked file with submodule creates empty directory
ok 32 - git_pull_ff_only: replace directory with submodule
ok 33 - git_pull_ff_only: removed submodule leaves submodule directory and its contents in place
ok 34 - git_pull_ff_only: removed submodule leaves submodule containing a .git directory alone
ok 35 - git_pull_ff_only: replace submodule with a directory must fail
ok 36 - git_pull_ff_only: replace submodule containing a .git directory with a directory must fail
not ok 37 - git_pull_ff_only: replace submodule with a file must fail # TODO known breakage
not ok 38 - git_pull_ff_only: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 39 - git_pull_ff_only: modified submodule does not update submodule work tree
ok 40 - git_pull_ff_only: modified submodule does not update submodule work tree to invalid commit
ok 41 - git_pull_ff_only: modified submodule does not update submodule work tree from invalid commit
ok 42 - git_pull_ff_only: added submodule doesn't remove untracked unignored file with same name
ok 43 - git_pull_noff: added submodule creates empty directory
ok 44 - git_pull_noff: added submodule leaves existing empty directory alone
ok 45 - git_pull_noff: replace tracked file with submodule creates empty directory
not ok 46 - git_pull_noff: replace directory with submodule # TODO known breakage
ok 47 - git_pull_noff: removed submodule leaves submodule directory and its contents in place
ok 48 - git_pull_noff: removed submodule leaves submodule containing a .git directory alone
not ok 49 - git_pull_noff: replace submodule with a directory must fail # TODO known breakage
not ok 50 - git_pull_noff: replace submodule containing a .git directory with a directory must fail # TODO known breakage
not ok 51 - git_pull_noff: replace submodule with a file must fail # TODO known breakage
not ok 52 - git_pull_noff: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 53 - git_pull_noff: modified submodule does not update submodule work tree
ok 54 - git_pull_noff: modified submodule does not update submodule work tree to invalid commit
ok 55 - git_pull_noff: modified submodule does not update submodule work tree from invalid commit
ok 56 - git_pull_noff: added submodule doesn't remove untracked unignored file with same name
ok 57 - pull --recurse-submodule setup
ok 58 - recursive pull updates working tree
ok 59 - submodule.recurse option triggers recursive pull
ok 60 -  --[no-]recurse-submodule and submodule.recurse
ok 61 - recursive rebasing pull
ok 62 - pull rebase recursing fails with conflicts
ok 63 - branch has no merge base with remote-tracking counterpart
# still have 11 known breakage(s)
# passed all remaining 52 test(s)
1..63
*** t5573-pull-verify-signatures.sh ***
ok 1 # skip create repositories with signed commits (missing GPG)
ok 2 # skip pull unsigned commit with --verify-signatures (missing GPG)
ok 3 # skip pull commit with bad signature with --verify-signatures (missing GPG)
ok 4 # skip pull commit with untrusted signature with --verify-signatures (missing GPG)
ok 5 # skip pull signed commit with --verify-signatures (missing GPG)
ok 6 # skip pull commit with bad signature without verification (missing GPG)
ok 7 # skip pull commit with bad signature with --no-verify-signatures (missing GPG)
# passed all 7 test(s)
1..7
*** t5580-clone-push-unc.sh ***
1..0 # SKIP skipping Windows-only path tests
*** t5600-clone-fail-cleanup.sh ***
ok 1 - clone of non-existent source should fail
ok 2 - failed clone should not leave a directory
ok 3 - create a repo to clone
ok 4 - create objects in repo for later corruption
ok 5 - clone of non-existent (relative to $PWD) source should fail
ok 6 - clone should work now that source exists
ok 7 - successful clone must leave the directory
ok 8 - failed clone --separate-git-dir should not leave any directories
ok 9 - failed clone into empty leaves directory (vanilla)
ok 10 - failed clone into empty leaves directory (bare)
ok 11 - failed clone into empty leaves directory (separate)
ok 12 - failed clone into empty leaves directory (separate, git)
ok 13 - failed clone into empty leaves directory (separate, wt)
# passed all 13 test(s)
1..13
*** t5601-clone.sh ***
ok 1 - setup
ok 2 - clone with excess parameters (1)
ok 3 - clone with excess parameters (2)
ok 4 - output from clone
ok 5 - clone does not keep pack
ok 6 - clone checks out files
ok 7 - clone respects GIT_WORK_TREE
ok 8 - clone from hooks
ok 9 - clone creates intermediate directories
ok 10 - clone creates intermediate directories for bare repo
ok 11 - clone --mirror
ok 12 - clone --mirror with detached HEAD
ok 13 - clone --bare with detached HEAD
ok 14 - clone --bare names the local repository <name>.git
ok 15 - clone --mirror does not repeat tags
ok 16 - clone to destination with trailing /
ok 17 - clone to destination with extra trailing /
ok 18 - clone to an existing empty directory
ok 19 - clone to an existing non-empty directory
ok 20 - clone to an existing path
ok 21 - clone a void
ok 22 - clone respects global branch.autosetuprebase
ok 23 - respect url-encoding of file://
ok 24 - do not query-string-decode + in URLs
ok 25 - do not respect url-encoding of non-url path
ok 26 - clone separate gitdir
ok 27 - clone separate gitdir: output
ok 28 - clone from .git file
ok 29 - fetch from .git gitfile
ok 30 - fetch from gitfile parent
ok 31 - clone separate gitdir where target already exists
ok 32 - clone --reference from original
ok 33 - clone with more than one --reference
ok 34 - clone from original with relative alternate
ok 35 - clone checking out a tag
ok 36 - set up ssh wrapper
ok 37 - clone myhost:src uses ssh
ok 38 - clone local path foo:bar
ok 39 - bracketed hostnames are still ssh
ok 40 - OpenSSH variant passes -4
ok 41 - variant can be overridden
ok 42 - variant=auto picks based on basename
ok 43 - simple does not support -4/-6
ok 44 - simple does not support port
ok 45 - uplink is treated as simple
ok 46 - OpenSSH-like uplink is treated as ssh
ok 47 - plink is treated specially (as putty)
ok 48 - plink.exe is treated specially (as putty)
ok 49 - tortoiseplink is like putty, with extra arguments
ok 50 - double quoted plink.exe in GIT_SSH_COMMAND
ok 51 - single quoted plink.exe in GIT_SSH_COMMAND
ok 52 - GIT_SSH_VARIANT overrides plink detection
ok 53 - ssh.variant overrides plink detection
ok 54 - GIT_SSH_VARIANT overrides plink detection to plink
ok 55 - GIT_SSH_VARIANT overrides plink to tortoiseplink
ok 56 - clean failure on broken quoting
ok 57 - clone c:temp is ssl
ok 58 # skip clone c:temp is dos drive (missing MINGW)
ok 59 - clone host:rep
ok 60 - clone host:rep/home/project
ok 61 - clone host:123
ok 62 - clone [::1]:rep
ok 63 - clone [::1]:rep/home/project
ok 64 - clone [::1]:123
ok 65 - clone host:/~repo
ok 66 - clone [::1]:/~repo
ok 67 - clone foo/bar:baz is not ssh
ok 68 - clone [foo]bar/baz:qux is not ssh
ok 69 - clone [foo/bar]:baz is not ssh
ok 70 - clone ssh://host.xz/home/user/repo
ok 71 - clone ssh://host.xz/~repo
ok 72 - clone ssh://host.xz:/home/user/repo
ok 73 - clone ssh://host.xz:/~repo
ok 74 - clone ssh://host.xz:22/home/user/repo
ok 75 - clone ssh://host.xz:22/~repo
ok 76 - clone ssh://::1/home/user/repo
ok 77 - clone ssh://[::1]/home/user/repo
ok 78 - clone ssh://[::1]:/home/user/repo
ok 79 - clone ssh://user@::1/home/user/repo
ok 80 - clone ssh://user@[::1]/home/user/repo
ok 81 - clone ssh://user@[::1]:/home/user/repo
ok 82 - clone ssh://[user@::1]/home/user/repo
ok 83 - clone ssh://[user@::1]:/home/user/repo
ok 84 - clone ssh://::1/~repo
ok 85 - clone ssh://[::1]/~repo
ok 86 - clone ssh://user@::1/~repo
ok 87 - clone ssh://user@[::1]/~repo
ok 88 - clone ssh://[user@::1]/~repo
ok 89 - clone ssh://[::1]:22/home/user/repo
ok 90 - clone ssh://user@[::1]:22/home/user/repo
ok 91 - clone ssh://[user@::1]:22/home/user/repo
ok 92 - clone ssh://[::1]:22/~repo
ok 93 - clone ssh://user@[::1]:22/~repo
ok 94 - clone ssh://[user@::1]:22/~repo
ok 95 - clone from a repository with two identical branches
ok 96 - shallow clone locally
ok 97 - GIT_TRACE_PACKFILE produces a usable pack
ok 98 - clone on case-insensitive fs
ok 99 - partial clone
ok 100 - partial clone: warn if server does not support object filtering
ok 101 - batch missing blob request during checkout
ok 102 - batch missing blob request does not inadvertently try to fetch gitlinks
# passed all 102 test(s)
# SKIP no web server found at '/usr/sbin/apache2'
1..102
*** t5602-clone-remote-exec.sh ***
ok 1 - setup
ok 2 - clone calls git upload-pack unqualified with no -u option
ok 3 - clone calls specified git upload-pack with -u option
# passed all 3 test(s)
1..3
*** t5603-clone-dirname.sh ***
ok 1 - setup ssh wrapper
ok 2 - clone of host:foo goes to foo (non-bare)
ok 3 - clone of host:foo goes to foo.git (bare)
ok 4 - clone of host:foo.git goes to foo (non-bare)
ok 5 - clone of host:foo.git goes to foo.git (bare)
ok 6 - clone of host:foo/.git goes to foo (non-bare)
ok 7 - clone of host:foo/.git goes to foo.git (bare)
ok 8 - clone of ssh://host/foo goes to foo (non-bare)
ok 9 - clone of ssh://host/foo goes to foo.git (bare)
ok 10 - clone of ssh://host/foo.git goes to foo (non-bare)
ok 11 - clone of ssh://host/foo.git goes to foo.git (bare)
ok 12 - clone of ssh://host/foo/.git goes to foo (non-bare)
ok 13 - clone of ssh://host/foo/.git goes to foo.git (bare)
ok 14 - clone of ssh://host/foo/ goes to foo (non-bare)
ok 15 - clone of ssh://host/foo/// goes to foo (non-bare)
ok 16 - clone of ssh://host/foo/.git/ goes to foo (non-bare)
ok 17 - clone of ssh://host/foo.git/ goes to foo (non-bare)
ok 18 - clone of ssh://host/foo.git/// goes to foo (non-bare)
ok 19 - clone of ssh://host/foo///.git/ goes to foo (non-bare)
ok 20 - clone of ssh://host/foo/.git/// goes to foo (non-bare)
ok 21 - clone of host:foo/ goes to foo (non-bare)
ok 22 - clone of host:foo/// goes to foo (non-bare)
ok 23 - clone of host:foo.git/ goes to foo (non-bare)
ok 24 - clone of host:foo/.git/ goes to foo (non-bare)
ok 25 - clone of host:foo.git/// goes to foo (non-bare)
ok 26 - clone of host:foo///.git/ goes to foo (non-bare)
ok 27 - clone of host:foo/.git/// goes to foo (non-bare)
ok 28 - clone of ssh://host/ goes to host (non-bare)
ok 29 - clone of ssh://host:1234/ goes to host (non-bare)
ok 30 - clone of ssh://user@host/ goes to host (non-bare)
ok 31 - clone of host:/ goes to host (non-bare)
ok 32 - clone of ssh://user:password@host/ goes to host (non-bare)
ok 33 - clone of ssh://user:password@host:1234/ goes to host (non-bare)
ok 34 - clone of ssh://user:passw@rd@host:1234/ goes to host (non-bare)
ok 35 - clone of user@host:/ goes to host (non-bare)
ok 36 - clone of user:password@host:/ goes to host (non-bare)
ok 37 - clone of user:passw@rd@host:/ goes to host (non-bare)
ok 38 - clone of ssh://host/foo@bar goes to foo@bar (non-bare)
ok 39 - clone of ssh://host/foo@bar.git goes to foo@bar (non-bare)
ok 40 - clone of ssh://user:password@host/foo@bar goes to foo@bar (non-bare)
ok 41 - clone of ssh://user:passw@rd@host/foo@bar.git goes to foo@bar (non-bare)
ok 42 - clone of host:/foo@bar goes to foo@bar (non-bare)
ok 43 - clone of host:/foo@bar.git goes to foo@bar (non-bare)
ok 44 - clone of user:password@host:/foo@bar goes to foo@bar (non-bare)
ok 45 - clone of user:passw@rd@host:/foo@bar.git goes to foo@bar (non-bare)
ok 46 - clone of ssh://user:password@host/test:1234 goes to 1234 (non-bare)
ok 47 - clone of ssh://user:password@host/test:1234.git goes to 1234 (non-bare)
# passed all 47 test(s)
1..47
*** t5604-clone-reference.sh ***
ok 1 - preparing first repository
ok 2 - preparing second repository
ok 3 - cloning with reference (-l -s)
ok 4 - existence of info/alternates
ok 5 - pulling from reference
ok 6 - that reference gets used
ok 7 - cloning with reference (no -l -s)
ok 8 - fetched no objects
ok 9 - existence of info/alternates
ok 10 - pulling from reference
ok 11 - that reference gets used
ok 12 - updating origin
ok 13 - pulling changes from origin
ok 14 - that alternate to origin gets used
ok 15 - pulling changes from origin
ok 16 - check objects expected to exist locally
ok 17 - preparing alternate repository #1
ok 18 - cloning alternate repo #2 and adding changes to repo #1
ok 19 - cloning alternate repo #1, using #2 as reference
ok 20 - cloning with reference being subset of source (-l -s)
ok 21 - cloning with multiple references drops duplicates
ok 22 - clone with reference from a tagged repository
ok 23 - prepare branched repository
ok 24 - fetch with incomplete alternates
ok 25 - clone using repo with gitfile as a reference
ok 26 - clone using repo pointed at by gitfile as reference
ok 27 - clone and dissociate from reference
ok 28 - clone, dissociate from partial reference and repack
ok 29 - clone, dissociate from alternates
# passed all 29 test(s)
1..29
*** t5605-clone-local.sh ***
ok 1 - preparing origin repository
ok 2 - local clone without .git suffix
ok 3 - local clone with .git suffix
ok 4 - local clone from x
ok 5 - local clone from x.git that does not exist
ok 6 - With -no-hardlinks, local will make a copy
ok 7 - Even without -l, local will make a hardlink
ok 8 - local clone of repo with nonexistent ref in HEAD
ok 9 - bundle clone without .bundle suffix
ok 10 - bundle clone with .bundle suffix
ok 11 - bundle clone from b4
ok 12 - bundle clone from b4.bundle that does not exist
ok 13 - bundle clone with nonexistent HEAD
ok 14 - clone empty repository
ok 15 - clone empty repository, and then push should not segfault.
ok 16 - cloning non-existent directory fails
ok 17 - cloning non-git directory fails
ok 18 - cloning file:// does not hardlink
ok 19 - cloning a local path with --no-local does not hardlink
ok 20 - cloning locally respects "-u" for fetching refs
# passed all 20 test(s)
1..20
*** t5606-clone-options.sh ***
ok 1 - setup
ok 2 - clone -o
ok 3 - redirected clone does not show progress
ok 4 - redirected clone -v does show progress
# passed all 4 test(s)
1..4
*** t5607-clone-bundle.sh ***
ok 1 - setup
ok 2 - annotated tags can be excluded by rev-list options
ok 3 - die if bundle file cannot be created
not ok 4 - bundle --stdin # TODO known breakage
not ok 5 - bundle --stdin <rev-list options> # TODO known breakage
ok 6 - empty bundle file is rejected
ok 7 - ridiculously long subject in boundary
ok 8 - prerequisites with an empty commit message
# still have 2 known breakage(s)
# passed all remaining 6 test(s)
1..8
*** t5608-clone-2gb.sh ***
Skipping expensive 2GB clone test; enable it with GIT_TEST_CLONE_2GB=t
ok 1 # skip setup (missing CLONE_2GB)
ok 2 # skip clone - bare (missing CLONE_2GB)
ok 3 # skip clone - with worktree, file:// protocol (missing CLONE_2GB)
# passed all 3 test(s)
1..3
*** t5609-clone-branch.sh ***
ok 1 - setup
ok 2 - vanilla clone chooses HEAD
ok 3 - clone -b chooses specified branch
ok 4 - clone -b sets up tracking
ok 5 - clone -b does not munge remotes/origin/HEAD
ok 6 - clone -b with bogus branch
ok 7 - clone -b not allowed with empty repos
# passed all 7 test(s)
1..7
*** t5610-clone-detached.sh ***
ok 1 - setup
ok 2 - clone repo (detached HEAD points to branch)
ok 3 - cloned HEAD matches
not ok 4 - cloned HEAD is detached # TODO known breakage
ok 5 - clone repo (detached HEAD points to tag)
ok 6 - cloned HEAD matches
ok 7 - cloned HEAD is detached
ok 8 - clone repo (detached HEAD points to history)
ok 9 - cloned HEAD matches
ok 10 - cloned HEAD is detached
ok 11 - clone repo (orphan detached HEAD)
ok 12 - cloned HEAD matches
ok 13 - cloned HEAD is detached
# still have 1 known breakage(s)
# passed all remaining 12 test(s)
1..13
*** t5611-clone-config.sh ***
ok 1 - clone -c sets config in cloned repo
ok 2 - clone -c can set multi-keys
ok 3 - clone -c can set multi-keys, including some empty
ok 4 - clone -c without a value is boolean true
ok 5 - clone -c config is available during clone
ok 6 # skip clone -c core.hideDotFiles (missing MINGW)
# passed all 6 test(s)
1..6
*** t5612-clone-refspec.sh ***
ok 1 - setup
ok 2 - by default all branches will be kept updated
ok 3 - by default no tags will be kept updated
ok 4 - clone with --no-tags
ok 5 - --single-branch while HEAD pointing at master
ok 6 - --single-branch while HEAD pointing at master and --no-tags
ok 7 - --single-branch while HEAD pointing at side
ok 8 - --single-branch with explicit --branch side
ok 9 - --single-branch with explicit --branch with tag fetches updated tag
ok 10 - --single-branch with explicit --branch with tag fetches updated tag despite --no-tags
ok 11 - --single-branch with --mirror
ok 12 - --single-branch with explicit --branch and --mirror
ok 13 - --single-branch with detached
# passed all 13 test(s)
1..13
*** t5613-info-alternate.sh ***
ok 1 - preparing first repository
ok 2 - preparing second repository
ok 3 - preparing third repository
ok 4 - count-objects shows the alternates
ok 5 - creating too deep nesting
ok 6 - validity of seventh repository
ok 7 - invalidity of eighth repository
ok 8 - breaking of loops
ok 9 - that info/alternates is necessary
ok 10 - that relative alternate is possible for current dir
ok 11 - that relative alternate is recursive
ok 12 - relative duplicates are eliminated
ok 13 # skip dup finding can be case-insensitive (missing CASE_INSENSITIVE_FS)
# passed all 13 test(s)
1..13
*** t5614-clone-submodules-shallow.sh ***
ok 1 - setup
ok 2 - nonshallow clone implies nonshallow submodule
ok 3 - shallow clone with shallow submodule
ok 4 - shallow clone does not imply shallow submodule
ok 5 - shallow clone with non shallow submodule
ok 6 - non shallow clone with shallow submodule
ok 7 - clone follows shallow recommendation
ok 8 - get unshallow recommended shallow submodule
ok 9 - clone follows non shallow recommendation
# passed all 9 test(s)
1..9
*** t5615-alternate-env.sh ***
ok 1 - create alternate repositories
ok 2 - objects inaccessible without alternates
ok 3 - access alternate via absolute path
ok 4 - access multiple alternates
ok 5 - access alternate via relative path (bare)
ok 6 - access alternate via relative path (worktree)
ok 7 - access alternate via relative path (subdir)
ok 8 - mix of quoted and unquoted alternates
ok 9 - broken quoting falls back to interpreting raw
# passed all 9 test(s)
1..9
*** t5616-partial-clone.sh ***
ok 1 - setup normal src repo
ok 2 - setup bare clone for server
ok 3 - do partial clone 1
ok 4 - verify checkout with dynamic object fetch
ok 5 - push new commits to server
ok 6 - partial fetch inherits filter settings
ok 7 - verify diff causes dynamic object fetch
ok 8 - verify blame causes dynamic object fetch
ok 9 - push new commits to server for file.2.txt
ok 10 - override inherited filter-spec using --no-filter
ok 11 - push new commits to server for file.3.txt
ok 12 - manual prefetch of missing objects
ok 13 - partial clone with transfer.fsckobjects=1 uses index-pack --fsck-objects
ok 14 - partial clone fetches blobs pointed to by refs even if normally filtered out
# passed all 14 test(s)
# SKIP no web server found at '/usr/sbin/apache2'
1..14
*** t5700-protocol-v1.sh ***
ok 1 - create repo to be served by git-daemon
ok 2 - clone with git:// using protocol v1
ok 3 - fetch with git:// using protocol v1
ok 4 - pull with git:// using protocol v1
ok 5 - push with git:// using protocol v1
ok 6 - create repo to be served by file:// transport
ok 7 - clone with file:// using protocol v1
ok 8 - fetch with file:// using protocol v1
ok 9 - pull with file:// using protocol v1
ok 10 - push with file:// using protocol v1
ok 11 - setup ssh wrapper
ok 12 - create repo to be served by ssh:// transport
ok 13 - clone with ssh:// using protocol v1
ok 14 - fetch with ssh:// using protocol v1
ok 15 - pull with ssh:// using protocol v1
ok 16 - push with ssh:// using protocol v1
# passed all 16 test(s)
# SKIP no web server found at '/usr/sbin/apache2'
1..16
*** t5701-git-serve.sh ***
ok 1 - test capability advertisement
ok 2 - stateless-rpc flag does not list capabilities
ok 3 - request invalid capability
ok 4 - request with no command
ok 5 - request invalid command
ok 6 - setup some refs and tags
ok 7 - basics of ls-refs
ok 8 - basic ref-prefixes
ok 9 - refs/heads prefix
ok 10 - peel parameter
ok 11 - symrefs parameter
ok 12 - sending server-options
ok 13 - unexpected lines are not allowed in fetch request
# passed all 13 test(s)
1..13
*** t5702-protocol-v2.sh ***
ok 1 - create repo to be served by git-daemon
ok 2 - list refs with git:// using protocol v2
ok 3 - ref advertisment is filtered with ls-remote using protocol v2
ok 4 - clone with git:// using protocol v2
ok 5 - fetch with git:// using protocol v2
ok 6 - pull with git:// using protocol v2
ok 7 - push with git:// and a config of v2 does not request v2
ok 8 - create repo to be served by file:// transport
ok 9 - list refs with file:// using protocol v2
ok 10 - ref advertisment is filtered with ls-remote using protocol v2
ok 11 - server-options are sent when using ls-remote
ok 12 - clone with file:// using protocol v2
ok 13 - fetch with file:// using protocol v2
ok 14 - ref advertisment is filtered during fetch using protocol v2
ok 15 - server-options are sent when fetching
ok 16 - upload-pack respects config using protocol v2
ok 17 - setup filter tests
ok 18 - partial clone
ok 19 - dynamically fetch missing object
ok 20 - partial fetch
ok 21 - do not advertise filter if not configured to do so
ok 22 - partial clone warns if filter is not advertised
ok 23 - even with handcrafted request, filter does not work if not advertised
ok 24 - default refspec is used to filter ref when fetchcing
ok 25 - fetch supports various ways of have lines
ok 26 - fetch supports include-tag and tag following
# passed all 26 test(s)
# SKIP no web server found at '/usr/sbin/apache2'
1..26
*** t5703-upload-pack-ref-in-want.sh ***
ok 1 - setup repository
ok 2 - config controls ref-in-want advertisement
ok 3 - invalid want-ref line
ok 4 - basic want-ref
ok 5 - multiple want-ref lines
ok 6 - mix want and want-ref
ok 7 - want-ref with ref we already have commit for
# passed all 7 test(s)
# SKIP no web server found at '/usr/sbin/apache2'
1..7
*** t5801-remote-helpers.sh ***
ok 1 - setup repository
ok 2 - cloning from local repo
ok 3 - create new commit on remote
ok 4 - pulling from local repo
ok 5 - pushing to local repo
ok 6 - fetch new branch
ok 7 - fetch multiple branches
ok 8 - push when remote has extra refs
ok 9 - push new branch by name
ok 10 - push new branch with old:new refspec
ok 11 - push new branch with HEAD:new refspec
ok 12 - push delete branch
ok 13 - forced push
ok 14 - cloning without refspec
ok 15 - pulling without refspecs
ok 16 - pushing without refspecs
ok 17 - pulling without marks
not ok 18 - pushing without marks # TODO known breakage
ok 19 - push all with existing object
ok 20 - push ref with existing object
ok 21 # skip push signed tag (missing GPG)
ok 22 # skip push signed tag with signed-tags capability (missing GPG)
ok 23 - push update refs
ok 24 - push update refs disabled by no-private-update
ok 25 - push update refs failure
ok 26 - proper failure checks for fetching
ok 27 - proper failure checks for pushing
ok 28 - push messages
ok 29 - fetch HEAD
ok 30 - fetch url
# still have 1 known breakage(s)
# passed all remaining 29 test(s)
1..30
*** t5802-connect-helper.sh ***
ok 1 - setup
ok 2 - clone
ok 3 - update following tag
ok 4 - update backfilled tag
ok 5 - update backfilled tag without primary transfer
ok 6 - set up fake git-daemon
ok 7 - ext command can connect to git daemon (no vhost)
ok 8 - ext command can connect to git daemon (vhost)
# passed all 8 test(s)
1..8
*** t5810-proto-disable-local.sh ***
ok 1 - setup repository to clone
ok 2 - clone file:// (enabled)
ok 3 - fetch file:// (enabled)
ok 4 - push file:// (enabled)
ok 5 - push file:// (disabled)
ok 6 - fetch file:// (disabled)
ok 7 - clone file:// (disabled)
ok 8 - clone file:// (env var has precedence)
ok 9 - clone file:// (enabled with config)
ok 10 - fetch file:// (enabled)
ok 11 - push file:// (enabled)
ok 12 - push file:// (disabled)
ok 13 - fetch file:// (disabled)
ok 14 - clone file:// (disabled)
ok 15 - clone file:// (enabled)
ok 16 - fetch file:// (enabled)
ok 17 - push file:// (enabled)
ok 18 - push file:// (disabled)
ok 19 - fetch file:// (disabled)
ok 20 - clone file:// (disabled)
ok 21 - clone file:// (enabled)
ok 22 - fetch file:// (enabled)
ok 23 - push file:// (enabled)
ok 24 - push file:// (disabled)
ok 25 - fetch file:// (disabled)
ok 26 - clone file:// (disabled)
ok 27 - clone path (enabled)
ok 28 - fetch path (enabled)
ok 29 - push path (enabled)
ok 30 - push path (disabled)
ok 31 - fetch path (disabled)
ok 32 - clone path (disabled)
ok 33 - clone path (env var has precedence)
ok 34 - clone path (enabled with config)
ok 35 - fetch path (enabled)
ok 36 - push path (enabled)
ok 37 - push path (disabled)
ok 38 - fetch path (disabled)
ok 39 - clone path (disabled)
ok 40 - clone path (enabled)
ok 41 - fetch path (enabled)
ok 42 - push path (enabled)
ok 43 - push path (disabled)
ok 44 - fetch path (disabled)
ok 45 - clone path (disabled)
ok 46 - clone path (enabled)
ok 47 - fetch path (enabled)
ok 48 - push path (enabled)
ok 49 - push path (disabled)
ok 50 - fetch path (disabled)
ok 51 - clone path (disabled)
ok 52 - setup repo with dash
ok 53 - repo names starting with dash are rejected
ok 54 - full paths still work
# passed all 54 test(s)
1..54
*** t5811-proto-disable-git.sh ***
ok 1 - create git-accessible repo
ok 2 - clone git:// (enabled)
ok 3 - fetch git:// (enabled)
ok 4 - push git:// (enabled)
ok 5 - push git:// (disabled)
ok 6 - fetch git:// (disabled)
ok 7 - clone git:// (disabled)
ok 8 - clone git:// (env var has precedence)
ok 9 - clone git:// (enabled with config)
ok 10 - fetch git:// (enabled)
ok 11 - push git:// (enabled)
ok 12 - push git:// (disabled)
ok 13 - fetch git:// (disabled)
ok 14 - clone git:// (disabled)
ok 15 - clone git:// (enabled)
ok 16 - fetch git:// (enabled)
ok 17 - push git:// (enabled)
ok 18 - push git:// (disabled)
ok 19 - fetch git:// (disabled)
ok 20 - clone git:// (disabled)
ok 21 - clone git:// (enabled)
ok 22 - fetch git:// (enabled)
ok 23 - push git:// (enabled)
ok 24 - push git:// (disabled)
ok 25 - fetch git:// (disabled)
ok 26 - clone git:// (disabled)
# passed all 26 test(s)
1..26
*** t5812-proto-disable-http.sh ***
1..0 # SKIP no web server found at '/usr/sbin/apache2'
*** t5813-proto-disable-ssh.sh ***
ok 1 - setup ssh wrapper
ok 2 - setup repository to clone
ok 3 - clone host:path (enabled)
ok 4 - fetch host:path (enabled)
ok 5 - push host:path (enabled)
ok 6 - push host:path (disabled)
ok 7 - fetch host:path (disabled)
ok 8 - clone host:path (disabled)
ok 9 - clone host:path (env var has precedence)
ok 10 - clone host:path (enabled with config)
ok 11 - fetch host:path (enabled)
ok 12 - push host:path (enabled)
ok 13 - push host:path (disabled)
ok 14 - fetch host:path (disabled)
ok 15 - clone host:path (disabled)
ok 16 - clone host:path (enabled)
ok 17 - fetch host:path (enabled)
ok 18 - push host:path (enabled)
ok 19 - push host:path (disabled)
ok 20 - fetch host:path (disabled)
ok 21 - clone host:path (disabled)
ok 22 - clone host:path (enabled)
ok 23 - fetch host:path (enabled)
ok 24 - push host:path (enabled)
ok 25 - push host:path (disabled)
ok 26 - fetch host:path (disabled)
ok 27 - clone host:path (disabled)
ok 28 - clone ssh:// (enabled)
ok 29 - fetch ssh:// (enabled)
ok 30 - push ssh:// (enabled)
ok 31 - push ssh:// (disabled)
ok 32 - fetch ssh:// (disabled)
ok 33 - clone ssh:// (disabled)
ok 34 - clone ssh:// (env var has precedence)
ok 35 - clone ssh:// (enabled with config)
ok 36 - fetch ssh:// (enabled)
ok 37 - push ssh:// (enabled)
ok 38 - push ssh:// (disabled)
ok 39 - fetch ssh:// (disabled)
ok 40 - clone ssh:// (disabled)
ok 41 - clone ssh:// (enabled)
ok 42 - fetch ssh:// (enabled)
ok 43 - push ssh:// (enabled)
ok 44 - push ssh:// (disabled)
ok 45 - fetch ssh:// (disabled)
ok 46 - clone ssh:// (disabled)
ok 47 - clone ssh:// (enabled)
ok 48 - fetch ssh:// (enabled)
ok 49 - push ssh:// (enabled)
ok 50 - push ssh:// (disabled)
ok 51 - fetch ssh:// (disabled)
ok 52 - clone ssh:// (disabled)
ok 53 - clone git+ssh:// (enabled)
ok 54 - fetch git+ssh:// (enabled)
ok 55 - push git+ssh:// (enabled)
ok 56 - push git+ssh:// (disabled)
ok 57 - fetch git+ssh:// (disabled)
ok 58 - clone git+ssh:// (disabled)
ok 59 - clone git+ssh:// (env var has precedence)
ok 60 - clone git+ssh:// (enabled with config)
ok 61 - fetch git+ssh:// (enabled)
ok 62 - push git+ssh:// (enabled)
ok 63 - push git+ssh:// (disabled)
ok 64 - fetch git+ssh:// (disabled)
ok 65 - clone git+ssh:// (disabled)
ok 66 - clone git+ssh:// (enabled)
ok 67 - fetch git+ssh:// (enabled)
ok 68 - push git+ssh:// (enabled)
ok 69 - push git+ssh:// (disabled)
ok 70 - fetch git+ssh:// (disabled)
ok 71 - clone git+ssh:// (disabled)
ok 72 - clone git+ssh:// (enabled)
ok 73 - fetch git+ssh:// (enabled)
ok 74 - push git+ssh:// (enabled)
ok 75 - push git+ssh:// (disabled)
ok 76 - fetch git+ssh:// (disabled)
ok 77 - clone git+ssh:// (disabled)
ok 78 - hostnames starting with dash are rejected
ok 79 - setup repo with dash
ok 80 - repo names starting with dash are rejected
ok 81 - full paths still work
# passed all 81 test(s)
1..81
*** t5814-proto-disable-ext.sh ***
ok 1 - setup ext wrapper
ok 2 - setup repository to clone
ok 3 - clone remote-helper (enabled)
ok 4 - fetch remote-helper (enabled)
ok 5 - push remote-helper (enabled)
ok 6 - push remote-helper (disabled)
ok 7 - fetch remote-helper (disabled)
ok 8 - clone remote-helper (disabled)
ok 9 - clone remote-helper (env var has precedence)
ok 10 - clone remote-helper (enabled with config)
ok 11 - fetch remote-helper (enabled)
ok 12 - push remote-helper (enabled)
ok 13 - push remote-helper (disabled)
ok 14 - fetch remote-helper (disabled)
ok 15 - clone remote-helper (disabled)
ok 16 - clone remote-helper (enabled)
ok 17 - fetch remote-helper (enabled)
ok 18 - push remote-helper (enabled)
ok 19 - push remote-helper (disabled)
ok 20 - fetch remote-helper (disabled)
ok 21 - clone remote-helper (disabled)
ok 22 - clone remote-helper (enabled)
ok 23 - fetch remote-helper (enabled)
ok 24 - push remote-helper (enabled)
ok 25 - push remote-helper (disabled)
ok 26 - fetch remote-helper (disabled)
ok 27 - clone remote-helper (disabled)
# passed all 27 test(s)
1..27
*** t5815-submodule-protos.sh ***
ok 1 - setup ext wrapper
ok 2 - setup ssh wrapper
ok 3 - setup repository with submodules
ok 4 - clone with recurse-submodules fails
ok 5 - setup individual updates
ok 6 - update of ssh allowed
ok 7 - update of ext not allowed
ok 8 - user can override whitelist
# passed all 8 test(s)
1..8
*** t5900-repo-selection.sh ***
ok 1 - find .git dir in worktree
ok 2 - automagically add .git suffix
ok 3 - automagically add .git suffix to worktree
ok 4 - prefer worktree foo over bare foo.git
ok 5 - prefer bare foo over bare foo.git
ok 6 - disambiguate with full foo.git
ok 7 - we are not fooled by non-git foo directory
ok 8 - prefer inner .git over outer bare
# passed all 8 test(s)
1..8
*** t6000-rev-list-misc.sh ***
ok 1 - setup
ok 2 - rev-list --objects heeds pathspecs
ok 3 - rev-list --objects with pathspecs and deeper paths
ok 4 - rev-list --objects with pathspecs and copied files
ok 5 - rev-list A..B and rev-list ^A B are the same
ok 6 - propagate uninteresting flag down correctly
ok 7 - symleft flag bit is propagated down from tag
ok 8 - rev-list can show index objects
ok 9 - --bisect and --first-parent can not be combined
ok 10 - --header shows a NUL after each commit
# passed all 10 test(s)
1..10
*** t6001-rev-list-graft.sh ***
ok 1 - setup
ok 2 - without grafts
ok 3 - with grafts
ok 4 - without grafts, with pathlimit
ok 5 - with grafts, with pathlimit
ok 6 - without grafts
ok 7 - with grafts
ok 8 - without grafts, with pathlimit
ok 9 - with grafts, with pathlimit
ok 10 - without grafts
ok 11 - with grafts
ok 12 - without grafts, with pathlimit
ok 13 - with grafts, with pathlimit
ok 14 - show advice that grafts are deprecated
# passed all 14 test(s)
1..14
*** t6002-rev-list-bisect.sh ***
ok 1 - bisection diff --bisect l0 ^root <= 0
ok 2 - bisection diff --bisect l1 ^root <= 0
ok 3 - bisection diff --bisect l2 ^root <= 0
ok 4 - bisection diff --bisect a0 ^root <= 0
ok 5 - bisection diff --bisect a1 ^root <= 0
ok 6 - bisection diff --bisect a2 ^root <= 0
ok 7 - bisection diff --bisect a3 ^root <= 0
ok 8 - bisection diff --bisect b1 ^root <= 0
ok 9 - bisection diff --bisect b2 ^root <= 0
ok 10 - bisection diff --bisect b3 ^root <= 0
ok 11 - bisection diff --bisect c1 ^root <= 0
ok 12 - bisection diff --bisect c2 ^root <= 0
ok 13 - bisection diff --bisect c3 ^root <= 0
ok 14 - bisection diff --bisect E ^F <= 0
ok 15 - bisection diff --bisect e1 ^F <= 0
ok 16 - bisection diff --bisect e2 ^F <= 0
ok 17 - bisection diff --bisect e3 ^F <= 0
ok 18 - bisection diff --bisect e4 ^F <= 0
ok 19 - bisection diff --bisect e5 ^F <= 0
ok 20 - bisection diff --bisect e6 ^F <= 0
ok 21 - bisection diff --bisect e7 ^F <= 0
ok 22 - bisection diff --bisect f1 ^F <= 0
ok 23 - bisection diff --bisect f2 ^F <= 0
ok 24 - bisection diff --bisect f3 ^F <= 0
ok 25 - bisection diff --bisect f4 ^F <= 0
ok 26 - bisection diff --bisect E ^F <= 0
ok 27 - bisection diff --bisect V ^U <= 1
ok 28 - bisection diff --bisect V ^U ^u1 ^u2 ^u3 <= 0
ok 29 - bisection diff --bisect u1 ^U <= 0
ok 30 - bisection diff --bisect u2 ^U <= 0
ok 31 - bisection diff --bisect u3 ^U <= 0
ok 32 - bisection diff --bisect u4 ^U <= 0
ok 33 - bisection diff --bisect u5 ^U <= 0
ok 34 - --bisect l5 ^root
ok 35 - --bisect l5 ^root ^c3
ok 36 - --bisect l5 ^root ^c3 ^b4
ok 37 - --bisect l3 ^root ^c3 ^b4
ok 38 - --bisect l5 ^b3 ^a3 ^b4 ^a4
ok 39 - --bisect l4 ^a2 ^a3 ^b ^a4
ok 40 - --bisect l3 ^a2 ^a3 ^b ^a4
ok 41 - --bisect a4 ^a2 ^a3 ^b4
ok 42 - --bisect a4 ^a2 ^a3 ^b4 ^c2
ok 43 - --bisect a4 ^a2 ^a3 ^b4 ^c2 ^c3
ok 44 - --bisect a4 ^a2 ^a3 ^b4
ok 45 - --bisect c3 ^a2 ^a3 ^b4 ^c2
ok 46 - set up fake --bisect refs
ok 47 - rev-list --bisect can default to good/bad refs
ok 48 - rev-parse --bisect can default to good/bad refs
# passed all 48 test(s)
1..48
*** t6003-rev-list-topo-order.sh ***
ok 1 - rev-list has correct number of entries
ok 2 - simple topo order
ok 3 - simple date order
ok 4 - simple author-date order
ok 5 - two diamonds topo order (g6)
ok 6 - multiple heads
ok 7 - multiple heads, prune at a1
ok 8 - multiple heads, prune at l1
ok 9 - cross-epoch, head at l5, prune at l1
ok 10 - duplicated head arguments
ok 11 - prune near topo
ok 12 - head has no parent
ok 13 - two nodes - one head, one base
ok 14 - three nodes one head, one internal, one base
ok 15 - linear prune l2 ^root
ok 16 - linear prune l2 ^l0
ok 17 - linear prune l2 ^l1
ok 18 - linear prune l5 ^a4
ok 19 - linear prune l5 ^l3
ok 20 - linear prune l5 ^l4
ok 21 - max-count 10 - topo order
ok 22 - max-count 10 - non topo order
ok 23 - --max-age=c3, no --topo-order
ok 24 - one specified head reachable from another a4, c3, --topo-order
ok 25 - one specified head reachable from another c3, a4, --topo-order
ok 26 - one specified head reachable from another a4, c3, no --topo-order
ok 27 - one specified head reachable from another c3, a4, no --topo-order
ok 28 - graph with c3 and a4 parents of head
ok 29 - graph with a4 and c3 parents of head
ok 30 - head ^head --topo-order
ok 31 - head ^head no --topo-order
ok 32 - simple topo order (l5r1)
ok 33 - simple topo order (r1l5)
ok 34 - don't print things unreachable from one branch
ok 35 - --topo-order a4 l3
# passed all 35 test(s)
1..35
*** t6004-rev-list-path-optim.sh ***
ok 1 - setup
ok 2 - path-optimization
ok 3 - further setup
ok 4 - path optimization 2
ok 5 - pathspec with leading path
ok 6 - pathspec with glob (1)
ok 7 - pathspec with glob (2)
# passed all 7 test(s)
1..7
*** t6005-rev-list-count.sh ***
ok 1 - setup
ok 2 - no options
ok 3 - --max-count
ok 4 - --max-count all forms
ok 5 - --skip
ok 6 - --skip --max-count
# passed all 6 test(s)
1..6
*** t6006-rev-list-format.sh ***
ok 1 - setup
ok 2 - format percent
ok 3 - format hash
ok 4 - format tree
ok 5 - format parents
ok 6 - format author
ok 7 - format committer
ok 8 - format encoding
ok 9 - format subject
ok 10 - format subject-truncated
ok 11 - format body
ok 12 - format raw-body
ok 13 - basic colors
ok 14 - advanced colors
ok 15 - %Cred does not enable color by default
ok 16 - %Cred enables colors for color.diff
ok 17 - %Cred enables colors for color.ui
ok 18 - %Cred respects --color
ok 19 - %Cred respects --no-color
ok 20 # skip %Cred respects --color=auto (stdout is tty) (missing TTY)
ok 21 - %Cred respects --color=auto (stdout not tty)
ok 22 - %C(...) does not enable color by default
ok 23 - %C(...) enables colors for color.diff
ok 24 - %C(...) enables colors for color.ui
ok 25 - %C(...) respects --color
ok 26 - %C(...) respects --no-color
ok 27 # skip %C(...) respects --color=auto (stdout is tty) (missing TTY)
ok 28 - %C(...) respects --color=auto (stdout not tty)
ok 29 - %C(auto,...) does not enable color by default
ok 30 - %C(auto,...) enables colors for color.diff
ok 31 - %C(auto,...) enables colors for color.ui
ok 32 - %C(auto,...) respects --color
ok 33 - %C(auto,...) respects --no-color
ok 34 # skip %C(auto,...) respects --color=auto (stdout is tty) (missing TTY)
ok 35 - %C(auto,...) respects --color=auto (stdout not tty)
ok 36 - %C(always,...) enables color even without tty
ok 37 - %C(auto) respects --color
ok 38 - %C(auto) respects --no-color
ok 39 - rev-list %C(auto,...) respects --color
ok 40 - setup complex body
ok 41 - format complex-encoding
ok 42 - format complex-subject
ok 43 - format complex-subject-trunc
ok 44 - format complex-subject-mtrunc
ok 45 - format complex-subject-ltrunc
ok 46 - prepare expected messages (for test %b)
ok 47 - format complex-body
ok 48 - format complex-subject-commitencoding-unset
ok 49 - format complex-subject-commitencoding-unset-trunc
ok 50 - format complex-subject-commitencoding-unset-mtrunc
ok 51 - format complex-subject-commitencoding-unset-ltrunc
ok 52 - format complex-body-commitencoding-unset
ok 53 - %x00 shows NUL
ok 54 - %ad respects --date=
ok 55 - empty email
ok 56 - del LF before empty (1)
ok 57 - del LF before empty (2)
ok 58 - add LF before non-empty (1)
ok 59 - add LF before non-empty (2)
ok 60 - add SP before non-empty (1)
ok 61 - add SP before non-empty (2)
ok 62 - --abbrev
ok 63 - %H is not affected by --abbrev-commit
ok 64 - %h is not affected by --abbrev-commit
ok 65 - "%h %gD: %gs" is same as git-reflog
ok 66 - "%h %gD: %gs" is same as git-reflog (with date)
ok 67 - "%h %gD: %gs" is same as git-reflog (with --abbrev)
ok 68 - %gd shortens ref name
ok 69 - reflog identity
ok 70 - oneline with empty message
ok 71 - single-character name is parsed correctly
ok 72 - unused %G placeholders are passed through
# passed all 72 test(s)
1..72
*** t6007-rev-list-cherry-pick-file.sh ***
ok 1 - setup
ok 2 - --left-right
ok 3 - --count
ok 4 - --cherry-pick foo comes up empty
ok 5 - --cherry-pick bar does not come up empty
ok 6 - bar does not come up empty
ok 7 - --cherry-pick bar does not come up empty (II)
ok 8 - name-rev multiple --refs combine inclusive
ok 9 - name-rev --refs excludes non-matched patterns
ok 10 - name-rev --exclude excludes matched patterns
ok 11 - name-rev --no-refs clears the refs list
ok 12 - --cherry-mark
ok 13 - --cherry-mark --left-right
ok 14 - --cherry-pick --right-only
ok 15 - --cherry-pick --left-only
ok 16 - --cherry
ok 17 - --cherry --count
ok 18 - --cherry-mark --count
ok 19 - --cherry-mark --left-right --count
ok 20 - --cherry-pick with independent, but identical branches
ok 21 - --count --left-right
ok 22 - --cherry-pick avoids looking at full diffs
# passed all 22 test(s)
1..22
*** t6008-rev-list-submodule.sh ***
ok 1 - setup
ok 2 - Ilari's test
# passed all 2 test(s)
1..2
*** t6009-rev-list-parent.sh ***
ok 1 - setup
ok 2 - one is ancestor of others and should not be shown
ok 3 - setup roots, merges and octopuses
ok 4 - rev-list roots
ok 5 - rev-list no merges
ok 6 - rev-list no octopuses
ok 7 - rev-list no roots
ok 8 - rev-list merges
ok 9 - rev-list octopus
ok 10 - rev-list ordinary commits
ok 11 - rev-list --merges --no-merges yields empty set
ok 12 - rev-list override and infinities
ok 13 - dodecapus
ok 14 - ancestors with the same commit time
# passed all 14 test(s)
1..14
*** t6010-merge-base.sh ***
ok 1 - setup
ok 2 - set up G and H
ok 3 - merge-base G H
ok 4 - merge-base/show-branch --independent
ok 5 - unsynchronized clocks
ok 6 - --independent with unsynchronized clocks
ok 7 - merge-base for octopus-step (setup)
ok 8 - merge-base A B C
ok 9 - criss-cross merge-base for octopus-step
ok 10 - using reflog to find the fork point
ok 11 - --fork-point works with empty reflog
ok 12 - merge-base --octopus --all for complex tree
# passed all 12 test(s)
1..12
*** t6011-rev-list-with-bad-commit.sh ***
ok 1 - setup
ok 2 - verify number of revisions
ok 3 - corrupt second commit object
ok 4 - rev-list should fail
ok 5 - git repack _MUST_ fail
ok 6 - first commit is still available
# passed all 6 test(s)
1..6
*** t6012-rev-list-simplify.sh ***
ok 1 - setup
ok 2 - log --full-history
ok 3 - log --full-history -- file
ok 4 - log --full-history --topo-order -- file
ok 5 - log --full-history --date-order -- file
ok 6 - log --simplify-merges -- file
ok 7 - log -- file
ok 8 - log --topo-order -- file
ok 9 - log --first-parent -- another-file
ok 10 - log --full-history E -- lost
ok 11 - full history simplification without parent
ok 12 - --full-diff is not affected by --parents
# passed all 12 test(s)
1..12
*** t6013-rev-list-reverse-parents.sh ***
ok 1 - set up --reverse example
ok 2 - --reverse --parents --full-history combines correctly
ok 3 - --boundary does too
# passed all 3 test(s)
1..3
*** t6014-rev-list-all.sh ***
ok 1 - setup
ok 2 - rev-list --all lists detached HEAD
ok 3 - repack does not lose detached HEAD
ok 4 - rev-list --graph --no-walk is forbidden
# passed all 4 test(s)
1..4
*** t6016-rev-list-graph-simplify-history.sh ***
ok 1 - set up rev-list --graph test
ok 2 - --graph --all
ok 3 - --graph --simplify-by-decoration
ok 4 - setup: get rid of decorations on B
ok 5 - --graph --simplify-by-decoration prune branch B
ok 6 - --graph --full-history -- bar.txt
ok 7 - --graph --full-history --simplify-merges -- bar.txt
ok 8 - --graph -- bar.txt
ok 9 - --graph --sparse -- bar.txt
ok 10 - --graph ^C4
ok 11 - --graph ^C3
ok 12 - --graph --boundary ^C3
# passed all 12 test(s)
1..12
*** t6017-rev-list-stdin.sh ***
ok 1 - setup
ok 2 - check rev-list master
ok 3 - check log --stat master
ok 4 - check rev-list side-1 ^side-4
ok 5 - check log --stat side-1 ^side-4
ok 6 - check rev-list side-1 ^side-7 --
ok 7 - check log --stat side-1 ^side-7 --
ok 8 - check rev-list side-1 ^side-7 -- file-1
ok 9 - check log --stat side-1 ^side-7 -- file-1
ok 10 - check rev-list side-1 ^side-7 -- file-2
ok 11 - check log --stat side-1 ^side-7 -- file-2
ok 12 - check rev-list side-3 ^side-4 -- file-3
ok 13 - check log --stat side-3 ^side-4 -- file-3
ok 14 - check rev-list side-3 ^side-2
ok 15 - check log --stat side-3 ^side-2
ok 16 - check rev-list side-3 ^side-2 -- file-1
ok 17 - check log --stat side-3 ^side-2 -- file-1
ok 18 - not only --stdin
# passed all 18 test(s)
1..18
*** t6018-rev-list-glob.sh ***
ok 1 - setup
ok 2 - rev-parse --glob=refs/heads/subspace/*
ok 3 - rev-parse --glob=heads/subspace/*
ok 4 - rev-parse --glob=refs/heads/subspace/
ok 5 - rev-parse --glob=heads/subspace/
ok 6 - rev-parse --glob=heads/subspace
not ok 7 - rev-parse accepts --glob as detached option # TODO known breakage
not ok 8 - rev-parse is not confused by option-like glob # TODO known breakage
ok 9 - rev-parse --branches=subspace/*
ok 10 - rev-parse --branches=subspace/
ok 11 - rev-parse --branches=subspace
ok 12 - rev-parse --glob=heads/subspace/* --glob=heads/other/*
ok 13 - rev-parse --glob=heads/someref/* master
ok 14 - rev-parse --glob=heads/*
ok 15 - rev-parse --tags=foo
ok 16 - rev-parse --remotes=foo
ok 17 - rev-parse --exclude with --branches
ok 18 - rev-parse --exclude with --all
ok 19 - rev-parse accumulates multiple --exclude
ok 20 - rev-list --glob=refs/heads/subspace/*
ok 21 - rev-list --glob refs/heads/subspace/*
ok 22 - rev-list not confused by option-like --glob arg
ok 23 - rev-list --glob=heads/subspace/*
ok 24 - rev-list --glob=refs/heads/subspace/
ok 25 - rev-list --glob=heads/subspace/
ok 26 - rev-list --glob=heads/subspace
ok 27 - rev-list --branches=subspace/*
ok 28 - rev-list --branches=subspace/
ok 29 - rev-list --branches=subspace
ok 30 - rev-list --branches
ok 31 - rev-list --glob=heads/someref/* master
ok 32 - rev-list --glob=heads/subspace/* --glob=heads/other/*
ok 33 - rev-list --glob=heads/*
ok 34 - rev-list --tags=foo
ok 35 - rev-list --tags
ok 36 - rev-list --remotes=foo
ok 37 - rev-list --exclude with --branches
ok 38 - rev-list --exclude with --all
ok 39 - rev-list accumulates multiple --exclude
not ok 40 - rev-list should succeed with empty output on empty stdin # TODO known breakage
ok 41 - rev-list should succeed with empty output with all refs excluded
ok 42 - rev-list should succeed with empty output with empty --all
ok 43 - rev-list should succeed with empty output with empty glob
ok 44 - shortlog accepts --glob/--tags/--remotes
not ok 45 - shortlog accepts --glob as detached option # TODO known breakage
not ok 46 - shortlog --glob is not confused by option-like argument # TODO known breakage
# still have 5 known breakage(s)
# passed all remaining 41 test(s)
1..46
*** t6019-rev-list-ancestry-path.sh ***
ok 1 - setup
ok 2 - rev-list D..M
ok 3 - rev-list --ancestry-path D..M
ok 4 - rev-list D..M -- M.t
ok 5 - rev-list --ancestry-path D..M -- M.t
ok 6 - rev-list F...I
ok 7 - rev-list --ancestry-path F...I
ok 8 - rev-list G..M -- G.t
ok 9 - rev-list --ancestry-path G..M -- G.t
ok 10 - rev-list --ancestry-path --simplify-merges G^..M -- G.t
ok 11 - setup criss-cross
ok 12 - criss-cross: rev-list --ancestry-path cb..bc
ok 13 - criss-cross: rev-list --ancestry-path --all ^cb
# passed all 13 test(s)
1..13
*** t6020-merge-df.sh ***
ok 1 - prepare repository
ok 2 - Merge with d/f conflicts
ok 3 - F/D conflict
ok 4 - setup modify/delete + directory/file conflict
ok 5 - modify/delete + directory/file conflict
ok 6 - modify/delete + directory/file conflict; other way
# passed all 6 test(s)
1..6
*** t6021-merge-criss-cross.sh ***
ok 1 - prepare repository
ok 2 - Criss-cross merge
ok 3 - Criss-cross merge result
ok 4 - Criss-cross merge fails (-s resolve)
# passed all 4 test(s)
1..4
*** t6022-merge-rename.sh ***
ok 1 - setup
ok 2 - pull renaming branch into unrenaming one
ok 3 - pull renaming branch into another renaming one
ok 4 - pull unrenaming branch into renaming one
ok 5 - pull conflicting renames
ok 6 - interference with untracked working tree file
ok 7 - interference with untracked working tree file
ok 8 - interference with untracked working tree file
ok 9 - updated working tree file should prevent the merge
ok 10 - updated working tree file should prevent the merge
ok 11 - interference with untracked working tree file
ok 12 - merge of identical changes in a renamed file
ok 13 - setup for rename + d/f conflicts
ok 14 - Rename+D/F conflict; renamed file merges + dir not in way
ok 15 - Rename+D/F conflict; renamed file merges but dir in way
ok 16 - Same as previous, but merged other way
ok 17 - Rename+D/F conflict; renamed file cannot merge, dir not in way
ok 18 - Rename+D/F conflict; renamed file cannot merge and dir in the way
ok 19 - Same as previous, but merged other way
ok 20 - setup both rename source and destination involved in D/F conflict
ok 21 - both rename source and destination involved in D/F conflict
ok 22 - setup pair rename to parent of other (D/F conflicts)
ok 23 - pair rename to parent of other (D/F conflicts) w/ untracked dir
ok 24 - pair rename to parent of other (D/F conflicts) w/ clean start
ok 25 - setup rename of one file to two, with directories in the way
ok 26 - check handling of differently renamed file with D/F conflicts
ok 27 - setup rename one file to two; directories moving out of the way
ok 28 - check handling of differently renamed file with D/F conflicts
ok 29 - setup avoid unnecessary update, normal rename
ok 30 - avoid unnecessary update, normal rename
ok 31 - setup to test avoiding unnecessary update, with D/F conflict
ok 32 - avoid unnecessary update, with D/F conflict
ok 33 - setup avoid unnecessary update, dir->(file,nothing)
ok 34 - avoid unnecessary update, dir->(file,nothing)
ok 35 - setup avoid unnecessary update, modify/delete
ok 36 - avoid unnecessary update, modify/delete
ok 37 - setup avoid unnecessary update, rename/add-dest
ok 38 - avoid unnecessary update, rename/add-dest
ok 39 - setup merge of rename + small change
ok 40 - merge rename + small change
ok 41 - setup for use of extended merge markers
ok 42 - merge master into rename has correct extended markers
ok 43 - merge rename into master has correct extended markers
ok 44 - setup spurious "refusing to lose untracked" message
ok 45 - no spurious "refusing to lose untracked" message
ok 46 - do not follow renames for empty files
# passed all 46 test(s)
1..46
*** t6023-merge-file.sh ***
ok 1 - merge with no changes
ok 2 - merge without conflict
ok 3 - works in subdirectory
ok 4 - merge without conflict (--quiet)
not ok 5 - merge without conflict (missing LF at EOF) # TODO known breakage
not ok 6 - merge result added missing LF # TODO known breakage
ok 7 - merge without conflict (missing LF at EOF, away from change in the other file)
ok 8 - merge does not add LF away of change
ok 9 - merge with conflicts
ok 10 - expected conflict markers
ok 11 - merge conflicting with --ours
ok 12 - merge conflicting with --theirs
ok 13 - merge conflicting with --union
ok 14 - merge with conflicts, using -L
ok 15 - expected conflict markers, with -L
ok 16 - conflict in removed tail
ok 17 - expected conflict markers
ok 18 - binary files cannot be merged
ok 19 - MERGE_ZEALOUS simplifies non-conflicts
ok 20 - ZEALOUS_ALNUM
ok 21 - "diff3 -m" style output (1)
ok 22 - "diff3 -m" style output (2)
ok 23 - marker size
ok 24 - conflict at EOF without LF resolved by --ours
ok 25 - conflict at EOF without LF resolved by --theirs
ok 26 - conflict at EOF without LF resolved by --union
ok 27 - conflict sections match existing line endings
# still have 2 known breakage(s)
# passed all remaining 25 test(s)
1..27
*** t6024-recursive-merge.sh ***
ok 1 - setup tests
ok 2 - combined merge conflicts
ok 3 - result contains a conflict
ok 4 - virtual trees were processed
ok 5 - refuse to merge binary files
ok 6 - mark rename/delete as unmerged
# passed all 6 test(s)
1..6
*** t6025-merge-symlinks.sh ***
ok 1 - setup
ok 2 - merge master into b-symlink, which has a different symbolic link
ok 3 - the merge result must be a file
ok 4 - merge master into b-file, which has a file instead of a symbolic link
ok 5 - the merge result must be a file
ok 6 - merge b-file, which has a file instead of a symbolic link, into master
ok 7 - the merge result must be a file
# passed all 7 test(s)
1..7
*** t6026-merge-attr.sh ***
ok 1 - setup
ok 2 - merge
ok 3 - check merge result in index
ok 4 - check merge result in working tree
ok 5 - retry the merge with longer context
ok 6 - custom merge backend
ok 7 - custom merge backend
ok 8 - up-to-date merge without common ancestor
ok 9 - custom merge does not lock index
# passed all 9 test(s)
1..9
*** t6027-merge-binary.sh ***
ok 1 - setup
ok 2 - resolve
ok 3 - recursive
# passed all 3 test(s)
1..3
*** t6028-merge-up-to-date.sh ***
ok 1 - setup
ok 2 - merge -s recursive up-to-date
ok 3 - merge -s recursive fast-forward
ok 4 - merge -s ours up-to-date
ok 5 - merge -s ours fast-forward
ok 6 - merge -s subtree up-to-date
ok 7 - merge fast-forward octopus
# passed all 7 test(s)
1..7
*** t6029-merge-subtree.sh ***
ok 1 - setup
ok 2 - subtree available and works like recursive
ok 3 - setup branch sub
ok 4 - setup branch main
ok 5 - update branch sub
ok 6 - update branch main
ok 7 - setup
ok 8 - initial merge
ok 9 - merge update
ok 10 - initial ambiguous subtree
ok 11 - merge using explicit
ok 12 - merge2 using explicit
# passed all 12 test(s)
1..12
*** t6030-bisect-porcelain.sh ***
ok 1 - set up basic repo with 1 file (hello) and 4 commits
ok 2 - bisect starts with only one bad
ok 3 - bisect does not start with only one good
ok 4 - bisect start with one bad and good
ok 5 - bisect fails if given any junk instead of revs
ok 6 - bisect reset: back in the master branch
ok 7 - bisect reset: back in another branch
ok 8 - bisect reset when not bisecting
ok 9 - bisect reset removes packed refs
ok 10 - bisect reset removes bisect state after --no-checkout
ok 11 - bisect start: back in good branch
ok 12 - bisect start: no ".git/BISECT_START" created if junk rev
ok 13 - bisect start: existing ".git/BISECT_START" not modified if junk rev
ok 14 - bisect start: no ".git/BISECT_START" if mistaken rev
ok 15 - bisect start: no ".git/BISECT_START" if checkout error
ok 16 - bisect skip: successful result
ok 17 - bisect skip: cannot tell between 3 commits
ok 18 - bisect skip: cannot tell between 2 commits
ok 19 - bisect skip: with commit both bad and skipped
ok 20 - "git bisect run" simple case
ok 21 - "git bisect run" with more complex "git bisect start"
ok 22 - bisect skip: add line and then a new test
ok 23 - bisect skip and bisect replay
ok 24 - bisect run & skip: cannot tell between 2
ok 25 - bisect run & skip: find first bad
ok 26 - bisect skip only one range
ok 27 - bisect skip many ranges
ok 28 - bisect starting with a detached HEAD
ok 29 - bisect errors out if bad and good are mistaken
ok 30 - bisect does not create a "bisect" branch
ok 31 - side branch creation
ok 32 - good merge base when good and bad are siblings
ok 33 - skipped merge base when good and bad are siblings
ok 34 - bad merge base when good and bad are siblings
ok 35 - many merge bases creation
ok 36 - good merge bases when good and bad are siblings
ok 37 - optimized merge base checks
ok 38 - "parallel" side branch creation
ok 39 - restricting bisection on one dir
ok 40 - restricting bisection on one dir and a file
ok 41 - skipping away from skipped commit
ok 42 - erroring out when using bad path parameters
ok 43 - test bisection on bare repo - --no-checkout specified
ok 44 - test bisection on bare repo - --no-checkout defaulted
ok 45 - broken branch creation
ok 46 - bisect fails if tree is broken on start commit
ok 47 - bisect fails if tree is broken on trial commit
ok 48 - bisect: --no-checkout - start commit bad
ok 49 - bisect: --no-checkout - trial commit bad
ok 50 - bisect: --no-checkout - target before breakage
ok 51 - bisect: --no-checkout - target in breakage
ok 52 - bisect: --no-checkout - target after breakage
ok 53 - bisect: demonstrate identification of damage boundary
ok 54 - bisect log: successful result
ok 55 - bisect log: only skip commits left
ok 56 - "git bisect bad HEAD" behaves as "git bisect bad"
ok 57 - bisect starts with only one new
ok 58 - bisect does not start with only one old
ok 59 - bisect start with one new and old
ok 60 - bisect replay with old and new
ok 61 - bisect cannot mix old/new and good/bad
ok 62 - bisect terms needs 0 or 1 argument
ok 63 - bisect terms shows good/bad after start
ok 64 - bisect start with one term1 and term2
ok 65 - bisect replay with term1 and term2
ok 66 - bisect start term1 term2
ok 67 - bisect cannot mix terms
ok 68 - bisect terms rejects invalid terms
ok 69 - bisect start --term-* does store terms
ok 70 - bisect start takes options and revs in any order
ok 71 - git bisect reset cleans bisection state properly
# passed all 71 test(s)
1..71
*** t6031-merge-filemode.sh ***
ok 1 - set up mode change in one branch
ok 2 - resolve single mode change (recursive, a1)
ok 3 - verify executable bit on file (recursive, a1)
ok 4 - resolve single mode change (recursive, b1)
ok 5 - verify executable bit on file (recursive, b1)
ok 6 - resolve single mode change (resolve, a1)
ok 7 - verify executable bit on file (resolve, a1)
ok 8 - resolve single mode change (resolve, b1)
ok 9 - verify executable bit on file (resolve, b1)
ok 10 - set up mode change in both branches
ok 11 - detect conflict on double mode change (recursive)
ok 12 - verify executable bit on file (recursive)
ok 13 - detect conflict on double mode change (resolve)
ok 14 - verify executable bit on file (resolve)
ok 15 - set up delete/modechange scenario
ok 16 - detect delete/modechange conflict (recursive, b1)
ok 17 - detect delete/modechange conflict (recursive, deletion)
ok 18 - detect delete/modechange conflict (resolve, b1)
ok 19 - detect delete/modechange conflict (resolve, deletion)
# passed all 19 test(s)
1..19
*** t6032-merge-large-rename.sh ***
ok 1 - setup (initial)
ok 2 - rename (5, ok)
ok 3 - set diff.renamelimit to 4
ok 4 - rename (4, ok)
ok 5 - rename (5, fail)
ok 6 - set merge.renamelimit to 5
ok 7 - rename (5, ok)
ok 8 - rename (6, fail)
ok 9 - setup large simple rename
ok 10 - massive simple rename does not spam added files
# passed all 10 test(s)
1..10
*** t6033-merge-crlf.sh ***
ok 1 - setup
ok 2 - Check "ours" is CRLF
ok 3 - Check that conflict file is CRLF
# passed all 3 test(s)
1..3
*** t6034-merge-rename-nocruft.sh ***
ok 1 - setup
ok 2 - merge white into red (A->B,M->N)
ok 3 - merge blue into white (A->B, mod A, A untracked)
# passed all 3 test(s)
1..3
*** t6035-merge-dir-to-symlink.sh ***
ok 1 - create a commit where dir a/b changed to symlink
ok 2 - checkout does not clobber untracked symlink
ok 3 - a/b-2/c/d is kept when clobbering symlink b
ok 4 - checkout should not have deleted a/b-2/c/d
ok 5 - setup for merge test
ok 6 - Handle D/F conflict, do not lose a/b-2/c/d in merge (resolve)
ok 7 - a/b was resolved as symlink
ok 8 - Handle D/F conflict, do not lose a/b-2/c/d in merge (recursive)
ok 9 - a/b was resolved as symlink
ok 10 - Handle F/D conflict, do not lose a/b-2/c/d in merge (resolve)
ok 11 - a/b was resolved as symlink
ok 12 - Handle F/D conflict, do not lose a/b-2/c/d in merge (recursive)
ok 13 - a/b was resolved as symlink
not ok 14 - do not lose untracked in merge (resolve) # TODO known breakage
ok 15 - do not lose untracked in merge (recursive)
ok 16 - do not lose modifications in merge (resolve)
ok 17 - do not lose modifications in merge (recursive)
ok 18 - setup a merge where dir a/b-2 changed to symlink
ok 19 - merge should not have D/F conflicts (resolve)
ok 20 - a/b-2 was resolved as symlink
ok 21 - merge should not have D/F conflicts (recursive)
ok 22 - a/b-2 was resolved as symlink
ok 23 - merge should not have F/D conflicts (recursive)
ok 24 - a/b-2 was resolved as symlink
# still have 1 known breakage(s)
# passed all remaining 23 test(s)
1..24
*** t6036-recursive-corner-cases.sh ***
ok 1 - setup basic criss-cross + rename with no modifications
ok 2 - merge simple rename+criss-cross with no modifications
ok 3 - setup criss-cross + rename merges with basic modification
ok 4 - merge criss-cross + rename merges with basic modification
ok 5 - setup differently handled merges of rename/add conflict
ok 6 - git detects differently handled merges conflict
ok 7 - setup criss-cross + modify/delete resolved differently
ok 8 - git detects conflict merging criss-cross+modify/delete
ok 9 - git detects conflict merging criss-cross+modify/delete, reverse direction
ok 10 - setup differently handled merges of directory/file conflict
ok 11 - merge of D1 & E1 fails but has appropriate contents
ok 12 - merge of E1 & D1 fails but has appropriate contents
ok 13 - merge of D1 & E2 fails but has appropriate contents
ok 14 - merge of E2 & D1 fails but has appropriate contents
ok 15 - merge of D1 & E3 succeeds
ok 16 - merge of D1 & E4 notifies user a and a2 are related
not ok 17 - merge of D2 & E4 merges a2s & reports conflict for a/file # TODO known breakage
ok 18 - setup rename/rename(1to2)/modify followed by what looks like rename/rename(2to1)/modify
ok 19 - handle rename/rename(1to2)/modify followed by what looks like rename/rename(2to1)/modify
ok 20 - setup criss-cross + rename/rename/add-source + modify/modify
not ok 21 - detect rename/rename/add-source for virtual merge-base # TODO known breakage
ok 22 - setup criss-cross+rename/rename/add-dest + simple modify
ok 23 - virtual merge base handles rename/rename(1to2)/add-dest
ok 24 - setup symlink modify/modify
not ok 25 - check symlink modify/modify # TODO known breakage
ok 26 - setup symlink add/add
not ok 27 - check symlink add/add # TODO known breakage
ok 28 - setup submodule modify/modify
not ok 29 - check submodule modify/modify # TODO known breakage
ok 30 - setup submodule add/add
not ok 31 - check submodule add/add # TODO known breakage
ok 32 - setup conflicting entry types (submodule vs symlink)
not ok 33 - check conflicting entry types (submodule vs symlink) # TODO known breakage
ok 34 - setup conflicting modes for regular file
not ok 35 - check conflicting modes for regular file # TODO known breakage
# still have 8 known breakage(s)
# passed all remaining 27 test(s)
1..35
*** t6037-merge-ours-theirs.sh ***
ok 1 - setup
ok 2 - plain recursive - should conflict
ok 3 - recursive favouring theirs
ok 4 - recursive favouring ours
ok 5 - binary file with -Xours/-Xtheirs
ok 6 - pull passes -X to underlying merge
ok 7 - symlink with -Xours/-Xtheirs
# passed all 7 test(s)
1..7
*** t6038-merge-text-auto.sh ***
ok 1 - setup
ok 2 - set up fuzz_conflict() helper
ok 3 - Merge after setting text=auto
ok 4 - Merge addition of text=auto eol=LF
ok 5 - Merge addition of text=auto eol=CRLF
ok 6 - Detect CRLF/LF conflict after setting text=auto
ok 7 - Detect LF/CRLF conflict from addition of text=auto
not ok 8 - checkout -m after setting text=auto # TODO known breakage
not ok 9 - checkout -m addition of text=auto # TODO known breakage
not ok 10 - cherry-pick patch from after text=auto was added # TODO known breakage
ok 11 - Test delete/normalize conflict
# still have 3 known breakage(s)
# passed all remaining 8 test(s)
1..11
*** t6039-merge-ignorecase.sh ***
1..0 # SKIP skipping case insensitive tests - case sensitive file system
*** t6040-tracking-info.sh ***
ok 1 - setup
ok 2 - branch -v
ok 3 - branch -vv
ok 4 - checkout (diverged from upstream)
ok 5 - checkout with local tracked branch
ok 6 - checkout (upstream is gone)
ok 7 - checkout (up-to-date with upstream)
ok 8 - status (diverged from upstream)
ok 9 - status (upstream is gone)
ok 10 - status (up-to-date with upstream)
ok 11 - status -s -b (diverged from upstream)
ok 12 - status -s -b --no-ahead-behind (diverged from upstream)
ok 13 - status --long --branch
ok 14 - status --long --branch --no-ahead-behind
ok 15 - status -s -b (upstream is gone)
ok 16 - status -s -b (up-to-date with upstream)
ok 17 - fail to track lightweight tags
ok 18 - fail to track annotated tags
ok 19 - --set-upstream-to does not change branch
ok 20 - --set-upstream-to @{-1}
# passed all 20 test(s)
1..20
*** t6041-bisect-submodule.sh ***
ok 1 - git_bisect: added submodule creates empty directory
ok 2 - git_bisect: added submodule leaves existing empty directory alone
ok 3 - git_bisect: replace tracked file with submodule creates empty directory
ok 4 - git_bisect: replace directory with submodule
ok 5 - git_bisect: removed submodule leaves submodule directory and its contents in place
ok 6 - git_bisect: removed submodule leaves submodule containing a .git directory alone
ok 7 - git_bisect: replace submodule with a directory must fail
ok 8 - git_bisect: replace submodule containing a .git directory with a directory must fail
not ok 9 - git_bisect: replace submodule with a file must fail # TODO known breakage
not ok 10 - git_bisect: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - git_bisect: modified submodule does not update submodule work tree
ok 12 - git_bisect: modified submodule does not update submodule work tree to invalid commit
ok 13 - git_bisect: modified submodule does not update submodule work tree from invalid commit
ok 14 - git_bisect: added submodule doesn't remove untracked unignored file with same name
# still have 2 known breakage(s)
# passed all remaining 12 test(s)
1..14
*** t6042-merge-rename-corner-cases.sh ***
ok 1 - setup rename/delete + untracked file
ok 2 - Does git preserve Gollum's precious artifact?
ok 3 - setup rename/modify/add-source conflict
not ok 4 - rename/modify/add-source conflict resolvable # TODO known breakage
ok 5 - setup resolvable conflict missed if rename missed
not ok 6 - conflict caused if rename not detected # TODO known breakage
ok 7 - setup conflict resolved wrong if rename missed
not ok 8 - missed conflict if rename not detected # TODO known breakage
ok 9 - setup undetected rename/add-source causes data loss
not ok 10 - detect rename/add-source and preserve all data # TODO known breakage
not ok 11 - detect rename/add-source and preserve all data, merge other way # TODO known breakage
ok 12 - setup content merge + rename/directory conflict
ok 13 - rename/directory conflict + clean content merge
ok 14 - rename/directory conflict + content merge conflict
ok 15 - setup content merge + rename/directory conflict w/ disappearing dir
ok 16 - disappearing dir in rename/directory conflict handled
ok 17 - setup rename/rename (2to1) + modify/modify
ok 18 - handle rename/rename (2to1) conflict correctly
ok 19 - setup simple rename/rename (1to2) conflict
ok 20 - merge has correct working tree contents
ok 21 - setup rename/rename(1to2)/add-source conflict
not ok 22 - detect conflict with rename/rename(1to2)/add-source merge # TODO known breakage
ok 23 - setup rename/rename(1to2)/add-source resolvable conflict
not ok 24 - rename/rename/add-source still tracks new a file # TODO known breakage
ok 25 - setup rename/rename(1to2)/add-dest conflict
ok 26 - rename/rename/add-dest merge still knows about conflicting file versions
ok 27 - rad-setup: rename/add/delete conflict
not ok 28 - rad-check: rename/add/delete conflict # TODO known breakage
ok 29 - rrdd-setup: rename/rename(2to1)/delete/delete conflict
not ok 30 - rrdd-check: rename/rename(2to1)/delete/delete conflict # TODO known breakage
ok 31 - mod6-setup: chains of rename/rename(1to2) and rename/rename(2to1)
not ok 32 - mod6-check: chains of rename/rename(1to2) and rename/rename(2to1) # TODO known breakage
# still have 10 known breakage(s)
# passed all remaining 22 test(s)
1..32
*** t6043-merge-rename-directories.sh ***
ok 1 - 1a-setup: Simple directory rename detection
ok 2 - 1a-check: Simple directory rename detection
ok 3 - 1b-setup: Merge a directory with another
ok 4 - 1b-check: Merge a directory with another
ok 5 - 1c-setup: Transitive renaming
ok 6 - 1c-check: Transitive renaming
ok 7 - 1d-setup: Directory renames cause a rename/rename(2to1) conflict
ok 8 - 1d-check: Directory renames cause a rename/rename(2to1) conflict
ok 9 - 1e-setup: Renamed directory, with all files being renamed too
ok 10 - 1e-check: Renamed directory, with all files being renamed too
ok 11 - 1f-setup: Split a directory into two other directories
ok 12 - 1f-check: Split a directory into two other directories
ok 13 - 2a-setup: Directory split into two on one side, with equal numbers of paths
ok 14 - 2a-check: Directory split into two on one side, with equal numbers of paths
ok 15 - 2b-setup: Directory split into two on one side, with equal numbers of paths
ok 16 - 2b-check: Directory split into two on one side, with equal numbers of paths
ok 17 - 3a-setup: Avoid implicit rename if involved as source on other side
ok 18 - 3a-check: Avoid implicit rename if involved as source on other side
ok 19 - 3b-setup: Avoid implicit rename if involved as source on current side
ok 20 - 3b-check: Avoid implicit rename if involved as source on current side
ok 21 - 4a-setup: Directory split, with original directory still present
ok 22 - 4a-check: Directory split, with original directory still present
ok 23 - 5a-setup: Merge directories, other side adds files to original and target
ok 24 - 5a-check: Merge directories, other side adds files to original and target
ok 25 - 5b-setup: Rename/delete in order to get add/add/add conflict
ok 26 - 5b-check: Rename/delete in order to get add/add/add conflict
ok 27 - 5c-setup: Transitive rename would cause rename/rename/rename/add/add/add
ok 28 - 5c-check: Transitive rename would cause rename/rename/rename/add/add/add
ok 29 - 5d-setup: Directory/file/file conflict due to directory rename
ok 30 - 5d-check: Directory/file/file conflict due to directory rename
ok 31 - 6a-setup: Tricky rename/delete
ok 32 - 6a-check: Tricky rename/delete
ok 33 - 6b-setup: Same rename done on both sides
ok 34 - 6b-check: Same rename done on both sides
ok 35 - 6c-setup: Rename only done on same side
ok 36 - 6c-check: Rename only done on same side
ok 37 - 6d-setup: We do not always want transitive renaming
ok 38 - 6d-check: We do not always want transitive renaming
ok 39 - 6e-setup: Add/add from one side
ok 40 - 6e-check: Add/add from one side
ok 41 - 7a-setup: rename-dir vs. rename-dir (NOT split evenly) PLUS add-other-file
ok 42 - 7a-check: rename-dir vs. rename-dir (NOT split evenly) PLUS add-other-file
ok 43 - 7b-setup: rename/rename(2to1), but only due to transitive rename
ok 44 - 7b-check: rename/rename(2to1), but only due to transitive rename
ok 45 - 7c-setup: rename/rename(1to...2or3); transitive rename may add complexity
ok 46 - 7c-check: rename/rename(1to...2or3); transitive rename may add complexity
ok 47 - 7d-setup: transitive rename involved in rename/delete; how is it reported?
ok 48 - 7d-check: transitive rename involved in rename/delete; how is it reported?
ok 49 - 7e-setup: transitive rename in rename/delete AND dirs in the way
ok 50 - 7e-check: transitive rename in rename/delete AND dirs in the way
ok 51 - 8a-setup: Dual-directory rename, one into the others way
ok 52 - 8a-check: Dual-directory rename, one into the others way
ok 53 - 8b-setup: Dual-directory rename, one into the others way, with conflicting filenames
ok 54 - 8b-check: Dual-directory rename, one into the others way, with conflicting filenames
ok 55 - 8c-setup: modify/delete or rename+modify/delete?
ok 56 - 8c-check: modify/delete or rename+modify/delete
ok 57 - 8d-setup: rename/delete...or not?
ok 58 - 8d-check: rename/delete...or not?
ok 59 - 8e-setup: Both sides rename, one side adds to original directory
ok 60 - 8e-check: Both sides rename, one side adds to original directory
ok 61 - 9a-setup: Inner renamed directory within outer renamed directory
ok 62 - 9a-check: Inner renamed directory within outer renamed directory
ok 63 - 9b-setup: Transitive rename with content merge
ok 64 - 9b-check: Transitive rename with content merge
ok 65 - 9c-setup: Doubly transitive rename?
ok 66 - 9c-check: Doubly transitive rename?
ok 67 - 9d-setup: N-way transitive rename?
ok 68 - 9d-check: N-way transitive rename?
ok 69 - 9e-setup: N-to-1 whammo
ok 70 - 9e-check: N-to-1 whammo
ok 71 - 9f-setup: Renamed directory that only contained immediate subdirs
ok 72 - 9f-check: Renamed directory that only contained immediate subdirs
ok 73 - 9g-setup: Renamed directory that only contained immediate subdirs, immediate subdirs renamed
not ok 74 - 9g-check: Renamed directory that only contained immediate subdirs, immediate subdirs renamed # TODO known breakage
ok 75 - 9h-setup: Avoid dir rename on merely modified path
ok 76 - 9h-check: Avoid dir rename on merely modified path
ok 77 - 10a-setup: Overwrite untracked with normal rename/delete
ok 78 - 10a-check: Overwrite untracked with normal rename/delete
ok 79 - 10b-setup: Overwrite untracked with dir rename + delete
ok 80 - 10b-check: Overwrite untracked with dir rename + delete
ok 81 - 10c-setup: Overwrite untracked with dir rename/rename(1to2)
ok 82 - 10c-check: Overwrite untracked with dir rename/rename(1to2)
ok 83 - 10d-setup: Delete untracked with dir rename/rename(2to1)
ok 84 - 10d-check: Delete untracked with dir rename/rename(2to1)
ok 85 - 10e-setup: Does git complain about untracked file that is not really in the way?
not ok 86 - 10e-check: Does git complain about untracked file that is not really in the way? # TODO known breakage
ok 87 - 11a-setup: Avoid losing dirty contents with simple rename
ok 88 - 11a-check: Avoid losing dirty contents with simple rename
ok 89 - 11b-setup: Avoid losing dirty file involved in directory rename
ok 90 - 11b-check: Avoid losing dirty file involved in directory rename
ok 91 - 11c-setup: Avoid losing not-uptodate with rename + D/F conflict
ok 92 - 11c-check: Avoid losing not-uptodate with rename + D/F conflict
ok 93 - 11d-setup: Avoid losing not-uptodate with rename + D/F conflict
ok 94 - 11d-check: Avoid losing not-uptodate with rename + D/F conflict
ok 95 - 11e-setup: Avoid deleting not-uptodate with dir rename/rename(1to2)/add
ok 96 - 11e-check: Avoid deleting not-uptodate with dir rename/rename(1to2)/add
ok 97 - 11f-setup: Avoid deleting not-uptodate with dir rename/rename(2to1)
ok 98 - 11f-check: Avoid deleting not-uptodate with dir rename/rename(2to1)
ok 99 - 12a-setup: Moving one directory hierarchy into another
ok 100 - 12a-check: Moving one directory hierarchy into another
ok 101 - 12b-setup: Moving one directory hierarchy into another
ok 102 - 12b-check: Moving one directory hierarchy into another
ok 103 - 12c-setup: Moving one directory hierarchy into another w/ content merge
ok 104 - 12c-check: Moving one directory hierarchy into another w/ content merge
# still have 2 known breakage(s)
# passed all remaining 102 test(s)
1..104
*** t6044-merge-unrelated-index-changes.sh ***
ok 1 - setup trivial merges
ok 2 - ff update
ok 3 - ff update, important file modified
ok 4 - resolve, trivial
ok 5 - resolve, non-trivial
ok 6 - recursive
ok 7 - recursive, when merge branch matches merge base
ok 8 - merge-recursive, when index==head but head!=HEAD
ok 9 - recursive, when file has staged changes not matching HEAD nor what a merge would give
ok 10 - recursive, when file has staged changes matching what a merge would give
ok 11 - octopus, unrelated file touched
ok 12 - octopus, related file removed
ok 13 - octopus, related file modified
ok 14 - ours
ok 15 - subtree
# passed all 15 test(s)
1..15
*** t6045-merge-rename-delete.sh ***
ok 1 - rename/delete
# passed all 1 test(s)
1..1
*** t6046-merge-skip-unneeded-updates.sh ***
ok 1 - 1a-setup: Modify(A)/Modify(B), change on B subset of A
ok 2 - 1a-check-L: Modify(A)/Modify(B), change on B subset of A
ok 3 - 1a-check-R: Modify(A)/Modify(B), change on B subset of A
ok 4 - 2a-setup: Modify(A)/rename(B)
ok 5 - 2a-check-L: Modify/rename, merge into modify side
ok 6 - 2a-check-R: Modify/rename, merge into rename side
ok 7 - 2b-setup: Rename+Mod(A)/Mod(B), B mods subset of A
ok 8 - 2b-check-L: Rename+Mod(A)/Mod(B), B mods subset of A
ok 9 - 2b-check-R: Rename+Mod(A)/Mod(B), B mods subset of A
ok 10 - 2c-setup: Modify b & add c VS rename b->c
ok 11 - 2c-check: Modify b & add c VS rename b->c
ok 12 - 3a-setup: bq_1->foo/bq_2 on A, foo/->bar/ on B
ok 13 - 3a-check-L: bq_1->foo/bq_2 on A, foo/->bar/ on B
ok 14 - 3a-check-R: bq_1->foo/bq_2 on A, foo/->bar/ on B
ok 15 - 3b-setup: bq_1->foo/bq_2 on A, foo/->bar/ on B
ok 16 - 3b-check-L: bq_1->foo/bq_2 on A, foo/->bar/ on B
ok 17 - 3b-check-R: bq_1->foo/bq_2 on A, foo/->bar/ on B
ok 18 - 4a-setup: Change on A, change on B subset of A, dirty mods present
not ok 19 - 4a-check: Change on A, change on B subset of A, dirty mods present # TODO known breakage
ok 20 - 4b-setup: Rename+Mod(A)/Mod(B), change on B subset of A, dirty mods present
ok 21 - 4b-check: Rename+Mod(A)/Mod(B), change on B subset of A, dirty mods present
# still have 1 known breakage(s)
# passed all remaining 20 test(s)
1..21
*** t6050-replace.sh ***
ok 1 - set up buggy branch
ok 2 - replace the author
ok 3 - test --no-replace-objects option
ok 4 - test GIT_NO_REPLACE_OBJECTS env variable
ok 5 - test core.usereplacerefs config option
ok 6 - tag replaced commit
ok 7 - "git fsck" works
ok 8 - repack, clone and fetch work
ok 9 - "git replace" listing and deleting
ok 10 - "git replace" replacing
ok 11 - "git replace" resolves sha1
ok 12 - create parallel branch without the bug
ok 13 - push to cloned repo
ok 14 - push branch with replacement
ok 15 - fetch branch with replacement
ok 16 - bisect and replacements
ok 17 - index-pack and replacements
ok 18 - not just commits
ok 19 - replaced and replacement objects must be of the same type
ok 20 - -f option bypasses the type check
ok 21 - git cat-file --batch works on replace objects
ok 22 - test --format bogus
ok 23 - test --format short
ok 24 - test --format medium
ok 25 - test --format long
ok 26 - setup fake editors
ok 27 - --edit with and without already replaced object
ok 28 - --edit and change nothing or command failed
ok 29 - replace ref cleanup
ok 30 - --graft with and without already replaced object
ok 31 # skip set up a signed commit (missing GPG)
ok 32 # skip --graft with a signed commit (missing GPG)
ok 33 # skip set up a merge commit with a mergetag (missing GPG)
ok 34 # skip --graft on a commit with a mergetag (missing GPG)
ok 35 - --convert-graft-file
# passed all 35 test(s)
1..35
*** t6060-merge-index.sh ***
ok 1 - setup diverging branches
ok 2 - read-tree does not resolve content merge
ok 3 - git merge-index git-merge-one-file resolves
ok 4 - setup bare merge
ok 5 - merge-one-file fails without a work tree
ok 6 - merge-one-file respects GIT_WORK_TREE
ok 7 - merge-one-file respects core.worktree
# passed all 7 test(s)
1..7
*** t6100-rev-list-in-order.sh ***
ok 1 - setup a commit history with trees, blobs
ok 2 - rev-list --in-commit-order
ok 3 - rev-list lists blobs and trees after commits
# passed all 3 test(s)
1..3
*** t6101-rev-parse-parents.sh ***
ok 1 - setup
ok 2 - start is valid
ok 3 - start^0
ok 4 - start^1 not valid
ok 5 - second^1 = second^
ok 6 - final^1^1^1
ok 7 - final^1^1^1 = final^^^
ok 8 - final^1^2
ok 9 - final^1^2 != final^1^1
ok 10 - final^1^3 not valid
ok 11 - --verify start2^1
ok 12 - --verify start2^0
ok 13 - final^1^@ = final^1^1 final^1^2
ok 14 - symbolic final^1^@ = final^1^1 final^1^2
ok 15 - final^1^! = final^1 ^final^1^1 ^final^1^2
ok 16 - symbolic final^1^! = final^1 ^final^1^1 ^final^1^2
ok 17 - large graft octopus
ok 18 - repack for next test
ok 19 - short SHA-1 works
ok 20 - setup for rev^- tests
ok 21 - rev-list --count merge^- = merge^..merge
ok 22 - rev-parse merge^- = merge^..merge
ok 23 - rev-parse merge^-1 = merge^..merge
ok 24 - rev-parse merge^-2 = merge^2..merge
ok 25 - symbolic merge^-1 = merge^1..merge
ok 26 - rev-parse merge^-0 (invalid parent)
ok 27 - rev-parse merge^-3 (invalid parent)
ok 28 - rev-parse merge^-^ (garbage after ^-)
ok 29 - rev-parse merge^-1x (garbage after ^-1)
ok 30 - rev-list merge^- = merge^..merge
ok 31 - rev-list merge^-1 = merge^1..merge
ok 32 - rev-list merge^-2 = merge^2..merge
ok 33 - rev-list merge^-0 (invalid parent)
ok 34 - rev-list merge^-3 (invalid parent)
ok 35 - rev-list merge^-^ (garbage after ^-)
ok 36 - rev-list merge^-1x (garbage after ^-1)
ok 37 - rev-parse $garbage^@ does not segfault
ok 38 - rev-parse $garbage...$garbage does not segfault
# passed all 38 test(s)
1..38
*** t6110-rev-list-sparse.sh ***
ok 1 - setup
ok 2 - rev-list --first-parent --boundary
# passed all 2 test(s)
1..2
*** t6111-rev-list-treesame.sh ***
ok 1 - setup
ok 2 - log 
ok 3 - log 
ok 4 - log --topo-order
ok 5 - log -- file
ok 6 - log --parents -- file
ok 7 - log --full-history -- file
ok 8 - log --full-history --parents -- file
ok 9 - log --simplify-merges -- file
ok 10 - log --first-parent
ok 11 - log --first-parent -- file
ok 12 - log F..M
ok 13 - log F..M --topo-order
ok 14 - log F..M -- file
ok 15 - log --parents F..M -- file
ok 16 - log F..M --full-history -- file
ok 17 - log F..M --full-history --parents -- file
ok 18 - log F..M --simplify-merges -- file
ok 19 - log F..M --ancestry-path
ok 20 - log F..M --ancestry-path -- file
ok 21 - log F..M --ancestry-path --parents -- file
ok 22 - log F..M --ancestry-path --simplify-merges -- file
ok 23 - log F..M --first-parent
ok 24 - log F..M --first-parent -- file
ok 25 - log E..M --ancestry-path
ok 26 - log E..M --ancestry-path -- file
ok 27 - log E..M --ancestry-path --parents -- file
ok 28 - log E..M --ancestry-path --simplify-merges -- file
ok 29 - log G..M
ok 30 - log G..M --topo-order
ok 31 - log G..M -- file
ok 32 - log G..M --parents -- file
ok 33 - log G..M --full-history -- file
ok 34 - log G..M --full-history --parents -- file
ok 35 - log G..M --simplify-merges -- file
ok 36 - log G..M --ancestry-path
ok 37 - log G..M --ancestry-path -- file
ok 38 - log G..M --ancestry-path --parents -- file
ok 39 - log G..M --ancestry-path --simplify-merges -- file
ok 40 - log B..F
ok 41 - log B..F -- file
ok 42 - log B..F --parents -- file
ok 43 - log B..F --full-history -- file
ok 44 - log B..F --full-history --parents -- file
ok 45 - log B..F --simplify-merges -- file
ok 46 - log B..F --ancestry-path
ok 47 - log B..F --ancestry-path -- file
ok 48 - log B..F --ancestry-path --parents -- file
ok 49 - log B..F --ancestry-path --simplify-merges -- file
ok 50 - log B..F --first-parent
ok 51 - log B..F --first-parent -- file
ok 52 - log E F ^B -- file
ok 53 - log E...F -- file
ok 54 - log C..F
ok 55 - log C..F -- file
ok 56 - log C..F --parents -- file
ok 57 - log C..F --full-history -- file
ok 58 - log C..F --full-history --parents -- file
ok 59 - log C..F --simplify-merges -- file
ok 60 - log C..F --ancestry-path
ok 61 - log C..F --ancestry-path -- file
ok 62 - log C..F --ancestry-path --parents -- file
ok 63 - log C..F --ancestry-path --simplify-merges -- file
ok 64 - log C..F --first-parent
ok 65 - log C..F --first-parent -- file
# passed all 65 test(s)
1..65
*** t6112-rev-list-filters-objects.sh ***
ok 1 - setup r1
ok 2 - verify blob:none omits all 5 blobs
ok 3 - verify emitted+omitted == all
ok 4 - setup r2
ok 5 - verify blob:limit=500 omits all blobs
ok 6 - verify emitted+omitted == all
ok 7 - verify blob:limit=1000
ok 8 - verify blob:limit=1001
ok 9 - verify blob:limit=1k
ok 10 - verify blob:limit=1m
ok 11 - setup r3
ok 12 - verify sparse:path=pattern1 omits top-level files
ok 13 - verify sparse:path=pattern2 omits both sparse2 files
ok 14 - setup r3 part 2
ok 15 - verify sparse:oid=OID omits top-level files
ok 16 - verify sparse:oid=oid-ish omits top-level files
ok 17 - rev-list W/ --missing=print
ok 18 - rev-list W/O --missing fails
ok 19 - rev-list W/ missing=allow-any
# passed all 19 test(s)
1..19
*** t6120-describe.sh ***
ok 1 - setup
ok 2 - describe HEAD
ok 3 - describe HEAD^
ok 4 - describe HEAD^^
ok 5 - describe HEAD^^2
ok 6 - describe HEAD^^2^
ok 7 - describe HEAD^^^
ok 8 - describe --tags HEAD
ok 9 - describe --tags HEAD^
ok 10 - describe --tags HEAD^^
ok 11 - describe --tags HEAD^^2
ok 12 - describe --tags HEAD^^2^
ok 13 - describe --tags HEAD^^^
ok 14 - describe --all HEAD
ok 15 - describe --all HEAD^
ok 16 - describe --all HEAD^^^
ok 17 - describe --long HEAD^^2^
ok 18 - describe --long HEAD^^2
ok 19 - describe --tags
ok 20 - describe --first-parent --tags
ok 21 - describe --contains defaults to HEAD without commit-ish
ok 22 - describe --all A^0
ok 23 - no warning was displayed for A
ok 24 - rename tag A to Q locally
ok 25 - describe HEAD
ok 26 - warning was displayed for Q
ok 27 - rename tag Q back to A
ok 28 - pack tag refs
ok 29 - describe HEAD
ok 30 - describe --dirty
ok 31 - set-up dirty work tree
ok 32 - describe --dirty
ok 33 - describe --dirty=.mod
ok 34 - describe --dirty HEAD
ok 35 - set-up matching pattern tests
ok 36 - describe --match=test-*
ok 37 - describe --tags --match=test1-*
ok 38 - describe --tags --match=test2-*
ok 39 - describe --long --tags --match=test2-* HEAD^
ok 40 - describe --long --tags --match=test1-* --match=test2-* HEAD^
ok 41 - describe --long --tags --match=test1-* --no-match --match=test2-* HEAD^
ok 42 - describe --long --tags --match=test1-* --match=test3-* HEAD
ok 43 - describe --long --tags --match=test3-* --match=test1-* HEAD
ok 44 - set-up branches
ok 45 - describe --all --match=branch_* --exclude=branch_C HEAD
ok 46 - describe --all --match=origin/remote_branch_* --exclude=origin/remote_branch_C HEAD
ok 47 - describe --all test-annotated~1
ok 48 - --match does not work for other types
ok 49 - --exclude does not work for other types
ok 50 - name-rev with exact tags
ok 51 - name-rev --all
ok 52 - name-rev --stdin
ok 53 - describe --contains with the exact tags
ok 54 - describe --contains and --match
ok 55 - describe --exclude
ok 56 - describe --contains and --no-match
ok 57 - setup and absorb a submodule
ok 58 - describe chokes on severely broken submodules
ok 59 - describe ignoring a broken submodule
ok 60 - describe a blob at a directly tagged commit
ok 61 - describe a blob with its first introduction
ok 62 - describe directly tagged blob
ok 63 - describe tag object
not ok 64 - name-rev works in a deep repo # TODO known breakage
ok 65 - describe works in a deep repo
ok 66 - describe --all A
ok 67 - describe --all c
ok 68 - describe --all --match=branch_* branch_A
ok 69 - describe complains about tree object
ok 70 - describe complains about missing object
# still have 1 known breakage(s)
# passed all remaining 69 test(s)
1..70
*** t6130-pathspec-noglob.sh ***
ok 1 - create commits with glob characters
ok 2 - vanilla pathspec matches literally
ok 3 - star pathspec globs
ok 4 - star pathspec globs
ok 5 - bracket pathspec globs and matches literal brackets
ok 6 - bracket pathspec globs and matches literal brackets
ok 7 - no-glob option matches literally (vanilla)
ok 8 - no-glob option matches literally (vanilla)
ok 9 - no-glob option matches literally (star)
ok 10 - no-glob option matches literally (star)
ok 11 - no-glob option matches literally (bracket)
ok 12 - no-glob option matches literally (bracket)
ok 13 - no-glob option disables :(literal)
ok 14 - no-glob environment variable works
ok 15 - blame takes global pathspec flags
ok 16 - setup xxx/bar
ok 17 - **/ works with :(glob)
ok 18 - **/ does not work with --noglob-pathspecs
ok 19 - **/ works with :(glob) and --noglob-pathspecs
ok 20 - **/ works with --glob-pathspecs
ok 21 - **/ does not work with :(literal) and --glob-pathspecs
# passed all 21 test(s)
1..21
*** t6131-pathspec-icase.sh ***
ok 1 - create commits with glob characters
ok 2 - tree_entry_interesting matches bar
ok 3 - tree_entry_interesting matches :(icase)bar
ok 4 - tree_entry_interesting matches :(icase)bar with prefix
ok 5 - tree_entry_interesting matches :(icase)bar with empty prefix
ok 6 - match_pathspec matches :(icase)bar
ok 7 - match_pathspec matches :(icase)bar with prefix
ok 8 - match_pathspec matches :(icase)bar with empty prefix
ok 9 - "git diff" can take magic :(icase) pathspec
# passed all 9 test(s)
1..9
*** t6132-pathspec-exclude.sh ***
ok 1 - setup
ok 2 - exclude only pathspec uses default implicit pathspec
ok 3 - t_e_i() exclude sub
ok 4 - t_e_i() exclude sub/sub/file
ok 5 - t_e_i() exclude sub using mnemonic
ok 6 - t_e_i() exclude :(icase)SUB
ok 7 - t_e_i() exclude sub2 from sub
ok 8 - t_e_i() exclude sub/*file
ok 9 - t_e_i() exclude :(glob)sub/*/file
ok 10 - m_p_d() exclude sub
ok 11 - m_p_d() exclude sub/sub/file
ok 12 - m_p_d() exclude sub using mnemonic
ok 13 - m_p_d() exclude :(icase)SUB
ok 14 - m_p_d() exclude sub2 from sub
ok 15 - m_p_d() exclude sub/*file
ok 16 - m_p_d() exclude :(glob)sub/*/file
ok 17 - multiple exclusions
# passed all 17 test(s)
1..17
*** t6133-pathspec-rev-dwim.sh ***
ok 1 - setup
ok 2 - non-rev wildcard dwims to pathspec
ok 3 - tree:path with metacharacters dwims to rev
ok 4 - ^{foo} with metacharacters dwims to rev
ok 5 - @{foo} with metacharacters dwims to rev
ok 6 - :/*.t from a subdir dwims to a pathspec
# passed all 6 test(s)
1..6
*** t6134-pathspec-in-submodule.sh ***
ok 1 - setup a submodule
ok 2 - error message for path inside submodule
ok 3 - error message for path inside submodule from within submodule
# passed all 3 test(s)
1..3
*** t6135-pathspec-with-attrs.sh ***
ok 1 - setup a tree
ok 2 - pathspec with no attr
ok 3 - pathspec with labels and non existent .gitattributes
ok 4 - setup .gitattributes
ok 5 - check specific set attr
ok 6 - check specific unset attr
ok 7 - check specific value attr
ok 8 - check unspecified attr
ok 9 - check multiple unspecified attr
ok 10 - check label with more labels but excluded path
ok 11 - check label excluding other labels
ok 12 - fail on multiple attr specifiers in one pathspec item
ok 13 - fail if attr magic is used places not implemented
ok 14 - abort on giving invalid label on the command line
ok 15 - abort on asking for wrong magic
ok 16 - check attribute list
ok 17 - backslash cannot be the last character
ok 18 - backslash cannot be used as a value
# passed all 18 test(s)
1..18
*** t6200-fmt-merge-msg.sh ***
ok 1 - setup
ok 2 - message for merging local branch
ok 3 - message for merging external branch
ok 4 - [merge] summary/log configuration
ok 5 - setup FETCH_HEAD
ok 6 - merge.log=3 limits shortlog length
ok 7 - merge.log=5 shows all 5 commits
ok 8 - --log=5 with custom comment character
ok 9 - merge.log=0 disables shortlog
ok 10 - --log=3 limits shortlog length
ok 11 - --log=5 shows all 5 commits
ok 12 - --no-log disables shortlog
ok 13 - --log=0 disables shortlog
ok 14 - fmt-merge-msg -m
ok 15 - setup: expected shortlog for two branches
ok 16 - shortlog for two branches
ok 17 - merge-msg -F
ok 18 - merge-msg -F in subdirectory
ok 19 - merge-msg with nothing to merge
ok 20 - merge-msg tag
ok 21 - merge-msg two tags
ok 22 - merge-msg tag and branch
ok 23 - merge-msg lots of commits
ok 24 - merge-msg with "merging" an annotated tag
# passed all 24 test(s)
1..24
*** t6300-for-each-ref.sh ***
ok 1 - setup
ok 2 - basic atom: head refname
ok 3 - basic atom: head refname:
ok 4 - basic atom: head refname:short
ok 5 - basic atom: head refname:lstrip=1
ok 6 - basic atom: head refname:lstrip=2
ok 7 - basic atom: head refname:lstrip=-1
ok 8 - basic atom: head refname:lstrip=-2
ok 9 - basic atom: head refname:rstrip=1
ok 10 - basic atom: head refname:rstrip=2
ok 11 - basic atom: head refname:rstrip=-1
ok 12 - basic atom: head refname:rstrip=-2
ok 13 - basic atom: head refname:strip=1
ok 14 - basic atom: head refname:strip=2
ok 15 - basic atom: head refname:strip=-1
ok 16 - basic atom: head refname:strip=-2
ok 17 - basic atom: head upstream
ok 18 - basic atom: head upstream:short
ok 19 - basic atom: head upstream:lstrip=2
ok 20 - basic atom: head upstream:lstrip=-2
ok 21 - basic atom: head upstream:rstrip=2
ok 22 - basic atom: head upstream:rstrip=-2
ok 23 - basic atom: head upstream:strip=2
ok 24 - basic atom: head upstream:strip=-2
ok 25 - basic atom: head push
ok 26 - basic atom: head push:short
ok 27 - basic atom: head push:lstrip=1
ok 28 - basic atom: head push:lstrip=-1
ok 29 - basic atom: head push:rstrip=1
ok 30 - basic atom: head push:rstrip=-1
ok 31 - basic atom: head push:strip=1
ok 32 - basic atom: head push:strip=-1
ok 33 - basic atom: head objecttype
ok 34 - basic atom: head objectsize
ok 35 - basic atom: head objectname
ok 36 - basic atom: head objectname:short
ok 37 - basic atom: head objectname:short=1
ok 38 - basic atom: head objectname:short=10
ok 39 - basic atom: head tree
ok 40 - basic atom: head parent
ok 41 - basic atom: head numparent
ok 42 - basic atom: head object
ok 43 - basic atom: head type
ok 44 - basic atom: head *objectname
ok 45 - basic atom: head *objecttype
ok 46 - basic atom: head author
ok 47 - basic atom: head authorname
ok 48 - basic atom: head authoremail
ok 49 - basic atom: head authordate
ok 50 - basic atom: head committer
ok 51 - basic atom: head committername
ok 52 - basic atom: head committeremail
ok 53 - basic atom: head committerdate
ok 54 - basic atom: head tag
ok 55 - basic atom: head tagger
ok 56 - basic atom: head taggername
ok 57 - basic atom: head taggeremail
ok 58 - basic atom: head taggerdate
ok 59 - basic atom: head creator
ok 60 - basic atom: head creatordate
ok 61 - basic atom: head subject
ok 62 - basic atom: head contents:subject
ok 63 - basic atom: head body
ok 64 - basic atom: head contents:body
ok 65 - basic atom: head contents:signature
ok 66 - basic atom: head contents
ok 67 - basic atom: head HEAD
ok 68 - basic atom: tag refname
ok 69 - basic atom: tag refname:short
ok 70 - basic atom: tag upstream
ok 71 - basic atom: tag push
ok 72 - basic atom: tag objecttype
ok 73 - basic atom: tag objectsize
ok 74 - basic atom: tag objectname
ok 75 - basic atom: tag objectname:short
ok 76 - basic atom: head objectname:short=1
ok 77 - basic atom: head objectname:short=10
ok 78 - basic atom: tag tree
ok 79 - basic atom: tag parent
ok 80 - basic atom: tag numparent
ok 81 - basic atom: tag object
ok 82 - basic atom: tag type
ok 83 - basic atom: tag *objectname
ok 84 - basic atom: tag *objecttype
ok 85 - basic atom: tag author
ok 86 - basic atom: tag authorname
ok 87 - basic atom: tag authoremail
ok 88 - basic atom: tag authordate
ok 89 - basic atom: tag committer
ok 90 - basic atom: tag committername
ok 91 - basic atom: tag committeremail
ok 92 - basic atom: tag committerdate
ok 93 - basic atom: tag tag
ok 94 - basic atom: tag tagger
ok 95 - basic atom: tag taggername
ok 96 - basic atom: tag taggeremail
ok 97 - basic atom: tag taggerdate
ok 98 - basic atom: tag creator
ok 99 - basic atom: tag creatordate
ok 100 - basic atom: tag subject
ok 101 - basic atom: tag contents:subject
ok 102 - basic atom: tag body
ok 103 - basic atom: tag contents:body
ok 104 - basic atom: tag contents:signature
ok 105 - basic atom: tag contents
ok 106 - basic atom: tag HEAD
ok 107 - Check invalid atoms names are errors
ok 108 - Check format specifiers are ignored in naming date atoms
ok 109 - Check valid format specifiers for date fields
ok 110 - Check invalid format specifiers are errors
ok 111 - arguments to %(objectname:short=) must be positive integers
ok 112 - Check unformatted date fields output
ok 113 - Check format "default" formatted date fields output
ok 114 - Check format "default-local" date fields output
ok 115 - Check format "relative" date fields output
ok 116 - Check format "relative-local" date fields output
ok 117 - Check format "short" date fields output
ok 118 - Check format "short-local" date fields output
ok 119 - Check format "local" date fields output
ok 120 - Check format "iso8601" date fields output
ok 121 - Check format "iso8601-local" date fields output
ok 122 - Check format "rfc2822" date fields output
ok 123 - Check format "rfc2822-local" date fields output
ok 124 - Check format "raw" date fields output
ok 125 - Check format "raw-local" date fields output
ok 126 - Check format of strftime date fields
ok 127 - Check format of strftime-local date fields
ok 128 - exercise strftime with odd fields
ok 129 - Verify ascending sort
ok 130 - Verify descending sort
ok 131 - Quoting style: shell
ok 132 - Quoting style: perl
ok 133 - Quoting style: python
ok 134 - Quoting style: tcl
ok 135 - more than one quoting style: --perl --shell
ok 136 - more than one quoting style: -s --python
ok 137 - more than one quoting style: --python --tcl
ok 138 - more than one quoting style: --tcl --perl
ok 139 - setup for upstream:track[short]
ok 140 - basic atom: head upstream:track
ok 141 - basic atom: head upstream:trackshort
ok 142 - basic atom: head upstream:track,nobracket
ok 143 - basic atom: head upstream:nobracket,track
ok 144 - basic atom: head push:track
ok 145 - basic atom: head push:trackshort
ok 146 - Check that :track[short] cannot be used with other atoms
ok 147 - Check that :track[short] works when upstream is invalid
ok 148 - Check for invalid refname format
ok 149 - set up color tests
ok 150 # skip %(color) shows color with a tty (missing TTY)
ok 151 - %(color) does not show color without tty
ok 152 - --color can override tty check
ok 153 - color.ui=always does not override tty check
ok 154 - Check ambiguous head and tag refs (strict)
ok 155 - Check ambiguous head and tag refs (loose)
ok 156 - Check ambiguous head and tag refs II (loose)
ok 157 - an unusual tag with an incomplete line
ok 158 - create tag with subject and body content
ok 159 - basic atom: refs/tags/subject-body subject
ok 160 - basic atom: refs/tags/subject-body body
ok 161 - basic atom: refs/tags/subject-body contents
ok 162 - create tag with multiline subject
ok 163 - basic atom: refs/tags/multiline subject
ok 164 - basic atom: refs/tags/multiline contents:subject
ok 165 - basic atom: refs/tags/multiline body
ok 166 - basic atom: refs/tags/multiline contents:body
ok 167 - basic atom: refs/tags/multiline contents:signature
ok 168 - basic atom: refs/tags/multiline contents
ok 169 # skip create signed tags (missing GPG)
ok 170 # skip basic atom: refs/tags/signed-empty subject (missing GPG)
ok 171 # skip basic atom: refs/tags/signed-empty contents:subject (missing GPG)
ok 172 # skip basic atom: refs/tags/signed-empty body (missing GPG)
ok 173 # skip basic atom: refs/tags/signed-empty contents:body (missing GPG)
ok 174 # skip basic atom: refs/tags/signed-empty contents:signature (missing GPG)
ok 175 # skip basic atom: refs/tags/signed-empty contents (missing GPG)
ok 176 # skip basic atom: refs/tags/signed-short subject (missing GPG)
ok 177 # skip basic atom: refs/tags/signed-short contents:subject (missing GPG)
ok 178 # skip basic atom: refs/tags/signed-short body (missing GPG)
ok 179 # skip basic atom: refs/tags/signed-short contents:body (missing GPG)
ok 180 # skip basic atom: refs/tags/signed-short contents:signature (missing GPG)
ok 181 # skip basic atom: refs/tags/signed-short contents (missing GPG)
ok 182 # skip basic atom: refs/tags/signed-long subject (missing GPG)
ok 183 # skip basic atom: refs/tags/signed-long contents:subject (missing GPG)
ok 184 # skip basic atom: refs/tags/signed-long body (missing GPG)
ok 185 # skip basic atom: refs/tags/signed-long contents:body (missing GPG)
ok 186 # skip basic atom: refs/tags/signed-long contents:signature (missing GPG)
ok 187 # skip basic atom: refs/tags/signed-long contents (missing GPG)
ok 188 - Verify sort with multiple keys
ok 189 - do not dereference NULL upon %(HEAD) on unborn branch
ok 190 - set up trailers for next test
ok 191 - %(trailers:unfold) unfolds trailers
ok 192 - %(trailers:only) shows only "key: value" trailers
ok 193 - %(trailers:only) and %(trailers:unfold) work together
ok 194 - %(contents:trailers:unfold) unfolds trailers
ok 195 - %(contents:trailers:only) shows only "key: value" trailers
ok 196 - %(contents:trailers:only) and %(contents:trailers:unfold) work together
ok 197 - %(trailers) rejects unknown trailers arguments
ok 198 - %(contents:trailers) rejects unknown trailers arguments
ok 199 - basic atom: head contents:trailers
ok 200 - Add symbolic ref for the following tests
ok 201 - Verify usage of %(symref) atom
ok 202 - Verify usage of %(symref:short) atom
ok 203 - Verify usage of %(symref:lstrip) atom
ok 204 - Verify usage of %(symref:rstrip) atom
ok 205 - :remotename and :remoteref
ok 206 - for-each-ref --ignore-case ignores case
# passed all 206 test(s)
1..206
*** t6301-for-each-ref-errors.sh ***
ok 1 - setup
ok 2 - Broken refs are reported correctly
ok 3 - NULL_SHA1 refs are reported correctly
ok 4 - Missing objects are reported correctly
# passed all 4 test(s)
1..4
*** t6302-for-each-ref-filter.sh ***
ok 1 - setup some history and refs
ok 2 - filtering with --points-at
ok 3 - check signed tags with --points-at
ok 4 - filtering with --merged
ok 5 - filtering with --no-merged
ok 6 - filtering with --contains
ok 7 - filtering with --no-contains
ok 8 - filtering with --contains and --no-contains
ok 9 - %(color) must fail
ok 10 - left alignment is default
ok 11 - middle alignment
ok 12 - right alignment
ok 13 - align:middle,42
ok 14 - align:42,middle
ok 15 - align:position=middle,42
ok 16 - align:42,position=middle
ok 17 - align:middle,width=42
ok 18 - align:width=42,middle
ok 19 - align:position=middle,width=42
ok 20 - align:width=42,position=middle
ok 21 - align:32,width=42,middle
ok 22 - align:width=30,42,middle
ok 23 - align:width=42,position=right,middle
ok 24 - align:42,right,position=middle
ok 25 - alignment with format quote
ok 26 - nested alignment with quote formatting
ok 27 - check `%(contents:lines=1)`
ok 28 - check `%(contents:lines=0)`
ok 29 - check `%(contents:lines=99999)`
ok 30 - `%(contents:lines=-1)` should fail
ok 31 - setup for version sort
ok 32 - version sort
ok 33 - version sort (shortened)
ok 34 - reverse version sort
ok 35 - improper usage of %(if), %(then), %(else) and %(end) atoms
ok 36 - check %(if)...%(then)...%(end) atoms
ok 37 - check %(if)...%(then)...%(else)...%(end) atoms
ok 38 - ignore spaces in %(if) atom usage
ok 39 - check %(if:equals=<string>)
ok 40 - check %(if:notequals=<string>)
ok 41 - --merged is incompatible with --no-merged
# passed all 41 test(s)
1..41
*** t6500-gc.sh ***
ok 1 - setup
ok 2 - gc empty repository
ok 3 - gc does not leave behind pid file
ok 4 - gc --gobbledegook
ok 5 - gc -h with invalid configuration
ok 6 - gc is not aborted due to a stale symref
ok 7 - gc --keep-largest-pack
ok 8 - auto gc with too many loose objects does not attempt to create bitmaps
ok 9 - background auto gc does not run if gc.log is present and recent but does if it is old
ok 10 - background auto gc respects lock for all operations
# passed all 10 test(s)
1..10
*** t6501-freshen-objects.sh ***
ok 1 - make repo completely empty (loose)
ok 2 - disable reflogs (loose)
ok 3 - setup basic history (loose)
ok 4 - create and abandon some objects (loose)
ok 5 - simulate time passing (loose)
ok 6 - start writing new commit with old blob (loose)
ok 7 - simultaneous gc (loose)
ok 8 - finish writing out commit (loose)
ok 9 - repository passes fsck (loose)
ok 10 - abandon objects again (loose)
ok 11 - start writing new commit with same tree (loose)
ok 12 - simultaneous gc (loose)
ok 13 - finish writing out commit (loose)
ok 14 - make repo completely empty (repack)
ok 15 - disable reflogs (repack)
ok 16 - setup basic history (repack)
ok 17 - create and abandon some objects (repack)
ok 18 - simulate time passing (repack)
ok 19 - start writing new commit with old blob (repack)
ok 20 - simultaneous gc (repack)
ok 21 - finish writing out commit (repack)
ok 22 - repository passes fsck (repack)
ok 23 - abandon objects again (repack)
ok 24 - start writing new commit with same tree (repack)
ok 25 - simultaneous gc (repack)
ok 26 - finish writing out commit (repack)
ok 27 - do not complain about existing broken links (commit)
ok 28 - do not complain about existing broken links (tree)
ok 29 - do not complain about existing broken links (tag)
# passed all 29 test(s)
1..29
*** t7001-mv.sh ***
ok 1 - prepare reference tree
ok 2 - moving the file out of subdirectory
ok 3 - commiting the change
ok 4 - checking the commit
ok 5 - moving the file back into subdirectory
ok 6 - commiting the change
ok 7 - checking the commit
ok 8 - mv --dry-run does not move file
ok 9 - checking -k on non-existing file
ok 10 - checking -k on untracked file
ok 11 - checking -k on multiple untracked files
ok 12 - checking -f on untracked file with existing target
ok 13 - moving to absent target with trailing slash
ok 14 - clean up
ok 15 - moving to existing untracked target with trailing slash
ok 16 - moving to existing tracked target with trailing slash
ok 17 - clean up
ok 18 - adding another file
ok 19 - moving whole subdirectory
ok 20 - commiting the change
ok 21 - checking the commit
ok 22 - succeed when source is a prefix of destination
ok 23 - moving whole subdirectory into subdirectory
ok 24 - commiting the change
ok 25 - checking the commit
ok 26 - do not move directory over existing directory
ok 27 - move into "."
ok 28 - Michael Cassar's test case
ok 29 - Sergey Vlasov's test case
ok 30 - absolute pathname
ok 31 - absolute pathname outside should fail
ok 32 - git mv to move multiple sources into a directory
ok 33 - git mv should not change sha1 of moved cache entry
ok 34 - git mv should overwrite symlink to a file
ok 35 - git mv should overwrite file with a symlink
ok 36 - check moved symlink
ok 37 - setup submodule
ok 38 - git mv cannot move a submodule in a file
ok 39 - git mv moves a submodule with a .git directory and no .gitmodules
ok 40 - git mv moves a submodule with a .git directory and .gitmodules
ok 41 - git mv moves a submodule with gitfile
ok 42 - mv does not complain when no .gitmodules file is found
ok 43 - mv will error out on a modified .gitmodules file unless staged
ok 44 - mv issues a warning when section is not found in .gitmodules
ok 45 - mv --dry-run does not touch the submodule or .gitmodules
ok 46 - checking out a commit before submodule moved needs manual updates
ok 47 - mv -k does not accidentally destroy submodules
ok 48 - moving a submodule in nested directories
ok 49 - moving nested submodules
# passed all 49 test(s)
1..49
*** t7003-filter-branch.sh ***
ok 1 - setup
ok 2 - rewrite identically
ok 3 - result is really identical
ok 4 - rewrite bare repository identically
ok 5 - result is really identical
ok 6 - correct GIT_DIR while using -d
ok 7 - tree-filter works with -d
ok 8 - Fail if commit filter fails
ok 9 - rewrite, renaming a specific file
ok 10 - test that the file was renamed
ok 11 - rewrite, renaming a specific directory
ok 12 - test that the directory was renamed
ok 13 - populate --state-branch
ok 14 - using --state-branch to skip already rewritten commits
ok 15 - rewrite one branch, keeping a side branch
ok 16 - common ancestor is still common (unchanged)
ok 17 - filter subdirectory only
ok 18 - subdirectory filter result looks okay
ok 19 - more setup
ok 20 - use index-filter to move into a subdirectory
ok 21 - stops when msg filter fails
ok 22 - author information is preserved
ok 23 - remove a certain author's commits
ok 24 - barf on invalid name
ok 25 - "map" works in commit filter
ok 26 - Name needing quotes
ok 27 - Subdirectory filter with disappearing trees
ok 28 - Tag name filtering retains tag message
ok 29 - Tag name filtering strips gpg signature
ok 30 # skip Filtering retains message of gpg signed commit (missing GPG)
ok 31 - Tag name filtering allows slashes in tag names
ok 32 - setup --prune-empty comparisons
ok 33 - Prune empty commits
ok 34 - prune empty collapsed merges
ok 35 - prune empty works even without index/tree filters
ok 36 - --prune-empty is able to prune root commit
ok 37 - --prune-empty is able to prune entire branch
ok 38 - --remap-to-ancestor with filename filters
ok 39 - automatic remapping to ancestor with filename filters
ok 40 - setup submodule
ok 41 - rewrite submodule with another content
ok 42 - replace submodule revision
ok 43 - filter commit message without trailing newline
ok 44 - tree-filter deals with object name vs pathname ambiguity
ok 45 - rewrite repository including refs that point at non-commit object
# passed all 45 test(s)
1..45
*** t7004-tag.sh ***
ok 1 - listing all tags in an empty tree should succeed
ok 2 - listing all tags in an empty tree should output nothing
ok 3 - sort tags, ignore case
ok 4 - looking for a tag in an empty tree should fail
ok 5 - creating a tag in an empty tree should fail
ok 6 - creating a tag for HEAD in an empty tree should fail
ok 7 - creating a tag for an unknown revision should fail
ok 8 - creating a tag using default HEAD should succeed
ok 9 - creating a tag with --create-reflog should create reflog
ok 10 - annotated tag with --create-reflog has correct message
ok 11 - --create-reflog does not create reflog on failure
ok 12 - option core.logAllRefUpdates=always creates reflog
ok 13 - listing all tags if one exists should succeed
ok 14 - Multiple -l or --list options are equivalent to one -l option
ok 15 - listing all tags if one exists should output that tag
ok 16 - listing a tag using a matching pattern should succeed
ok 17 - listing a tag with --ignore-case
ok 18 - listing a tag using a matching pattern should output that tag
ok 19 - listing tags using a non-matching pattern should succeed
ok 20 - listing tags using a non-matching pattern should output nothing
ok 21 - trying to create a tag with the name of one existing should fail
ok 22 - trying to create a tag with a non-valid name should fail
ok 23 - creating a tag using HEAD directly should succeed
ok 24 - --force can create a tag with the name of one existing
ok 25 - --force is moot with a non-existing tag name
ok 26 - trying to delete an unknown tag should fail
ok 27 - trying to delete tags without params should succeed and do nothing
ok 28 - deleting two existing tags in one command should succeed
ok 29 - creating a tag with the name of another deleted one should succeed
ok 30 - trying to delete two tags, existing and not, should fail in the 2nd
ok 31 - trying to delete an already deleted tag should fail
ok 32 - listing all tags should print them ordered
ok 33 - listing tags with substring as pattern must print those matching
ok 34 - listing tags with a suffix as pattern must print those matching
ok 35 - listing tags with a prefix as pattern must print those matching
ok 36 - listing tags using a name as pattern must print that one matching
ok 37 - listing tags using a name as pattern must print that one matching
ok 38 - listing tags with ? in the pattern should print those matching
ok 39 - listing tags using v.* should print nothing because none have v.
ok 40 - listing tags using v* should print only those having v
ok 41 - tag -l can accept multiple patterns
ok 42 - tag -l <pattern> -l <pattern> works, as our buggy documentation previously suggested
ok 43 - listing tags in column
ok 44 - listing tags in column with column.*
ok 45 - listing tag with -n --column should fail
ok 46 - listing tags -n in column with column.ui ignored
ok 47 - a non-annotated tag created without parameters should point to HEAD
ok 48 - trying to verify an unknown tag should fail
ok 49 - trying to verify a non-annotated and non-signed tag should fail
ok 50 - trying to verify many non-annotated or unknown tags, should fail
ok 51 - creating an annotated tag with -m message should succeed
ok 52 - set up editor
ok 53 - creating an annotated tag with -m message --edit should succeed
ok 54 - creating an annotated tag with -F messagefile should succeed
ok 55 - set up editor
ok 56 - creating an annotated tag with -F messagefile --edit should succeed
ok 57 - creating an annotated tag with -F - should succeed
ok 58 - trying to create a tag with a non-existing -F file should fail
ok 59 - trying to create tags giving both -m or -F options should fail
ok 60 - creating a tag with an empty -m message should succeed
ok 61 - creating a tag with an empty -F messagefile should succeed
ok 62 - extra blanks in the message for an annotated tag should be removed
ok 63 - creating a tag with blank -m message with spaces should succeed
ok 64 - creating a tag with blank -F messagefile with spaces should succeed
ok 65 - creating a tag with -F file of spaces and no newline should succeed
ok 66 - creating a tag using a -F messagefile with #comments should succeed
ok 67 - creating a tag with a #comment in the -m message should succeed
ok 68 - creating a tag with #comments in the -F messagefile should succeed
ok 69 - creating a tag with a file of #comment and no newline should succeed
ok 70 - listing the one-line message of a non-signed tag should succeed
ok 71 - The -n 100 invocation means -n --list 100, not -n100
ok 72 - listing the zero-lines message of a non-signed tag should succeed
ok 73 - listing many message lines of a non-signed tag should succeed
ok 74 - annotations for blobs are empty
ok 75 # skip trying to verify an annotated non-signed tag should fail (missing GPG)
ok 76 # skip trying to verify a file-annotated non-signed tag should fail (missing GPG)
ok 77 # skip trying to verify two annotated non-signed tags should fail (missing GPG)
ok 78 # skip creating a signed tag with -m message should succeed (missing GPG)
ok 79 # skip sign with a given key id (missing GPG)
ok 80 # skip sign with an unknown id (1) (missing GPG)
ok 81 # skip sign with an unknown id (2) (missing GPG)
ok 82 # skip -u implies signed tag (missing GPG)
ok 83 # skip creating a signed tag with -F messagefile should succeed (missing GPG)
ok 84 # skip creating a signed tag with -F - should succeed (missing GPG)
ok 85 # skip -s implies annotated tag (missing GPG)
ok 86 # skip git tag -s implied if configured with tag.forcesignannotated (missing GPG)
ok 87 # skip lightweight with no message when configured with tag.forcesignannotated (missing GPG)
ok 88 # skip git tag -a disable configured tag.forcesignannotated (missing GPG)
ok 89 # skip git tag --sign enable GPG sign (missing GPG)
ok 90 # skip trying to create a signed tag with non-existing -F file should fail (missing GPG)
ok 91 # skip verifying a signed tag should succeed (missing GPG)
ok 92 # skip verifying two signed tags in one command should succeed (missing GPG)
ok 93 # skip verifying many signed and non-signed tags should fail (missing GPG)
ok 94 # skip verifying a forged tag should fail (missing GPG)
ok 95 # skip verifying a proper tag with --format pass and format accordingly (missing GPG)
ok 96 # skip verifying a forged tag with --format should fail silently (missing GPG)
ok 97 # skip creating a signed tag with an empty -m message should succeed (missing GPG)
ok 98 # skip creating a signed tag with an empty -F messagefile should succeed (missing GPG)
ok 99 # skip extra blanks in the message for a signed tag should be removed (missing GPG)
ok 100 # skip creating a signed tag with a blank -m message should succeed (missing GPG)
ok 101 # skip creating a signed tag with blank -F file with spaces should succeed (missing GPG)
ok 102 # skip creating a signed tag with spaces and no newline should succeed (missing GPG)
ok 103 # skip signed tag with embedded PGP message (missing GPG)
ok 104 # skip creating a signed tag with a -F file with #comments should succeed (missing GPG)
ok 105 # skip creating a signed tag with #commented -m message should succeed (missing GPG)
ok 106 # skip creating a signed tag with #commented -F messagefile should succeed (missing GPG)
ok 107 # skip creating a signed tag with a #comment and no newline should succeed (missing GPG)
ok 108 # skip listing the one-line message of a signed tag should succeed (missing GPG)
ok 109 # skip listing the zero-lines message of a signed tag should succeed (missing GPG)
ok 110 # skip listing many message lines of a signed tag should succeed (missing GPG)
ok 111 # skip creating a signed tag pointing to a tree should succeed (missing GPG)
ok 112 # skip creating a signed tag pointing to a blob should succeed (missing GPG)
ok 113 # skip creating a signed tag pointing to another tag should succeed (missing GPG)
ok 114 # skip creating a signed tag with rfc1991 (missing RFC1991,GPG of GPG,RFC1991)
ok 115 # skip reediting a signed tag body omits signature (missing RFC1991,GPG of GPG,RFC1991)
ok 116 # skip verifying rfc1991 signature (missing RFC1991,GPG of GPG,RFC1991)
ok 117 # skip list tag with rfc1991 signature (missing RFC1991,GPG of GPG,RFC1991)
ok 118 # skip verifying rfc1991 signature without --rfc1991 (missing RFC1991,GPG of GPG,RFC1991)
ok 119 # skip list tag with rfc1991 signature without --rfc1991 (missing RFC1991,GPG of GPG,RFC1991)
ok 120 # skip reediting a signed tag body omits signature (missing RFC1991,GPG of GPG,RFC1991)
ok 121 # skip git tag -s fails if gpg is misconfigured (bad key) (missing GPG)
ok 122 # skip git tag -s fails if gpg is misconfigured (bad signature format) (missing GPG)
ok 123 # skip git tag -s fails if gpgsm is misconfigured (bad key) (missing GPGSM)
ok 124 # skip git tag -s fails if gpgsm is misconfigured (bad signature format) (missing GPGSM)
ok 125 # skip verify signed tag fails when public key is not present (missing GPG)
ok 126 - git tag -a fails if tag annotation is empty
ok 127 - message in editor has initial comment
ok 128 - message in editor has initial comment: first line
ok 129 - message in editor has initial comment: remainder
ok 130 - overwriting an annoted tag should use its previous body
ok 131 - filename for the message is relative to cwd
ok 132 - filename for the message is relative to cwd
ok 133 - creating second commit and tag
ok 134 - creating third commit without tag
ok 135 - checking that first commit is in all tags (hash)
ok 136 - checking that first commit is in all tags (tag)
ok 137 - checking that first commit is in all tags (relative)
ok 138 - checking that first commit is not listed in any tag with --no-contains  (hash)
ok 139 - checking that first commit is in all tags (tag)
ok 140 - checking that first commit is in all tags (relative)
ok 141 - checking that second commit only has one tag
ok 142 - inverse of the last test, with --no-contains
ok 143 - checking that third commit has no tags
ok 144 - conversely --no-contains on the third commit lists all tags
ok 145 - creating simple branch
ok 146 - checking that branch head only has one tag
ok 147 - checking that branch head with --no-contains lists all but one tag
ok 148 - merging original branch into this branch
ok 149 - checking that original branch head has one tag now
ok 150 - checking that original branch head with --no-contains lists all but one tag now
ok 151 - checking that initial commit is in all tags
ok 152 - checking that --contains can be used in non-list mode
ok 153 - checking that initial commit is in all tags with --no-contains
ok 154 - mixing incompatibles modes and options is forbidden
ok 155 - mixing incompatible modes with --contains is forbidden
ok 156 - Doing 'git tag --list-like --contains <commit> <pattern> is permitted
ok 157 - mixing incompatible modes with --with is forbidden
ok 158 - Doing 'git tag --list-like --with <commit> <pattern> is permitted
ok 159 - mixing incompatible modes with --no-contains is forbidden
ok 160 - Doing 'git tag --list-like --no-contains <commit> <pattern> is permitted
ok 161 - mixing incompatible modes with --without is forbidden
ok 162 - Doing 'git tag --list-like --without <commit> <pattern> is permitted
ok 163 - mixing incompatible modes with --merged is forbidden
ok 164 - Doing 'git tag --list-like --merged <commit> <pattern> is permitted
ok 165 - mixing incompatible modes with --no-merged is forbidden
ok 166 - Doing 'git tag --list-like --no-merged <commit> <pattern> is permitted
ok 167 - mixing incompatible modes with --points-at is forbidden
ok 168 - Doing 'git tag --list-like --points-at <commit> <pattern> is permitted
ok 169 - --points-at can be used in non-list mode
ok 170 - --points-at is a synonym for --points-at HEAD
ok 171 - --points-at finds lightweight tags
ok 172 - --points-at finds annotated tags of commits
ok 173 - --points-at finds annotated tags of tags
ok 174 - multiple --points-at are OR-ed together
ok 175 - lexical sort
ok 176 - version sort
ok 177 - reverse version sort
ok 178 - reverse lexical sort
ok 179 - configured lexical sort
ok 180 - option override configured sort
ok 181 - invalid sort parameter on command line
ok 182 - invalid sort parameter in configuratoin
ok 183 - version sort with prerelease reordering
ok 184 - reverse version sort with prerelease reordering
ok 185 - version sort with prerelease reordering and common leading character
ok 186 - version sort with prerelease reordering, multiple suffixes and common leading character
ok 187 - version sort with prerelease reordering, multiple suffixes match the same tag
ok 188 - version sort with prerelease reordering, multiple suffixes match starting at the same position
ok 189 - version sort with general suffix reordering
ok 190 - versionsort.suffix overrides versionsort.prereleaseSuffix
ok 191 - version sort with very long prerelease suffix
ok 192 - --contains and --no-contains work in a deep repo
ok 193 - --format should list tags as per format given
ok 194 - set up color tests
ok 195 - %(color) omitted without tty
ok 196 # skip %(color) present with tty (missing TTY)
ok 197 - --color overrides auto-color
ok 198 - color.ui=always overrides auto-color
ok 199 - setup --merged test tags
ok 200 - --merged can be used in non-list mode
ok 201 - --merged is incompatible with --no-merged
ok 202 - --merged shows merged tags
ok 203 - --no-merged show unmerged tags
ok 204 - --no-merged can be used in non-list mode
ok 205 - ambiguous branch/tags not marked
ok 206 - --contains combined with --no-contains
ok 207 - Does --[no-]contains stop at commits? Yes!
# passed all 207 test(s)
1..207
*** t7005-editor.sh ***
ok 1 - determine default editor
ok 2 - setup
ok 3 - dumb should error out when falling back on vi
ok 4 - dumb should prefer EDITOR to VISUAL
ok 5 - Using vi
ok 6 - Using EDITOR
ok 7 - Using VISUAL
ok 8 - Using core_editor
ok 9 - Using GIT_EDITOR
ok 10 - Using vi (override)
ok 11 - Using EDITOR (override)
ok 12 - Using VISUAL (override)
ok 13 - Using core_editor (override)
ok 14 - Using GIT_EDITOR (override)
ok 15 - editor with a space
ok 16 - core.editor with a space
# passed all 16 test(s)
1..16
*** t7006-pager.sh ***
ok 1 - determine default pager
ok 2 - setup
ok 3 # skip some commands use a pager (missing TTY)
ok 4 # skip pager runs from subdir (missing TTY)
ok 5 # skip LESS and LV envvars are set for pagination (missing TTY)
ok 6 # skip LESS and LV envvars set by git-sh-setup (missing TTY of !MINGW,TTY)
ok 7 # skip some commands do not use a pager (missing TTY)
ok 8 - no pager when stdout is a pipe
ok 9 - no pager when stdout is a regular file
ok 10 # skip git --paginate rev-list uses a pager (missing TTY)
ok 11 - no pager even with --paginate when stdout is a pipe
ok 12 # skip no pager with --no-pager (missing TTY)
ok 13 # skip configuration can disable pager (missing TTY)
ok 14 # skip configuration can enable pager (from subdir) (missing TTY)
ok 15 # skip git tag -l defaults to paging (missing TTY)
ok 16 # skip git tag -l respects pager.tag (missing TTY)
ok 17 # skip git tag -l respects --no-pager (missing TTY)
ok 18 # skip git tag with no args defaults to paging (missing TTY)
ok 19 # skip git tag with no args respects pager.tag (missing TTY)
ok 20 # skip git tag --contains defaults to paging (missing TTY)
ok 21 # skip git tag --contains respects pager.tag (missing TTY)
ok 22 # skip git tag -a defaults to not paging (missing TTY)
ok 23 # skip git tag -a ignores pager.tag (missing TTY)
ok 24 # skip git tag -a respects --paginate (missing TTY)
ok 25 # skip git tag as alias ignores pager.tag with -a (missing TTY)
ok 26 # skip git tag as alias respects pager.tag with -l (missing TTY)
ok 27 # skip git branch defaults to paging (missing TTY)
ok 28 # skip git branch respects pager.branch (missing TTY)
ok 29 # skip git branch respects --no-pager (missing TTY)
ok 30 # skip git branch --edit-description ignores pager.branch (missing TTY)
ok 31 # skip git branch --set-upstream-to ignores pager.branch (missing TTY)
ok 32 # skip git config ignores pager.config when setting (missing TTY)
ok 33 # skip git config --edit ignores pager.config (missing TTY)
ok 34 # skip git config --get ignores pager.config (missing TTY)
ok 35 # skip git config --get-urlmatch defaults to paging (missing TTY)
ok 36 # skip git config --get-all respects pager.config (missing TTY)
ok 37 # skip git config --list defaults to paging (missing TTY)
ok 38 - tests can detect color
ok 39 - no color when stdout is a regular file
ok 40 # skip color when writing to a pager (missing TTY)
ok 41 # skip colors are suppressed by color.pager (missing TTY)
ok 42 - color when writing to a file intended for a pager
ok 43 # skip colors are sent to pager for external commands (missing TTY)
ok 44 - setup: some aliases
ok 45 # skip git log - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 46 # skip git log - PAGER overrides default pager (missing TTY)
ok 47 # skip git log - repository-local core.pager setting overrides PAGER (missing TTY)
ok 48 # skip git log - core.pager overrides PAGER from subdirectory (missing TTY)
ok 49 # skip git log - GIT_PAGER overrides core.pager (missing TTY)
ok 50 # skip git -p log - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 51 # skip git -p log - PAGER overrides default pager (missing TTY)
ok 52 # skip git -p log - repository-local core.pager setting overrides PAGER (missing TTY)
ok 53 # skip git -p log - core.pager overrides PAGER from subdirectory (missing TTY)
ok 54 # skip git -p log - GIT_PAGER overrides core.pager (missing TTY)
ok 55 # skip git aliasedlog - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 56 # skip git aliasedlog - PAGER overrides default pager (missing TTY)
ok 57 # skip git aliasedlog - repository-local core.pager setting overrides PAGER (missing TTY)
ok 58 # skip git aliasedlog - core.pager overrides PAGER from subdirectory (missing TTY)
ok 59 # skip git aliasedlog - GIT_PAGER overrides core.pager (missing TTY)
ok 60 # skip git -p aliasedlog - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 61 # skip git -p aliasedlog - PAGER overrides default pager (missing TTY)
ok 62 # skip git -p aliasedlog - repository-local core.pager setting overrides PAGER (missing TTY)
ok 63 # skip git -p aliasedlog - core.pager overrides PAGER from subdirectory (missing TTY)
ok 64 # skip git -p aliasedlog - GIT_PAGER overrides core.pager (missing TTY)
ok 65 # skip git -p true - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 66 # skip git -p true - PAGER overrides default pager (missing TTY)
ok 67 # skip git -p true - repository-local core.pager setting overrides PAGER (missing TTY)
ok 68 # skip git -p true - core.pager overrides PAGER from subdirectory (missing TTY)
ok 69 # skip git -p true - GIT_PAGER overrides core.pager (missing TTY)
ok 70 # skip git -p request-pull - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 71 # skip git -p request-pull - PAGER overrides default pager (missing TTY)
ok 72 # skip git -p request-pull - repository-local core.pager setting overrides PAGER (missing TTY)
ok 73 # skip git -p request-pull - core.pager overrides PAGER from subdirectory (missing TTY)
ok 74 # skip git -p request-pull - GIT_PAGER overrides core.pager (missing TTY)
ok 75 # skip git -p - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 76 # skip git -p - PAGER overrides default pager (missing TTY)
ok 77 # skip git -p - repository-local core.pager setting is not used (missing TTY)
ok 78 # skip git -p - GIT_PAGER overrides core.pager (missing TTY)
ok 79 # skip core.pager in repo config works and retains cwd (missing TTY)
ok 80 # skip core.pager is found via alias in subdirectory (missing TTY)
ok 81 # skip no pager for 'git -p nonsense' (missing TTY)
ok 82 # skip git shortlog - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 83 # skip git shortlog - PAGER overrides default pager (missing TTY)
ok 84 # skip git shortlog - repository-local core.pager setting overrides PAGER (missing TTY)
ok 85 # skip git shortlog - core.pager overrides PAGER from subdirectory (missing TTY)
ok 86 # skip git shortlog - GIT_PAGER overrides core.pager (missing TTY)
ok 87 - setup: configure shortlog not to paginate
ok 88 # skip no pager for 'git shortlog' (missing TTY)
ok 89 # skip git shortlog - core.pager is not used from subdirectory (missing TTY)
ok 90 # skip git -p shortlog - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)
ok 91 # skip git -p shortlog - core.pager overrides PAGER from subdirectory (missing TTY)
ok 92 # skip git -p apply </dev/null - core.pager overrides PAGER from subdirectory (missing TTY)
ok 93 # skip command-specific pager (missing TTY)
ok 94 # skip command-specific pager overrides core.pager (missing TTY)
ok 95 # skip command-specific pager overridden by environment (missing TTY)
ok 96 - setup external command
ok 97 # skip command-specific pager works for external commands (missing TTY)
ok 98 # skip sub-commands of externals use their own pager (missing TTY)
ok 99 # skip external command pagers override sub-commands (missing TTY)
ok 100 - command with underscores does not complain
ok 101 # skip git tag with auto-columns  (missing TTY)
# passed all 101 test(s)
1..101
*** t7007-show.sh ***
ok 1 - setup
ok 2 - showing a tag that point at a missing object
ok 3 - set up a bit of history
ok 4 - showing two commits
ok 5 - showing a range walks (linear)
ok 6 - showing a range walks (Y shape, ^ first)
ok 7 - showing a range walks (Y shape, ^ last)
ok 8 - showing with -N walks
ok 9 - showing annotated tag
ok 10 - showing annotated tag plus commit
ok 11 - showing range
ok 12 - -s suppresses diff
ok 13 - --quiet suppresses diff
ok 14 - show --graph is forbidden
# passed all 14 test(s)
1..14
*** t7008-grep-binary.sh ***
ok 1 - setup
ok 2 - git grep ina a
ok 3 - git grep -ah ina a
ok 4 - git grep -I ina a
ok 5 - git grep -c ina a
ok 6 - git grep -l ina a
ok 7 - git grep -L bar a
ok 8 - git grep -q ina a
ok 9 - git grep -F ile a
ok 10 - git grep -Fi iLE a
ok 11 - git grep ile a
ok 12 - git grep .fi a # TODO known breakage vanished
ok 13 - git grep -f f -F 'y<NUL>f' a
ok 14 - git grep -f f -F 'y<NUL>x' a
ok 15 - git grep -f f -Fi 'Y<NUL>f' a
ok 16 - git grep -f f -Fi 'Y<NUL>x' a
ok 17 - git grep -f f  'y<NUL>f' a
ok 18 - git grep -f f  'y<NUL>x' a
ok 19 - git grep -f f  'æ<NUL>ð' a
ok 20 - git grep -f f -F 'e<NUL>m[*]c' a
ok 21 - git grep -f f -Fi 'E<NUL>M[*]C' a
ok 22 - git grep -f f -F 'y<NUL>[f]' a
ok 23 - git grep -f f -F '[y]<NUL>f' a
ok 24 - git grep -f f -Fi 'Y<NUL>[F]' a
ok 25 - git grep -f f -Fi '[Y]<NUL>F' a
ok 26 - git grep -f f -F 'æ<NUL>[ð]' a
ok 27 - git grep -f f -F '[æ]<NUL>ð' a
ok 28 - git grep -f f -Fi 'Æ<NUL>[Ð]' a
ok 29 - git grep -f f -Fi '[Æ]<NUL>Ð' a
not ok 30 - git grep -f f -i 'Æ<NUL>Ð' a # TODO known breakage
not ok 31 - git grep -f f  'y<NUL>[f]' a # TODO known breakage
not ok 32 - git grep -f f  '[y]<NUL>f' a # TODO known breakage
not ok 33 - git grep -f f -i 'Y<NUL>[F]' a # TODO known breakage
not ok 34 - git grep -f f -i '[Y]<NUL>f' a # TODO known breakage
not ok 35 - git grep -f f  'æ<NUL>[ð]' a # TODO known breakage
not ok 36 - git grep -f f  '[æ]<NUL>ð' a # TODO known breakage
not ok 37 - git grep -f f -i 'Æ<NUL>[Ð]' a # TODO known breakage
not ok 38 - git grep -f f  'e<NUL>m.*c<NUL>' a # TODO known breakage
not ok 39 - git grep -f f -i 'E<NUL>M.*c<NUL>' a # TODO known breakage
not ok 40 - git grep -f f  'e<NUL>m[*]c' a # TODO known breakage
not ok 41 - git grep -f f -i 'E<NUL>M[*]C' a # TODO known breakage
ok 42 - git grep -f f -i 'NOMATCH<NUL>ð' a
not ok 43 - git grep -f f -i '[Æ]<NUL>NOMATCH' a # TODO known breakage
not ok 44 - git grep -f f -i '[æ]<NUL>NOMATCH' a # TODO known breakage
ok 45 - git grep -f f -i '[Æ]<NUL>ð' a
ok 46 - git grep -f f -i '[æ]<NUL>ð' a
ok 47 - git grep -f f -F 'y<NUL>[f]' a
ok 48 - git grep -f f -Fi 'Y<NUL>[F]' a
ok 49 - git grep -f f  'y<NUL>NOMATCH' a
ok 50 - git grep -f f  '<NUL>NOMATCH' a
ok 51 - git grep -f f -i 'Y<NUL>NOMATCH' a
ok 52 - git grep -f f -i '<NUL>NOMATCH' a
ok 53 - git grep -f f -F 'æ<NUL>[ð]' a
ok 54 - git grep -f f -Fi 'Æ<NUL>[Ð]' a
ok 55 - git grep -f f  'y<NUL>NÓMATCH' a
ok 56 - git grep -f f  '<NUL>NÓMATCH' a
ok 57 - git grep -f f -i 'Y<NUL>NÓMATCH' a
ok 58 - git grep -f f -i '<NUL>NÓMATCH' a
ok 59 - grep respects binary diff attribute
ok 60 - grep --cached respects binary diff attribute
ok 61 - grep --cached respects binary diff attribute (2)
ok 62 - grep revision respects binary diff attribute
ok 63 - grep respects not-binary diff attribute
ok 64 - setup textconv filters
ok 65 - grep does not honor textconv
ok 66 - grep --textconv honors textconv
ok 67 - grep --no-textconv does not honor textconv
ok 68 - grep --textconv blob honors textconv
# 1 known breakage(s) vanished; please update test(s)
# still have 14 known breakage(s)
# passed all remaining 53 test(s)
1..68
*** t7009-filter-branch-null-sha1.sh ***
ok 1 - setup: base commits
ok 2 - setup: a commit with a bogus null sha1 in the tree
ok 3 - setup: bring HEAD and index in sync
ok 4 - noop filter-branch complains
ok 5 - filter commands are still checked
ok 6 - removing the broken entry works
# passed all 6 test(s)
1..6
*** t7010-setup.sh ***
ok 1 - setup
ok 2 - git add (absolute)
ok 3 - git add (funny relative)
ok 4 - git rm (absolute)
ok 5 - git rm (funny relative)
ok 6 - git ls-files (absolute)
ok 7 - git ls-files (relative #1)
ok 8 - git ls-files (relative #2)
ok 9 - git ls-files (relative #3)
ok 10 - commit using absolute path names
ok 11 - log using absolute path names
ok 12 - blame using absolute path names
ok 13 - setup deeper work tree
ok 14 - add a directory outside the work tree
ok 15 - add a file outside the work tree, nasty case 1
ok 16 - add a file outside the work tree, nasty case 2
# passed all 16 test(s)
1..16
*** t7011-skip-worktree-reading.sh ***
ok 1 - setup
ok 2 - update-index
ok 3 - update-index
ok 4 - update-index --remove
ok 5 - update-index --remove
ok 6 - ls-files --deleted
ok 7 - ls-files --deleted
ok 8 - ls-files --modified
ok 9 - ls-files --modified
ok 10 - grep with skip-worktree file
ok 11 - diff-index does not examine skip-worktree absent entries
ok 12 - diff-index does not examine skip-worktree dirty entries
ok 13 - diff-files does not examine skip-worktree absent entries
ok 14 - diff-files does not examine skip-worktree dirty entries
ok 15 - git-rm succeeds on skip-worktree absent entries
ok 16 - commit on skip-worktree absent entries
ok 17 - commit on skip-worktree dirty entries
# passed all 17 test(s)
1..17
*** t7012-skip-worktree-writing.sh ***
ok 1 - setup
ok 2 - read-tree updates worktree, absent case
ok 3 - read-tree updates worktree, dirty case
ok 4 - read-tree removes worktree, absent case
ok 5 - read-tree removes worktree, dirty case
ok 6 - index setup
ok 7 - git-add ignores worktree content
ok 8 - git-add ignores worktree content
ok 9 - git-rm fails if worktree is dirty
ok 10 - git-clean, absent case
ok 11 - git-clean, dirty case
# passed all 11 test(s)
1..11
*** t7030-verify-tag.sh ***
ok 1 # skip create signed tags (missing GPG)
ok 2 # skip create signed tags x509  (missing GPGSM)
ok 3 # skip verify and show signatures (missing GPG)
ok 4 # skip verify and show signatures x509 (missing GPGSM)
ok 5 # skip detect fudged signature (missing GPG)
ok 6 # skip verify signatures with --raw (missing GPG)
ok 7 # skip verify signatures with --raw x509 (missing GPGSM)
ok 8 # skip verify multiple tags (missing GPG)
ok 9 # skip verify multiple tags x509 (missing GPGSM)
ok 10 # skip verifying tag with --format (missing GPG)
ok 11 # skip verifying a forged tag with --format should fail silently (missing GPG)
# passed all 11 test(s)
1..11
*** t7060-wtstatus.sh ***
ok 1 - setup
ok 2 - A/A conflict
ok 3 - Report path with conflict
ok 4 - Report new path with conflict
ok 5 - M/D conflict does not segfault
ok 6 - rename & unmerged setup
ok 7 - rename & unmerged status
ok 8 - git diff-index --cached shows 2 added + 1 unmerged
ok 9 - git diff-index --cached -M shows 2 added + 1 unmerged
ok 10 - git diff-index --cached -C shows 2 copies + 1 unmerged
ok 11 - status when conflicts with add and rm advice (deleted by them)
ok 12 - prepare for conflicts
ok 13 - status when conflicts with add and rm advice (both deleted)
ok 14 - status when conflicts with only rm advice (both deleted)
ok 15 - status --branch with detached HEAD
ok 16 - status --porcelain=v1 --branch with detached HEAD
ok 17 - status --porcelain=bogus
# passed all 17 test(s)
1..17
*** t7061-wtstatus-ignore.sh ***
ok 1 - status untracked directory with --ignored
ok 2 - same with gitignore starting with BOM
ok 3 - status untracked directory with --ignored -u
ok 4 - status prefixed untracked directory with --ignored
ok 5 - status prefixed untracked sub-directory with --ignored -u
ok 6 - status ignored directory with --ignore
ok 7 - status ignored directory with --ignore -u
ok 8 - status empty untracked directory with --ignore
ok 9 - status empty untracked directory with --ignore -u
ok 10 - status untracked directory with ignored files with --ignore
ok 11 - status untracked directory with ignored files with --ignore -u
ok 12 - status ignored tracked directory with --ignore
ok 13 - status ignored tracked directory with --ignore -u
ok 14 - status ignored tracked directory and ignored file with --ignore
ok 15 - status ignored tracked directory and ignored file with --ignore -u
ok 16 - status ignored tracked directory and uncommitted file with --ignore
ok 17 - status ignored tracked directory and uncommitted file with --ignore -u
ok 18 - status ignored tracked directory with uncommitted file in untracked subdir with --ignore
ok 19 - status ignored tracked directory with uncommitted file in untracked subdir with --ignore -u
ok 20 - status ignored tracked directory with uncommitted file in tracked subdir with --ignore
ok 21 - status ignored tracked directory with uncommitted file in tracked subdir with --ignore -u
ok 22 - status ignores submodule in excluded directory
# passed all 22 test(s)
1..22
*** t7062-wtstatus-ignorecase.sh ***
ok 1 - status with hash collisions
# passed all 1 test(s)
1..1
*** t7063-status-untracked-cache.sh ***
ok 1 - core.untrackedCache is unset
ok 2 - setup
ok 3 - untracked cache is empty
ok 4 - status first time (empty cache)
ok 5 - untracked cache after first status
ok 6 - status second time (fully populated cache)
ok 7 - untracked cache after second status
ok 8 - modify in root directory, one dir invalidation
ok 9 - verify untracked cache dump
ok 10 - new .gitignore invalidates recursively
ok 11 - verify untracked cache dump
ok 12 - new info/exclude invalidates everything
ok 13 - verify untracked cache dump
ok 14 - move two from tracked to untracked
ok 15 - status after the move
ok 16 - verify untracked cache dump
ok 17 - move two from untracked to tracked
ok 18 - status after the move
ok 19 - verify untracked cache dump
ok 20 - set up for sparse checkout testing
ok 21 - status after commit
ok 22 - untracked cache correct after commit
ok 23 - set up sparse checkout
ok 24 - create/modify files, some of which are gitignored
ok 25 - test sparse status with untracked cache
ok 26 - untracked cache correct after status
ok 27 - test sparse status again with untracked cache
ok 28 - set up for test of subdir and sparse checkouts
ok 29 - test sparse status with untracked cache and subdir
ok 30 - verify untracked cache dump (sparse/subdirs)
ok 31 - test sparse status again with untracked cache and subdir
ok 32 - move entry in subdir from untracked to cached
ok 33 - move entry in subdir from cached to untracked
ok 34 - --no-untracked-cache removes the cache
ok 35 - git status does not change anything
ok 36 - setting core.untrackedCache to true and using git status creates the cache
ok 37 - using --no-untracked-cache does not fail when core.untrackedCache is true
ok 38 - setting core.untrackedCache to false and using git status removes the cache
ok 39 - using --untracked-cache does not fail when core.untrackedCache is false
ok 40 - setting core.untrackedCache to keep
ok 41 - test ident field is working
ok 42 - untracked cache survives a checkout
ok 43 - untracked cache survives a commit
ok 44 - teardown worktree
ok 45 - setup worktree for symlink test
ok 46 - "status" after symlink replacement should be clean with UC=true
ok 47 - "status" after symlink replacement should be clean with UC=false
ok 48 - setup worktree for non-symlink test
ok 49 - "status" after file replacement should be clean with UC=true
ok 50 - "status" after file replacement should be clean with UC=false
# passed all 50 test(s)
1..50
*** t7064-wtstatus-pv2.sh ***
ok 1 - setup
ok 2 - before initial commit, nothing added, only untracked
ok 3 - before initial commit, things added
ok 4 - before initial commit, things added (-z)
ok 5 - make first commit, comfirm HEAD oid and branch
ok 6 - after first commit, create unstaged changes
ok 7 - after first commit but omit untracked files and branch
ok 8 - after first commit, stage existing changes
ok 9 - rename causes 2 path lines
ok 10 - rename causes 2 path lines (-z)
ok 11 - make second commit, confirm clean and new HEAD oid
ok 12 - confirm ignored files are not printed
ok 13 - ignored files are printed with --ignored
ok 14 - create and commit permanent ignore file
ok 15 - verify --intent-to-add output
ok 16 - verify AA (add-add) conflict
ok 17 - verify UU (edit-edit) conflict
ok 18 - verify upstream fields in branch header
ok 19 - verify --[no-]ahead-behind with V2 format
ok 20 - create and add submodule, submodule appears clean (A. S...)
ok 21 - untracked changes in added submodule (AM S..U)
ok 22 - staged changes in added submodule (AM S.M.)
ok 23 - staged and unstaged changes in added (AM S.M.)
ok 24 - staged and untracked changes in added submodule (AM S.MU)
ok 25 - commit within the submodule appears as new commit in super (AM SC..)
ok 26 - stage submodule in super and commit
ok 27 - make unstaged changes in existing submodule (.M S.M.)
# passed all 27 test(s)
1..27
*** t7101-reset-empty-subdirs.sh ***
ok 1 - creating initial files
ok 2 - creating second files
ok 3 - resetting tree HEAD^
ok 4 - checking initial files exist after rewind
ok 5 - checking lack of path1/path2/COPYING
ok 6 - checking lack of path1/COPYING
ok 7 - checking lack of COPYING
ok 8 - checking checking lack of path1/COPYING-TOO
ok 9 - checking lack of path1/path2
ok 10 - checking lack of path1
# passed all 10 test(s)
1..10
*** t7102-reset.sh ***
ok 1 - creating initial files and commits
ok 2 - reset --hard message
ok 3 - reset --hard message (ISO8859-1 logoutputencoding)
ok 4 - giving a non existing revision should fail
ok 5 - reset --soft with unmerged index should fail
ok 6 - giving paths with options different than --mixed should fail
ok 7 - giving unrecognized options should fail
ok 8 - trying to do reset --soft with pending merge should fail
ok 9 - trying to do reset --soft with pending checkout merge should fail
ok 10 - resetting to HEAD with no changes should succeed and do nothing
ok 11 - --soft reset only should show changes in diff --cached
ok 12 - changing files and redo the last commit should succeed
ok 13 - --hard reset should change the files and undo commits permanently
ok 14 - redoing changes adding them without commit them should succeed
ok 15 - --mixed reset to HEAD should unadd the files
ok 16 - redoing the last two commits should succeed
ok 17 - --hard reset to HEAD should clear a failed merge
ok 18 - --hard reset to ORIG_HEAD should clear a fast-forward merge
ok 19 - test --mixed <paths>
ok 20 - test resetting the index at give paths
ok 21 - resetting an unmodified path is a no-op
ok 22 - --mixed refreshes the index
ok 23 - resetting specific path that is unmerged
ok 24 - disambiguation (1)
ok 25 - disambiguation (2)
ok 26 - disambiguation (3)
ok 27 - disambiguation (4)
ok 28 - reset with paths accepts tree
ok 29 - reset -N keeps removed files as intent-to-add
ok 30 - reset --mixed sets up work tree
# passed all 30 test(s)
1..30
*** t7103-reset-bare.sh ***
ok 1 - setup non-bare
ok 2 - "hard" reset requires a worktree
ok 3 - "merge" reset requires a worktree
ok 4 - "keep" reset requires a worktree
ok 5 - "mixed" reset is ok
ok 6 - "soft" reset is ok
ok 7 - hard reset works with GIT_WORK_TREE
ok 8 - setup bare
ok 9 - "hard" reset is not allowed in bare
ok 10 - "merge" reset is not allowed in bare
ok 11 - "keep" reset is not allowed in bare
ok 12 - "mixed" reset is not allowed in bare
ok 13 - "soft" reset is allowed in bare
# passed all 13 test(s)
1..13
*** t7104-reset-hard.sh ***
ok 1 - setup
ok 2 - reset --hard should restore unmerged ones
ok 3 - reset --hard did not corrupt index or cached-tree
# passed all 3 test(s)
1..3
*** t7105-reset-patch.sh ***
ok 1 - setup
ok 2 - saying "n" does nothing
ok 3 - git reset -p
ok 4 - git reset -p HEAD^
ok 5 - git reset -p dir
ok 6 - git reset -p -- foo (inside dir)
ok 7 - git reset -p HEAD^ -- dir
ok 8 - none of this moved HEAD
# passed all 8 test(s)
1..8
*** t7106-reset-unborn-branch.sh ***
ok 1 - setup
ok 2 - reset
ok 3 - reset HEAD
ok 4 - reset $file
ok 5 - reset -p
ok 6 - reset --soft is a no-op
ok 7 - reset --hard
# passed all 7 test(s)
1..7
*** t7110-reset-merge.sh ***
ok 1 - setup
ok 2 - reset --merge is ok with changes in file it does not touch
ok 3 - reset --merge is ok when switching back
ok 4 - reset --keep is ok with changes in file it does not touch
ok 5 - reset --keep is ok when switching back
ok 6 - reset --merge discards changes added to index (1)
ok 7 - reset --merge is ok again when switching back (1)
ok 8 - reset --keep fails with changes in index in files it touches
ok 9 - reset --merge discards changes added to index (2)
ok 10 - reset --merge is ok again when switching back (2)
ok 11 - reset --keep keeps changes it does not touch
ok 12 - reset --keep keeps changes when switching back
ok 13 - reset --merge fails with changes in file it touches
ok 14 - reset --keep fails with changes in file it touches
ok 15 - setup 3 different branches
ok 16 - "reset --merge HEAD^" is ok with pending merge
ok 17 - "reset --keep HEAD^" fails with pending merge
ok 18 - "reset --merge HEAD" is ok with pending merge
ok 19 - "reset --keep HEAD" fails with pending merge
ok 20 - --merge is ok with added/deleted merge
ok 21 - --keep fails with added/deleted merge
# passed all 21 test(s)
1..21
*** t7111-reset-table.sh ***
ok 1 - creating initial commits
ok 2 - check: A B C D --soft A B D
ok 3 - check: A B C D --mixed A D D
ok 4 - check: A B C D --hard D D D
ok 5 - check: A B C D --merge XXXXX  
ok 6 - check: A B C D --keep XXXXX  
ok 7 - check: A B C C --soft A B C
ok 8 - check: A B C C --mixed A C C
ok 9 - check: A B C C --hard C C C
ok 10 - check: A B C C --merge XXXXX  
ok 11 - check: A B C C --keep A C C
ok 12 - check: B B C D --soft B B D
ok 13 - check: B B C D --mixed B D D
ok 14 - check: B B C D --hard D D D
ok 15 - check: B B C D --merge D D D
ok 16 - check: B B C D --keep XXXXX  
ok 17 - check: B B C C --soft B B C
ok 18 - check: B B C C --mixed B C C
ok 19 - check: B B C C --hard C C C
ok 20 - check: B B C C --merge C C C
ok 21 - check: B B C C --keep B C C
ok 22 - check: B C C D --soft B C D
ok 23 - check: B C C D --mixed B D D
ok 24 - check: B C C D --hard D D D
ok 25 - check: B C C D --merge XXXXX  
ok 26 - check: B C C D --keep XXXXX  
ok 27 - check: B C C C --soft B C C
ok 28 - check: B C C C --mixed B C C
ok 29 - check: B C C C --hard C C C
ok 30 - check: B C C C --merge B C C
ok 31 - check: B C C C --keep B C C
ok 32 - setting up branches to test with unmerged entries
ok 33 - check: X U B C --soft XXXXX  
ok 34 - check: X U B C --mixed X C C
ok 35 - check: X U B C --hard C C C
ok 36 - check: X U B C --merge C C C
ok 37 - check: X U B C --keep XXXXX  
ok 38 - check: X U B B --soft XXXXX  
ok 39 - check: X U B B --mixed X B B
ok 40 - check: X U B B --hard B B B
ok 41 - check: X U B B --merge B B B
ok 42 - check: X U B B --keep XXXXX  
# passed all 42 test(s)
1..42
*** t7112-reset-submodule.sh ***
ok 1 - git reset --keep --recurse-submodules: added submodule is checked out
ok 2 - git reset --keep --recurse-submodules: added submodule is checked out in empty dir
ok 3 - git reset --keep --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 4 - git reset --keep --recurse-submodules: replace tracked file with submodule checks out submodule
ok 5 - git reset --keep --recurse-submodules: replace directory with submodule
ok 6 - git reset --keep --recurse-submodules: removed submodule removes submodules working tree
ok 7 - git reset --keep --recurse-submodules: removed submodule absorbs submodules .git directory
ok 8 - git reset --keep --recurse-submodules: replace submodule with a file
not ok 9 - git reset --keep --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 10 - git reset --keep --recurse-submodules: modified submodule updates submodule work tree
ok 11 - git reset --keep --recurse-submodules: updating to a missing submodule commit fails
ok 12 - git reset --keep --recurse-submodules: added submodule doesn't remove untracked file with same name
not ok 13 - git reset --keep --recurse-submodules: added submodule removes an untracked ignored file # TODO known breakage
not ok 14 - git reset --keep --recurse-submodules: replace submodule with a directory # TODO known breakage
not ok 15 - git reset --keep --recurse-submodules: replace submodule containing a .git directory with a directory must absorb the git dir # TODO known breakage
ok 16 - git reset --keep --recurse-submodules: replace submodule with a file works ignores ignored files in submodule
ok 17 - git -c submodule.recurse=true reset --keep: modified submodule updates submodule work tree
ok 18 - git reset --keep --recurse-submodules: modified submodule updates submodule recursively
ok 19 - git reset --hard --recurse-submodules: added submodule is checked out
ok 20 - git reset --hard --recurse-submodules: added submodule is checked out in empty dir
ok 21 - git reset --hard --recurse-submodules: submodule branch is not changed, detach HEAD instead
ok 22 - git reset --hard --recurse-submodules: replace tracked file with submodule checks out submodule
ok 23 - git reset --hard --recurse-submodules: replace directory with submodule
ok 24 - git reset --hard --recurse-submodules: removed submodule removes submodules working tree
ok 25 - git reset --hard --recurse-submodules: removed submodule absorbs submodules .git directory
ok 26 - git reset --hard --recurse-submodules: replace submodule with a file
not ok 27 - git reset --hard --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage
ok 28 - git reset --hard --recurse-submodules: modified submodule updates submodule work tree
ok 29 - git reset --hard --recurse-submodules: updating to a missing submodule commit fails
ok 30 - git reset --hard --recurse-submodules: added submodule does remove untracked unignored file with same name when forced
ok 31 - git reset --hard --recurse-submodules: replace submodule with a directory
ok 32 - git reset --hard --recurse-submodules: replace submodule containing a .git directory with a directory must fail
ok 33 - git reset --hard --recurse-submodules: replace submodule with a file ignoring ignored files
ok 34 - git reset --hard --recurse-submodules: modified submodule does update submodule work tree from invalid commit
ok 35 - git reset --hard --recurse-submodules: updating submodules fixes .git links
ok 36 - git reset --hard --recurse-submodules: changed submodule worktree is reset
ok 37 - git reset --keep: added submodule creates empty directory
ok 38 - git reset --keep: added submodule leaves existing empty directory alone
ok 39 - git reset --keep: replace tracked file with submodule creates empty directory
ok 40 - git reset --keep: replace directory with submodule
ok 41 - git reset --keep: removed submodule leaves submodule directory and its contents in place
ok 42 - git reset --keep: removed submodule leaves submodule containing a .git directory alone
ok 43 - git reset --keep: replace submodule with a directory must fail
ok 44 - git reset --keep: replace submodule containing a .git directory with a directory must fail
not ok 45 - git reset --keep: replace submodule with a file must fail # TODO known breakage
not ok 46 - git reset --keep: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 47 - git reset --keep: modified submodule does not update submodule work tree
ok 48 - git reset --keep: modified submodule does not update submodule work tree to invalid commit
ok 49 - git reset --keep: modified submodule does not update submodule work tree from invalid commit
ok 50 - git reset --keep: added submodule doesn't remove untracked unignored file with same name
ok 51 - git reset --merge: added submodule creates empty directory
ok 52 - git reset --merge: added submodule leaves existing empty directory alone
ok 53 - git reset --merge: replace tracked file with submodule creates empty directory
ok 54 - git reset --merge: replace directory with submodule
ok 55 - git reset --merge: removed submodule leaves submodule directory and its contents in place
ok 56 - git reset --merge: removed submodule leaves submodule containing a .git directory alone
ok 57 - git reset --merge: replace submodule with a directory must fail
ok 58 - git reset --merge: replace submodule containing a .git directory with a directory must fail
not ok 59 - git reset --merge: replace submodule with a file must fail # TODO known breakage
not ok 60 - git reset --merge: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 61 - git reset --merge: modified submodule does not update submodule work tree
ok 62 - git reset --merge: modified submodule does not update submodule work tree to invalid commit
ok 63 - git reset --merge: modified submodule does not update submodule work tree from invalid commit
ok 64 - git reset --merge: added submodule doesn't remove untracked unignored file with same name
ok 65 - git reset --hard: added submodule creates empty directory
ok 66 - git reset --hard: added submodule leaves existing empty directory alone
ok 67 - git reset --hard: replace tracked file with submodule creates empty directory
ok 68 - git reset --hard: replace directory with submodule
ok 69 - git reset --hard: removed submodule leaves submodule directory and its contents in place
ok 70 - git reset --hard: removed submodule leaves submodule containing a .git directory alone
not ok 71 - git reset --hard: replace submodule with a directory must fail # TODO known breakage
not ok 72 - git reset --hard: replace submodule containing a .git directory with a directory must fail # TODO known breakage
not ok 73 - git reset --hard: replace submodule with a file must fail # TODO known breakage
not ok 74 - git reset --hard: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 75 - git reset --hard: modified submodule does not update submodule work tree
ok 76 - git reset --hard: modified submodule does not update submodule work tree to invalid commit
ok 77 - git reset --hard: modified submodule does not update submodule work tree from invalid commit
ok 78 - git reset --hard: added submodule does remove untracked unignored file with same name when forced
# still have 13 known breakage(s)
# passed all remaining 65 test(s)
1..78
*** t7201-co.sh ***
ok 1 - setup
ok 2 - checkout from non-existing branch
ok 3 - checkout with dirty tree without -m
ok 4 - checkout with unrelated dirty tree without -m
ok 5 - checkout -m with dirty tree
ok 6 - checkout -m with dirty tree, renamed
ok 7 - checkout -m with merge conflict
ok 8 - format of merge conflict from checkout -m
ok 9 - checkout --merge --conflict=diff3 <branch>
ok 10 - switch to another branch while carrying a deletion
ok 11 - checkout to detach HEAD (with advice declined)
ok 12 - checkout to detach HEAD
ok 13 - checkout to detach HEAD with branchname^
ok 14 - checkout to detach HEAD with :/message
ok 15 - checkout to detach HEAD with HEAD^0
ok 16 - checkout with ambiguous tag/branch names
ok 17 - checkout with ambiguous tag/branch names
ok 18 - switch branches while in subdirectory
ok 19 - checkout specific path while in subdirectory
ok 20 - checkout w/--track sets up tracking
ok 21 - checkout w/autosetupmerge=always sets up tracking
ok 22 - checkout w/--track from non-branch HEAD fails
ok 23 - checkout w/--track from tag fails
ok 24 - detach a symbolic link HEAD
ok 25 - checkout with --track fakes a sensible -b <name>
ok 26 - checkout with --track, but without -b, fails with too short tracked name
ok 27 - checkout an unmerged path should fail
ok 28 - checkout with an unmerged path can be ignored
ok 29 - checkout unmerged stage
ok 30 - checkout with --merge
ok 31 - checkout with --merge, in diff3 -m style
ok 32 - checkout --conflict=merge, overriding config
ok 33 - checkout --conflict=diff3
ok 34 - failing checkout -b should not break working tree
ok 35 - switch out of non-branch
ok 36 - custom merge driver with checkout -m
# passed all 36 test(s)
1..36
*** t7300-clean.sh ***
ok 1 - setup
ok 2 - git clean with skip-worktree .gitignore
ok 3 - git clean
ok 4 - git clean src/
ok 5 - git clean src/ src/
ok 6 - git clean with prefix
ok 7 - git clean with relative prefix
ok 8 - git clean with absolute path
ok 9 - git clean with out of work tree relative path
ok 10 - git clean with out of work tree absolute path
ok 11 - git clean -d with prefix and path
ok 12 - git clean symbolic link
ok 13 - git clean with wildcard
ok 14 - git clean -n
ok 15 - git clean -d
ok 16 - git clean -d src/ examples/
ok 17 - git clean -x
ok 18 - git clean -d -x
ok 19 - git clean -d -x with ignored tracked directory
ok 20 - git clean -X
ok 21 - git clean -d -X
ok 22 - git clean -d -X with ignored tracked directory
ok 23 - clean.requireForce defaults to true
ok 24 - clean.requireForce
ok 25 - clean.requireForce and -n
ok 26 - clean.requireForce and -f
ok 27 - core.excludesfile
ok 28 - removal failure
ok 29 - nested git work tree
ok 30 - should clean things that almost look like git but are not
ok 31 - should not clean submodules
ok 32 - should avoid cleaning possible submodules
ok 33 - nested (empty) git should be kept
ok 34 - nested bare repositories should be cleaned
not ok 35 - nested (empty) bare repositories should be cleaned even when in .git # TODO known breakage
not ok 36 - nested (non-empty) bare repositories should be cleaned even when in .git # TODO known breakage
ok 37 - giving path in nested git work tree will remove it
ok 38 - giving path to nested .git will not remove it
ok 39 - giving path to nested .git/ will remove contents
ok 40 - force removal of nested git work tree
ok 41 - git clean -e
ok 42 - git clean -d with an unreadable empty directory
ok 43 - git clean -d respects pathspecs (dir is prefix of pathspec)
ok 44 - git clean -d respects pathspecs (pathspec is prefix of dir)
ok 45 - git clean -d skips untracked dirs containing ignored files
# still have 2 known breakage(s)
# passed all remaining 43 test(s)
1..45
*** t7301-clean-interactive.sh ***
ok 1 - setup
ok 2 - git clean -i (c: clean hotkey)
ok 3 - git clean -i (cl: clean prefix)
ok 4 - git clean -i (quit)
ok 5 - git clean -i (Ctrl+D)
ok 6 - git clean -id (filter all)
ok 7 - git clean -id (filter patterns)
ok 8 - git clean -id (filter patterns 2)
ok 9 - git clean -id (select - all)
ok 10 - git clean -id (select - none)
ok 11 - git clean -id (select - number)
ok 12 - git clean -id (select - number 2)
ok 13 - git clean -id (select - number 3)
ok 14 - git clean -id (select - filenames)
ok 15 - git clean -id (select - range)
ok 16 - git clean -id (select - range 2)
ok 17 - git clean -id (inverse select)
ok 18 - git clean -id (ask)
ok 19 - git clean -id (ask - Ctrl+D)
ok 20 - git clean -id with prefix and path (filter)
ok 21 - git clean -id with prefix and path (select by name)
ok 22 - git clean -id with prefix and path (ask)
ok 23 # skip git clean -i paints the header in HEADER color (missing TTY)
# passed all 23 test(s)
1..23
*** t7400-submodule-basic.sh ***
ok 1 - submodule deinit works on empty repository
ok 2 - setup - initial commit
ok 3 - submodule init aborts on missing .gitmodules file
ok 4 - submodule update aborts on missing .gitmodules file
ok 5 - submodule update aborts on missing gitmodules url
ok 6 - setup - repository in init subdirectory
ok 7 - setup - commit with gitlink
ok 8 - setup - hide init subdirectory
ok 9 - setup - repository to add submodules to
ok 10 - submodule add
ok 11 - setup parent and one repository
ok 12 - redirected submodule add does not show progress
ok 13 - redirected submodule add --progress does show progress
ok 14 - submodule add to .gitignored path fails
ok 15 - submodule add to .gitignored path with --force
ok 16 - submodule add to reconfigure existing submodule with --force
ok 17 - submodule add --branch
ok 18 - submodule add with ./ in path
ok 19 - submodule add with /././ in path
ok 20 - submodule add with // in path
ok 21 - submodule add with /.. in path
ok 22 - submodule add with ./, /.. and // in path
ok 23 - submodule add with \\ in path
ok 24 - submodule add in subdirectory
ok 25 - submodule add in subdirectory with relative path should fail
ok 26 - setup - add an example entry to .gitmodules
ok 27 - status should fail for unmapped paths
ok 28 - setup - map path in .gitmodules
ok 29 - status should only print one line
ok 30 - setup - fetch commit name from submodule
ok 31 - status should initially be "missing"
ok 32 - init should register submodule url in .git/config
ok 33 - init should fail with unknown submodule
ok 34 - update should fail with unknown submodule
ok 35 - status should fail with unknown submodule
ok 36 - sync should fail with unknown submodule
ok 37 - update should fail when path is used by a file
ok 38 - update should fail when path is used by a nonempty directory
ok 39 - update should work when path is an empty dir
ok 40 - status should be "up-to-date" after update
ok 41 - status "up-to-date" from subdirectory
ok 42 - status "up-to-date" from subdirectory with path
ok 43 - status should be "modified" after submodule commit
ok 44 - the --cached sha1 should be rev1
ok 45 - git diff should report the SHA1 of the new submodule commit
ok 46 - update should checkout rev1
ok 47 - status should be "up-to-date" after update
ok 48 - checkout superproject with subproject already present
ok 49 - apply submodule diff
ok 50 - update --init
ok 51 - update --init from subdirectory
ok 52 - do not add files from a submodule
ok 53 - gracefully add/reset submodule with a trailing slash
ok 54 - ls-files gracefully handles trailing slash
ok 55 - moving to a commit without submodule does not leave empty dir
ok 56 - submodule <invalid-subcommand> fails
ok 57 - add submodules without specifying an explicit path
ok 58 - add should fail when path is used by a file
ok 59 - add should fail when path is used by an existing directory
ok 60 - use superproject as upstream when path is relative and no url is set there
ok 61 - set up for relative path tests
ok 62 - ../subrepo works with URL - ssh://hostname/repo
ok 63 - ../subrepo works with port-qualified URL - ssh://hostname:22/repo
ok 64 - ../subrepo path works with local path - //somewhere else/repo
ok 65 - ../subrepo works with file URL - file:///tmp/repo
ok 66 - ../subrepo works with helper URL- helper:://hostname/repo
ok 67 - ../subrepo works with scp-style URL - user@host:repo
ok 68 - ../subrepo works with scp-style URL - user@host:path/to/repo
ok 69 - ../subrepo works with relative local path - foo
ok 70 - ../subrepo works with relative local path - foo/bar
ok 71 - ../subrepo works with relative local path - ./foo
ok 72 - ../subrepo works with relative local path - ./foo/bar
ok 73 - ../subrepo works with relative local path - ../foo
ok 74 - ../subrepo works with relative local path - ../foo/bar
ok 75 - ../bar/a/b/c works with relative local path - ../foo/bar.git
ok 76 - moving the superproject does not break submodules
ok 77 - moving the submodule does not break the superproject
ok 78 - submodule add --name allows to replace a submodule with another at the same path
ok 79 - recursive relative submodules stay relative
ok 80 - submodule add with an existing name fails unless forced
ok 81 - set up a second submodule
ok 82 - submodule deinit works on repository without submodules
ok 83 - submodule deinit should remove the whole submodule section from .git/config
ok 84 - submodule deinit from subdirectory
ok 85 - submodule deinit . deinits all initialized submodules
ok 86 - submodule deinit --all deinits all initialized submodules
ok 87 - submodule deinit deinits a submodule when its work tree is missing or empty
ok 88 - submodule deinit fails when the submodule contains modifications unless forced
ok 89 - submodule deinit fails when the submodule contains untracked files unless forced
ok 90 - submodule deinit fails when the submodule HEAD does not match unless forced
ok 91 - submodule deinit is silent when used on an uninitialized submodule
ok 92 - submodule deinit fails when submodule has a .git directory even when forced
ok 93 - submodule with UTF-8 name
ok 94 - submodule add clone shallow submodule
ok 95 - submodule helper list is not confused by common prefixes
ok 96 - setup superproject with submodules
ok 97 - submodule update --init with a specification
ok 98 - submodule update --init with submodule.active set
ok 99 - submodule update and setting submodule.<name>.active
ok 100 - clone --recurse-submodules with a pathspec works
ok 101 - clone with multiple --recurse-submodules options
ok 102 - clone and subsequent updates correctly auto-initialize submodules
ok 103 - init properly sets the config
ok 104 - recursive clone respects -q
# passed all 104 test(s)
1..104
*** t7401-submodule-summary.sh ***
ok 1 - added submodule
ok 2 - added submodule (subdirectory)
ok 3 - added submodule (subdirectory only)
ok 4 - added submodule (subdirectory with explicit path)
ok 5 - modified submodule(forward)
ok 6 - modified submodule(forward), --files
ok 7 - no ignore=all setting has any effect
ok 8 - modified submodule(backward)
ok 9 - modified submodule(backward and forward)
ok 10 - --summary-limit
ok 11 - typechanged submodule(submodule->blob), --cached
ok 12 - typechanged submodule(submodule->blob), --files
ok 13 - typechanged submodule(submodule->blob)
ok 14 - nonexistent commit
ok 15 - typechanged submodule(blob->submodule)
ok 16 - deleted submodule
ok 17 - create second submodule
ok 18 - multiple submodules
ok 19 - path filter
ok 20 - given commit
ok 21 - --for-status
ok 22 - fail when using --files together with --cached
ok 23 - should not fail in an empty repo
# passed all 23 test(s)
1..23
*** t7402-submodule-rebase.sh ***
ok 1 - setup
ok 2 - rebase with a dirty submodule
ok 3 - interactive rebase with a dirty submodule
ok 4 - rebase with dirty file and submodule fails
ok 5 - stash with a dirty submodule
ok 6 - rebasing submodule that should conflict
# passed all 6 test(s)
1..6
*** t7403-submodule-sync.sh ***
ok 1 - setup
ok 2 - change submodule
ok 3 - change submodule url
ok 4 - "git submodule sync" should update submodule URLs
ok 5 - "git submodule sync --recursive" should update all submodule URLs
ok 6 - reset submodule URLs
ok 7 - "git submodule sync" should update submodule URLs - subdirectory
ok 8 - "git submodule sync --recursive" should update all submodule URLs - subdirectory
ok 9 - "git submodule sync" should update known submodule URLs
ok 10 - "git submodule sync" should not vivify uninteresting submodule
ok 11 - "git submodule sync" handles origin URL of the form foo
ok 12 - "git submodule sync" handles origin URL of the form foo/bar
ok 13 - "git submodule sync --recursive" propagates changes in origin
ok 14 - "git submodule sync" handles origin URL of the form ./foo
ok 15 - "git submodule sync" handles origin URL of the form ./foo/bar
ok 16 - "git submodule sync" handles origin URL of the form ../foo
ok 17 - "git submodule sync" handles origin URL of the form ../foo/bar
ok 18 - "git submodule sync" handles origin URL of the form ../foo/bar with deeply nested submodule
# passed all 18 test(s)
1..18
*** t7405-submodule-merge.sh ***
ok 1 - setup
ok 2 - setup for merge search
ok 3 - merge with one side as a fast-forward of the other
ok 4 - merging should conflict for non fast-forward
ok 5 - merging should fail for ambiguous common parent
ok 6 - merging should fail for changes that are backwards
ok 7 - git submodule status should display the merge conflict properly with merge base
ok 8 - git submodule status should display the merge conflict properly without merge-base
ok 9 - merging with a modify/modify conflict between merge bases
ok 10 - setup for recursive merge with submodule
ok 11 - recursive merge with submodule
ok 12 - setup file/submodule conflict
not ok 13 - file/submodule conflict # TODO known breakage
ok 14 - file/submodule conflict; merge --abort works afterward
ok 15 - setup directory/submodule conflict
not ok 16 - directory/submodule conflict; keep submodule clean # TODO known breakage
not ok 17 - directory/submodule conflict; should not treat submodule files as untracked or in the way # TODO known breakage
not ok 18 - directory/submodule conflict; merge --abort works afterward # TODO known breakage
# still have 4 known breakage(s)
# passed all remaining 14 test(s)
1..18
*** t7406-submodule-update.sh ***
ok 1 - setup a submodule tree
ok 2 - submodule update detaching the HEAD 
ok 3 - submodule update from subdirectory
ok 4 - submodule update --init --recursive from subdirectory
ok 5 - submodule update --init from and of subdirectory
ok 6 - submodule update does not fetch already present commits
ok 7 - submodule update should fail due to local changes
ok 8 - submodule update should throw away changes with --force 
ok 9 - submodule update --force forcibly checks out submodules
ok 10 - submodule update --remote should fetch upstream changes
ok 11 - submodule update --remote should fetch upstream changes with .
ok 12 - local config should override .gitmodules branch
ok 13 - submodule update --rebase staying on master
ok 14 - submodule update --merge staying on master
ok 15 - submodule update - rebase in .git/config
ok 16 - submodule update - checkout in .git/config but --rebase given
ok 17 - submodule update - merge in .git/config
ok 18 - submodule update - checkout in .git/config but --merge given
ok 19 - submodule update - checkout in .git/config
ok 20 - submodule update - command in .git/config
ok 21 - submodule update - command in .gitmodules is ignored
ok 22 - submodule update - command in .git/config catches failure
ok 23 - submodule update - command in .git/config catches failure -- subdirectory
ok 24 - submodule update - command run for initial population of submodule
ok 25 - recursive submodule update - command in .git/config catches failure -- subdirectory
ok 26 - submodule init does not copy command into .git/config
ok 27 - submodule init picks up rebase
ok 28 - submodule init picks up merge
ok 29 - submodule update --merge  - ignores --merge  for new submodules
ok 30 - submodule update --rebase - ignores --rebase for new submodules
ok 31 - submodule update ignores update=merge config for new submodules
ok 32 - submodule update ignores update=rebase config for new submodules
ok 33 - submodule init picks up update=none
ok 34 - submodule update - update=none in .git/config
ok 35 - submodule update - update=none in .git/config but --checkout given
ok 36 - submodule update --init skips submodule with update=none
ok 37 - submodule update continues after checkout error
ok 38 - submodule update continues after recursive checkout error
ok 39 - submodule update exit immediately in case of merge conflict
ok 40 - submodule update exit immediately after recursive rebase error
ok 41 - add different submodules to the same path
ok 42 - submodule add places git-dir in superprojects git-dir
ok 43 - submodule update places git-dir in superprojects git-dir
ok 44 - submodule add places git-dir in superprojects git-dir recursive
ok 45 - submodule update places git-dir in superprojects git-dir recursive
ok 46 - submodule add properly re-creates deeper level submodules
ok 47 - submodule update properly revives a moved submodule
ok 48 - submodule update can handle symbolic links in pwd
ok 49 - submodule update clone shallow submodule
ok 50 - submodule update clone shallow submodule outside of depth
ok 51 - submodule update --recursive drops module name before recursing
ok 52 - submodule update can be run in parallel
ok 53 - git clone passes the parallel jobs config on to submodules
# passed all 53 test(s)
1..53
*** t7407-submodule-foreach.sh ***
ok 1 - setup a submodule tree
ok 2 - test basic "submodule foreach" usage
ok 3 - test "submodule foreach" from subdirectory
ok 4 - setup nested submodules
ok 5 - use "submodule foreach" to checkout 2nd level submodule
ok 6 - use "foreach --recursive" to checkout all submodules
ok 7 - test messages from "foreach --recursive"
ok 8 - test messages from "foreach --recursive" from subdirectory
ok 9 - test "submodule foreach --recursive" from subdirectory
ok 10 - test "foreach --quiet --recursive"
ok 11 - use "update --recursive" to checkout all submodules
ok 12 - test "status --recursive"
ok 13 - ensure "status --cached --recursive" preserves the --cached flag
ok 14 - test "status --recursive" from sub directory
ok 15 - use "git clone --recursive" to checkout all submodules
ok 16 - test "update --recursive" with a flag with spaces
ok 17 - use "update --recursive nested1" to checkout all submodules rooted in nested1
ok 18 - command passed to foreach retains notion of stdin
ok 19 - command passed to foreach --recursive retains notion of stdin
ok 20 - multi-argument command passed to foreach is not shell-evaluated twice
# passed all 20 test(s)
1..20
*** t7408-submodule-reference.sh ***
ok 1 - preparing first repository
ok 2 - preparing second repository
ok 3 - preparing superproject
ok 4 - submodule add --reference uses alternates
ok 5 - submodule add --reference with --dissociate does not use alternates
ok 6 - that reference gets used with add
ok 7 - updating superproject keeps alternates
ok 8 - updating superproject with --dissociate does not keep alternates
ok 9 - submodules use alternates when cloning a superproject
ok 10 - missing submodule alternate fails clone and submodule update
ok 11 - ignoring missing submodule alternates passes clone and submodule update
ok 12 - preparing second superproject with a nested submodule plus partial clone
ok 13 - nested submodule alternate in works and is actually used
ok 14 - missing nested submodule alternate fails clone and submodule update
ok 15 - missing nested submodule alternate in --reference-if-able mode
# passed all 15 test(s)
1..15
*** t7409-submodule-detached-work-tree.sh ***
ok 1 - submodule on detached working tree
ok 2 - submodule on detached working pointed by core.worktree
# passed all 2 test(s)
1..2
*** t7410-submodule-checkout-to.sh ***
ok 1 - setup: make origin
ok 2 - setup: clone
ok 3 - checkout main
not ok 4 - can see submodule diffs just after checkout # TODO known breakage
ok 5 - checkout main and initialize independent clones
ok 6 - can see submodule diffs after independent cloning
ok 7 - checkout sub manually
ok 8 - can see submodule diffs after manual checkout of linked submodule
# still have 1 known breakage(s)
# passed all remaining 7 test(s)
1..8
*** t7411-submodule-config.sh ***
ok 1 - submodule config cache setup
ok 2 - configuration parsing with error
ok 3 - test parsing and lookup of submodule config by path
ok 4 - test parsing and lookup of submodule config by name
ok 5 - error in one submodule config lets continue
ok 6 - error message contains blob reference
ok 7 - using different treeishs works
ok 8 - error in history in fetchrecursesubmodule lets continue
# passed all 8 test(s)
1..8
*** t7412-submodule-absorbgitdirs.sh ***
ok 1 - setup a real submodule
ok 2 - absorb the git dir
ok 3 - absorbing does not fail for deinitialized submodules
ok 4 - setup nested submodule
ok 5 - absorb the git dir in a nested submodule
ok 6 - re-setup nested submodule
ok 7 - absorb the git dir in a nested submodule
ok 8 - setup a gitlink with missing .gitmodules entry
ok 9 - absorbing the git dir fails for incomplete submodules
ok 10 - setup a submodule with multiple worktrees
ok 11 - absorbing fails for a submodule with multiple worktrees
# passed all 11 test(s)
1..11
*** t7413-submodule-is-active.sh ***
ok 1 - setup
ok 2 - is-active works with urls
ok 3 - is-active works with submodule.<name>.active config
ok 4 - is-active works with basic submodule.active config
ok 5 - is-active correctly works with paths that are not submodules
ok 6 - is-active works with exclusions in submodule.active config
ok 7 - is-active with submodule.active and submodule.<name>.active
ok 8 - is-active, submodule.active and submodule add
# passed all 8 test(s)
1..8
*** t7414-submodule-mistakes.sh ***
ok 1 - create embedded repository
ok 2 - git-add on embedded repository warns
ok 3 - --no-warn-embedded-repo suppresses warning
ok 4 - no warning when updating entry
ok 5 - submodule add does not warn
# passed all 5 test(s)
1..5
*** t7415-submodule-names.sh ***
ok 1 - check names
ok 2 - create innocent subrepo
ok 3 - submodule add refuses invalid names
ok 4 - add evil submodule
ok 5 - add other submodule
ok 6 - clone evil superproject
ok 7 - fsck detects evil superproject
ok 8 - transfer.fsckObjects detects evil superproject (unpack)
ok 9 - transfer.fsckObjects detects evil superproject (index)
ok 10 - create oddly ordered pack
ok 11 - transfer.fsckObjects handles odd pack (unpack)
ok 12 - transfer.fsckObjects handles odd pack (index)
ok 13 - index-pack --strict works for non-repo pack
ok 14 - fsck detects symlinked .gitmodules file
ok 15 - fsck detects non-blob .gitmodules
ok 16 - fsck detects corrupt .gitmodules
# passed all 16 test(s)
1..16
*** t7416-submodule-dash-url.sh ***
ok 1 - create submodule with protected dash in url
ok 2 - clone can recurse submodule
ok 3 - fsck accepts protected dash
ok 4 - remove ./ protection from .gitmodules url
ok 5 - clone rejects unprotected dash
ok 6 - fsck rejects unprotected dash
# passed all 6 test(s)
1..6
*** t7417-submodule-path-url.sh ***
ok 1 - create submodule with dash in path
ok 2 - clone rejects unprotected dash
ok 3 - fsck rejects unprotected dash
# passed all 3 test(s)
1..3
*** t7500-commit.sh ***
ok 1 - a basic commit in an empty tree should succeed
ok 2 - nonexistent template file should return error
ok 3 - nonexistent template file in config should return error
ok 4 - unedited template should not commit
ok 5 - unedited template with comments should not commit
ok 6 - a Signed-off-by line by itself should not commit
ok 7 - adding comments to a template should not commit
ok 8 - adding real content to a template should commit
ok 9 - -t option should be short for --template
ok 10 - config-specified template should commit
ok 11 - explicit commit message should override template
ok 12 - commit message from file should override template
ok 13 - commit message from template with whitespace issue
ok 14 - using alternate GIT_INDEX_FILE (1)
ok 15 - using alternate GIT_INDEX_FILE (2)
ok 16 - --signoff
ok 17 - commit message from file (1)
ok 18 - commit message from file (2)
ok 19 - commit message from stdin
ok 20 - commit -F overrides -t
ok 21 - Commit without message is allowed with --allow-empty-message
ok 22 - Commit without message is no-no without --allow-empty-message
ok 23 - Commit a message with --allow-empty-message
ok 24 - commit -C empty respects --allow-empty-message
ok 25 - commit --fixup provides correct one-line commit message
ok 26 - commit --fixup -m"something" -m"extra"
ok 27 - commit --squash works with -F
ok 28 - commit --squash works with -m
ok 29 - commit --squash works with -C
ok 30 - commit --squash works with -c
ok 31 - commit --squash works with -C for same commit
ok 32 - commit --squash works with -c for same commit
ok 33 - commit --squash works with editor
ok 34 - invalid message options when using --fixup
ok 35 - new line found before status message in commit template
# passed all 35 test(s)
1..35
*** t7501-commit.sh ***
ok 1 - initial status
ok 2 - fail initial amend
ok 3 - setup: initial commit
ok 4 - -m and -F do not mix
ok 5 - -m and -C do not mix
ok 6 - paths and -a do not mix
ok 7 - can use paths with --interactive
ok 8 - removed files and relative paths
ok 9 - using invalid commit with -C
ok 10 - nothing to commit
ok 11 - --dry-run fails with nothing to commit
ok 12 - --short fails with nothing to commit
ok 13 - --porcelain fails with nothing to commit
ok 14 - --long fails with nothing to commit
ok 15 - setup: non-initial commit
ok 16 - --dry-run with stuff to commit returns ok
not ok 17 - --short with stuff to commit returns ok # TODO known breakage
not ok 18 - --porcelain with stuff to commit returns ok # TODO known breakage
ok 19 - --long with stuff to commit returns ok
ok 20 - commit message from non-existing file
ok 21 - empty commit message
ok 22 - template "emptyness" check does not kick in with -F
ok 23 - template "emptyness" check
ok 24 - setup: commit message from file
ok 25 - amend commit
ok 26 - amend --only ignores staged contents
ok 27 - allow-empty --only ignores staged contents
ok 28 - set up editor
ok 29 - amend without launching editor
ok 30 - --amend --edit
ok 31 - --amend --edit of empty message
ok 32 - --amend to set message to empty
ok 33 - --amend to set empty message needs --allow-empty-message
ok 34 - -m --edit
ok 35 - -m and -F do not mix
ok 36 - using message from other commit
ok 37 - editing message from other commit
ok 38 - message from stdin
ok 39 - overriding author from command line
ok 40 - interactive add
ok 41 - commit --interactive doesn't change index if editor aborts
ok 42 - editor not invoked if -F is given
ok 43 - partial commit that involves removal (1)
ok 44 - partial commit that involves removal (2)
ok 45 - partial commit that involves removal (3)
ok 46 - amend commit to fix author
ok 47 - amend commit to fix date
ok 48 - commit mentions forced date in output
ok 49 - commit complains about completely bogus dates
ok 50 - commit --date allows approxidate
ok 51 - sign off (1)
ok 52 - sign off (2)
ok 53 - signoff gap
ok 54 - signoff gap 2
ok 55 - signoff respects trailer config
ok 56 - multiple -m
ok 57 - amend commit to fix author
ok 58 - git commit <file> with dirty index
ok 59 - same tree (single parent)
ok 60 - same tree (single parent) --allow-empty
ok 61 - same tree (merge and amend merge)
ok 62 - amend using the message from another commit
ok 63 - amend using the message from a commit named with tag
ok 64 - amend can copy notes
ok 65 - commit a file whose name is a dash
ok 66 - --only works on to-be-born branch
ok 67 - --dry-run with conflicts fixed from a merge
# still have 2 known breakage(s)
# passed all remaining 65 test(s)
1..67
*** t7502-commit.sh ***
ok 1 - output summary format
ok 2 - output summary format: root-commit
ok 3 - output summary format for commit with an empty diff
ok 4 - output summary format for merges
ok 5 - the basics
ok 6 - partial
ok 7 - partial modification in a subdirectory
ok 8 - partial removal
ok 9 - sign off
ok 10 - multiple -m
ok 11 - verbose
ok 12 - verbose respects diff config
ok 13 - prepare file with comment line and trailing newlines
ok 14 - cleanup commit messages (verbatim option,-t)
ok 15 - cleanup commit messages (verbatim option,-F)
ok 16 - cleanup commit messages (verbatim option,-m)
ok 17 - cleanup commit messages (whitespace option,-F)
ok 18 - cleanup commit messages (scissors option,-F,-e)
ok 19 - cleanup commit messages (scissors option,-F,-e, scissors on first line)
ok 20 - cleanup commit messages (strip option,-F)
ok 21 - cleanup commit messages (strip option,-F,-e)
ok 22 - cleanup commit messages (strip option,-F,-e): output
ok 23 - cleanup commit message (fail on invalid cleanup mode option)
ok 24 - cleanup commit message (fail on invalid cleanup mode configuration)
ok 25 - cleanup commit message (no config and no option uses default)
ok 26 - cleanup commit message (option overrides default)
ok 27 - cleanup commit message (config overrides default)
ok 28 - cleanup commit message (option overrides config)
ok 29 - cleanup commit message (default, -m)
ok 30 - cleanup commit message (whitespace option, -m)
ok 31 - cleanup commit message (whitespace config, -m)
ok 32 - message shows author when it is not equal to committer
ok 33 - message shows date when it is explicitly set
ok 34 # skip message shows committer when it is automatic (missing AUTOIDENT)
ok 35 - do not fire editor when committer is bogus
ok 36 - do not fire editor if -m <msg> was given
ok 37 - do not fire editor if -m "" was given
ok 38 - do not fire editor in the presence of conflicts
ok 39 - a SIGTERM should break locks
ok 40 - Hand committing of a redundant merge removes dups
ok 41 - A single-liner subject with a token plus colon is not a footer
ok 42 - commit -s places sob on third line after two empty lines
ok 43 - commit
ok 44 - commit --status
ok 45 - commit --no-status
ok 46 - commit with commit.status = yes
ok 47 - commit with commit.status = no
ok 48 - commit --status with commit.status = yes
ok 49 - commit --no-status with commit.status = yes
ok 50 - commit --status with commit.status = no
ok 51 - commit --no-status with commit.status = no
ok 52 - commit
ok 53 - commit --status
ok 54 - commit --no-status
ok 55 - commit with commit.status = yes
ok 56 - commit with commit.status = no
ok 57 - commit --status with commit.status = yes
ok 58 - commit --no-status with commit.status = yes
ok 59 - commit --status with commit.status = no
ok 60 - commit --no-status with commit.status = no
ok 61 - commit --status with custom comment character
ok 62 - switch core.commentchar
ok 63 - switch core.commentchar but out of options
# passed all 63 test(s)
1..63
*** t7503-pre-commit-hook.sh ***
ok 1 - with no hook
ok 2 - --no-verify with no hook
ok 3 - with succeeding hook
ok 4 - --no-verify with succeeding hook
ok 5 - with failing hook
ok 6 - --no-verify with failing hook
ok 7 - with non-executable hook
ok 8 - --no-verify with non-executable hook
ok 9 - with hook requiring GIT_PREFIX
ok 10 - with failing hook requiring GIT_PREFIX
ok 11 - check the author in hook
# passed all 11 test(s)
1..11
*** t7504-commit-msg-hook.sh ***
ok 1 - with no hook
ok 2 - with no hook (editor)
ok 3 - --no-verify with no hook
ok 4 - --no-verify with no hook (editor)
ok 5 - with succeeding hook
ok 6 - with succeeding hook (editor)
ok 7 - --no-verify with succeeding hook
ok 8 - --no-verify with succeeding hook (editor)
ok 9 - with failing hook
ok 10 - with failing hook (editor)
ok 11 - --no-verify with failing hook
ok 12 - --no-verify with failing hook (editor)
ok 13 - merge fails with failing hook
ok 14 - merge bypasses failing hook with --no-verify
ok 15 - with non-executable hook
ok 16 - with non-executable hook (editor)
ok 17 - --no-verify with non-executable hook
ok 18 - --no-verify with non-executable hook (editor)
ok 19 - hook edits commit message
ok 20 - hook edits commit message (editor)
ok 21 - hook doesn't edit commit message
ok 22 - hook doesn't edit commit message (editor)
ok 23 - hook called in git-merge picks up commit message
not ok 24 - merge --continue remembers --no-verify # TODO known breakage
ok 25 - hook is called for reword during `rebase -i`
# still have 1 known breakage(s)
# passed all remaining 24 test(s)
1..25
*** t7505-prepare-commit-msg-hook.sh ***
ok 1 - set up commits for rebasing
ok 2 - with no hook
ok 3 - with hook (-m)
ok 4 - with hook (-m editor)
ok 5 - with hook (-t)
ok 6 - with hook (-F)
ok 7 - with hook (-F editor)
ok 8 - with hook (-C)
ok 9 - with hook (editor)
ok 10 - with hook (--amend)
ok 11 - with hook (-c)
ok 12 - with hook (merge)
ok 13 - with hook and editor (merge)
ok 14 - with hook (rebase -i)
ok 15 - with hook (rebase -p)
ok 16 - with hook (cherry-pick)
ok 17 - with hook and editor (cherry-pick)
ok 18 - with failing hook
ok 19 - with failing hook (--no-verify)
ok 20 - with failing hook (merge)
ok 21 - with failing hook (cherry-pick)
# passed all 21 test(s)
1..21
*** t7506-status-submodule.sh ***
ok 1 - setup
ok 2 - status clean
ok 3 - commit --dry-run -a clean
ok 4 - status with modified file in submodule
ok 5 - status with modified file in submodule (porcelain)
ok 6 - status with modified file in submodule (short)
ok 7 - status with added file in submodule
ok 8 - status with added file in submodule (porcelain)
ok 9 - status with added file in submodule (short)
ok 10 - status with untracked file in submodule
ok 11 - status -uno with untracked file in submodule
ok 12 - status with untracked file in submodule (porcelain)
ok 13 - status with untracked file in submodule (short)
ok 14 - status with added and untracked file in submodule
ok 15 - status with added and untracked file in submodule (porcelain)
ok 16 - status with modified file in modified submodule
ok 17 - status with modified file in modified submodule (porcelain)
ok 18 - status with added file in modified submodule
ok 19 - status with added file in modified submodule (porcelain)
ok 20 - status with untracked file in modified submodule
ok 21 - status with untracked file in modified submodule (porcelain)
ok 22 - status with added and untracked file in modified submodule
ok 23 - status with added and untracked file in modified submodule (porcelain)
ok 24 - setup .git file for sub
ok 25 - status with added file in modified submodule with .git file
ok 26 - status with a lot of untracked files in the submodule
ok 27 - rm submodule contents
ok 28 - status clean (empty submodule dir)
ok 29 - status -a clean (empty submodule dir)
ok 30 - status with merge conflict in .gitmodules
ok 31 - diff with merge conflict in .gitmodules
ok 32 - diff --submodule with merge conflict in .gitmodules
ok 33 - setup superproject with untracked file in nested submodule
ok 34 - status with untracked file in nested submodule (porcelain)
ok 35 - status with untracked file in nested submodule (porcelain=2)
ok 36 - status with untracked file in nested submodule (short)
ok 37 - setup superproject with modified file in nested submodule
ok 38 - status with added file in nested submodule (porcelain)
ok 39 - status with added file in nested submodule (porcelain=2)
ok 40 - status with added file in nested submodule (short)
# passed all 40 test(s)
1..40
*** t7507-commit-verbose.sh ***
ok 1 - setup
ok 2 - initial commit shows verbose diff
ok 3 - second commit
ok 4 - verbose diff is stripped out
ok 5 - verbose diff is stripped out (mnemonicprefix)
ok 6 - diff in message is retained without -v
ok 7 - diff in message is retained with -v
ok 8 - submodule log is stripped out too with -v
ok 9 - verbose diff is stripped out with set core.commentChar
ok 10 - status does not verbose without --verbose
ok 11 - setup -v -v
ok 12 - commit.verbose=true and --verbose omitted
ok 13 - commit.verbose=1 and --verbose omitted
ok 14 - commit.verbose=false and --verbose omitted
ok 15 - commit.verbose=-2 and --verbose omitted
ok 16 - commit.verbose=-1 and --verbose omitted
ok 17 - commit.verbose=0 and --verbose omitted
ok 18 - commit.verbose=2 and --verbose omitted
ok 19 - commit.verbose=3 and --verbose omitted
ok 20 - commit.verbose=true and --verbose
ok 21 - commit.verbose=true and --no-verbose
ok 22 - commit.verbose=true and -v -v
ok 23 - commit.verbose=false and --verbose
ok 24 - commit.verbose=false and --no-verbose
ok 25 - commit.verbose=false and -v -v
ok 26 - commit.verbose=-2 and --verbose
ok 27 - commit.verbose=-2 and --no-verbose
ok 28 - commit.verbose=-2 and -v -v
ok 29 - commit.verbose=-1 and --verbose
ok 30 - commit.verbose=-1 and --no-verbose
ok 31 - commit.verbose=-1 and -v -v
ok 32 - commit.verbose=0 and --verbose
ok 33 - commit.verbose=0 and --no-verbose
ok 34 - commit.verbose=0 and -v -v
ok 35 - commit.verbose=1 and --verbose
ok 36 - commit.verbose=1 and --no-verbose
ok 37 - commit.verbose=1 and -v -v
ok 38 - commit.verbose=2 and --verbose
ok 39 - commit.verbose=2 and --no-verbose
ok 40 - commit.verbose=2 and -v -v
ok 41 - commit.verbose=3 and --verbose
ok 42 - commit.verbose=3 and --no-verbose
ok 43 - commit.verbose=3 and -v -v
ok 44 - status ignores commit.verbose=true
# passed all 44 test(s)
1..44
*** t7508-status.sh ***
ok 1 - status -h in broken repository
ok 2 - commit -h in broken repository
ok 3 - create upstream branch
ok 4 - setup
ok 5 - status (1)
ok 6 - status --column
ok 7 - status --column status.displayCommentPrefix=false
ok 8 - status with status.displayCommentPrefix=true
ok 9 - status with status.displayCommentPrefix=false
ok 10 - status -v
ok 11 - status -v -v
ok 12 - setup fake editor
ok 13 - commit ignores status.displayCommentPrefix=false in COMMIT_EDITMSG
ok 14 - status (advice.statusHints false)
ok 15 - status -s
ok 16 - status with gitignore
ok 17 - status with gitignore (nothing untracked)
ok 18 - status -s -b
ok 19 - status -s -z -b
ok 20 - setup dir3
ok 21 - status -uno
ok 22 - status (status.showUntrackedFiles no)
ok 23 - status -uno (advice.statusHints false)
ok 24 - status -s -uno
ok 25 - status -s (status.showUntrackedFiles no)
ok 26 - status -unormal
ok 27 - status (status.showUntrackedFiles normal)
ok 28 - status -s -unormal
ok 29 - status -s (status.showUntrackedFiles normal)
ok 30 - status -uall
ok 31 - status (status.showUntrackedFiles all)
ok 32 - teardown dir3
ok 33 - status -s -uall
ok 34 - status -s (status.showUntrackedFiles all)
ok 35 - status with relative paths
ok 36 - status -s with relative paths
ok 37 - status --porcelain ignores relative paths setting
ok 38 - setup unique colors
ok 39 # skip status with color.ui (missing TTY)
ok 40 # skip status with color.status (missing TTY)
ok 41 # skip status -s with color.ui (missing TTY)
ok 42 # skip status -s with color.status (missing TTY)
ok 43 # skip status -s -b with color.status (missing TTY)
ok 44 # skip status --porcelain ignores color.ui (missing TTY)
ok 45 # skip status --porcelain ignores color.status (missing TTY)
ok 46 - status --porcelain respects -b
ok 47 - status without relative paths
ok 48 - status -s without relative paths
ok 49 - dry-run of partial commit excluding new file in index
ok 50 - status refreshes the index
ok 51 - setup status submodule summary
ok 52 - status submodule summary is disabled by default
ok 53 - status --untracked-files=all does not show submodule
ok 54 - status -s submodule summary is disabled by default
ok 55 - status -s --untracked-files=all does not show submodule
ok 56 - status submodule summary
ok 57 - status submodule summary with status.displayCommentPrefix=false
ok 58 - commit with submodule summary ignores status.displayCommentPrefix
ok 59 - status -s submodule summary
ok 60 - status submodule summary (clean submodule): commit
ok 61 - status -s submodule summary (clean submodule)
ok 62 - status -z implies porcelain
ok 63 - commit --dry-run submodule summary (--amend)
ok 64 - status succeeds in a read-only repository
ok 65 - --ignore-submodules=untracked suppresses submodules with untracked content
ok 66 - .gitmodules ignore=untracked suppresses submodules with untracked content
ok 67 - .git/config ignore=untracked suppresses submodules with untracked content
ok 68 - --ignore-submodules=dirty suppresses submodules with untracked content
ok 69 - .gitmodules ignore=dirty suppresses submodules with untracked content
ok 70 - .git/config ignore=dirty suppresses submodules with untracked content
ok 71 - --ignore-submodules=dirty suppresses submodules with modified content
ok 72 - .gitmodules ignore=dirty suppresses submodules with modified content
ok 73 - .git/config ignore=dirty suppresses submodules with modified content
ok 74 - --ignore-submodules=untracked doesn't suppress submodules with modified content
ok 75 - .gitmodules ignore=untracked doesn't suppress submodules with modified content
ok 76 - .git/config ignore=untracked doesn't suppress submodules with modified content
ok 77 - --ignore-submodules=untracked doesn't suppress submodule summary
ok 78 - .gitmodules ignore=untracked doesn't suppress submodule summary
ok 79 - .git/config ignore=untracked doesn't suppress submodule summary
ok 80 - --ignore-submodules=dirty doesn't suppress submodule summary
ok 81 - .gitmodules ignore=dirty doesn't suppress submodule summary
ok 82 - .git/config ignore=dirty doesn't suppress submodule summary
ok 83 - status (core.commentchar with submodule summary)
ok 84 - status (core.commentchar with two chars with submodule summary)
ok 85 - --ignore-submodules=all suppresses submodule summary
ok 86 - .gitmodules ignore=all suppresses unstaged submodule summary
ok 87 - .git/config ignore=all suppresses unstaged submodule summary
ok 88 - setup of test environment
ok 89 - "status.short=true" same as "-s"
ok 90 - "status.short=true" weaker than "--no-short"
ok 91 - "status.short=false" same as "--no-short"
ok 92 - "status.short=false" weaker than "-s"
ok 93 - "status.branch=true" same as "-b"
ok 94 - "status.branch=true" different from "--no-branch"
ok 95 - "status.branch=true" weaker than "--no-branch"
ok 96 - "status.branch=true" weaker than "--porcelain"
ok 97 - "status.branch=false" same as "--no-branch"
ok 98 - "status.branch=false" weaker than "-b"
ok 99 - Restore default test environment
ok 100 - git commit will commit a staged but ignored submodule
ok 101 - git commit --dry-run will show a staged but ignored submodule
ok 102 - git commit -m will commit a staged but ignored submodule
ok 103 - show stash info with "--show-stash"
ok 104 - no stash info with "--show-stash --no-show-stash"
ok 105 - "status.showStash=false" weaker than "--show-stash"
ok 106 - "status.showStash=true" weaker than "--no-show-stash"
ok 107 - no additionnal info if no stash entries
ok 108 - "No commits yet" should be noted in status output
ok 109 - "No commits yet" should not be noted in status output
ok 110 - "Initial commit" should be noted in commit template
ok 111 - "Initial commit" should not be noted in commit template
ok 112 - --no-optional-locks prevents index update
# passed all 112 test(s)
1..112
*** t7509-commit.sh ***
ok 1 - -C option copies authorship and message
ok 2 - -C option copies only the message with --reset-author
ok 3 - -c option copies authorship and message
ok 4 - -c option copies only the message with --reset-author
ok 5 - --amend option copies authorship
ok 6 - --amend option with empty author
ok 7 - --amend option with missing author
ok 8 - --reset-author makes the commit ours even with --amend option
ok 9 - --reset-author and --author are mutually exclusive
ok 10 - --reset-author should be rejected without -c/-C/--amend
ok 11 - commit respects CHERRY_PICK_HEAD and MERGE_MSG
ok 12 - --reset-author with CHERRY_PICK_HEAD
# passed all 12 test(s)
1..12
*** t7510-signed-commit.sh ***
ok 1 # skip create signed commits (missing GPG)
ok 2 # skip verify and show signatures (missing GPG)
ok 3 # skip verify-commit exits success on untrusted signature (missing GPG)
ok 4 # skip verify signatures with --raw (missing GPG)
ok 5 # skip show signed commit with signature (missing GPG)
ok 6 # skip detect fudged signature (missing GPG)
ok 7 # skip detect fudged signature with NUL (missing GPG)
ok 8 # skip amending already signed commit (missing GPG)
ok 9 # skip show good signature with custom format (missing GPG)
ok 10 # skip show bad signature with custom format (missing GPG)
ok 11 # skip show untrusted signature with custom format (missing GPG)
ok 12 # skip show unknown signature with custom format (missing GPG)
ok 13 # skip show lack of signature with custom format (missing GPG)
ok 14 # skip log.showsignature behaves like --show-signature (missing GPG)
ok 15 # skip check config gpg.format values (missing GPG)
# passed all 15 test(s)
1..15
*** t7511-status-index.sh ***
ok 1 - status, filename length 1
ok 2 - status, filename length 2
ok 3 - status, filename length 3
ok 4 - status, filename length 4
ok 5 - status, filename length 5
ok 6 - status, filename length 6
ok 7 - status, filename length 7
ok 8 - status, filename length 8
ok 9 - status, filename length 9
ok 10 - status, filename length 10
ok 11 - status, filename length 11
ok 12 - status, filename length 12
ok 13 - status, filename length 13
ok 14 - status, filename length 14
ok 15 - status, filename length 15
ok 16 - status, filename length 16
ok 17 - status, filename length 17
ok 18 - status, filename length 18
ok 19 - status, filename length 19
ok 20 - status, filename length 20
ok 21 - status, filename length 21
ok 22 - status, filename length 22
ok 23 - status, filename length 23
ok 24 - status, filename length 24
# passed all 24 test(s)
1..24
*** t7512-status-help.sh ***
ok 1 - prepare for conflicts
ok 2 - status when conflicts unresolved
ok 3 - status when conflicts resolved before commit
ok 4 - prepare for rebase conflicts
ok 5 - status when rebase in progress before resolving conflicts
ok 6 - status when rebase in progress before rebase --continue
ok 7 - prepare for rebase_i_conflicts
ok 8 - status during rebase -i when conflicts unresolved
ok 9 - status during rebase -i after resolving conflicts
ok 10 - status when rebasing -i in edit mode
ok 11 - status when splitting a commit
ok 12 - status after editing the last commit with --amend during a rebase -i
ok 13 - prepare for several edits
ok 14 - status: (continue first edit) second edit
ok 15 - status: (continue first edit) second edit and split
ok 16 - status: (continue first edit) second edit and amend
ok 17 - status: (amend first edit) second edit
ok 18 - status: (amend first edit) second edit and split
ok 19 - status: (amend first edit) second edit and amend
ok 20 - status: (split first edit) second edit
ok 21 - status: (split first edit) second edit and split
ok 22 - status: (split first edit) second edit and amend
ok 23 - prepare am_session
ok 24 - status in an am session: file already exists
ok 25 - status in an am session: file does not exist
ok 26 - status in an am session: empty patch
ok 27 - status when bisecting
ok 28 - status when rebase conflicts with statushints disabled
ok 29 - prepare for cherry-pick conflicts
ok 30 - status when cherry-picking before resolving conflicts
ok 31 - status when cherry-picking after resolving conflicts
ok 32 - status showing detached at and from a tag
ok 33 - status while reverting commit (conflicts)
ok 34 - status while reverting commit (conflicts resolved)
ok 35 - status after reverting commit
ok 36 - prepare for different number of commits rebased
ok 37 - status: one command done nothing remaining
ok 38 - status: two commands done with some white lines in done file
ok 39 - status: two remaining commands with some white lines in todo file
ok 40 - status: handle not-yet-started rebase -i gracefully
# passed all 40 test(s)
1..40
*** t7513-interpret-trailers.sh ***
ok 1 - setup
ok 2 - without config
ok 3 - without config in another order
ok 4 - --trim-empty without config
ok 5 - with config option on the command line
ok 6 - with only a title in the message
ok 7 - with multiline title in the message
ok 8 - with non-trailer lines mixed with Signed-off-by
ok 9 - with non-trailer lines mixed with cherry picked from
ok 10 - with non-trailer lines mixed with a configured trailer
ok 11 - with non-trailer lines mixed with a non-configured trailer
ok 12 - with all non-configured trailers
ok 13 - with non-trailer lines only
ok 14 - line with leading whitespace is not trailer
ok 15 - multiline field treated as one trailer for 25% check
ok 16 - multiline field treated as atomic for placement
ok 17 - multiline field treated as atomic for replacement
ok 18 - multiline field treated as atomic for difference check
ok 19 - multiline field treated as atomic for neighbor check
ok 20 - with config setup
ok 21 - with config setup and ":=" as separators
ok 22 - with config setup and "%" as separators
ok 23 - with "%" as separators and a message with trailers
ok 24 - with config setup and ":=#" as separators
ok 25 - with commit basic message
ok 26 - with basic patch
ok 27 - with commit complex message as argument
ok 28 - with 2 files arguments
ok 29 - with message that has comments
ok 30 - with message that has an old style conflict block
ok 31 - with commit complex message and trailer args
ok 32 - with complex patch, args and --trim-empty
ok 33 - in-place editing with basic patch
ok 34 - in-place editing with additional trailer
ok 35 - in-place editing on stdin disallowed
ok 36 - in-place editing on non-existing file
ok 37 - in-place editing doesn't clobber original file on error
ok 38 - using "where = before"
ok 39 - overriding configuration with "--where after"
ok 40 - using "where = before" with "--no-where"
ok 41 - using "where = after"
ok 42 - using "where = end"
ok 43 - using "where = start"
ok 44 - using "where = before" for a token in the middle of the message
ok 45 - using "where = before" and --trim-empty
ok 46 - the default is "ifExists = addIfDifferentNeighbor"
ok 47 - default "ifExists" is now "addIfDifferent"
ok 48 - using "ifExists = addIfDifferent" with "where = end"
ok 49 - using "ifExists = addIfDifferent" with "where = before"
ok 50 - using "ifExists = addIfDifferentNeighbor" with "where = end"
ok 51 - using "ifExists = addIfDifferentNeighbor"  with "where = after"
ok 52 - using "ifExists = addIfDifferentNeighbor" and --trim-empty
ok 53 - using "ifExists = add" with "where = end"
ok 54 - using "ifExists = add" with "where = after"
ok 55 - overriding configuration with "--if-exists replace"
ok 56 - using "ifExists = replace"
ok 57 - using "ifExists = replace" with "where = after"
ok 58 - using "ifExists = doNothing"
ok 59 - the default is "ifMissing = add"
ok 60 - overriding configuration with "--if-missing doNothing"
ok 61 - when default "ifMissing" is "doNothing"
ok 62 - using "ifMissing = add" with "where = end"
ok 63 - using "ifMissing = add" with "where = before"
ok 64 - using "ifMissing = doNothing"
ok 65 - default "where" is now "after"
ok 66 - with simple command
ok 67 - with command using commiter information
ok 68 - with command using author information
ok 69 - setup a commit
ok 70 - with command using $ARG
ok 71 - with failing command using $ARG
ok 72 - with empty tokens
ok 73 - with command but no key
ok 74 - with no command and no key
ok 75 - with cut line
ok 76 - only trailers
ok 77 - only-trailers omits non-trailer in middle of block
ok 78 - only input
ok 79 - unfold
# passed all 79 test(s)
1..79
*** t7514-commit-patch.sh ***
ok 1 - setup (initial)
ok 2 - edit hunk "commit -p -m message"
ok 3 - edit hunk "commit --dry-run -p -m message"
# passed all 3 test(s)
1..3
*** t7515-status-symlinks.sh ***
ok 1 - setup
ok 2 - symlink to a directory
ok 3 - symlink replacing a directory
# passed all 3 test(s)
1..3
*** t7516-commit-races.sh ***
ok 1 - race to create orphan commit
ok 2 - race to create non-orphan commit
# passed all 2 test(s)
1..2
*** t7517-per-repo-email.sh ***
ok 1 - setup a likely user.useConfigOnly use case
ok 2 - fails committing if clone email is not set
ok 3 - fails committing if clone email is not set, but EMAIL set
ok 4 - succeeds committing if clone email is set
ok 5 - succeeds cloning if global email is not set
ok 6 - set up rebase scenarios
ok 7 - fast-forward rebase does not care about ident
ok 8 - non-fast-forward rebase refuses to write commits
ok 9 - fast-forward rebase does not care about ident (interactive)
ok 10 - non-fast-forward rebase refuses to write commits (interactive)
ok 11 - noop interactive rebase does not care about ident
ok 12 - fast-forward rebase does not care about ident (preserve)
ok 13 - non-fast-forward rebase refuses to write commits (preserve)
# passed all 13 test(s)
1..13
*** t7518-ident-corner-cases.sh ***
ok 1 - empty name and missing email
ok 2 - commit rejects all-crud name
ok 3 - empty configured name does not auto-detect
# passed all 3 test(s)
1..3
*** t7519-status-fsmonitor.sh ***
ok 1 - setup
ok 2 - fsmonitor extension is off by default
ok 3 - update-index --fsmonitor" adds the fsmonitor extension
ok 4 - update-index --no-fsmonitor" removes the fsmonitor extension
ok 5 - update-index --fsmonitor-valid" sets the fsmonitor valid bit
ok 6 - update-index --no-fsmonitor-valid" clears the fsmonitor valid bit
ok 7 - all files returned by integration script get flagged as invalid
ok 8 - newly added files are marked valid
ok 9 - all unmodified files get marked valid
ok 10 - *only* files returned by the integration script get flagged as invalid
ok 11 - refresh_index() invalidates fsmonitor cache
ok 12 - setup preloadIndex to false
ok 13 - setup untracked cache to false
ok 14 - compare status with and without fsmonitor
ok 15 - status doesn't detect unreported modifications
ok 16 - setup untracked cache to true
ok 17 - compare status with and without fsmonitor
ok 18 - status doesn't detect unreported modifications
ok 19 - setup preloadIndex to true
ok 20 - setup untracked cache to false
ok 21 - compare status with and without fsmonitor
ok 22 - status doesn't detect unreported modifications
ok 23 - setup untracked cache to true
ok 24 - compare status with and without fsmonitor
ok 25 - status doesn't detect unreported modifications
ok 26 - splitting the index results in the same state
ok 27 - ignore .git changes when invalidating UNTR
# passed all 27 test(s)
1..27
*** t7520-ignored-hook-warning.sh ***
ok 1 - setup
ok 2 - no warning if hook is not ignored
ok 3 - warning if hook is ignored
ok 4 - no warning if advice.ignoredHook set to false
ok 5 - no warning if unset advice.ignoredHook and hook removed
# passed all 5 test(s)
1..5
*** t7521-ignored-mode.sh ***
ok 1 - setup initial commit and ignore file
ok 2 - Verify behavior of status on directories with ignored files
ok 3 - Verify status behavior on directory with tracked & ignored files
ok 4 - Verify status behavior on directory with untracked and ignored files
ok 5 - Verify status matching ignored files on ignored directory
ok 6 - Verify status behavior on ignored directory containing tracked file
ok 7 - Verify matching ignored files with --untracked-files=normal
ok 8 - Verify matching ignored files with --untracked-files=normal
ok 9 - Verify status behavior on ignored directory containing tracked file
ok 10 - Verify behavior of status with --ignored=no
ok 11 - Verify behavior of status with --ignored=traditional and --untracked-files=all
ok 12 - Verify behavior of status with --ignored=traditional and --untracked-files=normal
# passed all 12 test(s)
1..12
*** t7525-status-rename.sh ***
ok 1 - setup
ok 2 - status no-options
ok 3 - status --no-renames
ok 4 - status.renames inherits from diff.renames false
ok 5 - status.renames inherits from diff.renames true
ok 6 - status.renames overrides diff.renames false
ok 7 - status.renames overrides from diff.renames true
ok 8 - status status.renames=false
ok 9 - status status.renames=true
ok 10 - commit honors status.renames=false
ok 11 - commit honors status.renames=true
ok 12 - status config overridden
ok 13 - status score=100%
ok 14 - status score=01%
ok 15 - copies not overridden by find-rename
# passed all 15 test(s)
1..15
*** t7600-merge.sh ***
ok 1 - setup
ok 2 - test option parsing
ok 3 - merge -h with invalid index
ok 4 - reject non-strategy with a git-merge-foo name
ok 5 - merge c0 with c1
ok 6 - merge c0 with c1 with --ff-only
ok 7 - merge from unborn branch
ok 8 - merge c1 with c2
ok 9 - merge --squash c3 with c7
ok 10 - merge c1 with c2 and c3
ok 11 - merges with --ff-only
ok 12 - merges with merge.ff=only
ok 13 - merge c0 with c1 (no-commit)
ok 14 - merge c1 with c2 (no-commit)
ok 15 - merge c1 with c2 and c3 (no-commit)
ok 16 - merge c0 with c1 (squash)
ok 17 - merge c0 with c1 (squash, ff-only)
ok 18 - merge c1 with c2 (squash)
ok 19 - unsuccessful merge of c1 with c2 (squash, ff-only)
ok 20 - merge c1 with c2 and c3 (squash)
ok 21 - merge c1 with c2 (no-commit in config)
ok 22 - merge c1 with c2 (log in config)
ok 23 - merge c1 with c2 (log in config gets overridden)
ok 24 - merge c1 with c2 (squash in config)
ok 25 - override config option -n with --summary
ok 26 - override config option -n with --stat
ok 27 - override config option --stat
ok 28 - merge c1 with c2 (override --no-commit)
ok 29 - merge c1 with c2 (override --squash)
ok 30 - merge c0 with c1 (no-ff)
ok 31 - merge c0 with c1 (merge.ff=false)
ok 32 - combine branch.master.mergeoptions with merge.ff
ok 33 - tolerate unknown values for merge.ff
ok 34 - combining --squash and --no-ff is refused
ok 35 - option --ff-only overwrites --no-ff
ok 36 - option --no-ff overrides merge.ff=only config
ok 37 - merge c0 with c1 (ff overrides no-ff)
ok 38 - merge log message
ok 39 - merge c1 with c0, c2, c0, and c1
ok 40 - merge c1 with c0, c2, c0, and c1
ok 41 - merge c1 with c1 and c2
ok 42 - merge fast-forward in a dirty tree
ok 43 - in-index merge
ok 44 - refresh the index before merging
ok 45 - merge early part of c2
ok 46 - merge --no-ff --no-commit && commit
ok 47 - amending no-ff merge commit
ok 48 - merge --no-ff --edit
ok 49 - merge annotated/signed tag w/o tracking
ok 50 - merge annotated/signed tag w/ tracking
ok 51 # skip merge --ff-only tag (missing GPG)
ok 52 # skip merge --no-edit tag should skip editor (missing GPG)
ok 53 - set up mod-256 conflict scenario
ok 54 - merge detects mod-256 conflicts (recursive)
ok 55 - merge detects mod-256 conflicts (resolve)
ok 56 - merge nothing into void
ok 57 - merge can be completed with --continue
ok 58 - killed merge can be completed with --continue
# passed all 58 test(s)
1..58
*** t7601-merge-pull-config.sh ***
ok 1 - setup
ok 2 - merge c1 with c2
ok 3 - fast-forward pull succeeds with "true" in pull.ff
ok 4 - pull.ff=true overrides merge.ff=false
ok 5 - fast-forward pull creates merge with "false" in pull.ff
ok 6 - pull prevents non-fast-forward with "only" in pull.ff
ok 7 - merge c1 with c2 (ours in pull.twohead)
ok 8 - merge c1 with c2 and c3 (recursive in pull.octopus)
ok 9 - merge c1 with c2 and c3 (recursive and octopus in pull.octopus)
ok 10 - setup conflicted merge
ok 11 - merge picks up the best result
ok 12 - merge picks up the best result (from config)
ok 13 - merge errors out on invalid strategy
ok 14 - merge errors out on invalid strategy
# passed all 14 test(s)
1..14
*** t7602-merge-octopus-many.sh ***
ok 1 - setup
ok 2 - merge c1 with c2, c3, c4, ... c29
ok 3 - merge output uses pretty names
ok 4 - merge reduces irrelevant remote heads
ok 5 - merge fast-forward output uses pretty names
# passed all 5 test(s)
1..5
*** t7603-merge-reduce-heads.sh ***
ok 1 - setup
ok 2 - merge c1 with c2, c3, c4, c5
ok 3 - pull c2, c3, c4, c5 into c1
ok 4 - setup
ok 5 - merge E and I
ok 6 - verify merge result
ok 7 - add conflicts
ok 8 - merge E2 and I2, causing a conflict and resolve it
ok 9 - verify merge result
ok 10 - fast-forward to redundant refs
ok 11 - verify merge result
ok 12 - merge up-to-date redundant refs
ok 13 - verify merge result
# passed all 13 test(s)
1..13
*** t7604-merge-custom-message.sh ***
ok 1 - setup
ok 2 - merge c2 with a custom message
ok 3 - merge --log appends to custom message
# passed all 3 test(s)
1..3
*** t7605-merge-resolve.sh ***
ok 1 - setup
ok 2 - merge c1 to c2
ok 3 - merge c1 to c2, again
ok 4 - merge c2 to c3 (fails)
# passed all 4 test(s)
1..4
*** t7606-merge-custom.sh ***
ok 1 - set up custom strategy
ok 2 - setup
ok 3 - merge c2 with a custom strategy
ok 4 - trivial merge with custom strategy
# passed all 4 test(s)
1..4
*** t7607-merge-overwrite.sh ***
ok 1 - setup
ok 2 - will not overwrite untracked file
ok 3 - will overwrite tracked file
ok 4 - will not overwrite new file
ok 5 - will not overwrite staged changes
ok 6 - will not overwrite removed file
ok 7 - will not overwrite re-added file
ok 8 - will not overwrite removed file with staged changes
ok 9 - will not overwrite unstaged changes in renamed file
ok 10 - will not overwrite untracked subtree
ok 11 - will not overwrite untracked file in leading path
ok 12 - will not overwrite untracked symlink in leading path
ok 13 - will not be confused by symlink in leading path
ok 14 - will not overwrite untracked file on unborn branch
ok 15 - will not overwrite untracked file on unborn branch .git/MERGE_HEAD sanity etc.
ok 16 - failed merge leaves unborn branch in the womb
ok 17 - set up unborn branch and content
ok 18 - will not clobber WT/index when merging into unborn
# passed all 18 test(s)
1..18
*** t7608-merge-messages.sh ***
ok 1 - merge local branch
ok 2 - merge octopus branches
ok 3 - merge tag
ok 4 - ambiguous tag
ok 5 - remote-tracking branch
# passed all 5 test(s)
1..5
*** t7609-merge-co-error-msgs.sh ***
ok 1 - setup
ok 2 - untracked files overwritten by merge (fast and non-fast forward)
ok 3 - untracked files or local changes ovewritten by merge
ok 4 - cannot switch branches because of local changes
ok 5 - not uptodate file porcelain checkout error
ok 6 - not_uptodate_dir porcelain checkout error
# passed all 6 test(s)
1..6
*** t7610-mergetool.sh ***
ok 1 - setup
ok 2 - custom mergetool
ok 3 - mergetool crlf
ok 4 - mergetool in subdir
ok 5 - mergetool on file in parent dir
ok 6 - mergetool skips autoresolved
ok 7 - mergetool merges all from subdir (rerere disabled)
ok 8 - mergetool merges all from subdir (rerere enabled)
ok 9 - mergetool skips resolved paths when rerere is active
ok 10 - conflicted stash sets up rerere
ok 11 - mergetool takes partial path
ok 12 - mergetool delete/delete conflict
ok 13 - mergetool produces no errors when keepBackup is used
ok 14 - mergetool honors tempfile config for deleted files
ok 15 - mergetool keeps tempfiles when aborting delete/delete
ok 16 - deleted vs modified submodule
ok 17 - file vs modified submodule
ok 18 - submodule in subdirectory
ok 19 - directory vs modified submodule
ok 20 - file with no base
ok 21 - custom commands override built-ins
ok 22 - filenames seen by tools start with ./
ok 23 - temporary filenames are used with mergetool.writeToTemp
ok 24 - diff.orderFile configuration is honored
ok 25 - mergetool -Oorder-file is honored
# passed all 25 test(s)
1..25
*** t7611-merge-abort.sh ***
ok 1 - setup
ok 2 - fails without MERGE_HEAD (unstarted merge)
ok 3 - fails without MERGE_HEAD (unstarted merge): .git/MERGE_HEAD sanity
ok 4 - fails without MERGE_HEAD (completed merge)
ok 5 - fails without MERGE_HEAD (completed merge): .git/MERGE_HEAD sanity
ok 6 - Forget previous merge
ok 7 - Abort after --no-commit
ok 8 - Abort after conflicts
ok 9 - Clean merge with dirty index fails
ok 10 - Conflicting merge with dirty index fails
ok 11 - Reset index (but preserve worktree changes)
ok 12 - Abort clean merge with non-conflicting dirty worktree
ok 13 - Abort conflicting merge with non-conflicting dirty worktree
ok 14 - Reset worktree changes
ok 15 - Fail clean merge with conflicting dirty worktree
ok 16 - Fail conflicting merge with conflicting dirty worktree
ok 17 - Reset worktree changes
ok 18 - Fail clean merge with matching dirty worktree
ok 19 - Fail conflicting merge with matching dirty worktree
# passed all 19 test(s)
1..19
*** t7612-merge-verify-signatures.sh ***
ok 1 # skip create signed commits (missing GPG)
ok 2 # skip merge unsigned commit with verification (missing GPG)
ok 3 # skip merge unsigned commit with merge.verifySignatures=true (missing GPG)
ok 4 # skip merge commit with bad signature with verification (missing GPG)
ok 5 # skip merge commit with bad signature with merge.verifySignatures=true (missing GPG)
ok 6 # skip merge commit with untrusted signature with verification (missing GPG)
ok 7 # skip merge commit with untrusted signature with merge.verifySignatures=true (missing GPG)
ok 8 # skip merge signed commit with verification (missing GPG)
ok 9 # skip merge signed commit with merge.verifySignatures=true (missing GPG)
ok 10 # skip merge commit with bad signature without verification (missing GPG)
ok 11 # skip merge commit with bad signature with merge.verifySignatures=false (missing GPG)
ok 12 # skip merge commit with bad signature with merge.verifySignatures=true and --no-verify-signatures (missing GPG)
# passed all 12 test(s)
1..12
*** t7613-merge-submodule.sh ***
ok 1 - git merge: added submodule creates empty directory
ok 2 - git merge: added submodule leaves existing empty directory alone
ok 3 - git merge: replace tracked file with submodule creates empty directory
ok 4 - git merge: replace directory with submodule
ok 5 - git merge: removed submodule leaves submodule directory and its contents in place
ok 6 - git merge: removed submodule leaves submodule containing a .git directory alone
ok 7 - git merge: replace submodule with a directory must fail
ok 8 - git merge: replace submodule containing a .git directory with a directory must fail
not ok 9 - git merge: replace submodule with a file must fail # TODO known breakage
not ok 10 - git merge: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 11 - git merge: modified submodule does not update submodule work tree
ok 12 - git merge: modified submodule does not update submodule work tree to invalid commit
ok 13 - git merge: modified submodule does not update submodule work tree from invalid commit
ok 14 - git merge: added submodule doesn't remove untracked unignored file with same name
ok 15 - git merge --ff: added submodule creates empty directory
ok 16 - git merge --ff: added submodule leaves existing empty directory alone
ok 17 - git merge --ff: replace tracked file with submodule creates empty directory
ok 18 - git merge --ff: replace directory with submodule
ok 19 - git merge --ff: removed submodule leaves submodule directory and its contents in place
ok 20 - git merge --ff: removed submodule leaves submodule containing a .git directory alone
ok 21 - git merge --ff: replace submodule with a directory must fail
ok 22 - git merge --ff: replace submodule containing a .git directory with a directory must fail
not ok 23 - git merge --ff: replace submodule with a file must fail # TODO known breakage
not ok 24 - git merge --ff: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 25 - git merge --ff: modified submodule does not update submodule work tree
ok 26 - git merge --ff: modified submodule does not update submodule work tree to invalid commit
ok 27 - git merge --ff: modified submodule does not update submodule work tree from invalid commit
ok 28 - git merge --ff: added submodule doesn't remove untracked unignored file with same name
ok 29 - git merge --ff-only: added submodule creates empty directory
ok 30 - git merge --ff-only: added submodule leaves existing empty directory alone
ok 31 - git merge --ff-only: replace tracked file with submodule creates empty directory
ok 32 - git merge --ff-only: replace directory with submodule
ok 33 - git merge --ff-only: removed submodule leaves submodule directory and its contents in place
ok 34 - git merge --ff-only: removed submodule leaves submodule containing a .git directory alone
ok 35 - git merge --ff-only: replace submodule with a directory must fail
ok 36 - git merge --ff-only: replace submodule containing a .git directory with a directory must fail
not ok 37 - git merge --ff-only: replace submodule with a file must fail # TODO known breakage
not ok 38 - git merge --ff-only: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 39 - git merge --ff-only: modified submodule does not update submodule work tree
ok 40 - git merge --ff-only: modified submodule does not update submodule work tree to invalid commit
ok 41 - git merge --ff-only: modified submodule does not update submodule work tree from invalid commit
ok 42 - git merge --ff-only: added submodule doesn't remove untracked unignored file with same name
ok 43 - git merge --no-ff: added submodule creates empty directory
ok 44 - git merge --no-ff: added submodule leaves existing empty directory alone
ok 45 - git merge --no-ff: replace tracked file with submodule creates empty directory
not ok 46 - git merge --no-ff: replace directory with submodule # TODO known breakage
ok 47 - git merge --no-ff: removed submodule leaves submodule directory and its contents in place
ok 48 - git merge --no-ff: removed submodule leaves submodule containing a .git directory alone
not ok 49 - git merge --no-ff: replace submodule with a directory must fail # TODO known breakage
not ok 50 - git merge --no-ff: replace submodule containing a .git directory with a directory must fail # TODO known breakage
not ok 51 - git merge --no-ff: replace submodule with a file must fail # TODO known breakage
not ok 52 - git merge --no-ff: replace submodule containing a .git directory with a file must fail # TODO known breakage
ok 53 - git merge --no-ff: modified submodule does not update submodule work tree
ok 54 - git merge --no-ff: modified submodule does not update submodule work tree to invalid commit
ok 55 - git merge --no-ff: modified submodule does not update submodule work tree from invalid commit
ok 56 - git merge --no-ff: added submodule doesn't remove untracked unignored file with same name
# still have 11 known breakage(s)
# passed all remaining 45 test(s)
1..56
*** t7614-merge-signoff.sh ***
ok 1 - setup
ok 2 - git merge --signoff adds a sign-off line
ok 3 - git merge does not add a sign-off line
ok 4 - git merge --no-signoff flag cancels --signoff flag
# passed all 4 test(s)
1..4
*** t7700-repack.sh ***
ok 1 - objects in packs marked .keep are not repacked
ok 2 - writing bitmaps via command-line can duplicate .keep objects
ok 3 - writing bitmaps via config can duplicate .keep objects
ok 4 - loose objects in alternate ODB are not repacked
ok 5 - packed obs in alt ODB are repacked even when local repo is packless
ok 6 - packed obs in alt ODB are repacked when local repo has packs
ok 7 - packed obs in alternate ODB kept pack are repacked
ok 8 - packed unreachable obs in alternate ODB are not loosened
ok 9 - local packed unreachable obs that exist in alternate ODB are not loosened
ok 10 - objects made unreachable by grafts only are kept
ok 11 - repack --keep-pack
# passed all 11 test(s)
1..11
*** t7701-repack-unpack-unreachable.sh ***
ok 1 - -A with -d option leaves unreachable objects unpacked
ok 2 - -A without -d option leaves unreachable objects packed
ok 3 - unpacked objects receive timestamp of pack file
ok 4 - do not bother loosening old objects
ok 5 - keep packed objects found only in index
ok 6 - repack -k keeps unreachable packed objects
ok 7 - repack -k packs unreachable loose objects
# passed all 7 test(s)
1..7
*** t7702-repack-cyclic-alternate.sh ***
ok 1 - setup
ok 2 - re-packing repository with itsself as alternate
# passed all 2 test(s)
1..2
*** t7800-difftool.sh ***
ok 1 - basic usage requires no repo
ok 2 - setup
ok 3 - custom commands
ok 4 - custom tool commands override built-ins
ok 5 - difftool ignores bad --tool values
ok 6 - difftool forwards arguments to diff
ok 7 - difftool ignores exit code
ok 8 - difftool forwards exit code with --trust-exit-code
ok 9 - difftool forwards exit code with --trust-exit-code for built-ins
ok 10 - difftool honors difftool.trustExitCode = true
ok 11 - difftool honors difftool.trustExitCode = false
ok 12 - difftool ignores exit code with --no-trust-exit-code
ok 13 - difftool stops on error with --trust-exit-code
ok 14 - difftool honors exit status if command not found
ok 15 - difftool honors --gui
ok 16 - difftool --gui last setting wins
ok 17 - difftool --gui works without configured diff.guitool
ok 18 - GIT_DIFF_TOOL variable
ok 19 - GIT_DIFF_TOOL overrides
ok 20 - GIT_DIFFTOOL_NO_PROMPT variable
ok 21 - GIT_DIFFTOOL_PROMPT variable
ok 22 - difftool.prompt config variable is false
ok 23 - difftool merge.prompt = false
ok 24 - difftool.prompt can overridden with -y
ok 25 - difftool.prompt can overridden with --prompt
ok 26 - difftool last flag wins
ok 27 - difftool + mergetool config variables
ok 28 - difftool.<tool>.path
ok 29 - difftool --extcmd=cat
ok 30 - difftool --extcmd cat
ok 31 - difftool -x cat
ok 32 - difftool --extcmd echo arg1
ok 33 - difftool --extcmd cat arg1
ok 34 - difftool --extcmd cat arg2
ok 35 - setup with 2 files different
ok 36 - say no to the first file
ok 37 - say no to the second file
ok 38 - ending prompt input with EOF
ok 39 - difftool --tool-help
ok 40 - setup change in subdirectory
ok 41 - difftool -d with growing paths
ok 42 - difftool -d --no-symlinks
ok 43 - difftool -d --symlinks
ok 44 - difftool --dir-diff --no-symlinks
ok 45 - difftool --dir-diff --symlinks
ok 46 - difftool --dir-diff ignores --prompt --no-symlinks
ok 47 - difftool --dir-diff ignores --prompt --symlinks
ok 48 - difftool --dir-diff branch from subdirectory --no-symlinks
ok 49 - difftool --dir-diff branch from subdirectory --symlinks
ok 50 - difftool --dir-diff v1 from subdirectory --no-symlinks
ok 51 - difftool --dir-diff v1 from subdirectory --symlinks
ok 52 - difftool --dir-diff branch from subdirectory w/ pathspec --no-symlinks
ok 53 - difftool --dir-diff branch from subdirectory w/ pathspec --symlinks
ok 54 - difftool --dir-diff v1 from subdirectory w/ pathspec --no-symlinks
ok 55 - difftool --dir-diff v1 from subdirectory w/ pathspec --symlinks
ok 56 - difftool --dir-diff from subdirectory with GIT_DIR set --no-symlinks
ok 57 - difftool --dir-diff from subdirectory with GIT_DIR set --symlinks
ok 58 - difftool --dir-diff when worktree file is missing --no-symlinks
ok 59 - difftool --dir-diff when worktree file is missing --symlinks
ok 60 - difftool --dir-diff with unmerged files --no-symlinks
ok 61 - difftool --dir-diff with unmerged files --symlinks
ok 62 - difftool --dir-diff --symlink without unstaged changes
ok 63 - difftool --dir-diff syncs worktree with unstaged change --no-symlinks
ok 64 - difftool --dir-diff syncs worktree with unstaged change --symlinks
ok 65 - difftool --dir-diff syncs worktree without unstaged change --no-symlinks
ok 66 - difftool --dir-diff syncs worktree without unstaged change --symlinks
ok 67 - difftool --no-symlinks does not overwrite working tree file 
ok 68 - difftool --no-symlinks detects conflict 
ok 69 - difftool properly honors gitlink and core.worktree
ok 70 - difftool --dir-diff symlinked directories
ok 71 - difftool --dir-diff handles modified symlinks
# passed all 71 test(s)
1..71
*** t7810-grep.sh ***
ok 1 - setup
ok 2 - grep should not segfault with a bad input
ok 3 - grep -w HEAD
ok 4 - grep -w HEAD (with --column)
ok 5 - grep -w HEAD (with --column, extended OR)
ok 6 - grep -w HEAD (with --column, --invert)
ok 7 - grep HEAD (with --column, --invert, extended OR)
ok 8 - grep HEAD (with --column, --invert, extended AND)
ok 9 - grep HEAD (with --column, double-negation)
ok 10 - grep -w HEAD (with --column, -C)
ok 11 - grep -w HEAD (with --line-number, --column)
ok 12 - grep -w HEAD (with non-extended patterns, --column)
ok 13 - grep -w HEAD
ok 14 - grep -w HEAD
ok 15 - grep -w HEAD (w)
ok 16 - grep -w HEAD (x)
ok 17 - grep -w HEAD (y-1)
ok 18 - grep -w HEAD (y-2)
ok 19 - grep -w HEAD (z)
ok 20 - grep HEAD (with --column, --only-matching)
ok 21 - grep HEAD (t-1)
ok 22 - grep HEAD (t-2)
ok 23 - grep HEAD (t-3)
ok 24 - grep -c HEAD (no /dev/null)
ok 25 - grep --max-depth -1 HEAD
ok 26 - grep --max-depth 0 HEAD
ok 27 - grep --max-depth 0 -- '*' HEAD
ok 28 - grep --max-depth 1 HEAD
ok 29 - grep --max-depth 0 -- t HEAD
ok 30 - grep --max-depth 0 -- . t HEAD
ok 31 - grep --max-depth 0 -- t . HEAD
ok 32 - grep HEAD with grep.extendedRegexp=false
ok 33 - grep HEAD with grep.extendedRegexp=true
ok 34 - grep HEAD with grep.patterntype=basic
ok 35 - grep HEAD with grep.patterntype=extended
ok 36 - grep HEAD with grep.patterntype=fixed
ok 37 - grep HEAD with grep.patterntype=perl
ok 38 # skip grep HEAD with grep.patterntype=perl errors without PCRE (missing !PCRE)
ok 39 - grep HEAD with grep.patternType=default and grep.extendedRegexp=true
ok 40 - grep HEAD with grep.extendedRegexp=true and grep.patternType=default
ok 41 - grep HEAD with grep.patternType=extended and grep.extendedRegexp=false
ok 42 - grep HEAD with grep.patternType=basic and grep.extendedRegexp=true
ok 43 - grep HEAD with grep.extendedRegexp=false and grep.patternType=extended
ok 44 - grep HEAD with grep.extendedRegexp=true and grep.patternType=basic
ok 45 - grep --count HEAD
ok 46 - grep --count -h HEAD
ok 47 - grep -w in working tree
ok 48 - grep -w in working tree (with --column)
ok 49 - grep -w in working tree (with --column, extended OR)
ok 50 - grep -w in working tree (with --column, --invert)
ok 51 - grep in working tree (with --column, --invert, extended OR)
ok 52 - grep in working tree (with --column, --invert, extended AND)
ok 53 - grep in working tree (with --column, double-negation)
ok 54 - grep -w in working tree (with --column, -C)
ok 55 - grep -w in working tree (with --line-number, --column)
ok 56 - grep -w in working tree (with non-extended patterns, --column)
ok 57 - grep -w in working tree
ok 58 - grep -w in working tree
ok 59 - grep -w in working tree (w)
ok 60 - grep -w in working tree (x)
ok 61 - grep -w in working tree (y-1)
ok 62 - grep -w in working tree (y-2)
ok 63 - grep -w in working tree (z)
ok 64 - grep in working tree (with --column, --only-matching)
ok 65 - grep in working tree (t-1)
ok 66 - grep in working tree (t-2)
ok 67 - grep in working tree (t-3)
ok 68 - grep -c in working tree (no /dev/null)
ok 69 - grep --max-depth -1 in working tree
ok 70 - grep --max-depth 0 in working tree
ok 71 - grep --max-depth 0 -- '*' in working tree
ok 72 - grep --max-depth 1 in working tree
ok 73 - grep --max-depth 0 -- t in working tree
ok 74 - grep --max-depth 0 -- . t in working tree
ok 75 - grep --max-depth 0 -- t . in working tree
ok 76 - grep in working tree with grep.extendedRegexp=false
ok 77 - grep in working tree with grep.extendedRegexp=true
ok 78 - grep in working tree with grep.patterntype=basic
ok 79 - grep in working tree with grep.patterntype=extended
ok 80 - grep in working tree with grep.patterntype=fixed
ok 81 - grep in working tree with grep.patterntype=perl
ok 82 # skip grep in working tree with grep.patterntype=perl errors without PCRE (missing !PCRE)
ok 83 - grep in working tree with grep.patternType=default and grep.extendedRegexp=true
ok 84 - grep in working tree with grep.extendedRegexp=true and grep.patternType=default
ok 85 - grep in working tree with grep.patternType=extended and grep.extendedRegexp=false
ok 86 - grep in working tree with grep.patternType=basic and grep.extendedRegexp=true
ok 87 - grep in working tree with grep.extendedRegexp=false and grep.patternType=extended
ok 88 - grep in working tree with grep.extendedRegexp=true and grep.patternType=basic
ok 89 - grep --count in working tree
ok 90 - grep --count -h in working tree
ok 91 - grep -l -C
ok 92 - grep -c -C
ok 93 - grep -L -C
ok 94 - grep --files-without-match --quiet
ok 95 - grep -e A --and -e B
ok 96 - grep ( -e A --or -e B ) --and -e B
ok 97 - grep -e A --and --not -e B
ok 98 - grep should ignore GREP_OPTIONS
ok 99 - grep -f, non-existent file
ok 100 - grep -f, one pattern
ok 101 - grep -f, multiple patterns
ok 102 - grep, multiple patterns
ok 103 - grep -f, ignore empty lines
ok 104 - grep -f, ignore empty lines, read patterns from stdin
ok 105 - grep -q, silently report matches
ok 106 - grep -C1 hunk mark between files
ok 107 - log grep setup
ok 108 - log grep (1)
ok 109 - log grep (2)
ok 110 - log grep (3)
ok 111 - log grep (4)
ok 112 - log grep (5)
ok 113 - log grep (6)
ok 114 - log grep (7)
ok 115 - log grep (8)
ok 116 - log grep (9)
ok 117 - log grep (9)
ok 118 - log --grep-reflog can only be used under -g
ok 119 - log with multiple --grep uses union
ok 120 - log --all-match with multiple --grep uses intersection
ok 121 - log with multiple --author uses union
ok 122 - log --all-match with multiple --author still uses union
ok 123 - log --grep --author uses intersection
ok 124 - log --grep --grep --author takes union of greps and intersects with author
ok 125 - log ---all-match -grep --author --author still takes union of authors and intersects with grep
ok 126 - log --grep --author --author takes union of authors and intersects with grep
ok 127 - log --all-match --grep --grep --author takes intersection
ok 128 - log --author does not search in timestamp
ok 129 - log --committer does not search in timestamp
ok 130 - grep with CE_VALID file
ok 131 - grep -p with userdiff
ok 132 - grep -p
ok 133 - grep -p -B5
ok 134 - grep -W
ok 135 - grep -W shows no trailing empty lines
ok 136 - grep -W with userdiff
ok 137 -  includes preceding comment
ok 138 -  includes function line
ok 139 -  includes matching line
ok 140 -  includes last line of the function
ok 141 - grep --threads=0 & -c grep.threads=0
ok 142 - grep --threads=1 & -c grep.threads=1
ok 143 - grep --threads=2 & -c grep.threads=2
ok 144 - grep --threads=3 & -c grep.threads=3
ok 145 - grep --threads=4 & -c grep.threads=4
ok 146 - grep --threads=5 & -c grep.threads=5
ok 147 - grep --threads=6 & -c grep.threads=6
ok 148 - grep --threads=7 & -c grep.threads=7
ok 149 - grep --threads=8 & -c grep.threads=8
ok 150 - grep --threads=9 & -c grep.threads=9
ok 151 - grep --threads=10 & -c grep.threads=10
ok 152 # skip grep --threads=N or pack.threads=N warns when no pthreads (missing !PTHREADS of !PTHREADS,C_LOCALE_OUTPUT)
ok 153 - grep from a subdirectory to search wider area (1)
ok 154 - grep from a subdirectory to search wider area (2)
ok 155 - grep -Fi
ok 156 - outside of git repository
ok 157 - outside of git repository with fallbackToNoIndex
ok 158 - inside git repository but with --no-index
ok 159 - grep --no-index descends into repos, but not .git
ok 160 - setup double-dash tests
ok 161 - grep -- pattern
ok 162 - grep -- pattern -- pathspec
ok 163 - grep -e pattern -- path
ok 164 - grep -e -- -- path
ok 165 - dashdash disambiguates rev as rev
ok 166 - dashdash disambiguates pathspec as pathspec
ok 167 - report bogus arg without dashdash
ok 168 - report bogus rev with dashdash
ok 169 - allow non-existent path with dashdash
ok 170 - grep --no-index pattern -- path
ok 171 - grep --no-index complains of revs
ok 172 - grep --no-index prefers paths to revs
ok 173 - grep --no-index does not "diagnose" revs
ok 174 - grep --perl-regexp pattern
ok 175 # skip grep --perl-regexp pattern errors without PCRE (missing !PCRE)
ok 176 - grep -P pattern
ok 177 - grep -P with (*NO_JIT) doesn't error out
ok 178 # skip grep -P pattern errors without PCRE (missing !PCRE)
ok 179 - grep pattern with grep.extendedRegexp=true
ok 180 - grep -P pattern with grep.extendedRegexp=true
ok 181 - grep -P -v pattern
ok 182 - grep -P -i pattern
ok 183 - grep -P -w pattern
ok 184 - grep -P backreferences work (the PCRE NO_AUTO_CAPTURE flag is not set)
ok 185 - grep -G invalidpattern properly dies 
ok 186 - grep invalidpattern properly dies with grep.patternType=basic
ok 187 - grep -E invalidpattern properly dies 
ok 188 - grep invalidpattern properly dies with grep.patternType=extended
ok 189 - grep -P invalidpattern properly dies 
ok 190 - grep invalidpattern properly dies with grep.patternType=perl
ok 191 - grep -G -E -F pattern
ok 192 - grep pattern with grep.patternType=basic, =extended, =fixed
ok 193 - grep -E -F -G pattern
ok 194 - grep pattern with grep.patternType=extended, =fixed, =basic
ok 195 - grep -F -G -E pattern
ok 196 - grep pattern with grep.patternType=fixed, =basic, =extended
ok 197 - grep -G -F -P -E pattern
ok 198 - grep pattern with grep.patternType=fixed, =basic, =perl, =extended
ok 199 - grep -G -F -E -P pattern
ok 200 - grep pattern with grep.patternType=fixed, =basic, =extended, =perl
ok 201 - grep -P pattern with grep.patternType=fixed
ok 202 - grep -F pattern with grep.patternType=basic
ok 203 - grep -G pattern with grep.patternType=fixed
ok 204 - grep -E pattern with grep.patternType=fixed
ok 205 - grep --color, separator
ok 206 - grep --break
ok 207 - grep --break with context
ok 208 - grep --heading
ok 209 - mimic ack-grep --group
ok 210 - grep -E "^ "
ok 211 - grep -P "^ "
ok 212 - grep --color -e A -e B with context
ok 213 - grep --color -e A --and -e B with context
ok 214 - grep --color -e A --and --not -e B with context
ok 215 - grep --color -e A --and -e B -p with context
ok 216 - grep can find things only in the work tree
ok 217 - grep can find things only in the work tree (i-t-a)
ok 218 - grep does not search work tree with assume unchanged
ok 219 - grep can find things only in the index
ok 220 - grep does not report i-t-a with -L --cached
ok 221 - grep does not report i-t-a and assume unchanged with -L
# passed all 221 test(s)
1..221
*** t7811-grep-open.sh ***
ok 1 - determine default pager
ok 2 - setup
ok 3 - git grep -O
ok 4 - git grep -O --cached
ok 5 - git grep -O --no-index
ok 6 - setup: fake "less"
ok 7 - git grep -O jumps to line in less
ok 8 - modified file
ok 9 - copes with color settings
ok 10 - run from subdir
# passed all 10 test(s)
1..10
*** t7812-grep-icase-non-ascii.sh ***
# lib-gettext: Found 'is_IS.UTF-8' as an is_IS UTF-8 locale
# lib-gettext: Found 'is_IS.ISO8859-1' as an is_IS ISO-8859-1 locale
ok 1 - setup
ok 2 - grep literal string, no -F
ok 3 - grep pcre utf-8 icase
ok 4 - grep pcre utf-8 string with "+"
ok 5 - grep literal string, with -F
ok 6 - grep string with regex, with -F
ok 7 - pickaxe -i on non-ascii
# passed all 7 test(s)
1..7
*** t7813-grep-icase-iso.sh ***
# lib-gettext: Found 'is_IS.UTF-8' as an is_IS UTF-8 locale
# lib-gettext: Found 'is_IS.ISO8859-1' as an is_IS ISO-8859-1 locale
ok 1 - setup
ok 2 - grep pcre string
# passed all 2 test(s)
1..2
*** t7814-grep-recurse-submodules.sh ***
ok 1 - setup directory structure and submodule
ok 2 - grep correctly finds patterns in a submodule
ok 3 - grep finds patterns in a submodule via config
ok 4 - grep --no-recurse-submodules overrides config
ok 5 - grep and basic pathspecs
ok 6 - grep and nested submodules
ok 7 - grep and multiple patterns
ok 8 - grep and multiple patterns
ok 9 - basic grep tree
ok 10 - grep tree HEAD^
ok 11 - grep tree HEAD^^
ok 12 - grep tree and pathspecs
ok 13 - grep tree and pathspecs
ok 14 - grep tree and more pathspecs
ok 15 - grep tree and more pathspecs
ok 16 - grep recurse submodule colon in name
ok 17 - grep history with moved submoules
ok 18 - grep using relative path
ok 19 - grep from a subdir
ok 20 - --recurse-submodules and --untracked are incompatible
ok 21 - --recurse-submodules and --no-index are incompatible
ok 22 - grep --recurse-submodules should pass the pattern type along
# passed all 22 test(s)
1..22
*** t8001-annotate.sh ***
ok 1 - setup A lines
ok 2 - blame 1 author
ok 3 - blame by tag objects
ok 4 - setup B lines
ok 5 - blame 2 authors
ok 6 - setup B1 lines (branch1)
ok 7 - blame 2 authors + 1 branch1 author
ok 8 - setup B2 lines (branch2)
ok 9 - blame 2 authors + 1 branch2 author
ok 10 - merge branch1 & branch2
ok 11 - blame 2 authors + 2 merged-in authors
ok 12 - blame --first-parent blames merge for branch1
ok 13 - blame ancestor
ok 14 - blame great-ancestor
ok 15 - setup evil merge
ok 16 - blame evil merge
ok 17 - blame huge graft
ok 18 - setup incomplete line
ok 19 - blame incomplete line
ok 20 - setup edits
ok 21 - blame edits
ok 22 - setup obfuscated email
ok 23 - blame obfuscated email
ok 24 - blame -L 1 (all)
ok 25 - blame -L , (all)
ok 26 - blame -L X (X to end)
ok 27 - blame -L X, (X to end)
ok 28 - blame -L ,Y (up to Y)
ok 29 - blame -L X,X
ok 30 - blame -L X,Y
ok 31 - blame -L Y,X (undocumented)
ok 32 - blame -L -X
ok 33 - blame -L 0
ok 34 - blame -L ,0
ok 35 - blame -L ,+0
ok 36 - blame -L X,+0
ok 37 - blame -L X,+1
ok 38 - blame -L X,+N
ok 39 - blame -L ,-0
ok 40 - blame -L X,-0
ok 41 - blame -L X,-1
ok 42 - blame -L X,-N
ok 43 - blame -L /RE/ (RE to end)
ok 44 - blame -L /RE/,/RE2/
ok 45 - blame -L X,/RE/
ok 46 - blame -L /RE/,Y
ok 47 - blame -L /RE/,+N
ok 48 - blame -L /RE/,-N
ok 49 - blame -L X (X == nlines)
ok 50 - blame -L X (X == nlines + 1)
ok 51 - blame -L X (X > nlines)
ok 52 - blame -L ,Y (Y == nlines)
ok 53 - blame -L ,Y (Y == nlines + 1)
ok 54 - blame -L ,Y (Y > nlines)
ok 55 - blame -L multiple (disjoint)
ok 56 - blame -L multiple (disjoint: unordered)
ok 57 - blame -L multiple (adjacent)
ok 58 - blame -L multiple (adjacent: unordered)
ok 59 - blame -L multiple (overlapping)
ok 60 - blame -L multiple (overlapping: unordered)
ok 61 - blame -L multiple (superset/subset)
ok 62 - blame -L multiple (superset/subset: unordered)
ok 63 - blame -L /RE/ (relative)
ok 64 - blame -L /RE/ (relative: no preceding range)
ok 65 - blame -L /RE/ (relative: adjacent)
ok 66 - blame -L /RE/ (relative: not found)
ok 67 - blame -L /RE/ (relative: end-of-file)
ok 68 - blame -L ^/RE/ (absolute)
ok 69 - blame -L ^/RE/ (absolute: no preceding range)
ok 70 - blame -L ^/RE/ (absolute: not found)
ok 71 - blame -L ^/RE/ (absolute: end-of-file)
ok 72 - setup -L :regex
ok 73 - blame -L :literal
ok 74 - blame -L :regex
ok 75 - blame -L :nomatch
ok 76 - blame -L :RE (relative)
ok 77 - blame -L :RE (relative: no preceding range)
ok 78 - blame -L :RE (relative: not found)
ok 79 - blame -L :RE (relative: end-of-file)
ok 80 - blame -L ^:RE (absolute)
ok 81 - blame -L ^:RE (absolute: no preceding range)
ok 82 - blame -L ^:RE (absolute: not found)
ok 83 - blame -L ^:RE (absolute: end-of-file)
ok 84 - setup incremental
ok 85 - blame empty
ok 86 - blame -L 0 empty
ok 87 - blame -L 1 empty
ok 88 - blame -L 2 empty
ok 89 - blame half
ok 90 - blame -L 0 half
ok 91 - blame -L 1 half
ok 92 - blame -L 2 half
ok 93 - blame -L 3 half
ok 94 - blame full
ok 95 - blame -L 0 full
ok 96 - blame -L 1 full
ok 97 - blame -L 2 full
ok 98 - blame -L 3 full
ok 99 - blame -L
ok 100 - blame -L X,+
ok 101 - blame -L X,-
ok 102 - blame -L X (non-numeric X)
ok 103 - blame -L X,Y (non-numeric Y)
ok 104 - blame -L X,+N (non-numeric N)
ok 105 - blame -L X,-N (non-numeric N)
ok 106 - blame -L ,^/RE/
ok 107 - annotate old revision
# passed all 107 test(s)
1..107
*** t8002-blame.sh ***
ok 1 - setup A lines
ok 2 - blame 1 author
ok 3 - blame by tag objects
ok 4 - setup B lines
ok 5 - blame 2 authors
ok 6 - setup B1 lines (branch1)
ok 7 - blame 2 authors + 1 branch1 author
ok 8 - setup B2 lines (branch2)
ok 9 - blame 2 authors + 1 branch2 author
ok 10 - merge branch1 & branch2
ok 11 - blame 2 authors + 2 merged-in authors
ok 12 - blame --first-parent blames merge for branch1
ok 13 - blame ancestor
ok 14 - blame great-ancestor
ok 15 - setup evil merge
ok 16 - blame evil merge
ok 17 - blame huge graft
ok 18 - setup incomplete line
ok 19 - blame incomplete line
ok 20 - setup edits
ok 21 - blame edits
ok 22 - setup obfuscated email
ok 23 - blame obfuscated email
ok 24 - blame -L 1 (all)
ok 25 - blame -L , (all)
ok 26 - blame -L X (X to end)
ok 27 - blame -L X, (X to end)
ok 28 - blame -L ,Y (up to Y)
ok 29 - blame -L X,X
ok 30 - blame -L X,Y
ok 31 - blame -L Y,X (undocumented)
ok 32 - blame -L -X
ok 33 - blame -L 0
ok 34 - blame -L ,0
ok 35 - blame -L ,+0
ok 36 - blame -L X,+0
ok 37 - blame -L X,+1
ok 38 - blame -L X,+N
ok 39 - blame -L ,-0
ok 40 - blame -L X,-0
ok 41 - blame -L X,-1
ok 42 - blame -L X,-N
ok 43 - blame -L /RE/ (RE to end)
ok 44 - blame -L /RE/,/RE2/
ok 45 - blame -L X,/RE/
ok 46 - blame -L /RE/,Y
ok 47 - blame -L /RE/,+N
ok 48 - blame -L /RE/,-N
ok 49 - blame -L X (X == nlines)
ok 50 - blame -L X (X == nlines + 1)
ok 51 - blame -L X (X > nlines)
ok 52 - blame -L ,Y (Y == nlines)
ok 53 - blame -L ,Y (Y == nlines + 1)
ok 54 - blame -L ,Y (Y > nlines)
ok 55 - blame -L multiple (disjoint)
ok 56 - blame -L multiple (disjoint: unordered)
ok 57 - blame -L multiple (adjacent)
ok 58 - blame -L multiple (adjacent: unordered)
ok 59 - blame -L multiple (overlapping)
ok 60 - blame -L multiple (overlapping: unordered)
ok 61 - blame -L multiple (superset/subset)
ok 62 - blame -L multiple (superset/subset: unordered)
ok 63 - blame -L /RE/ (relative)
ok 64 - blame -L /RE/ (relative: no preceding range)
ok 65 - blame -L /RE/ (relative: adjacent)
ok 66 - blame -L /RE/ (relative: not found)
ok 67 - blame -L /RE/ (relative: end-of-file)
ok 68 - blame -L ^/RE/ (absolute)
ok 69 - blame -L ^/RE/ (absolute: no preceding range)
ok 70 - blame -L ^/RE/ (absolute: not found)
ok 71 - blame -L ^/RE/ (absolute: end-of-file)
ok 72 - setup -L :regex
ok 73 - blame -L :literal
ok 74 - blame -L :regex
ok 75 - blame -L :nomatch
ok 76 - blame -L :RE (relative)
ok 77 - blame -L :RE (relative: no preceding range)
ok 78 - blame -L :RE (relative: not found)
ok 79 - blame -L :RE (relative: end-of-file)
ok 80 - blame -L ^:RE (absolute)
ok 81 - blame -L ^:RE (absolute: no preceding range)
ok 82 - blame -L ^:RE (absolute: not found)
ok 83 - blame -L ^:RE (absolute: end-of-file)
ok 84 - setup incremental
ok 85 - blame empty
ok 86 - blame -L 0 empty
ok 87 - blame -L 1 empty
ok 88 - blame -L 2 empty
ok 89 - blame half
ok 90 - blame -L 0 half
ok 91 - blame -L 1 half
ok 92 - blame -L 2 half
ok 93 - blame -L 3 half
ok 94 - blame full
ok 95 - blame -L 0 full
ok 96 - blame -L 1 full
ok 97 - blame -L 2 full
ok 98 - blame -L 3 full
ok 99 - blame -L
ok 100 - blame -L X,+
ok 101 - blame -L X,-
ok 102 - blame -L X (non-numeric X)
ok 103 - blame -L X,Y (non-numeric Y)
ok 104 - blame -L X,+N (non-numeric N)
ok 105 - blame -L X,-N (non-numeric N)
ok 106 - blame -L ,^/RE/
ok 107 - blame untracked file in empty repo
ok 108 - blame --show-email
ok 109 - setup showEmail tests
ok 110 - blame with no options and no config
ok 111 - blame with showemail options
ok 112 - blame with showEmail config false
ok 113 - blame with showEmail config true
ok 114 - set up abbrev tests
ok 115 - blame --abbrev=<n> works
ok 116 - blame -l aligns regular and boundary commits
ok 117 - blame --abbrev=40 behaves like -l
ok 118 - --no-abbrev works like --abbrev=40
# passed all 118 test(s)
1..118
*** t8003-blame-corner-cases.sh ***
ok 1 - setup
ok 2 - straight copy without -C
ok 3 - straight move without -C
ok 4 - straight copy with -C
ok 5 - straight move with -C
ok 6 - straight copy with -C -C
ok 7 - straight move with -C -C
ok 8 - append without -C
ok 9 - append with -C
ok 10 - append with -C -C
ok 11 - append with -C -C -C
ok 12 - blame wholesale copy
ok 13 - blame wholesale copy and more
ok 14 - blame wholesale copy and more in the index
ok 15 - blame during cherry-pick with file rename conflict
ok 16 - blame path that used to be a directory
ok 17 - blame to a commit with no author name
ok 18 - blame -L with invalid start
ok 19 - blame -L with invalid end
ok 20 - blame parses <end> part of -L
ok 21 - blame -Ln,-(n+1)
ok 22 - indent of line numbers, nine lines
ok 23 - indent of line numbers, ten lines
ok 24 - setup file with CRLF newlines
ok 25 - blame file with CRLF core.autocrlf true
ok 26 - blame file with CRLF attributes text
ok 27 - blame file with CRLF core.autocrlf=true
# passed all 27 test(s)
1..27
*** t8004-blame-with-conflicts.sh ***
ok 1 - setup first case
ok 2 - blame runs on unconflicted file while other file has conflicts
ok 3 - blame does not crash with conflicted file in stages 1,3
# passed all 3 test(s)
1..3
*** t8005-blame-i18n.sh ***
ok 1 - setup the repository
ok 2 - blame respects i18n.commitencoding
ok 3 - blame respects i18n.logoutputencoding
ok 4 - blame respects --encoding=UTF-8
ok 5 - blame respects --encoding=none
# passed all 5 test(s)
1..5
*** t8006-blame-textconv.sh ***
ok 1 - setup 
ok 2 - no filter specified
ok 3 - setup textconv filters
ok 4 - blame with --no-textconv
ok 5 - basic blame on last commit
ok 6 - blame --textconv going through revisions
ok 7 - blame --textconv with local changes
ok 8 - setup +cachetextconv
ok 9 - blame --textconv works with textconvcache
ok 10 - setup -cachetextconv
ok 11 - make a new commit
ok 12 - blame from previous revision
ok 13 - blame with --no-textconv (on symlink)
ok 14 - blame --textconv (on symlink)
ok 15 - make another new commit
ok 16 - blame on last commit (-C -C, symlink)
# passed all 16 test(s)
1..16
*** t8007-cat-file-textconv.sh ***
ok 1 - setup 
ok 2 - no filter specified
ok 3 - setup textconv filters
ok 4 - cat-file without --textconv
ok 5 - cat-file without --textconv on previous commit
ok 6 - cat-file --textconv on last commit
ok 7 - cat-file --textconv on previous commit
ok 8 - cat-file without --textconv (symlink)
ok 9 - cat-file --textconv on index (symlink)
ok 10 - cat-file --textconv on HEAD (symlink)
# passed all 10 test(s)
1..10
*** t8008-blame-formats.sh ***
ok 1 - setup
ok 2 - normal blame output
ok 3 - blame --porcelain output
ok 4 - blame --line-porcelain output
ok 5 - --porcelain detects first non-blank line as subject
# passed all 5 test(s)
1..5
*** t8009-blame-vs-topicbranches.sh ***
ok 1 - setup
ok 2 - blame --reverse --first-parent finds A1
# passed all 2 test(s)
1..2
*** t8010-cat-file-filters.sh ***
ok 1 - setup 
ok 2 - no filters with `git show`
ok 3 - no filters with cat-file
ok 4 - cat-file --filters converts to worktree version
ok 5 - cat-file --filters --path=<path> works
ok 6 - cat-file --textconv --path=<path> works
ok 7 - --path=<path> complains without --textconv/--filters
ok 8 - --textconv/--filters complain without path
ok 9 - cat-file --textconv --batch works
# passed all 9 test(s)
1..9
*** t8011-blame-split-file.sh ***
ok 1 - setup split file case
ok 2 - setup simulated porcelain
ok 3 - generate --porcelain output
ok 4 - porcelain output finds correct commits
ok 5 - porcelain output shows correct filenames
ok 6 - porcelain output shows correct previous pointer
ok 7 - generate --line-porcelain output
ok 8 - line-porcelain output finds correct commits
ok 9 - line-porcelain output shows correct filenames
ok 10 - line-porcelain output shows correct previous pointer
# passed all 10 test(s)
1..10
*** t8012-blame-colors.sh ***
ok 1 - setup A lines
ok 2 - blame 1 author
ok 3 - blame by tag objects
ok 4 - setup B lines
ok 5 - blame 2 authors
ok 6 - setup B1 lines (branch1)
ok 7 - blame 2 authors + 1 branch1 author
ok 8 - setup B2 lines (branch2)
ok 9 - blame 2 authors + 1 branch2 author
ok 10 - merge branch1 & branch2
ok 11 - blame 2 authors + 2 merged-in authors
ok 12 - blame --first-parent blames merge for branch1
ok 13 - blame ancestor
ok 14 - blame great-ancestor
ok 15 - setup evil merge
ok 16 - blame evil merge
ok 17 - blame huge graft
ok 18 - setup incomplete line
ok 19 - blame incomplete line
ok 20 - setup edits
ok 21 - blame edits
ok 22 - setup obfuscated email
ok 23 - blame obfuscated email
ok 24 - blame -L 1 (all)
ok 25 - blame -L , (all)
ok 26 - blame -L X (X to end)
ok 27 - blame -L X, (X to end)
ok 28 - blame -L ,Y (up to Y)
ok 29 - blame -L X,X
ok 30 - blame -L X,Y
ok 31 - blame -L Y,X (undocumented)
ok 32 - blame -L -X
ok 33 - blame -L 0
ok 34 - blame -L ,0
ok 35 - blame -L ,+0
ok 36 - blame -L X,+0
ok 37 - blame -L X,+1
ok 38 - blame -L X,+N
ok 39 - blame -L ,-0
ok 40 - blame -L X,-0
ok 41 - blame -L X,-1
ok 42 - blame -L X,-N
ok 43 - blame -L /RE/ (RE to end)
ok 44 - blame -L /RE/,/RE2/
ok 45 - blame -L X,/RE/
ok 46 - blame -L /RE/,Y
ok 47 - blame -L /RE/,+N
ok 48 - blame -L /RE/,-N
ok 49 - blame -L X (X == nlines)
ok 50 - blame -L X (X == nlines + 1)
ok 51 - blame -L X (X > nlines)
ok 52 - blame -L ,Y (Y == nlines)
ok 53 - blame -L ,Y (Y == nlines + 1)
ok 54 - blame -L ,Y (Y > nlines)
ok 55 - blame -L multiple (disjoint)
ok 56 - blame -L multiple (disjoint: unordered)
ok 57 - blame -L multiple (adjacent)
ok 58 - blame -L multiple (adjacent: unordered)
ok 59 - blame -L multiple (overlapping)
ok 60 - blame -L multiple (overlapping: unordered)
ok 61 - blame -L multiple (superset/subset)
ok 62 - blame -L multiple (superset/subset: unordered)
ok 63 - blame -L /RE/ (relative)
ok 64 - blame -L /RE/ (relative: no preceding range)
ok 65 - blame -L /RE/ (relative: adjacent)
ok 66 - blame -L /RE/ (relative: not found)
ok 67 - blame -L /RE/ (relative: end-of-file)
ok 68 - blame -L ^/RE/ (absolute)
ok 69 - blame -L ^/RE/ (absolute: no preceding range)
ok 70 - blame -L ^/RE/ (absolute: not found)
ok 71 - blame -L ^/RE/ (absolute: end-of-file)
ok 72 - setup -L :regex
ok 73 - blame -L :literal
ok 74 - blame -L :regex
ok 75 - blame -L :nomatch
ok 76 - blame -L :RE (relative)
ok 77 - blame -L :RE (relative: no preceding range)
ok 78 - blame -L :RE (relative: not found)
ok 79 - blame -L :RE (relative: end-of-file)
ok 80 - blame -L ^:RE (absolute)
ok 81 - blame -L ^:RE (absolute: no preceding range)
ok 82 - blame -L ^:RE (absolute: not found)
ok 83 - blame -L ^:RE (absolute: end-of-file)
ok 84 - setup incremental
ok 85 - blame empty
ok 86 - blame -L 0 empty
ok 87 - blame -L 1 empty
ok 88 - blame -L 2 empty
ok 89 - blame half
ok 90 - blame -L 0 half
ok 91 - blame -L 1 half
ok 92 - blame -L 2 half
ok 93 - blame -L 3 half
ok 94 - blame full
ok 95 - blame -L 0 full
ok 96 - blame -L 1 full
ok 97 - blame -L 2 full
ok 98 - blame -L 3 full
ok 99 - blame -L
ok 100 - blame -L X,+
ok 101 - blame -L X,-
ok 102 - blame -L X (non-numeric X)
ok 103 - blame -L X,Y (non-numeric Y)
ok 104 - blame -L X,+N (non-numeric N)
ok 105 - blame -L X,-N (non-numeric N)
ok 106 - blame -L ,^/RE/
ok 107 - colored blame colors contiguous lines
ok 108 - color by age consistently colors old code
ok 109 - blame color by age: new code is different
# passed all 109 test(s)
1..109
*** t9001-send-email.sh ***
ok 1 - prepare reference tree
ok 2 - Setup helper tool
ok 3 - Extract patches
ok 4 - No confirm with --suppress-cc
ok 5 - No confirm with --confirm=never
ok 6 - No confirm with sendemail.confirm=never
ok 7 - Send patches
ok 8 - setup expect
ok 9 - Verify commandline
ok 10 - Send patches with --envelope-sender
ok 11 - setup expect
ok 12 - Verify commandline
ok 13 - Send patches with --envelope-sender=auto
ok 14 - setup expect
ok 15 - Verify commandline
ok 16 - setup expect for cc trailer
ok 17 - cc trailer with various syntax
ok 18 - setup fake get_maintainer.pl script for cc trailer
ok 19 - cc trailer with get_maintainer.pl output
ok 20 - setup expect
ok 21 - self name is suppressed
ok 22 - self name with dot is suppressed
ok 23 - non-ascii self name is suppressed
ok 24 - long non-ascii self name is suppressed
ok 25 - sanitized self name is suppressed
ok 26 - Show all headers
ok 27 - Prompting works
ok 28 # skip implicit ident is allowed (missing AUTOIDENT of PERL,AUTOIDENT)
ok 29 - broken implicit ident aborts send-email
ok 30 - setup tocmd and cccmd scripts
ok 31 - tocmd works
ok 32 - cccmd works
ok 33 - reject long lines
ok 34 - no patch was sent
ok 35 - Author From: in message body
ok 36 - Author From: not in message body
ok 37 - allow long lines with --no-validate
ok 38 - short lines with auto encoding are 8bit
ok 39 - long lines with auto encoding are quoted-printable
ok 40 - --validate passes with encoding auto
ok 41 - --validate passes with encoding quoted-printable
ok 42 - --validate passes with encoding base64
ok 43 - Invalid In-Reply-To
ok 44 - Valid In-Reply-To when prompting
ok 45 - In-Reply-To without --chain-reply-to
ok 46 - In-Reply-To with --chain-reply-to
ok 47 - setup fake editor
ok 48 - --compose works
ok 49 - first message is compose text
ok 50 - second message is patch
ok 51 - setup expect
ok 52 - sendemail.cc set
ok 53 - setup expect
ok 54 - sendemail.cc unset
ok 55 - setup expect
ok 56 - sendemail.cccmd
ok 57 - setup expect
ok 58 - --suppress-cc=all
ok 59 - setup expect
ok 60 - --suppress-cc=body
ok 61 - setup expect
ok 62 - --suppress-cc=body --suppress-cc=cccmd
ok 63 - setup expect
ok 64 - --suppress-cc=sob
ok 65 - setup expect
ok 66 - --suppress-cc=bodycc
ok 67 - setup expect
ok 68 - --suppress-cc=cc
ok 69 - --confirm=always
ok 70 - --confirm=auto
ok 71 - --confirm=cc
ok 72 - --confirm=compose
ok 73 - confirm by default (due to cc)
ok 74 - confirm by default (due to --compose)
ok 75 - confirm detects EOF (inform assumes y)
ok 76 - confirm detects EOF (auto causes failure)
ok 77 - confirm does not loop forever
ok 78 - utf8 Cc is rfc2047 encoded
ok 79 - --compose adds MIME for utf8 body
ok 80 - --compose respects user mime type
ok 81 - --compose adds MIME for utf8 subject
ok 82 - utf8 author is correctly passed on
ok 83 - utf8 sender is not duplicated
ok 84 - sendemail.composeencoding works
ok 85 - --compose-encoding works
ok 86 - --compose-encoding overrides sendemail.composeencoding
ok 87 - --compose-encoding adds correct MIME for subject
ok 88 - detects ambiguous reference/file conflict
ok 89 - feed two files
ok 90 - in-reply-to but no threading
ok 91 - no in-reply-to and no threading
ok 92 - threading but no chain-reply-to
ok 93 - sendemail.to works
ok 94 - --no-to overrides sendemail.to
ok 95 - sendemail.cc works
ok 96 - --no-cc overrides sendemail.cc
ok 97 - sendemail.bcc works
ok 98 - --no-bcc overrides sendemail.bcc
ok 99 - patches To headers are used by default
ok 100 - patches To headers are appended to
ok 101 - To headers from files reset each patch
ok 102 - setup expect
ok 103 - setup expect
ok 104 - ASCII subject is not RFC2047 quoted
ok 105 - setup expect
ok 106 - asks about and fixes 8bit encodings
ok 107 - sendemail.8bitEncoding works
ok 108 - --8bit-encoding overrides sendemail.8bitEncoding
ok 109 - setup expect
ok 110 - setup expect
ok 111 - --8bit-encoding also treats subject
ok 112 - setup expect
ok 113 - sendemail.transferencoding=7bit fails on 8bit data
ok 114 - --transfer-encoding overrides sendemail.transferEncoding
ok 115 - sendemail.transferencoding=8bit
ok 116 - setup expect
ok 117 - 8-bit and sendemail.transferencoding=quoted-printable
ok 118 - setup expect
ok 119 - 8-bit and sendemail.transferencoding=base64
ok 120 - setup expect
ok 121 - convert from quoted-printable to base64
ok 122 - setup expect
ok 123 - setup expect
ok 124 - CRLF and sendemail.transferencoding=quoted-printable
ok 125 - setup expect
ok 126 - CRLF and sendemail.transferencoding=base64
ok 127 - refusing to send cover letter template
ok 128 - --force sends cover letter template anyway
ok 129 - to-cover adds To to all mail
ok 130 - cc-cover adds Cc to all mail
ok 131 - tocover adds To to all mail
ok 132 - cccover adds Cc to all mail
ok 133 - escaped quotes in sendemail.aliasfiletype=mutt
ok 134 - sendemail.aliasfiletype=mailrc
ok 135 - sendemail.aliasfile=~/.mailrc
ok 136 - --dump-aliases sendmail format
ok 137 - --dump-aliases mutt format
ok 138 - --dump-aliases mailrc format
ok 139 - --dump-aliases pine format
ok 140 - --dump-aliases gnus format
ok 141 - --dump-aliases must be used alone
ok 142 - sendemail.aliasfiletype=sendmail
ok 143 - sendmail aliases line folding
ok 144 - sendmail aliases tolerate bogus line folding
ok 145 - sendmail aliases empty
ok 146 - alias support in To header
ok 147 - alias support in Cc header
ok 148 - tocmd works with aliases
ok 149 - cccmd works with aliases
ok 150 - --[no-]xmailer without any configuration
ok 151 - --[no-]xmailer with sendemail.xmailer=true
ok 152 - --[no-]xmailer with sendemail.xmailer=false
ok 153 - setup expected-list
ok 154 - use email list in --cc --to and --bcc
ok 155 - aliases work with email list
ok 156 - leading and trailing whitespaces are removed
ok 157 - invoke hook
ok 158 - test that send-email works outside a repo
# passed all 158 test(s)
1..158
*** t9002-column.sh ***
ok 1 - setup
ok 2 - never
ok 3 - always
ok 4 - 80 columns
ok 5 - COLUMNS = 1
ok 6 - width = 1
ok 7 - 20 columns
ok 8 - 20 columns, nodense
ok 9 - 20 columns, dense
ok 10 - 20 columns, padding 2
ok 11 - 20 columns, indented
ok 12 - 20 columns, row first
ok 13 - 20 columns, row first, nodense
ok 14 - 20 columns, row first, dense
# passed all 14 test(s)
1..14
*** t9003-help-autocorrect.sh ***
ok 1 - setup
ok 2 - autocorrect showing candidates
ok 3 - autocorrect running commands
# passed all 3 test(s)
1..3
*** t9004-example.sh ***
ok 1 - decorate
# passed all 1 test(s)
1..1
*** t9010-svn-fe.sh ***
ok 1 - empty dump
ok 2 - v4 dumps not supported
not ok 3 - empty revision # TODO known breakage
ok 4 - empty properties
ok 5 - author name and commit message
ok 6 - unsupported properties are ignored
not ok 7 - timestamp and empty file # TODO known breakage
ok 8 - directory with files
ok 9 - branch name with backslash
ok 10 - node without action
ok 11 - action: add node without text
not ok 12 - change file mode but keep old content # TODO known breakage
ok 13 - NUL in property value
ok 14 - NUL in log message, file content, and property name
ok 15 - change file mode and reiterate content
ok 16 - deltas supported
ok 17 - property deltas supported
ok 18 - properties on /
ok 19 - deltas for typechange
ok 20 - deltas need not consume the whole preimage
ok 21 - no hang for delta trying to read past end of preimage
ok 22 - set up svn repo
ok 23 - t9135/svn.dump
# still have 3 known breakage(s)
# passed all remaining 20 test(s)
1..23
*** t9011-svn-da.sh ***
ok 1 - reject empty delta
ok 2 - delta can empty file
ok 3 - reject svndiff2
ok 4 - one-window empty delta
ok 5 - reject incomplete window header
ok 6 - reject declared delta longer than actual delta
ok 7 - two-window empty delta
ok 8 - noisy zeroes
ok 9 - reject variable-length int in magic
ok 10 - reject truncated integer
ok 11 - nonempty (but unused) preimage view
ok 12 - preimage view: right endpoint cannot backtrack
ok 13 - preimage view: left endpoint can advance
ok 14 - preimage view: offsets compared by value
ok 15 - preimage view: reject truncated preimage
ok 16 - forbid unconsumed inline data
ok 17 - reject truncated inline data
ok 18 - reject truncated inline data (after instruction section)
ok 19 - copyfrom_data
ok 20 - multiple copyfrom_data
ok 21 - incomplete multiple insn
ok 22 - catch attempt to copy missing data
ok 23 - copyfrom target to repeat data
ok 24 - copyfrom target out of order
ok 25 - catch copyfrom future
ok 26 - copy to sustain
ok 27 - catch copy that overflows
ok 28 - copyfrom source
ok 29 - copy backwards
ok 30 - offsets are relative to window
ok 31 - example from notes/svndiff
# passed all 31 test(s)
1..31
*** t9020-remote-svn.sh ***
ok 1 - simple fetch
ok 2 - repeated fetch, nothing shall change
ok 3 - fetch from a file:// url gives the same result
not ok 4 - the sha1 differ because the git-svn-id line in the commit msg contains the url # TODO known breakage
ok 5 - mark-file regeneration
ok 6 - incremental imports must lead to the same head
# still have 1 known breakage(s)
# passed all remaining 5 test(s)
1..6
*** t9100-git-svn-basic.sh ***
ok 1 - git svn --version works anywhere
ok 2 - git svn help works anywhere
ok 3 - initialize git svn
ok 4 - import an SVN revision into git
ok 5 - checkout from svn
ok 6 - try a deep --rmdir with a commit
ok 7 - detect node change from file to directory #1
ok 8 - detect node change from directory to file #1
ok 9 - detect node change from file to directory #2
ok 10 - detect node change from directory to file #2
ok 11 - remove executable bit from a file
ok 12 - add executable bit back file
ok 13 - executable file becomes a symlink to file
ok 14 - new symlink is added to a file that was also just made executable
ok 15 - modify a symlink to become a file
ok 16 - commit with UTF-8 message: locale: en_US.UTF-8
ok 17 - test fetch functionality (svn => git) with alternate GIT_SVN_ID
ok 18 - check imported tree checksums expected tree checksums
ok 19 - exit if remote refs are ambigious
ok 20 - exit if init-ing a would clobber a URL
ok 21 - init allows us to connect to another directory in the same repo
ok 22 - dcommit $rev does not clobber current branch
ok 23 - able to dcommit to a subdirectory
ok 24 - dcommit should not fail with a touched file
ok 25 - rebase should not fail with a touched file
ok 26 - able to set-tree to a subdirectory
ok 27 - git-svn works in a bare repository
ok 28 - git-svn works in in a repository with a gitdir: link
# passed all 28 test(s)
1..28
*** t9101-git-svn-props.sh ***
ok 1 - checkout working copy from svn
ok 2 - setup some commits to svn
ok 3 - initialize git svn
ok 4 - fetch revisions from svn
ok 5 - test svn:keywords ignoring
ok 6 - raw $Id$ found in kw.c
ok 7 - propset CR on crlf files
ok 8 - fetch and pull latest from svn and checkout a new wc
ok 9 - Comparing crlf
ok 10 - Comparing ne_crlf
ok 11 - Comparing lf
ok 12 - Comparing ne_lf
ok 13 - Comparing cr
ok 14 - Comparing ne_cr
ok 15 - Comparing empty_cr
ok 16 - Comparing empty_lf
ok 17 - Comparing empty
ok 18 - Comparing empty_crlf
ok 19 - Set CRLF on cr files
ok 20 - fetch and pull latest from svn
ok 21 - CRLF + $Id$
ok 22 - CRLF + $Id$ (no newline)
ok 23 - test show-ignore
ok 24 - test create-ignore
ok 25 - test propget
ok 26 - test proplist
# passed all 26 test(s)
1..26
*** t9102-git-svn-deep-rmdir.sh ***
ok 1 - initialize repo
ok 2 - mirror via git svn
ok 3 - Try a commit on rmdir
# passed all 3 test(s)
1..3
*** t9103-git-svn-tracked-directory-removed.sh ***
ok 1 - make history for tracking
ok 2 - clone repo with git
ok 3 - make sure r2 still has old file
# passed all 3 test(s)
1..3
*** t9104-git-svn-follow-parent.sh ***
ok 1 - initialize repo
ok 2 - init and fetch a moved directory
ok 3 - init and fetch from one svn-remote
ok 4 - follow deleted parent
ok 5 - follow larger parent
ok 6 - follow higher-level parent
ok 7 - follow deleted directory
ok 8 - follow-parent avoids deleting relevant info
ok 9 - track initial change if it was only made to parent
ok 10 - follow-parent is atomic
ok 11 - track multi-parent paths
ok 12 - multi-fetch continues to work
ok 13 - multi-fetch works off a 'clean' repository
# passed all 13 test(s)
1..13
*** t9105-git-svn-commit-diff.sh ***
ok 1 - initialize repo
ok 2 - test the commit-diff command
ok 3 - commit-diff to a sub-directory (with git svn config)
# passed all 3 test(s)
1..3
*** t9106-git-svn-commit-diff-clobber.sh ***
ok 1 - initialize repo
ok 2 - commit change from svn side
ok 3 - commit conflicting change from git
ok 4 - commit complementing change from git
ok 5 - dcommit fails to commit because of conflict
ok 6 - dcommit does the svn equivalent of an index merge
ok 7 - commit another change from svn side
ok 8 - multiple dcommit from git svn will not clobber svn
ok 9 - check that rebase really failed
ok 10 - resolve, continue the rebase and dcommit
# passed all 10 test(s)
1..10
*** t9107-git-svn-migrate.sh ***
ok 1 - setup old-looking metadata
ok 2 - git-svn-HEAD is a real HEAD
ok 3 - initialize old-style (v0) git svn layout
ok 4 - initialize a multi-repository repo
ok 5 - multi-fetch works on partial urls + paths
ok 6 - migrate --minimize on old inited layout
ok 7 - .rev_db auto-converted to .rev_map.UUID
# passed all 7 test(s)
1..7
*** t9108-git-svn-glob.sh ***
ok 1 - test refspec globbing
ok 2 - test left-hand-side only globbing
ok 3 - prepare test disallow multi-globs
ok 4 - test disallow multi-globs
# passed all 4 test(s)
1..4
*** t9109-git-svn-multi-glob.sh ***
ok 1 - test refspec globbing
ok 2 - test left-hand-side only globbing
ok 3 - test another branch
ok 4 - prepare test disallow multiple globs
ok 5 - test disallow multiple globs
# passed all 5 test(s)
1..5
*** t9110-git-svn-use-svm-props.sh ***
ok 1 - load svm repo
ok 2 - verify metadata for /bar
ok 3 - verify metadata for /dir/a/b/c/d/e
ok 4 - verify metadata for /dir
ok 5 - find commit based on SVN revision number
ok 6 - empty rebase
# passed all 6 test(s)
1..6
*** t9111-git-svn-use-svnsync-props.sh ***
ok 1 - load svnsync repo
ok 2 - verify metadata for /bar
ok 3 - verify metadata for /dir/a/b/c/d/e
ok 4 - verify metadata for /dir
# passed all 4 test(s)
1..4
*** t9112-git-svn-md5less-file.sh ***
ok 1 - load svn dumpfile
ok 2 - initialize git svn
ok 3 - fetch revisions from svn
# passed all 3 test(s)
1..3
*** t9113-git-svn-dcommit-new-file.sh ***
1..0 # SKIP skipping svnserve test. (set $GIT_TEST_SVNSERVE to enable)
*** t9114-git-svn-dcommit-merge.sh ***
ok 1 - setup svn repository
ok 2 - setup git mirror and merge
ok 3 - verify pre-merge ancestry
ok 4 - git svn dcommit merges
ok 5 - verify post-merge ancestry
ok 6 - verify merge commit message
# passed all 6 test(s)
1..6
*** t9115-git-svn-dcommit-funky-renames.sh ***
ok 1 - load repository with strange names
ok 2 - init and fetch repository
ok 3 - create file in existing ugly and empty dir
ok 4 - rename ugly file
ok 5 - rename pretty file
ok 6 - rename pretty file into ugly one
ok 7 - add a file with plus signs
ok 8 - clone the repository to test rebase
ok 9 - make a commit to test rebase
ok 10 - git svn rebase works inside a fresh-cloned repository
ok 11 - svn.pathnameencoding=cp932 new file on dcommit
ok 12 - svn.pathnameencoding=cp932 rename on dcommit
# passed all 12 test(s)
1..12
*** t9116-git-svn-log.sh ***
ok 1 - setup repository and import
ok 2 - run log
ok 3 - run log against a from trunk
ok 4 - test ascending revision range
ok 5 - test ascending revision range with --show-commit
ok 6 - test ascending revision range with --show-commit (sha1)
ok 7 - test descending revision range
ok 8 - test ascending revision range with unreachable revision
ok 9 - test descending revision range with unreachable revision
ok 10 - test ascending revision range with unreachable upper boundary revision and 1 commit
ok 11 - test descending revision range with unreachable upper boundary revision and 1 commit
ok 12 - test ascending revision range with unreachable lower boundary revision and 1 commit
ok 13 - test descending revision range with unreachable lower boundary revision and 1 commit
ok 14 - test ascending revision range with unreachable boundary revisions and no commits
ok 15 - test descending revision range with unreachable boundary revisions and no commits
ok 16 - test ascending revision range with unreachable boundary revisions and 1 commit
ok 17 - test descending revision range with unreachable boundary revisions and 1 commit
# passed all 17 test(s)
1..17
*** t9117-git-svn-init-clone.sh ***
ok 1 - setup svnrepo
ok 2 - basic clone
ok 3 - clone to target directory
ok 4 - clone with --stdlayout
ok 5 - clone to target directory with --stdlayout
ok 6 - init without -s/-T/-b/-t does not warn
ok 7 - clone without -s/-T/-b/-t does not warn
ok 8 - init with -s/-T/-b/-t assumes --prefix=origin/
ok 9 - clone with -s/-T/-b/-t assumes --prefix=origin/
ok 10 - init with -s/-T/-b/-t and --prefix "" still works
ok 11 - clone with -s/-T/-b/-t and --prefix "" still works
ok 12 - init with -T as a full url works
# passed all 12 test(s)
1..12
*** t9118-git-svn-funky-branch-names.sh ***
ok 1 - setup svnrepo
ok 2 - test clone with funky branch names
ok 3 - test dcommit to funky branch
ok 4 - test dcommit to scary branch
ok 5 - test dcommit to trailing_dotlock branch
# passed all 5 test(s)
1..5
*** t9119-git-svn-info.sh ***
1..0 # SKIP skipping svn-info test (SVN version: 1.9.7 not supported)
*** t9120-git-svn-clone-with-percent-escapes.sh ***
ok 1 - setup svnrepo
ok 2 - test clone with percent escapes
ok 3 - svn checkout with percent escapes
ok 4 - svn checkout with space
ok 5 - test clone trunk with percent escapes and minimize-url
ok 6 - test clone trunk with percent escapes
ok 7 - test clone --stdlayout with percent escapes
ok 8 - test clone -s with unescaped space
# passed all 8 test(s)
1..8
*** t9121-git-svn-fetch-renamed-dir.sh ***
ok 1 - load repository with renamed directory
ok 2 - init and fetch repository
# passed all 2 test(s)
1..2
*** t9122-git-svn-author.sh ***
ok 1 - setup svn repository
ok 2 - interact with it via git svn
# passed all 2 test(s)
1..2
*** t9123-git-svn-rebuild-with-rewriteroot.sh ***
ok 1 - init, fetch and checkout repository
ok 2 - remove rev_map
ok 3 - rebuild rev_map
# passed all 3 test(s)
1..3
*** t9124-git-svn-dcommit-auto-props.sh ***
ok 1 - initialize git svn
ok 2 - enable auto-props config
ok 3 - add files matching auto-props
ok 4 - disable auto-props config
ok 5 - add files matching disabled auto-props
ok 6 - check resulting svn repository
ok 7 - check renamed file
# passed all 7 test(s)
1..7
*** t9125-git-svn-multi-glob-branch-names.sh ***
ok 1 - setup svnrepo
ok 2 - test clone with multi-glob in branch names
ok 3 - test dcommit to multi-globbed branch
# passed all 3 test(s)
1..3
*** t9126-git-svn-follow-deleted-readded-directory.sh ***
1..0 # SKIP skipping svnserve test. (set $GIT_TEST_SVNSERVE to enable)
*** t9127-git-svn-partial-rebuild.sh ***
ok 1 - initialize svnrepo
ok 2 - import an early SVN revision into git
ok 3 - make full git mirror of SVN
ok 4 - fetch from git mirror and partial-rebuild
# passed all 4 test(s)
1..4
*** t9128-git-svn-cmd-branch.sh ***
ok 1 - initialize svnrepo
ok 2 - import into git
ok 3 - git svn branch tests
ok 4 - branch uses correct svn-remote
# passed all 4 test(s)
1..4
*** t9129-git-svn-i18n-commitencoding.sh ***
ok 1 - ISO8859-1 setup
ok 2 - eucJP setup
ok 3 - ISO-2022-JP setup
ok 4 - ISO8859-1 commit on git side
ok 5 - eucJP commit on git side
ok 6 - ISO-2022-JP commit on git side
ok 7 - ISO8859-1 dcommit to svn
ok 8 - eucJP dcommit to svn
ok 9 - ISO-2022-JP dcommit to svn
ok 10 - ISO-8859-1 should match UTF-8 in svn
ok 11 - eucJP should match UTF-8 in svn
ok 12 - ISO-2022-JP should match UTF-8 in svn
# passed all 12 test(s)
1..12
*** t9130-git-svn-authors-file.sh ***
ok 1 - setup svnrepo
ok 2 - start import with incomplete authors file
ok 3 - imported 2 revisions successfully
ok 4 - continues to import once authors have been added
ok 5 - authors-file against globs
ok 6 - fetch fails on ee
ok 7 - failure happened without negative side effects
ok 8 - fetch continues after authors-file is fixed
ok 9 - fresh clone with svn.authors-file in config
ok 10 - authors-file imported user without email
# passed all 10 test(s)
1..10
*** t9131-git-svn-empty-symlink.sh ***
ok 1 - load svn dumpfile
ok 2 - clone using git svn
ok 3 - enable broken symlink workaround
ok 4 - "bar" is an empty file
ok 5 - get "bar" => symlink fix from svn
ok 6 - "bar" becomes a symlink
ok 7 - clone using git svn
ok 8 - disable broken symlink workaround
ok 9 - "bar" is an empty file
ok 10 - get "bar" => symlink fix from svn
ok 11 - "bar" does not become a symlink
ok 12 - clone using git svn
ok 13 - "bar" is an empty file
ok 14 - get "bar" => symlink fix from svn
ok 15 - "bar" does not become a symlink
# passed all 15 test(s)
1..15
*** t9132-git-svn-broken-symlink.sh ***
ok 1 - load svn dumpfile
ok 2 - clone using git svn
ok 3 - "bar" is a symlink that points to "asdf"
ok 4 - get "bar" => symlink fix from svn
ok 5 - "bar" remains a proper symlink
# passed all 5 test(s)
1..5
*** t9133-git-svn-nested-git-repo.sh ***
ok 1 - setup repo with a git repo inside it
ok 2 - clone an SVN repo containing a git repo
ok 3 - SVN-side change outside of .git
ok 4 - update git svn-cloned repo
ok 5 - SVN-side change inside of .git
ok 6 - update git svn-cloned repo
ok 7 - SVN-side change in and out of .git
ok 8 - update git svn-cloned repo again
# passed all 8 test(s)
1..8
*** t9134-git-svn-ignore-paths.sh ***
ok 1 - setup test repository
ok 2 - clone an SVN repository with ignored www directory
ok 3 - init+fetch an SVN repository with ignored www directory
ok 4 - verify ignore-paths config saved by clone
ok 5 - SVN-side change outside of www
ok 6 - update git svn-cloned repo (config ignore)
ok 7 - update git svn-cloned repo (option ignore)
ok 8 - SVN-side change inside of ignored www
ok 9 - update git svn-cloned repo (config ignore)
ok 10 - update git svn-cloned repo (option ignore)
ok 11 - SVN-side change in and out of ignored www
ok 12 - update git svn-cloned repo again (config ignore)
ok 13 - update git svn-cloned repo again (option ignore)
# passed all 13 test(s)
1..13
*** t9135-git-svn-moved-branch-empty-file.sh ***
ok 1 - load svn dumpfile
ok 2 - clone using git svn
ok 3 - test that b1 exists and is empty
# passed all 3 test(s)
1..3
*** t9136-git-svn-recreated-branch-empty-file.sh ***
ok 1 - load svn dumpfile
ok 2 - clone using git svn
# passed all 2 test(s)
1..2
*** t9137-git-svn-dcommit-clobber-series.sh ***
ok 1 - initialize repo
ok 2 - (supposedly) non-conflicting change from SVN
ok 3 - some unrelated changes to git
ok 4 - change file but in unrelated area
ok 5 - attempt to dcommit with a dirty index
# passed all 5 test(s)
1..5
*** t9138-git-svn-authors-prog.sh ***
ok 1 - svn-authors setup
ok 2 - setup svnrepo
ok 3 - import authors with prog and file
ok 4 - imported 6 revisions successfully
ok 5 - authors-prog ran correctly
ok 6 - authors-file overrode authors-prog
ok 7 - authors-prog imported user without email
ok 8 - imported without authors-prog and authors-file
ok 9 - authors-prog handled special characters in username
# passed all 9 test(s)
1..9
*** t9139-git-svn-non-utf8-commitencoding.sh ***
ok 1 - ISO8859-1 setup
ok 2 - eucJP setup
ok 3 - ISO8859-1 commit on git side
ok 4 - eucJP commit on git side
ok 5 - ISO8859-1 dcommit to svn
ok 6 - eucJP dcommit to svn
# passed all 6 test(s)
1..6
*** t9140-git-svn-reset.sh ***
ok 1 - setup test repository
ok 2 - clone SVN repository with hidden directory
ok 3 - modify hidden file in SVN repo
ok 4 - fetch fails on modified hidden file
ok 5 - reset unwinds back to r1
ok 6 - refetch succeeds not ignoring any files
# passed all 6 test(s)
1..6
*** t9141-git-svn-multiple-branches.sh ***
ok 1 - setup svnrepo
ok 2 - clone multiple branch and tag paths
ok 3 - Multiple branch or tag paths require -d
ok 4 - create new branches and tags
# passed all 4 test(s)
1..4
*** t9142-git-svn-shallow-clone.sh ***
ok 1 - setup test repository
ok 2 - clone trunk with "-r HEAD"
# passed all 2 test(s)
1..2
*** t9143-git-svn-gc.sh ***
ok 1 - setup directories and test repo
ok 2 - checkout working copy from svn
ok 3 - set some properties to create an unhandled.log file
ok 4 - Setup repo
ok 5 - Fetch repo
ok 6 - make backup copy of unhandled.log
ok 7 - create leftover index
ok 8 - git svn gc runs
ok 9 - git svn index removed
ok 10 - git svn gc produces a valid gzip file
ok 11 - git svn gc does not change unhandled.log files
# passed all 11 test(s)
1..11
*** t9144-git-svn-old-rev_map.sh ***
ok 1 - setup test repository with old layout
ok 2 - old layout continues to work
# passed all 2 test(s)
1..2
*** t9145-git-svn-master-branch.sh ***
ok 1 - setup test repository
ok 2 - git svn clone --stdlayout sets up trunk as master
# passed all 2 test(s)
1..2
*** t9146-git-svn-empty-dirs.sh ***
ok 1 - initialize repo
ok 2 - clone
ok 3 - empty directories exist
ok 4 - option automkdirs set to false
ok 5 - more emptiness
ok 6 - git svn rebase creates empty directory
ok 7 - git svn mkdirs recreates empty directories
ok 8 - git svn mkdirs -r works
ok 9 - initialize trunk
ok 10 - clone trunk
ok 11 - empty directories in trunk exist
ok 12 - remove a top-level directory from svn
ok 13 - removed top-level directory does not exist
ok 14 - git svn gc-ed files work
# passed all 14 test(s)
1..14
*** t9147-git-svn-include-paths.sh ***
ok 1 - setup test repository
ok 2 - clone an SVN repository with filter to include qqq directory
ok 3 - init+fetch an SVN repository with included qqq directory
ok 4 - verify include-paths config saved by clone
ok 5 - SVN-side change outside of www
ok 6 - update git svn-cloned repo (config include)
ok 7 - update git svn-cloned repo (option include)
ok 8 - SVN-side change inside of ignored www
ok 9 - update git svn-cloned repo (config include)
ok 10 - update git svn-cloned repo (option include)
ok 11 - SVN-side change in and out of included qqq
ok 12 - update git svn-cloned repo again (config include)
ok 13 - update git svn-cloned repo again (option include)
# passed all 13 test(s)
1..13
*** t9148-git-svn-propset.sh ***
ok 1 - initialize git svn
ok 2 - fetch revisions from svn
ok 3 - add props top level
ok 4 - add multiple props
ok 5 - add props subdir
ok 6 - add props relative
# passed all 6 test(s)
1..6
*** t9150-svk-mergetickets.sh ***
ok 1 - load svk depot
ok 2 - svk merges were represented coming in
# passed all 2 test(s)
1..2
*** t9151-svn-mergeinfo.sh ***
ok 1 - load svn dump
ok 2 - all svn merges became git merge commits
ok 3 - cherry picks did not become git merge commits
ok 4 - svn non-merge merge commits did not become git merge commits
ok 5 - commit made to merged branch is reachable from the merge
ok 6 - merging two branches in one commit is detected correctly
not ok 7 - everything got merged in the end # TODO known breakage
# still have 1 known breakage(s)
# passed all remaining 6 test(s)
1..7
*** t9152-svn-empty-dirs-after-gc.sh ***
ok 1 - initialize repo
ok 2 - clone
ok 3 - git svn gc runs
ok 4 - git svn mkdirs recreates empty directories after git svn gc
# passed all 4 test(s)
1..4
*** t9153-git-svn-rewrite-uuid.sh ***
ok 1 - load svn repo
ok 2 - verify uuid
# passed all 2 test(s)
1..2
*** t9154-git-svn-fancy-glob.sh ***
ok 1 - load svn repo
ok 2 - add red branch
ok 3 - add gre branch
ok 4 - add green branch
ok 5 - add all branches
# passed all 5 test(s)
1..5
*** t9155-git-svn-fetch-deleted-tag.sh ***
ok 1 - setup svn repo
ok 2 - fetch deleted tags from same revision with checksum error
# passed all 2 test(s)
1..2
*** t9156-git-svn-fetch-deleted-tag-2.sh ***
ok 1 - setup svn repo
ok 2 - fetch deleted tags from same revision with no checksum error
# passed all 2 test(s)
1..2
*** t9157-git-svn-fetch-merge.sh ***
ok 1 - initialize source svn repo
ok 2 - clone svn repo
ok 3 - verify merge commit
# passed all 3 test(s)
1..3
*** t9158-git-svn-mergeinfo.sh ***
ok 1 - initialize source svn repo
ok 2 - clone svn repo
ok 3 - change svn:mergeinfo
ok 4 - verify svn:mergeinfo
ok 5 - change svn:mergeinfo multiline
ok 6 - verify svn:mergeinfo multiline
# passed all 6 test(s)
1..6
*** t9159-git-svn-no-parent-mergeinfo.sh ***
ok 1 - test handling of root commits in merge ranges
# passed all 1 test(s)
1..1
*** t9160-git-svn-preserve-empty-dirs.sh ***
ok 1 - initialize source svn repo containing empty dirs
ok 2 - clone svn repo with --preserve-empty-dirs
ok 3 - directory empty from inception
ok 4 - directory empty from subsequent svn commit
ok 5 - add entry to previously empty directory
ok 6 - remove non-last entry from directory
ok 7 - clone svn repo with --placeholder-file specified
ok 8 - placeholder namespace conflict with file
ok 9 - placeholder namespace conflict with directory
ok 10 - second set of svn commits and rebase
ok 11 - flag persistence during subsqeuent rebase
ok 12 - placeholder list persistence during subsqeuent rebase
# passed all 12 test(s)
1..12
*** t9161-git-svn-mergeinfo-push.sh ***
ok 1 - load svn dump
ok 2 - propagate merge information
ok 3 - check svn:mergeinfo
ok 4 - merge another branch
ok 5 - check primary parent mergeinfo respected
ok 6 - merge existing merge
ok 7 - check both parents' mergeinfo respected
ok 8 - make further commits to branch
ok 9 - second forward merge
ok 10 - check new mergeinfo added
ok 11 - reintegration merge
ok 12 - check reintegration mergeinfo
ok 13 - dcommit a merge at the top of a stack
# passed all 13 test(s)
1..13
*** t9162-git-svn-dcommit-interactive.sh ***
ok 1 - initialize repo
ok 2 - answers: y [\n] yes
ok 3 - answers: yes yes no
ok 4 - answers: yes quit
ok 5 - answers: all
# passed all 5 test(s)
1..5
*** t9163-git-svn-reset-clears-caches.sh ***
ok 1 - initialize source svn repo
ok 2 - fetch to merge-base (a)
ok 3 - rebase looses SVN merge (m)
ok 4 - reset and fetch gets the SVN merge (m) correctly
# passed all 4 test(s)
1..4
*** t9164-git-svn-dcommit-concurrent.sh ***
ok 1 - setup svn repository
ok 2 - check if post-commit hook creates a concurrent commit
ok 3 - check if pre-commit hook fails
ok 4 - dcommit error handling
ok 5 - dcommit concurrent change in non-changed file
ok 6 - dcommit concurrent non-conflicting change
ok 7 - dcommit --no-rebase concurrent non-conflicting change
ok 8 - dcommit fails on concurrent conflicting change
# passed all 8 test(s)
1..8
*** t9165-git-svn-fetch-merge-branch-of-branch.sh ***
ok 1 - initialize source svn repo
ok 2 - clone svn repo
ok 3 - verify merge commit
# passed all 3 test(s)
1..3
*** t9166-git-svn-fetch-merge-branch-of-branch2.sh ***
ok 1 - initialize source svn repo
ok 2 - clone svn repo
ok 3 - verify merge commit
# passed all 3 test(s)
1..3
*** t9167-git-svn-cmd-branch-subproject.sh ***
ok 1 - initialize svnrepo
ok 2 - import into git
ok 3 - git svn branch tests
# passed all 3 test(s)
1..3
*** t9168-git-svn-partially-globbed-names.sh ***
ok 1 - prepare test refspec prefixed globbing
ok 2 - test refspec prefixed globbing
ok 3 - prepare test left-hand-side only prefixed globbing
ok 4 - test left-hand-side only prefixed globbing
ok 5 - prepare test prefixed globs match just prefix
ok 6 - test prefixed globs match just prefix
ok 7 - prepare test disallow prefixed multi-globs
ok 8 - test disallow prefixed multi-globs
ok 9 - prepare test globbing in the middle of the word
ok 10 - test globbing in the middle of the word
ok 11 - prepare test disallow multiple asterisks in one word
ok 12 - test disallow multiple asterisks in one word
# passed all 12 test(s)
1..12
*** t9169-git-svn-dcommit-crlf.sh ***
ok 1 - setup commit repository
# passed all 1 test(s)
1..1
*** t9200-git-cvsexportcommit.sh ***
ok 1 - New file
ok 2 - Remove two files, add two and update two
ok 3 - Fail to change binary more than one generation old
ok 4 - Remove only binary files
ok 5 - Remove only a text file
ok 6 - New file with spaces in file name
ok 7 - Update file with spaces in file name
ok 8 - File with non-ascii file name
ok 9 - Mismatching patch should fail
ok 10 - Retain execute bit
ok 11 - -w option should work with relative GIT_DIR
ok 12 - check files before directories
ok 13 - re-commit a removed filename which remains in CVS attic
ok 14 - commit a file with leading spaces in the name
ok 15 - use the same checkout for Git and CVS
# passed all 15 test(s)
1..15
*** t9300-fast-import.sh ***
ok 1 - empty stream succeeds
ok 2 - truncated stream complains
ok 3 - A: create pack from stdin
ok 4 - A: verify pack
ok 5 - A: verify commit
ok 6 - A: verify tree
ok 7 - A: verify file2
ok 8 - A: verify file3
ok 9 - A: verify file4
ok 10 - A: verify tag/series-A
ok 11 - A: verify tag/series-A-blob
ok 12 - A: verify marks output
ok 13 - A: verify marks import
ok 14 - A: tag blob by sha1
ok 15 - A: verify marks import does not crash
ok 16 - A: verify pack
ok 17 - A: verify diff
ok 18 - A: export marks with large values
ok 19 - B: fail on invalid blob sha1
ok 20 - B: accept branch name "TEMP_TAG"
ok 21 - B: accept empty committer
ok 22 - B: accept and fixup committer with no name
ok 23 - B: fail on invalid committer (1)
ok 24 - B: fail on invalid committer (2)
ok 25 - B: fail on invalid committer (3)
ok 26 - B: fail on invalid committer (4)
ok 27 - B: fail on invalid committer (5)
ok 28 - C: incremental import create pack from stdin
ok 29 - C: verify pack
ok 30 - C: validate reuse existing blob
ok 31 - C: verify commit
ok 32 - C: validate rename result
ok 33 - D: inline data in commit
ok 34 - D: verify pack
ok 35 - D: validate new files added
ok 36 - D: verify file5
ok 37 - D: verify file6
ok 38 - E: rfc2822 date, --date-format=raw
ok 39 - E: rfc2822 date, --date-format=rfc2822
ok 40 - E: verify pack
ok 41 - E: verify commit
ok 42 - F: non-fast-forward update skips
ok 43 - F: verify pack
ok 44 - F: verify other commit
ok 45 - G: non-fast-forward update forced
ok 46 - G: verify pack
ok 47 - G: branch changed, but logged
ok 48 - H: deletall, add 1
ok 49 - H: verify pack
ok 50 - H: validate old files removed, new files added
ok 51 - H: verify file
ok 52 - I: export-pack-edges
ok 53 - I: verify edge list
ok 54 - J: reset existing branch creates empty commit
ok 55 - J: branch has 1 commit, empty tree
ok 56 - J: tag must fail on empty branch
ok 57 - K: reinit branch with from
ok 58 - K: verify K^1 = branch^1
ok 59 - L: verify internal tree sorting
ok 60 - L: nested tree copy does not corrupt deltas
ok 61 - M: rename file in same subdirectory
ok 62 - M: rename file to new subdirectory
ok 63 - M: rename subdirectory to new subdirectory
ok 64 - M: rename root to subdirectory
ok 65 - N: copy file in same subdirectory
ok 66 - N: copy then modify subdirectory
ok 67 - N: copy dirty subdirectory
ok 68 - N: copy directory by id
ok 69 - N: read and copy directory
ok 70 - N: empty directory reads as missing
ok 71 - N: copy root directory by tree hash
ok 72 - N: copy root by path
ok 73 - N: delete directory by copying
ok 74 - N: modify copied tree
ok 75 - N: reject foo/ syntax
ok 76 - N: reject foo/ syntax in copy source
ok 77 - N: reject foo/ syntax in rename source
ok 78 - N: reject foo/ syntax in ls argument
ok 79 - N: copy to root by id and modify
ok 80 - N: extract subtree
ok 81 - N: modify subtree, extract it, and modify again
ok 82 - O: comments are all skipped
ok 83 - O: blank lines not necessary after data commands
ok 84 - O: repack before next test
ok 85 - O: blank lines not necessary after other commands
ok 86 - O: progress outputs as requested by input
ok 87 - P: superproject & submodule mix
ok 88 - P: verbatim SHA gitlinks
ok 89 - P: fail on inline gitlink
ok 90 - P: fail on blob mark in gitlink
ok 91 - Q: commit notes
ok 92 - Q: verify pack
ok 93 - Q: verify first commit
ok 94 - Q: verify second commit
ok 95 - Q: verify third commit
ok 96 - Q: verify first notes commit
ok 97 - Q: verify first notes tree
ok 98 - Q: verify first note for first commit
ok 99 - Q: verify first note for second commit
ok 100 - Q: verify first note for third commit
ok 101 - Q: verify second notes commit
ok 102 - Q: verify second notes tree
ok 103 - Q: verify second note for first commit
ok 104 - Q: verify first note for second commit
ok 105 - Q: verify first note for third commit
ok 106 - Q: verify third notes commit
ok 107 - Q: verify third notes tree
ok 108 - Q: verify third note for first commit
ok 109 - Q: verify fourth notes commit
ok 110 - Q: verify fourth notes tree
ok 111 - Q: verify second note for second commit
ok 112 - Q: deny note on empty branch
ok 113 - R: abort on unsupported feature
ok 114 - R: supported feature is accepted
ok 115 - R: abort on receiving feature after data command
ok 116 - R: only one import-marks feature allowed per stream
ok 117 - R: export-marks feature results in a marks file being created
ok 118 - R: export-marks options can be overridden by commandline options
ok 119 - R: catch typo in marks file name
ok 120 - R: import and output marks can be the same file
ok 121 - R: --import-marks=foo --output-marks=foo to create foo fails
ok 122 - R: --import-marks-if-exists
ok 123 - R: feature import-marks-if-exists
ok 124 - R: import to output marks works without any content
ok 125 - R: import marks prefers commandline marks file over the stream
ok 126 - R: multiple --import-marks= should be honoured
ok 127 - R: feature relative-marks should be honoured
ok 128 - R: feature no-relative-marks should be honoured
ok 129 - R: feature ls supported
ok 130 - R: feature cat-blob supported
ok 131 - R: cat-blob-fd must be a nonnegative integer
ok 132 - R: print old blob
ok 133 - R: in-stream cat-blob-fd not respected
ok 134 - R: print mark for new blob
ok 135 - R: print new blob
ok 136 - R: print new blob by sha1
ok 137 - setup: big file
ok 138 - R: print two blobs to stdout
ok 139 - R: copy using cat-file
ok 140 - R: print blob mid-commit
ok 141 - R: print staged blob within commit
ok 142 - R: quiet option results in no stats being output
ok 143 - R: feature done means terminating "done" is mandatory
ok 144 - R: terminating "done" with trailing gibberish is ok
ok 145 - R: terminating "done" within commit
ok 146 - R: die on unknown option
ok 147 - R: unknown commandline options are rejected
ok 148 - R: die on invalid option argument
ok 149 - R: ignore non-git options
ok 150 - R: corrupt lines do not mess marks file
ok 151 - R: blob bigger than threshold
ok 152 - R: verify created pack
ok 153 - R: verify written objects
ok 154 - R: blob appears only once
ok 155 - S: initialize for S tests
ok 156 - S: filemodify with garbage after mark must fail
ok 157 - S: filemodify with garbage after inline must fail
ok 158 - S: filemodify with garbage after sha1 must fail
ok 159 - S: notemodify with garbage after mark dataref must fail
ok 160 - S: notemodify with garbage after inline dataref must fail
ok 161 - S: notemodify with garbage after sha1 dataref must fail
ok 162 - S: notemodify with garbage after mark commit-ish must fail
ok 163 - S: from with garbage after mark must fail
ok 164 - S: merge with garbage after mark must fail
ok 165 - S: tag with garbage after mark must fail
ok 166 - S: cat-blob with garbage after mark must fail
ok 167 - S: ls with garbage after mark must fail
ok 168 - S: ls with garbage after sha1 must fail
ok 169 - T: ls root tree
ok 170 - T: delete branch
ok 171 - T: empty reset doesnt delete branch
ok 172 - U: initialize for U tests
ok 173 - U: filedelete file succeeds
ok 174 - U: validate file delete result
ok 175 - U: filedelete directory succeeds
ok 176 - U: validate directory delete result
ok 177 - U: filedelete root succeeds
ok 178 - U: validate root delete result
ok 179 - V: checkpoint helper does not get stuck with extra output
ok 180 - V: checkpoint updates refs after reset
ok 181 - V: checkpoint updates refs and marks after commit
ok 182 - V: checkpoint updates refs and marks after commit (no new objects)
ok 183 - V: checkpoint updates tags after tag
# passed all 183 test(s)
1..183
*** t9301-fast-import-notes.sh ***
ok 1 - set up master branch
ok 2 - add notes with simple M command
ok 3 - add notes with simple N command
ok 4 - update existing notes with N command
ok 5 - add concatentation notes with M command
ok 6 - verify that deleteall also removes notes
ok 7 - verify that later N commands override earlier M commands
ok 8 - add lots of commits and notes
ok 9 - verify that lots of notes trigger a fanout scheme
ok 10 - verify that importing a notes tree respects the fanout scheme
ok 11 - verify that non-notes are untouched by a fanout change
ok 12 - change a few existing notes
ok 13 - verify that changing notes respect existing fanout
ok 14 - remove lots of notes
ok 15 - verify that removing notes trigger fanout consolidation
ok 16 - verify that non-notes are untouched by a fanout change
ok 17 - add notes to 16 commits in each of 10 refs
# passed all 17 test(s)
1..17
*** t9302-fast-import-unpack-limit.sh ***
ok 1 - create loose objects on import
ok 2 - bigger packs are preserved
ok 3 - lookups after checkpoint works
# passed all 3 test(s)
1..3
*** t9303-fast-import-compression.sh ***
ok 1 - fast-import (packed) with -c core.compression=0
ok 2 - fast-import (packed) with -c core.compression=9
ok 3 - fast-import (packed) with -c core.compression=0 -c pack.compression=0
ok 4 - fast-import (packed) with -c core.compression=9 -c pack.compression=0
ok 5 - fast-import (packed) with -c core.compression=0 -c pack.compression=9
ok 6 - fast-import (packed) with -c core.compression=9 -c pack.compression=9
ok 7 - fast-import (packed) with -c pack.compression=0
ok 8 - fast-import (packed) with -c pack.compression=9
ok 9 - fast-import (loose) with -c core.compression=0
ok 10 - fast-import (loose) with -c core.compression=9
ok 11 - fast-import (loose) with -c core.compression=0 -c core.loosecompression=0
ok 12 - fast-import (loose) with -c core.compression=9 -c core.loosecompression=0
ok 13 - fast-import (loose) with -c core.compression=0 -c core.loosecompression=9
ok 14 - fast-import (loose) with -c core.compression=9 -c core.loosecompression=9
ok 15 - fast-import (loose) with -c core.loosecompression=0
ok 16 - fast-import (loose) with -c core.loosecompression=9
# passed all 16 test(s)
1..16
*** t9350-fast-export.sh ***
ok 1 - setup
ok 2 - fast-export | fast-import
ok 3 - fast-export master~2..master
ok 4 - iso-8859-1
ok 5 - import/export-marks
ok 6 - set up faked signed tag
ok 7 - signed-tags=abort
ok 8 - signed-tags=verbatim
ok 9 - signed-tags=strip
ok 10 - signed-tags=warn-strip
ok 11 - setup submodule
ok 12 - submodule fast-export | fast-import
ok 13 - setup copies
ok 14 - fast-export -C -C | fast-import
ok 15 - fast-export | fast-import when master is tagged
ok 16 - cope with tagger-less tags
ok 17 - setup for limiting exports by PATH
ok 18 - dropping tag of filtered out object
ok 19 - rewriting tag of filtered out object
not ok 20 - no exact-ref revisions included # TODO known breakage
ok 21 - path limiting with import-marks does not lose unmodified files
ok 22 - full-tree re-shows unmodified files
ok 23 - set-up a few more tags for tag export tests
ok 24 - tree_tag
ok 25 - tree_tag-obj
ok 26 - tag-obj_tag
ok 27 - tag-obj_tag-obj
ok 28 - directory becomes symlink
ok 29 - fast-export quotes pathnames
ok 30 - test bidirectionality
ok 31 - avoid uninteresting refs
ok 32 - refs are updated even if no commits need to be exported
ok 33 - use refspec
ok 34 - delete refspec
ok 35 - when using -C, do not declare copy when source of copy is also modified
ok 36 - merge commit gets exported with --import-marks
# still have 1 known breakage(s)
# passed all remaining 35 test(s)
1..36
*** t9351-fast-export-anonymize.sh ***
ok 1 - setup simple repo
ok 2 - export anonymized stream
ok 3 - stream omits path names
ok 4 - stream allows master as refname
ok 5 - stream omits other refnames
ok 6 - stream omits identities
ok 7 - stream omits tag message
ok 8 - import stream to new repository
ok 9 - result has two branches
ok 10 - repo has original shape and timestamps
ok 11 - root tree has original shape
ok 12 - paths in subdir ended up in one tree
ok 13 - tag points to branch tip
ok 14 - idents are shared
# passed all 14 test(s)
1..14
*** t9400-git-cvsserver-server.sh ***
ok 1 - setup
ok 2 - basic checkout
ok 3 - pserver authentication
ok 4 - pserver authentication failure (non-anonymous user)
ok 5 - pserver authentication success (non-anonymous user with password)
ok 6 - pserver authentication (login)
ok 7 - pserver authentication failure (login/non-anonymous user)
ok 8 - req_Root failure (relative pathname)
ok 9 - req_Root failure (conflicting roots)
ok 10 - req_Root (strict paths)
ok 11 - req_Root failure (strict-paths)
ok 12 - req_Root (w/o strict-paths)
ok 13 - req_Root failure (w/o strict-paths)
ok 14 - req_Root (base-path)
ok 15 - req_Root failure (base-path)
ok 16 - req_Root (export-all)
ok 17 - req_Root failure (export-all w/o whitelist)
ok 18 - req_Root (everything together)
ok 19 - gitcvs.enabled = false
ok 20 - gitcvs.ext.enabled = true
ok 21 - gitcvs.ext.enabled = false
ok 22 - gitcvs.dbname
ok 23 - gitcvs.ext.dbname
ok 24 - cvs update (create new file)
ok 25 - cvs update (update existing file)
not ok 26 - cvs update w/o -d doesn't create subdir (TODO) # TODO known breakage
ok 27 - cvs update (subdirectories)
ok 28 - cvs update (delete file)
ok 29 - cvs update (re-add deleted file)
ok 30 - cvs update (merge)
ok 31 - cvs update (conflict merge)
ok 32 - cvs update (-C)
ok 33 - cvs update (merge no-op)
ok 34 - cvs update (-p)
ok 35 - cvs update (module list supports packed refs)
ok 36 - cvs status
ok 37 - cvs status (nonrecursive)
ok 38 - cvs status (no subdirs in header)
ok 39 - cvs co -c (shows module database)
ok 40 - cvs log
ok 41 - cvs annotate
ok 42 - create remote-cvs helper
ok 43 - cvs server does not run with vanilla git-shell
ok 44 - configure git shell to run cvs server
ok 45 - cvs server can run with recommended config
# still have 1 known breakage(s)
# passed all remaining 44 test(s)
1..45
*** t9401-git-cvsserver-crlf.sh ***
ok 1 - setup
ok 2 - cvs co (default crlf)
ok 3 - cvs co (allbinary)
ok 4 - cvs co (use attributes/allbinary)
ok 5 - cvs co (use attributes)
ok 6 - adding files
ok 7 - updating
ok 8 - cvs co (use attributes/guess)
ok 9 - setup multi-line files
ok 10 - cvs co (guess)
ok 11 - cvs co another copy (guess)
ok 12 - cvs status - sticky options
ok 13 - add text (guess)
ok 14 - add bin (guess)
ok 15 - remove files (guess)
ok 16 - cvs ci (guess)
ok 17 - update subdir of other copy (guess)
ok 18 - update/merge full other copy (guess)
# passed all 18 test(s)
1..18
*** t9402-git-cvsserver-refs.sh ***
ok 1 - setup v1, b1
ok 2 - cvs co v1
ok 3 - cvs co b1
ok 4 - cvs co b1 [cvswork3]
not ok 5 - edit cvswork3 and save diff
#	
#		(
#			cd cvswork3 &&
#			sed -e "s/line1/line1 - data/" adir/afile >adir/afileNEW &&
#			mv -f adir/afileNEW adir/afile &&
#			echo "afile5" >adir/afile5 &&
#			rm t2 &&
#			cvs -f add adir/afile5 &&
#			cvs -f rm t2 &&
#			! cvs -f diff -N -u >"$WORKDIR/cvswork3edit.diff"
#		)
#	
ok 6 - setup v1.2 on b1
ok 7 - cvs -f up (on b1 adir)
ok 8 - cvs up (on b1 /)
ok 9 - cvs up (on b1 /) (again; check CVS/Tag files)
ok 10 - cvs up -r v1
ok 11 - cvs up
ok 12 - cvs up (again; check CVS/Tag files)
ok 13 - setup simple b2
ok 14 - cvs co b2 [into cvswork2]
not ok 15 - root dir edit [cvswork2]
#	
#		(
#			cd cvswork2 && echo "Line 2" >>textfile.c &&
#			! cvs -f diff -u >"$WORKDIR/cvsEdit1.diff" &&
#			cvs -f commit -m "edit textfile.c" textfile.c
#		) >cvsEdit1.log 2>&1
#	
not ok 16 - root dir rm file [cvswork2]
#	
#		(
#			cd cvswork2 &&
#			cvs -f rm -f t2 &&
#			cvs -f diff -u >../cvsEdit2-empty.diff &&
#			! cvs -f diff -N -u >"$WORKDIR/cvsEdit2-N.diff" &&
#			cvs -f commit -m "rm t2"
#		) >cvsEdit2.log 2>&1
#	
not ok 17 - subdir edit/add/rm files [cvswork2]
#	
#		(
#			cd cvswork2 &&
#			sed -e "s/line 1/line 1 (v2)/" adir/bdir/bfile >adir/bdir/bfileNEW &&
#			mv -f adir/bdir/bfileNEW adir/bdir/bfile &&
#			rm adir/bdir/b2file &&
#			cd adir &&
#			cvs -f rm bdir/b2file &&
#			echo "4th file" >bdir/b4file &&
#			cvs -f add bdir/b4file &&
#			! cvs -f diff -N -u >"$WORKDIR/cvsEdit3.diff" &&
#			git fetch gitcvs.git b2:b2 &&
#			(
#			  cd .. &&
#			  ! cvs -f diff -u -N -r v1.2 >"$WORKDIR/cvsEdit3-v1.2.diff" &&
#			  ! cvs -f diff -u -N -r v1.2 -r v1 >"$WORKDIR/cvsEdit3-v1.2-v1.diff"
#			) &&
#			cvs -f commit -m "various add/rm/edit"
#		) >cvs.log 2>&1
#	
not ok 18 - validate result of edits [cvswork2]
#	
#		git fetch gitcvs.git b2:b2 &&
#		git tag v2 b2 &&
#		git push --tags gitcvs.git b2:b2 &&
#		check_start_tree cvswork2 &&
#		check_file cvswork2 textfile.c v2 &&
#		check_file cvswork2 adir/afile v2 &&
#		check_file cvswork2 adir/a2file v2 &&
#		check_file cvswork2 adir/bdir/bfile v2 &&
#		check_file cvswork2 adir/bdir/b4file v2 &&
#		check_end_full_tree cvswork2 v2
#	
not ok 19 - validate basic diffs saved during above cvswork2 edits
#	
#		test $(grep Index: cvsEdit1.diff | wc -l) = 1 &&
#		test_must_be_empty cvsEdit2-empty.diff &&
#		test $(grep Index: cvsEdit2-N.diff | wc -l) = 1 &&
#		test $(grep Index: cvsEdit3.diff | wc -l) = 3 &&
#		rm -rf diffSandbox &&
#		git clone -q -n . diffSandbox &&
#		(
#			cd diffSandbox &&
#			git checkout v1 &&
#			git apply -p0 --index <"$WORKDIR/cvsEdit1.diff" &&
#			git apply -p0 --index <"$WORKDIR/cvsEdit2-N.diff" &&
#			git apply -p0 --directory=adir --index <"$WORKDIR/cvsEdit3.diff" &&
#			git diff --exit-code v2
#		) >"check_diff_apply.out" 2>&1
#	
not ok 20 - validate v1.2 diff saved during last cvswork2 edit
#	
#		test $(grep Index: cvsEdit3-v1.2.diff | wc -l) = 9 &&
#		check_diff cvsEdit3-v1.2.diff v1.2 v2
#	
not ok 21 - validate v1.2 v1 diff saved during last cvswork2 edit
#	
#		test $(grep Index: cvsEdit3-v1.2-v1.diff | wc -l) = 9 &&
#		check_diff cvsEdit3-v1.2-v1.diff v1.2 v1
#	
not ok 22 - cvs up [cvswork2]
#	
#		( cd cvswork2 && cvs -f up ) >cvs.log 2>&1 &&
#		check_start_tree cvswork2 &&
#		check_file cvswork2 textfile.c v2 &&
#		check_file cvswork2 adir/afile v2 &&
#		check_file cvswork2 adir/a2file v2 &&
#		check_file cvswork2 adir/bdir/bfile v2 &&
#		check_file cvswork2 adir/bdir/b4file v2 &&
#		check_end_full_tree cvswork2 v2
#	
not ok 23 - cvs up -r b2 [back to cvswork]
#	
#		( cd cvswork && cvs -f up -r b2 ) >cvs.log 2>&1 &&
#		check_start_tree cvswork &&
#		check_file cvswork textfile.c v2 &&
#		check_file cvswork adir/afile v2 &&
#		check_file cvswork adir/a2file v2 &&
#		check_file cvswork adir/bdir/bfile v2 &&
#		check_file cvswork adir/bdir/b4file v2 &&
#		check_end_full_tree cvswork v2
#	
ok 24 - cvs up -r b1
ok 25 - cvs up -A
ok 26 - cvs up (check CVS/Tag files)
ok 27 - cvs up -r heads/b1
not ok 28 - cvs up -r heads_-s-b2 (cvsserver escape mechanism)
#	
#		( cd cvswork && cvs -f up -r heads_-s-b2 ) >cvs.log 2>&1 &&
#		check_start_tree cvswork &&
#		check_file cvswork textfile.c v2 &&
#		check_file cvswork adir/afile v2 &&
#		check_file cvswork adir/a2file v2 &&
#		check_file cvswork adir/bdir/bfile v2 &&
#		check_file cvswork adir/bdir/b4file v2 &&
#		check_end_full_tree cvswork v2
#	
ok 29 - cvs up -r $(git rev-parse v1)
ok 30 - cvs diff -r v1 -u
not ok 31 - cvs diff -N -r v2 -u
#	
#		( cd cvswork && ! cvs -f diff -N -r v2 -u >../cvsDiff.out 2>../cvs.log ) &&
#		test_must_be_empty cvs.log &&
#		test -s cvsDiff.out &&
#		check_diff cvsDiff.out v2 v1 >check_diff.out 2>&1
#	
not ok 32 - cvs diff -N -r v2 -r v1.2
#	
#		( cd cvswork && ! cvs -f diff -N -r v2 -r v1.2 -u >../cvsDiff.out 2>../cvs.log ) &&
#		test_must_be_empty cvs.log &&
#		test -s cvsDiff.out &&
#		check_diff cvsDiff.out v2 v1.2 >check_diff.out 2>&1
#	
not ok 33 - apply early [cvswork3] diff to b3
#	
#		git clone -q . gitwork3 &&
#		(
#			cd gitwork3 &&
#			git checkout -b b3 v1 &&
#			git apply -p0 --index <"$WORKDIR/cvswork3edit.diff" &&
#			git commit -m "cvswork3 edits applied"
#		) &&
#		git fetch gitwork3 b3:b3 &&
#		git tag v3 b3
#	
not ok 34 - check [cvswork3] diff
#	
#		( cd cvswork3 && ! cvs -f diff -N -u >"$WORKDIR/cvsDiff.out" 2>../cvs.log ) &&
#		test_must_be_empty cvs.log &&
#		test -s cvsDiff.out &&
#		test $(grep Index: cvsDiff.out | wc -l) = 3 &&
#		test_cmp cvsDiff.out cvswork3edit.diff &&
#		check_diff cvsDiff.out v1 v3 >check_diff.out 2>&1
#	
ok 35 - merge early [cvswork3] b3 with b1
not ok 36 - cvs up dirty [cvswork3]
#	
#		(
#			cd cvswork3 &&
#			cvs -f up &&
#			! cvs -f diff -N -u >"$WORKDIR/cvsDiff.out"
#		) >cvs.log 2>&1 &&
#		test -s cvsDiff.out &&
#		test $(grep Index: cvsDiff.out | wc -l) = 2 &&
#		check_start_tree cvswork3 &&
#		check_file cvswork3 textfile.c v3merged &&
#		check_file cvswork3 t3 v3merged &&
#		check_file cvswork3 adir/afile v3merged &&
#		check_file cvswork3 adir/a3file v3merged &&
#		check_file cvswork3 adir/afile5 v3merged &&
#		check_file cvswork3 adir/bdir/bfile v3merged &&
#		check_file cvswork3 adir/bdir/b3file v3merged &&
#		check_file cvswork3 cdir/cfile v3merged &&
#		check_end_full_tree cvswork3 v3merged
#	
not ok 37 - cvs commit [cvswork3]
#	
#		(
#			cd cvswork3 &&
#			cvs -f commit -m "dirty sandbox after auto-merge"
#		) >cvs.log 2>&1 &&
#		check_start_tree cvswork3 &&
#		check_file cvswork3 textfile.c v3merged &&
#		check_file cvswork3 t3 v3merged &&
#		check_file cvswork3 adir/afile v3merged &&
#		check_file cvswork3 adir/a3file v3merged &&
#		check_file cvswork3 adir/afile5 v3merged &&
#		check_file cvswork3 adir/bdir/bfile v3merged &&
#		check_file cvswork3 adir/bdir/b3file v3merged &&
#		check_file cvswork3 cdir/cfile v3merged &&
#		check_end_full_tree cvswork3 v3merged &&
#		git fetch gitcvs.git b3:b4 &&
#		git tag v4.1 b4 &&
#		git diff --exit-code v4.1 v3merged >check_diff_apply.out 2>&1
#	
# failed 17 among 37 test(s)
1..37
*** t9500-gitweb-standalone-no-errors.sh ***
1..0 # SKIP skipping gitweb tests, CGI & CGI::Util & CGI::Carp modules not available
*** t9501-gitweb-standalone-http-status.sh ***
1..0 # SKIP skipping gitweb tests, CGI & CGI::Util & CGI::Carp modules not available
*** t9502-gitweb-standalone-parse-output.sh ***
1..0 # SKIP skipping gitweb tests, CGI & CGI::Util & CGI::Carp modules not available
*** t9600-cvsimport.sh ***
1..0 # SKIP skipping cvsimport tests, cvsps not found
*** t9601-cvsimport-vendor-branch.sh ***
1..0 # SKIP skipping cvsimport tests, cvsps not found
*** t9602-cvsimport-branches-tags.sh ***
1..0 # SKIP skipping cvsimport tests, cvsps not found
*** t9603-cvsimport-patchsets.sh ***
1..0 # SKIP skipping cvsimport tests, cvsps not found
*** t9604-cvsimport-timestamps.sh ***
1..0 # SKIP skipping cvsimport tests, cvsps not found
*** t9700-perl-git.sh ***
ok 1 - set up test repository
# run 1: Perl API (perl $(@D)/t/t9700/test.pl)
ok 2 - use Git;
ok 3 - open repository
ok 4 - config scalar: string
ok 5 - config array: string
ok 6 - config scalar: nonexistent
ok 7 - config array: nonexistent
ok 8 - config_int: integer
ok 9 - config_int: nonexistent
ok 10 - config_bool: true
ok 11 - config_bool: false
ok 12 - config_path: ~/foo expansion
ok 13 - config_path: multiple values
ok 14 - get_color
ok 15 - config: multivar
ok 16 - config_bool: non-boolean values fail
ok 17 - ident scalar: author (type)
ok 18 - ident scalar: committer (type)
ok 19 - ident scalar: invalid ident string (no parsing)
ok 20 - ident array: author
ok 21 - ident array: author
ok 22 - ident array: ident string
ok 23 - ident array: invalid ident string
ok 24 - ident_person: author (type)
ok 25 - ident_person: ident string
ok 26 - ident_person: array
ok 27 - (get file hash)
ok 28 - cat_blob: size
ok 29 - cat_blob: data
ok 30 - hash_object: roundtrip
ok 31 - hash_and_insert_object: returns hash
ok 32 - cat_blob: roundtrip size
ok 33 - cat_blob: roundtrip data
ok 34 - repo_path
ok 35 - wc_path
ok 36 - wc_subdir initial
ok 37 - wc_subdir after wc_chdir
ok 38 - config after wc_chdir
ok 39 - repo_path (2)
ok 40 - wc_path (2)
ok 41 - wc_subdir initial (2)
ok 42 - rev-parse returned hash
ok 43 - log . does not show last commit
ok 44 - cat_blob(outside): size
ok 45 - unquote unquoted path
ok 46 - unquote simple quoted path
ok 47 - unquote escape sequences
1..47
# test_external test Perl API was ok
# test_external_without_stderr test no stderr: Perl API was ok
*** t9800-git-p4-basic.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9801-git-p4-branch.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9802-git-p4-filetype.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9803-git-p4-shell-metachars.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9804-git-p4-label.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9805-git-p4-skip-submit-edit.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9806-git-p4-options.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9807-git-p4-submit.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9808-git-p4-chdir.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9809-git-p4-client-view.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9810-git-p4-rcs.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9811-git-p4-label-import.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9812-git-p4-wildcards.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9813-git-p4-preserve-users.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9814-git-p4-rename.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9815-git-p4-submit-fail.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9816-git-p4-locked.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9817-git-p4-exclude.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9818-git-p4-block.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9819-git-p4-case-folding.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9820-git-p4-editor-handling.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9821-git-p4-path-variations.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9822-git-p4-path-encoding.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9823-git-p4-mock-lfs.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9824-git-p4-git-lfs.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9825-git-p4-handle-utf16-without-bom.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9826-git-p4-keep-empty-commits.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9827-git-p4-change-filetype.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9828-git-p4-map-user.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9829-git-p4-jobs.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9830-git-p4-symlink-dir.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9831-git-p4-triggers.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9832-unshelve.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9833-errors.sh ***
1..0 # SKIP skipping git p4 tests; no p4 or p4d
*** t9901-git-web--browse.sh ***
ok 1 - URL with an ampersand in it
ok 2 - URL with a semi-colon in it
ok 3 - URL with a hash in it
ok 4 - browser paths are properly quoted
ok 5 - browser command allows arbitrary shell code
# passed all 5 test(s)
1..5
*** t9902-completion.sh ***
ok 1 - setup for __git_find_repo_path/__gitdir tests
ok 2 - __git_find_repo_path - from command line (through $__git_dir)
ok 3 - __git_find_repo_path - .git directory in cwd
ok 4 - __git_find_repo_path - .git directory in parent
ok 5 - __git_find_repo_path - cwd is a .git directory
ok 6 - __git_find_repo_path - parent is a .git directory
ok 7 - __git_find_repo_path - $GIT_DIR set while .git directory in cwd
ok 8 - __git_find_repo_path - $GIT_DIR set while .git directory in parent
ok 9 - __git_find_repo_path - from command line while "git -C"
ok 10 - __git_find_repo_path - relative dir from command line and "git -C"
ok 11 - __git_find_repo_path - $GIT_DIR set while "git -C"
ok 12 - __git_find_repo_path - relative dir in $GIT_DIR and "git -C"
ok 13 - __git_find_repo_path - "git -C" while .git directory in cwd
ok 14 - __git_find_repo_path - "git -C" while cwd is a .git directory
ok 15 - __git_find_repo_path - "git -C" while .git directory in parent
ok 16 - __git_find_repo_path - non-existing path in "git -C"
ok 17 - __git_find_repo_path - non-existing path in $__git_dir
ok 18 - __git_find_repo_path - non-existing $GIT_DIR
ok 19 - __git_find_repo_path - gitfile in cwd
ok 20 - __git_find_repo_path - gitfile in parent
ok 21 - __git_find_repo_path - resulting path avoids symlinks
ok 22 - __git_find_repo_path - not a git repository
ok 23 - __gitdir - finds repo
ok 24 - __gitdir - returns error when cant find repo
ok 25 - __gitdir - repo as argument
ok 26 - __gitdir - remote as argument
ok 27 - __git_dequote - plain unquoted word
ok 28 - __git_dequote - backslash escaped
ok 29 - __git_dequote - single quoted
ok 30 - __git_dequote - double quoted
ok 31 - __git_dequote - open single quote
ok 32 - __git_dequote - open double quote
ok 33 - __gitcomp_direct - puts everything into COMPREPLY as-is
ok 34 - __gitcomp - trailing space - options
ok 35 - __gitcomp - trailing space - config keys
ok 36 - __gitcomp - option parameter
ok 37 - __gitcomp - prefix
ok 38 - __gitcomp - suffix
ok 39 - __gitcomp - ignore optional negative options
ok 40 - __gitcomp - ignore/narrow optional negative options
ok 41 - __gitcomp - ignore/narrow optional negative options
ok 42 - __gitcomp - expand all negative options
ok 43 - __gitcomp - expand/narrow all negative options
ok 44 - __gitcomp - doesnt fail because of invalid variable name
ok 45 - __gitcomp_nl - trailing space
ok 46 - __gitcomp_nl - prefix
ok 47 - __gitcomp_nl - suffix
ok 48 - __gitcomp_nl - no suffix
ok 49 - __gitcomp_nl - doesnt fail because of invalid variable name
ok 50 - __git_remotes - list remotes from $GIT_DIR/remotes and from config file
ok 51 - __git_is_configured_remote
ok 52 - setup for ref completion
ok 53 - __git_refs - simple
ok 54 - __git_refs - full refs
ok 55 - __git_refs - repo given on the command line
ok 56 - __git_refs - remote on local file system
ok 57 - __git_refs - remote on local file system - full refs
ok 58 - __git_refs - configured remote
ok 59 - __git_refs - configured remote - full refs
ok 60 - __git_refs - configured remote - repo given on the command line
ok 61 - __git_refs - configured remote - full refs - repo given on the command line
ok 62 - __git_refs - configured remote - remote name matches a directory
ok 63 - __git_refs - URL remote
ok 64 - __git_refs - URL remote - full refs
ok 65 - __git_refs - non-existing remote
ok 66 - __git_refs - non-existing remote - full refs
ok 67 - __git_refs - non-existing URL remote
ok 68 - __git_refs - non-existing URL remote - full refs
ok 69 - __git_refs - not in a git repository
ok 70 - __git_refs - unique remote branches for git checkout DWIMery
ok 71 - __git_refs - after --opt=
ok 72 - __git_refs - after --opt= - full refs
ok 73 - __git refs - exluding refs
ok 74 - __git refs - exluding full refs
ok 75 - setup for filtering matching refs
ok 76 - __git_refs - dont filter refs unless told so
ok 77 - __git_refs - only matching refs
ok 78 - __git_refs - only matching refs - full refs
ok 79 - __git_refs - only matching refs - remote on local file system
ok 80 - __git_refs - only matching refs - configured remote
ok 81 - __git_refs - only matching refs - remote - full refs
ok 82 - __git_refs - only matching refs - checkout DWIMery
ok 83 - teardown after filtering matching refs
ok 84 - __git_refs - for-each-ref format specifiers in prefix
ok 85 - __git_complete_refs - simple
ok 86 - __git_complete_refs - matching
ok 87 - __git_complete_refs - remote
ok 88 - __git_complete_refs - track
ok 89 - __git_complete_refs - current word
ok 90 - __git_complete_refs - prefix
ok 91 - __git_complete_refs - suffix
ok 92 - __git_complete_fetch_refspecs - simple
ok 93 - __git_complete_fetch_refspecs - matching
ok 94 - __git_complete_fetch_refspecs - prefix
ok 95 - __git_complete_fetch_refspecs - fully qualified
ok 96 - __git_complete_fetch_refspecs - fully qualified & prefix
ok 97 - teardown after ref completion
ok 98 - setup for path completion tests
ok 99 - __git_complete_index_file - simple
ok 100 - __git_complete_index_file - escaped characters on cmdline
ok 101 - __git_complete_index_file - quoted characters on cmdline
ok 102 - __git_complete_index_file - UTF-8 in ls-files output
ok 103 - __git_complete_index_file - C-style escapes in ls-files output
ok 104 - __git_complete_index_file - \nnn-escaped characters in ls-files output
ok 105 - __git_complete_index_file - removing repeated quoted path components
ok 106 - teardown after path completion tests
ok 107 - __git_get_config_variables
ok 108 - __git_pretty_aliases
ok 109 - basic
ok 110 - double dash "git" itself
ok 111 - double dash "git checkout"
ok 112 - general options
ok 113 - general options plus command
ok 114 - git --help completion
ok 115 - setup for integration tests
ok 116 - checkout completes ref names
ok 117 - git -C <path> checkout uses the right repo
ok 118 - show completes all refs
ok 119 - <ref>: completes paths
ok 120 - complete tree filename with spaces
ok 121 - complete tree filename with metacharacters
ok 122 - send-email
ok 123 - complete files
ok 124 - completion uses <cmd> completion for alias: !sh -c 'git <cmd> ...'
ok 125 - completion uses <cmd> completion for alias: !f () { VAR=val git <cmd> ... }
ok 126 - completion used <cmd> completion for alias: !f() { : git <cmd> ; ... }
ok 127 - completion without explicit _git_xxx function
not ok 128 - complete with tilde expansion # TODO known breakage
ok 129 - setup other remote for remote reference completion
ok 130 - __git_complete_remote_or_refspec - push -d other
not ok 131 - __git_complete_remote_or_refspec - push other -d # TODO known breakage
ok 132 - __git_complete_remote_or_refspec - push --delete other
not ok 133 - __git_complete_remote_or_refspec - push other --delete # TODO known breakage
ok 134 - sourcing the completion script clears cached commands
ok 135 - sourcing the completion script clears cached merge strategies
ok 136 - sourcing the completion script clears cached --options
# still have 3 known breakage(s)
# passed all remaining 133 test(s)
1..136
*** t9903-bash-prompt.sh ***
ok 1 - setup for prompt tests
ok 2 - prompt - branch name
ok 3 - prompt - branch name - symlink symref
ok 4 - prompt - unborn branch
ok 5 - prompt - with newline in path
ok 6 - prompt - detached head
ok 7 - prompt - describe detached head - contains
ok 8 - prompt - describe detached head - branch
ok 9 - prompt - describe detached head - describe
ok 10 - prompt - describe detached head - default
ok 11 - prompt - inside .git directory
ok 12 - prompt - deep inside .git directory
ok 13 - prompt - inside bare repository
ok 14 - prompt - interactive rebase
ok 15 - prompt - rebase merge
ok 16 - prompt - rebase
ok 17 - prompt - merge
ok 18 - prompt - cherry-pick
ok 19 - prompt - bisect
ok 20 - prompt - dirty status indicator - clean
ok 21 - prompt - dirty status indicator - dirty worktree
ok 22 - prompt - dirty status indicator - dirty index
ok 23 - prompt - dirty status indicator - dirty index and worktree
ok 24 - prompt - dirty status indicator - orphan branch - clean
ok 25 - prompt - dirty status indicator - orphan branch - dirty index
ok 26 - prompt - dirty status indicator - orphan branch - dirty index and worktree
ok 27 - prompt - dirty status indicator - shell variable unset with config disabled
ok 28 - prompt - dirty status indicator - shell variable unset with config enabled
ok 29 - prompt - dirty status indicator - shell variable set with config disabled
ok 30 - prompt - dirty status indicator - shell variable set with config enabled
ok 31 - prompt - dirty status indicator - not shown inside .git directory
ok 32 - prompt - stash status indicator - no stash
ok 33 - prompt - stash status indicator - stash
ok 34 - prompt - stash status indicator - not shown inside .git directory
ok 35 - prompt - untracked files status indicator - no untracked files
ok 36 - prompt - untracked files status indicator - untracked files
ok 37 - prompt - untracked files status indicator - empty untracked dir
ok 38 - prompt - untracked files status indicator - non-empty untracked dir
ok 39 - prompt - untracked files status indicator - untracked files outside cwd
ok 40 - prompt - untracked files status indicator - shell variable unset with config disabled
ok 41 - prompt - untracked files status indicator - shell variable unset with config enabled
ok 42 - prompt - untracked files status indicator - shell variable set with config disabled
ok 43 - prompt - untracked files status indicator - shell variable set with config enabled
ok 44 - prompt - untracked files status indicator - not shown inside .git directory
ok 45 - prompt - format string starting with dash
ok 46 - prompt - pc mode
ok 47 - prompt - bash color pc mode - branch name
ok 48 - prompt - bash color pc mode - detached head
ok 49 - prompt - bash color pc mode - dirty status indicator - dirty worktree
ok 50 - prompt - bash color pc mode - dirty status indicator - dirty index
ok 51 - prompt - bash color pc mode - dirty status indicator - dirty index and worktree
ok 52 - prompt - bash color pc mode - dirty status indicator - before root commit
ok 53 - prompt - bash color pc mode - inside .git directory
ok 54 - prompt - bash color pc mode - stash status indicator
ok 55 - prompt - bash color pc mode - untracked files status indicator
ok 56 - prompt - zsh color pc mode
ok 57 - prompt - hide if pwd ignored - env var unset, config disabled
ok 58 - prompt - hide if pwd ignored - env var unset, config disabled, pc mode
ok 59 - prompt - hide if pwd ignored - env var unset, config unset
ok 60 - prompt - hide if pwd ignored - env var unset, config unset, pc mode
ok 61 - prompt - hide if pwd ignored - env var set, config disabled
ok 62 - prompt - hide if pwd ignored - env var set, config disabled, pc mode
ok 63 - prompt - hide if pwd ignored - env var set, config unset
ok 64 - prompt - hide if pwd ignored - env var set, config unset, pc mode
ok 65 - prompt - hide if pwd ignored - inside gitdir
# passed all 65 test(s)
1..65

failed test(s): t0204 t3900 t9402

fixed   1
success 19382
failed  20
broken  260
total   19976
