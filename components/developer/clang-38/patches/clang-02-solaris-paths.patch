--- llvm-3.8.1.src/tools/clang/lib/Driver/Tools.cpp.orig	2016-08-12 01:34:30.065931757 +0200
+++ llvm-3.8.1.src/tools/clang/lib/Driver/Tools.cpp	2016-08-12 01:37:26.171917908 +0200
@@ -6940,7 +6940,7 @@
 
   // asm_final spec is empty.
 
-  const char *Exec = Args.MakeArgString(getToolChain().GetProgramPath("as"));
+  const char *Exec = Args.MakeArgString(getToolChain().GetProgramPath("gas"));
   C.addCommand(llvm::make_unique<Command>(JA, *this, Exec, CmdArgs, Inputs));
 }
 
--- llvm-3.8.1.src/include/llvm/Support/Host.h.orig	2016-08-12 01:41:10.481340162 +0200
+++ llvm-3.8.1.src/include/llvm/Support/Host.h	2016-08-12 01:42:04.044533939 +0200
@@ -18,6 +18,8 @@
 
 #if defined(__linux__) || defined(__GNU__)
 #include <endian.h>
+#elif defined(__sun)
+#include <sys/isa_defs.h>
 #else
 #if !defined(BYTE_ORDER) && !defined(LLVM_ON_WIN32)
 #include <machine/endian.h>
--- llvm-3.8.1.src/tools/clang/lib/Frontend/InitHeaderSearch.cpp.orig	2016-08-12 01:25:35.449276227 +0200
+++ llvm-3.8.1.src/tools/clang/lib/Frontend/InitHeaderSearch.cpp	2016-08-12 02:09:19.902764812 +0200
@@ -224,7 +224,9 @@
         break;
     default:
       // FIXME: temporary hack: hard-coded paths.
+#ifndef __sun__
       AddPath("/usr/local/include", System, false);
+#endif
       break;
     }
   }
@@ -397,6 +399,9 @@
   case llvm::Triple::Linux:
     llvm_unreachable("Include management is handled in the driver.");
     break;
+  case llvm::Triple::Solaris:
+    AddGnuCPlusPlusIncludePaths("/usr/gcc/4.9/include/c++/4.9.4/",
+                                "i386-pc-solaris2.11", "", "", triple); break;
   case llvm::Triple::Win32:
     switch (triple.getEnvironment()) {
     default: llvm_unreachable("Include management is handled in the driver.");
@@ -470,7 +475,9 @@
           AddUnmappedPath(P, CXXSystem, false);
         }
       }
+#ifndef __sun__
       AddPath("/usr/include/c++/v1", CXXSystem, false);
+#endif
     } else {
       AddDefaultCPlusPlusIncludePaths(triple, HSOpts);
     }
--- llvm-3.8.1.src/tools/clang/lib/Driver/ToolChain.cpp.orig	Fri Aug 12 15:59:07 2016
+++ llvm-3.8.1.src/tools/clang/lib/Driver/ToolChain.cpp	Fri Aug 12 15:59:46 2016
@@ -340,6 +340,9 @@
 }
 
 std::string ToolChain::GetLinkerPath() const {
+#ifdef __sun__
+  return "/usr/bin/ld";
+#endif
   if (Arg *A = Args.getLastArg(options::OPT_fuse_ld_EQ)) {
     StringRef Suffix = A->getValue();
 
--- llvm-3.8.1.src/tools/clang/lib/Driver/ToolChains.cpp.orig	2016-08-12 19:31:29.355757470 +0200
+++ llvm-3.8.1.src/tools/clang/lib/Driver/ToolChains.cpp	2016-08-12 19:31:37.655338778 +0200
@@ -3310,8 +3310,8 @@
   GCCInstallation.init(Triple, Args);
 
   path_list &Paths = getFilePaths();
-  if (GCCInstallation.isValid())
-    addPathIfExists(D, GCCInstallation.getInstallPath(), Paths);
+  //if (GCCInstallation.isValid())
+  //  addPathIfExists(D, GCCInstallation.getInstallPath(), Paths);
 
   addPathIfExists(D, getDriver().getInstalledDir(), Paths);
   if (getDriver().getInstalledDir() != getDriver().Dir)
@@ -3320,20 +3320,25 @@
   addPathIfExists(D, getDriver().SysRoot + getDriver().Dir + "/../lib", Paths);
 
   std::string LibPath = "/usr/lib/";
+  std::string GCCLibPath = "/usr/gcc/4.9/lib/gcc/";
+  std::string GCCVersion = "4.9.4";
   switch (Triple.getArch()) {
   case llvm::Triple::x86:
+    GCCLibPath += ("i386-" + Triple.getVendorName() + "-" + Triple.getOSName()).str() + "/"+GCCVersion+"/";
   case llvm::Triple::sparc:
     break;
   case llvm::Triple::x86_64:
+    GCCLibPath += ("i386-" + Triple.getVendorName() + "-" + Triple.getOSName()).str() + "/"+GCCVersion+"/amd64";
     LibPath += "amd64/";
     break;
   case llvm::Triple::sparcv9:
+    GCCLibPath += ("sparc-" + Triple.getVendorName() + "-" + Triple.getOSName()).str() + "/"+GCCVersion+"/sparcv9";
     LibPath += "sparcv9/";
     break;
   default:
     llvm_unreachable("Unsupported architecture");
   }
-
+  addPathIfExists(D, GCCLibPath, Paths);
   addPathIfExists(D, getDriver().SysRoot + LibPath, Paths);
 }
 
