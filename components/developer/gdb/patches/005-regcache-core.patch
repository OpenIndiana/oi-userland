# For handling Solaris core files
# Will contribute upstream if possible

--- gdb-8.0-orig/gdb/config/i386/i386sol2.mh	2017-06-04 08:54:54.000000000 -0700
+++ gdb-8.0/gdb/config/i386/i386sol2.mh	2017-07-20 16:08:04.539896925 -0700
@@ -1,4 +1,4 @@
 # Host: Solaris x86
-NATDEPFILES= fork-child.o i386-v4-nat.o i386-sol2-nat.o \
+NATDEPFILES= sol2-core-regset.o fork-child.o i386-v4-nat.o i386-sol2-nat.o \
 	procfs.o proc-api.o proc-events.o proc-flags.o proc-why.o
 HAVE_NATIVE_GCORE_HOST = 1

--- gdb-8.0-orig/gdb/config/sparc/sol2.mh	2017-06-04 08:54:54.000000000 -0700
+++ gdb-8.0/gdb/config/sparc/sol2.mh	2017-07-20 16:08:27.231287470 -0700
@@ -1,6 +1,6 @@
 # Host: Solaris SPARC & UltraSPARC
 NAT_FILE= nm-sol2.h
-NATDEPFILES= sparc-sol2-nat.o \
+NATDEPFILES= sol2-core-regset.o sparc-sol2-nat.o \
 	fork-child.o \
 	procfs.o proc-api.o proc-events.o proc-flags.o proc-why.o
 HAVE_NATIVE_GCORE_HOST = 1

--- gdb-8.0-orig/gdb/regcache.c	2017-06-04 08:54:54.000000000 -0700
+++ gdb-8.0/gdb/regcache.c	2017-07-11 16:01:53.975416470 -0700
@@ -213,6 +213,8 @@ struct regcache
   /* If this is a read-write cache, which thread's registers is
      it connected to?  */
   ptid_t ptid;
+  /* Is this a corefile regcache or a live process */
+  int from_corefile;
 };
 
 /* See regcache.h.  */
@@ -237,6 +239,7 @@ regcache_xmalloc_1 (struct gdbarch *gdba
   regcache = XNEW (struct regcache);
   regcache->descr = descr;
   regcache->readonly_p = readonly_p;
+  regcache->from_corefile = 0;
   if (readonly_p)
     {
       regcache->registers
@@ -1620,3 +1623,18 @@ Takes an optional file parameter."),
 	   &maintenanceprintlist);
 
 }
+
+int
+set_regcache_from_corefile (struct regcache *regcache)
+{
+  gdb_assert (regcache != NULL);
+  regcache->from_corefile = 1;
+}
+
+int
+regcache_from_corefile (const struct regcache *regcache)
+{
+  gdb_assert (regcache != NULL);
+  return regcache->from_corefile;
+}
+

--- gdb-8.0-orig/gdb/regcache.h	2017-06-04 08:54:54.000000000 -0700
+++ gdb-8.0/gdb/regcache.h	2017-07-11 15:56:42.826460635 -0700
@@ -242,4 +242,7 @@ extern void regcache_debug_print_registe
 					   struct regcache *regcache,
 					   int regno);
 
+extern int set_regcache_from_corefile (struct regcache *regcache);
+extern int regcache_from_corefile (const struct regcache *regcache);
+
 #endif /* REGCACHE_H */

--- gdb-8.0-orig/gdb/sol2-core-regset.c	1969-12-31 16:00:00.000000000 -0800
+++ gdb-8.0/gdb/sol2-core-regset.c	2017-07-11 15:57:26.356435335 -0700
@@ -0,0 +1,147 @@
+/* Machine dependent GDB support for core files on Solaris using "regsets".
+
+   Copyright (C) 2013 Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* This file is used by Solaris core dumps. The Solaris /proc filesystem
+ * will yield different sizes for prgregset_t prfpregset_t depending
+ * on sizeof(void*). We handle these differences in this Solaris-specific
+ * core-regset.c file, as opposed to imposing all these Solaris particulars
+ * on everyone else.
+ */
+
+#include "defs.h"
+#include "command.h"
+#include "gdbcore.h"
+#include "gdbarch.h"
+#include "inferior.h"
+#include "target.h"
+#include "regcache.h"
+#include "elf-bfd.h"
+
+#include <fcntl.h>
+#include <errno.h>
+#include <string.h>
+#include <time.h>
+#ifdef HAVE_SYS_PROCFS_H
+#include <sys/procfs.h>
+#endif
+
+/* Prototypes for supply_gregset etc.  */
+#include "gregset.h"
+
+/* Provide registers to GDB from a core file.
+
+   CORE_REG_SECT points to an array of bytes, which are the contents
+   of a `note' from a core file which BFD thinks might contain
+   register contents.  CORE_REG_SIZE is its size.
+
+   WHICH says which register set corelow suspects this is:
+     0 --- the general-purpose register set, in gregset_t format
+     2 --- the floating-point register set, in fpregset_t format
+
+   REG_ADDR is ignored.  */
+
+static void
+fetch_core_registers (struct regcache *regcache,
+		      char *core_reg_sect,
+		      unsigned core_reg_size,
+		      int which,
+		      CORE_ADDR reg_addr)
+{
+  gdb_gregset_t gregset;
+  gdb_fpregset_t fpregset;
+  gdb_gregset_t *gregset_p = &gregset;
+  gdb_fpregset_t *fpregset_p = &fpregset;
+  /* use default sizes on 64-bit Solaris */
+  size_t gregset_size = sizeof (gregset);
+  size_t fpregset_size = sizeof (fpregset);
+  int pointer_size;
+  struct gdbarch *gdbarch = get_regcache_arch (regcache);
+  enum bfd_endian byte_order;
+
+  if (gdbarch_osabi (gdbarch) == GDB_OSABI_SOLARIS)
+  {
+    set_regcache_from_corefile (regcache);
+    byte_order = gdbarch_byte_order (gdbarch);
+    pointer_size = gdbarch_ptr_bit (gdbarch);
+
+    if ((byte_order == BFD_ENDIAN_BIG) && (pointer_size == 32))
+    {
+      gregset_size = 152;
+      fpregset_size = 144;
+    }
+    else if ((byte_order == BFD_ENDIAN_LITTLE) && (pointer_size == 32))
+    {
+      gregset_size = 76;
+      fpregset_size = 380;
+    }
+  }
+
+  switch (which)
+    {
+    case 0:
+      if (core_reg_size != gregset_size)
+	warning (_("Wrong size gregset in core file."));
+      else
+	{
+	  memcpy (&gregset, core_reg_sect, gregset_size);
+	  supply_gregset (regcache, (const gdb_gregset_t *) gregset_p);
+	}
+      break;
+
+    case 2:
+      if (core_reg_size != fpregset_size)
+	warning (_("Wrong size fpregset in core file."));
+      else
+	{
+	  memcpy (&fpregset, core_reg_sect, fpregset_size);
+	  if (gdbarch_fp0_regnum (get_regcache_arch (regcache)) >= 0)
+	    supply_fpregset (regcache,
+			     (const gdb_fpregset_t *) fpregset_p);
+	}
+      break;
+
+    default:
+      /* We've covered all the kinds of registers we know about here,
+         so this must be something we wouldn't know what to do with
+         anyway.  Just ignore it.  */
+      break;
+    }
+}
+
+
+/* Register that we are able to handle ELF core file formats using
+   standard procfs "regset" structures.  */
+
+static struct core_fns regset_core_fns =
+{
+  bfd_target_elf_flavour,		/* core_flavour */
+  default_check_format,			/* check_format */
+  default_core_sniffer,			/* core_sniffer */
+  fetch_core_registers,			/* core_read_registers */
+  NULL					/* next */
+};
+
+/* Provide a prototype to silence -Wmissing-prototypes.  */
+extern void _initialize_core_regset (void);
+
+void
+_initialize_core_regset (void)
+{
+  deprecated_add_core_fns (&regset_core_fns);
+}

--- gdb-8.0-orig/gdb/sparc-sol2-nat.c	2017-06-04 08:51:27.000000000 -0700
+++ gdb-8.0/gdb/sparc-sol2-nat.c	2017-07-11 16:08:55.492555000 -0700
@@ -24,13 +24,10 @@
 #include "gregset.h"
 
 #include "sparc-tdep.h"
+#include "sparc64-tdep.h"
 #include "target.h"
 #include "procfs.h"
 
-/* This file provids the (temporary) glue between the Solaris SPARC
-   target dependent code and the machine independent SVR4 /proc
-   support.  */
-
 /* Solaris 7 (Solaris 2.7, SunOS 5.7) and up support two process data
    models, the traditional 32-bit data model (ILP32) and the 64-bit
    data model (LP64).  The format of /proc depends on the data model
@@ -48,54 +45,67 @@
    Note that a 32-bit GDB won't be able to debug a 64-bit target
    process using /proc on Solaris.  */
 
-#if (defined (__arch64__) || \
-     (defined (PR_MODEL_NATIVE) && (PR_MODEL_NATIVE == PR_MODEL_LP64)))
-
-#include "sparc64-tdep.h"
-
-#define sparc_supply_gregset sparc64_supply_gregset
-#define sparc_supply_fpregset sparc64_supply_fpregset
-#define sparc_collect_gregset sparc64_collect_gregset
-#define sparc_collect_fpregset sparc64_collect_fpregset
-
-#define sparc_sol2_gregmap sparc64_sol2_gregmap
-#define sparc_sol2_fpregmap sparc64_sol2_fpregmap
-
-#else
-
-#define sparc_supply_gregset sparc32_supply_gregset
-#define sparc_supply_fpregset sparc32_supply_fpregset
-#define sparc_collect_gregset sparc32_collect_gregset
-#define sparc_collect_fpregset sparc32_collect_fpregset
-
-#define sparc_sol2_gregmap sparc32_sol2_gregmap
-#define sparc_sol2_fpregmap sparc32_sol2_fpregmap
-
-#endif
+static int from_corefile = -1;
 
 void
 supply_gregset (struct regcache *regcache, const prgregset_t *gregs)
 {
-  sparc_supply_gregset (&sparc_sol2_gregmap, regcache, -1, gregs);
+  struct gdbarch *gdbarch = get_regcache_arch (regcache);
+  int pointer_size = gdbarch_ptr_bit (gdbarch);
+
+  if (from_corefile == -1)
+    from_corefile = regcache_from_corefile (regcache);
+
+  if ((pointer_size == 32) && (from_corefile == 1))
+    sparc32_supply_gregset (&sparc32_sol2_gregmap, regcache, -1, gregs);
+  else
+    sparc64_supply_gregset (&sparc64_sol2_gregmap, regcache, -1, gregs);
 }
 
 void
 supply_fpregset (struct regcache *regcache, const prfpregset_t *fpregs)
 {
-  sparc_supply_fpregset (&sparc_sol2_fpregmap, regcache, -1, fpregs);
+  struct gdbarch *gdbarch = get_regcache_arch (regcache);
+  int pointer_size = gdbarch_ptr_bit (gdbarch);
+
+  if (from_corefile == -1)
+    from_corefile = regcache_from_corefile (regcache);
+
+  if ((pointer_size == 32) && (from_corefile == 1))
+    sparc32_supply_fpregset (&sparc32_sol2_fpregmap, regcache, -1, fpregs);
+  else
+    sparc64_supply_fpregset (&sparc64_sol2_fpregmap, regcache, -1, fpregs);
 }
 
 void
 fill_gregset (const struct regcache *regcache, prgregset_t *gregs, int regnum)
 {
-  sparc_collect_gregset (&sparc_sol2_gregmap, regcache, regnum, gregs);
+  struct gdbarch *gdbarch = get_regcache_arch (regcache);
+  int pointer_size = gdbarch_ptr_bit (gdbarch);
+
+  if (from_corefile == -1)
+    from_corefile = regcache_from_corefile (regcache);
+
+  if ((pointer_size == 32) && (from_corefile == 1))
+    sparc32_collect_gregset (&sparc32_sol2_gregmap, regcache, regnum, gregs);
+  else
+    sparc64_collect_gregset (&sparc64_sol2_gregmap, regcache, regnum, gregs);
 }
 
 void
 fill_fpregset (const struct regcache *regcache,
 	       prfpregset_t *fpregs, int regnum)
 {
-  sparc_collect_fpregset (&sparc_sol2_fpregmap, regcache, regnum, fpregs);
+  struct gdbarch *gdbarch = get_regcache_arch (regcache);
+  int pointer_size = gdbarch_ptr_bit (gdbarch);
+
+  if (from_corefile == -1)
+    from_corefile = regcache_from_corefile (regcache);
+
+  if ((pointer_size == 32) && (from_corefile == 1))
+    sparc32_collect_fpregset (&sparc32_sol2_fpregmap, regcache, regnum, fpregs);
+  else
+    sparc64_collect_fpregset (&sparc64_sol2_fpregmap, regcache, regnum, fpregs);
 }
 
 /* Provide a prototype to silence -Wmissing-prototypes.  */
