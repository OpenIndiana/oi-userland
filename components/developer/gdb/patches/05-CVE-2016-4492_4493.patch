From b6616075cb48d42a28cc78ca1c66127b671b361c Mon Sep 17 00:00:00 2001
From: law <law@138bc75d-0d04-0410-961f-82ee72b054a4>
Date: Wed, 13 Jul 2016 22:06:09 +0000
Subject: [PATCH] 	PR c++/70926 	* cplus-dem.c: Handle large values and
 overflow when demangling 	length variables. 
 (demangle_template_value_parm): Read only until end of mangled string. 
 (do_hpacc_template_literal): Likewise. 	(do_type): Handle overflow
 when demangling array indices.

git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/trunk@238313 138bc75d-0d04-0410-961f-82ee72b054a4
---
 libiberty/ChangeLog                   |  9 +++++++++
 libiberty/cplus-dem.c                 | 10 ++++++----
 libiberty/testsuite/demangle-expected | 13 +++++++++++++
 3 files changed, 28 insertions(+), 4 deletions(-)

#diff --git a/libiberty/ChangeLog b/libiberty/ChangeLog
#index 45b312b..317bd63 100644
#--- a/libiberty/ChangeLog
#+++ b/libiberty/ChangeLog
#@@ -1,3 +1,12 @@
#+2016-07-13  Marcel BÃhme  <boehme.marcel@gmail.com>
#+
#+	PR c++/70926
#+	* cplus-dem.c: Handle large values and overflow when demangling
#+	length variables.
#+	(demangle_template_value_parm): Read only until end of mangled string.
#+	(do_hpacc_template_literal): Likewise.
#+	(do_type): Handle overflow when demangling array indices.
#+
# 2016-06-12  Brooks Moses  <bmoses@google.com>
# 
# 	* cp-demangle.c (cplus_demangle_print_callback): Avoid zero-length
Index: gdb-7.11.1/libiberty/cplus-dem.c
===================================================================
--- gdb-7.11.1.orig/libiberty/cplus-dem.c	2017-06-08 07:53:16.285459712 -0400
+++ gdb-7.11.1/libiberty/cplus-dem.c	2017-06-08 07:53:16.273459559 -0400
@@ -2051,7 +2051,8 @@ demangle_template_value_parm (struct wor
       else
 	{
 	  int symbol_len  = consume_count (mangled);
-	  if (symbol_len == -1)
+	  if (symbol_len == -1
+	      || symbol_len > (long) strlen (*mangled))
 	    return -1;
 	  if (symbol_len == 0)
 	    string_appendn (s, "0", 1);
@@ -3611,7 +3612,7 @@ do_type (struct work_stuff *work, const
 	/* A back reference to a previously seen type */
 	case 'T':
 	  (*mangled)++;
-	  if (!get_count (mangled, &n) || n >= work -> ntypes)
+	  if (!get_count (mangled, &n) || n < 0 || n >= work -> ntypes)
 	    {
 	      success = 0;
 	    }
@@ -3789,7 +3790,7 @@ do_type (struct work_stuff *work, const
     /* A back reference to a previously seen squangled type */
     case 'B':
       (*mangled)++;
-      if (!get_count (mangled, &n) || n >= work -> numb)
+      if (!get_count (mangled, &n) || n < 0 || n >= work -> numb)
 	success = 0;
       else
 	string_append (result, work->btypevec[n]);
@@ -4130,7 +4131,8 @@ do_hpacc_template_literal (struct work_s
 
   literal_len = consume_count (mangled);
 
-  if (literal_len <= 0)
+  if (literal_len <= 0
+      || literal_len > (long) strlen (*mangled))
     return 0;
 
   /* Literal parameters are names of arrays, functions, etc.  and the
Index: gdb-7.11.1/libiberty/testsuite/demangle-expected
===================================================================
--- gdb-7.11.1.orig/libiberty/testsuite/demangle-expected	2017-06-08 07:53:16.285459712 -0400
+++ gdb-7.11.1/libiberty/testsuite/demangle-expected	2017-06-08 07:53:16.273459559 -0400
@@ -4441,3 +4441,16 @@ __vt_90000000000cafebabe
 
 _Z80800000000000000000000
 _Z80800000000000000000000
+#
+# Tests write access violation PR70926
+
+0__Ot2m02R5T0000500000
+0__Ot2m02R5T0000500000
+#
+
+0__GT50000000000_
+0__GT50000000000_
+#
+
+__t2m05B500000000000000000_
+__t2m05B500000000000000000_
