--- gdb-7.10.1/gdb/sol-thread.c.~1~	Thu Feb 19 03:58:07 2015
+++ gdb-7.10.1/gdb/sol-thread.c	Fri Feb 26 23:04:44 2016
@@ -246,16 +246,18 @@
   /* It's a thread.  Convert to LWP.  */
 
   val = p_td_ta_map_id2thr (main_ta, ptid_get_tid (thread_id), &th);
-  if (val == TD_NOTHR)
+  if (val == TD_NOTHR || val == TD_BADTH)
     return pid_to_ptid (-1);	/* Thread must have terminated.  */
   else if (val != TD_OK)
     error (_("thread_to_lwp: td_ta_map_id2thr %s"), td_err_string (val));
 
   val = p_td_thr_get_info (&th, &ti);
-  if (val == TD_NOTHR)
+  if (val == TD_NOTHR || val == TD_BADTH)
     return pid_to_ptid (-1);	/* Thread must have terminated.  */
   else if (val != TD_OK)
     error (_("thread_to_lwp: td_thr_get_info: %s"), td_err_string (val));
+  else if (ti.ti_state == TD_THR_ZOMBIE)
+    return pid_to_ptid (-1); /* Thread has terminated */
 
   if (ti.ti_state != TD_THR_ACTIVE)
     {
@@ -289,22 +291,24 @@
     return pid_to_ptid (-1);	/* Must be a defunct LPW.  */
 
   val = p_td_ta_map_lwp2thr (main_ta, ptid_get_lwp (lwp), &th);
-  if (val == TD_NOTHR)
+  if (val == TD_NOTHR || val == TD_BADTH)
     return pid_to_ptid (-1);	/* Thread must have terminated.  */
   else if (val != TD_OK)
     error (_("lwp_to_thread: td_ta_map_lwp2thr: %s."), td_err_string (val));
 
   val = p_td_thr_validate (&th);
-  if (val == TD_NOTHR)
+  if (val == TD_NOTHR || val == TD_BADTH)
     return lwp;			/* Unknown to libthread; just return LPW,  */
   else if (val != TD_OK)
     error (_("lwp_to_thread: td_thr_validate: %s."), td_err_string (val));
 
   val = p_td_thr_get_info (&th, &ti);
-  if (val == TD_NOTHR)
+  if (val == TD_NOTHR || val == TD_BADTH)
     return pid_to_ptid (-1);	/* Thread must have terminated.  */
   else if (val != TD_OK)
     error (_("lwp_to_thread: td_thr_get_info: %s."), td_err_string (val));
+  else if (ti.ti_state == TD_THR_ZOMBIE)
+    return pid_to_ptid (-1); /* Thread has terminated */
 
   return ptid_build (ptid_get_pid (lwp), 0 , ti.ti_tid);
 }
@@ -400,7 +404,7 @@
 
   rtnval = beneath->to_wait (beneath, ptid, ourstatus, options);
 
-  if (ourstatus->kind != TARGET_WAITKIND_EXITED)
+  if (ourstatus->kind != TARGET_WAITKIND_EXITED && ourstatus->kind != TARGET_WAITKIND_IGNORE)
     {
       /* Map the LWP of interest back to the appropriate thread ID.  */
       rtnval = lwp_to_thread (rtnval);
@@ -1070,6 +1074,9 @@
   if (retval != TD_OK)
     return -1;
 
+  if (ti.ti_state == TD_THR_UNKNOWN || ti.ti_state == TD_THR_ZOMBIE)
+    return 0; /* A zombie -- ignore.  */
+
   ptid = ptid_build (ptid_get_pid (inferior_ptid), 0, ti.ti_tid);
   if (!in_thread_list (ptid) || is_exited (ptid))
     add_thread (ptid);
@@ -1082,8 +1089,13 @@
 {
   struct target_ops *beneath = find_target_beneath (ops);
 
-  /* Delete dead threads.  */
-  prune_threads ();
+  /*
+   * Normally we should call prune_threads() here to remove any dead
+   * threads. However beneath->to_update_thread_list() ends up with
+   * procfs_upgrade_thread_list() on Solaris, which in turn calls
+   * prune_threads(). So lets avoid the cost of an extra call:
+   * prune_threads ();
+   */
 
   /* Find any new LWP's.  */
   beneath->to_update_thread_list (beneath);
@@ -1244,7 +1256,7 @@
 
   init_sol_thread_ops ();
 
-  dlhandle = dlopen ("libthread_db.so.1", RTLD_NOW);
+  dlhandle = dlopen ("libthread_db.so.1", RTLD_LAZY|RTLD_GLOBAL);
   if (!dlhandle)
     goto die;
 
