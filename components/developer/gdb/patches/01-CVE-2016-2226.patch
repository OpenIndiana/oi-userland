Backport of:

From b8106f544a7fd485b6959ebd197bdd99a8884416 Mon Sep 17 00:00:00 2001
From: bernds <bernds@138bc75d-0d04-0410-961f-82ee72b054a4>
Date: Fri, 8 Apr 2016 12:10:21 +0000
Subject: [PATCH] =?utf8?q?Fix=20memory=20allocation=20size=20overflows=20(?=
 =?utf8?q?PR69687,=20patch=20by=20Marcel=20B=C3=B6hme)?=
MIME-Version: 1.0
Content-Type: text/plain; charset=utf8
Content-Transfer-Encoding: 8bit

	PR c++/69687
	* cplus-dem.c: Include <limits.h> if available.
	(INT_MAX): Define if necessary.
	(remember_type, remember_Ktype, register_Btype, string_need):
	Abort if we detect cases where we the size of the allocation would
	overflow.



git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/trunk@234829 138bc75d-0d04-0410-961f-82ee72b054a4
---
 libiberty/ChangeLog   |  7 +++++++
 libiberty/cplus-dem.c | 15 +++++++++++++++
 2 files changed, 22 insertions(+)

#diff --git a/libiberty/ChangeLog b/libiberty/ChangeLog
#index 8e82a5f..2a34356 100644
#--- a/libiberty/ChangeLog
#+++ b/libiberty/ChangeLog
#@@ -1,5 +1,12 @@
# 2016-04-08  Marcel BÃ¶hme  <boehme.marcel@gmail.com>
# 
#+	PR c++/69687
#+	* cplus-dem.c: Include <limits.h> if available.
#+	(INT_MAX): Define if necessary.
#+	(remember_type, remember_Ktype, register_Btype, string_need):
#+	Abort if we detect cases where we the size of the allocation would
#+	overflow.
#+
# 	PR c++/70498
# 	* cplus-dem.c (gnu_special): Handle case where consume_count returns
# 	-1.
Index: gdb-7.11.1/libiberty/cplus-dem.c
===================================================================
--- gdb-7.11.1.orig/libiberty/cplus-dem.c	2017-06-08 12:48:14.134738660 -0400
+++ gdb-7.11.1/libiberty/cplus-dem.c	2017-06-08 12:48:14.130738610 -0400
@@ -56,6 +56,13 @@ void * malloc ();
 void * realloc ();
 #endif
 
+#ifdef HAVE_LIMITS_H
+#include <limits.h>
+#endif
+#ifndef INT_MAX
+# define INT_MAX       (int)(((unsigned int) ~0) >> 1)          /* 0x7FFFFFFF */ 
+#endif
+
 #include <demangle.h>
 #undef CURRENT_DEMANGLING_STYLE
 #define CURRENT_DEMANGLING_STYLE work->options
@@ -4254,6 +4261,8 @@ remember_type (struct work_stuff *work,
 	}
       else
 	{
+          if (work -> typevec_size > INT_MAX / 2)
+	    xmalloc_failed (INT_MAX);
 	  work -> typevec_size *= 2;
 	  work -> typevec
 	    = XRESIZEVEC (char *, work->typevec, work->typevec_size);
@@ -4281,6 +4290,8 @@ remember_Ktype (struct work_stuff *work,
 	}
       else
 	{
+          if (work -> ksize > INT_MAX / 2)
+	    xmalloc_failed (INT_MAX);
 	  work -> ksize *= 2;
 	  work -> ktypevec
 	    = XRESIZEVEC (char *, work->ktypevec, work->ksize);
@@ -4310,6 +4321,8 @@ register_Btype (struct work_stuff *work)
 	}
       else
 	{
+          if (work -> bsize > INT_MAX / 2)
+	    xmalloc_failed (INT_MAX);
 	  work -> bsize *= 2;
 	  work -> btypevec
 	    = XRESIZEVEC (char *, work->btypevec, work->bsize);
@@ -4764,6 +4777,8 @@ string_need (string *s, int n)
   else if (s->e - s->p < n)
     {
       tem = s->p - s->b;
+      if (n > INT_MAX / 2 - tem)
+        xmalloc_failed (INT_MAX); 
       n += tem;
       n *= 2;
       s->b = XRESIZEVEC (char, s->b, n);
Index: gdb-7.11.1/gdb/common/common-utils.c
===================================================================
--- gdb-7.11.1.orig/gdb/common/common-utils.c	2016-02-09 22:19:39.000000000 -0500
+++ gdb-7.11.1/gdb/common/common-utils.c	2017-06-08 12:48:46.779145822 -0400
@@ -100,6 +100,12 @@ xfree (void *ptr)
     free (ptr);		/* ARI: free */
 }
 
+void
+xmalloc_failed (size_t size)
+{
+  malloc_failure (size);
+}
+
 /* Like asprintf/vasprintf but get an internal_error if the call
    fails. */
 
