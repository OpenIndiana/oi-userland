#!/bin/bash

# Start the swarm client, optionally with configs prepared by some helper
#
# This file and its contents are supplied under the terms of the Jenkins
# license (a derivative of MIT license).
# Copyright 2016-2021 Jim Klimov
#

#trap '_FINAL=$? ; echo "Exiting with code ${_FINAL}" >&2; sleep 5; exit ${_FINAL}' 0 1 2 3 15
#echo "`date -u` : starting $0 $*" >&2 ; set
#set -x
set -o pipefail

TZ=UTC
LANG=C
LC_ALL=C
export TZ LANG LC_ALL

# Failsafe against accidental runs
if [ $# = 0 ] ; then
    echo "ERROR: An argument is required" >&2
    exit 1
fi
case "$1" in
    start) ;;
    #stop|refresh|restart) ;& # these are handled by SMF
    *) echo "ERROR: Argument is currently not supported: $1" >&2 ; exit 1 ;;
esac
shift

# Default setting: Allow to scale RAM consumption
JAVA_OPTS="-Xms64m -Xmx512m"

# Allow to investigate why an agent crashed, which rarely happens, to report
# details into  https://issues.jenkins-ci.org/browse/JENKINS-60673
JAVA_OPTS="$JAVA_OPTS -XX:+HeapDumpOnOutOfMemoryError"

# This script can be used standalone, or as an SMF method script
[ -s /lib/svc/share/smf_include.sh ] && . /lib/svc/share/smf_include.sh
SMF_FMRI_BASE=""
SMF_FMRI_INST=""
if [ -n "$SMF_FMRI" ]; then
    SMF_FMRI_BASE="`echo "$SMF_FMRI" | sed 's|:[^:]*$||'`"
    SMF_FMRI_INST="`echo "$SMF_FMRI" | sed 's|^.*:\([^:]*\)$|\1|'`"
fi

# Parse CLI args
INSTANCE="$SMF_FMRI_INST"
CONFIG_FILE=""
DEFAULT_WORKDIR=""
SWARM_AGENT_JAR=""

while [ $# -gt 0 ] ; do
    case "$1" in
#--instance=%i --config=%{swarm_client/config_file} --default-worker-dir=%{swarm_client/WORKDIR} --agent-jar=%{swarm_client/agent_jar}
        --instance=*)
            INSTANCE="${1/--instance=/}" ;;
        --config=*)
            CONFIG_FILE="${1/--config=/}" ;;
        --default-worker-dir=*)
            DEFAULT_WORKDIR="${1/--default-worker-dir=/}" ;;
        --agent-jar=*)
            SWARM_AGENT_JAR="${1/--agent-jar=/}" ;;
        *) echo "ERROR: Unsupported argument: $1" >&2 ; exit 1;;
    esac
    shift
done

# Fill in the gaps, if any
[ -n "$INSTANCE" ] || INSTANCE="default"

# Symlink to current packaged version
[ -n "$SWARM_AGENT_JAR" ] || SWARM_AGENT_JAR="/usr/share/jenkins/jar/jenkins-swarm-client.jar"
[ -n "$CONFIG_FILE" ] || CONFIG_FILE="/var/lib/jenkins/agent/swarm.${INSTANCE}.conf"
[ -n "$DEFAULT_WORKDIR" ] || DEFAULT_WORKDIR="/var/lib/jenkins/agent/swarm.${INSTANCE}"

# This array can get populated from the config file sourced below
SWARM_CONFIG=()

# The config file may be populated by the end user, their deployment
# orchestration system, generated by some additional service (maybe
# tuned for different flavours of worker), but it should exist!
# In particular, it defines the parameters needed to access a specific
# Jenkins controller server.
if [ -n "$CONFIG_FILE" ] && [ -s "$CONFIG_FILE" ] ; then
    echo "Sourcing ${CONFIG_FILE} ..." >&2
    . "${CONFIG_FILE}" || exit
else
    echo "ERROR: No config file for this instance of Jenkins Swarm client was found: $CONFIG_FILE" >&2
    exit 1
fi
if [ -z "${WORKDIR}" ]; then
    WORKDIR="${DEFAULT_WORKDIR}"
    mkdir -p "${WORKDIR}" || true # Would fall back to /tmp/... below
fi

if [ -n "${JAVA_HOME-}" ] && [ -x "${JAVA_HOME}/bin/java" ] ; then
    true
else
    # Our agents "should" just work with newer Javas 8+, but so far were
    # only tested with 8
    # Note: top half of paths is semi-common between illumos and Linux;
    # /usr/lib/jvm/* allows this script to be used on Debian-like Linux
    for JAVA_HOME in \
        /usr/jdk/jenkins \
        /usr/java \
        /usr/jdk \
        /usr/jdk/latest \
        /usr/jdk/instances/jdk1.8.0 \
        /usr/jdk/instances/jdk1.11.0 \
        /usr/lib/jvm/java-8-openjdk-* \
        /usr/lib/jvm/java-1.8.0-openjdk-* \
        /usr/lib/jvm/java-8-openjdk-*/jre \
        /usr/lib/jvm/java-1.8.0-openjdk-*/jre \
        /usr/lib/jvm/nvidia-java-8-openjdk-* \
        /usr/lib/jvm/nvidia-java-8-openjdk-*/jre \
        /usr/lib/jvm/java-11-openjdk-* \
        /usr/lib/jvm/java-1.11.0-openjdk-* \
        /usr/lib/jvm/java-11-openjdk-*/jre \
        /usr/lib/jvm/java-1.11.0-openjdk-*/jre \
    ; do
        [ -n "${JAVA_HOME-}" ] && [ -x "${JAVA_HOME}/bin/java" ] && break || true
    done
fi
if [ -n "${JAVA_HOME-}" ] && [ -x "${JAVA_HOME}/bin/java" ] ; then
    echo "Using JAVA_HOME='$JAVA_HOME'" >&2
else
    echo "ERROR: Could not find JAVA_HOME that contains a bin/java executable" >&2
    exit 1
fi

if [ -n "${WORKDIR-}" ] && [ -d "${WORKDIR}" ] && [ -w "${WORKDIR}" ] ; then
    cd "${WORKDIR}"
else
    echo "WARNING: WORKDIR='${WORKDIR}' was not found, using a temporary location" >&2
    cd /tmp && mkdir -p ".jenkins-swarm-client.$$" && cd  ".jenkins-swarm-client.$$"
fi

nohup "${JAVA_HOME}/bin/java" $JAVA_OPTS -jar "$SWARM_AGENT_JAR" "${SWARM_CONFIG[@]}" &
echo $! > ./client-jvm.pid
echo "LAUNCHED Jenkins Swarm agent as PID: $!" >&2

# For service management systems that expect a backgrounded child process,
# (e.g. SMF 'daemon'/'contract' service type) we yielded one above.
# For others (e.g. SMF 'child'/'wait'), we can wait (maybe indefinitely)
# for the agent to complete its lifecycle.
#wait $!
