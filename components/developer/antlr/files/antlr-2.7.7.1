'\" t
.TH antlr 1 "23 Oct 2012"
.SH NAME
antlr \- (AN)other (T)ool for (L)anguage (R)ecognition 
.SH SYNOPSIS
.B antlr
[
.B \-o 
.I outputDir
]
[
.B \-glib 
.I superGrammar
]
[
.B \-debug
]
[
.B \-html
]
[
.B \-diagnostic
]
[
.B \-trace
]
[
.B \-traceParser
]
[
.B \-traceLexer
]
[
.B \-traceTreeParser
]
.SH DESCRIPTION
antlr (AN)other (T)ool for (L)anguage (R)ecognition - formerly known 
as PCCTS - is a language tool that provides a framework for constructing 
recognizers, compilers, and translators from grammatical descriptions 
containing actions in the following languages: Java, C++, C# or Python.
For additional information on using antlr, browse the complete HTML 
documentation at:
.IP
.B file:/usr/share/doc/antlr-2.7.7/index.html 
.LP
.SH OPTIONS
.TP
.BI \-o " outputDir"
Specify output directory where all output generated. 
.TP
.BI \-glib " superGrammar"
Specify location of supergrammar file. 
.TP
.B \-debug
Launch the ParseView debugger upon parser invocation. 
.TP
.B \-html
Generate an html file from your grammar (minus actions). 
.TP
.B \-diagnostic
Generate a textfile with diagnostics. 
.TP
.B \-trace
Have all rules call traceIn/traceOut. 
.TP
.B \-traceParser
Have parser rules call traceIn/traceOut. 
.TP
.B \-traceLexer
Have lexer rules call traceIn/traceOut. 
.TP
.B \-traceTreeParser
Have tree parser rules call traceIn/traceOut. 
.SH FILES
/usr/share/antlr-2.7.7/antlr.jar
.IP
antlr jar file
.LP
/usr/share/doc/antlr-2.7.7/index.html 
.IP
antlr API documentation generated with javadoc. 
.LP
.SH SEE ALSO
\fBjava\fR(1), http://www.antlr2.org/
