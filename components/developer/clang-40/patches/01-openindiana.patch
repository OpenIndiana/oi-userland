diff -ruN llvm-4.0.0.src/cmake/modules/AddLLVM.cmake llvm-4.0.0.src.patched/cmake/modules/AddLLVM.cmake
--- llvm-4.0.0.src/cmake/modules/AddLLVM.cmake	2017-01-17 22:47:58.000000000 +0100
+++ llvm-4.0.0.src.patched/cmake/modules/AddLLVM.cmake	2017-04-12 02:48:14.935669545 +0200
@@ -184,7 +184,7 @@
                      LINK_FLAGS " -Wl,-dead_strip")
       elseif(${CMAKE_SYSTEM_NAME} MATCHES "SunOS")
         set_property(TARGET ${target_name} APPEND_STRING PROPERTY
-                     LINK_FLAGS " -Wl,-z -Wl,discard-unused=sections")
+                     LINK_FLAGS " -Wl,-z -Wl,ignore")
       elseif(NOT WIN32 AND NOT LLVM_LINKER_IS_GOLD)
         # Object files are compiled with -ffunction-data-sections.
         # Versions of bfd ld < 2.23.1 have a bug in --gc-sections that breaks
diff -ruN llvm-4.0.0.src/include/llvm/Support/Host.h llvm-4.0.0.src.patched/include/llvm/Support/Host.h
--- llvm-4.0.0.src/include/llvm/Support/Host.h	2016-10-13 19:43:20.000000000 +0200
+++ llvm-4.0.0.src.patched/include/llvm/Support/Host.h	2017-04-12 02:43:33.428900264 +0200
@@ -18,6 +18,8 @@
 
 #if defined(__linux__) || defined(__GNU__) || defined(__HAIKU__)
 #include <endian.h>
+#elif defined(__sun)
+#include <sys/isa_defs.h>
 #elif defined(_AIX)
 #include <sys/machine.h>
 #else
diff -ruN llvm-4.0.0.src/tools/clang/lib/Driver/ToolChain.cpp llvm-4.0.0.src.patched/tools/clang/lib/Driver/ToolChain.cpp
--- llvm-4.0.0.src/tools/clang/lib/Driver/ToolChain.cpp	2016-12-14 17:46:50.000000000 +0100
+++ llvm-4.0.0.src.patched/tools/clang/lib/Driver/ToolChain.cpp	2017-04-12 02:43:31.756438484 +0200
@@ -351,6 +351,9 @@
 }
 
 std::string ToolChain::GetLinkerPath() const {
+#ifdef __sun__
+  return "/usr/bin/ld";
+#else
   const Arg* A = Args.getLastArg(options::OPT_fuse_ld_EQ);
   StringRef UseLinker = A ? A->getValue() : CLANG_DEFAULT_LINKER;
 
@@ -376,6 +379,7 @@
     getDriver().Diag(diag::err_drv_invalid_linker_name) << A->getAsString(Args);
 
   return GetProgramPath(getDefaultLinker());
+#endif
 }
 
 types::ID ToolChain::LookupTypeForExtension(StringRef Ext) const {
diff -ruN llvm-4.0.0.src/tools/clang/lib/Driver/ToolChains.cpp llvm-4.0.0.src.patched/tools/clang/lib/Driver/ToolChains.cpp
--- llvm-4.0.0.src/tools/clang/lib/Driver/ToolChains.cpp	2017-01-10 22:13:08.000000000 +0100
+++ llvm-4.0.0.src.patched/tools/clang/lib/Driver/ToolChains.cpp	2017-04-12 02:43:31.758523004 +0200
@@ -3871,8 +3871,10 @@
   GCCInstallation.init(Triple, Args);
 
   path_list &Paths = getFilePaths();
+#ifndef __sun
   if (GCCInstallation.isValid())
     addPathIfExists(D, GCCInstallation.getInstallPath(), Paths);
+#endif
 
   addPathIfExists(D, getDriver().getInstalledDir(), Paths);
   if (getDriver().getInstalledDir() != getDriver().Dir)
@@ -3881,20 +3883,25 @@
   addPathIfExists(D, getDriver().SysRoot + getDriver().Dir + "/../lib", Paths);
 
   std::string LibPath = "/usr/lib/";
+  std::string GCCLibPath = "/usr/gcc/6/lib/gcc/";
+  std::string GCCVersion = "6.4.0";
   switch (Triple.getArch()) {
   case llvm::Triple::x86:
+    GCCLibPath += ("i386-" + Triple.getVendorName() + "-" + Triple.getOSName()).str() + "/"+GCCVersion+"/";
   case llvm::Triple::sparc:
     break;
   case llvm::Triple::x86_64:
+    GCCLibPath += ("i386-" + Triple.getVendorName() + "-" + Triple.getOSName()).str() + "/"+GCCVersion+"/amd64";
     LibPath += "amd64/";
     break;
   case llvm::Triple::sparcv9:
+    GCCLibPath += ("sparc-" + Triple.getVendorName() + "-" + Triple.getOSName()).str() + "/"+GCCVersion+"/sparcv9";
     LibPath += "sparcv9/";
     break;
   default:
     llvm_unreachable("Unsupported architecture");
   }
-
+  addPathIfExists(D, GCCLibPath, Paths);
   addPathIfExists(D, getDriver().SysRoot + LibPath, Paths);
 }
 
diff -ruN llvm-4.0.0.src/tools/clang/lib/Driver/Tools.cpp llvm-4.0.0.src.patched/tools/clang/lib/Driver/Tools.cpp
--- llvm-4.0.0.src/tools/clang/lib/Driver/Tools.cpp	2017-02-21 20:11:22.000000000 +0100
+++ llvm-4.0.0.src.patched/tools/clang/lib/Driver/Tools.cpp	2017-04-12 02:43:31.758002276 +0200
@@ -8219,7 +8219,7 @@
 
   // asm_final spec is empty.
 
-  const char *Exec = Args.MakeArgString(getToolChain().GetProgramPath("as"));
+  const char *Exec = Args.MakeArgString(getToolChain().GetProgramPath("gas"));
   C.addCommand(llvm::make_unique<Command>(JA, *this, Exec, CmdArgs, Inputs));
 }
 
@@ -8728,7 +8728,7 @@
   for (const auto &II : Inputs)
     CmdArgs.push_back(II.getFilename());
 
-  const char *Exec = Args.MakeArgString(getToolChain().GetProgramPath("as"));
+  const char *Exec = Args.MakeArgString(getToolChain().GetProgramPath("gas"));
   C.addCommand(llvm::make_unique<Command>(JA, *this, Exec, CmdArgs, Inputs));
 }
 
diff -ruN llvm-4.0.0.src/tools/clang/lib/Frontend/InitHeaderSearch.cpp llvm-4.0.0.src.patched/tools/clang/lib/Frontend/InitHeaderSearch.cpp
--- llvm-4.0.0.src/tools/clang/lib/Frontend/InitHeaderSearch.cpp	2016-12-02 10:51:51.000000000 +0100
+++ llvm-4.0.0.src.patched/tools/clang/lib/Frontend/InitHeaderSearch.cpp	2017-04-12 02:43:31.694672202 +0200
@@ -223,7 +223,9 @@
         break;
     default:
       // FIXME: temporary hack: hard-coded paths.
+#ifndef __sun__
       AddPath("/usr/local/include", System, false);
+#endif
       break;
     }
   }
@@ -397,6 +399,9 @@
   case llvm::Triple::Linux:
     llvm_unreachable("Include management is handled in the driver.");
     break;
+  case llvm::Triple::Solaris:
+    AddGnuCPlusPlusIncludePaths("/usr/gcc/6/include/c++/6.4.0/",
+                                "i386-pc-solaris2.11", "", "", triple); break;
   case llvm::Triple::Win32:
     switch (triple.getEnvironment()) {
     default: llvm_unreachable("Include management is handled in the driver.");
@@ -470,7 +475,9 @@
           AddUnmappedPath(P, CXXSystem, false);
         }
       }
+#ifndef __sun__
       AddPath("/usr/include/c++/v1", CXXSystem, false);
+#endif
     } else {
       AddDefaultCPlusPlusIncludePaths(triple, HSOpts);
     }
