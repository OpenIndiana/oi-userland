/jds/bin/diff -uprN gnome-settings-daemon-2.25.90.old/plugins/keybindings/gsd-keybindings-manager.c gnome-settings-daemon-2.25.90/plugins/keybindings/gsd-keybindings-manager.c
--- gnome-settings-daemon-2.25.90.old/plugins/keybindings/gsd-keybindings-manager.c	2009-02-10 19:20:10.932741000 +0000
+++ gnome-settings-daemon-2.25.90/plugins/keybindings/gsd-keybindings-manager.c	2009-02-10 19:21:03.400983000 +0000
@@ -269,25 +269,6 @@ same_key (const Key *key, const Key *oth
         return FALSE;
 }
 
-static gboolean
-key_already_used (GsdKeybindingsManager *manager,
-                  Binding               *binding)
-{
-        GSList *li;
-
-        for (li = manager->priv->binding_list; li != NULL; li = li->next) {
-                Binding *tmp_binding =  (Binding*) li->data;
-
-                if (tmp_binding != binding &&
-                    same_keycode (&tmp_binding->key, &binding->key) &&
-                    tmp_binding->key.state == binding->key.state) {
-                        return TRUE;
-                }
-        }
-
-        return FALSE;
-}
-
 static void
 binding_unregister_keys (GsdKeybindingsManager *manager)
 {
@@ -330,8 +311,6 @@ binding_register_keys (GsdKeybindingsMan
 		}
 
                 if (!same_key (&binding->previous_key, &binding->key)) {
-                        /* Ungrab key if it changed and not clashing with previously set binding */
-                        if (!key_already_used (manager, binding)) {
                                 gint i;
 
                                 need_flush = TRUE;
@@ -347,8 +326,6 @@ binding_register_keys (GsdKeybindingsMan
                                 binding->previous_key.keycodes = g_new0 (guint, i);
                                 for (i = 0; binding->key.keycodes[i]; ++i)
                                         binding->previous_key.keycodes[i] = binding->key.keycodes[i];
-                        } else
-                                g_warning ("Key binding (%s) is already in use", binding->binding_str);
                 }
         }
 
