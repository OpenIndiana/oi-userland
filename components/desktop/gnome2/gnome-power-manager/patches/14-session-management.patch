diff -uprN gnome-power-manager-2.24.4/src/gpm-main.c gnome-power-manager-2.24.4-new/src/gpm-main.c
--- gnome-power-manager-2.24.4/src/gpm-main.c	2009-01-16 19:37:59.000000000 +0800
+++ gnome-power-manager-2.24.4-new/src/gpm-main.c	2010-03-08 13:12:14.035256966 +0800
@@ -40,6 +40,7 @@
 #include "egg-debug.h"
 
 #include "gpm-manager.h"
+#include "gpm-session.h"
 #include "dbus/xdg-power-management-core.h"
 
 static void gpm_exit (GpmManager *manager);
@@ -125,6 +126,39 @@ timed_exit_cb (GMainLoop *loop)
 }
 
 /**
+ * gpm_main_stop_cb:
+ **/
+static void
+gpm_main_stop_cb (GpmSession *session, GMainLoop *loop)
+{
+	g_main_loop_quit (loop);
+}
+
+/**
+ * gpm_main_query_end_session_cb:
+ **/
+static void
+gpm_main_query_end_session_cb (GpmSession *session, guint flags, GMainLoop
+		*loop)
+{
+	/* just send response */
+	gpm_session_end_session_response (session, TRUE, NULL);
+}
+
+/**
+ * gpm_main_end_session_cb:
+ **/
+static void
+gpm_main_end_session_cb (GpmSession *session, guint flags, GMainLoop *loop)
+{
+	/* send response */
+	gpm_session_end_session_response (session, TRUE, NULL);
+
+	/* exit loop, will unref manager */
+	g_main_loop_quit (loop);
+}
+
+/**
  * main:
  **/
 int
@@ -140,6 +174,7 @@ main (int argc, char *argv[])
 	gboolean timed_exit = FALSE;
 	gboolean immediate_exit = FALSE;
 	GpmManager *manager = NULL;
+	GpmSession *session = NULL;
 	GError *error = NULL;
 	GOptionContext *context;
  	GnomeProgram *program;
@@ -235,6 +270,17 @@ main (int argc, char *argv[])
 
 	loop = g_main_loop_new (NULL, FALSE);
 
+	/* optionally register with the session */
+	session = gpm_session_new ();
+	g_signal_connect (session, "stop", G_CALLBACK (gpm_main_stop_cb), loop);
+	g_signal_connect (session, "query-end-session",
+			(gpm_main_query_end_session_cb),
+			loop);
+	g_signal_connect (session, "end-session",
+			G_CALLBACK (gpm_main_end_session_cb), loop);
+	gpm_session_register_client (session, "gnome-power-manager",
+			getenv ("DESKTOP_AUTOSTART_ID"));
+
 	/* Only timeout and close the mainloop if we have specified it
 	 * on the command line */
 	if (timed_exit) {
@@ -249,6 +295,7 @@ main (int argc, char *argv[])
 
 	/* rip down gstreamer */
 	gst_deinit ();
+	g_object_unref (session);
 	g_object_unref (manager);
 unref_program:
 	g_object_unref (program);
diff -uprN gnome-power-manager-2.24.4/src/gpm-session.c gnome-power-manager-2.24.4-new/src/gpm-session.c
--- gnome-power-manager-2.24.4/src/gpm-session.c	1970-01-01 08:00:00.000000000 +0800
+++ gnome-power-manager-2.24.4-new/src/gpm-session.c	2010-03-08 12:58:20.915252997 +0800
@@ -0,0 +1,288 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2008-2009 Richard Hughes <richard@hughsie.com>
+ *
+ * Licensed under the GNU General Public License Version 2
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include "config.h"
+
+#include <string.h>
+#include <glib.h>
+#include <glib/gi18n.h>
+#include <dbus/dbus-glib.h>
+
+#include "gpm-session.h"
+#include "gpm-common.h"
+#include "egg-debug.h"
+#include "gpm-marshal.h"
+
+static void     gpm_session_finalize   (GObject		*object);
+
+#define GPM_SESSION_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GPM_TYPE_SESSION, GpmSessionPrivate))
+
+#define GPM_SESSION_MANAGER_SERVICE			"org.gnome.SessionManager"
+#define GPM_SESSION_MANAGER_PATH			"/org/gnome/SessionManager"
+#define GPM_SESSION_MANAGER_INTERFACE			"org.gnome.SessionManager"
+#define GPM_SESSION_MANAGER_CLIENT_PRIVATE_INTERFACE	"org.gnome.SessionManager.ClientPrivate"
+
+struct GpmSessionPrivate
+{
+	DBusGProxy		*proxy;
+	DBusGProxy		*proxy_client_private;
+};
+
+enum {
+	STOP,
+	QUERY_END_SESSION,
+	END_SESSION,
+	CANCEL_END_SESSION,
+	LAST_SIGNAL
+};
+
+static guint signals [LAST_SIGNAL] = { 0 };
+static gpointer gpm_session_object = NULL;
+
+G_DEFINE_TYPE (GpmSession, gpm_session, G_TYPE_OBJECT)
+
+/**
+ * gpm_session_stop_cb:
+ **/
+static void
+gpm_session_stop_cb (DBusGProxy *proxy, GpmSession *session)
+{
+	egg_debug ("emitting ::stop()");
+	g_signal_emit (session, signals [STOP], 0);
+}
+
+/**
+ * gpm_session_query_end_session_cb:
+ **/
+static void
+gpm_session_query_end_session_cb (DBusGProxy *proxy, guint flags, GpmSession *session)
+{
+	egg_debug ("emitting ::query-end-session(%i)", flags);
+	g_signal_emit (session, signals [QUERY_END_SESSION], 0, flags);
+}
+
+/**
+ * gpm_session_end_session_cb:
+ **/
+static void
+gpm_session_end_session_cb (DBusGProxy *proxy, guint flags, GpmSession *session)
+{
+	egg_debug ("emitting ::end-session(%i)", flags);
+	g_signal_emit (session, signals [END_SESSION], 0, flags);
+}
+
+/**
+ * gpm_session_end_session_response:
+ **/
+gboolean
+gpm_session_end_session_response (GpmSession *session, gboolean is_okay, const gchar *reason)
+{
+	gboolean ret = FALSE;
+	GError *error = NULL;
+
+	g_return_val_if_fail (GPM_IS_SESSION (session), FALSE);
+	g_return_val_if_fail (session->priv->proxy_client_private != NULL, FALSE);
+
+	/* no gnome-session */
+	if (session->priv->proxy_client_private == NULL) {
+		egg_warning ("no gnome-session proxy");
+		goto out;
+	}
+
+	/* send response */
+	ret = dbus_g_proxy_call (session->priv->proxy_client_private, "EndSessionResponse", &error,
+				 G_TYPE_BOOLEAN, is_okay,
+				 G_TYPE_STRING, reason,
+				 G_TYPE_INVALID,
+				 G_TYPE_INVALID);
+	if (!ret) {
+		egg_warning ("failed to send session response: %s", error->message);
+		g_error_free (error);
+		goto out;
+	}
+out:
+	return ret;
+}
+
+/**
+ * gpm_session_register_client:
+ **/
+gboolean
+gpm_session_register_client (GpmSession *session, const gchar *app_id, const gchar *client_startup_id)
+{
+	gboolean ret = FALSE;
+	gchar *client_id = NULL;
+	GError *error = NULL;
+	DBusGConnection *connection;
+
+	g_return_val_if_fail (GPM_IS_SESSION (session), FALSE);
+
+	/* no gnome-session */
+	if (session->priv->proxy == NULL) {
+		egg_warning ("no gnome-session");
+		goto out;
+	}
+
+	/* find out if this change altered the inhibited state */
+	ret = dbus_g_proxy_call (session->priv->proxy, "RegisterClient", &error,
+				 G_TYPE_STRING, app_id,
+				 G_TYPE_STRING, client_startup_id,
+				 G_TYPE_INVALID,
+				 DBUS_TYPE_G_OBJECT_PATH, &client_id,
+				 G_TYPE_INVALID);
+	if (!ret) {
+		egg_warning ("failed to register client '%s': %s", client_startup_id, error->message);
+		g_error_free (error);
+		goto out;
+	}
+
+	/* get org.gnome.Session.ClientPrivate interface */
+	connection = dbus_g_bus_get (DBUS_BUS_SESSION, NULL);
+	session->priv->proxy_client_private = dbus_g_proxy_new_for_name_owner (connection, GPM_SESSION_MANAGER_SERVICE,
+									       client_id, GPM_SESSION_MANAGER_CLIENT_PRIVATE_INTERFACE, &error);
+	if (session->priv->proxy_client_private == NULL) {
+		egg_warning ("DBUS error: %s", error->message);
+		g_error_free (error);
+		goto out;
+	}
+
+	/* get Stop */
+	dbus_g_proxy_add_signal (session->priv->proxy_client_private, "Stop", G_TYPE_INVALID);
+	dbus_g_proxy_connect_signal (session->priv->proxy_client_private, "Stop", G_CALLBACK (gpm_session_stop_cb), session, NULL);
+
+	/* get QueryEndSession */
+	dbus_g_proxy_add_signal (session->priv->proxy_client_private, "QueryEndSession", G_TYPE_UINT, G_TYPE_INVALID);
+	dbus_g_proxy_connect_signal (session->priv->proxy_client_private, "QueryEndSession", G_CALLBACK (gpm_session_query_end_session_cb), session, NULL);
+
+	/* get EndSession */
+	dbus_g_proxy_add_signal (session->priv->proxy_client_private, "EndSession", G_TYPE_UINT, G_TYPE_INVALID);
+	dbus_g_proxy_connect_signal (session->priv->proxy_client_private, "EndSession", G_CALLBACK (gpm_session_end_session_cb), session, NULL);
+
+	egg_debug ("registered startup '%s' to client id '%s'", client_startup_id, client_id);
+out:
+	g_free (client_id);
+	return ret;
+}
+
+/**
+ * gpm_session_class_init:
+ * @klass: This class instance
+ **/
+static void
+gpm_session_class_init (GpmSessionClass *klass)
+{
+	GObjectClass *object_class = G_OBJECT_CLASS (klass);
+	object_class->finalize = gpm_session_finalize;
+	g_type_class_add_private (klass, sizeof (GpmSessionPrivate));
+
+	signals [STOP] =
+		g_signal_new ("stop",
+			      G_TYPE_FROM_CLASS (object_class),
+			      G_SIGNAL_RUN_LAST,
+			      G_STRUCT_OFFSET (GpmSessionClass, stop),
+			      NULL, NULL, g_cclosure_marshal_VOID__VOID,
+			      G_TYPE_NONE, 0);
+	signals [QUERY_END_SESSION] =
+		g_signal_new ("query-end-session",
+			      G_TYPE_FROM_CLASS (object_class),
+			      G_SIGNAL_RUN_LAST,
+			      G_STRUCT_OFFSET (GpmSessionClass, query_end_session),
+			      NULL, NULL, g_cclosure_marshal_VOID__UINT,
+			      G_TYPE_NONE, 1, G_TYPE_UINT);
+	signals [END_SESSION] =
+		g_signal_new ("end-session",
+			      G_TYPE_FROM_CLASS (object_class),
+			      G_SIGNAL_RUN_LAST,
+			      G_STRUCT_OFFSET (GpmSessionClass, end_session),
+			      NULL, NULL, g_cclosure_marshal_VOID__UINT,
+			      G_TYPE_NONE, 1, G_TYPE_UINT);
+	signals [CANCEL_END_SESSION] =
+		g_signal_new ("cancel-end-session",
+			      G_TYPE_FROM_CLASS (object_class),
+			      G_SIGNAL_RUN_LAST,
+			      G_STRUCT_OFFSET (GpmSessionClass, cancel_end_session),
+			      NULL, NULL, g_cclosure_marshal_VOID__VOID,
+			      G_TYPE_NONE, 0);
+}
+
+/**
+ * gpm_session_init:
+ * @session: This class instance
+ **/
+static void
+gpm_session_init (GpmSession *session)
+{
+	DBusGConnection *connection;
+	GError *error = NULL;
+
+	session->priv = GPM_SESSION_GET_PRIVATE (session);
+	session->priv->proxy_client_private = NULL;
+
+	connection = dbus_g_bus_get (DBUS_BUS_SESSION, NULL);
+
+	/* get org.gnome.Session interface */
+	session->priv->proxy = dbus_g_proxy_new_for_name_owner (connection, GPM_SESSION_MANAGER_SERVICE,
+								GPM_SESSION_MANAGER_PATH,
+								GPM_SESSION_MANAGER_INTERFACE, &error);
+	if (session->priv->proxy == NULL) {
+		egg_warning ("DBUS error: %s", error->message);
+		g_error_free (error);
+		return;
+	}
+
+}
+
+/**
+ * gpm_session_finalize:
+ * @object: This class instance
+ **/
+static void
+gpm_session_finalize (GObject *object)
+{
+	GpmSession *session;
+	g_return_if_fail (object != NULL);
+	g_return_if_fail (GPM_IS_SESSION (object));
+
+	session = GPM_SESSION (object);
+	session->priv = GPM_SESSION_GET_PRIVATE (session);
+
+	g_object_unref (session->priv->proxy);
+	if (session->priv->proxy_client_private != NULL)
+		g_object_unref (session->priv->proxy_client_private);
+
+	G_OBJECT_CLASS (gpm_session_parent_class)->finalize (object);
+}
+
+/**
+ * gpm_session_new:
+ * Return value: new GpmSession instance.
+ **/
+GpmSession *
+gpm_session_new (void)
+{
+	if (gpm_session_object != NULL) {
+		g_object_ref (gpm_session_object);
+	} else {
+		gpm_session_object = g_object_new (GPM_TYPE_SESSION, NULL);
+		g_object_add_weak_pointer (gpm_session_object, &gpm_session_object);
+	}
+	return GPM_SESSION (gpm_session_object);
+}
diff -uprN gnome-power-manager-2.24.4/src/gpm-session.h gnome-power-manager-2.24.4-new/src/gpm-session.h
--- gnome-power-manager-2.24.4/src/gpm-session.h	1970-01-01 08:00:00.000000000 +0800
+++ gnome-power-manager-2.24.4-new/src/gpm-session.h	2010-03-08 12:59:29.734600856 +0800
@@ -0,0 +1,70 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2008 Richard Hughes <richard@hughsie.com>
+ *
+ * Licensed under the GNU General Public License Version 2
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#ifndef __GPM_SESSION_H
+#define __GPM_SESSION_H
+
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+
+#define GPM_TYPE_SESSION		(gpm_session_get_type ())
+#define GPM_SESSION(o)			(G_TYPE_CHECK_INSTANCE_CAST ((o), GPM_TYPE_SESSION, GpmSession))
+#define GPM_SESSION_CLASS(k)		(G_TYPE_CHECK_CLASS_CAST((k), GPM_TYPE_SESSION, GpmSessionClass))
+#define GPM_IS_SESSION(o)		(G_TYPE_CHECK_INSTANCE_TYPE ((o), GPM_TYPE_SESSION))
+#define GPM_IS_SESSION_CLASS(k)		(G_TYPE_CHECK_CLASS_TYPE ((k), GPM_TYPE_SESSION))
+#define GPM_SESSION_GET_CLASS(o)	(G_TYPE_INSTANCE_GET_CLASS ((o), GPM_TYPE_SESSION, GpmSessionClass))
+
+typedef struct GpmSessionPrivate GpmSessionPrivate;
+
+typedef struct
+{
+	GObject			 parent;
+	GpmSessionPrivate	*priv;
+} GpmSession;
+
+typedef struct
+{
+	GObjectClass	parent_class;
+	/* just exit */
+	void		(* stop)			(GpmSession	*session);
+	/* reply with EndSessionResponse */
+	void		(* query_end_session)		(GpmSession	*session,
+							 guint		 flags);
+	/* reply with EndSessionResponse */
+	void		(* end_session)			(GpmSession	*session,
+							 guint		 flags);
+	void		(* cancel_end_session)		(GpmSession	*session);
+} GpmSessionClass;
+
+GType		 gpm_session_get_type			(void);
+GpmSession	*gpm_session_new			(void);
+
+gboolean	 gpm_session_register_client		(GpmSession	*session,
+							 const gchar	*app_id,
+							 const gchar	*client_startup_id);
+gboolean	 gpm_session_end_session_response	(GpmSession	*session,
+							 gboolean	 is_okay,
+							 const gchar	*reason);
+
+G_END_DECLS
+
+#endif	/* __GPM_SESSION_H */
diff -uprN gnome-power-manager-2.24.4/src/Makefile.am gnome-power-manager-2.24.4-new/src/Makefile.am
--- gnome-power-manager-2.24.4/src/Makefile.am	2010-03-08 13:14:11.869260635 +0800
+++ gnome-power-manager-2.24.4-new/src/Makefile.am	2010-03-08 13:13:18.205001828 +0800
@@ -228,6 +228,8 @@ gnome_power_manager_SOURCES =				\
 	gpm-graph-widget.c				\
 	gpm-feedback-widget.h				\
 	gpm-feedback-widget.c				\
+	gpm-session.h					\
+	gpm-session.c					\
 	$(NULL)
 
 gnome_power_manager_LDADD =				\
diff -uprN gnome-power-manager-2.24.4-old/src/gpm-cpufreq.c gnome-power-manager-2.24.4/src/gpm-cpufreq.c
--- gnome-power-manager-2.24.4-old/src/gpm-cpufreq.c	2010-03-25 13:56:56.785833587 +0800
+++ gnome-power-manager-2.24.4/src/gpm-cpufreq.c	2010-03-25 13:57:18.574207993 +0800
@@ -120,7 +120,9 @@ gpm_cpufreq_sync_policy (GpmCpufreq *cpu
 
 	/* change to the right governer and settings */
 	hal_gcpufreq_set_governor (cpufreq->priv->hal_cpufreq, cpufreq_type);
+#if 0
	hal_gcpufreq_set_consider_nice (cpufreq->priv->hal_cpufreq, cpufreq_consider_nice);
+#endif
 	// Fix for bugster #6727770. hal_gcpufreq_set_performance (cpufreq->priv->hal_cpufreq, cpufreq_performance);
 	return TRUE;
 }
