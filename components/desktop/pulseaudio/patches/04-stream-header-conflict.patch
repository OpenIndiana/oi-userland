module_info is already defined in /usr/include/sys/stream.h; 
submitted upstream, accepted for next release

  41823 some pulseaudio modules use data type that conflicts with a system data type
  https://bugs.freedesktop.org/show_bug.cgi?id=41823

--- pulseaudio-6.0/src/modules/bluetooth/module-bluez4-discover.c	2015-02-12 06:10:35.000000000 -0800
+++ pulseaudio-6.0/src/modules/bluetooth/module-bluez4-discover.c	2015-06-05 15:38:18.312248116 -0700
@@ -58,13 +58,13 @@
     pa_hashmap *hashmap;
 };
 
-struct module_info {
+struct pa_module_info {
     char *path;
     uint32_t module;
 };
 
 static pa_hook_result_t load_module_for_device(pa_bluez4_discovery *y, const pa_bluez4_device *d, struct userdata *u) {
-    struct module_info *mi;
+    struct pa_module_info *mi;
 
     pa_assert(u);
     pa_assert(d);
@@ -97,7 +97,7 @@
             pa_xfree(args);
 
             if (m) {
-                mi = pa_xnew(struct module_info, 1);
+                mi = pa_xnew(struct pa_module_info, 1);
                 mi->module = m->index;
                 mi->path = pa_xstrdup(d->path);
 
@@ -175,7 +175,7 @@
         pa_bluez4_discovery_unref(u->discovery);
 
     if (u->hashmap) {
-        struct module_info *mi;
+        struct pa_module_info *mi;
 
         while ((mi = pa_hashmap_steal_first(u->hashmap))) {
             pa_xfree(mi->path);
--- pulseaudio-6.0/src/modules/gconf/module-gconf.c	2015-02-12 06:10:35.000000000 -0800
+++ pulseaudio-6.0/src/modules/gconf/module-gconf.c	2015-06-05 15:40:25.841105525 -0700
@@ -56,7 +56,7 @@
     uint32_t index;
 };
 
-struct module_info {
+struct pa_module_info {
     struct userdata *userdata;
     char *name;
 
@@ -129,7 +129,7 @@
     }
 }
 
-static void unload_one_module(struct module_info *m, unsigned i) {
+static void unload_one_module(struct pa_module_info *m, unsigned i) {
     struct userdata *u;
 
     pa_assert(m);
@@ -148,7 +148,7 @@
     m->items[i].name = m->items[i].args = NULL;
 }
 
-static void unload_all_modules(struct module_info *m) {
+static void unload_all_modules(struct pa_module_info *m) {
     unsigned i;
 
     pa_assert(m);
@@ -160,7 +160,7 @@
 }
 
 static void load_module(
-        struct module_info *m,
+        struct pa_module_info *m,
         unsigned i,
         const char *name,
         const char *args,
@@ -199,7 +199,7 @@
 }
 
 static void module_info_free(void *p) {
-    struct module_info *m = p;
+    struct pa_module_info *m = p;
 
     pa_assert(m);
 
@@ -227,14 +227,14 @@
 
             case '+': {
                 char *name;
-                struct module_info *m;
+                struct pa_module_info *m;
                 unsigned i, j;
 
                 if (!(name = read_string(u)))
                     goto fail;
 
                 if (!(m = pa_hashmap_get(u->module_infos, name))) {
-                    m = pa_xnew(struct module_info, 1);
+                    m = pa_xnew(struct pa_module_info, 1);
                     m->userdata = u;
                     m->name = name;
                     m->n_items = 0;
