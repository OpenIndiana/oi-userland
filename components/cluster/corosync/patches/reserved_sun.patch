commit 621e5175ab3eaa65c5f29927d0d301358712b504
Author: Andreas Grueninger <andreas.grueninger@example.com>
Date:   Tue Oct 25 12:30:44 2016 +0200

    Fix: sun is a reserved macro

diff --git a/qdevices/unix-socket.c b/qdevices/unix-socket.c
index 1cbd825..1c384f4 100644
--- a/qdevices/unix-socket.c
+++ b/qdevices/unix-socket.c
@@ -39,8 +39,11 @@
 #include <fcntl.h>
 #include <unistd.h>
 
+#include <string.h>
+
 #include "unix-socket.h"
 
+
 static int
 unix_socket_set_non_blocking(int fd)
 {
@@ -64,9 +67,9 @@ int
 unix_socket_server_create(const char *path, int non_blocking, int backlog)
 {
 	int s;
-	struct sockaddr_un sun;
+	struct sockaddr_un address;
 
-	if (strlen(path) >= sizeof(sun.sun_path)) {
+	if (strlen(path) >= sizeof(address.sun_path)) {
 		errno = ENAMETOOLONG;
 		return (-1);
 	}
@@ -75,12 +78,12 @@ unix_socket_server_create(const char *path, int non_blocking, int backlog)
 		return (-1);
 	}
 
-	memset(&sun, 0, sizeof(sun));
-	sun.sun_family = AF_UNIX;
+	memset(&address, 0, sizeof(address));
+	address.sun_family = AF_UNIX;
 
-	strncpy(sun.sun_path, path, strlen(path));
+	strncpy(address.sun_path, path, strlen(path));
 	unlink(path);
-	if (bind(s, (struct sockaddr *)&sun, SUN_LEN(&sun)) != 0) {
+	if (bind(s, (struct sockaddr *)&address, SUN_LEN(&address)) != 0) {
 		close(s);
 
 		return (-1);
@@ -107,9 +110,9 @@ int
 unix_socket_client_create(const char *path, int non_blocking)
 {
 	int s;
-	struct sockaddr_un sun;
+	struct sockaddr_un address;
 
-	if (strlen(path) >= sizeof(sun.sun_path)) {
+	if (strlen(path) >= sizeof(address.sun_path)) {
 		errno = ENAMETOOLONG;
 		return (-1);
 	}
@@ -118,10 +121,10 @@ unix_socket_client_create(const char *path, int non_blocking)
 		return (-1);
 	}
 
-	memset(&sun, 0, sizeof(sun));
-	sun.sun_family = AF_UNIX;
+	memset(&address, 0, sizeof(address));
+	address.sun_family = AF_UNIX;
 
-	strncpy(sun.sun_path, path, strlen(path));
+	strncpy(address.sun_path, path, strlen(path));
 
 	if (non_blocking) {
 		if (unix_socket_set_non_blocking(s) != 0) {
@@ -131,7 +134,7 @@ unix_socket_client_create(const char *path, int non_blocking)
 		}
 	}
 
-	if (connect(s, (struct sockaddr *)&sun, SUN_LEN(&sun)) != 0) {
+	if (connect(s, (struct sockaddr *)&address, SUN_LEN(&address)) != 0) {
 		close(s);
 
 		return (-1);
@@ -163,12 +166,12 @@ unix_socket_server_destroy(int sock, const char *path)
 int
 unix_socket_server_accept(int sock, int non_blocking)
 {
-	struct sockaddr_un sun;
+	struct sockaddr_un address;
 	socklen_t sun_len;
 	int client_sock;
 
-	sun_len = sizeof(sun);
-	if ((client_sock = accept(sock, (struct sockaddr *)&sun, &sun_len)) < 0) {
+	sun_len = sizeof(address);
+	if ((client_sock = accept(sock, (struct sockaddr *)&address, &sun_len)) < 0) {
 		return (-1);
 	}
 
