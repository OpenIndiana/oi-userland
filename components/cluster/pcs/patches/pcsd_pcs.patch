Common subdirectories: a/pcsd and b/pcsd
diff -nur a/pcsd/bootstrap.rb b/pcsd/bootstrap.rb
--- a/pcsd/bootstrap.rb	Fri Nov  4 16:15:24 2016
+++ b/pcsd/bootstrap.rb	Fri Nov  4 16:18:25 2016
@@ -4,6 +4,9 @@
 
 require 'settings.rb'
 
+def is_solaris()
+	  return (`uname -s`.chomp.eql? "SunOS")
+end
 
 def is_rhel6()
   # Checking corosync version works in most cases and supports non-rhel
@@ -47,6 +50,7 @@
 COROSYNC = COROSYNC_BINARIES + "corosync"
 ISRHEL6 = is_rhel6
 ISSYSTEMCTL = is_systemctl
+ISSOLARIS = is_solaris
 if ISRHEL6
   COROSYNC_CMAPCTL = COROSYNC_BINARIES + "corosync-objctl"
 else
diff -nur a/pcsd/pcs.rb b/pcsd/pcs.rb
--- a/pcsd/pcs.rb	Fri Nov  4 17:01:52 2016
+++ b/pcsd/pcs.rb	Fri Nov  4 17:17:04 2016
@@ -893,7 +893,11 @@
 end
 
 def pacemaker_running?()
-  is_service_running?('pacemaker')
+	if ISSOLARIS
+    is_service_running?('pacemakerd')
+	else	
+    is_service_running?('pacemaker')
+	end	
 end
 
 def pacemaker_remote_running?()
@@ -950,6 +954,8 @@
     sleep(10)
     if ISSYSTEMCTL
       exec("systemctl", "restart", "pcsd")
+    elsif ISSOLARIS
+      exec("svcadm", "restart", "pcsd")
     else
       exec("service", "pcsd", "restart")
     end
@@ -1694,7 +1700,11 @@
 end
 
 def get_node_uptime()
-  uptime = `cat /proc/uptime`.chomp.split(' ')[0].split('.')[0].to_i
+	if ISSOLARIS
+    uptime = Time.now.to_i - `kstat -p unix:0:system_misc:boot_time`.chomp.split(' ')[1].to_i
+	else	
+    uptime = `cat /proc/uptime`.chomp.split(' ')[0].split('.')[0].to_i
+	end	
   mm, ss = uptime.divmod(60)
   hh, mm = mm.divmod(60)
   dd, hh = hh.divmod(24)
@@ -1956,6 +1966,8 @@
 def is_service_enabled?(service)
   if ISSYSTEMCTL
     cmd = ['systemctl', 'is-enabled', "#{service}.service"]
+	elsif ISSOLARIS
+    cmd = ['svcs', '-lv', 'hacluster', '|','grep enabled|grep true']
   else
     cmd = ['chkconfig', service]
   end
@@ -1966,6 +1978,8 @@
 def is_service_running?(service)
   if ISSYSTEMCTL
     cmd = ['systemctl', 'status', "#{service}.service"]
+  elsif ISSOLARIS
+    cmd = ['pgrep', '-f', service]			
   else
     cmd = ['service', service, 'status']
   end
@@ -1974,6 +1988,11 @@
 end
 
 def is_service_installed?(service)
+	if ISSOLARIS
+    cmd = ['svcs', '-lv', service]
+    _, _, retcode = run_cmd(PCSAuth.getSuperuserAuth(), *cmd)
+    return (retcode == 0)
+	end	
   unless ISSYSTEMCTL
     stdout, _, retcode = run_cmd(PCSAuth.getSuperuserAuth(), 'chkconfig')
     if retcode != 0
@@ -2004,6 +2023,8 @@
   if ISSYSTEMCTL
     # fails when the service is not installed
     cmd = ['systemctl', 'enable', "#{service}.service"]
+	elsif ISSOLARIS
+    cmd = ['svcadm', 'enable', "hacluster"]
   else
     # fails when the service is not installed
     cmd = ['chkconfig', service, 'on']
@@ -2020,6 +2041,8 @@
 
   if ISSYSTEMCTL
     cmd = ['systemctl', 'disable', "#{service}.service"]
+  elsif ISSOLARIS
+    cmd = ['svcadm', 'disable', "hacluster"]
   else
     cmd = ['chkconfig', service, 'off']
   end
@@ -2028,6 +2051,11 @@
 end
 
 def start_service(service)
+  if ISSOLARIS
+     cmd = ['svcadm', 'enable', "hacluster"]
+     _, _, retcode = run_cmd(PCSAuth.getSuperuserAuth(), *cmd)
+     return (retcode == 0)
+  end 
   _, _, retcode = run_cmd(
     PCSAuth.getSuperuserAuth(), "service", service, "start"
   )
@@ -2038,6 +2066,11 @@
   if not is_service_installed?(service)
     return true
   end
+  if ISSOLARIS
+     cmd = ['svcadm', 'disable', "hacluster"]
+     _, _, retcode = run_cmd(PCSAuth.getSuperuserAuth(), *cmd)
+     return (retcode == 0)
+  end
   _, _, retcode = run_cmd(
     PCSAuth.getSuperuserAuth(), "service", service, "stop"
   )
