diff -urN gnome-system-tools-2.14.0.orig/src/users/Makefile.am gnome-system-tools-2.14.0/src/users/Makefile.am
--- gnome-system-tools-2.14.0.orig/src/users/Makefile.am	2008-08-20 09:37:14.200348000 +0800
+++ gnome-system-tools-2.14.0/src/users/Makefile.am	2008-08-22 07:19:34.724969000 +0800
@@ -32,6 +32,7 @@
 	user-group-xml.c user-group-xml.h \
 	profiles-table.c profiles-table.h \
 	profile-settings.c profile-settings.h \
-	privileges-table.c privileges-table.h
+	privileges-table.c privileges-table.h \
+	roles-table.c roles-table.h
 
 toolpixmaps =
diff -urN gnome-system-tools-2.14.0.orig/src/users/callbacks.c gnome-system-tools-2.14.0/src/users/callbacks.c
--- gnome-system-tools-2.14.0.orig/src/users/callbacks.c	2008-08-20 09:37:14.203441000 +0800
+++ gnome-system-tools-2.14.0/src/users/callbacks.c	2008-08-20 09:39:07.030442000 +0800
@@ -641,7 +641,11 @@
 	combo_add_shells (shells_combo);
 	combo_add_groups (groups_option_menu, TRUE);
 	profile_settings_set_data (node);
+#ifndef __sun
 	populate_privileges_table_from_profile (privileges, node);
+#else
+	populate_privileges_table(privileges, node);
+#endif
 
 	g_object_set_data (G_OBJECT (dialog), "data", node);
 
diff -urN gnome-system-tools-2.14.0.orig/src/users/group-settings.c gnome-system-tools-2.14.0/src/users/group-settings.c
--- gnome-system-tools-2.14.0.orig/src/users/group-settings.c	2008-08-20 09:37:14.205458000 +0800
+++ gnome-system-tools-2.14.0/src/users/group-settings.c	2008-08-20 09:39:07.023541000 +0800
@@ -79,6 +79,7 @@
 	GtkWidget *group_settings_all = gst_dialog_get_widget (tool->main_dialog, "group_settings_all");
 	GtkWidget *group_settings_members = gst_dialog_get_widget (tool->main_dialog, "group_settings_members");
 	GtkWidget *widget;
+	GtkSpinButton *spin_button;
 	gchar     *buf;
 	GList *group_settings_all_list = NULL;
 	
@@ -90,11 +91,12 @@
 	widget = gst_dialog_get_widget (tool->main_dialog, "group_settings_dialog");
 	gtk_window_set_title (GTK_WINDOW (widget), _("Create New Group"));
 
+	spin_button = GTK_SPIN_BUTTON (gst_dialog_get_widget (tool->main_dialog, "group_settings_gid"));
+	gtk_spin_button_set_range (spin_button, 0, IDMAX);
 	/* Fill in first available gid */
 	buf = (gchar *) find_new_id (gd->node, NULL);
 	if (buf) {
-		gtk_spin_button_set_value (GTK_SPIN_BUTTON (gst_dialog_get_widget (tool->main_dialog, "group_settings_gid")), 
-		                           g_strtod (buf, NULL));
+		gtk_spin_button_set_value (spin_button, g_strtod (buf, NULL));
 		g_free (buf);
 	}
 
@@ -357,6 +359,7 @@
 	txt = gst_xml_get_child_content (gd->node, "gid");
 	w0 = gst_dialog_get_widget (tool->main_dialog, "group_settings_gid");
 	gtk_widget_set_sensitive (w0, gst_tool_get_access (tool));
+	gtk_spin_button_set_range (GTK_SPIN_BUTTON (w0), 0, IDMAX);
 	gtk_spin_button_set_value (GTK_SPIN_BUTTON (w0), g_strtod (txt, NULL));
 
 	/* Show group settings dialog */
diff -urN gnome-system-tools-2.14.0.orig/src/users/passwd.c gnome-system-tools-2.14.0/src/users/passwd.c
--- gnome-system-tools-2.14.0.orig/src/users/passwd.c	2008-08-20 09:37:14.206361000 +0800
+++ gnome-system-tools-2.14.0/src/users/passwd.c	2008-08-20 09:39:07.029785000 +0800
@@ -191,10 +191,14 @@
 	else
 		password = g_strdup (pwd);
 
+#ifdef USE_AUTHEN_PAM
+	buf = g_strdup(password);
+#else
 	if (uses_md5 ()) 
 		buf = g_strdup (crypt_md5 (password, rand_str (salt, 8)));
 	else
 		buf = g_strdup (crypt (password, rand_str (salt, 2)));
+#endif
 
 	gst_xml_set_child_content (node, "password", buf);
 
diff -urN gnome-system-tools-2.14.0.orig/src/users/privileges-table.c gnome-system-tools-2.14.0/src/users/privileges-table.c
--- gnome-system-tools-2.14.0.orig/src/users/privileges-table.c	2008-08-20 09:37:14.222946000 +0800
+++ gnome-system-tools-2.14.0/src/users/privileges-table.c	2008-08-20 09:39:07.031073000 +0800
@@ -97,6 +97,7 @@
 	create_privileges_table (list);
 }
 
+#ifndef __sun
 void
 populate_privileges_table (GtkWidget *list, gchar *username)
 {
@@ -271,3 +272,152 @@
 		valid = gtk_tree_model_iter_next (model, &iter);
 	}
 }
+#else /* __sun */
+static gboolean
+user_has_rbac_profile( xmlNodePtr user_node, gchar *profile_name ) 
+{
+    xmlNodePtr  user_rbac, assigned_profiles, profile;
+    gchar       *buf;
+    gboolean    rval = FALSE;
+
+    user_rbac = gst_xml_element_find_first (user_node, "rbac");
+
+    /* It's possible that the profile has no entries */
+    if (user_rbac == NULL)
+        return(FALSE);
+
+    assigned_profiles = gst_xml_element_find_first (user_rbac, "rbac_profiles");
+    g_return_val_if_fail( assigned_profiles != NULL, FALSE );
+
+    for (profile = gst_xml_element_find_first (assigned_profiles, "rbac_profile");
+         profile != NULL;
+         profile = gst_xml_element_find_next (profile, "rbac_profile")) {
+            buf = gst_xml_element_get_content (profile);
+
+            if (strcmp (profile_name, buf) == 0) {
+                g_free (buf);
+                rval = TRUE;
+                break;
+            }
+
+            g_free (buf);
+    }
+
+    return rval;
+}
+
+void
+populate_privileges_table (GtkWidget *list, xmlNodePtr user_node)
+{
+	GtkTreeModel *model = gtk_tree_view_get_model (GTK_TREE_VIEW (list));
+	xmlNodePtr    rbacdb_root = get_root_node (NODE_RBAC);
+	xmlNodePtr    profiles, profile, user;
+	GtkTreeIter   iter;
+	gchar        *name, *desc, *buf;
+	gboolean      val;
+
+	gtk_list_store_clear (GTK_LIST_STORE (model));
+
+	profiles = gst_xml_element_find_first (rbacdb_root, "rbac_profiles");
+	for (profile = gst_xml_element_find_first (profiles, "rbac_profile");
+	     profile != NULL;
+	     profile = gst_xml_element_find_next (profile, "rbac_profile")) {
+		name = gst_xml_get_child_content (profile, "name");
+		desc = gst_xml_get_child_content (profile, "description");
+
+		if (name) {
+                        gchar *combined_str;
+
+			val = FALSE;
+
+			/* check whether the user already has RBAC profile */
+                        if (user_node ) {
+                            if ( user_has_rbac_profile( user_node, name )) {
+                                val = TRUE;
+                            }
+                        }
+
+                        if ( desc != NULL ) {
+                            combined_str = g_strdup_printf("%s (%s)", name, desc );
+                        }
+                        else {
+                            combined_str = name;
+                        }
+			
+			gtk_list_store_append (GTK_LIST_STORE (model), &iter);
+			gtk_list_store_set (GTK_LIST_STORE (model), &iter,
+					    0, val,
+					    1, combined_str,
+					    2, name,
+					    -1);
+                        if ( desc != NULL && combined_str != name ) 
+                            g_free( combined_str );
+			g_free (desc);
+			g_free (name);
+		}
+	}
+}
+
+static void
+privileges_save_data (xmlNodePtr profile, const gchar* widget_name )
+{
+        
+	GtkWidget    *list  = NULL;
+	GtkTreeModel *model = NULL;
+	GtkTreeIter   iter;
+	xmlNodePtr    rbac_node, rbac_profiles_node, rbac_profile_node;
+	gboolean      valid, active;
+	gchar        *name;
+
+	g_return_if_fail (profile != NULL);
+	g_return_if_fail (widget_name != NULL);
+
+	list  = gst_dialog_get_widget (tool->main_dialog, widget_name);
+	model = gtk_tree_view_get_model (GTK_TREE_VIEW (list));
+	rbac_node = gst_xml_element_find_first (profile, "rbac");
+        
+        if ( rbac_node != NULL ) {
+	    rbac_profiles_node = gst_xml_element_find_first (rbac_node, "rbac_profiles");
+            if (rbac_profiles_node) {
+                gst_xml_element_destroy_children (rbac_profiles_node);
+            }
+            else {
+                rbac_profiles_node = gst_xml_element_add (profile, "rbac_profiles");
+            }
+        }
+        else {
+            rbac_node =  gst_xml_element_add (profile, "rbac");
+            rbac_profiles_node = gst_xml_element_add (rbac_node, "rbac_profiles");
+        }
+
+	valid = gtk_tree_model_get_iter_first (model, &iter);
+
+	while (valid) {
+		gtk_tree_model_get (model, &iter,
+				    0, &active,
+				    2, &name,
+				    -1);
+
+		if (active) {
+			rbac_profile_node = gst_xml_element_add (rbac_profiles_node, "rbac_profile");
+			gst_xml_element_set_content (rbac_profile_node, name);
+		}
+
+		g_free (name);
+		valid = gtk_tree_model_iter_next (model, &iter);
+	}
+}
+
+void
+user_privileges_save_data (xmlNodePtr node)
+{
+    privileges_save_data( node, "user_privileges");
+}
+
+void
+profile_privileges_save_data (xmlNodePtr node)
+{
+    privileges_save_data( node, "profile_privileges");
+}
+
+#endif /* __sun */
diff -urN gnome-system-tools-2.14.0.orig/src/users/privileges-table.h gnome-system-tools-2.14.0/src/users/privileges-table.h
--- gnome-system-tools-2.14.0.orig/src/users/privileges-table.h	2008-08-20 09:37:14.223386000 +0800
+++ gnome-system-tools-2.14.0/src/users/privileges-table.h	2008-08-20 09:39:07.031423000 +0800
@@ -27,7 +27,13 @@
 void     create_user_privileges_table      (void);
 void     create_profile_privileges_table   (void);
 
+#ifndef __sun
 void     populate_privileges_table         (GtkWidget*, gchar*);
+void     user_privileges_save_data         (xmlNodePtr);
+void     profile_privileges_save_data      (xmlNodePtr);
+#else
+void     populate_privileges_table          (GtkWidget *list, xmlNodePtr user_node);
+#endif
 void     populate_privileges_table_from_profile (GtkWidget*, xmlNodePtr);
 
 GList*   user_privileges_get_list          (GList*);
diff -urN gnome-system-tools-2.14.0.orig/src/users/profile-settings.c gnome-system-tools-2.14.0/src/users/profile-settings.c
--- gnome-system-tools-2.14.0.orig/src/users/profile-settings.c	2008-08-20 09:37:14.222032000 +0800
+++ gnome-system-tools-2.14.0/src/users/profile-settings.c	2008-08-20 09:39:07.033086000 +0800
@@ -110,7 +110,11 @@
 	gst_xml_element_add_with_content (node, "mailbox_dir", "/var/mail");
 	gst_xml_element_add_with_content (node, "skel_dir",    "/etc/skel/");
 	gst_xml_element_add_with_content (node, "login_defs",  "1");
+#ifndef __sun
 	profile_groups_save_data (node);
+#else
+	profile_privileges_save_data (node);
+#endif
 }
 
 gchar*
diff -urN gnome-system-tools-2.14.0.orig/src/users/roles-table.c gnome-system-tools-2.14.0/src/users/roles-table.c
--- gnome-system-tools-2.14.0.orig/src/users/roles-table.c	1970-01-01 08:00:00.000000000 +0800
+++ gnome-system-tools-2.14.0/src/users/roles-table.c	2008-09-04 06:47:02.898745000 +0800
@@ -0,0 +1,217 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
+/* roles-table.c: this file is part of users-admin, a ximian-setup-tool frontend 
+ * for user administration.
+ * 
+ * Copyright (C) 2004 Carlos Garnacho
+ * Copyright (C) 2005 Carlos Garnacho, Sivan Greenberg
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * Authors: Carlos Garnacho Parro <carlosg@gnome.org>
+ *          Sivan Greenberg       <sivan@workaround.org>
+ */
+
+#ifdef HAVE_CONFIG_H
+#  include <config.h>
+#endif
+
+#include <gtk/gtk.h>
+
+#include "gst.h"
+#include "roles-table.h"
+#include "user_group.h"
+
+extern GstTool *tool;
+
+static void
+on_user_role_toggled (GtkCellRendererToggle *cell, gchar *path_str, gpointer data)
+{
+	GtkTreeModel *model = (GtkTreeModel*) data;
+	GtkTreePath  *path  = gtk_tree_path_new_from_string (path_str);
+	GtkTreeIter   iter;
+	gboolean      value;
+
+	gtk_tree_model_get_iter (GTK_TREE_MODEL (model), &iter, path);
+	gtk_tree_model_get (model, &iter, 0, &value, -1);
+	gtk_list_store_set (GTK_LIST_STORE (model), &iter, 0, !value, -1);
+}
+
+void
+create_roles_table (void)
+{
+	GtkTreeModel      *model;
+	GtkCellRenderer   *renderer;
+	GtkTreeViewColumn *column;
+	GtkTreeIter        iter;
+
+	GtkWidget *list = gst_dialog_get_widget (tool->main_dialog, "user_roles");
+
+	model = GTK_TREE_MODEL (gtk_list_store_new (3, G_TYPE_BOOLEAN, G_TYPE_STRING, G_TYPE_STRING));
+
+	gtk_tree_view_set_model (GTK_TREE_VIEW (list), model);
+	g_object_unref (model);
+
+	column = gtk_tree_view_column_new ();
+
+	renderer = gtk_cell_renderer_toggle_new ();
+	gtk_tree_view_column_pack_start (column, renderer, FALSE);
+	gtk_tree_view_column_set_attributes (column,
+					     renderer,
+					     "active", 0,
+					     NULL);
+	g_signal_connect (G_OBJECT (renderer), "toggled", G_CALLBACK (on_user_role_toggled), model);
+
+	renderer = gtk_cell_renderer_text_new ();
+	gtk_tree_view_column_pack_end (column, renderer, TRUE);
+	gtk_tree_view_column_set_attributes (column,
+					     renderer,
+					     "text", 1,
+					     NULL);
+
+	gtk_tree_view_column_set_sort_column_id (column, 1);
+	gtk_tree_view_insert_column (GTK_TREE_VIEW (list), column, 0);
+	gtk_tree_view_column_clicked (column);
+}
+
+#ifndef __sun
+#else /* __sun */
+static gboolean
+user_has_rbac_role( xmlNodePtr user_node, gchar *role_name ) 
+{
+    xmlNodePtr  user_role, assigned_roles, role;
+    gchar       *buf;
+    gboolean    rval = FALSE;
+
+    user_role = gst_xml_element_find_first (user_node, "role");
+
+    /* It's possible that the profile has no entries */
+    if (user_role == NULL)
+        return(FALSE);
+
+    assigned_roles = gst_xml_element_find_first (user_role, "rbac_roles");
+    g_return_val_if_fail( assigned_roles != NULL, FALSE );
+
+    for (role = gst_xml_element_find_first (assigned_roles, "rbac_role");
+         role != NULL;
+         role = gst_xml_element_find_next (role, "rbac_role")) {
+            buf = gst_xml_element_get_content (role);
+
+            if (strcmp (role_name, buf) == 0) {
+                g_free (buf);
+                rval = TRUE;
+                break;
+            }
+
+            g_free (buf);
+    }
+
+    return rval;
+}
+
+void
+populate_roles_table (GtkWidget *list, xmlNodePtr user_node)
+{
+	GtkTreeModel *model = gtk_tree_view_get_model (GTK_TREE_VIEW (list));
+	xmlNodePtr    roledb_root = get_root_node (NODE_ROLE);
+	xmlNodePtr    roles, role, user;
+	GtkTreeIter   iter;
+	gchar        *name, *desc, *buf;
+	gboolean      val;
+
+	gtk_list_store_clear (GTK_LIST_STORE (model));
+
+	roles = gst_xml_element_find_first (roledb_root, "rbac_roles");
+	for (role = gst_xml_element_find_first (roles, "rbac_role");
+	     role != NULL;
+	     role = gst_xml_element_find_next (role, "rbac_role")) {
+		name = gst_xml_get_child_content (role, "role");
+
+		if (name) {
+                        gchar *combined_str;
+
+			val = FALSE;
+
+			/* check whether the user already has RBAC profile */
+                        if (user_node ) {
+                            if ( user_has_rbac_role ( user_node, name )) {
+                                val = TRUE;
+                            }
+                        }
+
+                        combined_str = name;
+			
+			gtk_list_store_append (GTK_LIST_STORE (model), &iter);
+			gtk_list_store_set (GTK_LIST_STORE (model), &iter,
+					    0, val,
+					    1, combined_str,
+					    2, name,
+					    -1);
+                        if ( combined_str != name ) 
+                            g_free( combined_str );
+			g_free (name);
+		}
+	}
+}
+
+void
+roles_save_data (xmlNodePtr node )
+{
+        
+	GtkWidget    *list  = NULL;
+	GtkTreeModel *model = NULL;
+	GtkTreeIter   iter;
+	xmlNodePtr    role_node, rbac_roles_node, rbac_role_node;
+	gboolean      valid, active;
+	gchar        *name;
+
+	g_return_if_fail (node != NULL);
+
+	list  = gst_dialog_get_widget (tool->main_dialog, "user_roles");
+	model = gtk_tree_view_get_model (GTK_TREE_VIEW (list));
+	role_node = gst_xml_element_find_first (node, "role");
+        
+        if ( role_node != NULL ) {
+	    rbac_roles_node = gst_xml_element_find_first (role_node, "rbac_roles");
+            if (rbac_roles_node) {
+                gst_xml_element_destroy_children (rbac_roles_node);
+            }
+            else {
+                rbac_roles_node = gst_xml_element_add (node, "rbac_roles");
+            }
+        }
+        else {
+            role_node =  gst_xml_element_add (node, "role");
+            rbac_roles_node = gst_xml_element_add (role_node, "rbac_roles");
+        }
+
+	valid = gtk_tree_model_get_iter_first (model, &iter);
+
+	while (valid) {
+		gtk_tree_model_get (model, &iter,
+				    0, &active,
+				    2, &name,
+				    -1);
+
+		if (active) {
+			rbac_role_node = gst_xml_element_add (rbac_roles_node, "rbac_role");
+			gst_xml_element_set_content (rbac_role_node, name);
+		}
+
+		g_free (name);
+		valid = gtk_tree_model_iter_next (model, &iter);
+	}
+}
+
+#endif /* __sun */
diff -urN gnome-system-tools-2.14.0.orig/src/users/roles-table.h gnome-system-tools-2.14.0/src/users/roles-table.h
--- gnome-system-tools-2.14.0.orig/src/users/roles-table.h	1970-01-01 08:00:00.000000000 +0800
+++ gnome-system-tools-2.14.0/src/users/roles-table.h	2008-08-22 02:54:54.495726000 +0800
@@ -0,0 +1,34 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
+/* roles-table.h: this file is part of users-admin, a ximian-setup-tool frontend 
+ * for user administration.
+ * 
+ * Copyright (C) 2004 Carlos Garnacho
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * Authors: Carlos Garnacho Parro <carlosg@gnome.org>
+ */
+
+#ifndef __ROLES_TABLE_H
+#define __ROLES_TABLE_H
+
+void	 create_roles_table (void);
+
+void     populate_roles_table (GtkWidget *list, xmlNodePtr user_node);
+
+GList*   user_roles_get_list (GList*);
+
+
+#endif /* __ROLES_TABLE_H */
diff -urN gnome-system-tools-2.14.0.orig/src/users/table.c gnome-system-tools-2.14.0/src/users/table.c
--- gnome-system-tools-2.14.0.orig/src/users/table.c	2008-08-20 09:37:14.219170000 +0800
+++ gnome-system-tools-2.14.0/src/users/table.c	2008-08-22 04:54:52.664655000 +0800
@@ -38,6 +38,7 @@
 #include "user_group.h"
 #include "callbacks.h"
 #include "user-group-xml.h"
+#include "roles-table.h"
 
 extern GstTool *tool;
 
@@ -199,6 +200,7 @@
 	create_profiles_table ();
 	create_user_privileges_table ();
 	create_profile_privileges_table ();
+	create_roles_table();
 }
 
 void
diff -urN gnome-system-tools-2.14.0.orig/src/users/user-group-xml.c gnome-system-tools-2.14.0/src/users/user-group-xml.c
--- gnome-system-tools-2.14.0.orig/src/users/user-group-xml.c	2008-08-20 09:37:14.220155000 +0800
+++ gnome-system-tools-2.14.0/src/users/user-group-xml.c	2008-08-22 04:50:57.271572000 +0800
@@ -484,7 +484,12 @@
 	gst_xml_set_child_content (node, "passwd_min_life", data->pwd_mindays);
 	gst_xml_set_child_content (node, "passwd_exp_warn", data->pwd_warndays);
 
+#ifndef __sun
 	user_add_extra_groups (data->extra_groups, data->login);
+#else
+        user_privileges_save_data( node );
+	roles_save_data( node );
+#endif
 }
 
 static void
diff -urN gnome-system-tools-2.14.0.orig/src/users/user-settings.c gnome-system-tools-2.14.0/src/users/user-settings.c
--- gnome-system-tools-2.14.0.orig/src/users/user-settings.c	2008-08-20 09:37:14.204485000 +0800
+++ gnome-system-tools-2.14.0/src/users/user-settings.c	2008-08-22 04:53:25.526544000 +0800
@@ -31,6 +31,7 @@
 #include <stdlib.h>
 #include <utmp.h>
 #include <ctype.h>
+#include <pwd.h>
 
 #include <glib/gi18n.h>
 
@@ -154,8 +155,21 @@
 	g_free (buf);
 */
 
+#if ! (defined(sun) && defined(__SVR4) )
 	populate_privileges_table_from_profile (gst_dialog_get_widget (tool->main_dialog, "user_privileges"),
 						profile);
+#else
+        populate_privileges_table(gst_dialog_get_widget (tool->main_dialog, "user_privileges"),
+						profile);
+#endif
+
+#if ! (defined(sun) && defined(__SVR4) )
+        populate_roles_table(gst_dialog_get_widget (tool->main_dialog, "user_roles"),
+                                                profile);
+#else
+        populate_roles_table(gst_dialog_get_widget (tool->main_dialog, "user_roles"),
+                                                profile);
+#endif
 
 	value = gst_xml_get_child_content (profile, "group");
 	element = g_list_first (groups_list);
@@ -185,6 +199,8 @@
 	GtkWidget *button;
 	gchar *buf;
 	GtkWidget *widget = gst_dialog_get_widget (tool->main_dialog, "user_settings_dialog");
+	GList *element;
+	gint counter = 0;
 
 	gtk_window_set_title (GTK_WINDOW (widget), _("User Account Editor"));
 	g_object_set_data (G_OBJECT (widget), "data", ud);
@@ -195,6 +211,16 @@
 	combo_add_groups   (gst_dialog_get_widget (tool->main_dialog, "user_settings_group"), TRUE);
 	combo_add_shells   (gst_dialog_get_widget (tool->main_dialog, "user_settings_shell"));
 	combo_add_profiles (gst_dialog_get_widget (tool->main_dialog, "user_settings_profile_menu"));
+	
+		element = g_list_first (groups_list);
+
+		while ((element != NULL) && (strcmp (element->data, "other") != 0))	{
+			element = element->next;
+			counter++;
+		}
+		if (element == NULL) /* here group_list should have some entries in, so element is Null only because not find "other" */
+			counter == 0;
+		gtk_combo_box_set_active (GTK_COMBO_BOX (gst_dialog_get_widget (tool->main_dialog, "user_settings_group")), counter);
 
 #ifdef HAVE_LIBCRACK
 	/* If we have libcrack, password quality check is enabled */
@@ -271,6 +297,30 @@
 }
 
 static gboolean
+is_new_login_valid (const gchar *login)
+{
+        gchar *primary_text   = NULL;
+        gchar *secondary_text = NULL;
+        struct utmp ut;
+
+        g_return_val_if_fail (login != NULL, FALSE);
+
+        if ( getpwnam (login) != NULL) {
+       		/* SUN_BRANDING */
+       		primary_text   = g_strdup_printf (_("User name new\"%s\" already exists"), login);
+       		/* SUN_BRANDING */
+       		secondary_text = g_strdup (_("Please select a different user name."));
+            	show_error_message ("user_settings_dialog", primary_text, secondary_text);
+                g_free (primary_text);
+                g_free (secondary_text);
+
+		return FALSE;
+	} else {
+            	return TRUE;
+	}
+}
+
+static gboolean
 is_login_valid (xmlNodePtr node, const gchar *login)
 {
 	gchar *primary_text   = NULL;
@@ -393,7 +443,14 @@
 	gchar *primary_text   = NULL;
 	gchar *secondary_text = NULL;
 	struct stat s;
-	
+#if defined(sun) && defined(__SVR4)
+	struct stat base_s;
+        gchar *basedir = NULL;
+	
+        if ( home != NULL ) {
+            basedir = g_path_get_dirname( home );
+        }
+#endif /* sun & __SVR4 */
 	if (!home || (strlen (home) < 1)) {
 		primary_text   = g_strdup (N_("Home directory should not be empty"));
 		secondary_text = g_strdup (N_("Make sure you provide a home directory."));
@@ -405,7 +462,20 @@
 		primary_text   = g_strdup (N_("Home directory of the \"root\" user should not be modified"));
 		secondary_text = g_strdup (N_("This would leave the system unusable."));
 	}
-
+#if defined(sun) && defined(__SVR4)
+        else if ( home != NULL && basedir != NULL 
+                  && g_strncasecmp(basedir,".", 1 ) != 0  /* Do we actually have a basedir? */
+                  && stat( home, &s ) == -1               /* If the home dir already exists skip */     
+                  && stat( basedir, &base_s ) == 0 ) {    /* Now try stat the basedir */
+                /* Check whether homedir is auto mounted */
+                if ( g_strncasecmp(base_s.st_fstype, "autofs", strlen("autofs") ) == 0 )  {
+       		/* SUN_BRANDING */
+		        primary_text   = g_strdup (N_("Cannot create a home directory on an automounted filesystem."));
+       		/* SUN_BRANDING */
+		        secondary_text = g_strdup (N_("Please pick an alternative base directory for the users home directory."));
+                }
+        }
+#endif /* sun & __SVR4 */
 /*	else if (stat (home, &s))
 	{
 		switch (errno) {
@@ -416,6 +486,11 @@
 		}
 	}
 */
+#if defined(sun) && defined(__SVR4)
+        if ( basedir != NULL ) {
+                g_free( basedir );
+        }
+#endif /* sun & __SVR4 */
 	if (primary_text) {
 		show_error_message ("user_settings_dialog", _(primary_text), _(secondary_text));
 		g_free (primary_text);
@@ -428,6 +453,28 @@
 }
 
 static gboolean
+is_new_user_uid_valid (const gchar *uid)
+{
+        gchar *primary_text   = NULL;
+        gchar *secondary_text = NULL;
+
+        if ( getpwuid ( g_strtod (uid, NULL) ) != NULL ) {
+                /* SUN_BRANDING */
+                primary_text   = g_strdup_printf (_("User ID \"%s\" already exists"), uid);
+                /* SUN_BRANDING */
+                secondary_text = g_strdup (_("Please select a different User ID."));
+       		
+		show_error_message ("user_settings_dialog", _(primary_text), _(secondary_text));
+       		g_free (primary_text);
+       		g_free (secondary_text);
+
+       		return FALSE;
+	} else {
+		return TRUE;
+	}
+}
+	
+static gboolean
 is_user_uid_valid (xmlNodePtr node, const gchar *uid)
 {
 	gchar *primary_text   = NULL;
@@ -548,7 +645,11 @@
 	if (!is_login_valid (ud->node, data->login)) {
 		return FALSE;
 	}
-	
+
+	/* check new user login  */
+	if ( ud->is_new && !is_new_login_valid (data->login)) {
+		return FALSE;
+	} 
 	/* check user comments */
 	data->name = (gchar *) gtk_entry_get_text (GTK_ENTRY (gst_dialog_get_widget (tool->main_dialog, "user_settings_comment")));
 	data->location = (gchar *) gtk_entry_get_text (GTK_ENTRY (gst_dialog_get_widget (tool->main_dialog, "user_settings_office")));
@@ -574,12 +675,17 @@
 	if (!is_home_valid (ud->node, data->home)) {
 		return FALSE;
 	}
-	
+
 	/* check user uid */
 	data->uid = g_strdup_printf ("%i", gtk_spin_button_get_value_as_int (GTK_SPIN_BUTTON (gst_dialog_get_widget (tool->main_dialog, "user_settings_uid"))));
 	if (!is_user_uid_valid (ud->node, data->uid)) {
 		return FALSE;
 	}
+        /* check new user uid */
+        if ( ud->is_new && !is_new_user_uid_valid (data->uid)) {
+                return FALSE;
+        }
+
 	
 	/* check user shell */
 	data->shell = (gchar *) gtk_entry_get_text (GTK_ENTRY (GTK_BIN (gst_dialog_get_widget (tool->main_dialog, "user_settings_shell"))->child));
@@ -618,6 +724,9 @@
 
 	/* get user main group GID*/
 	data->group = g_list_nth_data (groups_list, gtk_combo_box_get_active (GTK_COMBO_BOX (gst_dialog_get_widget (tool->main_dialog, "user_settings_group"))));
+	if (!data->group)
+		return FALSE;
+
 	if (strcmp (data->group, "$user") == 0)
 		data->group = data->login;
 	
@@ -627,7 +736,9 @@
 
 	data->extra_groups = NULL;
 	data->extra_groups = user_get_groups (ud->node);
+#if ! (defined(sun) && defined(__SVR4) )
 	data->extra_groups = user_privileges_get_list (data->extra_groups);
+#endif
 
 	data->pwd_maxdays = g_strdup_printf ("%i", gtk_spin_button_get_value_as_int (GTK_SPIN_BUTTON (gst_dialog_get_widget (tool->main_dialog, "user_passwd_max"))));
 	data->pwd_mindays = g_strdup_printf ("%i", gtk_spin_button_get_value_as_int (GTK_SPIN_BUTTON (gst_dialog_get_widget (tool->main_dialog, "user_passwd_min"))));
@@ -718,6 +829,7 @@
 	/* Set UID */
 	txt = gst_xml_get_child_content (ud->node, "uid");
 	w0 = gst_dialog_get_widget (tool->main_dialog, "user_settings_uid");
+	gtk_spin_button_set_range (GTK_SPIN_BUTTON (w0), 0, IDMAX);
 	gtk_spin_button_set_value (GTK_SPIN_BUTTON (w0), g_strtod (txt, NULL));
 	g_free (txt);
 	
@@ -750,7 +862,19 @@
 	}
 
 	w0 = gst_dialog_get_widget (tool->main_dialog, "user_privileges");
+#if ! (defined(sun) && defined(__SVR4) )
 	populate_privileges_table (w0, name);
+#else
+	populate_privileges_table (w0, ud->node );
+#endif
+
+        w0 = gst_dialog_get_widget (tool->main_dialog, "user_roles");
+#if ! (defined(sun) && defined(__SVR4) )
+        populate_roles_table (w0, name);
+#else
+        populate_roles_table (w0, ud->node );
+#endif
+
 	
 	/* Set password */
 	user_settings_dialog_prepare_password ();
diff -urN gnome-system-tools-2.14.0.orig/src/users/user_group.c gnome-system-tools-2.14.0/src/users/user_group.c
--- gnome-system-tools-2.14.0.orig/src/users/user_group.c	2008-08-20 09:37:14.208213000 +0800
+++ gnome-system-tools-2.14.0/src/users/user_group.c	2008-08-22 04:52:18.525007000 +0800
@@ -161,11 +161,12 @@
 	groups_list = g_list_sort (groups_list, my_strcmp);
 
 	element = g_list_first (groups_list);
-
+	
 	while (element) {
 		gtk_combo_box_append_text (GTK_COMBO_BOX (combo), element->data);
 		element = g_list_next (element);
 	}
+	
 }
 
 void
@@ -209,6 +210,12 @@
 	case NODE_PROFILE:
 		node = gst_xml_element_find_first (root, "profiledb");
 		break;
+	case NODE_RBAC:
+		node = gst_xml_element_find_first (root, "rbacdb");
+		break;
+        case NODE_ROLE:
+                node = gst_xml_element_find_first (root, "roledb");
+                break;
 	default:
 		node = NULL;
 		break;
diff -urN gnome-system-tools-2.14.0.orig/src/users/user_group.h gnome-system-tools-2.14.0/src/users/user_group.h
--- gnome-system-tools-2.14.0.orig/src/users/user_group.h	2008-08-20 09:37:14.208678000 +0800
+++ gnome-system-tools-2.14.0/src/users/user_group.h	2008-08-22 04:48:42.513878000 +0800
@@ -29,7 +29,12 @@
 
 #include "gst.h"
 
+#ifdef __sun
+#include <sys/param.h>
+#define IDMAX MAXUID
+#else
 #define IDMAX 100000
+#endif
 
 enum {
 	NODE_USER,
@@ -37,7 +42,9 @@
 	NODE_DEFAULT,
 	NODE_NET_GROUP,
 	NODE_NET_USER,
-	NODE_PROFILE
+	NODE_PROFILE,
+        NODE_RBAC,
+	NODE_ROLE
 };
 
 typedef struct {
--- gnome-system-tools-2.14.0.orig/interfaces/users.glade.in	2008-08-20 09:37:14.698348000 +0800
+++ gnome-system-tools-2.14.0/interfaces/users.glade.in	2008-08-22 03:48:20.676006000 +0800
@@ -888,7 +888,7 @@
 		  <property name="update_policy">GTK_UPDATE_ALWAYS</property>
 		  <property name="snap_to_ticks">False</property>
 		  <property name="wrap">False</property>
-		  <property name="adjustment">0 0 99999 1 10 10</property>
+		  <property name="adjustment">0 0 2147483647 1 10 10</property>
 		</widget>
 		<packing>
 		  <property name="left_attach">2</property>
@@ -1447,7 +1447,7 @@
 
 	      <child>
 		<widget class="GtkTable" id="table48">
-		  <property name="visible">True</property>
+		  <property name="visible">False</property>
 		  <property name="n_rows">5</property>
 		  <property name="n_columns">3</property>
 		  <property name="homogeneous">False</property>
@@ -2542,7 +2542,7 @@
 		      <property name="update_policy">GTK_UPDATE_ALWAYS</property>
 		      <property name="snap_to_ticks">False</property>
 		      <property name="wrap">False</property>
-		      <property name="adjustment">0 0 99999 1 10 10</property>
+		      <property name="adjustment">0 0 2147483647 1 10 10</property>
 		    </widget>
 		    <packing>
 		      <property name="left_attach">2</property>
@@ -2917,7 +2917,98 @@
 	  <child>
 	    <widget class="GtkLabel" id="label312">
 	      <property name="visible">True</property>
-	      <property name="label" translatable="yes">User privileges</property>
+	      <property name="label" translatable="yes">User profiles</property>
+	      <property name="use_underline">False</property>
+	      <property name="use_markup">False</property>
+	      <property name="justify">GTK_JUSTIFY_LEFT</property>
+	      <property name="wrap">False</property>
+	      <property name="selectable">False</property>
+	      <property name="xalign">0.5</property>
+	      <property name="yalign">0.5</property>
+	      <property name="xpad">0</property>
+	      <property name="ypad">0</property>
+	      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+	      <property name="width_chars">-1</property>
+	      <property name="single_line_mode">False</property>
+	      <property name="angle">0</property>
+	    </widget>
+	    <packing>
+	      <property name="type">tab</property>
+	    </packing>
+	  </child>
+
+	  <child>
+	    <widget class="GtkVBox" id="vbox489">
+	      <property name="border_width">12</property>
+	      <property name="visible">True</property>
+	      <property name="homogeneous">False</property>
+	      <property name="spacing">6</property>
+
+	      <child>
+		<widget class="GtkLabel" id="label316">
+		  <property name="visible">True</property>
+		  <property name="label" translatable="yes">Allow user to:</property>
+		  <property name="use_underline">False</property>
+		  <property name="use_markup">True</property>
+		  <property name="justify">GTK_JUSTIFY_LEFT</property>
+		  <property name="wrap">False</property>
+		  <property name="selectable">False</property>
+		  <property name="xalign">0</property>
+		  <property name="yalign">0.5</property>
+		  <property name="xpad">0</property>
+		  <property name="ypad">0</property>
+		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+		  <property name="width_chars">-1</property>
+		  <property name="single_line_mode">False</property>
+		  <property name="angle">0</property>
+		</widget>
+		<packing>
+		  <property name="padding">0</property>
+		  <property name="expand">False</property>
+		  <property name="fill">False</property>
+		</packing>
+	      </child>
+
+	      <child>
+		<widget class="GtkScrolledWindow" id="scrolledwindow3">
+		  <property name="visible">True</property>
+		  <property name="can_focus">True</property>
+		  <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+		  <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+		  <property name="shadow_type">GTK_SHADOW_IN</property>
+		  <property name="window_placement">GTK_CORNER_TOP_LEFT</property>
+
+		  <child>
+		    <widget class="GtkTreeView" id="user_roles">
+		      <property name="visible">True</property>
+		      <property name="can_focus">True</property>
+		      <property name="headers_visible">False</property>
+		      <property name="rules_hint">True</property>
+		      <property name="reorderable">False</property>
+		      <property name="enable_search">False</property>
+		      <property name="fixed_height_mode">False</property>
+		      <property name="hover_selection">False</property>
+		      <property name="hover_expand">False</property>
+		    </widget>
+		  </child>
+		</widget>
+		<packing>
+		  <property name="padding">0</property>
+		  <property name="expand">True</property>
+		  <property name="fill">True</property>
+		</packing>
+	      </child>
+	    </widget>
+	    <packing>
+	      <property name="tab_expand">False</property>
+	      <property name="tab_fill">True</property>
+	    </packing>
+	  </child>
+
+	  <child>
+	    <widget class="GtkLabel" id="label313">
+	      <property name="visible">True</property>
+	      <property name="label" translatable="yes" comments="SUN_BRANDING">User roles</property>
 	      <property name="use_underline">False</property>
 	      <property name="use_markup">False</property>
 	      <property name="justify">GTK_JUSTIFY_LEFT</property>
@@ -3778,7 +3869,7 @@
 		      <property name="update_policy">GTK_UPDATE_ALWAYS</property>
 		      <property name="snap_to_ticks">False</property>
 		      <property name="wrap">False</property>
-		      <property name="adjustment">0 0 99999 1 10 10</property>
+		      <property name="adjustment">0 0 2147483647 1 10 10</property>
 		    </widget>
 		    <packing>
 		      <property name="left_attach">2</property>
@@ -3800,7 +3891,7 @@
 		      <property name="update_policy">GTK_UPDATE_ALWAYS</property>
 		      <property name="snap_to_ticks">False</property>
 		      <property name="wrap">False</property>
-		      <property name="adjustment">0 0 99999 1 10 10</property>
+		      <property name="adjustment">0 0 2147483647 1 10 10</property>
 		    </widget>
 		    <packing>
 		      <property name="left_attach">2</property>
@@ -3822,7 +3913,7 @@
 		      <property name="update_policy">GTK_UPDATE_ALWAYS</property>
 		      <property name="snap_to_ticks">False</property>
 		      <property name="wrap">False</property>
-		      <property name="adjustment">0 0 99999 1 10 10</property>
+		      <property name="adjustment">0 0 2147483647 1 10 10</property>
 		    </widget>
 		    <packing>
 		      <property name="left_attach">4</property>
@@ -3844,7 +3935,7 @@
 		      <property name="update_policy">GTK_UPDATE_ALWAYS</property>
 		      <property name="snap_to_ticks">False</property>
 		      <property name="wrap">False</property>
-		      <property name="adjustment">0 0 99999 1 10 10</property>
+		      <property name="adjustment">0 0 2147483647 1 10 10</property>
 		    </widget>
 		    <packing>
 		      <property name="left_attach">4</property>
