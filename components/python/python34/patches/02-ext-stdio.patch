--- Python-3.4.0/Modules/python.c.~1~	2014-03-17 06:31:31.000000000 +0400
+++ Python-3.4.0/Modules/python.c	2014-06-03 09:23:04.268571343 +0400
@@ -15,6 +15,13 @@
 }
 #else
 
+#if defined(sun) && defined(__SVR4) && !defined(_LP64)
+#define USE_EXTENDED_FILE_STDIO 1
+#include <stdio.h>
+#include <stdio_ext.h>
+#include <signal.h>
+#endif
+
 int
 main(int argc, char **argv)
 {
@@ -26,6 +33,9 @@
 #ifdef __FreeBSD__
     fp_except_t m;
 #endif
+#if defined(sun) && defined(__SVR4) && !defined(_LP64)
+    struct rlimit rlp;
+#endif
 
     argv_copy = (wchar_t **)PyMem_RawMalloc(sizeof(wchar_t*) * (argc+1));
     argv_copy2 = (wchar_t **)PyMem_RawMalloc(sizeof(wchar_t*) * (argc+1));
@@ -44,6 +54,18 @@
     fpsetmask(m & ~FP_X_OFL);
 #endif
 
+#ifdef USE_EXTENDED_FILE_STDIO
+    /*
+     * enable extended FILE facility on Solaris so that Python
+     * apps can keep more than 256 file descriptors open
+     */
+    (void) getrlimit(RLIMIT_NOFILE, &rlp);
+    rlp.rlim_cur = rlp.rlim_max;
+    if (setrlimit(RLIMIT_NOFILE, &rlp) != -1) {
+            enable_extended_FILE_stdio(-1, 0);
+    }
+#endif
+
     oldloc = _PyMem_RawStrdup(setlocale(LC_ALL, NULL));
     if (!oldloc) {
         fprintf(stderr, "out of memory\n");
