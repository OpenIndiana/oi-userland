https://github.com/pylint-dev/astroid/issues/2129

--- astroid-2.15.3.orig/requirements_test_brain.txt
+++ astroid-2.15.3/requirements_test_brain.txt
@@ -0,0 +1,12 @@
+attrs
+types-attrs
+nose
+numpy>=1.17.0; python_version<"3.11"
+python-dateutil
+PyQt6
+regex
+types-python-dateutil
+six
+types-six
+urllib3
+typing_extensions>=4.4.0
--- astroid-2.15.3.orig/requirements_test.txt
+++ astroid-2.15.3/requirements_test.txt
@@ -0,0 +1,6 @@
+-r requirements_test_min.txt
+-r requirements_test_pre_commit.txt
+contributors-txt>=0.7.4
+tbump~=6.9.0
+types-typed-ast; implementation_name=="cpython" and python_version<"3.8"
+types-pkg_resources==0.1.3
--- astroid-2.15.3.orig/tests/__init__.py
+++ astroid-2.15.3/tests/__init__.py
@@ -0,0 +1,1 @@
+
--- astroid-2.15.3.orig/tests/resources.py
+++ astroid-2.15.3/tests/resources.py
@@ -0,0 +1,61 @@
+# Licensed under the LGPL: https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html
+# For details: https://github.com/PyCQA/astroid/blob/main/LICENSE
+# Copyright (c) https://github.com/PyCQA/astroid/blob/main/CONTRIBUTORS.txt
+
+from __future__ import annotations
+
+import os
+import sys
+from pathlib import Path
+
+from astroid import builder
+from astroid.manager import AstroidManager
+from astroid.nodes.scoped_nodes import Module
+
+DATA_DIR = Path("testdata") / "python3"
+RESOURCE_PATH = Path(__file__).parent / DATA_DIR / "data"
+
+
+def find(name: str) -> str:
+    return os.path.normpath(os.path.join(os.path.dirname(__file__), DATA_DIR, name))
+
+
+def build_file(path: str, modname: str | None = None) -> Module:
+    return builder.AstroidBuilder().file_build(find(path), modname)
+
+
+class SysPathSetup:
+    def setUp(self) -> None:
+        sys.path.insert(0, find(""))
+
+    def tearDown(self) -> None:
+        del sys.path[0]
+        datadir = find("")
+        for key in list(sys.path_importer_cache):
+            if key.startswith(datadir):
+                del sys.path_importer_cache[key]
+
+
+class AstroidCacheSetupMixin:
+    """Mixin for handling test isolation issues with the astroid cache.
+
+    When clearing the astroid cache, some tests fail due to
+    cache inconsistencies, where some objects had a different
+    builtins object referenced.
+    This saves the builtins module and TransformVisitor and
+    replaces them after the tests finish.
+    The builtins module is special, since some of the
+    transforms for a couple of its objects (str, bytes etc)
+    are executed only once, so astroid_bootstrapping will be
+    useless for retrieving the original builtins module.
+    """
+
+    @classmethod
+    def setup_class(cls):
+        cls._builtins = AstroidManager().astroid_cache.get("builtins")
+        cls._transforms = AstroidManager.brain["_transform"]
+
+    @classmethod
+    def teardown_class(cls):
+        AstroidManager().astroid_cache["builtins"] = cls._builtins
+        AstroidManager.brain["_transform"] = cls._transforms
--- astroid-2.15.3.orig/tox.ini
+++ astroid-2.15.3/tox.ini
@@ -0,0 +1,26 @@
+[tox]
+envlist = py{37,38,39,310,311}
+skip_missing_interpreters = true
+isolated_build = true
+
+[testenv]
+deps =
+  -r requirements_test.txt
+  -r requirements_test_brain.txt
+commands =
+  pytest --cov {posargs}
+
+[testenv:formatting]
+deps =
+    -r requirements_test_pre_commit.txt
+commands =
+    pre-commit run --all-files
+
+[testenv:docs]
+skipsdist = True
+usedevelop = True
+changedir = doc/
+deps =
+    -r doc/requirements.txt
+commands =
+    sphinx-build -E -b html . build
