--- gitdb-4.0.11/gitdb/test/test_example.py.orig
+++ gitdb-4.0.11/gitdb/test/test_example.py
@@ -10,9 +10,12 @@
 
 from io import BytesIO
 
+import pytest
+
 
 class TestExamples(TestBase):
 
+    @pytest.mark.skip(reason="always fails: https://github.com/gitpython-developers/gitdb/issues/70")
     def test_base(self):
         ldb = LooseObjectDB(os.path.join(self.gitrepopath, 'objects'))
 
--- gitdb-4.0.11/gitdb/test/db/test_git.py.orig
+++ gitdb-4.0.11/gitdb/test/db/test_git.py
@@ -12,9 +12,12 @@
 from gitdb.base import OStream, OInfo
 from gitdb.util import bin_to_hex
 
+import pytest
+
 
 class TestGitDB(TestDBBase):
 
+    @pytest.mark.skip(reason="always fails: https://github.com/gitpython-developers/gitdb/issues/70")
     def test_reading(self):
         gdb = GitDB(os.path.join(self.gitrepopath, 'objects'))
 
--- gitdb-4.0.11/gitdb/test/db/test_ref.py.orig
+++ gitdb-4.0.11/gitdb/test/db/test_ref.py
@@ -15,6 +15,8 @@
 
 import os
 
+import pytest
+
 
 class TestReferenceDB(TestDBBase):
 
@@ -25,6 +27,7 @@
             for alt in alt_list:
                 alt_file.write(alt.encode("utf-8") + b"\n")
 
+    @pytest.mark.skip(reason="always fails: https://github.com/gitpython-developers/gitdb/issues/70")
     @with_rw_directory
     def test_writing(self, path):
         alt_path = os.path.join(path, 'alternates')
--- gitdb-4.0.11/gitdb/test/performance/test_pack.py.orig
+++ gitdb-4.0.11/gitdb/test/performance/test_pack.py
@@ -21,9 +21,12 @@
 import os
 from time import time
 
+import pytest
+
 
 class TestPackedDBPerformance(TestBigRepoR):
 
+    @pytest.mark.skip(reason="always fails: https://github.com/gitpython-developers/gitdb/issues/70")
     def test_pack_random_access(self):
         pdb = PackedDB(os.path.join(self.gitrepopath, "objects/pack"))
 
@@ -76,6 +79,7 @@
         print("PDB: Obtained %i streams by sha and read all bytes totallying %i KiB ( %f KiB / s ) in %f s ( %f streams/s )" %
               (max_items, total_kib, total_kib / (elapsed or 1), elapsed, max_items / (elapsed or 1)), file=sys.stderr)
 
+    @pytest.mark.skip(reason="always fails: https://github.com/gitpython-developers/gitdb/issues/70")
     def test_loose_correctness(self):
         """based on the pack(s) of our packed object DB, we will just copy and verify all objects in the back
         into the loose object db (memory).
@@ -102,6 +106,7 @@
             mdb._cache.clear()
         # end for each sha to copy
 
+    @pytest.mark.skip(reason="always fails: https://github.com/gitpython-developers/gitdb/issues/70")
     def test_correctness(self):
         pdb = PackedDB(os.path.join(self.gitrepopath, "objects/pack"))
         # disabled for now as it used to work perfectly, checking big repositories takes a long time
--- gitdb-4.0.11/gitdb/test/performance/test_pack_streaming.py.orig
+++ gitdb-4.0.11/gitdb/test/performance/test_pack_streaming.py
@@ -16,6 +16,8 @@
 import sys
 from time import time
 
+import pytest
+
 
 class CountedNullStream(NullStream):
     __slots__ = '_bw'
@@ -32,6 +34,7 @@
 
 class TestPackStreamingPerformance(TestBigRepoR):
 
+    @pytest.mark.skip(reason="always fails: https://github.com/gitpython-developers/gitdb/issues/70")
     def test_pack_writing(self):
         # see how fast we can write a pack from object streams.
         # This will not be fast, as we take time for decompressing the streams as well
@@ -58,6 +61,7 @@
         print(sys.stderr, "PDB Streaming: Wrote pack of size %i kb in %f s (%f kb/s)" %
               (total_kb, elapsed, total_kb / (elapsed or 1)), sys.stderr)
 
+    @pytest.mark.skip(reason="always fails: https://github.com/gitpython-developers/gitdb/issues/70")
     def test_stream_reading(self):
         # raise SkipTest()
         pdb = PackedDB(os.path.join(self.gitrepopath, "objects/pack"))
