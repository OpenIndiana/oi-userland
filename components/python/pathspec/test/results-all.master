py$(PYV): remove tox env folder $(@D)/.tox/py$(PYV)
py$(PYV): commands[0]> python -m unittest --verbose
test_01_files (tests.test_01_util.IterTreeTest)
Tests to make sure all files are found. ... ok
test_02_link_1_check_1_symlink (tests.test_01_util.IterTreeTest)
Tests whether links can be created. ... ok
test_02_link_2_links (tests.test_01_util.IterTreeTest)
Tests to make sure links to directories and files work. ... ok
test_02_link_3_sideways_links (tests.test_01_util.IterTreeTest)
Tests to make sure the same directory can be encountered multiple ... ok
test_02_link_4_recursive_links (tests.test_01_util.IterTreeTest)
Tests detection of recursive links. ... ok
test_02_link_5_recursive_circular_links (tests.test_01_util.IterTreeTest)
Tests detection of recursion through circular links. ... ok
test_02_link_6_detect_broken_links (tests.test_01_util.IterTreeTest)
Tests that broken links are detected. ... ok
test_02_link_7_ignore_broken_links (tests.test_01_util.IterTreeTest)
Tests that broken links are ignored. ... ok
test_02_link_8_no_follow_links (tests.test_01_util.IterTreeTest)
Tests to make sure directory links can be ignored. ... ok
test_03_entries (tests.test_01_util.IterTreeTest)
Tests to make sure all files are found. ... ok
test_01_match_file (tests.test_01_util.MatchFileTest)
Test matching files individually. ... ok
test_01_purepath (tests.test_01_util.NormalizeFileTest)
Tests normalizing a :class:`pathlib.PurePath` as argument. ... ok
test_00_empty (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests an empty pattern. ... ok
test_01_absolute (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests an absolute path pattern. ... ok
test_01_absolute_ignore (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests an ignore absolute path pattern. ... ok
test_01_absolute_root (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests a single root absolute path pattern. ... ok
test_01_relative (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests a relative path pattern. ... ok
test_01_relative_nested (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests a relative nested path pattern. ... ok
test_02_comment (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests a comment pattern. ... ok
test_02_ignore (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests an exclude pattern. ... ok
test_03_child_double_asterisk (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests a directory name with a double-asterisk child ... ok
test_03_double_asterisk_trailing_slash_edge_case (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests the edge-case **/ pattern. ... ok
test_03_duplicate_leading_double_asterisk_edge_case (tests.test_02_gitwildmatch.GitWildMatchTest)
Regression test for duplicate leading **/ bug. ... ok
test_03_inner_double_asterisk (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests a path with an inner double-asterisk directory. ... ok
test_03_only_double_asterisk (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests a double-asterisk pattern which matches everything. ... ok
test_03_parent_double_asterisk (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests a file name with a double-asterisk parent directory. ... ok
test_04_infix_wildcard (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests a pattern with an infix wildcard. ... ok
test_04_postfix_wildcard (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests a pattern with a postfix wildcard. ... ok
test_04_prefix_wildcard (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests a pattern with a prefix wildcard. ... ok
test_05_directory (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests a directory pattern. ... ok
test_06_access_deprecated (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests that the pattern is accessible from the root module using the ... ok
test_06_registered (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests that the pattern is registered. ... ok
test_06_registered_deprecated (tests.test_02_gitwildmatch.GitWildMatchTest)
Tests that the pattern is registered under the deprecated alias. ... ok
test_07_decode_bytes (tests.test_02_gitwildmatch.GitWildMatchTest)
Test decoding bytes. ... ok
test_07_encode_bytes (tests.test_02_gitwildmatch.GitWildMatchTest)
Test encoding bytes. ... ok
test_07_match_bytes_and_bytes (tests.test_02_gitwildmatch.GitWildMatchTest)
Test byte string patterns matching byte string paths. ... ok
test_07_match_bytes_and_bytes_complete (tests.test_02_gitwildmatch.GitWildMatchTest)
Test byte string patterns matching byte string paths. ... ok
test_07_match_bytes_and_unicode_fail (tests.test_02_gitwildmatch.GitWildMatchTest)
Test byte string patterns matching byte string paths. ... ok
test_07_match_unicode_and_bytes_fail (tests.test_02_gitwildmatch.GitWildMatchTest)
Test unicode patterns with byte paths. ... ok
test_07_match_unicode_and_unicode (tests.test_02_gitwildmatch.GitWildMatchTest)
Test unicode patterns with unicode paths. ... ok
test_08_escape (tests.test_02_gitwildmatch.GitWildMatchTest)
Test escaping a string with meta-characters ... ok
test_09_single_escape_fail (tests.test_02_gitwildmatch.GitWildMatchTest)
Test an escape on a line by itself. ... ok
test_09_single_exclamation_mark_fail (tests.test_02_gitwildmatch.GitWildMatchTest)
Test an escape on a line by itself. ... ok
test_10_escape_asterisk_end (tests.test_02_gitwildmatch.GitWildMatchTest)
Test escaping an asterisk at the end of a line. ... ok
test_10_escape_asterisk_mid (tests.test_02_gitwildmatch.GitWildMatchTest)
Test escaping an asterisk in the middle of a line. ... ok
test_10_escape_asterisk_start (tests.test_02_gitwildmatch.GitWildMatchTest)
Test escaping an asterisk at the start of a line. ... ok
test_10_escape_exclamation_mark_start (tests.test_02_gitwildmatch.GitWildMatchTest)
Test escaping an exclamation mark at the start of a line. ... ok
test_10_escape_pound_start (tests.test_02_gitwildmatch.GitWildMatchTest)
Test escaping a pound sign at the start of a line. ... ok
test_11_issue_19_directory_a (tests.test_02_gitwildmatch.GitWildMatchTest)
Test a directory discrepancy, scenario A. ... ok
test_11_issue_19_directory_b (tests.test_02_gitwildmatch.GitWildMatchTest)
Test a directory discrepancy, scenario B. ... ok
test_11_issue_19_directory_c (tests.test_02_gitwildmatch.GitWildMatchTest)
Test a directory discrepancy, scenario C. ... ok
test_12_asterisk_1_regex (tests.test_02_gitwildmatch.GitWildMatchTest)
Test a relative asterisk path pattern's regular expression. ... ok
test_12_asterisk_2_regex_equivalent (tests.test_02_gitwildmatch.GitWildMatchTest)
Test a path pattern equivalent to the relative asterisk using double ... ok
test_12_asterisk_3_child (tests.test_02_gitwildmatch.GitWildMatchTest)
Test a relative asterisk path pattern matching a direct child path. ... ok
test_12_asterisk_4_descendant (tests.test_02_gitwildmatch.GitWildMatchTest)
Test a relative asterisk path pattern matching a descendant path. ... ok
test_12_issue_62 (tests.test_02_gitwildmatch.GitWildMatchTest)
Test including all files, scenario A. ... ok
test_13_issue_77_1_negate_with_caret (tests.test_02_gitwildmatch.GitWildMatchTest)
Test negation using the caret symbol ("^"). ... ok
test_13_issue_77_1_negate_with_exclamation_mark (tests.test_02_gitwildmatch.GitWildMatchTest)
Test negation using the exclamation mark ("!"). ... ok
test_13_issue_77_2_regex (tests.test_02_gitwildmatch.GitWildMatchTest)
Test the resulting regex for regex bracket expression negation. ... ok
test_14_issue_81_a (tests.test_02_gitwildmatch.GitWildMatchTest)
Test ignoring files in a directory, scenario A. ... ok
test_14_issue_81_b (tests.test_02_gitwildmatch.GitWildMatchTest)
Test ignoring files in a directory, scenario B. ... ok
test_14_issue_81_c (tests.test_02_gitwildmatch.GitWildMatchTest)
Test ignoring files in a directory, scenario C. ... ok
test_01_absolute_dir_paths_1 (tests.test_03_pathspec.PathSpecTest)
Tests that absolute paths will be properly normalized and matched. ... ok
test_01_absolute_dir_paths_2 (tests.test_03_pathspec.PathSpecTest)
Tests that absolute paths will be properly normalized and matched. ... ok
test_01_check_files (tests.test_03_pathspec.PathSpecTest)
Test that checking files one at a time yields the same results as checking ... ok
test_01_check_match_files (tests.test_03_pathspec.PathSpecTest)
Test that checking files and matching files yield the same results. ... ok
test_01_current_dir_paths (tests.test_03_pathspec.PathSpecTest)
Tests that paths referencing the current directory will be properly ... ok
test_01_empty_path_1 (tests.test_03_pathspec.PathSpecTest)
Tests that patterns that end with an escaped space will be treated properly. ... ok
test_01_empty_path_2 (tests.test_03_pathspec.PathSpecTest)
Tests that patterns that end with an escaped space will be treated properly. ... ok
test_01_match_files (tests.test_03_pathspec.PathSpecTest)
Test that matching files one at a time yields the same results as matching ... ok
test_01_windows_current_dir_paths (tests.test_03_pathspec.PathSpecTest)
Tests that paths referencing the current directory will be properly ... ok
test_01_windows_paths (tests.test_03_pathspec.PathSpecTest)
Tests that Windows paths will be properly normalized and matched. ... ok
test_02_eq (tests.test_03_pathspec.PathSpecTest)
Tests equality. ... ok
test_02_ne (tests.test_03_pathspec.PathSpecTest)
Tests inequality. ... ok
test_03_add (tests.test_03_pathspec.PathSpecTest)
Test spec addition using :data:`+` operator. ... ok
test_03_iadd (tests.test_03_pathspec.PathSpecTest)
Test spec addition using :data:`+=` operator. ... ok
test_04_len (tests.test_03_pathspec.PathSpecTest)
Test spec length. ... ok
test_05_match_entries (tests.test_03_pathspec.PathSpecTest)
Test matching files collectively. ... ok
test_05_match_file (tests.test_03_pathspec.PathSpecTest)
Test matching files individually. ... ok
test_05_match_files (tests.test_03_pathspec.PathSpecTest)
Test matching files collectively. ... ok
test_05_match_tree_entries (tests.test_03_pathspec.PathSpecTest)
Test matching a file tree. ... ok
test_05_match_tree_files (tests.test_03_pathspec.PathSpecTest)
Test matching a file tree. ... ok
test_06_issue_41_a (tests.test_03_pathspec.PathSpecTest)
Test including a file and excluding a directory with the same name pattern, ... ok
test_06_issue_41_b (tests.test_03_pathspec.PathSpecTest)
Test including a file and excluding a directory with the same name ... ok
test_06_issue_41_c (tests.test_03_pathspec.PathSpecTest)
Test including a file and excluding a directory with the same name ... ok
test_07_issue_62 (tests.test_03_pathspec.PathSpecTest)
Test including all files and excluding a directory. ... ok
test_08_issue_39 (tests.test_03_pathspec.PathSpecTest)
Test excluding files in a directory. ... ok
test_09_issue_80_a (tests.test_03_pathspec.PathSpecTest)
Test negating patterns. ... ok
test_09_issue_80_b (tests.test_03_pathspec.PathSpecTest)
Test negating patterns. ... ok
test_01_reversed_args (tests.test_04_gitignore.GitIgnoreSpecTest)
Test reversed args for `.from_lines()`. ... ok
test_02_dir_exclusions (tests.test_04_gitignore.GitIgnoreSpecTest)
Test directory exclusions. ... ok
test_02_file_exclusions (tests.test_04_gitignore.GitIgnoreSpecTest)
Test file exclusions. ... ok
test_02_issue_41_a (tests.test_04_gitignore.GitIgnoreSpecTest)
Test including a file and excluding a directory with the same name pattern, ... ok
test_02_issue_41_b (tests.test_04_gitignore.GitIgnoreSpecTest)
Test including a file and excluding a directory with the same name pattern, ... ok
test_02_issue_41_c (tests.test_04_gitignore.GitIgnoreSpecTest)
Test including a file and excluding a directory with the same name pattern, ... ok
test_03_issue_19_a (tests.test_04_gitignore.GitIgnoreSpecTest)
Test matching files in a subdirectory of an included directory, scenario A. ... ok
test_03_issue_19_b (tests.test_04_gitignore.GitIgnoreSpecTest)
Test matching files in a subdirectory of an included directory, scenario B. ... ok
test_03_issue_19_c (tests.test_04_gitignore.GitIgnoreSpecTest)
Test matching files in a subdirectory of an included directory, scenario C. ... ok
test_03_subdir (tests.test_04_gitignore.GitIgnoreSpecTest)
Test matching files in a subdirectory of an included directory. ... ok
test_04_issue_62 (tests.test_04_gitignore.GitIgnoreSpecTest)
Test including all files and excluding a directory. ... ok
test_05_issue_39 (tests.test_04_gitignore.GitIgnoreSpecTest)
Test excluding files in a directory. ... ok
test_06_issue_64 (tests.test_04_gitignore.GitIgnoreSpecTest)
Test using a double asterisk pattern. ... ok
test_07_issue_74 (tests.test_04_gitignore.GitIgnoreSpecTest)
Test include directory should override exclude file. ... ok
test_08_issue_81_a (tests.test_04_gitignore.GitIgnoreSpecTest)
Test issue 81 whitelist, scenario A. ... ok
test_08_issue_81_b (tests.test_04_gitignore.GitIgnoreSpecTest)
Test issue 81 whitelist, scenario B. ... ok
test_08_issue_81_c (tests.test_04_gitignore.GitIgnoreSpecTest)
Test issue 81 whitelist, scenario C. ... ok

----------------------------------------------------------------------
Ran 106 tests

OK
  py$(PYV): OK
  congratulations :)
