py$(PYV): remove tox env folder $(@D)/.tox/py$(PYV)
py$(PYV): commands[0]> python -m pyfakefs.tests.all_tests
test_alt_sep (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok
test_collapse_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok
test_exists_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok
test_initial_value (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok
test_normalize_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok
test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_exists (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_get_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_get_object_with_file_size (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_getsize (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_getsize_with_looping_symlink (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_resolve_path (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_exists (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_get_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_getsize (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_all_dot_paths_removed_but_one (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_all_dot_paths_removed_if_another_path_component_exists (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_combine_dot_and_up_level_references_in_absolute_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_conserves_up_level_references_starting_from_current_dir (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_dot_path_unchanged (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_dots_in_path_collapses_to_last_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_empty_path_becomes_dot_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_ignores_up_level_references_starting_from_root (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_multiple_separators_collapsed_into_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_slashes_are_not_collapsed (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest)
Tests that '/' is not treated specially if the ... ok
test_create_link_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok
test_create_symlink_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok
test_copying_preserves_byte_contents (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_creating_file_with_content_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_creating_file_with_fitting_content (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_creating_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_creating_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_full_after_reopened (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_full_after_reopened_rplus_seek (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_full_append (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_size_on_auto_mounted_drive_on_directory_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_size_on_auto_mounted_drive_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_size_on_unlimited_disk (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_usage_on_automounted_drive (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_usage_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_usage_on_mounted_paths (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_diskusage_after_open_write (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_file_system_size_after_ascii_string_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_file_system_size_after_binary_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_file_system_size_after_directory_removal (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_file_system_size_after_directory_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_file_system_size_after_file_deletion (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_file_system_size_after_file_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_file_system_size_after_large_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_filesystem_size_after_2byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_filesystem_size_after_3byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_resize_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_resize_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_set_larger_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_set_smaller_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_that_disk_usage_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_that_hard_link_does_not_change_used_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_that_the_size_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_characters_before_root_ignored_in_join_paths (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_collapse_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_collapse_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_get_path_components (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_initial_value (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_normalize_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_normalize_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_resolve_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_drive_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_drive_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_drive_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_drive_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_path_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_path_with_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_path_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_path_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_with_alt_separator (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_splitroot_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_splitroot_with_empty_parts (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_splitroot_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_add_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_directory_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_directory_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_file_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_get_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_leave_file_unchanged_if_size_is_equal_to_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_new_file_and_directory (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_ordered_dirs (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_pads_with_nullbytes_if_size_is_greater_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_path (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_path_after_chdir (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_path_after_chdir_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_path_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_produce_empty_file_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_remove_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_set_contents_to_dir_raises (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_set_m_time (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_sets_content_empty_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_should_throw_if_set_size_is_negative (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_should_throw_if_set_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_truncate_file_if_size_is_smaller_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_add_object_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_add_object_to_regular_file_error_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_add_object_to_regular_file_error_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_add_object_to_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_dir_umask (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_directory_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_directory_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_in_current_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_in_read_only_directory_possible_in_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_in_read_only_directory_raises_in_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_with_changed_ids (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_with_incorrect_mode_type (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_with_size_but_no_content_creates_large_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_link (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_directory_access_on_file_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_directory_access_on_file_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_empty_file_created_for_none_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_empty_string_does_not_exist (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_added_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_file_added_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_file_removed_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_relative_path_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_relative_path_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_removed_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_unadded_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_get_nonexistent_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_get_nonexistent_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_get_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_get_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_get_root_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_lresolve_object_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_lresolve_object_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_new_filesystem (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_none_raises_type_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_not_exists_subpath_named_like_file_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_operate_on_grandchild_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_pickle_fs (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest)
Regression test for #445 ... ok
test_remove_nonexisten_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_remove_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_remove_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_remove_object_from_non_directory_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_remove_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_resolve_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_windows_root_dir_name (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_abs_path_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_abspath_bytes_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_abspath_bytes_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_abspath_deals_with_relative_non_root_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)
abspath should correctly handle relative paths from a ... ok
test_abspath_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)
abspath should return a consistent representation of a file. ... ok
test_abspath_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_dirname (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_dirname_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_exists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_exists_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_expand_root (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_expand_user (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_expand_user_no_home_environment (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)
Make sure this also works without HOME / USERPROFILE set ... ok
test_expand_user_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... skipped 'Windows specific test'
test_get_mtime (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_get_mtime_raises_os_error (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_getattr_forward_to_real_os_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)
Forwards any non-faked calls to os.path. ... ok
test_getsize_dir_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_getsize_dir_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_getsize_file_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_getsize_file_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_getsize_path_nonexistent (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_is_link_case_sensitive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_is_reserved_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... skipped 'Introduced in Python 3.13'
test_is_reserved_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... skipped 'Introduced in Python 3.13'
test_isabs_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_isdir (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_isdir_with_cwd_change (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_isfile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_islink (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_ismount (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_ismount_with_alternate_path_separator (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_ismount_with_drive_letters (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_ismount_with_unc_paths (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_join_bytes (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_join_strings (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_lexists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_realpath_strict (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... skipped "'strict' new in Python 3.10"
test_realpath_vs_abspath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_relpath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_samefile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_splitroot_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_side_effect_called (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok
test_side_effect_file_object (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok
test_absolute_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok
test_empty_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok
test_relative_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok
test_root_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok
test_two_level_absolute_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok
test_two_level_relative_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok
test_components_preceding_absolute_component_are_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_internal_empty_components_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_multiple_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_no_separator_added_for_components_ending_in_separator (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_no_separator_added_for_leading_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_one_empty_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_one_separator_added_between_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_one_separator_added_for_trailing_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_separators_not_stripped_from_single_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_that_drives_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok
test_that_drives_are_auto_mounted_case_insensitive (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok
test_that_mount_point_cannot_be_added_twice (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok
test_that_new_directories_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok
test_that_new_files_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok
test_that_new_mount_points_get_new_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok
test_that_unc_paths_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok
test_normalize_case (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok
test_normalize_case_for_drive (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok
test_normalize_case_for_lazily_added_empty_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... skipped 'Regression test for Windows problem only'
test_normalize_case_for_non_existing_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok
test_absolute_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok
test_dot_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok
test_dotted_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok
test_empty_path_should_get_normalized_to_root_path (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok
test_relative_path_forced_to_cwd (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok
test_root_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok
test_create_top_level_directory (pyfakefs.tests.fake_filesystem_test.OsPathInjectionRegressionTest) ... ok
test_os_path_sep_matches_fake_filesystem_separator (pyfakefs.tests.fake_filesystem_test.PathSeparatorTest) ... ok
test_add_existing_real_directory_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_not_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_symlink (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_symlink_lazy_read (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_symlink_target_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_tree (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_tree_to_other_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_file_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_file_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_paths_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_paths_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_non_existing_real_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_non_existing_real_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_real_file_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_real_file_to_non_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_cannot_overwrite_file_with_dir (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_cannot_overwrite_symlink_with_dir (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_existing_fake_directory_is_merged (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_existing_fake_directory_is_merged_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_existing_fake_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_fake_files_cannot_be_overwritten (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_get_object_from_lazily_added_real_directory (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_symlink_is_merged (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_write_to_real_file (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_sets_content_none_if_size_is_non_negative_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok
test_should_throw_if_size_is_negative (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok
test_should_throw_if_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok
test_eliminate_trailing_separators_from_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok
test_empty_path (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok
test_empty_path_components_are_preserved_in_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok
test_empty_tail_if_path_ends_in_separator (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok
test_no_separators (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok
test_root_separator_is_not_stripped (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok
test_slashes_do_not_split (pyfakefs.tests.fake_filesystem_test.SplitPathTest)
Tests that '/' is not treated specially if the ... ok
test_glob1 (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_glob_empty (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_glob_exact (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_glob_no_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_glob_question (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_glob_star (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_has_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_magic_dir (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_non_existent_path (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_copy (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest)
Regression test for #799 ... ok
test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'
test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'
test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_copy (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest)
Regression test for #799 ... skipped 'Only tests fake FS'
test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'
test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'
test_default_path (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok
test_empty_xattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok
test_getxattr_raises_for_non_existing_attribute (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok
test_getxattr_raises_for_non_existing_file (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok
test_removeattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok
test_setxattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok
test_access (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_chown (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_link_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_link_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_lstat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_mknod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_open (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_remove (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_rename_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_rename_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_replace_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_replace_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_unlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_utime (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_devnull_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_devnull_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'
test_open_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_create (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_create_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_create_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_create_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_read_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_write_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_read_only_read_after_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_sendfile_no_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_sendfile_offset_none (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_sendfile_twice (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_sendfile_with_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_temp_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'
test_write_devnull (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_write_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_access400 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_access600 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_access700 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_access_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_access_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_backwards_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
chdir into '..' should behave appropriately. ... ok
test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_capabilities (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Make sure that the fake capabilities are the same as the real ones. ... ok
test_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
chdir should work on a directory. ... ok
test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
chdir should raise OSError if the target is not a directory. ... ok
test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
chdir should raise OSError if the target does not exist. ... ok
test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chmod_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chmod_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chown_bad_arguments (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
os.chown() with bad args (Issue #30) ... ok
test_chown_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chown_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_classify_directory_contents (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Directory classification should work correctly. ... ok
test_closed_file_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_consecutive_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Consecutive relative chdir calls should work. ... ok
test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_dup (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_dup2_uses_existing_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_dup2_with_new_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_dup_uses_freed_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_exists_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fail_add_entry_to_readonly_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fdatasync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fdopen_twice (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fstat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fsync_pass_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fsync_pass_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_ftruncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_get_cwd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lchmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
lchmod shall behave like chmod with follow_symlinks=True. ... ok
test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_bogus (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_count1 (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Test that hard link counts are updated correctly. ... ok
test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_follow_symlink_not_supported_inPypy (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... skipped 'follow_symlinks only not supported in PyPi'
test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_non_existent_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_update (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_listdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_listdir_current (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_listdir_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_size_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_size_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
makedirs can create a directory even if parent does not exist. ... ok
test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
makedirs uses the exist_ok argument ... ok
test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
makedirs raises exception if access denied. ... ok
test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
makedirs creates a directories with umask applied. ... ok
test_makedirs_with_relative_paths (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir can create a relative directory. ... ok
test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if directory already exists. ... ok
test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if creating directory named ''. ... ok
test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if name already exists as a file. ... ok
test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if parent directory does not exist. ... ok
test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if parent is read only. ... ok
test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if mkdir foo/foo2/../foo3. ... ok
test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if mkdir foo/foo2/../foo3. ... ok
test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if mkdir foo/. (trailing /.). ... ok
test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if mkdir foo/. (trailing /.). ... ok
test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir creates a directory with umask applied. ... ok
test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir can create a directory named with a trailing slash. ... ok
test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mknod_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir creates a device with umask applied. ... ok
test_nlink_for_directories (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_fd_read_mode_for_ro_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_fd_write_mode_for_ro_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_nofollow_symlink_as_parent_works (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_nofollow_symlink_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
open creates a file with umask applied. ... ok
test_open_with_o_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_read_write_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dir_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_removedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Raises exception if asked to remove '/' as part of a ... ok
test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Raises exception if asked to remove '/'. ... ok
test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
removedirs works on directory names with trailing slashes. ... ok
test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Test a rename of a directory. ... ok
test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Can rename a directory to an unused name. ... ok
test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_empty_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Test a rename of an empty directory. ... ok
test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Can't rename a file that doesn't exist. ... ok
test_rename_preserves_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Test if rename preserves mtime. ... ok
test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Test renaming when old and new names are the same. ... ok
test_rename_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Renaming to another filesystem device raises OSError. ... ok
test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Can rename a file to a used name under Unix. ... ok
test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Renaming a file to a used name raises OSError under Windows. ... ok
test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Renaming to an existing directory changes the existing directory ... ok
test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Renaming to an existing directory raises OSError under Windows. ... ok
test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Renaming to an existing directory changes the existing directory ... ok
test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Can rename a file to a name in a nonexistent dir. ... ok
test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Can rename a file to an unused name. ... ok
test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Renaming to an existing directory raises OSError under Windows. ... ok
test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Replaces an existing file (does not work with `rename()` under ... ok
test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Can remove a directory. ... ok
test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Raises an exception if the target directory is not empty. ... ok
test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Raises an exception if the target does not exist. ... ok
test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_st_blocks (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Test that stat with follow_symlinks=False behaves like lstat. ... ok
test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Test that stat with follow_symlinks=False behaves like lstat. ... ok
test_stat_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_with_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_with_unc_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_truncate_non_existing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_truncate_to_larger (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_truncate_with_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_umask (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_write_to_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_write_to_read_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... skipped 'Pipe implementation may differ on other platforms'
test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Can use `rename()` to change filename case in a case-insensitive ... ok
test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
chdir should raise OSError if the target is not a directory. ... ok
test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_fsync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_link_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_listdir_impossible_without_read_permission (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_listdir_possible_without_exe_permission (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_lstat_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
makedirs can create a directory even if parent does not exist. ... ok
test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
makedirs uses the exist_ok argument ... ok
test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
mkdir raises exception if directory already exists. ... ok
test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
mkdir raises exception if name already exists as a file. ... ok
test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Test a rename of a directory. ... ok
test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Can rename a directory to an unused name. ... ok
test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_looping_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Test renaming when old and new names are the same. ... ok
test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Can rename a file to a used name under Unix. ... ok
test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Renaming a file to a used name raises OSError under Windows. ... ok
test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Renaming to an existing directory raises OSError under Windows. ... ok
test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Renaming to an existing directory changes the existing directory ... ok
test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Can rename a file to a name in a nonexistent dir. ... ok
test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Renaming to an existing directory raises OSError under Windows. ... ok
test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Replaces an existing file (does not work with `rename()` under ... ok
test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Can remove a directory. ... ok
test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Test that stat with follow_symlinks=False behaves like lstat. ... ok
test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_chmod_st_ctime (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_incorrect_ns_argument_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_invalid_times_arg_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_no_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_sets_current_time_if_args_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_sets_specified_time (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_sets_specified_time_in_ns (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_base_dirpath (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok
test_walk_bottom_up (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)
Walk up ordering is correct. ... ok
test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)
Calls onerror with correct errno when walking ... ok
test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)
Calls onerror with correct errno when walking non-directory. ... ok
test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok
test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok
test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok
test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)
Raises an exception when attempting to walk ... ok
test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)
Raises an exception when attempting to walk a non-directory. ... ok
test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)
Caller can modify list of directories to visit while walking. ... ok
test_walk_top_down (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)
Walk down ordering is correct. ... ok
test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_getgid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_getuid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'Windows specific behavior'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'Windows specific behavior'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_inode (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_is_link (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_isdir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_isfile (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_path_like (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_paths (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... skipped 'Windows specific behavior'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_inode (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_is_link (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_isdir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_isfile (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_path_like (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_paths (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirTest) ... skipped 'Windows specific behavior'
test_access (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_chown (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_link_dst_fd (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_link_src_fd (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_lstat (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_mkdir (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_mknod (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_open (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_remove (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_rename_dst_fd (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_rename_src_fd (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_replace_dst_fd (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_replace_src_fd (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_stat (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_unlink (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_utime (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_devnull_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_devnull_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'
test_open_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_create (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_create_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_create_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_create_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_read_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_truncate (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_write_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_read_only_read_after_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_sendfile_no_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_sendfile_offset_none (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_sendfile_twice (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_sendfile_with_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_temp_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'
test_write_devnull (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_write_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_access400 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_access600 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_access700 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_access_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_access_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_backwards_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
chdir into '..' should behave appropriately. ... skipped 'Only tests fake FS'
test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_capabilities (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Make sure that the fake capabilities are the same as the real ones. ... skipped 'Only tests fake FS'
test_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
chdir should work on a directory. ... skipped 'Only tests fake FS'
test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)
chdir should raise OSError if the target is not a directory. ... skipped 'Only tests fake FS'
test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)
chdir should raise OSError if the target does not exist. ... skipped 'Only tests fake FS'
test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chmod_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chmod_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chown_bad_arguments (pyfakefs.tests.fake_os_test.RealOsModuleTest)
os.chown() with bad args (Issue #30) ... skipped 'Only tests fake FS'
test_chown_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chown_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_classify_directory_contents (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Directory classification should work correctly. ... skipped 'Only tests fake FS'
test_closed_file_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_consecutive_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Consecutive relative chdir calls should work. ... skipped 'Only tests fake FS'
test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_dup (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_dup2_uses_existing_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_dup2_with_new_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_dup_uses_freed_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_exists_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fail_add_entry_to_readonly_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fdatasync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fdopen_twice (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fstat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fsync_pass_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fsync_pass_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_ftruncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_get_cwd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lchmod (pyfakefs.tests.fake_os_test.RealOsModuleTest)
lchmod shall behave like chmod with follow_symlinks=True. ... skipped 'Only tests fake FS'
test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_bogus (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_count1 (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Test that hard link counts are updated correctly. ... skipped 'Only tests fake FS'
test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_follow_symlink_not_supported_inPypy (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'follow_symlinks only not supported in PyPi'
test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_non_existent_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_update (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_listdir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_listdir_current (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_listdir_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_size_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_size_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest)
makedirs can create a directory even if parent does not exist. ... skipped 'Only tests fake FS'
test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTest)
makedirs uses the exist_ok argument ... skipped 'Only tests fake FS'
test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.RealOsModuleTest)
makedirs raises exception if access denied. ... skipped 'Only tests fake FS'
test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)
makedirs creates a directories with umask applied. ... skipped 'Only tests fake FS'
test_makedirs_with_relative_paths (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir can create a relative directory. ... skipped 'Only tests fake FS'
test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if directory already exists. ... skipped 'Only tests fake FS'
test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if creating directory named ''. ... skipped 'Only tests fake FS'
test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if name already exists as a file. ... skipped 'Only tests fake FS'
test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if parent directory does not exist. ... skipped 'Only tests fake FS'
test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if parent is read only. ... skipped 'Only tests fake FS'
test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Only tests fake FS'
test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Only tests fake FS'
test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Only tests fake FS'
test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Only tests fake FS'
test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir creates a directory with umask applied. ... skipped 'Only tests fake FS'
test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir can create a directory named with a trailing slash. ... skipped 'Only tests fake FS'
test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mknod_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir creates a device with umask applied. ... skipped 'Only tests fake FS'
test_nlink_for_directories (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_fd_read_mode_for_ro_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_fd_write_mode_for_ro_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_nofollow_symlink_as_parent_works (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_nofollow_symlink_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)
open creates a file with umask applied. ... skipped 'Only tests fake FS'
test_open_with_o_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_read_write_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dir_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_removedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Raises exception if asked to remove '/' as part of a ... skipped 'Only tests fake FS'
test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Raises exception if asked to remove '/'. ... skipped 'Only tests fake FS'
test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)
removedirs works on directory names with trailing slashes. ... skipped 'Only tests fake FS'
test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Test a rename of a directory. ... skipped 'Only tests fake FS'
test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Can rename a directory to an unused name. ... skipped 'Only tests fake FS'
test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_empty_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Test a rename of an empty directory. ... skipped 'Only tests fake FS'
test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Can't rename a file that doesn't exist. ... skipped 'Only tests fake FS'
test_rename_preserves_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Test if rename preserves mtime. ... skipped 'Only tests fake FS'
test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Test renaming when old and new names are the same. ... skipped 'Only tests fake FS'
test_rename_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Renaming to another filesystem device raises OSError. ... skipped 'Only tests fake FS'
test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Can rename a file to a used name under Unix. ... skipped 'Only tests fake FS'
test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Renaming a file to a used name raises OSError under Windows. ... skipped 'Only tests fake FS'
test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'
test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'
test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'
test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Can rename a file to a name in a nonexistent dir. ... skipped 'Only tests fake FS'
test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Can rename a file to an unused name. ... skipped 'Only tests fake FS'
test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'
test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Replaces an existing file (does not work with `rename()` under ... skipped 'Only tests fake FS'
test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Can remove a directory. ... skipped 'Only tests fake FS'
test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Raises an exception if the target directory is not empty. ... skipped 'Only tests fake FS'
test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Raises an exception if the target does not exist. ... skipped 'Only tests fake FS'
test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_st_blocks (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'
test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'
test_stat_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_with_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_with_unc_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_truncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_truncate_non_existing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_truncate_to_larger (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_truncate_with_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_umask (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_write_to_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_write_to_read_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Pipe implementation may differ on other platforms'
test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Can use `rename()` to change filename case in a case-insensitive ... skipped 'Only tests fake FS'
test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
chdir should raise OSError if the target is not a directory. ... skipped 'Only tests fake FS'
test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_fsync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_link_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_listdir_impossible_without_read_permission (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_listdir_possible_without_exe_permission (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_lstat_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
makedirs can create a directory even if parent does not exist. ... skipped 'Only tests fake FS'
test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
makedirs uses the exist_ok argument ... skipped 'Only tests fake FS'
test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
mkdir raises exception if directory already exists. ... skipped 'Only tests fake FS'
test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
mkdir raises exception if name already exists as a file. ... skipped 'Only tests fake FS'
test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Test a rename of a directory. ... skipped 'Only tests fake FS'
test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Can rename a directory to an unused name. ... skipped 'Only tests fake FS'
test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_looping_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Test renaming when old and new names are the same. ... skipped 'Only tests fake FS'
test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Can rename a file to a used name under Unix. ... skipped 'Only tests fake FS'
test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Renaming a file to a used name raises OSError under Windows. ... skipped 'Only tests fake FS'
test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'
test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'
test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Can rename a file to a name in a nonexistent dir. ... skipped 'Only tests fake FS'
test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'
test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Replaces an existing file (does not work with `rename()` under ... skipped 'Only tests fake FS'
test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Can remove a directory. ... skipped 'Only tests fake FS'
test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'
test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_base_dirpath (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'
test_walk_bottom_up (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)
Walk up ordering is correct. ... skipped 'Only tests fake FS'
test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)
Calls onerror with correct errno when walking ... skipped 'Only tests fake FS'
test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)
Calls onerror with correct errno when walking non-directory. ... skipped 'Only tests fake FS'
test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'
test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'
test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'
test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)
Raises an exception when attempting to walk ... skipped 'Only tests fake FS'
test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)
Raises an exception when attempting to walk a non-directory. ... skipped 'Only tests fake FS'
test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)
Caller can modify list of directories to visit while walking. ... skipped 'Only tests fake FS'
test_walk_top_down (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)
Walk down ordering is correct. ... skipped 'Only tests fake FS'
test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_getgid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_getuid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_inode (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_paths (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Windows specific behavior'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_inode (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_paths (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Windows specific behavior'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_inode (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_is_link (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_isdir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_isfile (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_path_like (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_paths (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Windows specific behavior'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_inode (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_is_link (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_isdir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_isfile (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_path_like (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_paths (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Windows specific behavior'
test_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok
test_file_size_not_reset_after_close (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok
test_file_size_truncation (pyfakefs.tests.fake_os_test.StatPropagationTest)
test that file size gets updated via open(). ... ok
test_file_size_updated_via_close (pyfakefs.tests.fake_os_test.StatPropagationTest)
test that file size gets updated via close(). ... ok
test_file_size_updated_via_flush (pyfakefs.tests.fake_os_test.StatPropagationTest)
test that file size gets updated via flush(). ... ok
test_large_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok
test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok
test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok
test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok
test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok
test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR)
When an existing file is opened with 'r' mode, read, flushed and ... ok
test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok
test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok
test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok
test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok
test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus)
When an existing file is opened with 'w+' mode and is then written to, ... ok
test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok
test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'
test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'
test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'
test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'
test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR)
When an existing file is opened with 'r' mode, read, flushed and ... skipped 'Only tests fake FS'
test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'
test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'
test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'
test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'
test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus)
When an existing file is opened with 'w+' mode and is then written to, ... skipped 'Only tests fake FS'
test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'
test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_default_buffering_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_no_buffering (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_binary_readline (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok
test_read_default_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok
test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok
test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok
test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok
test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... skipped 'U flag still supported'
test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok
test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok
test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok
test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok
test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok
test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok
test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok
test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_append_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_byte_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_byte_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_can_read_from_block_device (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_closed (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_create_file_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_create_file_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_delete_on_close (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_exclusive_create_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_follow_link_read (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_follow_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_getsize_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_intertwined_read_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_iterate_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_next_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_directory_error (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_flags100 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_flags200 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_flags400 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_flags700 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_io_errors (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_no_parent_dir (pyfakefs.tests.fake_open_test.FakeFileOpenTest)
Expect raise when opening a file in a missing directory. ... ok
test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_valid_args (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_valid_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_with_append_flag (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_with_wplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_overwrite_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_read_with_rplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_seek_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_st_size_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_truncate_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_unicode_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_unicode_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_utf16_text (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_write_devnull (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_write_str_read_bytes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_no_opener_with_read (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_read (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_byte_contents_open_code (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... ok
test_invalid_path (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... ok
test_open_code_fd_pypy (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'Different behavior in PyPy'
test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... ok
test_invalid_path (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... ok
test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... ok
test_append_existing_file (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_append_existing_file (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok
test_write_and_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok
test_write_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok
test_closefd_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok
test_open_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok
test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'
test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'
test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'
test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'
test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'
test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok
test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok
test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok
test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok
test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok
test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest) ... ok
test_read_text (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest)
Test that text mode flag is ignored ... ok
test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_default_buffering_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_no_buffering (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_binary_readline (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'
test_read_default_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'
test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'
test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'
test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'
test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'U flag still supported'
test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'
test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'
test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'
test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'
test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'
test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'
test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'
test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_append_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_byte_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_byte_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_can_read_from_block_device (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_closed (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_create_file_with_append (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_create_file_with_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_delete_on_close (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_exclusive_create_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_follow_link_read (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_follow_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_getsize_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_intertwined_read_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_iterate_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_next_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_directory_error (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_flags100 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_flags200 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_flags400 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_flags700 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_io_errors (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_no_parent_dir (pyfakefs.tests.fake_open_test.RealFileOpenTest)
Expect raise when opening a file in a missing directory. ... skipped 'Only tests fake FS'
test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_valid_args (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_valid_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_with_append_flag (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_with_wplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_overwrite_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_read_with_rplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_seek_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_st_size_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_truncate_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_unicode_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_unicode_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_utf16_text (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_write_devnull (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_write_str_read_bytes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_no_opener_with_read (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_append (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_read (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'
test_write_and_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'
test_write_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'
test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest) ... skipped 'Only tests fake FS'
test_read_text (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest)
Test that text mode flag is ignored ... skipped 'Only tests fake FS'
test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'Only tests fake FS'
test_invalid_path (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'Only tests fake FS'
test_open_code_fd_pypy (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'Different behavior in PyPy'
test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'Only tests fake FS'
test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_link_to_absolute_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_link_to_parent_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_link_to_sub_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_link_within_same_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_multiple_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_normal_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_read_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_too_many_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_utime_link (pyfakefs.tests.fake_open_test.RealResolvePathTest)
os.utime() and os.stat() via symbolic link (issue #49) ... skipped 'Only tests fake FS'
test_write_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'Only tests fake FS'
test_invalid_path (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'Only tests fake FS'
test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'Only tests fake FS'
test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_link_to_absolute_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_link_to_parent_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_link_to_sub_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_link_within_same_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_multiple_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_normal_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_read_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_too_many_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_utime_link (pyfakefs.tests.fake_open_test.ResolvePathTest)
os.utime() and os.stat() via symbolic link (issue #49) ... ok
test_write_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_open_in_skipped_module (pyfakefs.tests.fake_open_test.SkipOpenTest) ... ok
test_mkdtemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok
test_mkstemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok
test_mkstemp_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest)
test tempfile.mkstemp(dir=). ... ok
test_named_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok
test_named_temporary_file_no_delete (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok
test_temporary_directory (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok
test_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok
test_temporay_file_with_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok
test_absolute_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_bad_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_broken_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_broken_sym_link (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_broken_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_builtin_open_modes (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_empty_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_file_in_a_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_file_with_binary_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_file_with_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_getmtime_nonexistant_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_hard_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_hard_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_isabs (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_link_to_folder_after_chdir (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_none_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_path_through_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_relative_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_root_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_sym_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_sym_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_sym_link_to_sibling_directory_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_both (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok
test_exec_module_in_fake_fs (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok
test_run_module (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok
test_run_path (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok
test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.FailedPatchingTest) ... expected failure
test_non_root_behavior (pyfakefs.tests.fake_filesystem_unittest_test.NoRootUserTest)
Check that fs behaves as non-root user regardless of actual ... ok
test_fake_path_exists1 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_fake_path_exists2 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_fake_path_exists3 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_fake_path_exists5 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_fake_path_exists6 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_fake_path_exists7 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_open_fails (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_open_patched_in_module_ending_with_io (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTest) ... ok
test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... ok
test_system_stat_failing (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... expected failure
test_cwd (pyfakefs.tests.fake_filesystem_unittest_test.PathlibTest)
Make sure fake file system is used for os in pathlib ... ok
test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok
test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok
test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok
test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok
test_pause_resume_fs (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok
test_pause_resume_fs_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok
test_pause_resume_without_patcher (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok
test_is_absolute (pyfakefs.tests.fake_filesystem_unittest_test.TestAbsolutePathOnWindows) ... skipped 'Windows-specific behavior'
test_attributes (pyfakefs.tests.fake_filesystem_unittest_test.TestAttributesWithFakeModuleNames)
Attributes of module under test are not patched ... ok
test_using_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... ok
test_using_fs_functions (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... ok
test_no_deprecation_warning (pyfakefs.tests.fake_filesystem_unittest_test.TestDeprecationSuppression)
Ensures that deprecation warnings are suppressed during module ... ok
test_file_copied (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... ok
test_file_copied_again (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... ok
test_drivelike_path (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok
test_linux (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok
test_macos (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok
test_real_file_with_home (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS)
Regression test for #558 ... ok
test_tempfile_access (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... skipped 'Windows-specific test'
test_windows (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok
test_context_decorator (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok
test_context_manager (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok
test_argument_order1 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok
test_argument_order2 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok
test_fake_path_exists4 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok
test_path_exists_as_default_arg_in_function (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok
test_path_exists_as_default_arg_in_method (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok
test_import_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_exists_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_function_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_function_from_os_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_function_from_os_path_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_io_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_isdir_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_isfile_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_islink_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_path_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports)
Make sure `from os import path` patches `path`. ... ok
test_import_path_from_pathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_pathlib_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_own_path_module (pyfakefs.tests.fake_filesystem_unittest_test.TestPathNotPatchedIfNotOsPath) ... ok
test_test_case_type (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCase) ... ok
test_set_up_pyfakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCaseMixin) ... ok
test_fakepathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest) ... ok
test_glob (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)
Fake glob module is bound ... ok
test_io_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)
Fake io module is bound ... ok
test_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)
Fake `open()` function is bound ... ok
test_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)
Fake os module is bound ... ok
test_shutil (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)
Fake shutil module is bound ... ok
test_a (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok
test_b (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok
test_tempdir_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok
test_tmp_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok
test_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok
test_value (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok
test_write_tmp_linux (pyfakefs.tests.fake_filesystem_unittest_test.TestTempPathCreation) ... ok
test_write_tmp_macos (pyfakefs.tests.fake_filesystem_unittest_test.TestTempPathCreation) ... ok
test_write_tmp_windows (pyfakefs.tests.fake_filesystem_unittest_test.TestTempPathCreation) ... ok
test_create_file (pyfakefs.tests.example_test.TestExample)
Test example.create_file() which uses `open()` ... ok
test_delete_file (pyfakefs.tests.example_test.TestExample)
Test example.delete_file() which uses `os.remove()`. ... ok
test_file_exists (pyfakefs.tests.example_test.TestExample)
Test example.path_exists() which uses `os.path.exists()`. ... ok
test_get_globs (pyfakefs.tests.example_test.TestExample)
Test example.get_glob(). ... ok
test_os_scandir (pyfakefs.tests.example_test.TestExample)
Test example.scandir() which uses `os.scandir()`. ... ok
test_real_file_access (pyfakefs.tests.example_test.TestExample)
Test `example.file_contents()` for a real file after adding it using ... ok
test_rm_tree (pyfakefs.tests.example_test.TestExample)
Test example.rm_tree() using `shutil.rmtree()`. ... ok
test_scandir_scandir (pyfakefs.tests.example_test.TestExample)
Test example.scandir() which uses `scandir.scandir()`. ... skipped 'Testing only if scandir module is installed'
example (pyfakefs.tests)
Doctest: pyfakefs.tests.example ... ok
create_file (pyfakefs.tests.example)
Doctest: pyfakefs.tests.example.create_file ... ok
delete_file (pyfakefs.tests.example)
Doctest: pyfakefs.tests.example.delete_file ... ok
get_glob (pyfakefs.tests.example)
Doctest: pyfakefs.tests.example.get_glob ... ok
path_exists (pyfakefs.tests.example)
Doctest: pyfakefs.tests.example.path_exists ... ok
test_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_smart_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_stubout_class_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_stubout_class_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_stubout_method_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_stubout_method_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_stubout_module_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_stubout_module_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_stubout_submodule_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_os_import_as_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok
test_os_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok
test_os_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok
test_pathlib_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok
test_shutil_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok
test_is_file_for_unreadable_dir_windows (pyfakefs.tests.fake_pathlib_test.FakeFilesystemChmodTest) ... skipped 'Windows specific test'
test_add_existing_real_directory_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok
test_add_existing_real_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok
test_create_dir_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok
test_create_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok
test_create_symlink_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok
test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'
test_cwd (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_expanduser_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_expanduser_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific test'
test_home_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_home_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific test'
test_is_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_is_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_is_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_iterdir_and_glob_without_exe_permission (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_iterdir_impossible_without_read_permission (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_lchmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_lstat_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_lstat_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'
test_resolve (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)
Tests for collapsing path during initialization. ... ok
test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)
Basic initialization tests - taken from ... ok
test_initialization_type (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)
Make sure tests for class type will work ... ok
test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok
test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... skipped 'Windows specific behavior'
test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok
test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)
Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'
test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)
Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'
test_is_absolute (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'
test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'
test_posix_pure_path_parsing (pyfakefs.tests.fake_pathlib_test.FakePathlibModulePurePathTest)
Verify faked pure POSIX paths use filesystem-independent separators. ... ok
test_windows_pure_path_parsing (pyfakefs.tests.fake_pathlib_test.FakePathlibModulePurePathTest)
Verify faked pure Windows paths use filesystem-independent separators. ... ok
test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_glob (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific test'
test_hardlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'
test_is_junction (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'
test_iterdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_link_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_mkdir_with_automount_drive (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific behavior'
test_mkdir_with_automount_unc_path (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific behavior'
test_open (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_read_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_read_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_samefile (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_symlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_touch_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_unlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'
test_is_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'Windows specific behavior'
test_joinpath (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_match (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_with_name (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_with_suffix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_abspath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_access (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_chdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getatime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getctime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getmtime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getsize (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isabs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isfile (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_islink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_ismount (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_join (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_lexists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_link (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_listdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_makedirs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_normcase (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_normpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_realpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_relpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_remove (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_scandir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_split (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_splitdrive (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'
test_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_truncate (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_utime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_walk (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest)
Regression test for #915 - walk results shall be strings. ... ok
test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'
test_cwd (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_expanduser_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_expanduser_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Windows specific test'
test_home_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_home_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Windows specific test'
test_is_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_is_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_is_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_iterdir_and_glob_without_exe_permission (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_iterdir_impossible_without_read_permission (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_lchmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_lstat_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_lstat_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'
test_resolve (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)
Tests for collapsing path during initialization. ... skipped 'Only tests fake FS'
test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)
Basic initialization tests - taken from ... skipped 'Only tests fake FS'
test_initialization_type (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)
Make sure tests for class type will work ... skipped 'Only tests fake FS'
test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Only tests fake FS'
test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Windows specific behavior'
test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Only tests fake FS'
test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)
Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'
test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)
Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'
test_is_absolute (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'
test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'
test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_glob (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Windows specific test'
test_hardlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'
test_is_junction (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'
test_iterdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_link_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_mkdir_with_automount_drive (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Windows specific behavior'
test_mkdir_with_automount_unc_path (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Windows specific behavior'
test_open (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_read_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_read_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_samefile (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_symlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_touch_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_unlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_write_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_write_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'
test_is_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Windows specific behavior'
test_joinpath (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_match (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_with_name (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_with_suffix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_abspath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_access (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_chdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_getatime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_getctime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_getmtime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_getsize (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_isabs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_isdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_isfile (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_islink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_ismount (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_join (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_lexists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_link (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_listdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_makedirs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_normcase (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_normpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_realpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_relpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_remove (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_scandir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_split (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_splitdrive (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'
test_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_truncate (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_utime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_walk (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest)
Regression test for #915 - walk results shall be strings. ... skipped 'Only tests fake FS'
test_open_in_skipped_module (pyfakefs.tests.fake_pathlib_test.SkipPathlibTest) ... ok
test_read_bytes_in_skipped_module (pyfakefs.tests.fake_pathlib_test.SkipPathlibTest) ... ok
test_read_text_in_skipped_module (pyfakefs.tests.fake_pathlib_test.SkipPathlibTest) ... ok
test_pathlib2_warning (pyfakefs.tests.fake_legacy_modules_test.DeprecationWarningTest) ... ok
test_scandir_warning (pyfakefs.tests.fake_legacy_modules_test.DeprecationWarningTest) ... skipped 'The scandir package is not installed'
test_chmod (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_chmod_no_followsymlinks (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'
test_cwd (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_exists (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_expanduser_posix (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_expanduser_windows (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'Windows specific test'
test_home_posix (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_home_windows (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'Windows specific test'
test_is_dir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_is_file (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_is_symlink (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_iterdir_and_glob_without_exe_permission (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_iterdir_impossible_without_read_permission (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_lchmod (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_lstat_posix (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_lstat_windows (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'Windows specific behavior'
test_resolve (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_resolve_nonexisting_file (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_stat (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... ok
test_init_collapse (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2InitializationTest)
Tests for collapsing path during initialization. ... ok
test_init_with_segments (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2InitializationTest)
Basic initialization tests - taken from ... ok
test_initialization_type (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2InitializationTest)
Make sure tests for class type will work ... ok
test_is_absolute_posix (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2InitializationTest) ... ok
test_is_absolute_windows (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2InitializationTest) ... skipped 'Windows specific behavior'
test_path_parts (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2InitializationTest) ... ok
test_exists (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_glob (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_glob_case_posix (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_glob_case_windows (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'Windows specific test'
test_hardlink_to (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'
test_is_junction (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_iterdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_link_to (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_mkdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_mkdir_exist_ok (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_mkdir_with_automount_drive (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'Windows specific behavior'
test_mkdir_with_automount_unc_path (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'Windows specific behavior'
test_open (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_read_bytes (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_read_text (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_read_text_with_encoding (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_readlink (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_rename (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_replace (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_rmdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_samefile (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_symlink_to (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_touch_existing (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_touch_non_existing (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_unlink (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_write_bytes (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_write_text (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_write_text_with_encoding (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... ok
test_write_with_newline_arg (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'newline argument new in Python 3.10'
test_abspath (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_access (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_changed_owner_and_group (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_chdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_chmod (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_exists (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_expanduser (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_getatime (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_getctime (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_getmtime (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_getsize (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_isabs (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_isdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_isfile (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_isfile_not_readable (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_islink (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_ismount (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_join (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_lexists (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_link (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_listdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_makedirs (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_mkdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_normcase (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_normpath (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_owner_and_group_posix (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_owner_and_group_windows (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_readlink (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_readlink_bytes (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_realpath (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_relpath (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_remove (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_rename (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_replace (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_rmdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_scandir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_split (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_splitdrive (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_stat (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_stat_follow_symlinks (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'New in Python 3.10'
test_symlink (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_truncate (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_utime (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... ok
test_walk (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest)
Regression test for #915 - walk results shall be strings. ... ok
test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'
test_cwd (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_expanduser_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_expanduser_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific test'
test_home_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_home_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific test'
test_is_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_is_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_is_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_iterdir_and_glob_without_exe_permission (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_iterdir_impossible_without_read_permission (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_lchmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_lstat_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_lstat_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'
test_resolve (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)
Tests for collapsing path during initialization. ... ok
test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)
Basic initialization tests - taken from ... ok
test_initialization_type (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)
Make sure tests for class type will work ... ok
test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok
test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... skipped 'Windows specific behavior'
test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok
test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_glob (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific test'
test_hardlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'
test_is_junction (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'
test_iterdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_link_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_mkdir_with_automount_drive (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific behavior'
test_mkdir_with_automount_unc_path (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific behavior'
test_open (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_read_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_read_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_samefile (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_symlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_touch_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_unlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'
test_abspath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_access (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_chdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getatime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getctime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getmtime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getsize (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isabs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isfile (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_islink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_ismount (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_join (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_lexists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_link (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_listdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_makedirs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_normcase (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_normpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_realpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_relpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_remove (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_scandir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_split (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_splitdrive (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'
test_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_truncate (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_utime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_walk (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest)
Regression test for #915 - walk results shall be strings. ... ok
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_inode (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_is_link (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_isdir (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_isfile (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_non_existing_dir (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_path_like (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_path_links_not_resolved (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_paths (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_scandir_stat_nlink (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_scandir_with_fd (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_stat_ino_dev (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_stat_posix (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_stat_windows (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_inode (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_is_link (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_isdir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_isfile (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_path_like (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_paths (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirTest) ... skipped 'Windows specific behavior'
test_chmod (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_chmod_no_followsymlinks (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'
test_cwd (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_exists (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_expanduser_posix (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_expanduser_windows (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Windows specific test'
test_home_posix (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_home_windows (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Windows specific test'
test_is_dir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_is_file (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_is_symlink (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_iterdir_and_glob_without_exe_permission (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_iterdir_impossible_without_read_permission (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_lchmod (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_lstat_posix (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_lstat_windows (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Windows specific behavior'
test_resolve (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_resolve_nonexisting_file (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_stat (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_init_collapse (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2InitializationTest)
Tests for collapsing path during initialization. ... skipped 'Only tests fake FS'
test_init_with_segments (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2InitializationTest)
Basic initialization tests - taken from ... skipped 'Only tests fake FS'
test_initialization_type (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2InitializationTest)
Make sure tests for class type will work ... skipped 'Only tests fake FS'
test_is_absolute_posix (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2InitializationTest) ... skipped 'Only tests fake FS'
test_is_absolute_windows (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2InitializationTest) ... skipped 'Windows specific behavior'
test_path_parts (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2InitializationTest) ... skipped 'Only tests fake FS'
test_abspath (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_access (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_changed_owner_and_group (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_chdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_chmod (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_exists (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_expanduser (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_getatime (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_getctime (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_getmtime (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_getsize (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_isabs (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_isdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_isfile (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_isfile_not_readable (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_islink (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_ismount (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_join (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_lexists (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_link (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_listdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_makedirs (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_mkdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_normcase (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_normpath (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_owner_and_group_posix (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_owner_and_group_windows (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_readlink (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_readlink_bytes (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_realpath (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_relpath (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_remove (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_rename (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_replace (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_rmdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_scandir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_split (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_splitdrive (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_stat (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_stat_follow_symlinks (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'New in Python 3.10'
test_symlink (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_truncate (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_utime (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_walk (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest)
Regression test for #915 - walk results shall be strings. ... skipped 'Only tests fake FS'
test_exists (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_glob (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_glob_case_posix (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_glob_case_windows (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Windows specific test'
test_hardlink_to (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'hardlink_to new in Python 3.10'
test_is_junction (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_iterdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_link_to (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_mkdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_mkdir_exist_ok (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_mkdir_with_automount_drive (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Windows specific behavior'
test_mkdir_with_automount_unc_path (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Windows specific behavior'
test_open (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_read_bytes (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_read_text (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_read_text_with_encoding (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_readlink (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_rename (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_replace (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_rmdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_samefile (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_symlink_to (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_touch_existing (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_touch_non_existing (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_unlink (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_write_bytes (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_write_text (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_write_text_with_encoding (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'Only tests fake FS'
test_write_with_newline_arg (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'newline argument new in Python 3.10'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_inode (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_is_link (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_isdir (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_isfile (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_non_existing_dir (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_path_like (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_path_links_not_resolved (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_paths (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_scandir_stat_nlink (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_scandir_with_fd (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_stat_ino_dev (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_stat_posix (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_stat_windows (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'

----------------------------------------------------------------------
Ran 2567 tests

OK (skipped=1062, expected failures=2)
py$(PYV): commands[1]> python -m pyfakefs.tests.all_tests_without_extra_packages
test_alt_sep (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok
test_collapse_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok
test_exists_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok
test_initial_value (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok
test_normalize_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok
test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_exists (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_get_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_get_object_with_file_size (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_getsize (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_getsize_with_looping_symlink (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_resolve_path (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok
test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_exists (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_get_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_getsize (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok
test_all_dot_paths_removed_but_one (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_all_dot_paths_removed_if_another_path_component_exists (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_combine_dot_and_up_level_references_in_absolute_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_conserves_up_level_references_starting_from_current_dir (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_dot_path_unchanged (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_dots_in_path_collapses_to_last_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_empty_path_becomes_dot_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_ignores_up_level_references_starting_from_root (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_multiple_separators_collapsed_into_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok
test_slashes_are_not_collapsed (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest)
Tests that '/' is not treated specially if the ... ok
test_create_link_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok
test_create_symlink_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok
test_copying_preserves_byte_contents (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_creating_file_with_content_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_creating_file_with_fitting_content (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_creating_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_creating_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_full_after_reopened (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_full_after_reopened_rplus_seek (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_full_append (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_size_on_auto_mounted_drive_on_directory_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_size_on_auto_mounted_drive_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_size_on_unlimited_disk (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_usage_on_automounted_drive (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_usage_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_disk_usage_on_mounted_paths (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_diskusage_after_open_write (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_file_system_size_after_ascii_string_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_file_system_size_after_binary_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_file_system_size_after_directory_removal (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_file_system_size_after_directory_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_file_system_size_after_file_deletion (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_file_system_size_after_file_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_file_system_size_after_large_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_filesystem_size_after_2byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_filesystem_size_after_3byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_resize_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_resize_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_set_larger_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_set_smaller_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_that_disk_usage_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_that_hard_link_does_not_change_used_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_that_the_size_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok
test_characters_before_root_ignored_in_join_paths (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_collapse_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_collapse_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_get_path_components (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_initial_value (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_normalize_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_normalize_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_resolve_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_drive_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_drive_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_drive_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_drive_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_path_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_path_with_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_path_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_path_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_split_with_alt_separator (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_splitroot_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_splitroot_with_empty_parts (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_splitroot_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok
test_add_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_directory_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_directory_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_file_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_get_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_leave_file_unchanged_if_size_is_equal_to_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_new_file_and_directory (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_ordered_dirs (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_pads_with_nullbytes_if_size_is_greater_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_path (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_path_after_chdir (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_path_after_chdir_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_path_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_produce_empty_file_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_remove_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_set_contents_to_dir_raises (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_set_m_time (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_sets_content_empty_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_should_throw_if_set_size_is_negative (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_should_throw_if_set_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_truncate_file_if_size_is_smaller_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok
test_add_object_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_add_object_to_regular_file_error_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_add_object_to_regular_file_error_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_add_object_to_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_dir_umask (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_directory_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_directory_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_in_current_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_in_read_only_directory_possible_in_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_in_read_only_directory_raises_in_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_with_changed_ids (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_with_incorrect_mode_type (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_file_with_size_but_no_content_creates_large_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_create_link (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_directory_access_on_file_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_directory_access_on_file_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_empty_file_created_for_none_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_empty_string_does_not_exist (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_added_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_file_added_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_file_removed_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_relative_path_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_relative_path_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_removed_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_exists_unadded_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_get_nonexistent_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_get_nonexistent_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_get_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_get_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_get_root_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_lresolve_object_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_lresolve_object_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_new_filesystem (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_none_raises_type_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_not_exists_subpath_named_like_file_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_operate_on_grandchild_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_pickle_fs (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest)
Regression test for #445 ... ok
test_remove_nonexisten_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_remove_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_remove_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_remove_object_from_non_directory_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_remove_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_resolve_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_windows_root_dir_name (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok
test_abs_path_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_abspath_bytes_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_abspath_bytes_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_abspath_deals_with_relative_non_root_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)
abspath should correctly handle relative paths from a ... ok
test_abspath_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)
abspath should return a consistent representation of a file. ... ok
test_abspath_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_dirname (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_dirname_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_exists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_exists_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_expand_root (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_expand_user (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_expand_user_no_home_environment (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)
Make sure this also works without HOME / USERPROFILE set ... ok
test_expand_user_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... skipped 'Windows specific test'
test_get_mtime (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_get_mtime_raises_os_error (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_getattr_forward_to_real_os_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)
Forwards any non-faked calls to os.path. ... ok
test_getsize_dir_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_getsize_dir_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_getsize_file_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_getsize_file_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_getsize_path_nonexistent (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_is_link_case_sensitive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_is_reserved_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... skipped 'Introduced in Python 3.13'
test_is_reserved_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... skipped 'Introduced in Python 3.13'
test_isabs_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_isdir (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_isdir_with_cwd_change (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_isfile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_islink (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_ismount (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_ismount_with_alternate_path_separator (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_ismount_with_drive_letters (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_ismount_with_unc_paths (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_join_bytes (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_join_strings (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_lexists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_realpath_strict (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... skipped "'strict' new in Python 3.10"
test_realpath_vs_abspath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_relpath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_samefile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_splitroot_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok
test_side_effect_called (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok
test_side_effect_file_object (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok
test_absolute_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok
test_empty_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok
test_relative_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok
test_root_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok
test_two_level_absolute_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok
test_two_level_relative_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok
test_components_preceding_absolute_component_are_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_internal_empty_components_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_multiple_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_no_separator_added_for_components_ending_in_separator (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_no_separator_added_for_leading_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_one_empty_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_one_separator_added_between_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_one_separator_added_for_trailing_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_separators_not_stripped_from_single_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok
test_that_drives_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok
test_that_drives_are_auto_mounted_case_insensitive (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok
test_that_mount_point_cannot_be_added_twice (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok
test_that_new_directories_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok
test_that_new_files_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok
test_that_new_mount_points_get_new_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok
test_that_unc_paths_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok
test_normalize_case (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok
test_normalize_case_for_drive (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok
test_normalize_case_for_lazily_added_empty_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... skipped 'Regression test for Windows problem only'
test_normalize_case_for_non_existing_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok
test_absolute_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok
test_dot_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok
test_dotted_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok
test_empty_path_should_get_normalized_to_root_path (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok
test_relative_path_forced_to_cwd (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok
test_root_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok
test_create_top_level_directory (pyfakefs.tests.fake_filesystem_test.OsPathInjectionRegressionTest) ... ok
test_os_path_sep_matches_fake_filesystem_separator (pyfakefs.tests.fake_filesystem_test.PathSeparatorTest) ... ok
test_add_existing_real_directory_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_not_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_symlink (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_symlink_lazy_read (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_symlink_target_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_tree (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_directory_tree_to_other_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_file_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_file_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_paths_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_existing_real_paths_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_non_existing_real_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_non_existing_real_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_real_file_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_add_real_file_to_non_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_cannot_overwrite_file_with_dir (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_cannot_overwrite_symlink_with_dir (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_existing_fake_directory_is_merged (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_existing_fake_directory_is_merged_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_existing_fake_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_fake_files_cannot_be_overwritten (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_get_object_from_lazily_added_real_directory (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_symlink_is_merged (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_write_to_real_file (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok
test_sets_content_none_if_size_is_non_negative_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok
test_should_throw_if_size_is_negative (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok
test_should_throw_if_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok
test_eliminate_trailing_separators_from_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok
test_empty_path (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok
test_empty_path_components_are_preserved_in_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok
test_empty_tail_if_path_ends_in_separator (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok
test_no_separators (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok
test_root_separator_is_not_stripped (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok
test_slashes_do_not_split (pyfakefs.tests.fake_filesystem_test.SplitPathTest)
Tests that '/' is not treated specially if the ... ok
test_glob1 (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_glob_empty (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_glob_exact (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_glob_no_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_glob_question (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_glob_star (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_has_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_magic_dir (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_non_existent_path (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok
test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok
test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_copy (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest)
Regression test for #799 ... ok
test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'
test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok
test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'
test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'
test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_copy (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest)
Regression test for #799 ... skipped 'Only tests fake FS'
test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'
test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'
test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'
test_default_path (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok
test_empty_xattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok
test_getxattr_raises_for_non_existing_attribute (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok
test_getxattr_raises_for_non_existing_file (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok
test_removeattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok
test_setxattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok
test_access (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_chown (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_link_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_link_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_lstat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_mknod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_open (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_remove (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_rename_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_rename_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_replace_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_replace_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_unlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
test_utime (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok
testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_devnull_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_devnull_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'
test_open_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_create (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_create_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_create_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_create_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_read_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_write_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_read_only_read_after_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_sendfile_no_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_sendfile_offset_none (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_sendfile_twice (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_sendfile_with_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_temp_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'
test_write_devnull (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_write_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok
test_access400 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_access600 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_access700 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_access_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_access_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_backwards_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
chdir into '..' should behave appropriately. ... ok
test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_capabilities (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Make sure that the fake capabilities are the same as the real ones. ... ok
test_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
chdir should work on a directory. ... ok
test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
chdir should raise OSError if the target is not a directory. ... ok
test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
chdir should raise OSError if the target does not exist. ... ok
test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chmod_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chmod_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chown_bad_arguments (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
os.chown() with bad args (Issue #30) ... ok
test_chown_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chown_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_classify_directory_contents (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Directory classification should work correctly. ... ok
test_closed_file_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_consecutive_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Consecutive relative chdir calls should work. ... ok
test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_dup (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_dup2_uses_existing_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_dup2_with_new_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_dup_uses_freed_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_exists_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fail_add_entry_to_readonly_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fdatasync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fdopen_twice (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fstat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fsync_pass_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fsync_pass_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_ftruncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_get_cwd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lchmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
lchmod shall behave like chmod with follow_symlinks=True. ... ok
test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_bogus (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_count1 (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Test that hard link counts are updated correctly. ... ok
test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_follow_symlink_not_supported_inPypy (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... skipped 'follow_symlinks only not supported in PyPi'
test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_non_existent_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_link_update (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_listdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_listdir_current (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_listdir_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_size_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_size_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
makedirs can create a directory even if parent does not exist. ... ok
test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
makedirs uses the exist_ok argument ... ok
test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
makedirs raises exception if access denied. ... ok
test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
makedirs creates a directories with umask applied. ... ok
test_makedirs_with_relative_paths (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir can create a relative directory. ... ok
test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if directory already exists. ... ok
test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if creating directory named ''. ... ok
test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if name already exists as a file. ... ok
test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if parent directory does not exist. ... ok
test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if parent is read only. ... ok
test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if mkdir foo/foo2/../foo3. ... ok
test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if mkdir foo/foo2/../foo3. ... ok
test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if mkdir foo/. (trailing /.). ... ok
test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir raises exception if mkdir foo/. (trailing /.). ... ok
test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir creates a directory with umask applied. ... ok
test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir can create a directory named with a trailing slash. ... ok
test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_mknod_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
mkdir creates a device with umask applied. ... ok
test_nlink_for_directories (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_fd_read_mode_for_ro_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_fd_write_mode_for_ro_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_nofollow_symlink_as_parent_works (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_nofollow_symlink_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_open_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
open creates a file with umask applied. ... ok
test_open_with_o_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_read_write_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dir_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_removedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Raises exception if asked to remove '/' as part of a ... ok
test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Raises exception if asked to remove '/'. ... ok
test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
removedirs works on directory names with trailing slashes. ... ok
test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Test a rename of a directory. ... ok
test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Can rename a directory to an unused name. ... ok
test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_empty_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Test a rename of an empty directory. ... ok
test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Can't rename a file that doesn't exist. ... ok
test_rename_preserves_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Test if rename preserves mtime. ... ok
test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Test renaming when old and new names are the same. ... ok
test_rename_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Renaming to another filesystem device raises OSError. ... ok
test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Can rename a file to a used name under Unix. ... ok
test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Renaming a file to a used name raises OSError under Windows. ... ok
test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Renaming to an existing directory changes the existing directory ... ok
test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Renaming to an existing directory raises OSError under Windows. ... ok
test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Renaming to an existing directory changes the existing directory ... ok
test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Can rename a file to a name in a nonexistent dir. ... ok
test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Can rename a file to an unused name. ... ok
test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Renaming to an existing directory raises OSError under Windows. ... ok
test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Replaces an existing file (does not work with `rename()` under ... ok
test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Can remove a directory. ... ok
test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Raises an exception if the target directory is not empty. ... ok
test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Raises an exception if the target does not exist. ... ok
test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_st_blocks (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Test that stat with follow_symlinks=False behaves like lstat. ... ok
test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)
Test that stat with follow_symlinks=False behaves like lstat. ... ok
test_stat_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_with_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_stat_with_unc_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_truncate_non_existing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_truncate_to_larger (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_truncate_with_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_umask (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_write_to_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok
test_write_to_read_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... skipped 'Pipe implementation may differ on other platforms'
test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Can use `rename()` to change filename case in a case-insensitive ... ok
test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
chdir should raise OSError if the target is not a directory. ... ok
test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_fsync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_link_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_listdir_impossible_without_read_permission (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_listdir_possible_without_exe_permission (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_lstat_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
makedirs can create a directory even if parent does not exist. ... ok
test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
makedirs uses the exist_ok argument ... ok
test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
mkdir raises exception if directory already exists. ... ok
test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
mkdir raises exception if name already exists as a file. ... ok
test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Test a rename of a directory. ... ok
test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Can rename a directory to an unused name. ... ok
test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_looping_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Test renaming when old and new names are the same. ... ok
test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Can rename a file to a used name under Unix. ... ok
test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Renaming a file to a used name raises OSError under Windows. ... ok
test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Renaming to an existing directory raises OSError under Windows. ... ok
test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Renaming to an existing directory changes the existing directory ... ok
test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Can rename a file to a name in a nonexistent dir. ... ok
test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Renaming to an existing directory raises OSError under Windows. ... ok
test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Replaces an existing file (does not work with `rename()` under ... ok
test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Can remove a directory. ... ok
test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)
Test that stat with follow_symlinks=False behaves like lstat. ... ok
test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok
test_chmod_st_ctime (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_incorrect_ns_argument_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_invalid_times_arg_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_no_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_sets_current_time_if_args_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_sets_specified_time (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_sets_specified_time_in_ns (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_utime_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok
test_base_dirpath (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok
test_walk_bottom_up (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)
Walk up ordering is correct. ... ok
test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)
Calls onerror with correct errno when walking ... ok
test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)
Calls onerror with correct errno when walking non-directory. ... ok
test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok
test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok
test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok
test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)
Raises an exception when attempting to walk ... ok
test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)
Raises an exception when attempting to walk a non-directory. ... ok
test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)
Caller can modify list of directories to visit while walking. ... ok
test_walk_top_down (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)
Walk down ordering is correct. ... ok
test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_getgid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_getuid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok
test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'Windows specific behavior'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok
test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'Windows specific behavior'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_inode (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_is_link (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_isdir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_isfile (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_path_like (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_paths (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok
test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... skipped 'Windows specific behavior'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_inode (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_is_link (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_isdir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_isfile (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_path_like (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_paths (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirTest) ... skipped 'Windows specific behavior'
test_access (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_chown (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_link_dst_fd (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_link_src_fd (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_lstat (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_mkdir (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_mknod (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_open (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_remove (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_rename_dst_fd (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_rename_src_fd (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_replace_dst_fd (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_replace_src_fd (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_stat (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_unlink (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
test_utime (pyfakefs.tests.fake_os_test.RealOsModuleDirFdTest) ... skipped 'Only tests fake FS'
testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_devnull_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_devnull_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'
test_open_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_create (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_create_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_create_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_create_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_read_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_truncate (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_write_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_read_only_read_after_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_sendfile_no_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_sendfile_offset_none (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_sendfile_twice (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_sendfile_with_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_temp_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'
test_write_devnull (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_write_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'
test_access400 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_access600 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_access700 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_access_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_access_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_backwards_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
chdir into '..' should behave appropriately. ... skipped 'Only tests fake FS'
test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_capabilities (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Make sure that the fake capabilities are the same as the real ones. ... skipped 'Only tests fake FS'
test_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
chdir should work on a directory. ... skipped 'Only tests fake FS'
test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)
chdir should raise OSError if the target is not a directory. ... skipped 'Only tests fake FS'
test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)
chdir should raise OSError if the target does not exist. ... skipped 'Only tests fake FS'
test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chmod_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chmod_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chown_bad_arguments (pyfakefs.tests.fake_os_test.RealOsModuleTest)
os.chown() with bad args (Issue #30) ... skipped 'Only tests fake FS'
test_chown_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chown_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_classify_directory_contents (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Directory classification should work correctly. ... skipped 'Only tests fake FS'
test_closed_file_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_consecutive_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Consecutive relative chdir calls should work. ... skipped 'Only tests fake FS'
test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_dup (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_dup2_uses_existing_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_dup2_with_new_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_dup_uses_freed_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_exists_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fail_add_entry_to_readonly_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fdatasync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fdopen_twice (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fstat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fsync_pass_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fsync_pass_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_ftruncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_get_cwd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lchmod (pyfakefs.tests.fake_os_test.RealOsModuleTest)
lchmod shall behave like chmod with follow_symlinks=True. ... skipped 'Only tests fake FS'
test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_bogus (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_count1 (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Test that hard link counts are updated correctly. ... skipped 'Only tests fake FS'
test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_follow_symlink_not_supported_inPypy (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'follow_symlinks only not supported in PyPi'
test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_non_existent_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_link_update (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_listdir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_listdir_current (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_listdir_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_size_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_size_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest)
makedirs can create a directory even if parent does not exist. ... skipped 'Only tests fake FS'
test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTest)
makedirs uses the exist_ok argument ... skipped 'Only tests fake FS'
test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.RealOsModuleTest)
makedirs raises exception if access denied. ... skipped 'Only tests fake FS'
test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)
makedirs creates a directories with umask applied. ... skipped 'Only tests fake FS'
test_makedirs_with_relative_paths (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir can create a relative directory. ... skipped 'Only tests fake FS'
test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if directory already exists. ... skipped 'Only tests fake FS'
test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if creating directory named ''. ... skipped 'Only tests fake FS'
test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if name already exists as a file. ... skipped 'Only tests fake FS'
test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if parent directory does not exist. ... skipped 'Only tests fake FS'
test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if parent is read only. ... skipped 'Only tests fake FS'
test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Only tests fake FS'
test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Only tests fake FS'
test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Only tests fake FS'
test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Only tests fake FS'
test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir creates a directory with umask applied. ... skipped 'Only tests fake FS'
test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir can create a directory named with a trailing slash. ... skipped 'Only tests fake FS'
test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_mknod_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)
mkdir creates a device with umask applied. ... skipped 'Only tests fake FS'
test_nlink_for_directories (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_fd_read_mode_for_ro_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_fd_write_mode_for_ro_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_nofollow_symlink_as_parent_works (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_nofollow_symlink_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_open_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)
open creates a file with umask applied. ... skipped 'Only tests fake FS'
test_open_with_o_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_read_write_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dir_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_removedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Raises exception if asked to remove '/' as part of a ... skipped 'Only tests fake FS'
test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Raises exception if asked to remove '/'. ... skipped 'Only tests fake FS'
test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)
removedirs works on directory names with trailing slashes. ... skipped 'Only tests fake FS'
test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Test a rename of a directory. ... skipped 'Only tests fake FS'
test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Can rename a directory to an unused name. ... skipped 'Only tests fake FS'
test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_empty_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Test a rename of an empty directory. ... skipped 'Only tests fake FS'
test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Can't rename a file that doesn't exist. ... skipped 'Only tests fake FS'
test_rename_preserves_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Test if rename preserves mtime. ... skipped 'Only tests fake FS'
test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Test renaming when old and new names are the same. ... skipped 'Only tests fake FS'
test_rename_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Renaming to another filesystem device raises OSError. ... skipped 'Only tests fake FS'
test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Can rename a file to a used name under Unix. ... skipped 'Only tests fake FS'
test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Renaming a file to a used name raises OSError under Windows. ... skipped 'Only tests fake FS'
test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'
test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'
test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'
test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Can rename a file to a name in a nonexistent dir. ... skipped 'Only tests fake FS'
test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Can rename a file to an unused name. ... skipped 'Only tests fake FS'
test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'
test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Replaces an existing file (does not work with `rename()` under ... skipped 'Only tests fake FS'
test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Can remove a directory. ... skipped 'Only tests fake FS'
test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Raises an exception if the target directory is not empty. ... skipped 'Only tests fake FS'
test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Raises an exception if the target does not exist. ... skipped 'Only tests fake FS'
test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_st_blocks (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'
test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)
Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'
test_stat_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_with_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_stat_with_unc_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_truncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_truncate_non_existing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_truncate_to_larger (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_truncate_with_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_umask (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_write_to_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'
test_write_to_read_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Pipe implementation may differ on other platforms'
test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Can use `rename()` to change filename case in a case-insensitive ... skipped 'Only tests fake FS'
test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
chdir should raise OSError if the target is not a directory. ... skipped 'Only tests fake FS'
test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_fsync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_link_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_listdir_impossible_without_read_permission (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_listdir_possible_without_exe_permission (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_lstat_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
makedirs can create a directory even if parent does not exist. ... skipped 'Only tests fake FS'
test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
makedirs uses the exist_ok argument ... skipped 'Only tests fake FS'
test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
mkdir raises exception if directory already exists. ... skipped 'Only tests fake FS'
test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
mkdir raises exception if name already exists as a file. ... skipped 'Only tests fake FS'
test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Test a rename of a directory. ... skipped 'Only tests fake FS'
test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Can rename a directory to an unused name. ... skipped 'Only tests fake FS'
test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_looping_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Test renaming when old and new names are the same. ... skipped 'Only tests fake FS'
test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Can rename a file to a used name under Unix. ... skipped 'Only tests fake FS'
test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Renaming a file to a used name raises OSError under Windows. ... skipped 'Only tests fake FS'
test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'
test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'
test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Can rename a file to a name in a nonexistent dir. ... skipped 'Only tests fake FS'
test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'
test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Replaces an existing file (does not work with `rename()` under ... skipped 'Only tests fake FS'
test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Can remove a directory. ... skipped 'Only tests fake FS'
test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)
Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'
test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'
test_base_dirpath (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'
test_walk_bottom_up (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)
Walk up ordering is correct. ... skipped 'Only tests fake FS'
test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)
Calls onerror with correct errno when walking ... skipped 'Only tests fake FS'
test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)
Calls onerror with correct errno when walking non-directory. ... skipped 'Only tests fake FS'
test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'
test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'
test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'
test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)
Raises an exception when attempting to walk ... skipped 'Only tests fake FS'
test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)
Raises an exception when attempting to walk a non-directory. ... skipped 'Only tests fake FS'
test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)
Caller can modify list of directories to visit while walking. ... skipped 'Only tests fake FS'
test_walk_top_down (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)
Walk down ordering is correct. ... skipped 'Only tests fake FS'
test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_getgid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_getuid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_inode (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_paths (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'
test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Windows specific behavior'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_inode (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_paths (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'
test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Windows specific behavior'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_inode (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_is_link (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_isdir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_isfile (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_path_like (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_paths (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'
test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Windows specific behavior'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_inode (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_is_link (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_isdir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_isfile (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_path_like (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_paths (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'
test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Windows specific behavior'
test_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok
test_file_size_not_reset_after_close (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok
test_file_size_truncation (pyfakefs.tests.fake_os_test.StatPropagationTest)
test that file size gets updated via open(). ... ok
test_file_size_updated_via_close (pyfakefs.tests.fake_os_test.StatPropagationTest)
test that file size gets updated via close(). ... ok
test_file_size_updated_via_flush (pyfakefs.tests.fake_os_test.StatPropagationTest)
test that file size gets updated via flush(). ... ok
test_large_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok
test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok
test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok
test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok
test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok
test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok
test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR)
When an existing file is opened with 'r' mode, read, flushed and ... ok
test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok
test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok
test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok
test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok
test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus)
When an existing file is opened with 'w+' mode and is then written to, ... ok
test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok
test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'
test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'
test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'
test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'
test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'
test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR)
When an existing file is opened with 'r' mode, read, flushed and ... skipped 'Only tests fake FS'
test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'
test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'
test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'
test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'
test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'
test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'
test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'
test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus)
When an existing file is opened with 'w+' mode and is then written to, ... skipped 'Only tests fake FS'
test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'
test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'
test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'
test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'
test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_default_buffering_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_no_buffering (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok
test_binary_readline (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok
test_read_default_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok
test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok
test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok
test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok
test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... skipped 'U flag still supported'
test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok
test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok
test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok
test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok
test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok
test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok
test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok
test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_append_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_byte_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_byte_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_can_read_from_block_device (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_closed (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_create_file_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_create_file_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_delete_on_close (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_exclusive_create_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_follow_link_read (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_follow_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_getsize_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_intertwined_read_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_iterate_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_next_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_directory_error (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_flags100 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_flags200 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_flags400 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_flags700 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_io_errors (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_no_parent_dir (pyfakefs.tests.fake_open_test.FakeFileOpenTest)
Expect raise when opening a file in a missing directory. ... ok
test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_valid_args (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_valid_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_with_append_flag (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_with_wplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_overwrite_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_read_with_rplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_seek_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_st_size_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_truncate_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_unicode_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_unicode_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_utf16_text (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_write_devnull (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_write_str_read_bytes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok
test_no_opener_with_read (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_read (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok
test_byte_contents_open_code (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... ok
test_invalid_path (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... ok
test_open_code_fd_pypy (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'Different behavior in PyPy'
test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... ok
test_invalid_path (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... ok
test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... ok
test_append_existing_file (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok
test_append_existing_file (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'
test_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok
test_write_and_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok
test_write_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok
test_closefd_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok
test_open_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok
test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'
test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'
test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'
test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'
test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'
test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok
test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok
test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok
test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok
test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok
test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest) ... ok
test_read_text (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest)
Test that text mode flag is ignored ... ok
test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_default_buffering_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_no_buffering (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'
test_binary_readline (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'
test_read_default_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'
test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'
test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'
test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'
test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'U flag still supported'
test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'
test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'
test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'
test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'
test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'
test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'
test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'
test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_append_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_byte_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_byte_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_can_read_from_block_device (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_closed (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_create_file_with_append (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_create_file_with_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_delete_on_close (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_exclusive_create_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_follow_link_read (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_follow_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_getsize_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_intertwined_read_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_iterate_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_next_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_directory_error (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_flags100 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_flags200 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_flags400 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_flags700 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_io_errors (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_no_parent_dir (pyfakefs.tests.fake_open_test.RealFileOpenTest)
Expect raise when opening a file in a missing directory. ... skipped 'Only tests fake FS'
test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_valid_args (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_valid_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_with_append_flag (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_with_wplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_overwrite_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_read_with_rplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_seek_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_st_size_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_truncate_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_unicode_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_unicode_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_utf16_text (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_write_devnull (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_write_str_read_bytes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'
test_no_opener_with_read (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_append (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_read (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'
test_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'
test_write_and_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'
test_write_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'
test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest) ... skipped 'Only tests fake FS'
test_read_text (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest)
Test that text mode flag is ignored ... skipped 'Only tests fake FS'
test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'Only tests fake FS'
test_invalid_path (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'Only tests fake FS'
test_open_code_fd_pypy (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'Different behavior in PyPy'
test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'Only tests fake FS'
test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_link_to_absolute_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_link_to_parent_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_link_to_sub_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_link_within_same_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_multiple_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_normal_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_read_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_too_many_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_utime_link (pyfakefs.tests.fake_open_test.RealResolvePathTest)
os.utime() and os.stat() via symbolic link (issue #49) ... skipped 'Only tests fake FS'
test_write_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'
test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'Only tests fake FS'
test_invalid_path (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'Only tests fake FS'
test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'Only tests fake FS'
test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_link_to_absolute_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_link_to_parent_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_link_to_sub_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_link_within_same_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_multiple_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_normal_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_read_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_too_many_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_utime_link (pyfakefs.tests.fake_open_test.ResolvePathTest)
os.utime() and os.stat() via symbolic link (issue #49) ... ok
test_write_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok
test_open_in_skipped_module (pyfakefs.tests.fake_open_test.SkipOpenTest) ... ok
test_mkdtemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok
test_mkstemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok
test_mkstemp_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest)
test tempfile.mkstemp(dir=). ... ok
test_named_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok
test_named_temporary_file_no_delete (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok
test_temporary_directory (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok
test_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok
test_temporay_file_with_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok
test_absolute_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_bad_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_broken_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_broken_sym_link (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_broken_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_builtin_open_modes (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_empty_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_file_in_a_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_file_with_binary_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_file_with_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_getmtime_nonexistant_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_hard_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_hard_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_isabs (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_link_to_folder_after_chdir (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_none_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_path_through_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_relative_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_root_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_sym_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_sym_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_sym_link_to_sibling_directory_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok
test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok
test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok
test_both (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok
test_exec_module_in_fake_fs (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok
test_run_module (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok
test_run_path (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok
test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.FailedPatchingTest) ... expected failure
test_non_root_behavior (pyfakefs.tests.fake_filesystem_unittest_test.NoRootUserTest)
Check that fs behaves as non-root user regardless of actual ... ok
test_fake_path_exists1 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_fake_path_exists2 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_fake_path_exists3 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_fake_path_exists5 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_fake_path_exists6 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_fake_path_exists7 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_open_fails (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_open_patched_in_module_ending_with_io (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok
test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTest) ... ok
test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... ok
test_system_stat_failing (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... expected failure
test_cwd (pyfakefs.tests.fake_filesystem_unittest_test.PathlibTest)
Make sure fake file system is used for os in pathlib ... ok
test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok
test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok
test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok
test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok
test_pause_resume_fs (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok
test_pause_resume_fs_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok
test_pause_resume_without_patcher (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok
test_is_absolute (pyfakefs.tests.fake_filesystem_unittest_test.TestAbsolutePathOnWindows) ... skipped 'Windows-specific behavior'
test_attributes (pyfakefs.tests.fake_filesystem_unittest_test.TestAttributesWithFakeModuleNames)
Attributes of module under test are not patched ... ok
test_using_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... ok
test_using_fs_functions (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... ok
test_no_deprecation_warning (pyfakefs.tests.fake_filesystem_unittest_test.TestDeprecationSuppression)
Ensures that deprecation warnings are suppressed during module ... ok
test_file_copied (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... ok
test_file_copied_again (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... ok
test_drivelike_path (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok
test_linux (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok
test_macos (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok
test_real_file_with_home (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS)
Regression test for #558 ... ok
test_tempfile_access (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... skipped 'Windows-specific test'
test_windows (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok
test_context_decorator (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok
test_context_manager (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok
test_argument_order1 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok
test_argument_order2 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok
test_fake_path_exists4 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok
test_path_exists_as_default_arg_in_function (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok
test_path_exists_as_default_arg_in_method (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok
test_import_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_exists_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_function_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_function_from_os_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_function_from_os_path_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_io_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_isdir_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_isfile_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_islink_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_path_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports)
Make sure `from os import path` patches `path`. ... ok
test_import_path_from_pathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_import_pathlib_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok
test_own_path_module (pyfakefs.tests.fake_filesystem_unittest_test.TestPathNotPatchedIfNotOsPath) ... ok
test_test_case_type (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCase) ... ok
test_set_up_pyfakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCaseMixin) ... ok
test_fakepathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest) ... ok
test_glob (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)
Fake glob module is bound ... ok
test_io_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)
Fake io module is bound ... ok
test_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)
Fake `open()` function is bound ... ok
test_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)
Fake os module is bound ... ok
test_shutil (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)
Fake shutil module is bound ... ok
test_a (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok
test_b (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok
test_tempdir_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok
test_tmp_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok
test_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok
test_value (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok
test_write_tmp_linux (pyfakefs.tests.fake_filesystem_unittest_test.TestTempPathCreation) ... ok
test_write_tmp_macos (pyfakefs.tests.fake_filesystem_unittest_test.TestTempPathCreation) ... ok
test_write_tmp_windows (pyfakefs.tests.fake_filesystem_unittest_test.TestTempPathCreation) ... ok
test_create_file (pyfakefs.tests.example_test.TestExample)
Test example.create_file() which uses `open()` ... ok
test_delete_file (pyfakefs.tests.example_test.TestExample)
Test example.delete_file() which uses `os.remove()`. ... ok
test_file_exists (pyfakefs.tests.example_test.TestExample)
Test example.path_exists() which uses `os.path.exists()`. ... ok
test_get_globs (pyfakefs.tests.example_test.TestExample)
Test example.get_glob(). ... ok
test_os_scandir (pyfakefs.tests.example_test.TestExample)
Test example.scandir() which uses `os.scandir()`. ... ok
test_real_file_access (pyfakefs.tests.example_test.TestExample)
Test `example.file_contents()` for a real file after adding it using ... ok
test_rm_tree (pyfakefs.tests.example_test.TestExample)
Test example.rm_tree() using `shutil.rmtree()`. ... ok
test_scandir_scandir (pyfakefs.tests.example_test.TestExample)
Test example.scandir() which uses `scandir.scandir()`. ... skipped 'Testing only if scandir module is installed'
example (pyfakefs.tests)
Doctest: pyfakefs.tests.example ... ok
create_file (pyfakefs.tests.example)
Doctest: pyfakefs.tests.example.create_file ... ok
delete_file (pyfakefs.tests.example)
Doctest: pyfakefs.tests.example.delete_file ... ok
get_glob (pyfakefs.tests.example)
Doctest: pyfakefs.tests.example.get_glob ... ok
path_exists (pyfakefs.tests.example)
Doctest: pyfakefs.tests.example.path_exists ... ok
test_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_smart_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_stubout_class_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_stubout_class_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_stubout_method_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_stubout_method_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_stubout_module_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_stubout_module_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_stubout_submodule_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok
test_os_import_as_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok
test_os_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok
test_os_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok
test_pathlib_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok
test_shutil_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok
test_is_file_for_unreadable_dir_windows (pyfakefs.tests.fake_pathlib_test.FakeFilesystemChmodTest) ... skipped 'Windows specific test'
test_add_existing_real_directory_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok
test_add_existing_real_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok
test_create_dir_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok
test_create_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok
test_create_symlink_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok
test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'
test_cwd (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_expanduser_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_expanduser_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific test'
test_home_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_home_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific test'
test_is_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_is_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_is_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_iterdir_and_glob_without_exe_permission (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_iterdir_impossible_without_read_permission (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_lchmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_lstat_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_lstat_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'
test_resolve (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)
Tests for collapsing path during initialization. ... ok
test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)
Basic initialization tests - taken from ... ok
test_initialization_type (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)
Make sure tests for class type will work ... ok
test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok
test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... skipped 'Windows specific behavior'
test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok
test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)
Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'
test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)
Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'
test_is_absolute (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'
test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'
test_posix_pure_path_parsing (pyfakefs.tests.fake_pathlib_test.FakePathlibModulePurePathTest)
Verify faked pure POSIX paths use filesystem-independent separators. ... ok
test_windows_pure_path_parsing (pyfakefs.tests.fake_pathlib_test.FakePathlibModulePurePathTest)
Verify faked pure Windows paths use filesystem-independent separators. ... ok
test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_glob (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific test'
test_hardlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'
test_is_junction (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'
test_iterdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_link_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_mkdir_with_automount_drive (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific behavior'
test_mkdir_with_automount_unc_path (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific behavior'
test_open (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_read_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_read_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_samefile (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_symlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_touch_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_unlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'
test_is_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'Windows specific behavior'
test_joinpath (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_match (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_with_name (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_with_suffix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok
test_abspath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_access (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_chdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getatime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getctime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getmtime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getsize (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isabs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isfile (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_islink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_ismount (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_join (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_lexists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_link (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_listdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_makedirs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_normcase (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_normpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_realpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_relpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_remove (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_scandir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_split (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_splitdrive (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'
test_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_truncate (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_utime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_walk (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest)
Regression test for #915 - walk results shall be strings. ... ok
test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'
test_cwd (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_expanduser_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_expanduser_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Windows specific test'
test_home_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_home_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Windows specific test'
test_is_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_is_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_is_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_iterdir_and_glob_without_exe_permission (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_iterdir_impossible_without_read_permission (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_lchmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_lstat_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_lstat_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'
test_resolve (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'
test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)
Tests for collapsing path during initialization. ... skipped 'Only tests fake FS'
test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)
Basic initialization tests - taken from ... skipped 'Only tests fake FS'
test_initialization_type (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)
Make sure tests for class type will work ... skipped 'Only tests fake FS'
test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Only tests fake FS'
test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Windows specific behavior'
test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Only tests fake FS'
test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)
Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'
test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)
Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'
test_is_absolute (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'
test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'
test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_glob (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Windows specific test'
test_hardlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'
test_is_junction (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'
test_iterdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_link_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_mkdir_with_automount_drive (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Windows specific behavior'
test_mkdir_with_automount_unc_path (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Windows specific behavior'
test_open (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_read_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_read_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_samefile (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_symlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_touch_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_unlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_write_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_write_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'
test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'
test_is_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Windows specific behavior'
test_joinpath (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_match (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_with_name (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_with_suffix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'
test_abspath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_access (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_chdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_getatime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_getctime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_getmtime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_getsize (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_isabs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_isdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_isfile (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_islink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_ismount (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_join (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_lexists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_link (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_listdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_makedirs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_normcase (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_normpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_realpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_relpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_remove (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_scandir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_split (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_splitdrive (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'
test_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_truncate (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_utime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'
test_walk (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest)
Regression test for #915 - walk results shall be strings. ... skipped 'Only tests fake FS'
test_open_in_skipped_module (pyfakefs.tests.fake_pathlib_test.SkipPathlibTest) ... ok
test_read_bytes_in_skipped_module (pyfakefs.tests.fake_pathlib_test.SkipPathlibTest) ... ok
test_read_text_in_skipped_module (pyfakefs.tests.fake_pathlib_test.SkipPathlibTest) ... ok
test_pathlib2_warning (pyfakefs.tests.fake_legacy_modules_test.DeprecationWarningTest) ... skipped 'The pathlib2 package is not installed'
test_scandir_warning (pyfakefs.tests.fake_legacy_modules_test.DeprecationWarningTest) ... skipped 'The scandir package is not installed'
test_chmod (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_chmod_no_followsymlinks (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_cwd (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_exists (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_expanduser_posix (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_expanduser_windows (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_home_posix (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_home_windows (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_is_dir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_is_file (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_is_symlink (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_iterdir_and_glob_without_exe_permission (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_iterdir_impossible_without_read_permission (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_lchmod (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_lstat_posix (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_lstat_windows (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_resolve (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_resolve_nonexisting_file (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_stat (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_init_collapse (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2InitializationTest)
Tests for collapsing path during initialization. ... skipped 'The pathlib2 package is not installed'
test_init_with_segments (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2InitializationTest)
Basic initialization tests - taken from ... skipped 'The pathlib2 package is not installed'
test_initialization_type (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2InitializationTest)
Make sure tests for class type will work ... skipped 'The pathlib2 package is not installed'
test_is_absolute_posix (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2InitializationTest) ... skipped 'The pathlib2 package is not installed'
test_is_absolute_windows (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2InitializationTest) ... skipped 'The pathlib2 package is not installed'
test_path_parts (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2InitializationTest) ... skipped 'The pathlib2 package is not installed'
test_exists (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_glob (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_glob_case_posix (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_glob_case_windows (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_hardlink_to (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_is_junction (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_iterdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_link_to (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_mkdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_mkdir_exist_ok (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_mkdir_with_automount_drive (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_mkdir_with_automount_unc_path (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_open (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_read_bytes (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_read_text (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_read_text_with_encoding (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_readlink (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_rename (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_replace (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_rmdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_samefile (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_symlink_to (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_touch_existing (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_touch_non_existing (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_unlink (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_write_bytes (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_write_text (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_write_text_with_encoding (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_write_with_newline_arg (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2PathFileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_abspath (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_access (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_changed_owner_and_group (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_chdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_chmod (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_exists (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_expanduser (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_getatime (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_getctime (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_getmtime (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_getsize (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_isabs (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_isdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_isfile (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_isfile_not_readable (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_islink (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_ismount (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_join (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_lexists (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_link (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_listdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_makedirs (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_mkdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_normcase (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_normpath (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_owner_and_group_posix (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_owner_and_group_windows (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_readlink (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_readlink_bytes (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_realpath (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_relpath (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_remove (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_rename (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_replace (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_rmdir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_scandir (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_split (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_splitdrive (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_stat (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_stat_follow_symlinks (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_symlink (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_truncate (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_utime (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_walk (pyfakefs.tests.fake_legacy_modules_test.FakePathlib2UsageInOsFunctionsTest)
Regression test for #915 - walk results shall be strings. ... skipped 'The pathlib2 package is not installed'
test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'
test_cwd (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_expanduser_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_expanduser_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific test'
test_home_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_home_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific test'
test_is_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_is_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_is_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_iterdir_and_glob_without_exe_permission (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_iterdir_impossible_without_read_permission (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_lchmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_lstat_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_lstat_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'
test_resolve (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok
test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)
Tests for collapsing path during initialization. ... ok
test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)
Basic initialization tests - taken from ... ok
test_initialization_type (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)
Make sure tests for class type will work ... ok
test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok
test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... skipped 'Windows specific behavior'
test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok
test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_glob (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific test'
test_hardlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'
test_is_junction (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'
test_iterdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_link_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_mkdir_with_automount_drive (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific behavior'
test_mkdir_with_automount_unc_path (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific behavior'
test_open (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_read_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_read_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_samefile (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_symlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_touch_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_unlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok
test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'
test_abspath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_access (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_chdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getatime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getctime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getmtime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_getsize (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isabs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isfile (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_islink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_ismount (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_join (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_lexists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_link (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_listdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_makedirs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_normcase (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_normpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_realpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_relpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_remove (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_scandir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_split (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_splitdrive (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'
test_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_truncate (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_utime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok
test_walk (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest)
Regression test for #915 - walk results shall be strings. ... ok
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_inode (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_is_link (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_isdir (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_isfile (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_non_existing_dir (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_path_like (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_path_links_not_resolved (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_paths (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_scandir_stat_nlink (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_scandir_with_fd (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_stat_ino_dev (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_stat_posix (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_stat_windows (pyfakefs.tests.fake_legacy_modules_test.FakeScandirPackageTest) ... skipped 'The scandir package is not installed'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_inode (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_is_link (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_isdir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_isfile (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_path_like (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_paths (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok
test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirTest) ... skipped 'Windows specific behavior'
test_chmod (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_chmod_no_followsymlinks (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_cwd (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_exists (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_expanduser_posix (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_expanduser_windows (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_home_posix (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_home_windows (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_is_dir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_is_file (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_is_symlink (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_iterdir_and_glob_without_exe_permission (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_iterdir_impossible_without_read_permission (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_lchmod (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_lstat_posix (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_lstat_windows (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_resolve (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_resolve_nonexisting_file (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_stat (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2FileObjectPropertyTest) ... skipped 'The pathlib2 package is not installed'
test_init_collapse (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2InitializationTest)
Tests for collapsing path during initialization. ... skipped 'The pathlib2 package is not installed'
test_init_with_segments (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2InitializationTest)
Basic initialization tests - taken from ... skipped 'The pathlib2 package is not installed'
test_initialization_type (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2InitializationTest)
Make sure tests for class type will work ... skipped 'The pathlib2 package is not installed'
test_is_absolute_posix (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2InitializationTest) ... skipped 'The pathlib2 package is not installed'
test_is_absolute_windows (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2InitializationTest) ... skipped 'The pathlib2 package is not installed'
test_path_parts (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2InitializationTest) ... skipped 'The pathlib2 package is not installed'
test_abspath (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_access (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_changed_owner_and_group (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_chdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_chmod (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_exists (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_expanduser (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_getatime (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_getctime (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_getmtime (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_getsize (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_isabs (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_isdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_isfile (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_isfile_not_readable (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_islink (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_ismount (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_join (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_lexists (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_link (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_listdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_makedirs (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_mkdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_normcase (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_normpath (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_owner_and_group_posix (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_owner_and_group_windows (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_readlink (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_readlink_bytes (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_realpath (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_relpath (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_remove (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_rename (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_replace (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_rmdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_scandir (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_split (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_splitdrive (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_stat (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_stat_follow_symlinks (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_symlink (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_truncate (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_utime (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest) ... skipped 'The pathlib2 package is not installed'
test_walk (pyfakefs.tests.fake_legacy_modules_test.RealPathlib2UsageInOsFunctionsTest)
Regression test for #915 - walk results shall be strings. ... skipped 'The pathlib2 package is not installed'
test_exists (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_glob (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_glob_case_posix (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_glob_case_windows (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_hardlink_to (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_is_junction (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_iterdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_link_to (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_mkdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_mkdir_exist_ok (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_mkdir_with_automount_drive (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_mkdir_with_automount_unc_path (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_open (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_read_bytes (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_read_text (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_read_text_with_encoding (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_readlink (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_rename (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_replace (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_rmdir (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_samefile (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_symlink_to (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_touch_existing (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_touch_non_existing (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_unlink (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_write_bytes (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_write_text (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_write_text_with_encoding (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_write_with_newline_arg (pyfakefs.tests.fake_legacy_modules_test.RealPathlibPath2FileOperationTest) ... skipped 'The pathlib2 package is not installed'
test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_inode (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_is_link (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_isdir (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_isfile (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_non_existing_dir (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_path_like (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_path_links_not_resolved (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_paths (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_scandir_stat_nlink (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_scandir_with_fd (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_stat_ino_dev (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_stat_posix (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'
test_stat_windows (pyfakefs.tests.fake_legacy_modules_test.RealScandirPackageTest) ... skipped 'The scandir package is not installed'

----------------------------------------------------------------------
Ran 2567 tests

OK (skipped=1152, expected failures=2)
py$(PYV): commands[2]> python -m pytest pyfakefs/pytest_tests/pytest_plugin_test.py
============================= test session starts ==============================
platform sunos5 -- Python $(PYTHON_VERSION).X -- $(@D)/.tox/py$(PYV)/bin/python
cachedir: .tox/py$(PYV)/.pytest_cache
rootdir: $(@D)
configfile: pyproject.toml
collecting ... collected 9 items

pyfakefs/pytest_tests/pytest_plugin_test.py::test_fs_fixture PASSED
pyfakefs/pytest_tests/pytest_plugin_test.py::test_fs_fixture_alias PASSED
pyfakefs/pytest_tests/pytest_plugin_test.py::test_both_fixtures PASSED
pyfakefs/pytest_tests/pytest_plugin_test.py::test_pause_resume PASSED
pyfakefs/pytest_tests/pytest_plugin_test.py::test_pause_resume_contextmanager PASSED
pyfakefs/pytest_tests/pytest_plugin_test.py::test_use_own_io_module PASSED
pyfakefs/pytest_tests/pytest_plugin_test.py::test_switch_to_windows PASSED
pyfakefs/pytest_tests/pytest_plugin_test.py::test_switch_to_linux PASSED
pyfakefs/pytest_tests/pytest_plugin_test.py::test_switch_to_macos PASSED

======== 9 passed ========
  py$(PYV): OK
  congratulations :)
