============================= test session starts ==============================
platform sunos5 -- Python 3.5.9, pytest-2.9.1, py-1.4.31, pluggy-0.3.1
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('$(SOURCE_DIR)/.hypothesis/examples')
rootdir: $(SOURCE_DIR), inifile: 
collected 260 items

netaddr/tests/core/test_compat.py .s......
netaddr/tests/core/test_pubsub.py .
netaddr/tests/eui/test_eui.py ..s....................
netaddr/tests/eui/test_ieee_parsers.py ss..
netaddr/tests/ip/test_cidr_v4.py .........
netaddr/tests/ip/test_cidr_v6.py ....
netaddr/tests/ip/test_dns.py ..
netaddr/tests/ip/test_ip_categories.py ........
netaddr/tests/ip/test_ip_comparisons.py ..
netaddr/tests/ip/test_ip_globs.py .......
netaddr/tests/ip/test_ip_ranges.py ................
netaddr/tests/ip/test_ip_rfc1924.py .
netaddr/tests/ip/test_ip_sets.py ............................
netaddr/tests/ip/test_ip_v4.py ...............................s.......
netaddr/tests/ip/test_ip_v4_v6_conversions.py .....
netaddr/tests/ip/test_ip_v6.py .............
netaddr/tests/ip/test_network_ops.py ...
netaddr/tests/ip/test_nmap.py ......
netaddr/tests/ip/test_old_specs.py ...
netaddr/tests/ip/test_platform_osx.py sF
netaddr/tests/ip/test_socket_module_fallback.py .................
netaddr/tests/strategy/test_eui48_strategy.py .s..
netaddr/tests/strategy/test_ipv4_strategy.py .s...
netaddr/tests/strategy/test_ipv6_strategy.py .s................................................

=================================== FAILURES ===================================
__________________________ test_ip_behaviour_non_osx ___________________________

    @pytest.mark.skipif('sys.platform == "darwin"')
    def test_ip_behaviour_non_osx():
        assert iprange_to_cidrs('::1', '::255.255.255.254') == [
            IPNetwork('::1/128'),
            IPNetwork('::2/127'),
            IPNetwork('::4/126'),
            IPNetwork('::8/125'),
            IPNetwork('::10/124'),
            IPNetwork('::20/123'),
            IPNetwork('::40/122'),
            IPNetwork('::80/121'),
            IPNetwork('::100/120'),
            IPNetwork('::200/119'),
            IPNetwork('::400/118'),
            IPNetwork('::800/117'),
            IPNetwork('::1000/116'),
            IPNetwork('::2000/115'),
            IPNetwork('::4000/114'),
            IPNetwork('::8000/113'),
            IPNetwork('::0.1.0.0/112'),
            IPNetwork('::0.2.0.0/111'),
            IPNetwork('::0.4.0.0/110'),
            IPNetwork('::0.8.0.0/109'),
            IPNetwork('::0.16.0.0/108'),
            IPNetwork('::0.32.0.0/107'),
            IPNetwork('::0.64.0.0/106'),
            IPNetwork('::0.128.0.0/105'),
            IPNetwork('::1.0.0.0/104'),
            IPNetwork('::2.0.0.0/103'),
            IPNetwork('::4.0.0.0/102'),
            IPNetwork('::8.0.0.0/101'),
            IPNetwork('::16.0.0.0/100'),
            IPNetwork('::32.0.0.0/99'),
            IPNetwork('::64.0.0.0/98'),
            IPNetwork('::128.0.0.0/98'),
            IPNetwork('::192.0.0.0/99'),
            IPNetwork('::224.0.0.0/100'),
            IPNetwork('::240.0.0.0/101'),
            IPNetwork('::248.0.0.0/102'),
            IPNetwork('::252.0.0.0/103'),
            IPNetwork('::254.0.0.0/104'),
            IPNetwork('::255.0.0.0/105'),
            IPNetwork('::255.128.0.0/106'),
            IPNetwork('::255.192.0.0/107'),
            IPNetwork('::255.224.0.0/108'),
            IPNetwork('::255.240.0.0/109'),
            IPNetwork('::255.248.0.0/110'),
            IPNetwork('::255.252.0.0/111'),
            IPNetwork('::255.254.0.0/112'),
            IPNetwork('::255.255.0.0/113'),
            IPNetwork('::255.255.128.0/114'),
            IPNetwork('::255.255.192.0/115'),
            IPNetwork('::255.255.224.0/116'),
            IPNetwork('::255.255.240.0/117'),
            IPNetwork('::255.255.248.0/118'),
            IPNetwork('::255.255.252.0/119'),
            IPNetwork('::255.255.254.0/120'),
            IPNetwork('::255.255.255.0/121'),
            IPNetwork('::255.255.255.128/122'),
            IPNetwork('::255.255.255.192/123'),
            IPNetwork('::255.255.255.224/124'),
            IPNetwork('::255.255.255.240/125'),
            IPNetwork('::255.255.255.248/126'),
            IPNetwork('::255.255.255.252/127'),
            IPNetwork('::255.255.255.254/128'),
        ]
    
        #   Sadly, inet_pton cannot help us here ...
        with pytest.raises(AddrFormatError):
>           IPAddress('010.000.000.001', flags=INET_PTON)
E           Failed: DID NOT RAISE

netaddr/tests/ip/test_platform_osx.py:148: Failed
=============== 1 failed, 250 passed, 9 skipped ================
