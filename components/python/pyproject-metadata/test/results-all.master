============================= test session starts ==============================
platform sunos5 -- Python $(PYTHON_VERSION).X -- $(PYTHON)
cachedir: .pytest_cache
rootdir: $(@D)
configfile: pyproject.toml
testpaths: tests
collecting ... collected 81 items

tests/test_rfc822.py::test_headers[items0-] PASSED
tests/test_rfc822.py::test_headers[items1-Foo: Bar\n] PASSED
tests/test_rfc822.py::test_headers[items2-            Foo: Bar\n            Foo2: Bar2\n            ] PASSED
tests/test_rfc822.py::test_headers[items3-] PASSED
tests/test_rfc822.py::test_headers[items4-            ItemA: ValueA\n            ItemB: ValueB\n            ItemC: ValueC\n            ] PASSED
tests/test_rfc822.py::test_headers[items5-            ItemB: ValueB\n            ItemC: ValueC\n            ItemA: ValueA\n            ] PASSED
tests/test_rfc822.py::test_headers[items6-            ItemA: ValueA1\n            ItemA: ValueA2\n            ItemB: ValueB\n            ItemC: ValueC\n            ] PASSED
tests/test_rfc822.py::test_headers[items7-            ItemA: ValueA\n            ItemB: ValueB1\n                    ValueB2\n                    ValueB3\n            ItemC: ValueC\n            ] PASSED
tests/test_rfc822.py::test_body PASSED
tests/test_rfc822.py::test_convert_optional_dependencies PASSED
tests/test_rfc822.py::test_convert_author_email PASSED
tests/test_standard_metadata.py::test_load[-Section "project" missing in pyproject.toml] PASSED
tests/test_standard_metadata.py::test_load[[project]-Field "project.name" missing] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = true\n                version = '0.1.0'\n            -Field "project.name" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = true\n                version = '0.1.0'\n                dynamic = [\n                    'name',\n                ]\n            -Unsupported field "name" in "project.dynamic"] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = true\n            -Field "project.version" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n            -Field "project.version" missing and "version" not specified in "project.dynamic"] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                license = true\n            -Field "project.license" has an invalid type, expecting a dictionary of strings (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                license = {}\n            -Invalid "project.license" value, expecting either "file" or "text" (got "{}")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                license = { file = '...', text = '...' }\n            -Invalid "project.license" value, expecting either "file" or "text" (got "{'file': '...', 'text': '...'}")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                license = { made-up = ':(' }\n            -Unexpected field "project.license.made-up"] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                license = { file = true }\n            -Field "project.license.file" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                license = { text = true }\n            -Field "project.license.text" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                license = { file = 'this-file-does-not-exist' }\n            -License file not found ("this-file-does-not-exist")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                readme = true\n            -Field "project.readme" has an invalid type, expecting either, a string or dictionary of strings (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                readme = {}\n            -Invalid "project.readme" value, expecting either "file" or "text" (got "{}")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                readme = { file = '...', text = '...' }\n            -Invalid "project.readme" value, expecting either "file" or "text" (got "{'file': '...', 'text': '...'}")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                readme = { made-up = ':(' }\n            -Unexpected field "project.readme.made-up"] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                readme = { file = true }\n            -Field "project.readme.file" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                readme = { text = true }\n            -Field "project.readme.text" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                readme = { file = 'this-file-does-not-exist', content-type = '...' }\n            -Readme file not found ("this-file-does-not-exist")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                readme = { file = 'README.md' }\n            -Field "project.readme.content-type" missing] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                readme = { text = '...' }\n            -Field "project.readme.content-type" missing] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                description = true\n            -Field "project.description" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                dependencies = 'some string!'\n            -Field "project.dependencies" has an invalid type, expecting a list of strings (got "some string!")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                dependencies = [\n                    99,\n                ]\n            -Field "project.dependencies" contains item with invalid type, expecting a string (got "99")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                dependencies = [\n                    'definitely not a valid PEP 508 requirement!',\n                ]\n            -Field "project.dependencies" contains an invalid PEP 508 requirement string "definitely not a valid PEP 508 requirement!" ] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                optional-dependencies = true\n            -Field "project.optional-dependencies" has an invalid type, expecting a dictionary of PEP 508 requirement strings (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                [project.optional-dependencies]\n                test = 'some string!'\n            -Field "project.optional-dependencies.test" has an invalid type, expecting a dictionary PEP 508 requirement strings (got "some string!")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                [project.optional-dependencies]\n                test = [\n                    true,\n                ]\n            -Field "project.optional-dependencies.test" has an invalid type, expecting a PEP 508 requirement string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                [project.optional-dependencies]\n                test = [\n                    'definitely not a valid PEP 508 requirement!',\n                ]\n            -Field "project.optional-dependencies.test" contains an invalid PEP 508 requirement string "definitely not a valid PEP 508 requirement!" ] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                requires-python = true\n            -Field "project.requires-python" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                keywords = 'some string!'\n            -Field "project.keywords" has an invalid type, expecting a list of strings (got "some string!")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                keywords = [\n                    true,\n                ]\n            -Field "project.keywords" contains item with invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                authors = {}\n            -Field "project.authors" has an invalid type, expecting a list of dictionaries containing the "name" and/or "email" keys (got "{}")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                authors = [\n                    true,\n                ]\n            -Field "project.authors" has an invalid type, expecting a list of dictionaries containing the "name" and/or "email" keys (got "[True]")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                maintainers = {}\n            -Field "project.maintainers" has an invalid type, expecting a list of dictionaries containing the "name" and/or "email" keys (got "{}")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                maintainers = [\n                    10\n                ]\n            -Field "project.maintainers" has an invalid type, expecting a list of dictionaries containing the "name" and/or "email" keys (got "[10]")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                classifiers = 'some string!'\n            -Field "project.classifiers" has an invalid type, expecting a list of strings (got "some string!")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                classifiers = [\n                    true,\n                ]\n            -Field "project.classifiers" contains item with invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                [project.urls]\n                homepage = true\n            -Field "project.urls.homepage" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                [project.urls]\n                documentation = true\n            -Field "project.urls.documentation" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                [project.urls]\n                repository = true\n            -Field "project.urls.repository" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                [project.urls]\n                changelog = true\n            -Field "project.urls.changelog" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                scripts = []\n            -Field "project.scripts" has an invalid type, expecting a dictionary of strings (got "[]")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                gui-scripts = []\n            -Field "project.gui-scripts" has an invalid type, expecting a dictionary of strings (got "[]")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                entry-points = []\n            -Field "project.entry-points" has an invalid type, expecting a dictionary of entrypoint sections (got "[]")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                entry-points = { section = 'something' }\n            -Field "project.entry-points.section" has an invalid type, expecting a dictionary of entrypoints (got "something")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                [project.entry-points.section]\n                entrypoint = []\n            -Field "project.entry-points.section.entrypoint" has an invalid type, expecting a string (got "[]")] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = '.test'\n                version = '0.1.0'\n            -Invalid project name ".test". A valid name consists only of ASCII letters and numbers, period, underscore and hyphen. It must start and end with a letter or number] PASSED
tests/test_standard_metadata.py::test_load[\n                [project]\n                name = 'test'\n                version = '0.1.0'\n                [project.entry-points.bad-name]\n            -Field "project.entry-points" has an invalid value, expecting a name containing only alphanumeric, underscore, or dot characters (got "bad-name")] PASSED
tests/test_standard_metadata.py::test_value[False] PASSED
tests/test_standard_metadata.py::test_value[True] PASSED
tests/test_standard_metadata.py::test_read_license PASSED
tests/test_standard_metadata.py::test_readme_content_type[full-metadata-text/markdown] PASSED
tests/test_standard_metadata.py::test_readme_content_type[full-metadata2-text/x-rst] PASSED
tests/test_standard_metadata.py::test_readme_content_type_unknown PASSED
tests/test_standard_metadata.py::test_as_rfc822 PASSED
tests/test_standard_metadata.py::test_as_rfc822_dynamic PASSED
tests/test_standard_metadata.py::test_as_rfc822_set_metadata[2.1] PASSED
tests/test_standard_metadata.py::test_as_rfc822_set_metadata[2.2] PASSED
tests/test_standard_metadata.py::test_as_rfc822_set_metadata[2.3] PASSED
tests/test_standard_metadata.py::test_as_rfc822_set_metadata_invalid PASSED
tests/test_standard_metadata.py::test_as_rfc822_invalid_dynamic PASSED
tests/test_standard_metadata.py::test_as_rfc822_missing_version PASSED
tests/test_standard_metadata.py::test_stically_defined_dynamic_field PASSED
tests/test_standard_metadata.py::test_requires_python[<3.10] PASSED
tests/test_standard_metadata.py::test_requires_python[>3.7,<3.11] PASSED
tests/test_standard_metadata.py::test_requires_python[>3.7,<3.11,!=3.8.4] PASSED
tests/test_standard_metadata.py::test_requires_python[~=3.10,!=3.10.3] PASSED
tests/test_standard_metadata.py::test_version_dynamic PASSED

======== 81 passed ========
