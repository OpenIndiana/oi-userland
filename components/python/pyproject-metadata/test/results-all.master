============================= test session starts ==============================
platform sunos5 -- Python $(PYTHON_VERSION).X -- $(PYTHON)
cachedir: .pytest_cache
rootdir: $(@D)
configfile: pyproject.toml
testpaths: tests
collecting ... collected 79 items

tests/test_rfc822.py::test_headers[items0-] PASSED
tests/test_rfc822.py::test_headers[items1-Foo: Bar\n] PASSED
tests/test_rfc822.py::test_headers[items2-            Foo: Bar\n            Foo2: Bar2\n            ] PASSED
tests/test_rfc822.py::test_headers[items3-] PASSED
tests/test_rfc822.py::test_headers[items4-            ItemA: ValueA\n            ItemB: ValueB\n            ItemC: ValueC\n            ] PASSED
tests/test_rfc822.py::test_headers[items5-            ItemB: ValueB\n            ItemC: ValueC\n            ItemA: ValueA\n            ] PASSED
tests/test_rfc822.py::test_headers[items6-            ItemA: ValueA1\n            ItemA: ValueA2\n            ItemB: ValueB\n            ItemC: ValueC\n            ] PASSED
tests/test_rfc822.py::test_headers[items7-            ItemA: ValueA\n            ItemB: ValueB1\n                    ValueB2\n                    ValueB3\n            ItemC: ValueC\n            ] PASSED
tests/test_rfc822.py::test_body PASSED
tests/test_rfc822.py::test_convert_optional_dependencies PASSED
tests/test_rfc822.py::test_convert_author_email PASSED
tests/test_standard_metadata.py::test_load[-Section "project" missing in pyproject.toml] PASSED
tests/test_standard_metadata.py::test_load[[project]-Field "project.name" missing] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = true\nversion = '0.1.0'\n-Field "project.name" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = true\nversion = '0.1.0'\ndynamic = [\n    'name',\n]\n-Unsupported field "name" in "project.dynamic"] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = true\n-Field "project.version" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\n-Field "project.version" missing and "version" not specified in "project.dynamic"] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nlicense = true\n-Field "project.license" has an invalid type, expecting a dictionary of strings (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nlicense = {}\n-Invalid "project.license" value, expecting either "file" or "text" (got "{}")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nlicense = { file = '...', text = '...' }\n-Invalid "project.license" value, expecting either "file" or "text" (got "{'file': '...', 'text': '...'}")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nlicense = { made-up = ':(' }\n-Unexpected field "project.license.made-up"] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nlicense = { file = true }\n-Field "project.license.file" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nlicense = { text = true }\n-Field "project.license.text" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nlicense = { file = 'this-file-does-not-exist' }\n-License file not found ("this-file-does-not-exist")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nreadme = true\n-Field "project.readme" has an invalid type, expecting either, a string or dictionary of strings (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nreadme = {}\n-Invalid "project.readme" value, expecting either "file" or "text" (got "{}")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nreadme = { file = '...', text = '...' }\n-Invalid "project.readme" value, expecting either "file" or "text" (got "{'file': '...', 'text': '...'}")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nreadme = { made-up = ':(' }\n-Unexpected field "project.readme.made-up"] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nreadme = { file = true }\n-Field "project.readme.file" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nreadme = { text = true }\n-Field "project.readme.text" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nreadme = { file = 'this-file-does-not-exist', content-type = '...' }\n-Readme file not found ("this-file-does-not-exist")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nreadme = { file = 'README.md' }\n-Field "project.readme.content-type" missing] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nreadme = { text = '...' }\n-Field "project.readme.content-type" missing] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\ndescription = true\n-Field "project.description" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\ndependencies = 'some string!'\n-Field "project.dependencies" has an invalid type, expecting a list of strings (got "some string!")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\ndependencies = [\n    99,\n]\n-Field "project.dependencies" contains item with invalid type, expecting a string (got "99")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\ndependencies = [\n    'definitely not a valid PEP 508 requirement!',\n]\n-Field "project.dependencies" contains an invalid PEP 508 requirement string "definitely not a valid PEP 508 requirement!" ] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\noptional-dependencies = true\n-Field "project.optional-dependencies" has an invalid type, expecting a dictionary of PEP 508 requirement strings (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\n[project.optional-dependencies]\ntest = 'some string!'\n-Field "project.optional-dependencies.test" has an invalid type, expecting a dictionary PEP 508 requirement strings (got "some string!")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\n[project.optional-dependencies]\ntest = [\n    true,\n]\n-Field "project.optional-dependencies.test" has an invalid type, expecting a PEP 508 requirement string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\n[project.optional-dependencies]\ntest = [\n    'definitely not a valid PEP 508 requirement!',\n]\n-Field "project.optional-dependencies.test" contains an invalid PEP 508 requirement string "definitely not a valid PEP 508 requirement!" ] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nrequires-python = true\n-Field "project.requires-python" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nkeywords = 'some string!'\n-Field "project.keywords" has an invalid type, expecting a list of strings (got "some string!")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nkeywords = [\n    true,\n]\n-Field "project.keywords" contains item with invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nauthors = {}\n-Field "project.authors" has an invalid type, expecting a list of dictionaries containing the "name" and/or "email" keys (got "{}")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nauthors = [\n    true,\n]\n-Field "project.authors" has an invalid type, expecting a list of dictionaries containing the "name" and/or "email" keys (got "[True]")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nmaintainers = {}\n-Field "project.maintainers" has an invalid type, expecting a list of dictionaries containing the "name" and/or "email" keys (got "{}")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nmaintainers = [\n    10\n]\n-Field "project.maintainers" has an invalid type, expecting a list of dictionaries containing the "name" and/or "email" keys (got "[10]")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nclassifiers = 'some string!'\n-Field "project.classifiers" has an invalid type, expecting a list of strings (got "some string!")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nclassifiers = [\n    true,\n]\n-Field "project.classifiers" contains item with invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\n[project.urls]\nhomepage = true\n-Field "project.urls.homepage" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\n[project.urls]\ndocumentation = true\n-Field "project.urls.documentation" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\n[project.urls]\nrepository = true\n-Field "project.urls.repository" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\n[project.urls]\nchangelog = true\n-Field "project.urls.changelog" has an invalid type, expecting a string (got "True")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nscripts = []\n-Field "project.scripts" has an invalid type, expecting a dictionary of strings (got "[]")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\ngui-scripts = []\n-Field "project.gui-scripts" has an invalid type, expecting a dictionary of strings (got "[]")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nentry-points = []\n-Field "project.entry-points" has an invalid type, expecting a dictionary of entrypoint sections (got "[]")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\nentry-points = { section = 'something' }\n-Field "project.entry-points.section" has an invalid type, expecting a dictionary of entrypoints (got "something")] PASSED
tests/test_standard_metadata.py::test_load[\n[project]\nname = 'test'\nversion = '0.1.0'\n[project.entry-points.section]\nentrypoint = []\n-Field "project.entry-points.section.entrypoint" has an invalid type, expecting a string (got "[]")] PASSED
tests/test_standard_metadata.py::test_value[False] PASSED
tests/test_standard_metadata.py::test_value[True] PASSED
tests/test_standard_metadata.py::test_read_license PASSED
tests/test_standard_metadata.py::test_readme_content_type[full-metadata-text/markdown] PASSED
tests/test_standard_metadata.py::test_readme_content_type[full-metadata2-text/x-rst] PASSED
tests/test_standard_metadata.py::test_readme_content_type_unknown PASSED
tests/test_standard_metadata.py::test_as_rfc822 PASSED
tests/test_standard_metadata.py::test_as_rfc822_dynamic PASSED
tests/test_standard_metadata.py::test_as_rfc822_set_metadata[2.1] PASSED
tests/test_standard_metadata.py::test_as_rfc822_set_metadata[2.2] PASSED
tests/test_standard_metadata.py::test_as_rfc822_set_metadata[2.3] PASSED
tests/test_standard_metadata.py::test_as_rfc822_set_metadata_invalid PASSED
tests/test_standard_metadata.py::test_as_rfc822_invalid_dynamic PASSED
tests/test_standard_metadata.py::test_as_rfc822_missing_version PASSED
tests/test_standard_metadata.py::test_stically_defined_dynamic_field PASSED
tests/test_standard_metadata.py::test_requires_python[<3.10] PASSED
tests/test_standard_metadata.py::test_requires_python[>3.7,<3.11] PASSED
tests/test_standard_metadata.py::test_requires_python[>3.7,<3.11,!=3.8.4] PASSED
tests/test_standard_metadata.py::test_requires_python[~=3.10,!=3.10.3] PASSED
tests/test_standard_metadata.py::test_version_dynamic PASSED

======== 79 passed ========
