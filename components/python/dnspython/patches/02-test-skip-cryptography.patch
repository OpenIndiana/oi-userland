--- dnspython-2.3.0/tests/test_dnssec.py.orig
+++ dnspython-2.3.0/tests/test_dnssec.py
@@ -33,6 +33,8 @@
 
 from .keys import test_dnskeys
 
+import pytest
+
 try:
     from cryptography.hazmat.backends import default_backend
     from cryptography.hazmat.primitives.serialization import load_pem_private_key
@@ -693,6 +695,7 @@
 
         self.assertRaises(dns.dnssec.ValidationFailure, bad)
 
+    @pytest.mark.skip(reason="needs newer cryptography")
     def testAbsoluteED25519Good(self):  # type: () -> None
         dns.dnssec.validate(
             abs_ed25519_mx, abs_ed25519_mx_rrsig_1, abs_ed25519_keys_1, None, when5
@@ -701,6 +704,7 @@
             abs_ed25519_mx, abs_ed25519_mx_rrsig_2, abs_ed25519_keys_2, None, when5
         )
 
+    @pytest.mark.skip(reason="needs newer cryptography")
     def testAbsoluteED25519Bad(self):  # type: () -> None
         with self.assertRaises(dns.dnssec.ValidationFailure):
             dns.dnssec.validate(
@@ -719,6 +723,7 @@
                 when5,
             )
 
+    @pytest.mark.skip(reason="needs newer cryptography")
     def testAbsoluteED448Good(self):  # type: () -> None
         dns.dnssec.validate(
             abs_ed448_mx, abs_ed448_mx_rrsig_1, abs_ed448_keys_1, None, when5
@@ -727,6 +732,7 @@
             abs_ed448_mx, abs_ed448_mx_rrsig_2, abs_ed448_keys_2, None, when5
         )
 
+    @pytest.mark.skip(reason="needs newer cryptography")
     def testAbsoluteED448Bad(self):  # type: () -> None
         with self.assertRaises(dns.dnssec.ValidationFailure):
             dns.dnssec.validate(
@@ -1018,6 +1024,7 @@
                     dns.rdata.from_text(dns.rdataclass.IN, dns.rdatatype.CDS, record)
                 self.assertEqual(msg, str(cm.exception))
 
+    @pytest.mark.skip(reason="needs newer cryptography")
     def testMakeCDS(self):  # type: () -> None
         name = dns.name.from_text("example.com")
         key = ed448.Ed448PrivateKey.generate()
@@ -1049,6 +1056,7 @@
                 self.assertEqual(dns.dnssec.key_id(d), c.key_tag)
                 self.assertEqual(d.algorithm, c.algorithm)
 
+    @pytest.mark.skip(reason="needs newer cryptography")
     def testMakeManyDSfromCDS(self):  # type: () -> None
         name = dns.name.from_text("example.com")
         nkeys = 3
@@ -1073,6 +1081,7 @@
 
         self.assertEqual(len(cds_rdataset), nkeys)
 
+    @pytest.mark.skip(reason="needs newer cryptography")
     def testMakeManyDSfromDNSKEY(self):  # type: () -> None
         name = dns.name.from_text("example.com")
         nkeys = 3
@@ -1095,6 +1104,7 @@
 
 @unittest.skipUnless(dns.dnssec._have_pyca, "Python Cryptography cannot be imported")
 class DNSSECMakeDNSKEYTestCase(unittest.TestCase):
+    @pytest.mark.skip(reason="needs newer cryptography")
     def testKnownDNSKEYs(self):  # type: () -> None
         for tk in test_dnskeys:
             print(tk.command)
@@ -1105,6 +1115,7 @@
             )
             self.assertEqual(rdata1, rdata2)
 
+    @pytest.mark.skip(reason="needs newer cryptography")
     def testInvalidMakeDNSKEY(self):  # type: () -> None
         key = rsa.generate_private_key(
             public_exponent=65537,
@@ -1121,6 +1132,7 @@
         with self.assertRaises(ValueError):
             dns.dnssec.make_dnskey(key.public_key(), dns.dnssec.Algorithm.DSA)
 
+    @pytest.mark.skip(reason="needs newer cryptography")
     def testMakeCDNSKEY(self):  # type: () -> None
         key = ed448.Ed448PrivateKey.generate()
         dnskey = dns.dnssec.make_dnskey(
@@ -1200,14 +1212,17 @@
         key = ec.generate_private_key(curve=ec.SECP384R1, backend=default_backend())
         self._test_signature(key, dns.dnssec.Algorithm.ECDSAP384SHA384, abs_soa)
 
+    @pytest.mark.skip(reason="needs newer cryptography")
     def testSignatureED25519(self):  # type: () -> None
         key = ed25519.Ed25519PrivateKey.generate()
         self._test_signature(key, dns.dnssec.Algorithm.ED25519, abs_soa)
 
+    @pytest.mark.skip(reason="needs newer cryptography")
     def testSignatureED448(self):  # type: () -> None
         key = ed448.Ed448PrivateKey.generate()
         self._test_signature(key, dns.dnssec.Algorithm.ED448, abs_soa)
 
+    @pytest.mark.skip(reason="needs newer cryptography")
     def testSignRdataset(self):  # type: () -> None
         key = ed448.Ed448PrivateKey.generate()
         name = dns.name.from_text("example.com")
