--- pydantic-2.7.2/tests/test_config.py.orig
+++ pydantic-2.7.2/tests/test_config.py
@@ -345,6 +345,7 @@
         m = Model(a=40, b=10)
         assert m == m.model_copy()
 
+    @pytest.mark.skip(reason="always fails: https://github.com/pydantic/pydantic/issues/9046")
     def test_config_class_is_deprecated(self):
         with pytest.warns(
             PydanticDeprecatedSince20, match='Support for class-based `config` is deprecated, use ConfigDict instead.'
@@ -353,6 +354,7 @@
             class Config(BaseConfig):
                 pass
 
+    @pytest.mark.skip(reason="always fails: https://github.com/pydantic/pydantic/issues/9046")
     def test_config_class_attributes_are_deprecated(self):
         with pytest.warns(
             PydanticDeprecatedSince20,
--- pydantic-2.7.2/tests/test_deprecated.py.orig
+++ pydantic-2.7.2/tests/test_deprecated.py
@@ -268,6 +268,7 @@
     State(**{'user': {'first_name': 'John', 'last_name': 'Appleseed'}})
 
 
+@pytest.mark.skip(reason="always fails: https://github.com/pydantic/pydantic/issues/9046")
 def test_parse_raw_pass():
     class Model(BaseModel):
         x: int
@@ -279,6 +280,7 @@
 
 
 @pytest.mark.skipif(platform.python_implementation() == 'PyPy', reason='Different error str on PyPy')
+@pytest.mark.skip(reason="always fails: https://github.com/pydantic/pydantic/issues/9046")
 def test_parse_raw_pass_fail():
     class Model(BaseModel):
         x: int
@@ -433,6 +435,7 @@
             x: str = Field('test', const=True)
 
 
+@pytest.mark.skip(reason="always fails: https://github.com/pydantic/pydantic/issues/9046")
 def test_field_include_deprecation():
     m = '`include` is deprecated and does nothing. It will be removed, use `exclude` instead'
     with pytest.warns(PydanticDeprecatedSince20, match=m):
@@ -661,6 +664,7 @@
     assert m.model_dump() == {'x': 1}
 
 
+@pytest.mark.skip(reason="always fails: https://github.com/pydantic/pydantic/issues/9046")
 def test_parse_file(tmp_path):
     path = tmp_path / 'test.json'
     path.write_text('{"x": 12}')
@@ -732,6 +736,7 @@
     assert v == [1, 2, 3]
 
 
+@pytest.mark.skip(reason="always fails: https://github.com/pydantic/pydantic/issues/9046")
 def test_deprecated_module(tmp_path: Path) -> None:
     class Model(BaseModel):
         x: int
--- pydantic-2.7.2/tests/test_json_schema.py.orig
+++ pydantic-2.7.2/tests/test_json_schema.py
@@ -1376,6 +1376,7 @@
         r'Default value .* is not JSON serializable; excluding default from JSON schema \[non-serializable-default\]',
     ),
 )
+@pytest.mark.skip(reason="always fails: https://github.com/pydantic/pydantic/issues/9046")
 def test_callable_fallback_with_non_serializable_default(warning_match):
     class Model(BaseModel):
         callback: Union[int, Callable[[int], int]] = lambda x: x  # noqa E731
--- pydantic-2.7.2/tests/test_validators.py.orig
+++ pydantic-2.7.2/tests/test_validators.py
@@ -2551,6 +2551,7 @@
     assert Model(x=1, y=2).model_dump() == {'x': 2, 'y': 3}
 
 
+@pytest.mark.skip(reason="always fails: https://github.com/pydantic/pydantic/issues/9046")
 def test_root_validator_allow_reuse_same_field():
     with pytest.warns(UserWarning, match='`root_val` overrides an existing Pydantic `@root_validator` decorator'):
 
