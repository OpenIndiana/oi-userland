============================= test session starts ==============================
platform sunos5 -- Python $(PYTHON_VERSION).X -- $(PYTHON)
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('$(@D)/.hypothesis/examples')
rootdir: $(@D)
configfile: pyproject.toml
testpaths: tests
asyncio: mode=strict
collecting ... collected 222 items

tests/test_grouped_metadata.py::test_non_subclass_implementer PASSED
tests/test_grouped_metadata.py::test_subclass_without_implementing_iter PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Ge(ge=datetime.datetime(2000, 1, 1, 0, 0))] is invalid for datetime.datetime(1998, 1, 1, 0, 0)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Ge(ge=datetime.datetime(2000, 1, 1, 0, 0))] is invalid for datetime.datetime(1999, 12, 31, 0, 0)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Gt(gt=Decimal('1.123'))] is invalid for Decimal('0')] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Gt(gt=Decimal('1.123'))] is invalid for Decimal('1.123')] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Gt(gt=datetime.date(2000, 1, 1))] is invalid for datetime.date(1999, 12, 31)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Gt(gt=datetime.date(2000, 1, 1))] is invalid for datetime.date(2000, 1, 1)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Gt(gt=datetime.datetime(2000, 1, 1, 0, 0))] is invalid for datetime.datetime(1999, 12, 31, 0, 0)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Gt(gt=datetime.datetime(2000, 1, 1, 0, 0))] is invalid for datetime.datetime(2000, 1, 1, 0, 0)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Interval(gt=datetime.datetime(2000, 1, 1, 0, 0), ge=None, lt=None, le=datetime.datetime(2000, 1, 3, 0, 0))] is invalid for datetime.datetime(2000, 1, 1, 0, 0)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Interval(gt=datetime.datetime(2000, 1, 1, 0, 0), ge=None, lt=None, le=datetime.datetime(2000, 1, 3, 0, 0))] is invalid for datetime.datetime(2000, 1, 4, 0, 0)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Le(le=datetime.datetime(2000, 1, 1, 0, 0))] is invalid for datetime.datetime(2000, 1, 2, 0, 0)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Le(le=datetime.datetime(2000, 1, 1, 0, 0))] is invalid for datetime.datetime(2000, 1, 3, 0, 0)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Lt(lt=datetime.datetime(2000, 1, 1, 0, 0))] is invalid for datetime.datetime(2000, 1, 2, 0, 0)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Lt(lt=datetime.datetime(2000, 1, 1, 0, 0))] is invalid for datetime.datetime(2000, 1, 3, 0, 0)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Timezone(tz='Europe/London')] is invalid for datetime.datetime(2000, 1, 1, 0, 0)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Timezone(tz='Europe/London')] is invalid for datetime.datetime(2000, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=21600)))] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Timezone(tz=Ellipsis)] is invalid for datetime.datetime(2000, 1, 1, 0, 0)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Timezone(tz=None)] is invalid for datetime.datetime(2000, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Timezone(tz=datetime.timezone.utc)] is invalid for datetime.datetime(2000, 1, 1, 0, 0)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[datetime.datetime, Timezone(tz=datetime.timezone.utc)] is invalid for datetime.datetime(2000, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(seconds=21600)))] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, <annotated_types.test_cases.cases.<locals>.MyCustomGroupedMetadata object at $(POINTER)>] is invalid for 0.01] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, <annotated_types.test_cases.cases.<locals>.MyCustomGroupedMetadata object at $(POINTER)>] is invalid for 1.5] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Ge(ge=0.5)] is invalid for -0.1] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Ge(ge=0.5)] is invalid for 0.0] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Ge(ge=0.5)] is invalid for 0.4] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Gt(gt=0.5)] is invalid for -0.1] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Gt(gt=0.5)] is invalid for 0.0] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Gt(gt=0.5)] is invalid for 0.5] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Interval(gt=None, ge=0.5, lt=None, le=1)] is invalid for 0.49] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Interval(gt=None, ge=0.5, lt=None, le=1)] is invalid for 1.1] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Le(le=0.5)] is invalid for 0.6] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Le(le=0.5)] is invalid for 0.7] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Le(le=0.5)] is invalid for 0.8] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Le(le=0.5)] is invalid for 0.9] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Lt(lt=0.5)] is invalid for 0.5] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Lt(lt=0.5)] is invalid for 0.6] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Lt(lt=0.5)] is invalid for 0.7] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Lt(lt=0.5)] is invalid for 0.8] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, Lt(lt=0.5)] is invalid for 0.9] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, MultipleOf(multiple_of=0.5)] is invalid for 0.4] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[float, MultipleOf(multiple_of=0.5)] is invalid for 1.1] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Ge(ge=4)] is invalid for -1] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Ge(ge=4)] is invalid for 0] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Gt(gt=4)] is invalid for -1] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Gt(gt=4)] is invalid for 0] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Gt(gt=4)] is invalid for 4] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Interval(gt=4, ge=None, lt=10, le=None)] is invalid for -1] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Interval(gt=4, ge=None, lt=10, le=None)] is invalid for 0] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Interval(gt=4, ge=None, lt=10, le=None)] is invalid for 1000] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Interval(gt=4, ge=None, lt=10, le=None)] is invalid for 10] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Interval(gt=4, ge=None, lt=10, le=None)] is invalid for 4] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Interval(gt=4, ge=None, lt=None, le=None)] is invalid for -1] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Interval(gt=4, ge=None, lt=None, le=None)] is invalid for 0] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Interval(gt=4, ge=None, lt=None, le=None)] is invalid for 4] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Le(le=4)] is invalid for 1000] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Le(le=4)] is invalid for 5] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Le(le=4)] is invalid for 6] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Lt(lt=4)] is invalid for 1000] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Lt(lt=4)] is invalid for 40] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Lt(lt=4)] is invalid for 41] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Lt(lt=4)] is invalid for 5] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Lt(lt=4)] is invalid for 6] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, MultipleOf(multiple_of=3)] is invalid for 1] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, MultipleOf(multiple_of=3)] is invalid for 2] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, MultipleOf(multiple_of=3)] is invalid for 4] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Predicate(func=<function cases.<locals>.<lambda> at $(POINTER)>)] is invalid for 1] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Predicate(func=<function cases.<locals>.<lambda> at $(POINTER)>)] is invalid for 3] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[int, Predicate(func=<function cases.<locals>.<lambda> at $(POINTER)>)] is invalid for 5] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Len(min_length=0, max_length=4)] is invalid for '12345'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Len(min_length=0, max_length=4)] is invalid for 'xxxxxxxxxx'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Len(min_length=3, max_length=3)] is invalid for '12'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Len(min_length=3, max_length=3)] is invalid for '1234'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Len(min_length=3, max_length=5)] is invalid for ''] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Len(min_length=3, max_length=5)] is invalid for '1'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Len(min_length=3, max_length=5)] is invalid for '12'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Len(min_length=3, max_length=5)] is invalid for '123456'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Len(min_length=3, max_length=5)] is invalid for 'xxxxxxxxxx'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Len(min_length=3, max_length=None)] is invalid for ''] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Len(min_length=3, max_length=None)] is invalid for '1'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Len(min_length=3, max_length=None)] is invalid for '12'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, MaxLen(max_length=4)] is invalid for '12345'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, MaxLen(max_length=4)] is invalid for 'xxxxxxxxxx'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, MinLen(min_length=3)] is invalid for ''] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, MinLen(min_length=3)] is invalid for '1'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, MinLen(min_length=3)] is invalid for '12'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Predicate(func=<method 'isascii' of 'str' objects>)] is invalid for '\U0001f60a'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Predicate(func=<method 'isascii' of 'str' objects>)] is invalid for '\xa3100'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Predicate(func=<method 'isascii' of 'str' objects>)] is invalid for 'whatever \U0001f440'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Predicate(func=<method 'isdigit' of 'str' objects>)] is invalid for ''] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Predicate(func=<method 'isdigit' of 'str' objects>)] is invalid for 'a1b2'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Predicate(func=<method 'isdigit' of 'str' objects>)] is invalid for 'ab'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Predicate(func=<method 'islower' of 'str' objects>)] is invalid for ''] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Predicate(func=<method 'islower' of 'str' objects>)] is invalid for 'A'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Predicate(func=<method 'islower' of 'str' objects>)] is invalid for 'Boom'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Predicate(func=<method 'isupper' of 'str' objects>)] is invalid for ''] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Predicate(func=<method 'isupper' of 'str' objects>)] is invalid for 'AbC'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Predicate(func=<method 'isupper' of 'str' objects>)] is invalid for 'a'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[str, Predicate(func=<method 'isupper' of 'str' objects>)] is invalid for 'abc'] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.Dict[int, int], Len(min_length=2, max_length=3)] is invalid for {1: 1, 2: 2, 3: 3, 4: 4}] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.Dict[int, int], Len(min_length=2, max_length=3)] is invalid for {1: 1}] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.Dict[int, int], Len(min_length=2, max_length=3)] is invalid for {}] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.List[int], Len(min_length=3, max_length=None)] is invalid for [1, 2]] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.List[int], Len(min_length=3, max_length=None)] is invalid for [1]] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.List[int], Len(min_length=3, max_length=None)] is invalid for []] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.List[int], MinLen(min_length=3)] is invalid for [1, 2]] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.List[int], MinLen(min_length=3)] is invalid for [1]] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.List[int], MinLen(min_length=3)] is invalid for []] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.List[str], Len(min_length=0, max_length=4)] is invalid for ['a', 'a', 'a', 'a', 'a']] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.List[str], Len(min_length=0, max_length=4)] is invalid for ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b']] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.List[str], MaxLen(max_length=4)] is invalid for ['a', 'a', 'a', 'a', 'a']] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.List[str], MaxLen(max_length=4)] is invalid for ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b']] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.Set[int], Len(min_length=2, max_length=3)] is invalid for set()] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.Set[int], Len(min_length=2, max_length=3)] is invalid for {1, 2, 3, 4}] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.Set[int], Len(min_length=2, max_length=3)] is invalid for {1}] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.Tuple[int, ...], Len(min_length=2, max_length=3)] is invalid for ()] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.Tuple[int, ...], Len(min_length=2, max_length=3)] is invalid for (1, 2, 3, 4)] PASSED
tests/test_main.py::test_invalid_cases[typing.Annotated[typing.Tuple[int, ...], Len(min_length=2, max_length=3)] is invalid for (1,)] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Ge(ge=datetime.datetime(2000, 1, 1, 0, 0))] is valid for datetime.datetime(2000, 1, 2, 0, 0)] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Ge(ge=datetime.datetime(2000, 1, 1, 0, 0))] is valid for datetime.datetime(2000, 1, 3, 0, 0)] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Gt(gt=Decimal('1.123'))] is valid for Decimal('1.1231')] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Gt(gt=Decimal('1.123'))] is valid for Decimal('123')] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Gt(gt=datetime.date(2000, 1, 1))] is valid for datetime.date(2000, 1, 2)] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Gt(gt=datetime.date(2000, 1, 1))] is valid for datetime.date(2000, 1, 3)] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Gt(gt=datetime.datetime(2000, 1, 1, 0, 0))] is valid for datetime.datetime(2000, 1, 2, 0, 0)] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Gt(gt=datetime.datetime(2000, 1, 1, 0, 0))] is valid for datetime.datetime(2000, 1, 3, 0, 0)] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Interval(gt=datetime.datetime(2000, 1, 1, 0, 0), ge=None, lt=None, le=datetime.datetime(2000, 1, 3, 0, 0))] is valid for datetime.datetime(2000, 1, 2, 0, 0)] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Interval(gt=datetime.datetime(2000, 1, 1, 0, 0), ge=None, lt=None, le=datetime.datetime(2000, 1, 3, 0, 0))] is valid for datetime.datetime(2000, 1, 3, 0, 0)] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Le(le=datetime.datetime(2000, 1, 1, 0, 0))] is valid for datetime.datetime(1999, 12, 31, 0, 0)] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Le(le=datetime.datetime(2000, 1, 1, 0, 0))] is valid for datetime.datetime(2000, 1, 1, 0, 0)] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Lt(lt=datetime.datetime(2000, 1, 1, 0, 0))] is valid for datetime.datetime(1999, 12, 31, 0, 0)0] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Lt(lt=datetime.datetime(2000, 1, 1, 0, 0))] is valid for datetime.datetime(1999, 12, 31, 0, 0)1] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Timezone(tz='Europe/London')] is valid for datetime.datetime(2000, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(0), 'Europe/London'))] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Timezone(tz=Ellipsis)] is valid for datetime.datetime(2000, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Timezone(tz=None)] is valid for datetime.datetime(2000, 1, 1, 0, 0)] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[datetime.datetime, Timezone(tz=datetime.timezone.utc)] is valid for datetime.datetime(2000, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, <annotated_types.test_cases.cases.<locals>.MyCustomGroupedMetadata object at $(POINTER)>] is valid for 0] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, <annotated_types.test_cases.cases.<locals>.MyCustomGroupedMetadata object at $(POINTER)>] is valid for 2.0] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Ge(ge=0.5)] is valid for 0.5] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Ge(ge=0.5)] is valid for 0.6] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Ge(ge=0.5)] is valid for 0.7] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Ge(ge=0.5)] is valid for 0.8] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Ge(ge=0.5)] is valid for 0.9] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Gt(gt=0.5)] is valid for 0.6] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Gt(gt=0.5)] is valid for 0.7] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Gt(gt=0.5)] is valid for 0.8] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Gt(gt=0.5)] is valid for 0.9] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Interval(gt=None, ge=0.5, lt=None, le=1)] is valid for 0.5] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Interval(gt=None, ge=0.5, lt=None, le=1)] is valid for 0.9] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Interval(gt=None, ge=0.5, lt=None, le=1)] is valid for 1] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Le(le=0.5)] is valid for -0.1] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Le(le=0.5)] is valid for 0.0] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Le(le=0.5)] is valid for 0.5] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Lt(lt=0.5)] is valid for -0.1] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Lt(lt=0.5)] is valid for 0.0] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, Lt(lt=0.5)] is valid for 0.4] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, MultipleOf(multiple_of=0.5)] is valid for 0.5] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, MultipleOf(multiple_of=0.5)] is valid for 0] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, MultipleOf(multiple_of=0.5)] is valid for 1.5] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[float, MultipleOf(multiple_of=0.5)] is valid for 1] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Ge(ge=4)] is valid for 1000] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Ge(ge=4)] is valid for 40] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Ge(ge=4)] is valid for 41] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Ge(ge=4)] is valid for 5] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Ge(ge=4)] is valid for 6] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Gt(gt=4)] is valid for 1000] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Gt(gt=4)] is valid for 5] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Gt(gt=4)] is valid for 6] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Interval(gt=4, ge=None, lt=10, le=None)] is valid for 5] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Interval(gt=4, ge=None, lt=10, le=None)] is valid for 6] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Interval(gt=4, ge=None, lt=None, le=None)] is valid for 1000] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Interval(gt=4, ge=None, lt=None, le=None)] is valid for 5] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Interval(gt=4, ge=None, lt=None, le=None)] is valid for 6] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Le(le=4)] is valid for -1] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Le(le=4)] is valid for 0] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Le(le=4)] is valid for 4] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Lt(lt=4)] is valid for -1] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Lt(lt=4)] is valid for 0] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, MultipleOf(multiple_of=3)] is valid for 0] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, MultipleOf(multiple_of=3)] is valid for 3] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, MultipleOf(multiple_of=3)] is valid for 9] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Predicate(func=<function cases.<locals>.<lambda> at $(POINTER)>)] is valid for 0] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Predicate(func=<function cases.<locals>.<lambda> at $(POINTER)>)] is valid for 2] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[int, Predicate(func=<function cases.<locals>.<lambda> at $(POINTER)>)] is valid for 4] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, Len(min_length=0, max_length=4)] is valid for ''] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, Len(min_length=0, max_length=4)] is valid for '1234'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, Len(min_length=3, max_length=3)] is valid for '123'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, Len(min_length=3, max_length=5)] is valid for '123'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, Len(min_length=3, max_length=5)] is valid for '12345'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, Len(min_length=3, max_length=None)] is valid for '123'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, Len(min_length=3, max_length=None)] is valid for '1234'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, Len(min_length=3, max_length=None)] is valid for 'xxxxxxxxxx'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, MaxLen(max_length=4)] is valid for ''] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, MaxLen(max_length=4)] is valid for '1234'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, MinLen(min_length=3)] is valid for '123'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, MinLen(min_length=3)] is valid for '1234'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, MinLen(min_length=3)] is valid for 'xxxxxxxxxx'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, Predicate(func=<method 'isascii' of 'str' objects>)] is valid for '123'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, Predicate(func=<method 'isascii' of 'str' objects>)] is valid for 'foo bar'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, Predicate(func=<method 'isdigit' of 'str' objects>)] is valid for '123'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, Predicate(func=<method 'islower' of 'str' objects>)] is valid for 'abc'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, Predicate(func=<method 'islower' of 'str' objects>)] is valid for 'foobar'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, Predicate(func=<method 'isupper' of 'str' objects>)] is valid for 'ABC'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[str, Predicate(func=<method 'isupper' of 'str' objects>)] is valid for 'DEFO'] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.Dict[int, int], Len(min_length=2, max_length=3)] is valid for {1: 1, 2: 2}] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.List[int], Len(min_length=3, max_length=None)] is valid for [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.List[int], Len(min_length=3, max_length=None)] is valid for [1, 2, 3, 4]] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.List[int], Len(min_length=3, max_length=None)] is valid for [1, 2, 3]] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.List[int], MinLen(min_length=3)] is valid for [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.List[int], MinLen(min_length=3)] is valid for [1, 2, 3, 4]] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.List[int], MinLen(min_length=3)] is valid for [1, 2, 3]] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.List[str], Len(min_length=0, max_length=4)] is valid for ['a', 'b', 'c']] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.List[str], Len(min_length=0, max_length=4)] is valid for ['a', 'bcdef']] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.List[str], Len(min_length=0, max_length=4)] is valid for []] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.List[str], MaxLen(max_length=4)] is valid for ['a', 'b', 'c']] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.List[str], MaxLen(max_length=4)] is valid for ['a', 'bcdef']] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.List[str], MaxLen(max_length=4)] is valid for []] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.Set[int], Len(min_length=2, max_length=3)] is valid for {1, 2, 3}] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.Set[int], Len(min_length=2, max_length=3)] is valid for {1, 2}] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.Tuple[int, ...], Len(min_length=2, max_length=3)] is valid for (1, 2)] PASSED
tests/test_main.py::test_valid_cases[typing.Annotated[typing.Tuple[int, ...], Len(min_length=2, max_length=3)] is valid for (1, 2, 3)] PASSED


======== 222 passed ========
