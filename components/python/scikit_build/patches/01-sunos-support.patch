https://github.com/scikit-build/scikit-build/pull/983

diff --git a/skbuild/platform_specifics/platform_factory.py b/skbuild/platform_specifics/platform_factory.py
index a154ed02..9242cf70 100644
--- a/skbuild/platform_specifics/platform_factory.py
+++ b/skbuild/platform_specifics/platform_factory.py
@@ -40,5 +40,10 @@ def get_platform() -> abstract.CMakePlatform:
 
         return bsd.BSDPlatform()
 
+    if this_platform == "sunos":
+        from . import sunos
+
+        return sunos.SunOSPlatform()
+
     msg = f"Unsupported platform: {this_platform:s}. Please contact the scikit-build team."
     raise RuntimeError(msg)
diff --git a/skbuild/platform_specifics/sunos.py b/skbuild/platform_specifics/sunos.py
new file mode 100644
index 00000000..8dca3fbd
--- /dev/null
+++ b/skbuild/platform_specifics/sunos.py
@@ -0,0 +1,28 @@
+"""This module defines object specific to SunOS platform."""
+
+from __future__ import annotations
+
+import sys
+import textwrap
+
+from . import unix
+
+
+class SunOSPlatform(unix.UnixPlatform):
+    """SunOS implementation of :class:`.abstract.CMakePlatform`."""
+
+    @property
+    def generator_installation_help(self) -> str:
+        """Return message guiding the user for installing a valid toolchain."""
+        return (
+            textwrap.dedent(
+                """
+            Building SunOS wheels for Python {pyver} requires build toolchain.
+            It can be installed using:
+
+              pkg install build-essential
+            """
+            )
+            .format(pyver=".".join(str(v) for v in sys.version_info[:2]))
+            .strip()
+        )
diff --git a/skbuild/resources/cmake/FindPythonExtensions.cmake b/skbuild/resources/cmake/FindPythonExtensions.cmake
index bf42c620..59b30c2a 100644
--- a/skbuild/resources/cmake/FindPythonExtensions.cmake
+++ b/skbuild/resources/cmake/FindPythonExtensions.cmake
@@ -355,9 +355,15 @@ function(_set_python_extension_symbol_visibility _target)
                  "{global: ${_modinit_prefix}${_target}; local: *;};"
       )
     endif()
-    set_property(TARGET ${_target} APPEND_STRING PROPERTY LINK_FLAGS
-      " -Wl,--version-script=\"${_script_path}\""
-    )
+    if(NOT ${CMAKE_SYSTEM_NAME} MATCHES "SunOS")
+      set_property(TARGET ${_target} APPEND_STRING PROPERTY LINK_FLAGS
+        " -Wl,--version-script=\"${_script_path}\""
+      )
+    else()
+      set_property(TARGET ${_target} APPEND_STRING PROPERTY LINK_FLAGS
+        " -Wl,-M \"${_script_path}\""
+      )
+    endif()
   endif()
 endfunction()
 
diff --git a/tests/test_platform.py b/tests/test_platform.py
index ed5ce105..ecad5b5e 100644
--- a/tests/test_platform.py
+++ b/tests/test_platform.py
@@ -82,7 +82,7 @@ def test_generator_cleanup():
     assert not os.path.exists(test_folder)
 
 
-@pytest.mark.parametrize("supported_platform", ["darwin", "freebsd", "openbsd", "linux", "windows", "os400", "cygwin"])
+@pytest.mark.parametrize("supported_platform", ["darwin", "freebsd", "openbsd", "linux", "windows", "os400", "cygwin", "sunos"])
 def test_known_platform(supported_platform, mocker):
     mocker.patch("platform.system", return_value=supported_platform)
     platforms = {
@@ -93,6 +93,7 @@ def test_known_platform(supported_platform, mocker):
         "windows": "Windows",
         "os400": "BSD",
         "cygwin": "Cygwin",
+        "sunos": "SunOS",
     }
     expected_platform_classname = f"{platforms[supported_platform]}Platform"
     assert get_platform().__class__.__name__ == expected_platform_classname
