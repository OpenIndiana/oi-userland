This patch disables several tests that doesn't work correctly on Solaris.

test_gdb is not deterministic and sometimes fails for unimportant reasons (only
when ran with gmake test from component root).

test_unicodedata needs to download additional data.
[Not for upstream]

test_time changes skip reason string to reflect the actual platform.
[Can be offered upstream]

test_socket fixes problem with sparc specific behavior of CMSG_SPACE(). Needed
values are not linear as the test expects and that might cause an exception for
last byte. Other problems in this test are related to known issues also
affecting other platforms. [Can be at least reported upstream]

test_re those two test are probably also locale related but I have no idea what
is the root cause of these... [Should be reported upstream]

test_pyexpat exception output is slightly different most likely due to platform
differences. We can safely comment it out. [Not for upstream]

test_tcl should be investigated more [Should be reported upstream]

test_float is another locale related issue. [Should be reported upstream]
https://github.com/python/cpython/commit/aa967ec4d4c2fc844f8f16b339140b050ae4d5e2

test_pkgutil doesn't expect that pkg module exists. [Not for upstream]

--- Python-3.12.1/Lib/test/test_unicodedata.py.orig
+++ Python-3.12.1/Lib/test/test_unicodedata.py
@@ -359,6 +359,8 @@
         TESTDATAFILE = "NormalizationTest.txt"
         TESTDATAURL = f"http://www.pythontest.net/unicode/{unicodedata.unidata_version}/{TESTDATAFILE}"
 
+        if sys.platform.startswith("sunos"):
+            self.skipTest("test needs to download additional data")
         # Hit the exception early
         try:
             testdata = open_urlresource(TESTDATAURL, encoding="utf-8",
--- Python-3.12.1/Lib/test/test_time.py.orig
+++ Python-3.12.1/Lib/test/test_time.py
@@ -642,7 +642,7 @@
             self.test_year('%04d', func=year4d)
 
     def skip_if_not_supported(y):
-        msg = "strftime() is limited to [1; 9999] with Visual Studio"
+        msg = "strftime() is limited to [1; 9999] on %s" % sys.platform
         # Check that it doesn't crash for year > 9999
         try:
             time.strftime('%Y', (y,) + (0,) * 8)
--- Python-3.12.1/Lib/test/test_socket.py.orig
+++ Python-3.12.1/Lib/test/test_socket.py
@@ -3520,7 +3520,7 @@
         # Test CMSG_SPACE() with various valid and invalid values,
         # checking the assumptions used by sendmsg().
         toobig = self.socklen_t_limit - socket.CMSG_SPACE(1) + 1
-        values = list(range(257)) + list(range(toobig - 257, toobig))
+        values = list(range(257)) + list(range(toobig - 257, toobig - 8))
 
         last = socket.CMSG_SPACE(0)
         # struct cmsghdr has at least three members, two of which are ints
@@ -3666,6 +3666,7 @@
         self.createAndSendFDs(1)
 
     @unittest.skipIf(sys.platform == "darwin", "skipping, see issue #12958")
+    @unittest.skipIf(sys.platform.startswith("sunos"), "skipping, see issue #12958")
     @unittest.skipIf(AIX, "skipping, see issue #22397")
     @requireAttrs(socket, "CMSG_SPACE")
     def testFDPassSeparate(self):
@@ -3677,6 +3678,7 @@
 
     @testFDPassSeparate.client_skip
     @unittest.skipIf(sys.platform == "darwin", "skipping, see issue #12958")
+    @unittest.skipIf(sys.platform.startswith("sunos"), "skipping, see issue #12958")
     @unittest.skipIf(AIX, "skipping, see issue #22397")
     def _testFDPassSeparate(self):
         fd0, fd1 = self.newFDs(2)
@@ -3690,6 +3692,7 @@
             len(MSG))
 
     @unittest.skipIf(sys.platform == "darwin", "skipping, see issue #12958")
+    @unittest.skipIf(sys.platform.startswith("sunos"), "skipping, see issue #12958")
     @unittest.skipIf(AIX, "skipping, see issue #22397")
     @requireAttrs(socket, "CMSG_SPACE")
     def testFDPassSeparateMinSpace(self):
@@ -3704,6 +3707,7 @@
 
     @testFDPassSeparateMinSpace.client_skip
     @unittest.skipIf(sys.platform == "darwin", "skipping, see issue #12958")
+    @unittest.skipIf(sys.platform.startswith("sunos"), "skipping, see issue #12958")
     @unittest.skipIf(AIX, "skipping, see issue #22397")
     def _testFDPassSeparateMinSpace(self):
         fd0, fd1 = self.newFDs(2)
--- Python-3.12.1/Lib/test/test_tcl.py.orig
+++ Python-3.12.1/Lib/test/test_tcl.py
@@ -181,6 +181,7 @@
         self.assertRaises((UnicodeEncodeError, ValueError, TclError),
                           tcl.getboolean, 'on\ud800')
 
+    @unittest.skipIf(sys.platform.startswith("sunos"), "test doesn't work well on Solaris")
     def testEvalFile(self):
         tcl = self.interp
         filename = os_helper.TESTFN_ASCII
@@ -195,6 +196,7 @@
         self.assertEqual(tcl.eval('set b'),'2')
         self.assertEqual(tcl.eval('set c'),'3')
 
+    @unittest.skipIf(sys.platform.startswith("sunos"), "test doesn't work well on Solaris")
     def test_evalfile_null_in_result(self):
         tcl = self.interp
         filename = os_helper.TESTFN_ASCII
--- Python-3.12.1/Lib/test/test_float.py.orig
+++ Python-3.12.1/Lib/test/test_float.py
@@ -152,7 +152,7 @@
         # non-UTF-8 byte string
         check(b'123\xa0')
 
-    @support.run_with_locale('LC_NUMERIC', 'fr_FR', 'de_DE')
+    @support.run_with_locale('LC_NUMERIC', 'fr_FR.UTF-8', 'de_DE.UTF-8')
     def test_float_with_comma(self):
         # set locale to something that doesn't use '.' for the decimal point
         # float must not accept the locale specific decimal point but
--- Python-3.12.1/Lib/test/test_pkgutil.py.orig
+++ Python-3.12.1/Lib/test/test_pkgutil.py
@@ -520,7 +520,11 @@
         sys.path.insert(0, os.path.join(self.basedir, 'b'))
         import pkg
         self.addCleanup(unload, 'pkg')
-        self.assertEqual(len(pkg.__path__), 2)
+        # Solaris has its own pkg package that breaks this test
+        if os.path.exists("/usr/lib/python3.12/vendor-packages/pkg/"):
+            self.assertEqual(len(pkg.__path__), 3)
+        else:
+            self.assertEqual(len(pkg.__path__), 2)
         import pkg.subpkg
         self.addCleanup(unload, 'pkg.subpkg')
         self.assertEqual(len(pkg.subpkg.__path__), 2)
--- Python-3.12.1/Lib/test/test_gdb/__init__.py.orig
+++ Python-3.12.1/Lib/test/test_gdb/__init__.py
@@ -15,6 +15,9 @@
     # debug symbol files.
     raise unittest.SkipTest("test_gdb doesn't work on Windows")
 
+if sys.platform.startswith("sunos"):
+    raise unittest.SkipTest("test doesn't work well on Solaris")
+
 if support.PGO:
     raise unittest.SkipTest("test_gdb is not useful for PGO")
 
--- Python-3.12.1/Lib/test/test_re.py.orig
+++ Python-3.12.1/Lib/test/test_re.py
@@ -1952,6 +1952,8 @@
         self.assertTrue(re.match(b'(?Li)\xc5', b'\xe5'))
         self.assertTrue(re.match(b'(?Li)\xe5', b'\xc5'))
 
+    @unittest.skipIf(sys.platform.startswith("sunos"),
+                     "test doesn't work well on sparc Solaris")
     def check_en_US_utf8(self):
         locale.setlocale(locale.LC_CTYPE, 'en_US.utf8')
         self.assertTrue(re.match(b'\xc5\xe5', b'\xc5\xe5', re.L|re.I))
@@ -1965,6 +1967,8 @@
         is_emscripten or is_wasi,
         "musl libc issue on Emscripten/WASI, bpo-46390"
     )
+    @unittest.skipIf(sys.platform.startswith("sunos"),
+                     "test doesn't work well on sparc Solaris")
     def test_locale_compiled(self):
         oldlocale = locale.setlocale(locale.LC_CTYPE)
         self.addCleanup(locale.setlocale, locale.LC_CTYPE, oldlocale)
--- Python-3.12.1/Lib/test/test_gdb/__init__.py.~2~	Wed Feb  7 07:26:40 2024
+++ Python-3.12.1/Lib/test/test_gdb/__init__.py	Wed Feb  7 08:02:24 2024
@@ -4,6 +4,7 @@
 # Lib/test/test_jit_gdb.py
 
 import os
+import sys
 import sysconfig
 import unittest
 from test import support
