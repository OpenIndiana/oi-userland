py$(PYV): remove tox env folder $(@D)/.tox/py$(PYV)
py$(PYV): commands[0]> python -m coverage run -m unittest discover -t . -s test --verbose
test_closing (test.test_contextlib.ClosingTestCase) ... ok
test_closing_error (test.test_contextlib.ClosingTestCase) ... ok
test_instance_docs (test.test_contextlib.ClosingTestCase) ... ok
test_contextmanager_attribs (test.test_contextlib.ContextManagerTestCase) ... ok
test_contextmanager_do_not_unchain_non_stopiteration_exceptions (test.test_contextlib.ContextManagerTestCase) ... ok
test_contextmanager_doc_attrib (test.test_contextlib.ContextManagerTestCase) ... ok
test_contextmanager_except (test.test_contextlib.ContextManagerTestCase) ... ok
test_contextmanager_except_pep479 (test.test_contextlib.ContextManagerTestCase) ... ok
test_contextmanager_except_stopiter (test.test_contextlib.ContextManagerTestCase) ... ok
test_contextmanager_finally (test.test_contextlib.ContextManagerTestCase) ... ok
test_contextmanager_no_reraise (test.test_contextlib.ContextManagerTestCase) ... ok
test_contextmanager_plain (test.test_contextlib.ContextManagerTestCase) ... ok
test_contextmanager_trap_yield_after_throw (test.test_contextlib.ContextManagerTestCase) ... ok
test_instance_docstring_given_cm_docstring (test.test_contextlib.ContextManagerTestCase) ... ok
test_keywords (test.test_contextlib.ContextManagerTestCase) ... ok
test_nokeepref (test.test_contextlib.ContextManagerTestCase) ... ok
test_param_errors (test.test_contextlib.ContextManagerTestCase) ... ok
test_recursive (test.test_contextlib.ContextManagerTestCase) ... ok
testWithOpen (test.test_contextlib.FileContextTestCase) ... ok
testWithBoundedSemaphore (test.test_contextlib.LockContextTestCase) ... ok
testWithCondition (test.test_contextlib.LockContextTestCase) ... ok
testWithLock (test.test_contextlib.LockContextTestCase) ... ok
testWithRLock (test.test_contextlib.LockContextTestCase) ... ok
testWithSemaphore (test.test_contextlib.LockContextTestCase) ... ok
test_nullcontext (test.test_contextlib.NullcontextTestCase) ... ok
test_enter (test.test_contextlib.TestAbstractContextManager) ... ok
test_exit_is_abstract (test.test_contextlib.TestAbstractContextManager) ... ok
test_structural_subclassing (test.test_contextlib.TestAbstractContextManager) ... ok
test_contextdecorator (test.test_contextlib.TestContextDecorator) ... ok
test_contextdecorator_as_mixin (test.test_contextlib.TestContextDecorator) ... ok
test_contextdecorator_with_exception (test.test_contextlib.TestContextDecorator) ... ok
test_contextmanager_as_decorator (test.test_contextlib.TestContextDecorator) ... ok
test_decorating_method (test.test_contextlib.TestContextDecorator) ... ok
test_decorator (test.test_contextlib.TestContextDecorator) ... ok
test_decorator_with_exception (test.test_contextlib.TestContextDecorator) ... ok
test_instance_docs (test.test_contextlib.TestContextDecorator) ... ok
test_typo_enter (test.test_contextlib.TestContextDecorator) ... ok
test_typo_exit (test.test_contextlib.TestContextDecorator) ... ok
test_body_exception_suppress (test.test_contextlib.TestExitStack) ... ok
test_callback (test.test_contextlib.TestExitStack) ... ok
test_close (test.test_contextlib.TestExitStack) ... ok
test_dont_reraise_RuntimeError (test.test_contextlib.TestExitStack) ... ok
test_enter_context (test.test_contextlib.TestExitStack) ... ok
test_excessive_nesting (test.test_contextlib.TestExitStack) ... ok
test_exit_exception_chaining (test.test_contextlib.TestExitStack) ... ok
test_exit_exception_chaining_reference (test.test_contextlib.TestExitStack) ... ok
test_exit_exception_chaining_suppress (test.test_contextlib.TestExitStack) ... ok
test_exit_exception_non_suppressing (test.test_contextlib.TestExitStack) ... ok
test_exit_exception_with_correct_context (test.test_contextlib.TestExitStack) ... ok
test_exit_exception_with_existing_context (test.test_contextlib.TestExitStack) ... ok
test_exit_raise (test.test_contextlib.TestExitStack) ... ok
test_exit_suppress (test.test_contextlib.TestExitStack) ... ok
test_instance_bypass (test.test_contextlib.TestExitStack) ... ok
test_instance_docs (test.test_contextlib.TestExitStack) ... ok
test_no_resources (test.test_contextlib.TestExitStack) ... ok
test_pop_all (test.test_contextlib.TestExitStack) ... ok
test_push (test.test_contextlib.TestExitStack) ... ok
test_cm_is_reentrant (test.test_contextlib.TestRedirectStderr) ... ok
test_cm_is_reusable (test.test_contextlib.TestRedirectStderr) ... ok
test_enter_result_is_target (test.test_contextlib.TestRedirectStderr) ... ok
test_instance_docs (test.test_contextlib.TestRedirectStderr) ... ok
test_no_redirect_in_init (test.test_contextlib.TestRedirectStderr) ... ok
test_redirect_to_string_io (test.test_contextlib.TestRedirectStderr) ... ok
test_cm_is_reentrant (test.test_contextlib.TestRedirectStdout) ... ok
test_cm_is_reusable (test.test_contextlib.TestRedirectStdout) ... ok
test_enter_result_is_target (test.test_contextlib.TestRedirectStdout) ... ok
test_instance_docs (test.test_contextlib.TestRedirectStdout) ... ok
test_no_redirect_in_init (test.test_contextlib.TestRedirectStdout) ... ok
test_redirect_to_string_io (test.test_contextlib.TestRedirectStdout) ... ok
test_cm_is_reentrant (test.test_contextlib.TestSuppress) ... ok
test_exact_exception (test.test_contextlib.TestSuppress) ... ok
test_exception_hierarchy (test.test_contextlib.TestSuppress) ... ok
test_instance_docs (test.test_contextlib.TestSuppress) ... ok
test_multiple_exception_args (test.test_contextlib.TestSuppress) ... ok
test_no_args (test.test_contextlib.TestSuppress) ... ok
test_no_exception (test.test_contextlib.TestSuppress) ... ok
test_no_result_from_enter (test.test_contextlib.TestSuppress) ... ok
test_other_exception (test.test_contextlib.TestSuppress) ... ok
test_aclosing (test.test_contextlib_async.AclosingTestCase) ... ok
test_aclosing_bpo41229 (test.test_contextlib_async.AclosingTestCase) ... ok
test_aclosing_error (test.test_contextlib_async.AclosingTestCase) ... ok
test_instance_docs (test.test_contextlib_async.AclosingTestCase) ... ok
test_contextmanager_attribs (test.test_contextlib_async.AsyncContextManagerTestCase) ... ok
test_contextmanager_doc_attrib (test.test_contextlib_async.AsyncContextManagerTestCase) ... ok
test_contextmanager_except (test.test_contextlib_async.AsyncContextManagerTestCase) ... ok
test_contextmanager_except_stopiter (test.test_contextlib_async.AsyncContextManagerTestCase) ... ok
test_contextmanager_finally (test.test_contextlib_async.AsyncContextManagerTestCase) ... ok
test_contextmanager_no_reraise (test.test_contextlib_async.AsyncContextManagerTestCase) ... ok
test_contextmanager_non_normalised (test.test_contextlib_async.AsyncContextManagerTestCase) ... ok
test_contextmanager_plain (test.test_contextlib_async.AsyncContextManagerTestCase) ... ok
test_contextmanager_trap_no_yield (test.test_contextlib_async.AsyncContextManagerTestCase) ... ok
test_contextmanager_trap_second_yield (test.test_contextlib_async.AsyncContextManagerTestCase) ... Task was destroyed but it is pending!
task: <Task pending coro=<<async_generator_athrow without __name__>()>>
ok
test_contextmanager_trap_yield_after_throw (test.test_contextlib_async.AsyncContextManagerTestCase) ... Task was destroyed but it is pending!
task: <Task pending coro=<<async_generator_athrow without __name__>()>>
ok
test_contextmanager_wrap_runtimeerror (test.test_contextlib_async.AsyncContextManagerTestCase) ... ok
test_instance_docstring_given_cm_docstring (test.test_contextlib_async.AsyncContextManagerTestCase) ... ok
test_keywords (test.test_contextlib_async.AsyncContextManagerTestCase) ... ok
test_recursive (test.test_contextlib_async.AsyncContextManagerTestCase) ... ok
test_async_gen_propagates_generator_exit (test.test_contextlib_async.TestAbstractAsyncContextManager) ... Task was destroyed but it is pending!
task: <Task pending coro=<<async_generator_athrow without __name__>()>>
ok
test_enter (test.test_contextlib_async.TestAbstractAsyncContextManager) ... ok
test_exit_is_abstract (test.test_contextlib_async.TestAbstractAsyncContextManager) ... ok
test_structural_subclassing (test.test_contextlib_async.TestAbstractAsyncContextManager) ... ok
test_async_callback (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_async_enter_context (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_async_exit_exception_chaining (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_async_push (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_body_exception_suppress (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_callback (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_close (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_dont_reraise_RuntimeError (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_enter_context (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_excessive_nesting (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_exit_exception_chaining (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_exit_exception_chaining_reference (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_exit_exception_chaining_suppress (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_exit_exception_non_suppressing (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_exit_exception_with_correct_context (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_exit_exception_with_existing_context (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_exit_raise (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_exit_suppress (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_instance_bypass (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_instance_docs (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_no_resources (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_pop_all (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_push (test.test_contextlib_async.TestAsyncExitStack) ... ok
test_async_nullcontext (test.test_contextlib_async.TestAsyncNullcontext) ... ok

----------------------------------------------------------------------
Ran 125 tests

OK
py$(PYV): commands[1]> python -m coverage report
Name                            Stmts   Miss  Cover
---------------------------------------------------
contextlib2/__init__.py           353     14    96%
test/__init__.py                    0      0   100%
test/support/__init__.py            3      0   100%
test/support/os_helper.py           2      0   100%
test/test_contextlib.py           796     21    97%
test/test_contextlib_async.py     393      8    98%
---------------------------------------------------
TOTAL                            1547     43    97%
py$(PYV): commands[2]> python -m coverage xml
Wrote XML report to coverage.xml
  py$(PYV): OK
  congratulations :)
