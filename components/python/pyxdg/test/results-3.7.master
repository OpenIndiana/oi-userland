============================= test session starts ==============================
platform sunos5 -- Python $(PYTHON_VERSION).X -- $(PYTHON)
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('$(@D)/.hypothesis/examples')
rootdir: $(@D)
collecting ... collected 57 items

test/test_basedirectory.py::BaseDirectoryTest::test_load_config_paths PASSED
test/test_basedirectory.py::BaseDirectoryTest::test_load_first_config PASSED
test/test_basedirectory.py::BaseDirectoryTest::test_runtime_dir PASSED
test/test_basedirectory.py::BaseDirectoryTest::test_runtime_dir_notset PASSED
test/test_basedirectory.py::BaseDirectoryTest::test_save_cache_path PASSED
test/test_basedirectory.py::BaseDirectoryTest::test_save_config_path PASSED
test/test_basedirectory.py::BaseDirectoryTest::test_save_data_path PASSED
test/test_basedirectory.py::BaseDirectoryTest::test_save_state_path PASSED
test/test_desktop.py::DesktopEntryTest::test_basic PASSED
test/test_desktop.py::DesktopEntryTest::test_invalid PASSED
test/test_desktop.py::DesktopEntryTest::test_invalid_unicode PASSED
test/test_desktop.py::DesktopEntryTest::test_unicode_name PASSED
test/test_desktop.py::DesktopEntryTest::test_validate PASSED
test/test_desktop.py::DesktopEntryTest::test_values PASSED
test/test_desktop.py::DesktopEntryTest::test_write_file PASSED
test/test_desktop.py::TestTryExec::test_absent PASSED
test/test_desktop.py::TestTryExec::test_no_TryExec PASSED
test/test_desktop.py::TestTryExec::test_present PASSED
test/test_icon.py::IconDataTest::test_read_icon_data PASSED
test/test_icon.py::IconThemeTest::test_find_icon_exists PASSED
test/test_icon.py::IconThemeTest::test_find_icon_nonexistant PASSED
test/test_icon.py::IconThemeTest::test_validate_icon_theme PASSED
test/test_inifile.py::IniFileTest::test_check_string PASSED
test/test_inifile.py::IniFileTest::test_modify PASSED
test/test_inifile.py::IniFileTest::test_value_types PASSED
test/test_locale.py::LocaleTest::test_expand_languages PASSED
test/test_menu.py::MenuTest::test_empty_legacy_dirs PASSED
test/test_menu.py::MenuTest::test_kde_legacy_dirs PASSED
test/test_menu.py::MenuTest::test_parse_layout PASSED
test/test_menu.py::MenuTest::test_parse_menu PASSED
test/test_menu.py::MenuTest::test_unicode_menuentry PASSED
test/test_menu_rules.py::RulesTest::test_rule_from_filename PASSED
test/test_menu_rules.py::RulesTest::test_rule_from_node PASSED
test/test_mime.py::GlobDBTest::test_all_matches PASSED
test/test_mime.py::GlobDBTest::test_build_globdb PASSED
test/test_mime.py::GlobDBTest::test_first_match PASSED
test/test_mime.py::GlobDBTest::test_get_extensions PASSED
test/test_mime.py::GlobsParsingTest::test_parsing PASSED
test/test_mime.py::MagicDBTest::test_match_data PASSED
test/test_mime.py::MagicDBTest::test_match_file PASSED
test/test_mime.py::MagicDBTest::test_match_nested PASSED
test/test_mime.py::MagicDBTest::test_parsing PASSED
test/test_mime.py::MimeTest::test_by_name PASSED
test/test_mime.py::MimeTest::test_canonical PASSED
test/test_mime.py::MimeTest::test_create_mimetype PASSED
test/test_mime.py::MimeTest::test_get_comment PASSED
test/test_mime.py::MimeTest::test_get_type FAILED
test/test_mime.py::MimeTest::test_get_type2 FAILED
test/test_mime.py::MimeTest::test_get_type_by_contents PASSED
test/test_mime.py::MimeTest::test_get_type_by_data PASSED
test/test_mime.py::MimeTest::test_get_type_by_name PASSED
test/test_mime.py::MimeTest::test_inheritance PASSED
test/test_mime.py::MimeTest::test_is_text PASSED
test/test_mime.py::MimeTest::test_lookup PASSED
test/test_mime.py::MimeTest::test_mimetype_repr PASSED
test/test_recentfiles.py::RecentFilesTest::test_get_files PASSED
test/test_recentfiles.py::RecentFilesTest::test_modify PASSED

=================================== FAILURES ===================================
____________________________ MimeTest.test_get_type ____________________________

self = <test_mime.MimeTest testMethod=test_get_type>

    def test_get_type(self):
        # File that doesn't exist - get type by name
        imgpng = Mime.get_type(example_file("test.gif"))
        self.check_mimetype(imgpng, 'image', 'gif')
    
        # File that does exist - get type by contents
        imgpng = Mime.get_type(example_file("png_file"))
        self.check_mimetype(imgpng, 'image', 'png')
    
        # Directory - special case
        inodedir = Mime.get_type(example_file("subdir"))
        self.check_mimetype(inodedir, 'inode', 'directory')
    
        # Mystery files
        mystery_text = Mime.get_type(example_file('mystery_text'))
        self.check_mimetype(mystery_text, 'text', 'plain')
        mystery_exe = Mime.get_type(example_file('mystery_exe'))
        self.check_mimetype(mystery_exe, 'application', 'executable')
    
        # Symlink
        self.check_mimetype(Mime.get_type(example_file("png_symlink")),
                                    'image', 'png')
        self.check_mimetype(Mime.get_type(example_file("png_symlink"), follow=False),
>                                   'inode', 'symlink')

test/test_mime.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
test/test_mime.py:14: in check_mimetype
    self.assertEqual(mimetype.media, media)
E   AssertionError: 'image' != 'inode'
E   - image
E   + inode
___________________________ MimeTest.test_get_type2 ____________________________

self = <test_mime.MimeTest testMethod=test_get_type2>

    def test_get_type2(self):
        # File that doesn't exist - use the name
        self.check_mimetype(Mime.get_type2(example_file('test.gif')), 'image', 'gif')
    
        # File that does exist - use the contents
        self.check_mimetype(Mime.get_type2(example_file('png_file')), 'image', 'png')
    
        # Does exist - use name before contents
        self.check_mimetype(Mime.get_type2(example_file('file.png')), 'image', 'png')
        self.check_mimetype(Mime.get_type2(example_file('word.doc')), 'application', 'msword')
    
        # Ambiguous file extension
        glade_mime = Mime.get_type2(example_file('glade.ui'))
        self.assertEqual(glade_mime.media, 'application')
        # Grumble, this is still ambiguous on some systems
        self.assertIn(glade_mime.subtype, {'x-gtk-builder', 'x-glade'})
        self.check_mimetype(Mime.get_type2(example_file('qtdesigner.ui')), 'application', 'x-designer')
    
        # text/x-python has greater weight than text/x-readme
        self.check_mimetype(Mime.get_type2(example_file('README.py')), 'text', 'x-python')
    
        # Directory - special filesystem object
        self.check_mimetype(Mime.get_type2(example_file('subdir')), 'inode', 'directory')
    
        # Mystery files:
        mystery_missing = Mime.get_type2(example_file('mystery_missing'))
        self.check_mimetype(mystery_missing, 'application', 'octet-stream')
        mystery_binary = Mime.get_type2(example_file('mystery_binary'))
        self.check_mimetype(mystery_binary, 'application', 'octet-stream')
        mystery_text = Mime.get_type2(example_file('mystery_text'))
        self.check_mimetype(mystery_text, 'text', 'plain')
        mystery_exe = Mime.get_type2(example_file('mystery_exe'))
        self.check_mimetype(mystery_exe, 'application', 'executable')
    
        # Symlink
        self.check_mimetype(Mime.get_type2(example_file("png_symlink")),
                                    'image', 'png')
        self.check_mimetype(Mime.get_type2(example_file("png_symlink"), follow=False),
>                                   'inode', 'symlink')

test/test_mime.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
test/test_mime.py:14: in check_mimetype
    self.assertEqual(mimetype.media, media)
E   AssertionError: 'image' != 'inode'
E   - image
E   + inode
=============================== warnings summary ===============================
test/test_basedirectory.py:12
  $(@D)/test/test_basedirectory.py:12: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    from imp import reload

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
======== 2 failed, 55 passed, 1 warning ========
