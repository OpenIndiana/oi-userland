    license for the distribution.

    You are also reminded that if the distribution is intended to be
    uploaded to the CPAN, it must be an OSI-approved open source license.
    Commercial software is not permitted on the CPAN.

  license_from
      license_from 'lib/My/Module.pm';

    The "license_from" command retrieves the distribution license from a
    particular file contained in the distribution package. Most often this
    is done from the main module.

    "license_from" will look inside the POD within the indicated file for a
    licensing or copyright-related section and scan for a variety of strings
    that identify the general class of license.

    At this time it supports only the 6 values mentioned above in the
    "license" command summary.

  perl_version
      perl_version '5.006';

    The "perl_version" command is used to specify the minimum version of the
    perl interpreter your distribution requires.

    When specifying the version, you should try to use the normalized
    version string. Perl version segments are 3 digits long, so a dependency
    on Perl 5.6 will become '5.006' and Perl 5.10.2 will become '5.010002'.

  perl_version_from
      perl_version_from 'lib/My/Module.pm'

    The "perl_version_from" command retrieves the minimum perl interpreter
    version from a particular file contained in the distribution package.
    Most often this is done from the main module.

    The minimum version is detected by scanning the file for "use 5.xxx"
    pragma calls in the module file.

  recommends
      recommends 'Text::CSV_XS' => '0.50'

    The "recommends" command indicates an optional run-time module that
    provides extra functionality. Recommended dependencies are not needed to
    build or test your distribution, but are considered "nice to have".

    As with "requires", the dependency is on a module and not a
    distribution. A version of zero indicates that any version of the module
    is recommended.

  requires
      requires 'List::Util' => 0;
      requires 'LWP'        => '5.69';

    The "requires" command indicates a normal run-time dependency of your
    distribution on another module. Most distributions will have one or more
    of these commands, indicating which CPAN (or otherwise) modules your
    distribution needs.

    A "requires" dependency can be verbalised as *"If you wish to install
    and use this distribution, you must first install these modules first"*.

    Note that the dependency is on a module and not a distribution. This is
    to ensure that your dependency stays correct, even if the module is
    moved or merged into a different distribution, as is occasionally the
    case.

    A dependency on version zero indicates any version of module is
    sufficient. Versions should generally be quoted for clarity.

  test_requires
      test_requires 'Test::More' => '0.47';

    The "test_requires" command indicates a test script dependency for the
    distribution. The specification format is identical to that of the
    "requires" command.

    The "test_requires" command is distinct from the "requires" command in
    that it indicates a module that is needed only during the testing of the
    distribution (often a period of only a few seconds) but will not be
    needed after the distribution is installed.

    The "testrequires" command is used to allow the installer some
    flexibility in how it provides the module, and to allow downstream
    packagers (Debian, FreeBSD, ActivePerl etc) to retain only the
    dependencies needed for run-time operation.

    The "include" command is sometimes used by some authors along with
    "test_requires" to bundle a small well-tested module into the
    distribution package itself rather than inflict yet another module
    installation on users installing from CPAN directly.

  configure_requires
      configure_requires 'File::Spec' => '0.80';

    The "configure_requires" command indicates a configure-time dependency
    for the distribution. The specification format is identical to that of
    the "requires" command.

    The "configure_requires" command is used to get around the conundrum of
    how to use a CPAN module in your Makefile.PL, when you have to load
    Makefile.PL (and thus the CPAN module) in order to know that you need
    it.

    Traditionally, this circular logic could not be broken and so
    Makefile.PL scripts needed to rely on lowest-common-denominator
    approaches, or to bundle those dependencies using something like the
    "include" command.

    The "configure_requires" command creates an entry in the special
    configure_requires: key in the distribution's META.yml file.

    Although most of META.yml is considered advisory only, a CPAN client
    will treat the contents of configure_requires: as authoritative, and
    install the listed modules before it executes the Makefile.PL (from
    which it then determines the other dependencies).

    Please note that support for configure_requires: in CPAN clients is not
    100% complete at time of writing, and still cannot be relied upon.

    Because Module::Install itself only supports 5.005, it will silently add
    the equivalent of a "configure_requires( perl => '5.005' );" command to
    your distribution.

  requires_external_bin
      requires_external_bin 'cvs';

    As part of its role as the dominant "glue" language, a lot of Perl
    modules run commands or programs on the host system.

    The "requires_external_bin" command is used to verify that a particular
    command is available on the host system.

    Unlike a missing Perl module, a missing external binary is unresolvable
    at make-time, and so the Makefile.PL run will abort with a "NA" (Not
    Applicable) result.

    In future, this command will also add additional information to the
    metadata for the dist, so that auto-packagers for particular operating
    system are more-easily able to auto-discover the appropriate non-Perl
    packages needed as a dependency.

  install_script
      # The following are equivalent
      install_script 'script/scriptname'

    The "install_script" command provides support for the installation of
    scripts that will become available at the console on both Unix and
    Windows (in the later case by wrapping it up as a .bat file).

    Note that is it normal practice to not put a .pl on the end of such
    scripts, so that they feel more natural when being used.

    In the example above, the script/scriptname program could be run after
    the installation just by doing the following.

      > scriptname
      Running scriptname 0.01...

      >

    By convention, scripts should be placed in a /script directory within
    your distribution. To support less typing, if a script is located in the
    script directory, you need refer to it by name only.

      # The following are equivalent
      install_script 'foo';
      install_script 'script/foo';

  no_index
      no_index directory => 'examples';
      no_index package   => 'DB';

    Quite often a distribution will provide example scripts or testing
    modules (.pm files) as well as the actual library modules.

    In almost all situations, you do not want these indexed in the CPAN
    index, the master Perl packages list, or displayed on
    <https://metacpan.org/> or <http://search.cpan.org/> websites, you just
    want them along for the ride.

    The "no_index" command is used to indicate directories or files where
    there might be non-library .pm files or other files that the CPAN
    indexer and websites such as <https://metacpan.org/> or
    <http://search.cpan.org/> should explicitly ignore.

    The most common situation is to ignore example or demo directories, but
    a variety of different situations may require a "no_index" entry.

    Another common use for "no_index" is to prevent the PAUSE indexer
    complaining when your module makes changes inside a "package DB" block.
    This is used to interact with the debugger in some specific ways.

    See the META.yml documentation for more details on what "no_index"
    values are allowed.

    The inc, t and share (if "install_share" is used) directories are
    automatically "no_index"'ed for you if found and do not require an
    explicit command.

    To summarize, if you can see it on <https://metacpan.org/> or
    <http://search.cpan.org/> and you shouldn't be able to, you need a
    "no_index" entry to remove it.

  installdirs, install_as_*
      installdirs 'site'; # the default

      install_as_core;    # alias for installdirs 'perl'
      install_as_cpan;    # alias for installdirs 'site'
      install_as_site;    # alias for installdirs 'site'
      install_as_vendor;  # alias for installdirs 'vendor'

    The "installdirs" and "install_as" commands specify the location where
    the module should be installed; this is the equivalent to
    ExtUtils::MakeMaker's "INSTALLDIRS" option. For almost all regular
    modules, the default is recommended, and need not be changed. Dual-life
    (core and CPAN) modules, as well as vendor-specific modules, may need to
    use the other options.

    If unsure, do not use this option.

  WriteAll
    The "WriteAll" command is generally the last command in the file; it
    writes out META.yml and Makefile so the user can run the "make", "make
    test", "make install" install sequence.

EXTENSIONS
    All extensions belong to the Module::Install::* namespace, and inherit
    from Module::Install::Base. There are three categories of extensions:

  Standard Extensions
    Methods defined by a standard extension may be called as plain functions
    inside Makefile.PL; a corresponding singleton object will be spawned
    automatically. Other extensions may also invoke its methods just like
    their own methods:

        # delegates to $other_extension_obj->method_name(@args)
        $self->method_name(@args);

    At the first time an extension's method is invoked, a POD-stripped
    version of it will be included under the inc/Module/Install/ directory,
    and becomes *fixed* -- i.e., even if the user had installed a different
    version of the same extension, the included one will still be used
    instead.

    If the author wish to upgrade extensions in inc/ with installed ones,
    simply run "perl Makefile.PL" again; Module::Install determines whether
    you are an author by the existence of the inc/.author/ directory.
    End-users can reinitialize everything and become the author by typing
    "make realclean" and "perl Makefile.PL".

  Private Extensions
    Those extensions take the form of Module::Install::PRIVATE and
    Module::Install::PRIVATE::*.

    Authors are encouraged to put all existing Makefile.PL magics into such
    extensions (e.g. Module::Install::PRIVATE for common bits;
    Module::Install::PRIVATE::DISTNAME for functions specific to a
    distribution).

    Private extensions should not to be released on CPAN; simply put them
    somewhere in your @INC, under the "Module/Install/" directory, and start
    using their functions in Makefile.PL. Like standard extensions, they
    will never be installed on the end-user's machine, and therefore never
    conflict with other people's private extensions.

  Administrative Extensions
    Extensions under the Module::Install::Admin::* namespace are never
    included with the distribution. Their methods are not directly
    accessible from Makefile.PL or other extensions; they are invoked like
    this:

        # delegates to $other_admin_extension_obj->method_name(@args)
        $self->admin->method_name(@args);

    These methods only take effect during the *initialization* run, when
    inc/ is being populated; they are ignored for end-users. Again, to
    re-initialize everything, just run "perl Makefile.PL" as the author.

    Scripts (usually one-liners in Makefile) that wish to dispatch AUTOLOAD
    functions into administrative extensions (instead of standard
    extensions) should use the Module::Install::Admin module directly. See
    Module::Install::Admin for details.

EXTENSIONS
    Detailed information is provided for all (some) of the relevant modules
    via their own POD documentation.

  Module::Install::AutoInstall
    Provides "auto_install()" to automatically fetch and install
    prerequisites.

  Module::Install::Base
    The base class for all extensions

  Module::Install::Bundle
    Provides the "bundle" family of commands, allowing you to bundle another
    CPAN distribution within your distribution.

  Module::Install::Fetch
    Handles install-time fetching of files from remote servers via FTP and
    HTTP.

  Module::Install::Include
    Provides the "include" family of commands for embedding modules that are
    only need at build-time in your distribution and won't be installed.

  Module::Install::Inline
    Provides "&Inline->write" to replace Inline::MakeMaker's functionality
    for making Inline-based modules (and cleaning up).

    However, you should invoke this with "WriteAll( inline => 1 )".

  Module::Install::Makefile
    Provides "&Makefile->write" to generate a Makefile for you distribution.

  Module::Install::Metadata
    Provides "&Meta->write" to generate a META.yml file for your
    distribution.

  Module::Install::PAR
    Makes pre-compiled module binary packages from the built blib directory,
    and download existing ones to save recompiling.

  Module::Install::Run
    Determines if commands are available on the user's machine, and runs
    them via IPC::Run3.

  Module::Install::Scripts
    Handles packaging and installation of scripts to various bin dirs.

  Module::Install::Win32
    Functions for installing modules on Win32 and finding/installing
    nmake.exe for users that need it.

  Module::Install::WriteAll
    Provides the "WriteAll", which writes all the requires files, such as
    META.yml and Makefile.

    "WriteAll" takes four optional named parameters:

    "check_nmake" (defaults to true)
        If true, invokes functions with the same name.

        *The use of this param is no longer recommended.*

    "inline" (defaults to false)
        If true, invokes "&Inline->write" Inline modules.

    "meta" (defaults to true)
        If true, writes a "META.yml" file.

    "sign" (defaults to false)
        If true, invokes "sign" command to digitally sign erm... something.

  Module::Install::Admin::Find
    Package-time functions for finding extensions, installed packages and
    files in subdirectories.

  Module::Install::Admin::Manifest
    Package-time functions for manipulating and updating the MANIFEST file.

  Module::Install::Admin::Metadata
    Package-time functions for manipulating and updating the META.yml file.

  Module::Install::Admin::ScanDeps
    Package-time scanning for non-core dependencies via Module::ScanDeps and
    Module::CoreList.

FAQ
  What are the benefits of using Module::Install?
    Here is a brief overview of the reasons:

    *   Extremely easy for beginners to learn

    *   Does everything ExtUtils::MakeMaker does.

    *   Does it with a dramatically simpler syntax.

    *   Automatically scans for metadata for you.

    *   Requires no installation for end-users.

    *   Guaranteed forward-compatibility.

    *   Automatically updates your MANIFEST.

    *   Distributing scripts is easy.

    *   Include prerequisite modules (less dependencies to install)

    *   Auto-installation of prerequisites.

    *   Support for Inline-based modules.

    *   Support for File::ShareDir shared data files

    *   Support for precompiled PAR binaries.

    *   Deals with Win32 install issues for you.

    By greatly shrinking and simplifying the syntax, Module::Install keeps
    the amount of work required to maintain your Makefile.PL files to an
    absolute minimum.

    And if you maintain more than one module than needs to do unusual
    installation tricks, you can create a specific module to abstract away
    this complexity.

  Module::Install isn't at 1.00 yet, is it safe to use yet?
    As long as you are going to periodically do incremental releases to get
    any bug fixes and new functionality, yes.

    If you don't plan to do incremental releases, it might be a good idea to
    continue to wait for a while.

COOKBOOK / EXAMPLES
    The following are some real-life examples of Makefile.PL files using
    Module::Install.

  Method::Alias
    Method::Alias is a trivially-small utility module, with almost the
    smallest possible Makefile.PL.

      use inc::Module::Install;

      name          'Method-Alias';
      all_from      'lib/Method/Alias.pm';
      test_requires 'Test::More' => '0.42';

  File::HomeDir
    File::HomeDir locates your home directory on any platform. It needs an
    installer that can handle different dependencies on different platforms.

      use inc::Module::Install;

      name          'File-HomeDir';
      all_from      'lib/File/HomeDir.pm';
      requires      'File::Spec' => '0.80';
      test_requires 'Test::More' => '0.47';

      if ( $MacPerl::Version ) {
          # Needed on legacy Mac OS 9
          requires 'Mac::Files' => 0;
      }

      if ( $^O eq 'MXWin32' ) {
          # Needed on Windows platforms
          requires 'Win32::TieRegistry' => 0;
      }

      WriteAll;

TO DO
    Implement Module::Install::Compiled and Module::Install::Admin::Compiled
    to integrate the Module::Compiled "perl 6 to perl 5" functionality with
    Module::Install. Because this would add SIGNIFICANT dependencies (i.e.
    pugs!) this should almost certainly be distributed as a separate
    distribution.

    Go over POD docs in detail.

    Test recursive Makefile directories

    The test suite needs a great deal more test scripts.

    Dependencies on shared libraries (libxml/libxml.dll etc) and binary
    files so that debian/Win32/etc autopackaging applications can create the
    appropriate package-level dependencies there.

    EU::MM 6.06_03+ supports META.yml natively. Maybe probe for that?

===========================================================================

This program is free software; you can redistribute it and/or modify
it under the terms of either:

	a) the GNU General Public License as published by the Free
	Software Foundation; either version 1, or (at your option) any
	later version, or

	b) the "Artistic License" which comes with this Kit.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See either
the GNU General Public License or the Artistic License for more details.

You should have received a copy of the Artistic License with this
Kit, in the file named "Artistic".  If not, I'll be glad to provide one.

You should also have received a copy of the GNU General Public License
along with this program in the file named "Copying". If not, write to the
Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
Boston, MA 02110-1301, USA or visit their web page on the internet at
https://www.gnu.org/copyleft/gpl.html.

For those of you that choose to use the GNU General Public License,
my interpretation of the GNU General Public License is that no Perl
script falls under the terms of the GPL unless you explicitly put
said script under the terms of the GPL yourself.  Furthermore, any
object code linked with perl does not automatically fall under the
terms of the GPL, provided such object code only adds definitions
of subroutines and variables, and does not otherwise impair the
resulting interpreter from executing any standard Perl script.  I
consider linking in C subroutines in this manner to be the moral
equivalent of defining subroutines in the Perl language itself.  You
may sell such an object file as proprietary provided that you provide
or offer to provide the Perl source, as specified by the GNU General
Public License.  (This is merely an alternate way of specifying input
to the program.)  You may also sell a binary produced by the dumping of
a running Perl script that belongs to you, provided that you provide or
offer to provide the Perl source as specified by the GPL.  (The
fact that a Perl interpreter and your code are in the same binary file
is, in this case, a form of mere aggregation.)  This is my interpretation
of the GPL.  If you still have concerns or difficulties understanding
my intent, feel free to contact me.  Of course, the Artistic License
spells all this out for your protection, so you may prefer to use that.


--- The GNU General Public License, Version 1, February 1989 ---

                    GNU GENERAL PUBLIC LICENSE
                     Version 1, February 1989

 Copyright (C) 1989 Free Software Foundation, Inc.
                    51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The license agreements of most software companies try to keep users
at the mercy of those companies.  By contrast, our General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  The
General Public License applies to the Free Software Foundation's
software and to any other program whose authors commit to using it.
You can use it for your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Specifically, the General Public License is designed to make
sure that you have the freedom to give away or sell copies of free
software, that you receive source code or can get it if you want it,
that you can change the software or use pieces of it in new free
programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

  For example, if you distribute copies of a such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must tell them their rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

  The precise terms and conditions for copying, distribution and
modification follow.

                    GNU GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License Agreement applies to any program or other work which
contains a notice placed by the copyright holder saying it may be
distributed under the terms of this General Public License.  The
"Program", below, refers to any such program or work, and a "work based
on the Program" means either the Program or any work containing the
Program or a portion of it, either verbatim or with modifications.  Each
licensee is addressed as "you".

  1. You may copy and distribute verbatim copies of the Program's source
code as you receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice and
disclaimer of warranty; keep intact all the notices that refer to this
General Public License and to the absence of any warranty; and give any
other recipients of the Program a copy of this General Public License
along with the Program.  You may charge a fee for the physical act of
transferring a copy.

  2. You may modify your copy or copies of the Program or any portion of
it, and copy and distribute such modifications under the terms of Paragraph
1 above, provided that you also do the following:

    a) cause the modified files to carry prominent notices stating that
    you changed the files and the date of any change; and

    b) cause the whole of any work that you distribute or publish, that
    in whole or in part contains the Program or any part thereof, either
    with or without modifications, to be licensed at no charge to all
    third parties under the terms of this General Public License (except
    that you may choose to grant warranty protection to some or all
    third parties, at your option).

    c) If the modified program normally reads commands interactively when
    run, you must cause it, when started running for such interactive use
    in the simplest and most usual way, to print or display an
    announcement including an appropriate copyright notice and a notice
    that there is no warranty (or else, saying that you provide a
    warranty) and that users may redistribute the program under these
    conditions, and telling the user how to view a copy of this General
    Public License.

    d) You may charge a fee for the physical act of transferring a
    copy, and you may at your option offer warranty protection in
    exchange for a fee.

Mere aggregation of another independent work with the Program (or its
derivative) on a volume of a storage or distribution medium does not bring
the other work under the scope of these terms.

  3. You may copy and distribute the Program (or a portion or derivative of
it, under Paragraph 2) in object code or executable form under the terms of
Paragraphs 1 and 2 above provided that you also do one of the following:

    a) accompany it with the complete corresponding machine-readable
    source code, which must be distributed under the terms of
    Paragraphs 1 and 2 above; or,

    b) accompany it with a written offer, valid for at least three
    years, to give any third party free (except for a nominal charge
    for the cost of distribution) a complete machine-readable copy of the
    corresponding source code, to be distributed under the terms of
    Paragraphs 1 and 2 above; or,

    c) accompany it with the information you received as to where the
    corresponding source code may be obtained.  (This alternative is
    allowed only for noncommercial distribution and only if you
    received the program in object code or executable form alone.)

Source code for a work means the preferred form of the work for making
modifications to it.  For an executable file, complete source code means
all the source code for all modules it contains; but, as a special
exception, it need not include source code for modules which are standard
libraries that accompany the operating system on which the executable
file runs, or for standard header files or definitions files that
accompany that operating system.

  4. You may not copy, modify, sublicense, distribute or transfer the
Program except as expressly provided under this General Public License.
Any attempt otherwise to copy, modify, sublicense, distribute or transfer
the Program is void, and will automatically terminate your rights to use
the Program under this License.  However, parties who have received
copies, or rights to use copies, from you under this General Public
License will not have their licenses terminated so long as such parties
remain in full compliance.

  5. By copying, distributing or modifying the Program (or any work based
on the Program) you indicate your acceptance of this license to do so,
and all its terms and conditions.

  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the original
licensor to copy, distribute or modify the Program subject to these
terms and conditions.  You may not impose any further restrictions on the
recipients' exercise of the rights granted herein.

  7. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of the license which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
the license, you may choose any version ever published by the Free Software
Foundation.

  8. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

                            NO WARRANTY

  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.

                     END OF TERMS AND CONDITIONS

        Appendix: How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to humanity, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

  To do so, attach the following notices to the program.  It is safest to
attach them to the start of each source file to most effectively convey
the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) 19yy  <name of author>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 1, or (at your option)
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA  02110-1301 USA


Also add information on how to contact you by electronic and paper mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

    Gnomovision version 69, Copyright (C) 19xx name of author
    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  Here a sample; alter the names:

  Yoyodyne, Inc., hereby disclaims all copyright interest in the
  program `Gnomovision' (a program to direct compilers to make passes
  at assemblers) written by James Hacker.

  <signature of Ty Coon>, 1 April 1989
  Ty Coon, President of Vice

That's all there is to it!


--- The "Artistic License" ---

                         The "Artistic License"

                                Preamble

The intent of this document is to state the conditions under which a
Package may be copied, such that the Copyright Holder maintains some
semblance of artistic control over the development of the package,
while giving the users of the package the right to use and distribute
the Package in a more-or-less customary fashion, plus the right to make
reasonable modifications.

Definitions:

        "Package" refers to the collection of files distributed by the
        Copyright Holder, and derivatives of that collection of files
        created through textual modification.

        "Standard Version" refers to such a Package if it has not been
        modified, or has been modified in accordance with the wishes
        of the Copyright Holder as specified below.

        "Copyright Holder" is whoever is named in the copyright or
        copyrights for the package.

        "You" is you, if you're thinking about copying or distributing
        this Package.

        "Reasonable copying fee" is whatever you can justify on the
        basis of media cost, duplication charges, time of people involved,
        and so on.  (You will not be required to justify it to the
        Copyright Holder, but only to the computing community at large
        as a market that must bear the fee.)

        "Freely Available" means that no fee is charged for the item
        itself, though there may be fees involved in handling the item.
        It also means that recipients of the item may redistribute it
        under the same conditions they received it.

1. You may make and give away verbatim copies of the source form of the
Standard Version of this Package without restriction, provided that you
duplicate all of the original copyright notices and associated disclaimers.

2. You may apply bug fixes, portability fixes and other modifications
derived from the Public Domain or from the Copyright Holder.  A Package
modified in such a way shall still be considered the Standard Version.

3. You may otherwise modify your copy of this Package in any way, provided
that you insert a prominent notice in each changed file stating how and
when you changed that file, and provided that you do at least ONE of the
following:

    a) place your modifications in the Public Domain or otherwise make them
    Freely Available, such as by posting said modifications to Usenet or
    an equivalent medium, or placing the modifications on a major archive
    site such as uunet.uu.net, or by allowing the Copyright Holder to include
    your modifications in the Standard Version of the Package.

    b) use the modified Package only within your corporation or organization.

    c) rename any non-standard executables so the names do not conflict
    with standard executables, which must also be provided, and provide
    a separate manual page for each non-standard executable that clearly
    documents how it differs from the Standard Version.

    d) make other distribution arrangements with the Copyright Holder.

4. You may distribute the programs of this Package in object code or
executable form, provided that you do at least ONE of the following:

    a) distribute a Standard Version of the executables and library files,
    together with instructions (in the manual page or equivalent) on where
    to get the Standard Version.

    b) accompany the distribution with the machine-readable source of
    the Package with your modifications.

    c) give non-standard executables non-standard names, and clearly
    document the differences in manual pages (or equivalent), together
    with instructions on where to get the Standard Version.

    d) make other distribution arrangements with the Copyright Holder.

5. You may charge a reasonable copying fee for any distribution of this
Package.  You may charge any fee you choose for support of this
Package.  You may not charge a fee for this Package itself.  However,
you may distribute this Package in aggregate with other (possibly
commercial) programs as part of a larger (possibly commercial) software
distribution provided that you do not advertise this Package as a
product of your own.  You may embed this Package's interpreter within
an executable of yours (by linking); this shall be construed as a mere
form of aggregation, provided that the complete Standard Version of the
interpreter is so embedded.

6. The scripts and library files supplied as input to or produced as
output from the programs of this Package do not automatically fall
under the copyright of this Package, but belong to whoever generated
them, and may be sold commercially, and may be aggregated with this
Package.  If such scripts or library files are aggregated with this
Package via the so-called "undump" or "unexec" methods of producing a
binary executable image, then distribution of such an image shall
neither be construed as a distribution of this Package nor shall it
fall under the restrictions of Paragraphs 3 and 4, provided that you do
not represent such an executable image as a Standard Version of this
Package.

7. C subroutines (or comparably compiled subroutines in other
languages) supplied by you and linked into this Package in order to
emulate subroutines and variables of the language defined by this
Package shall not be considered part of this Package, but are the
equivalent of input as in Paragraph 6, provided these subroutines do
not change the language in any way that would cause it to fail the
regression tests for the language.

8. Aggregation of this Package with a commercial distribution is always
permitted provided that the use of this Package is embedded; that is,
when no overt attempt is made to make this Package's interfaces visible
to the end user of the commercial distribution.  Such use shall not be
construed as a distribution of this Package.

9. The name of the Copyright Holder may not be used to endorse or promote
products derived from this software without specific prior written permission.

10. THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

                                The End
