Reduce references to source pathnames down to the respective basenames so
that builds are reproducible between workspaces.
The patch is needed to avoid embedding path information from the build area
in the compiled binares (in particular in error messages).

--- rsync-3.1.0/t_stub.c.orig	Tue Jun 11 18:06:53 2013
+++ rsync-3.1.0/t_stub.c	Mon Mar 17 14:58:24 2014
@@ -20,6 +20,7 @@
  */
 
 #include "rsync.h"
+#include <libgen.h>
 
 int modify_window = 0;
 int preallocate_files = 0;
@@ -56,7 +57,7 @@
  void _exit_cleanup(int code, const char *file, int line)
 {
 	fprintf(stderr, "exit(%d): %s(%d)\n",
-		code, file, line);
+		code, basename((char *)file), line);
 	exit(code);
 }
 
--- rsync-3.1.0/log.c.orig	Tue Jun 11 13:36:44 2013
+++ rsync-3.1.0/log.c	Mon Mar 17 14:58:51 2014
@@ -22,6 +22,7 @@
 #include "rsync.h"
 #include "itypes.h"
 #include "inums.h"
+#include <libgen.h>
 
 extern int dry_run;
 extern int am_daemon;
@@ -887,10 +888,10 @@
 		/* VANISHED is not an error, only a warning */
 		if (code == RERR_VANISHED) {
 			rprintf(FWARNING, "rsync warning: %s (code %d) at %s(%d) [%s=%s]\n",
-				name, code, file, line, who_am_i(), RSYNC_VERSION);
+				name, code, basename((char *)file), line, who_am_i(), RSYNC_VERSION);
 		} else {
 			rprintf(FERROR, "rsync error: %s (code %d) at %s(%d) [%s=%s]\n",
-				name, code, file, line, who_am_i(), RSYNC_VERSION);
+				name, code, basename((char *)file), line, who_am_i(), RSYNC_VERSION);
 		}
 	}
 }
--- rsync-3.2.2/cleanup.c.orig	2020-06-28 08:14:35.000000000 +0000
+++ rsync-3.2.2/cleanup.c	2020-07-23 18:13:38.184898463 +0000
@@ -21,6 +21,7 @@
  */

 #include "rsync.h"
+#include <libgen.h>

 extern int dry_run;
 extern int am_server;
@@ -137,7 +138,7 @@
 		if (DEBUG_GTE(EXIT, 2)) {
 			rprintf(FINFO,
 				"[%s] _exit_cleanup(code=%d, file=%s, line=%d): entered\n",
-				who_am_i(), code, file, line);
+				who_am_i(), code, basename((char *)file), line);
 		}

 #include "case_N.h"
@@ -226,7 +227,7 @@
 			if (am_server && exit_code)
 				usleep(50);
 #endif
-			log_exit(exit_code, exit_file, exit_line);
+			log_exit(exit_code, basename((char *)exit_file), exit_line);
 		}

 #include "case_N.h"
@@ -236,7 +237,7 @@
 			rprintf(FINFO,
 				"[%s] _exit_cleanup(code=%d, file=%s, line=%d): "
 				"about to call exit(%d)%s\n",
-				who_am_i(), first_code, exit_file, exit_line, exit_code,
+				who_am_i(), first_code, basename((char *)exit_file), exit_line, exit_code,
 				dry_run ? " (DRY RUN)" : "");
 		}
 
