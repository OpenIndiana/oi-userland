--- a/iaxmodem.c
+++ b/iaxmodem.c
@@ -143,6 +143,7 @@
 static int defskew = 0;
 static int skew;
 static int audiobuflen = 100;
+static int nulldata = 0;
 
 struct modem {
     struct modem *next;
@@ -608,6 +609,7 @@
 		if (gothup) sighandler(SIGHUP);
 	    }
 	    modemstate = MODEM_ONHOOK;
+	    nulldata = 0;
 	    break;
 	case AT_MODEM_CONTROL_CTS:
 	    {
@@ -670,6 +672,7 @@
     printlog(LOG_INFO, "Reached end of recording to replay.  Simulating hangup.\n");
     phonestate = PHONE_FREED;
     modemstate = MODEM_ONHOOK;
+    nulldata = 0;
     t31_call_event(s, AT_CALL_EVENT_HANGUP);
     iax_hangup(session[0], "Normal disconnect");
     if (gothup) sighandler(SIGHUP);
@@ -1205,6 +1208,7 @@
 	    iax_destroy(session[0]);
 	    phonestate = PHONE_FREED;
 	    modemstate = MODEM_ONHOOK;
+	    nulldata = 0;
 	    if (gothup) sighandler(SIGHUP);
 	}
 	/*
@@ -1344,6 +1348,7 @@
 		    case IAX_EVENT_BUSY:
 			phonestate = PHONE_FREED;
 			modemstate = MODEM_ONHOOK;
+			nulldata = 0;
 			t31_call_event(&t31_state, AT_CALL_EVENT_BUSY);
 			iax_hangup(session[0], "Normal disconnect");
 			if (gothup) sighandler(SIGHUP);
@@ -1357,6 +1362,7 @@
 			    modemstate = MODEM_ONHOOK;
 			}
 			phonestate = PHONE_FREED;
+			nulldata = 0;
 			gettimeofday(&lasthangup, NULL);
 			if (record) {
 			    if (dspaudiofd > 0) {
@@ -1524,8 +1530,46 @@
 				}
 				if (record) write(iaxaudiofd, audiodata, samples*sizeof(int16_t));
 			    }
-			    if (!dialextra && modemstate == MODEM_CONNECTED && t31_rx(&t31_state, audiodata, samples)) {
-				printlog(LOG_ERROR, "Error sending %d samples of IAX audio to DSP.\n", samples);
+			    if (!dialextra && modemstate == MODEM_CONNECTED) {
+				/*
+				 * We try to deal with upstream jitter by simply not passing null data
+				 * to the DSP unless it's outside the expected size of jitter.
+				 * Normal gaps of silence between signals in fax audio are as short as
+				 * 60ms, so that's about the upper limit of our jitter tolerance.
+				 */
+				for (int i = 0; i < samples; i++) {
+				    if (audiodata[i] == 0) {
+					if (nulldata < 0) {
+					    t31_rx(&t31_state, &audiodata[i], 1);
+					} else {
+					    nulldata++;
+					    if (nulldata > VOIP_PACKET_SIZE*3+3) {
+						/*
+						 * The null data exceeds the length of expected jitter.
+						 * This is presumed to be deliberate silence.
+						 */
+						int16_t zerodata[1] = { 0 };
+						while (nulldata--) t31_rx(&t31_state, zerodata, 1);
+						nulldata = -1;
+					    }
+					}
+				    } else {
+					if (nulldata > 0) {
+					    /*
+					     * We've reached the end of a short segment of null data.
+					     * If it's shorter than expected jitter, then pass it on.
+					     */
+					    if (nulldata < VOIP_PACKET_SIZE-3) {
+						int16_t zerodata[1] = { 0 };
+						while (nulldata--) t31_rx(&t31_state, zerodata, 1);
+					    } else {
+						printlog(LOG_INFO, "Skipped %d samples of null data (presumed upstream jitter).\n", nulldata);
+					    }
+					}
+					t31_rx(&t31_state, &audiodata[i], 1);
+					nulldata = 0;
+				    }
+				}
 			    }
 			}
 			break;
@@ -1543,6 +1587,7 @@
 			    modemstate = MODEM_ONHOOK;
 			}
 			phonestate = PHONE_FREED;
+			nulldata = 0;
 			if (gothup) sighandler(SIGHUP);
 			break;
 		    case IAX_EVENT_DTMF:
