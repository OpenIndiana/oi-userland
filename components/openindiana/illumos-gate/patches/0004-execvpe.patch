This introduces the missing execvpe() function from the exec() family.

From 7e23be7ba93326e2a40c6970249f1b4bd09036af Mon Sep 17 00:00:00 2001
From: Robert Mustacchi <rm@fingolfin.org>
Date: Sun, 13 Mar 2022 19:05:46 +0000
Subject: [PATCH] 7125 Provide execvpe

Change-Id: Ifa6d31089ef23e4232e8fd5734c190a451122f65
---

diff --git a/usr/src/cmd/lp/cmd/lpsched/exec.c b/usr/src/cmd/lp/cmd/lpsched/exec.c
index dd9c939..c968305 100644
--- a/usr/src/cmd/lp/cmd/lpsched/exec.c
+++ b/usr/src/cmd/lp/cmd/lpsched/exec.c
@@ -154,110 +154,6 @@
 	return (strdup(buf));
 }
 
-/* stolen from libc/gen/port/gen/execvp.c */
-static const char *
-execat(const char *s1, const char *s2, char *si)
-{
-        char    *s;
-        int cnt = PATH_MAX + 1; /* number of characters in s2 */
-
-        s = si;
-        while (*s1 && *s1 != ':') {
-                if (cnt > 0) {
-                        *s++ = *s1++;
-                        cnt--;
-                } else
-                        s1++;
-        }
-        if (si != s && cnt > 0) {
-                *s++ = '/';
-                cnt--;
-        }
-        while (*s2 && cnt > 0) {
-                *s++ = *s2++;
-                cnt--;
-        }
-        *s = '\0';
-        return (*s1 ? ++s1: 0);
-}
-
-/*
- * Similiar to execvp(), execpt you can supply an environment and we always
- * use /bin/sh for shell scripts.  The PATH searched is the PATH in the
- * current environment, not the environment in the argument list.
- * This was pretty much stolen from libc/gen/port/execvp.c
- */
-static int
-execvpe(char *name, char *const argv[], char *const envp[])
-{
-	char *path;
-	char fname[PATH_MAX+2];
-	char *newargs[256];
-	int i;
-	const char *cp;
-	unsigned etxtbsy = 1;
-        int eacces = 0;
-
-	if (*name == '\0') {
-		errno = ENOENT;
-		return (-1);
-	}
-
-	if ((path = getenv("PATH")) == NULL)
-		path = "/usr/bin:/bin";
-
-        cp = strchr(name, '/')? (const char *)"": path;
-
-        do {
-                cp = execat(cp, name, fname);
-        retry:
-                /*
-                 * 4025035 and 4038378
-                 * if a filename begins with a "-" prepend "./" so that
-                 * the shell can't interpret it as an option
-                 */
-                if (*fname == '-') {
-                        size_t size = strlen(fname) + 1;
-                        if ((size + 2) > sizeof (fname)) {
-                                errno = E2BIG;
-                                return (-1);
-                        }
-                        (void) memmove(fname + 2, fname, size);
-                        fname[0] = '.';
-                        fname[1] = '/';
-                }
-                (void) execve(fname, argv, envp);
-                switch (errno) {
-                case ENOEXEC:
-                        newargs[0] = "sh";
-                        newargs[1] = fname;
-                        for (i = 1; (newargs[i + 1] = argv[i]) != NULL; ++i) {
-                                if (i >= 254) {
-                                        errno = E2BIG;
-                                        return (-1);
-                                }
-                        }
-                        (void) execve("/bin/sh", newargs, envp);
-                        return (-1);
-                case ETXTBSY:
-                        if (++etxtbsy > 5)
-                                return (-1);
-                        (void) sleep(etxtbsy);
-                        goto retry;
-                case EACCES:
-                        ++eacces;
-                        break;
-                case ENOMEM:
-                case E2BIG:
-                case EFAULT:
-                        return (-1);
-                }
-        } while (cp);
-        if (eacces)
-                errno = EACCES;
-        return (-1);
-}
-
 static char time_buf[50];
 
 /**
diff --git a/usr/src/head/unistd.h b/usr/src/head/unistd.h
index 31550b5..b9cb41e 100644
--- a/usr/src/head/unistd.h
+++ b/usr/src/head/unistd.h
@@ -284,6 +284,9 @@
 extern int execv(const char *, char *const *);
 extern int execve(const char *, char *const *, char *const *);
 extern int execvp(const char *, char *const *);
+#if !defined(_STRICT_SYMBOLS)
+extern int execvpe(const char *, char *const [], char *const []);
+#endif	/* !_STRICT_SYMBOLS */
 extern void _exit(int)
 	__NORETURN;
 /*
diff --git a/usr/src/lib/libc/port/gen/execvp.c b/usr/src/lib/libc/port/gen/execvp.c
index 5e63c7d..3825d73 100644
--- a/usr/src/lib/libc/port/gen/execvp.c
+++ b/usr/src/lib/libc/port/gen/execvp.c
@@ -22,6 +22,7 @@
 /*
  * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ * Copyright 2022 Oxide Computer Company
  */
 
 /*	Copyright (c) 1988 AT&T	*/
@@ -30,6 +31,7 @@
 /*
  *	execlp(name, arg,...,0)	(like execl, but does path search)
  *	execvp(name, argv)	(like execv, but does path search)
+ *	execvpe(name, argv, envp) (like execve, but does path search)
  */
 
 #pragma weak _execlp = execlp
@@ -103,8 +105,9 @@
 	return (err);
 }
 
-int
-execvp(const char *name, char *const *argv)
+static int
+execvpe_int(const char *name, char *const *argv, char *const *envp,
+    boolean_t use_env)
 {
 	const char	*pathstr;
 	char	fname[PATH_MAX+2];
@@ -164,7 +167,11 @@
 			fname[0] = '.';
 			fname[1] = '/';
 		}
-		(void) execv(fname, argv);
+		if (use_env) {
+			(void) execve(fname, argv, envp);
+		} else {
+			(void) execv(fname, argv);
+		}
 		switch (errno) {
 		case ENOEXEC:
 			newargs[0] = "sh";
@@ -196,6 +203,18 @@
 	return (-1);
 }
 
+int
+execvp(const char *file, char *const *argv)
+{
+	return (execvpe_int(file, argv, NULL, B_FALSE));
+}
+
+int
+execvpe(const char *file, char *const *argv, char *const *envp)
+{
+	return (execvpe_int(file, argv, envp, B_TRUE));
+}
+
 static const char *
 execat(const char *s1, const char *s2, char *si)
 {
diff --git a/usr/src/lib/libc/port/mapfile-vers b/usr/src/lib/libc/port/mapfile-vers
index 8b9a2f1..32fc3c5 100644
--- a/usr/src/lib/libc/port/mapfile-vers
+++ b/usr/src/lib/libc/port/mapfile-vers
@@ -78,6 +78,11 @@
 $add amd64
 $endif
 
+SYMBOL_VERSION ILLUMOS_0.40 {
+    protected:
+	execvpe;
+} ILLUMOS_0.39;
+
 SYMBOL_VERSION ILLUMOS_0.39 {
     protected:
 	memrchr;
diff --git a/usr/src/man/man2/Makefile b/usr/src/man/man2/Makefile
index 60ed81d..1fc27a9 100644
--- a/usr/src/man/man2/Makefile
+++ b/usr/src/man/man2/Makefile
@@ -183,6 +183,7 @@
 		execv.2				\
 		execve.2			\
 		execvp.2			\
+		execvpe.2			\
 		faccessat.2			\
 		facl.2				\
 		fchdir.2			\
@@ -300,6 +301,7 @@
 execv.2				:= LINKSRC = exec.2
 execve.2			:= LINKSRC = exec.2
 execvp.2			:= LINKSRC = exec.2
+execvpe.2			:= LINKSRC = exec.2
 
 _Exit.2				:= LINKSRC = exit.2
 _exit.2				:= LINKSRC = exit.2
diff --git a/usr/src/man/man2/exec.2 b/usr/src/man/man2/exec.2
index f89347d..0e44b66 100644
--- a/usr/src/man/man2/exec.2
+++ b/usr/src/man/man2/exec.2
@@ -47,7 +47,7 @@
 .\"
 .TH EXEC 2 "Oct 27, 2015"
 .SH NAME
-exec, execl, execle, execlp, execv, execve, execvp \- execute a file
+exec, execl, execle, execlp, execv, execve, execvp, execvpe \- execute a file
 .SH SYNOPSIS
 .LP
 .nf
@@ -85,6 +85,12 @@
 \fBint\fR \fBexecvp\fR(\fBconst char *\fR\fIfile\fR, \fBchar *const\fR \fIargv[]\fR);
 .fi
 
+.LP
+.nf
+\fBint\fR \fBexecvpe\fR(\fBconst char *\fR\fIpath\fR, \fBchar *const\fR \fIargv[]\fR,
+     \fBchar *const\fR \fIenvp[]\fR);
+.fi
+
 .SH DESCRIPTION
 .LP
 Each of the functions in the \fBexec\fR family replaces the current process
@@ -165,7 +171,7 @@
 is obtained by a search of the directories passed in the \fBPATH\fR environment
 variable (see \fBenviron\fR(7)). The environment is supplied typically by the
 shell. If the process image file is not a valid executable object file,
-\fBexeclp()\fR and \fBexecvp()\fR use the contents of that file as standard
+\fBexeclp()\fR, \fBexecvp()\fR, and \fBexecvpe()\R use the contents of that file as standard
 input to the shell. In this case, the shell becomes the new process image. The
 standard to which the caller conforms determines which shell is used. See
 \fBstandards\fR(7).
@@ -667,7 +673,7 @@
 
 .sp
 .LP
-The \fBexec\fR functions, except for \fBexeclp()\fR and \fBexecvp()\fR, will
+The \fBexec\fR functions, except for \fBexeclp()\fR, \fBexecvp()\fR, and \fBexecvpe()\fR will
 fail if:
 .sp
 .ne 2
diff --git a/usr/src/pkg/manifests/system-kernel.man2.inc b/usr/src/pkg/manifests/system-kernel.man2.inc
index b902ea3..212e59e 100644
--- a/usr/src/pkg/manifests/system-kernel.man2.inc
+++ b/usr/src/pkg/manifests/system-kernel.man2.inc
@@ -61,6 +61,7 @@
 link path=usr/share/man/man2/execv.2 target=exec.2
 link path=usr/share/man/man2/execve.2 target=exec.2
 link path=usr/share/man/man2/execvp.2 target=exec.2
+link path=usr/share/man/man2/execvpe.2 target=exec.2
 file path=usr/share/man/man2/exit.2
 link path=usr/share/man/man2/faccessat.2 target=access.2
 link path=usr/share/man/man2/facl.2 target=acl.2
