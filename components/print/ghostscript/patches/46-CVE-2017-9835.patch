From: Markus Koschany <apo@debian.org>
Date: Mon, 31 Jul 2017 20:13:40 +0200
Subject: CVE-2017-9835

Bug-Debian: https://bugs.debian.org/869907
Bug-Upstream: https://bugs.ghostscript.com/show_bug.cgi?id=697985
Origin: http://git.ghostscript.com/?p=ghostpdl.git;a=commit;h=cfde94be1d4286bc47633c6e6eaf4e659bd78066
---
 base/gsalloc.c | 42 ++++++++++++++++++++++++++++--------------
 1 file changed, 28 insertions(+), 14 deletions(-)

diff --git a/base/gsalloc.c b/base/gsalloc.c
index bd3ea71..e3d0203 100644
--- ghostscript-9.00/base/gsalloc.c.~1~	2017-08-29 12:25:03.331285657 +0000
+++ ghostscript-9.00/base/gsalloc.c	2017-08-29 12:36:09.523283584 +0000
@@ -603,12 +603,27 @@
     alloc_trace("|+<.", imem, cname, pstype, size, obj);
     return obj;
 }
+static inline bool
+alloc_array_check_size(ulong num_elements, ulong elt_size, ulong *lsize)
+{
+    int64_t s = (int64_t)num_elements * elt_size;
+    if (s > max_uint) {
+        return false;
+    }
+    *lsize = (ulong)s;
+    return true;
+}
 static byte *
 i_alloc_byte_array(gs_memory_t * mem, uint num_elements, uint elt_size,
 		   client_name_t cname)
 {
     gs_ref_memory_t * const imem = (gs_ref_memory_t *)mem;
-    obj_header_t *obj = alloc_obj(imem, (ulong) num_elements * elt_size,
+    ulong lsize;
+    obj_header_t *obj;
+ 
+    if (alloc_array_check_size(num_elements, elt_size, &lsize) == false)
+        return NULL;
+    obj = alloc_obj(imem, lsize,
 				  &st_bytes, ALLOC_DIRECT, cname);
 
     if_debug6('A', "[a%d:+b.]%s -bytes-*(%lu=%u*%u) = 0x%lx\n",
@@ -622,7 +637,12 @@
 			     uint elt_size, client_name_t cname)
 {
     gs_ref_memory_t * const imem = (gs_ref_memory_t *)mem;
-    obj_header_t *obj = alloc_obj(imem, (ulong) num_elements * elt_size,
+    ulong lsize;
+    obj_header_t *obj;
+
+    if (alloc_array_check_size(num_elements, elt_size, &lsize) == false)
+        return NULL;
+    obj = alloc_obj(imem, lsize,
 				  &st_bytes, ALLOC_IMMOVABLE | ALLOC_DIRECT,
 				  cname);
 
@@ -638,6 +658,7 @@
 {
     gs_ref_memory_t * const imem = (gs_ref_memory_t *)mem;
     obj_header_t *obj;
+    ulong lsize;
 
     ALLOC_CHECK_SIZE(pstype);
 #ifdef DEBUG
@@ -647,9 +668,9 @@
 	return NULL;		/* fail */
     }
 #endif
-    obj = alloc_obj(imem,
-		    (ulong) num_elements * pstype->ssize,
-		    pstype, ALLOC_DIRECT, cname);
+    if (alloc_array_check_size(num_elements, pstype->ssize, &lsize) == false)
+        return NULL;
+    obj = alloc_obj(imem, lsize, pstype, ALLOC_DIRECT, cname);
     if_debug7('A', "[a%d:+<.]%s %s*(%lu=%u*%u) = 0x%lx\n",
 	      alloc_trace_space(imem), client_name_string(cname),
 	      struct_type_name_string(pstype),
@@ -663,11 +684,12 @@
 {
     gs_ref_memory_t * const imem = (gs_ref_memory_t *)mem;
     obj_header_t *obj;
+    ulong lsize;
 
     ALLOC_CHECK_SIZE(pstype);
-    obj = alloc_obj(imem,
-		    (ulong) num_elements * pstype->ssize,
-		    pstype, ALLOC_IMMOVABLE | ALLOC_DIRECT, cname);
+    if (alloc_array_check_size(num_elements, pstype->ssize, &lsize) == false)
+        return NULL;
+    obj = alloc_obj(imem, lsize, pstype, ALLOC_IMMOVABLE | ALLOC_DIRECT, cname);
     if_debug7('A', "[a%d|+<.]%s %s*(%lu=%u*%u) = 0x%lx\n",
 	      alloc_trace_space(imem), client_name_string(cname),
 	      struct_type_name_string(pstype),
