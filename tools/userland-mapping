#!/usr/bin/python2.7

#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#

#
# Copyright 2018 Adam Stevko
#

#
# mapping.py - generate mapping between component FMRI and component package names, to be used for different purposes,
# e.g. checking for outdated pacakges, vulnerable packages etc.
#

from __future__ import print_function, absolute_import

import argparse
import json
import os
import re
import logging
import subprocess
import multiprocessing

try:
    from scandir import walk
except ImportError:
    from os import walk

logger = logging.getLogger('userland-mapping')

COMONENT_MAPPING_FILENAME = 'component_mapping.json'


def find_component_paths(path, subdir='components', debug=False):
    expression = re.compile(r'.+\.p5m$', re.IGNORECASE)

    if debug:
        logger.debug('searching %s for component directories', path)

    paths = []
    workspace_path = os.path.join(path, subdir)

    for dirpath, dirnames, filenames in walk(workspace_path):
        for name in filenames:
            if expression.match(name):
                if debug:
                    logger.debug('found %s', dirpath)
                paths.append(dirpath)
                del dirnames[:]
                break

    return paths


def generate_component_data(component_path, debug=False):
    result = []

    if debug:
        logger.debug('Executing \'gmake print-value-COMPONENT_NAME print-package-names\' in %s', component_path)

    proc = subprocess.Popen(['gmake', 'print-value-COMPONENT_NAME', 'print-package-names'],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            cwd=component_path)

    for out in proc.stdout:
        result.append(out.rstrip())

    component_name = result[0]
    component_fmris = result[1:]
    component_relative_path = component_path.split(os.environ['WS_TOP'])[-1].replace('/', '', 1)

    return component_fmris, component_name, component_relative_path


def generate_userland_mapping(workspace_path, subdir='components', debug=False):
    mapping = []

    paths = find_component_paths(path=workspace_path, subdir=subdir, debug=debug)
    pool = multiprocessing.Pool(processes=multiprocessing.cpu_count())
    results = [pool.apply(generate_component_data, args=(path, debug)) for path in paths]

    for component_fmris, component_name, component_relative_path in results:
        for component_fmri in component_fmris:
            mapping.append({'component_name': component_name,
                            'component_fmri': component_fmri,
                            'component_dir': component_relative_path})

    component_mapping_file = os.path.join(workspace_path, subdir, COMONENT_MAPPING_FILENAME)
    with open(component_mapping_file, 'w') as f:
        f.write(json.dumps(mapping, sort_keys=True, indent=4))


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument('-w', '--workspace', default=os.getenv('WS_TOP'), help='Path to workspace')
    parser.add_argument('--subdir', default='components', help='Directory holding components')
    parser.add_argument('-d', '--debug', action='store_true', default=False)

    args = parser.parse_args()

    workspace = args.workspace
    subdir = args.subdir
    debug = args.debug

    generate_userland_mapping(workspace_path=workspace, subdir=subdir, debug=debug)


if __name__ == '__main__':
    main()
