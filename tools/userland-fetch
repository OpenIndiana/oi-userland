#!/usr/bin/python3.5
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright (c) 2010, 2016, Oracle and/or its affiliates. All rights reserved.
#
#
# userland-fetch - a file download utility
#
#  A simple program similiar to wget(1), but handles local file copy, ignores
#  directories, and verifies file hashes.
#

import errno
import os
import sys
import shutil
import json
import subprocess
import re
import gzip
import bz2
from urllib.parse import splittype, splithost
from urllib.request import urlopen
from urllib.error import HTTPError
from urllib.request import Request
import hashlib
from http.client import BadStatusLine


def printIOError(e, txt):
    """ Function to decode and print IOError type exception """
    print("I/O Error: " + txt + ": ")
    try:
        (code, message) = e
        print(str(message) + " (" + str(code) + ")")
    except:
        print(str(e))


def validate_signature(path, signature):
    """Given paths to a file and a detached PGP signature, verify that
    the signature is valid for the file.  Current configuration allows for
    unrecognized keys to be downloaded as necessary."""

    # Find the root of the repo so that we can point GnuPG at the right
    # configuration and keyring.
    proc = subprocess.Popen(["git", "rev-parse", "--show-toplevel"], stdout=subprocess.PIPE,
                            universal_newlines=True)
    proc.wait()
    if proc.returncode != 0:
        return False
    out, err = proc.communicate()
    gpgdir = os.path.join(out.strip(), "tools", ".gnupg")

    # Skip the permissions warning: none of the information here is private,
    # so not having to worry about getting git keeping the directory
    # unreadable is just simplest.
    try:
        proc = subprocess.Popen(["gpg2", "--verify",
                                 "--no-permission-warning", "--homedir", gpgdir, signature,
                                 path], stdin=open("/dev/null"),
                                stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                                universal_newlines=True)
    except OSError as e:
        # If the executable simply couldn't be found, just skip the
        # validation.
        if e.errno == errno.ENOENT:
            return False
        raise

    proc.wait()
    if proc.returncode != 0:
        # Only print GnuPG's output when there was a problem.
        print(proc.stdout.read())
        return False
    return True


def validate(file, hash):
    """Given a file-like object and a hash string, verify that the hash
    matches the file contents."""

    try:
        algorithm, hashvalue = hash.split(':')
    except:
        algorithm = "sha256"

    # force migration away from sha1
    if algorithm == "sha1":
        algorithm = "sha256"

    try:
        m = hashlib.new(algorithm)
    except ValueError:
        return False

    try:
        block = file.read()
        m.update(block)
        return "%s:%s" % (algorithm, m.hexdigest())
    except IOError as err:
        print(str(err), end=' ')

    return "%s:" % (algorithm)



def validate_container(filename, hash):
    """Given a file path and a hash string, verify that the hash matches the
    file contents."""

    try:
        file = open(filename, 'rb')
    except IOError as e:
        printIOError(e, "Can't open file " + filename)
        return False
    return validate(file, hash)


def validate_payload(filename, hash):
    """Given a file path and a hash string, verify that the hash matches the
    payload (uncompressed content) of the file."""

    expr_bz = re.compile('.+\.bz2$', re.IGNORECASE)
    expr_gz = re.compile('.+\.gz$', re.IGNORECASE)
    expr_tgz = re.compile('.+\.tgz$', re.IGNORECASE)

    try:
        if expr_bz.match(filename):
            file = bz2.BZ2File(filename, 'rb')
        elif expr_gz.match(filename):
            file = gzip.GzipFile(filename, 'rb')
        elif expr_tgz.match(filename):
            file = gzip.GzipFile(filename, 'rb')
        else:
            return False
    except IOError as e:
        printIOError(e, "Can't open archive " + filename)
        return False
    return validate(file, hash)


def download(url, filename=None, user_agent_arg=None, quiet=None):
    """Download the content at the given URL to the given filename
    (defaulting to the basename of the URL if not given.  If 'quiet' is
    True, throw away any error messages.  Returns the name of the file to
    which the content was donloaded."""

    src = None

    try:
        req = Request(url)
        if user_agent_arg is not None:
            req.add_header("User-Agent", user_agent_arg)
        src = urlopen(req)
    except IOError as e:
        if not quiet:
            printIOError(e, "Can't open url " + url)
        return None
    except BadStatusLine as e:
        if not quiet:
            print("Can't open url %s: server answered with code which we couldn't understand " % (url))
        return None

    # 3xx, 4xx and 5xx (f|ht)tp codes designate unsuccessfull action
    if src.getcode() and (3 <= int(src.getcode() / 100) <= 5):
        if not quiet:
            print("Error code: " + str(src.getcode()))
        return None

    if filename is None:
        filename = src.geturl().split('/')[-1]

    try:
        dst = open(filename, 'wb')
    except IOError as e:
        if not quiet:
            printIOError(e, "Can't open file " + filename + " for writing")
        src.close()
        return None

    dst.write(src.read())

    src.close()
    dst.close()

    # return the name of the file that we downloaded the data to.
    return filename


def download_paths(search, filename, url):
    """Returns a list of URLs where the file 'filename' might be found,
    using 'url', 'search', and $DOWNLOAD_SEARCH_PATH as places to look.

    If 'filename' is None, then the list will simply contain 'url'."""

    urls = list()

    if filename is not None:
        tmp = os.getenv('DOWNLOAD_SEARCH_PATH')
        if tmp:
            search += tmp.split(' ')

        file = os.path.basename(filename)

        urls = [base + '/' + file for base in search]

        # filename should always be first
        if filename in urls:
            urls.remove(filename)
        urls.insert(0, filename)

    # command line url is a fallback, so it's last
    if url is not None and url not in urls:
        scheme, path = splittype(url)
        if scheme == "pypi":
            url = pypi_url(url, os.path.basename(filename))
        if url != None and url not in urls:
            urls.append(url)

    # last resort path
    if filename is not None:
        tmp = os.getenv('DOWNLOAD_FALLBACK_PATH')
        if tmp:
            file = os.path.basename(filename)

            urls += [base + '/' + file for base in tmp.split(' ')]

    return urls

def pypi_url(url, filename):
	"""Given a pypi: URL, return the real URL for that component/version.

	The pypi scheme has a host (with an empty host defaulting to
	pypi.python.org), and a path that should be of the form
	"component==version".  Other specs could be supported, but == is the
	only thing that makes sense in this context.

	The filename argument is the name of the expected file to download, so
	that when pypi gives us multiple archives to choose from, we can pick
	the right one.
	"""

	host, path = splithost(splittype(url)[1])

	# We have to use ==; anything fancier would require pkg_resources, but
	# really that's the only thing that makes sense in this context.
	try:
		name, version = re.match("/(.*)==(.*)$", path).groups()
	except AttributeError:
		print("PyPI URLs must be of the form 'pypi:///component==version'")
		return None

	if not host:
		jsurl = "https://pypi.python.org/pypi/%s/json" % name
	else:
		jsurl = "https://%s/pypi/%s/json" % (host, name)

	try:
		f = urlopen(jsurl, data=None)
	except HTTPError as e:
		if e.getcode() == 404:
			print("Unknown component '%s'" % name)
		else:
			printIOError(e, "Can't open PyPI JSON url %s" % url)
		return None
	except IOError as e:
		printIOError(e, "Can't open PyPI JSON url %s" % url)
		return None
	content = f.read().decode("utf-8")
	js = json.loads(content)
	try:
		verblock = js["releases"][version]
	except KeyError:
		print("Unknown version '%s'" % version)
		return None

	urls = [ d["url"] for d in verblock ]
	for archiveurl in urls:
		if archiveurl.endswith("/%s" % filename):
			return archiveurl

	if urls:
		print("None of the following URLs delivers '%s':" % filename)
		print("  " + "\n  ".join(urls))
	else:
		print("Couldn't find any suitable URLs")
	return None

def download_from_paths(search_list, file_arg, url, link_arg, quiet=False):
    """Attempts to download a file from a number of possible locations.
    Generates a list of paths where the file ends up on the local
    filesystem.  This is a generator because while a download might be
    successful, the signature or hash may not validate, and the caller may
    want to try again from the next location.  The 'link_arg' argument is a
    boolean which, when True, specifies that if the source is not a remote
    URL and not already found where it should be, to make a symlink to the
    source rather than copying it."""

    for url in download_paths(search_list, file_arg, url):
        if not quiet:
            print("Source %s..." % url, end=' ')

        scheme, path = splittype(url)
        name = file_arg

        if scheme in [None, 'file']:
            if os.path.exists(path) is False:
                if not quiet:
                    print("not found, skipping file copy")
                continue
            elif name and name != path:
                if link_arg is False:
                    if not quiet:
                        print("\n    copying...")
                    shutil.copy2(path, name)
                else:
                    if not quiet:
                        print("\n    linking...")
                    os.symlink(path, name)
        elif scheme in ['http', 'https', 'ftp']:
            if not quiet:
                print("\n    downloading...", end=' ')
            name = download(url, file_arg, quiet)
            if name is None:
                if not quiet:
                    print("failed")
                continue

        yield name


def usage():
    print("Usage: %s [-a|--user-agent (user-agent)] [-f|--file (file)] [-l|--link] " \
        "[-k|--keep] [-h|--hash (hash)] [-s|--search (search-dir)] " \
        "[-S|--sigurl (signature-url)] --url (url)" % (sys.argv[0].split('/')[-1]))
    sys.exit(1)


def main():
    import getopt

    sys.stdout.flush()

    user_agent_arg = None
    file_arg = None
    link_arg = False
    keep_arg = False
    hash_arg = None
    url_arg = None
    sig_arg = None
    search_list = list()

    try:
        opts, args = getopt.getopt(sys.argv[1:], "a:f:h:lks:u:",
                                   ["file=", "link", "keep", "hash=", "search=", "url=",
                                    "sigurl=", "user-agent="])
    except getopt.GetoptError as err:
        print(str(err))
        usage()

    for opt, arg in opts:
        if opt in ["-a", "--user-agent"]:
            user_agent_arg = arg
        elif opt in ["-f", "--file"]:
            file_arg = arg
        elif opt in ["-l", "--link"]:
            link_arg = True
        elif opt in ["-k", "--keep"]:
            keep_arg = True
        elif opt in ["-h", "--hash"]:
            hash_arg = arg
        elif opt in ["-s", "--search"]:
            search_list.append(arg)
        elif opt in ["-S", "--sigurl"]:
            sig_arg = arg
        elif opt in ["-u", "--url"]:
            url_arg = arg
        else:
            assert False, "unknown option"

    if url_arg is None:
        usage()

    for name in download_from_paths(search_list, file_arg, url_arg, link_arg):
        print("\n    validating signature...", end=' ')

        sig_valid = False
        if not sig_arg:
            print("skipping (no signature URL)")
        else:
            # Put the signature file in the same directory as the
            # file we're downloading.
            sig_file = os.path.join(
                os.path.dirname(file_arg),
                os.path.basename(sig_arg))
            # Validate with the first signature we find.
            for sig_file in download_from_paths(search_list, sig_file,
                                                sig_arg, link_arg, True):
                if sig_file:
                    if validate_signature(name, sig_file):
                        print("ok")
                        sig_valid = True
                    else:
                        print("failed")
                    break
                else:
                    continue
            else:
                print("failed (couldn't fetch signature)")

        print("    validating hash...", end=' ')
        realhash = validate_container(name, hash_arg)

        if not hash_arg:
            print("skipping (no hash)")
            print("hash is: %s" % realhash)
        elif realhash == hash_arg:
            print("ok")
        else:
            payloadhash = validate_payload(name, hash_arg)
            if payloadhash == hash_arg:
                print("ok")
            else:
                # If the signature validated, then we assume
                # that the expected hash is just a typo, but we
                # warn just in case.
                if sig_valid:
                    print("invalid hash!")
                else:
                    print("corruption detected")

                print("    expected: %s" % hash_arg)
                print("    actual:   %s" % realhash)
                print("    payload:  %s" % payloadhash)

                # An invalid hash shouldn't cause us to remove
                # the target file if the signature was valid.
                # Also, if the developer is in progress of upgrading
                # some package version or introduces a new one, and
                # explicitly ran "gmake fetch", keep the downloaded
                # file (Makefile is not in position to have a valid
                # checksum entry just yet) so it does not have to be
                # downloaded twice.
                if not sig_valid:

                    if keep_arg == False:
                        try:
                            print("\nWARN: Removing the corrupt downloaded file")
                            os.remove(name)
                        except OSError:
                            pass
                    else:
                        print("\nINFO: Keeping the downloaded file because asked to")

                    continue

        sys.exit(0)
    sys.exit(1)


if __name__ == "__main__":
    main()
